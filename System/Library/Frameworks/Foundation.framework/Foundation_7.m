uint64_t static ICUPercentNumberFormatter.create(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[18];
  _BYTE v66[152];

  v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  v60 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v61 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v53 - v5;
  v63 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
  v7 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 472);
  swift_unknownObjectRetain();
  v10 = v9(ObjectType, v7);
  v12 = v11;
  swift_unknownObjectRelease();
  v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v13(v65, ObjectType, v7);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v63, (uint64_t)v6, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v14 = (uint64_t *)&v6[*(int *)(v2 + 20)];
  *v14 = v10;
  v14[1] = v12;
  v63 = v2;
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)&v6[*(int *)(v2 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v16 = static ICUPercentNumberFormatter.cache;
  v15 = *(_QWORD *)algn_1EDC3B488;
  v17 = (uint64_t *)(*(_QWORD *)algn_1EDC3B488 + 16);
  v18 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC3B488 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v18);
  v19 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)v17, (uint64_t)v6);
  os_unfair_lock_unlock(v18);
  swift_release();
  if (v19 != 1)
    goto LABEL_53;
  closure #1 in static ICUPercentNumberFormatter._create(with:)((uint64_t)v6, v65);
  swift_retain();
  os_unfair_lock_lock(v18);
  v20 = *(_QWORD *)(v15 + 16);
  v21 = (uint64_t)v6;
  if (v16 >= *(_QWORD *)(v20 + 16))
    swift_bridgeObjectRetain();
  else
    *v17 = MEMORY[0x1E0DEE9E0];
  v19 = v65[0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v64 = *v17;
  v23 = v64;
  *v17 = 0x8000000000000000;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v16) = v24;
    if (*(_QWORD *)(v23 + 24) < v28)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
      v29 = v64;
      v6 = (char *)v21;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      if ((v16 & 1) != (v31 & 1))
        goto LABEL_56;
      v25 = v30;
      if ((v16 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v32 = *(_QWORD *)(v29 + 56);
      v33 = 8 * v25;
      swift_release();
      *(_QWORD *)(v32 + v33) = v19;
LABEL_52:
      *(_QWORD *)(v15 + 16) = v29;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v18);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v6, type metadata accessor for ICUPercentNumberFormatter.Signature);
      return v19;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v29 = v23;
      v6 = (char *)v21;
      if ((v24 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      v50 = v61;
      v51 = v25;
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v6, v61, type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v51, v50, v19, (_QWORD *)v29);
      goto LABEL_52;
    }
  }
  v54 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  v34 = static _DictionaryStorage.copy(original:)();
  v29 = v34;
  if (!*(_QWORD *)(v23 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v6 = (char *)v21;
    v25 = v54;
    if ((v16 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v35 = (char *)(v34 + 64);
  v36 = 1 << *(_BYTE *)(v29 + 32);
  v56 = (char *)(v23 + 64);
  v37 = (unint64_t)(v36 + 63) >> 6;
  if (v29 != v23 || v35 >= &v56[8 * v37])
    memmove(v35, v56, 8 * v37);
  v38 = 0;
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v23 + 16);
  v39 = 1 << *(_BYTE *)(v23 + 32);
  v40 = -1;
  if (v39 < 64)
    v40 = ~(-1 << v39);
  v41 = v40 & *(_QWORD *)(v23 + 64);
  v55 = (unint64_t)(v39 + 63) >> 6;
  v57 = v20;
  v42 = v61;
  while (1)
  {
    if (v41)
    {
      v62 = (v41 - 1) & v41;
      v63 = v38;
      v43 = __clz(__rbit64(v41)) | (v38 << 6);
      goto LABEL_24;
    }
    v46 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v46 >= v55)
      goto LABEL_50;
    v47 = *(_QWORD *)&v56[8 * v46];
    v48 = v38 + 1;
    if (!v47)
    {
      v48 = v46 + 1;
      if (v46 + 1 >= v55)
        goto LABEL_50;
      v47 = *(_QWORD *)&v56[8 * v48];
      if (!v47)
      {
        v48 = v46 + 2;
        if (v46 + 2 >= v55)
          goto LABEL_50;
        v47 = *(_QWORD *)&v56[8 * v48];
        if (!v47)
        {
          v48 = v46 + 3;
          if (v46 + 3 >= v55)
            goto LABEL_50;
          v47 = *(_QWORD *)&v56[8 * v48];
          if (!v47)
          {
            v48 = v46 + 4;
            if (v46 + 4 >= v55)
              goto LABEL_50;
            v47 = *(_QWORD *)&v56[8 * v48];
            if (!v47)
            {
              v48 = v46 + 5;
              if (v46 + 5 >= v55)
                goto LABEL_50;
              v47 = *(_QWORD *)&v56[8 * v48];
              if (!v47)
              {
                v48 = v46 + 6;
                if (v46 + 6 >= v55)
                  goto LABEL_50;
                v47 = *(_QWORD *)&v56[8 * v48];
                if (!v47)
                {
                  v48 = v46 + 7;
                  if (v46 + 7 >= v55)
                    goto LABEL_50;
                  v47 = *(_QWORD *)&v56[8 * v48];
                  if (!v47)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v62 = (v47 - 1) & v47;
    v63 = v48;
    v43 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_24:
    v44 = *(_QWORD *)(v23 + 48);
    v59 = *(_QWORD *)(v60 + 72) * v43;
    outlined init with copy of ICUNumberFormatter.Signature(v44 + v59, v42, type metadata accessor for ICUPercentNumberFormatter.Signature);
    v45 = 8 * v43;
    v58 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + v45);
    outlined init with take of ICUNumberFormatter.Signature(v42, *(_QWORD *)(v29 + 48) + v59, type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v29 + 56) + v45) = v58;
    swift_retain();
    v41 = v62;
    v38 = v63;
  }
  v49 = v46 + 8;
  if (v49 >= v55)
    goto LABEL_50;
  v47 = *(_QWORD *)&v56[8 * v49];
  if (v47)
  {
    v48 = v49;
    goto LABEL_49;
  }
  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v48 >= v55)
      goto LABEL_50;
    v47 = *(_QWORD *)&v56[8 * v48];
    ++v49;
    if (v47)
      goto LABEL_49;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static ICUPercentNumberFormatter.create<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, __n128))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[18];
  _BYTE v74[152];

  v8 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  v69 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v70 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v61 - v12;
  v14 = a1 + *(int *)(a4(0, a2, a3, v11) + 36);
  v15 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 472);
  swift_unknownObjectRetain();
  v18 = v17(ObjectType, v15);
  v20 = v19;
  swift_unknownObjectRelease();
  v21 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 464);
  swift_unknownObjectRetain();
  v21(v73, ObjectType, v15);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v14, (uint64_t)v13, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v22 = (uint64_t *)&v13[*(int *)(v8 + 20)];
  *v22 = v18;
  v22[1] = v20;
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)&v13[*(int *)(v8 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v23 = &v61;
  v25 = static ICUPercentNumberFormatter.cache;
  v24 = *(_QWORD *)algn_1EDC3B488;
  v26 = (uint64_t *)(*(_QWORD *)algn_1EDC3B488 + 16);
  v27 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC3B488 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v27);
  v28 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)v26, (uint64_t)v13);
  os_unfair_lock_unlock(v27);
  swift_release();
  if (v28 != 1)
    goto LABEL_53;
  closure #1 in static ICUPercentNumberFormatter._create(with:)((uint64_t)v13, v73);
  swift_retain();
  os_unfair_lock_lock(v27);
  v29 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 16);
  v71 = *(_QWORD *)(v24 + 16);
  if (v25 >= v29)
    swift_bridgeObjectRetain();
  else
    *v26 = MEMORY[0x1E0DEE9E0];
  v28 = v73[0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72 = *v26;
  v31 = v72;
  *v26 = 0x8000000000000000;
  v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
  v34 = *(_QWORD *)(v31 + 16);
  v35 = (v32 & 1) == 0;
  v36 = v34 + v35;
  if (__OFADD__(v34, v35))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v23) = v32;
    if (*(_QWORD *)(v31 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      v37 = v72;
      v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
      if ((v23 & 1) != (v39 & 1))
        goto LABEL_56;
      v33 = v38;
      if ((v23 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v40 = *(_QWORD *)(v37 + 56);
      v41 = 8 * v33;
      swift_release();
      *(_QWORD *)(v40 + v41) = v28;
LABEL_52:
      *(_QWORD *)(v24 + 16) = v37;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v27);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v13, type metadata accessor for ICUPercentNumberFormatter.Signature);
      return v28;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v37 = v31;
      if ((v32 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      v58 = v70;
      v59 = v33;
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v13, v70, type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v59, v58, v28, (_QWORD *)v37);
      goto LABEL_52;
    }
  }
  v62 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  v42 = static _DictionaryStorage.copy(original:)();
  v37 = v42;
  if (!*(_QWORD *)(v31 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v33 = v62;
    if ((v23 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v43 = (char *)(v42 + 64);
  v44 = 1 << *(_BYTE *)(v37 + 32);
  v64 = (char *)(v31 + 64);
  v45 = (unint64_t)(v44 + 63) >> 6;
  if (v37 != v31 || v43 >= &v64[8 * v45])
    memmove(v43, v64, 8 * v45);
  v46 = 0;
  *(_QWORD *)(v37 + 16) = *(_QWORD *)(v31 + 16);
  v47 = 1 << *(_BYTE *)(v31 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & *(_QWORD *)(v31 + 64);
  v63 = (unint64_t)(v47 + 63) >> 6;
  v50 = v70;
  while (1)
  {
    if (v49)
    {
      v67 = (v49 - 1) & v49;
      v68 = v46;
      v51 = __clz(__rbit64(v49)) | (v46 << 6);
      goto LABEL_24;
    }
    v54 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v54 >= v63)
      goto LABEL_50;
    v55 = *(_QWORD *)&v64[8 * v54];
    v56 = v46 + 1;
    if (!v55)
    {
      v56 = v54 + 1;
      if (v54 + 1 >= v63)
        goto LABEL_50;
      v55 = *(_QWORD *)&v64[8 * v56];
      if (!v55)
      {
        v56 = v54 + 2;
        if (v54 + 2 >= v63)
          goto LABEL_50;
        v55 = *(_QWORD *)&v64[8 * v56];
        if (!v55)
        {
          v56 = v54 + 3;
          if (v54 + 3 >= v63)
            goto LABEL_50;
          v55 = *(_QWORD *)&v64[8 * v56];
          if (!v55)
          {
            v56 = v54 + 4;
            if (v54 + 4 >= v63)
              goto LABEL_50;
            v55 = *(_QWORD *)&v64[8 * v56];
            if (!v55)
            {
              v56 = v54 + 5;
              if (v54 + 5 >= v63)
                goto LABEL_50;
              v55 = *(_QWORD *)&v64[8 * v56];
              if (!v55)
              {
                v56 = v54 + 6;
                if (v54 + 6 >= v63)
                  goto LABEL_50;
                v55 = *(_QWORD *)&v64[8 * v56];
                if (!v55)
                {
                  v56 = v54 + 7;
                  if (v54 + 7 >= v63)
                    goto LABEL_50;
                  v55 = *(_QWORD *)&v64[8 * v56];
                  if (!v55)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v67 = (v55 - 1) & v55;
    v68 = v56;
    v51 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_24:
    v52 = *(_QWORD *)(v31 + 48);
    v66 = *(_QWORD *)(v69 + 72) * v51;
    outlined init with copy of ICUNumberFormatter.Signature(v52 + v66, v50, type metadata accessor for ICUPercentNumberFormatter.Signature);
    v53 = 8 * v51;
    v65 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + v53);
    outlined init with take of ICUNumberFormatter.Signature(v50, *(_QWORD *)(v37 + 48) + v66, type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v37 + 56) + v53) = v65;
    swift_retain();
    v49 = v67;
    v46 = v68;
  }
  v57 = v54 + 8;
  if (v57 >= v63)
    goto LABEL_50;
  v55 = *(_QWORD *)&v64[8 * v57];
  if (v55)
  {
    v56 = v57;
    goto LABEL_49;
  }
  while (1)
  {
    v56 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    if (v56 >= v63)
      goto LABEL_50;
    v55 = *(_QWORD *)&v64[8 * v56];
    ++v57;
    if (v55)
      goto LABEL_49;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t ICUNumberFormatter.attributedFormat(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t *v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t result;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61[3];
  char v62[48];
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[4];

  v4 = BYTE4(a3);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
  if (!v7)
    __asm { BR              X10 }
  v9 = v6;
  v10 = v7;
  v11 = v8;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v61, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], &v63);
  v12 = v63;
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v46 = v9;
    v43 = a4;
    swift_bridgeObjectRetain();
    v45 = v10;
    lazy protocol witness table accessor for type String and conformance String();
    v14 = v11 + 48;
    do
    {
      v51 = v13;
      v15 = *(_DWORD *)(v14 - 16);
      v53 = v46;
      *(_QWORD *)&v54 = v10;
      swift_bridgeObjectRetain();
      v16 = String.Index.init<A>(utf16Offset:in:)();
      v53 = v46;
      *(_QWORD *)&v54 = v10;
      swift_bridgeObjectRetain();
      v17 = String.Index.init<A>(utf16Offset:in:)();
      if (v17 >> 14 < v16 >> 14)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B9A364);
      }
      v18 = v17;
      swift_retain();
      specialized Range<>.init<A>(_range:in:)(v16, v18, (_OWORD *)v12, &v53);
      v19 = v55;
      if ((_QWORD)v55 == 2)
        goto LABEL_26;
      v48 = v54;
      v49 = v53;
      v47 = *((_QWORD *)&v54 + 1);
      v20 = *((_QWORD *)&v55 + 1);
      v22 = *((_QWORD *)&v56 + 1);
      v21 = v56;
      v50 = v57;
      v60 = MEMORY[0x1E0DEE9E0];
      v23 = 0;
      v24 = 2;
      switch(v15)
      {
        case 0:
          goto LABEL_8;
        case 1:
          v23 = 1;
LABEL_8:
          specialized AttributeContainer.subscript.setter(v23);
          break;
        case 2:
          goto LABEL_13;
        case 6:
          v24 = 0;
          goto LABEL_13;
        case 7:
          v24 = 3;
          goto LABEL_13;
        case 8:
          v24 = 4;
          goto LABEL_13;
        case 10:
          v24 = 1;
LABEL_13:
          specialized AttributeContainer.subscript.setter(v24);
          break;
        default:
          break;
      }
      v59 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v25 = *(_OWORD *)(v12 + 32);
        v82[0] = *(_OWORD *)(v12 + 16);
        v82[1] = v25;
        v82[2] = *(_OWORD *)(v12 + 48);
        v44 = v20;
        v26 = v22;
        v27 = *(_QWORD *)(v12 + 64);
        v28 = *(_QWORD *)(v12 + 72);
        v29 = v21;
        v30 = *(_QWORD *)(v12 + 80);
        v31 = *(_QWORD *)(v12 + 88);
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v82);
        swift_unknownObjectRetain();
        v32 = v28;
        v22 = v26;
        v20 = v44;
        v33 = v30;
        v21 = v29;
        v34 = AttributedString.Guts.init(string:runs:)(v82, v27, v32, v33, v31);
        swift_release();
        v12 = v34;
      }
      v35 = *(_OWORD *)(v12 + 32);
      v79 = *(_OWORD *)(v12 + 16);
      v80 = v35;
      v81 = *(_OWORD *)(v12 + 48);
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      v71 = v49;
      v72 = v48;
      v73 = v47;
      v74 = v19;
      v75 = v20;
      v76 = v21;
      v77 = v22;
      v78 = v50;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      swift_release();
      outlined release of Locale((uint64_t)v62);
      outlined release of Locale((uint64_t)&v63);
      v54 = v64;
      v55 = v65;
      v56 = v66;
      v57 = v67;
      v53 = v12;
      if (one-time initialization token for currentIdentity != -1)
        swift_once();
      v36 = (uint64_t *)(static AttributedString.currentIdentity + 16);
      v37 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
      swift_retain();
      os_unfair_lock_lock(v37);
      closure #1 in static AttributedString._nextModifyIdentity.getter(v36, &v52);
      os_unfair_lock_unlock(v37);
      swift_release();
      v38 = v52;
      v58 = v52;
      BigString.init()();
      v52 = 0;
      MEMORY[0x186DA9E90](&v52, 8);
      v39 = v52;
      type metadata accessor for AttributedString.Guts();
      v40 = swift_allocObject();
      v10 = v45;
      if ((BigString.isEmpty.getter() & 1) == 0)
        goto LABEL_25;
      v41 = v69;
      *(_OWORD *)(v40 + 16) = v68;
      *(_OWORD *)(v40 + 32) = v41;
      *(_OWORD *)(v40 + 48) = v70;
      *(_QWORD *)(v40 + 64) = 0;
      *(_QWORD *)(v40 + 72) = 0;
      *(_QWORD *)(v40 + 80) = 0;
      *(_QWORD *)(v40 + 88) = v39;
      swift_release();
      LOBYTE(v52) = 0;
      AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v59, (char *)&v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v58 != v38)
        goto LABEL_27;
      v14 += 24;
      v12 = v53;
      swift_release();
      v13 = v51 - 1;
    }
    while (v51 != 1);
    swift_bridgeObjectRelease();
    a4 = v43;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a4 = v12;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUByteCountNumberFormatter.Signature()
{
  return ICUByteCountNumberFormatter.Signature.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
  ICUByteCountNumberFormatter.Signature.hash(into:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUByteCountNumberFormatter.Signature(uint64_t *a1, uint64_t *a2)
{
  return specialized static ICUByteCountNumberFormatter.Signature.== infix(_:_:)(a1, a2);
}

uint64_t ICUByteCountNumberFormatter.attributedFormat(_:unit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  char v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t *v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t result;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59[3];
  char v60[48];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[4];

  v5 = BYTE4(a3);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
  if (!v8)
    __asm { BR              X10 }
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v41 = a5;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v59, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], &v61);
  v13 = v61;
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    v15 = v12 + 48;
    v43 = v11;
    do
    {
      v49 = v14;
      v16 = *(unsigned int *)(v15 - 16);
      v51 = v10;
      *(_QWORD *)&v52 = v11;
      swift_bridgeObjectRetain();
      v17 = String.Index.init<A>(utf16Offset:in:)();
      v51 = v10;
      *(_QWORD *)&v52 = v11;
      swift_bridgeObjectRetain();
      v18 = String.Index.init<A>(utf16Offset:in:)();
      if (v18 >> 14 < v17 >> 14)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181B9B108);
      }
      v19 = v18;
      swift_retain();
      specialized Range<>.init<A>(_range:in:)(v17, v19, (_OWORD *)v13, &v51);
      v20 = v53;
      if ((_QWORD)v53 == 2)
        goto LABEL_28;
      v46 = v52;
      v47 = v51;
      v45 = *((_QWORD *)&v52 + 1);
      v21 = *((_QWORD *)&v53 + 1);
      v23 = *((_QWORD *)&v54 + 1);
      v22 = v54;
      v48 = v55;
      v58 = MEMORY[0x1E0DEE9E0];
      v24 = 0;
      v25 = 2;
      switch((int)v16)
      {
        case 0:
          goto LABEL_8;
        case 1:
          v24 = 1;
LABEL_8:
          specialized AttributeContainer.subscript.setter(v24);
          break;
        case 2:
          goto LABEL_13;
        case 6:
          v25 = 0;
          goto LABEL_13;
        case 7:
          v25 = 3;
          goto LABEL_13;
        case 8:
          v25 = 4;
          goto LABEL_13;
        case 10:
          v25 = 1;
LABEL_13:
          specialized AttributeContainer.subscript.setter(v25);
          break;
        default:
          break;
      }
      AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(unumberFormatField:unit:)(v16, a4, &v51);
      if (v51 != 12)
        specialized AttributeContainer.subscript.setter(v51);
      v57 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v26 = *(_OWORD *)(v13 + 32);
        v80[0] = *(_OWORD *)(v13 + 16);
        v80[1] = v26;
        v80[2] = *(_OWORD *)(v13 + 48);
        v27 = *(_QWORD *)(v13 + 64);
        v28 = *(_QWORD *)(v13 + 72);
        v42 = v22;
        v29 = *(_QWORD *)(v13 + 80);
        v30 = *(_QWORD *)(v13 + 88);
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v80);
        swift_unknownObjectRetain();
        v31 = v29;
        v22 = v42;
        v32 = AttributedString.Guts.init(string:runs:)(v80, v27, v28, v31, v30);
        swift_release();
        v13 = v32;
      }
      v33 = *(_OWORD *)(v13 + 32);
      v77 = *(_OWORD *)(v13 + 16);
      v78 = v33;
      v79 = *(_OWORD *)(v13 + 48);
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      v69 = v47;
      v70 = v46;
      v71 = v45;
      v72 = v20;
      v73 = v21;
      v74 = v22;
      v75 = v23;
      v76 = v48;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      swift_release();
      outlined release of Locale((uint64_t)v60);
      outlined release of Locale((uint64_t)&v61);
      v52 = v62;
      v53 = v63;
      v54 = v64;
      v55 = v65;
      v51 = v13;
      if (one-time initialization token for currentIdentity != -1)
        swift_once();
      v34 = (uint64_t *)(static AttributedString.currentIdentity + 16);
      v35 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
      swift_retain();
      os_unfair_lock_lock(v35);
      closure #1 in static AttributedString._nextModifyIdentity.getter(v34, &v50);
      os_unfair_lock_unlock(v35);
      swift_release();
      v36 = v50;
      v56 = v50;
      BigString.init()();
      v50 = 0;
      MEMORY[0x186DA9E90](&v50, 8);
      v37 = v50;
      type metadata accessor for AttributedString.Guts();
      v38 = swift_allocObject();
      if ((BigString.isEmpty.getter() & 1) == 0)
        goto LABEL_27;
      v39 = v67;
      *(_OWORD *)(v38 + 16) = v66;
      *(_OWORD *)(v38 + 32) = v39;
      *(_OWORD *)(v38 + 48) = v68;
      *(_QWORD *)(v38 + 64) = 0;
      *(_QWORD *)(v38 + 72) = 0;
      *(_QWORD *)(v38 + 80) = 0;
      *(_QWORD *)(v38 + 88) = v37;
      swift_release();
      LOBYTE(v50) = 0;
      AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v57, (char *)&v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v56 != v36)
        goto LABEL_29;
      v15 += 24;
      v13 = v51;
      swift_release();
      v14 = v49 - 1;
      v11 = v43;
    }
    while (v49 != 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v41 = v13;
  return result;
}

uint64_t type metadata accessor for ICUByteCountNumberFormatter()
{
  return objc_opt_self();
}

void ICUByteCountNumberFormatter.Signature.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  Swift::UInt v31;
  Swift::UInt8 v32;
  Swift::UInt8 v33;
  Swift::UInt8 v34;
  _BYTE v35[144];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  _BYTE v54[144];
  _BYTE v55[144];

  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)&v36, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v36 == 2)
  {
    v3 = 0;
  }
  else
  {
    v3 = v36 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v3);
  v4 = v37;
  if (!v37)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v36);
    v9 = &v36;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v4 + 16));
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v35, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v9 = (uint64_t *)v35;
LABEL_17:
    outlined retain of LocalePreferences(v9);
    if (!v38)
      goto LABEL_11;
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v6 = v4 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 += 16;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v39)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v7 = v40;
    if (!v40)
      goto LABEL_13;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
    v8 = v41;
    if (!v41)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v7 = v40;
  if (v40)
    goto LABEL_20;
LABEL_13:
  Hasher._combine(_:)(0);
  v8 = v41;
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
LABEL_22:
  v11 = v42;
  v10 = v43;
  v13 = v44;
  v12 = v45;
  v14 = v46;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v15 = v10;
    v16 = v13;
    v17 = v12;
    v18 = v14;
    v19 = v11;
    _CFObject.hash(into:)();
    if (v10)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v24 = v14;
    v25 = v10;
    v26 = v13;
    v27 = v12;
    if (v10)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v20 = v10;
      _CFObject.hash(into:)();

      if (v13)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v13)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v13;
    _CFObject.hash(into:)();

    if (v12)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    if (v14)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v12)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v22 = v12;
  _CFObject.hash(into:)();

  if (v14)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v14;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v23 = 0;
LABEL_33:

  v28 = v47;
  if (v28)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v28);
    swift_bridgeObjectRelease();
    v29 = v48;
    if (v48)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v49)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  v29 = v48;
  if (!v48)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v29);
  swift_bridgeObjectRelease();
  if (!v49)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v30 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v31 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v31);
  }
  if (v52 == 2)
  {
    v32 = 0;
  }
  else
  {
    v32 = v52 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v32);
  if (v53 == 2)
  {
    v33 = 0;
  }
  else
  {
    v34 = v53 & 1;
    Hasher._combine(_:)(1u);
    v33 = v34;
  }
  Hasher._combine(_:)(v33);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int ICUByteCountNumberFormatter.Signature.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::UInt v29;
  Swift::UInt8 v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  _BYTE v34[144];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  _BYTE v53[72];
  _BYTE v54[144];
  _BYTE v55[144];

  outlined init with take of LocalePreferences?(v0 + 32, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)&v35, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v35 == 2)
  {
    v1 = 0;
  }
  else
  {
    v1 = v35 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v35);
    v7 = &v35;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v2 + 16));
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v34, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v7 = (uint64_t *)v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    if (!v37)
      goto LABEL_11;
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v5 = v39;
    if (!v39)
      goto LABEL_13;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    v6 = v40;
    if (!v40)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = v39;
  if (v39)
    goto LABEL_20;
LABEL_13:
  Hasher._combine(_:)(0);
  v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  v9 = v41;
  v8 = v42;
  v11 = v43;
  v10 = v44;
  v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v13 = v8;
    v14 = v11;
    v15 = v10;
    v16 = v12;
    v17 = v9;
    _CFObject.hash(into:)();
    if (v8)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v22 = v12;
    v23 = v8;
    v24 = v11;
    v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v18 = v8;
      _CFObject.hash(into:)();

      if (v11)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v19 = v11;
    _CFObject.hash(into:)();

    if (v10)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v10)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v21 = 0;
LABEL_33:

  v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    v27 = v47;
    if (v47)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  v27 = v47;
  if (!v47)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v51 == 2)
  {
    v30 = 0;
  }
  else
  {
    v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    v31 = 0;
  }
  else
  {
    v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    v31 = v32;
  }
  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUByteCountNumberFormatter.Signature()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::UInt v29;
  Swift::UInt8 v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  _BYTE v34[144];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  _BYTE v53[72];
  _BYTE v54[144];
  _BYTE v55[144];

  outlined init with take of LocalePreferences?(v0 + 32, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)&v35, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v35 == 2)
  {
    v1 = 0;
  }
  else
  {
    v1 = v35 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    v7 = &v35;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  v3 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (!v3)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v34, &demangling cache variable for type metadata for LocalePreferences?);
    v7 = (uint64_t *)v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    outlined retain of LocalePreferences(&v35);
    if (!v37)
      goto LABEL_11;
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v5 = v39;
    if (!v39)
      goto LABEL_13;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    v6 = v40;
    if (!v40)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = v39;
  if (v39)
    goto LABEL_20;
LABEL_13:
  Hasher._combine(_:)(0);
  v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  v9 = v41;
  v8 = v42;
  v11 = v43;
  v10 = v44;
  v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v13 = v8;
    v14 = v11;
    v15 = v10;
    v16 = v12;
    v17 = v9;
    _CFObject.hash(into:)();
    if (v8)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v22 = v12;
    v23 = v8;
    v24 = v11;
    v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v18 = v8;
      _CFObject.hash(into:)();

      if (v11)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v19 = v11;
    _CFObject.hash(into:)();

    if (v10)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v10)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v21 = 0;
LABEL_33:

  v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    v27 = v47;
    if (v47)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  v27 = v47;
  if (!v47)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v51 == 2)
  {
    v30 = 0;
  }
  else
  {
    v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    v31 = 0;
  }
  else
  {
    v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    v31 = v32;
  }
  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t ICUMeasurementNumberFormatter.Usage.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B9C7A4 + 4 * aH_5[a1]))(0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_181B9C7A4()
{
  return 0x6E6F73726570;
}

uint64_t sub_181B9C7B8()
{
  return 1685024614;
}

uint64_t sub_181B9C7C8()
{
  return 0x682D6E6F73726570;
}

uint64_t sub_181B9C7EC()
{
  return 1684107122;
}

uint64_t sub_181B9C7FC()
{
  return 0x656C2D6C61636F66;
}

uint64_t sub_181B9C81C()
{
  return 0x6C6C61666E696172;
}

uint64_t sub_181B9C844()
{
  return 0x79746C6269736976;
}

uint64_t sub_181B9C85C()
{
  return 0x6372746D6F726162;
}

uint64_t sub_181B9C874()
{
  return 1684957559;
}

uint64_t sub_181B9C884()
{
  return 0x72656874616577;
}

uint64_t sub_181B9C898()
{
  return 0x6469756C66;
}

uint64_t sub_181B9C8AC()
{
  return 0x6469766F72507361;
}

id *outlined destroy of LocalePreferences(id *a1)
{
  destroy for LocalePreferences(a1);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B9C918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B9C930(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t type metadata accessor for ICUCurrencyNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICUCurrencyNumberFormatter.Signature);
}

BOOL specialized static ICUByteCountNumberFormatter.Signature.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  _BOOL8 result;
  BOOL v15;
  char v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  char v27;
  char v28;
  char v29;
  char v30;
  int v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  char v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  _OWORD v60[7];
  _OWORD v61[2];
  _QWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[28];
  _BYTE v106[144];
  uint64_t v107;
  _BYTE v108[144];
  _BYTE v109[144];
  _BYTE v110[152];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 4), (uint64_t)v109, &demangling cache variable for type metadata for LocalePreferences?);
  v7 = *a2;
  v8 = a2[1];
  v9 = (uint64_t)(a2 + 4);
  v11 = a2[2];
  v10 = a2[3];
  outlined init with take of LocalePreferences?(v9, (uint64_t)v110, &demangling cache variable for type metadata for LocalePreferences?);
  v12 = v3 == v7 && v4 == v8;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    v15 = v5 == v11 && v6 == v10;
    if (v15 || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v16 & 1) != 0))
    {
      outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v108, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v108) == 1)
      {
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
        if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
          return 1;
        goto LABEL_16;
      }
      outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)&v98, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
      {
        v60[6] = v104;
        v61[0] = *(_OWORD *)v105;
        *(_OWORD *)((char *)v61 + 12) = *(_OWORD *)&v105[12];
        v60[2] = v100;
        v60[3] = v101;
        v60[4] = v102;
        v60[5] = v103;
        v60[0] = v98;
        v60[1] = v99;
        outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)&v79, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences(&v79);
        outlined retain of LocalePreferences(v62);
        outlined release of LocalePreferences(v60);
LABEL_16:
        outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v107, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v106);
        return 0;
      }
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v79, &demangling cache variable for type metadata for LocalePreferences?);
      v17 = v98;
      v18 = *((_QWORD *)&v98 + 1);
      v19 = v99;
      v20 = v100;
      v21 = v101;
      v58 = (void *)*((_QWORD *)&v102 + 1);
      v59 = (void *)v102;
      v56 = (void *)*((_QWORD *)&v103 + 1);
      v57 = (void *)v103;
      v54 = *((_QWORD *)&v104 + 1);
      v55 = (void *)v104;
      v52 = *(_QWORD *)&v105[8];
      v53 = *(_QWORD *)v105;
      v22 = *(_QWORD *)&v105[16];
      v50 = v105[25];
      v51 = v105[24];
      v48 = v105[27];
      v49 = v105[26];
      if (v98 == 2)
      {
        if (v79 != 2)
          goto LABEL_56;
      }
      else if (v79 == 2 || ((((v98 & 1) == 0) ^ v79) & 1) == 0)
      {
        goto LABEL_56;
      }
      if (*((_QWORD *)&v98 + 1))
      {
        if (!v80 || (specialized static Array<A>.== infix(_:_:)(*((_QWORD **)&v98 + 1), v80) & 1) == 0)
          goto LABEL_53;
      }
      else if (v80)
      {
        goto LABEL_53;
      }
      if (*((_QWORD *)&v19 + 1))
      {
        if (!*((_QWORD *)&v81 + 1) || v19 != v81 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_53;
      }
      else if (*((_QWORD *)&v81 + 1))
      {
        goto LABEL_53;
      }
      if (*((_QWORD *)&v20 + 1))
      {
        if (!*((_QWORD *)&v82 + 1) || v20 != v82 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_53;
      }
      else if (*((_QWORD *)&v82 + 1))
      {
        goto LABEL_53;
      }
      if ((_QWORD)v21)
      {
        if (!v83 || (specialized static Dictionary<>.== infix(_:_:)(v21, v83) & 1) == 0)
          goto LABEL_53;
      }
      else if (v83)
      {
        goto LABEL_53;
      }
      if (*((_QWORD *)&v21 + 1))
      {
        if (v84 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v21 + 1), v84) & 1) != 0)
        {
LABEL_48:
          v23 = v85;
          v39 = v88;
          v42 = v87;
          v37 = v89;
          v44 = v86;
          if (v59)
          {
            if (!v85)
            {
              outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v62);
              goto LABEL_58;
            }
            type metadata accessor for CFDictionaryRef(0);
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v33 = (id)v23;
            v32 = v59;
            v24 = static _CFObject.== infix(_:_:)();

            if ((v24 & 1) == 0)
              goto LABEL_109;
          }
          else
          {
            if (v85)
            {
LABEL_56:
              outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v62);
              goto LABEL_57;
            }
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          }
          LOBYTE(v23) = (_BYTE)v44;
          if (v58)
          {
            if (!v44)
              goto LABEL_92;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v45 = v44;
            v34 = v58;
            v27 = static _CFObject.== infix(_:_:)();

            if ((v27 & 1) == 0)
              goto LABEL_109;
          }
          else if (v44)
          {
            goto LABEL_109;
          }
          if (v57)
          {
            if (!v42)
              goto LABEL_109;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v43 = v42;
            v35 = v57;
            v28 = static _CFObject.== infix(_:_:)();

            if ((v28 & 1) == 0)
              goto LABEL_109;
          }
          else if (v42)
          {
            goto LABEL_109;
          }
          if (v56)
          {
            if (!v39)
              goto LABEL_109;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v40 = v39;
            v36 = v56;
            v29 = static _CFObject.== infix(_:_:)();

            if ((v29 & 1) == 0)
              goto LABEL_109;
          }
          else if (v39)
          {
            goto LABEL_109;
          }
          if (v55)
          {
            if (!v37)
              goto LABEL_109;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v41 = v37;
            v38 = v55;
            v30 = static _CFObject.== infix(_:_:)();

            if ((v30 & 1) == 0)
              goto LABEL_109;
          }
          else if (v37)
          {
            goto LABEL_109;
          }
          v23 = v90;
          if (v54)
          {
            if (!v90)
              goto LABEL_92;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v46 = specialized static Dictionary<>.== infix(_:_:)(v54, v23);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v46 & 1) == 0)
              goto LABEL_109;
          }
          else if (v90)
          {
            goto LABEL_109;
          }
          v23 = v91;
          if (!v53)
          {
            if (v91)
              goto LABEL_109;
LABEL_94:
            if (v22)
            {
              if (!v93 || (v52 != v92 || v22 != v93) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_109;
            }
            else if (v93)
            {
              goto LABEL_109;
            }
            if (v51 != 2)
            {
              if (v94 == 2 || ((v94 ^ v51) & 1) != 0)
                goto LABEL_109;
LABEL_106:
              v31 = v95;
              if (v50 == 2)
              {
                outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                if (v31 != 2)
                  goto LABEL_57;
              }
              else
              {
                outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                if (v31 == 2 || ((v31 ^ v50) & 1) != 0)
                  goto LABEL_57;
              }
              if (v49 == 2)
              {
                if (v96 != 2)
                  goto LABEL_57;
              }
              else
              {
                LOBYTE(v23) = 0;
                if (v96 == 2 || ((((v49 & 1) == 0) ^ v96) & 1) == 0)
                  goto LABEL_58;
              }
              if (v48 == 2)
              {
                if (v97 != 2)
                  goto LABEL_57;
              }
              else if (v97 == 2 || ((((v48 & 1) == 0) ^ v97) & 1) == 0)
              {
                goto LABEL_57;
              }
              LOBYTE(v23) = 1;
LABEL_58:
              LOBYTE(v62[0]) = v17;
              v62[1] = v18;
              v63 = v19;
              v64 = v20;
              v65 = v21;
              v66 = v59;
              v67 = v58;
              v68 = v57;
              v69 = v56;
              v70 = v55;
              v71 = v54;
              v72 = v53;
              v73 = v52;
              v74 = v22;
              v75 = v51;
              v76 = v50;
              v77 = v49;
              v78 = v48;
              outlined release of LocalePreferences(v62);
              outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              return (v23 & 1) != 0;
            }
            if (v94 == 2)
              goto LABEL_106;
LABEL_109:
            v26 = outlined consume of LocalePreferences?;
            v25 = v110;
            goto LABEL_54;
          }
          if (v91)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v47 = specialized static Dictionary<>.== infix(_:_:)(v53, v23);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v47 & 1) == 0)
              goto LABEL_109;
            goto LABEL_94;
          }
LABEL_92:
          outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_58;
        }
      }
      else if (!v84)
      {
        goto LABEL_48;
      }
LABEL_53:
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      v25 = v109;
      v26 = outlined copy of LocalePreferences?;
LABEL_54:
      outlined retain of LocalePreferences?((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v26);
LABEL_57:
      LOBYTE(v23) = 0;
      goto LABEL_58;
    }
  }
  return result;
}

BOOL specialized static ICUCurrencyNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  char v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  char v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  char v28;
  char v29;
  char v30;
  char v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  char v47;
  char v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  _OWORD v61[7];
  _OWORD v62[2];
  _QWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[28];
  _BYTE v107[144];
  uint64_t v108;
  _BYTE v109[144];
  _BYTE v110[144];
  _BYTE v111[152];

  if ((static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    v12 = v4[6];
    v13 = *(_QWORD *)(a1 + v12);
    v14 = *(_QWORD *)(a1 + v12 + 8);
    v15 = (_QWORD *)(a2 + v12);
    v16 = v13 == *v15 && v14 == v15[1];
    if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v17 & 1) != 0))
    {
      outlined init with take of LocalePreferences?(a1 + v4[7], (uint64_t)v109, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?(a2 + v4[7], (uint64_t)v110, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v111, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v111) == 1)
      {
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
        if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
          return 1;
        goto LABEL_17;
      }
      outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)&v99, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
      {
        v61[6] = v105;
        v62[0] = *(_OWORD *)v106;
        *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)&v106[12];
        v61[2] = v101;
        v61[3] = v102;
        v61[4] = v103;
        v61[5] = v104;
        v61[0] = v99;
        v61[1] = v100;
        outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)&v80, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences(&v80);
        outlined retain of LocalePreferences(v63);
        outlined release of LocalePreferences(v61);
LABEL_17:
        outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v108, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v107);
        return 0;
      }
      outlined init with take of LocalePreferences?((uint64_t)v110, (uint64_t)&v80, &demangling cache variable for type metadata for LocalePreferences?);
      v18 = v99;
      v19 = *((_QWORD *)&v99 + 1);
      v20 = v100;
      v21 = v101;
      v22 = v102;
      v59 = (void *)*((_QWORD *)&v103 + 1);
      v60 = (void *)v103;
      v57 = (void *)*((_QWORD *)&v104 + 1);
      v58 = (void *)v104;
      v55 = *((_QWORD *)&v105 + 1);
      v56 = (void *)v105;
      v53 = *(_QWORD *)&v106[8];
      v54 = *(_QWORD *)v106;
      v23 = *(_QWORD *)&v106[16];
      v51 = v106[25];
      v52 = v106[24];
      v49 = v106[27];
      v50 = v106[26];
      if (v99 == 2)
      {
        if (v80 != 2)
          goto LABEL_58;
      }
      else if (v80 == 2 || ((((v99 & 1) == 0) ^ v80) & 1) == 0)
      {
        goto LABEL_58;
      }
      if (*((_QWORD *)&v99 + 1))
      {
        if (!v81 || (specialized static Array<A>.== infix(_:_:)(*((_QWORD **)&v99 + 1), v81) & 1) == 0)
          goto LABEL_55;
      }
      else if (v81)
      {
        goto LABEL_55;
      }
      if (*((_QWORD *)&v20 + 1))
      {
        if (!*((_QWORD *)&v82 + 1) || v20 != v82 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_55;
      }
      else if (*((_QWORD *)&v82 + 1))
      {
        goto LABEL_55;
      }
      if (*((_QWORD *)&v21 + 1))
      {
        if (!*((_QWORD *)&v83 + 1) || v21 != v83 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_55;
      }
      else if (*((_QWORD *)&v83 + 1))
      {
        goto LABEL_55;
      }
      if ((_QWORD)v22)
      {
        if (!v84 || (specialized static Dictionary<>.== infix(_:_:)(v22, v84) & 1) == 0)
          goto LABEL_55;
      }
      else if (v84)
      {
        goto LABEL_55;
      }
      if (*((_QWORD *)&v22 + 1))
      {
        if (v85 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v22 + 1), v85) & 1) != 0)
        {
LABEL_50:
          v24 = v86;
          v43 = v88;
          v45 = v87;
          v38 = v90;
          v40 = v89;
          if (v60)
          {
            if (!v86)
            {
              outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v63);
              goto LABEL_60;
            }
            type metadata accessor for CFDictionaryRef(0);
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v34 = (id)v24;
            v33 = v60;
            v25 = static _CFObject.== infix(_:_:)();

            if ((v25 & 1) == 0)
              goto LABEL_110;
          }
          else
          {
            if (v86)
            {
LABEL_58:
              outlined init with take of LocalePreferences?((uint64_t)v109, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v63);
              goto LABEL_59;
            }
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          }
          if (v59)
          {
            if (!v45)
              goto LABEL_110;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v46 = v45;
            v35 = v59;
            v28 = static _CFObject.== infix(_:_:)();

            if ((v28 & 1) == 0)
              goto LABEL_110;
          }
          else if (v45)
          {
            goto LABEL_110;
          }
          if (v58)
          {
            if (!v43)
              goto LABEL_110;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v44 = v43;
            v36 = v58;
            v29 = static _CFObject.== infix(_:_:)();

            if ((v29 & 1) == 0)
              goto LABEL_110;
          }
          else if (v43)
          {
            goto LABEL_110;
          }
          if (v57)
          {
            if (!v40)
              goto LABEL_110;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v41 = v40;
            v37 = v57;
            v30 = static _CFObject.== infix(_:_:)();

            if ((v30 & 1) == 0)
              goto LABEL_110;
          }
          else if (v40)
          {
            goto LABEL_110;
          }
          if (v56)
          {
            if (!v38)
              goto LABEL_110;
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v42 = v38;
            v39 = v56;
            v31 = static _CFObject.== infix(_:_:)();

            if ((v31 & 1) == 0)
              goto LABEL_110;
          }
          else if (v38)
          {
            goto LABEL_110;
          }
          v24 = v91;
          if (v55)
          {
            if (!v91)
              goto LABEL_93;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v47 = specialized static Dictionary<>.== infix(_:_:)(v55, v24);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v47 & 1) == 0)
              goto LABEL_110;
          }
          else if (v91)
          {
            goto LABEL_110;
          }
          v24 = v92;
          if (!v54)
          {
            if (v92)
              goto LABEL_110;
LABEL_95:
            if (v23)
            {
              if (!v94 || (v53 != v93 || v23 != v94) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_110;
            }
            else if (v94)
            {
              goto LABEL_110;
            }
            if (v52 != 2)
            {
              if (v95 == 2 || ((v95 ^ v52) & 1) != 0)
                goto LABEL_110;
LABEL_107:
              v32 = v96;
              if (v51 == 2)
              {
                outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                if (v32 != 2)
                  goto LABEL_59;
              }
              else
              {
                outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                if (v32 == 2 || ((v32 ^ v51) & 1) != 0)
                  goto LABEL_59;
              }
              if (v50 == 2)
              {
                if (v97 != 2)
                  goto LABEL_59;
              }
              else
              {
                LOBYTE(v24) = 0;
                if (v97 == 2 || ((((v50 & 1) == 0) ^ v97) & 1) == 0)
                  goto LABEL_60;
              }
              if (v49 == 2)
              {
                if (v98 != 2)
                  goto LABEL_59;
              }
              else if (v98 == 2 || ((((v49 & 1) == 0) ^ v98) & 1) == 0)
              {
                goto LABEL_59;
              }
              LOBYTE(v24) = 1;
LABEL_60:
              LOBYTE(v63[0]) = v18;
              v63[1] = v19;
              v64 = v20;
              v65 = v21;
              v66 = v22;
              v67 = v60;
              v68 = v59;
              v69 = v58;
              v70 = v57;
              v71 = v56;
              v72 = v55;
              v73 = v54;
              v74 = v53;
              v75 = v23;
              v76 = v52;
              v77 = v51;
              v78 = v50;
              v79 = v49;
              outlined release of LocalePreferences(v63);
              outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              return (v24 & 1) != 0;
            }
            if (v95 == 2)
              goto LABEL_107;
LABEL_110:
            v27 = outlined consume of LocalePreferences?;
            v26 = v110;
            goto LABEL_56;
          }
          if (v92)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v48 = specialized static Dictionary<>.== infix(_:_:)(v54, v24);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v48 & 1) == 0)
              goto LABEL_110;
            goto LABEL_95;
          }
LABEL_93:
          outlined retain of LocalePreferences?((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_60;
        }
      }
      else if (!v85)
      {
        goto LABEL_50;
      }
LABEL_55:
      outlined retain of LocalePreferences?((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      v26 = v109;
      v27 = outlined copy of LocalePreferences?;
LABEL_56:
      outlined retain of LocalePreferences?((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v27);
LABEL_59:
      LOBYTE(v24) = 0;
      goto LABEL_60;
    }
  }
  return result;
}

BOOL specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  char v12;
  _BOOL8 result;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE *v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  char v24;
  char v25;
  char v26;
  char v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  char v43;
  char v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _OWORD v57[7];
  _OWORD v58[2];
  _QWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[28];
  _BYTE v103[144];
  uint64_t v104;
  _BYTE v105[144];
  _BYTE v106[144];
  _BYTE v107[152];

  if ((static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v6 = a3(0);
  v7 = *(int *)(v6 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v8 == *v10 && v9 == v10[1];
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    outlined init with take of LocalePreferences?(a1 + *(int *)(v6 + 24), (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?(a2 + *(int *)(v6 + 24), (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v107, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v103, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v103) == 1)
        return 1;
      goto LABEL_12;
    }
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v95, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v103, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v103) == 1)
    {
      v57[6] = v101;
      v58[0] = *(_OWORD *)v102;
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)&v102[12];
      v57[2] = v97;
      v57[3] = v98;
      v57[4] = v99;
      v57[5] = v100;
      v57[0] = v95;
      v57[1] = v96;
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v76, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(&v76);
      outlined retain of LocalePreferences(v59);
      outlined release of LocalePreferences(v57);
LABEL_12:
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v103, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v104, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v103);
      return 0;
    }
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v76, &demangling cache variable for type metadata for LocalePreferences?);
    v14 = v95;
    v15 = *((_QWORD *)&v95 + 1);
    v16 = v96;
    v17 = v97;
    v18 = v98;
    v55 = (void *)*((_QWORD *)&v99 + 1);
    v56 = (void *)v99;
    v53 = (void *)*((_QWORD *)&v100 + 1);
    v54 = (void *)v100;
    v51 = *((_QWORD *)&v101 + 1);
    v52 = (void *)v101;
    v49 = *(_QWORD *)&v102[8];
    v50 = *(_QWORD *)v102;
    v19 = *(_QWORD *)&v102[16];
    v47 = v102[25];
    v48 = v102[24];
    v45 = v102[27];
    v46 = v102[26];
    if (v95 == 2)
    {
      if (v76 != 2)
        goto LABEL_53;
    }
    else if (v76 == 2 || ((((v95 & 1) == 0) ^ v76) & 1) == 0)
    {
      goto LABEL_53;
    }
    if (*((_QWORD *)&v95 + 1))
    {
      if (!v77 || (specialized static Array<A>.== infix(_:_:)(*((_QWORD **)&v95 + 1), v77) & 1) == 0)
        goto LABEL_50;
    }
    else if (v77)
    {
      goto LABEL_50;
    }
    if (*((_QWORD *)&v16 + 1))
    {
      if (!*((_QWORD *)&v78 + 1) || v16 != v78 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_50;
    }
    else if (*((_QWORD *)&v78 + 1))
    {
      goto LABEL_50;
    }
    if (*((_QWORD *)&v17 + 1))
    {
      if (!*((_QWORD *)&v79 + 1) || v17 != v79 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_50;
    }
    else if (*((_QWORD *)&v79 + 1))
    {
      goto LABEL_50;
    }
    if ((_QWORD)v18)
    {
      if (!v80 || (specialized static Dictionary<>.== infix(_:_:)(v18, v80) & 1) == 0)
        goto LABEL_50;
    }
    else if (v80)
    {
      goto LABEL_50;
    }
    if (*((_QWORD *)&v18 + 1))
    {
      if (v81 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v18 + 1), v81) & 1) != 0)
      {
LABEL_45:
        v20 = v82;
        v39 = v84;
        v41 = v83;
        v34 = v86;
        v36 = v85;
        if (v56)
        {
          if (!v82)
          {
            outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences(v59);
            goto LABEL_55;
          }
          type metadata accessor for CFDictionaryRef(0);
          outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v30 = (id)v20;
          v29 = v56;
          v21 = static _CFObject.== infix(_:_:)();

          if ((v21 & 1) == 0)
            goto LABEL_105;
        }
        else
        {
          if (v82)
          {
LABEL_53:
            outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
            outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences(v59);
            goto LABEL_54;
          }
          outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        }
        if (v55)
        {
          if (!v41)
            goto LABEL_105;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v42 = v41;
          v31 = v55;
          v24 = static _CFObject.== infix(_:_:)();

          if ((v24 & 1) == 0)
            goto LABEL_105;
        }
        else if (v41)
        {
          goto LABEL_105;
        }
        if (v54)
        {
          if (!v39)
            goto LABEL_105;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v40 = v39;
          v32 = v54;
          v25 = static _CFObject.== infix(_:_:)();

          if ((v25 & 1) == 0)
            goto LABEL_105;
        }
        else if (v39)
        {
          goto LABEL_105;
        }
        if (v53)
        {
          if (!v36)
            goto LABEL_105;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v37 = v36;
          v33 = v53;
          v26 = static _CFObject.== infix(_:_:)();

          if ((v26 & 1) == 0)
            goto LABEL_105;
        }
        else if (v36)
        {
          goto LABEL_105;
        }
        if (v52)
        {
          if (!v34)
            goto LABEL_105;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v38 = v34;
          v35 = v52;
          v27 = static _CFObject.== infix(_:_:)();

          if ((v27 & 1) == 0)
            goto LABEL_105;
        }
        else if (v34)
        {
          goto LABEL_105;
        }
        v20 = v87;
        if (v51)
        {
          if (!v87)
            goto LABEL_88;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43 = specialized static Dictionary<>.== infix(_:_:)(v51, v20);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v43 & 1) == 0)
            goto LABEL_105;
        }
        else if (v87)
        {
          goto LABEL_105;
        }
        v20 = v88;
        if (!v50)
        {
          if (v88)
            goto LABEL_105;
LABEL_90:
          if (v19)
          {
            if (!v90 || (v49 != v89 || v19 != v90) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_105;
          }
          else if (v90)
          {
            goto LABEL_105;
          }
          if (v48 != 2)
          {
            if (v91 == 2 || ((v91 ^ v48) & 1) != 0)
              goto LABEL_105;
LABEL_102:
            v28 = v92;
            if (v47 == 2)
            {
              outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              if (v28 != 2)
                goto LABEL_54;
            }
            else
            {
              outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              if (v28 == 2 || ((v28 ^ v47) & 1) != 0)
                goto LABEL_54;
            }
            if (v46 == 2)
            {
              if (v93 != 2)
                goto LABEL_54;
            }
            else
            {
              LOBYTE(v20) = 0;
              if (v93 == 2 || ((((v46 & 1) == 0) ^ v93) & 1) == 0)
                goto LABEL_55;
            }
            if (v45 == 2)
            {
              if (v94 != 2)
                goto LABEL_54;
            }
            else if (v94 == 2 || ((((v45 & 1) == 0) ^ v94) & 1) == 0)
            {
              goto LABEL_54;
            }
            LOBYTE(v20) = 1;
LABEL_55:
            LOBYTE(v59[0]) = v14;
            v59[1] = v15;
            v60 = v16;
            v61 = v17;
            v62 = v18;
            v63 = v56;
            v64 = v55;
            v65 = v54;
            v66 = v53;
            v67 = v52;
            v68 = v51;
            v69 = v50;
            v70 = v49;
            v71 = v19;
            v72 = v48;
            v73 = v47;
            v74 = v46;
            v75 = v45;
            outlined release of LocalePreferences(v59);
            outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
            return (v20 & 1) != 0;
          }
          if (v91 == 2)
            goto LABEL_102;
LABEL_105:
          v23 = outlined consume of LocalePreferences?;
          v22 = v106;
          goto LABEL_51;
        }
        if (v88)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v44 = specialized static Dictionary<>.== infix(_:_:)(v50, v20);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
            goto LABEL_105;
          goto LABEL_90;
        }
LABEL_88:
        outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_55;
      }
    }
    else if (!v81)
    {
      goto LABEL_45;
    }
LABEL_50:
    outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v22 = v105;
    v23 = outlined copy of LocalePreferences?;
LABEL_51:
    outlined retain of LocalePreferences?((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v23);
LABEL_54:
    LOBYTE(v20) = 0;
    goto LABEL_55;
  }
  return result;
}

uint64_t specialized static ICUCurrencyNumberFormatter.skeleton(for:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ICUCurrencyNumberFormatter.Signature(0) + 20));
  v2 = *v1;
  v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  CurrencyFormatStyleConfiguration.Collection.skeleton.getter();
  v6 = v5;
  v8 = v7;
  if (String.count.getter() >= 1)
  {
    v9._countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 32;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
  }
  swift_bridgeObjectRelease();
  return 0x79636E6572727563;
}

uint64_t specialized static ICUNumberFormatter._create(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  int isUniquelyReferenced_nonNull_native;
  char v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t result;
  uint64_t v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  os_unfair_lock_s *v59;
  uint64_t v60;
  uint64_t v61[2];

  v61[1] = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for ICUNumberFormatter.Signature(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - v7;
  if (one-time initialization token for cache != -1)
    swift_once();
  v9 = qword_1EDC3D820;
  v60 = static ICUNumberFormatter.cache;
  v10 = qword_1EDC3D820 + 16;
  v11 = qword_1EDC3D820 + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v9 + 16, a1, v61);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release();
  v12 = (_QWORD *)v61[0];
  if (v61[0] != 1)
    goto LABEL_62;
  v56 = v3;
  v57 = v6;
  v58 = v8;
  v59 = (os_unfair_lock_s *)v11;
  v13 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
  v15 = v14;
  v16 = *(_QWORD *)(a1 + *(int *)(v2 + 20));
  type metadata accessor for ICUNumberFormatter();
  v12 = (_QWORD *)swift_allocObject();
  v12[3] = v13;
  v12[4] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v13, v15);
  swift_bridgeObjectRelease();
  LODWORD(v61[0]) = 0;
  if (v17[2] >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v19 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  v15 = (unint64_t)v58;
  v20 = v59;
  if (!v19)
    goto LABEL_8;
  if (SLODWORD(v61[0]) > 0)
  {
    unumf_close();
LABEL_8:
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    v12 = 0;
    goto LABEL_10;
  }
  v12[2] = v19;
LABEL_10:
  swift_retain();
  os_unfair_lock_lock(v20);
  if (v60 >= *(_QWORD *)(*(_QWORD *)(v9 + 16) + 16))
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v10 = MEMORY[0x1E0DEE9E0];
  outlined init with copy of ICUNumberFormatter.Signature(a1, v15, type metadata accessor for ICUNumberFormatter.Signature);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v61[0] = *(_QWORD *)v10;
  v16 = v61[0];
  *(_QWORD *)v10 = 0x8000000000000000;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
  v23 = *(_QWORD *)(v16 + 16);
  v24 = (v22 & 1) == 0;
  v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    LOBYTE(v10) = v22;
    if (*(_QWORD *)(v16 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      v26 = v61[0];
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v10 & 1) != (v28 & 1))
        goto LABEL_65;
      v18 = v27;
      v29 = v59;
      if ((v10 & 1) == 0)
        goto LABEL_60;
LABEL_20:
      v30 = *(_QWORD *)(v26 + 56);
      v31 = 8 * v18;
      swift_release();
      *(_QWORD *)(v30 + v31) = v12;
LABEL_61:
      *(_QWORD *)(v9 + 16) = v26;
      swift_bridgeObjectRelease();
      outlined destroy of ICUNumberFormatter.Signature(v15, type metadata accessor for ICUNumberFormatter.Signature);
      os_unfair_lock_unlock(v29);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_62:
      swift_release();
      return (uint64_t)v12;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v26 = v16;
      v29 = v59;
      if ((v22 & 1) != 0)
        goto LABEL_20;
LABEL_60:
      v49 = (uint64_t)v57;
      v50 = v18;
      outlined init with copy of ICUNumberFormatter.Signature(v15, (uint64_t)v57, type metadata accessor for ICUNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v50, v49, (uint64_t)v12, (_QWORD *)v26);
      goto LABEL_61;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v52 = v18;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
  v32 = static _DictionaryStorage.copy(original:)();
  v26 = v32;
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    v29 = v59;
    v18 = v52;
    if ((v10 & 1) != 0)
      goto LABEL_20;
    goto LABEL_60;
  }
  v33 = (char *)(v32 + 64);
  v34 = 1 << *(_BYTE *)(v26 + 32);
  v54 = (char *)(v16 + 64);
  v35 = (unint64_t)(v34 + 63) >> 6;
  if (v26 != v16 || v33 >= &v54[8 * v35])
    memmove(v33, v54, 8 * v35);
  v36 = 0;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v16 + 16);
  v37 = 1 << *(_BYTE *)(v16 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & *(_QWORD *)(v16 + 64);
  v53 = (unint64_t)(v37 + 63) >> 6;
  v40 = (uint64_t)v57;
  while (1)
  {
    v15 = (unint64_t)v58;
    if (v39)
    {
      v55 = (v39 - 1) & v39;
      v60 = v36;
      v41 = __clz(__rbit64(v39)) | (v36 << 6);
      goto LABEL_31;
    }
    v45 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v45 >= v53)
      goto LABEL_59;
    v46 = *(_QWORD *)&v54[8 * v45];
    v47 = v36 + 1;
    if (!v46)
    {
      v47 = v45 + 1;
      if (v45 + 1 >= v53)
        goto LABEL_59;
      v46 = *(_QWORD *)&v54[8 * v47];
      if (!v46)
      {
        v47 = v45 + 2;
        if (v45 + 2 >= v53)
          goto LABEL_59;
        v46 = *(_QWORD *)&v54[8 * v47];
        if (!v46)
        {
          v47 = v45 + 3;
          if (v45 + 3 >= v53)
            goto LABEL_59;
          v46 = *(_QWORD *)&v54[8 * v47];
          if (!v46)
          {
            v47 = v45 + 4;
            if (v45 + 4 >= v53)
              goto LABEL_59;
            v46 = *(_QWORD *)&v54[8 * v47];
            if (!v46)
            {
              v47 = v45 + 5;
              if (v45 + 5 >= v53)
                goto LABEL_59;
              v46 = *(_QWORD *)&v54[8 * v47];
              if (!v46)
              {
                v47 = v45 + 6;
                if (v45 + 6 >= v53)
                  goto LABEL_59;
                v46 = *(_QWORD *)&v54[8 * v47];
                if (!v46)
                {
                  v47 = v45 + 7;
                  if (v45 + 7 >= v53)
                    goto LABEL_59;
                  v46 = *(_QWORD *)&v54[8 * v47];
                  if (!v46)
                  {
                    v47 = v45 + 8;
                    if (v45 + 8 >= v53)
                      goto LABEL_59;
                    v46 = *(_QWORD *)&v54[8 * v47];
                    if (!v46)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_58:
    v55 = (v46 - 1) & v46;
    v60 = v47;
    v41 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_31:
    v42 = *(_QWORD *)(v56 + 72) * v41;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v16 + 48) + v42, v40, type metadata accessor for ICUNumberFormatter.Signature);
    v43 = 8 * v41;
    v44 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v41);
    outlined init with take of ICUNumberFormatter.Signature(v40, *(_QWORD *)(v26 + 48) + v42, type metadata accessor for ICUNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v26 + 56) + v43) = v44;
    swift_retain();
    v36 = v60;
    v39 = v55;
  }
  v48 = v45 + 9;
  if (v48 >= v53)
    goto LABEL_59;
  v46 = *(_QWORD *)&v54[8 * v48];
  if (v46)
  {
    v47 = v48;
    goto LABEL_58;
  }
  while (1)
  {
    v47 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    v15 = (unint64_t)v58;
    if (v47 >= v53)
      goto LABEL_59;
    v46 = *(_QWORD *)&v54[8 * v47];
    ++v48;
    if (v46)
      goto LABEL_58;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ICUCurrencyNumberFormatter.create(for:)(_QWORD *a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  char *v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  _QWORD v72[19];
  _QWORD *v73;
  _QWORD v74[18];
  _BYTE v75[152];

  v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  v67 = *((_QWORD *)v2 - 1);
  v3 = MEMORY[0x1E0C80A78](v2);
  v68 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v61 - v5;
  v70 = (uint64_t)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v7 = a1[3];
  v71 = (int *)a1[2];
  v8 = a1[1];
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v69 = v10(ObjectType, v8);
  v12 = v11;
  swift_unknownObjectRelease();
  v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v13(v74, ObjectType, v8);
  v14 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v70, (uint64_t)v6, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v15 = &v6[v2[5]];
  *(_QWORD *)v15 = v71;
  *((_QWORD *)v15 + 1) = v7;
  v16 = (uint64_t *)&v6[v2[6]];
  *v16 = v69;
  v16[1] = v12;
  v71 = v2;
  v17 = (uint64_t)&v6[v2[7]];
  outlined init with take of LocalePreferences?((uint64_t)v75, v17, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v19 = static ICUCurrencyNumberFormatter.cache;
  v18 = *(_QWORD *)algn_1EDC41C48;
  v20 = *(_QWORD *)algn_1EDC41C48 + 16;
  v21 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC41C48 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v21);
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v20, v14, (uint64_t *)&v73);
  os_unfair_lock_unlock(v21);
  swift_release();
  v22 = v73;
  if (v73 != (_QWORD *)1)
    goto LABEL_53;
  v69 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v14);
  v70 = v19;
  v24 = v23;
  v25 = *v16;
  v26 = v16[1];
  outlined init with take of LocalePreferences?(v17, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  v22 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v69, v24, v25, v26, (uint64_t)v72);
  swift_retain();
  os_unfair_lock_lock(v21);
  v27 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 16);
  v28 = v21;
  v69 = *(_QWORD *)(v18 + 16);
  if (v70 >= v27)
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v20 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72[0] = *(_QWORD *)v20;
  v30 = v72[0];
  *(_QWORD *)v20 = 0x8000000000000000;
  v32 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  v33 = *(_QWORD *)(v30 + 16);
  v34 = (v31 & 1) == 0;
  v35 = v33 + v34;
  if (__OFADD__(v33, v34))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v20) = v31;
    if (*(_QWORD *)(v30 + 24) < v35)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
      v36 = v72[0];
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v20 & 1) != (v38 & 1))
        goto LABEL_56;
      v32 = v37;
      if ((v20 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v39 = *(_QWORD *)(v36 + 56);
      v40 = 8 * v32;
      swift_release();
      *(_QWORD *)(v39 + v40) = v22;
LABEL_52:
      *(_QWORD *)(v18 + 16) = v36;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v28);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v73);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature(v14, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v22;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v36 = v30;
      if ((v31 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      v58 = v68;
      v59 = v32;
      outlined init with copy of ICUNumberFormatter.Signature(v14, v68, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v59, v58, (uint64_t)v22, (_QWORD *)v36);
      goto LABEL_52;
    }
  }
  v62 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  v41 = static _DictionaryStorage.copy(original:)();
  v36 = v41;
  if (!*(_QWORD *)(v30 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v32 = v62;
    if ((v20 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v65 = v28;
  v66 = v14;
  v42 = (char *)(v41 + 64);
  v43 = 1 << *(_BYTE *)(v36 + 32);
  v64 = (char *)(v30 + 64);
  v44 = (unint64_t)(v43 + 63) >> 6;
  if (v36 != v30 || v42 >= &v64[8 * v44])
    memmove(v42, v64, 8 * v44);
  v45 = 0;
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(v30 + 16);
  v46 = 1 << *(_BYTE *)(v30 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & *(_QWORD *)(v30 + 64);
  v63 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    v28 = v65;
    v14 = v66;
    if (v48)
    {
      v70 = (v48 - 1) & v48;
      v71 = v45;
      v49 = __clz(__rbit64(v48)) | ((_QWORD)v45 << 6);
      goto LABEL_24;
    }
    v54 = (int64_t)v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v54 >= v63)
      goto LABEL_50;
    v55 = *(_QWORD *)&v64[8 * v54];
    v56 = (int64_t)v45 + 1;
    if (!v55)
    {
      v56 = v54 + 1;
      if (v54 + 1 >= v63)
        goto LABEL_50;
      v55 = *(_QWORD *)&v64[8 * v56];
      if (!v55)
      {
        v56 = v54 + 2;
        if (v54 + 2 >= v63)
          goto LABEL_50;
        v55 = *(_QWORD *)&v64[8 * v56];
        if (!v55)
        {
          v56 = v54 + 3;
          if (v54 + 3 >= v63)
            goto LABEL_50;
          v55 = *(_QWORD *)&v64[8 * v56];
          if (!v55)
          {
            v56 = v54 + 4;
            if (v54 + 4 >= v63)
              goto LABEL_50;
            v55 = *(_QWORD *)&v64[8 * v56];
            if (!v55)
            {
              v56 = v54 + 5;
              if (v54 + 5 >= v63)
                goto LABEL_50;
              v55 = *(_QWORD *)&v64[8 * v56];
              if (!v55)
              {
                v56 = v54 + 6;
                if (v54 + 6 >= v63)
                  goto LABEL_50;
                v55 = *(_QWORD *)&v64[8 * v56];
                if (!v55)
                {
                  v56 = v54 + 7;
                  if (v54 + 7 >= v63)
                    goto LABEL_50;
                  v55 = *(_QWORD *)&v64[8 * v56];
                  if (!v55)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v70 = (v55 - 1) & v55;
    v71 = (int *)v56;
    v49 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_24:
    v50 = v68;
    v51 = *(_QWORD *)(v67 + 72) * v49;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v30 + 48) + v51, v68, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v52 = 8 * v49;
    v53 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v49);
    outlined init with take of ICUNumberFormatter.Signature(v50, *(_QWORD *)(v36 + 48) + v51, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v36 + 56) + v52) = v53;
    swift_retain();
    v48 = v70;
    v45 = v71;
  }
  v57 = v54 + 8;
  if (v57 >= v63)
    goto LABEL_50;
  v55 = *(_QWORD *)&v64[8 * v57];
  if (v55)
  {
    v56 = v57;
    goto LABEL_49;
  }
  while (1)
  {
    v56 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    v28 = v65;
    v14 = v66;
    if (v56 >= v63)
      goto LABEL_50;
    v55 = *(_QWORD *)&v64[8 * v56];
    ++v57;
    if (v55)
      goto LABEL_49;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ICUMeasurementNumberFormatter.skeleton(_:width:usage:numberFormatStyle:)(uint64_t a1, void *a2, char a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;

  v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = 0;
  v31 = 0xE000000000000000;
  if (a2)
  {
    v16 = 0xD000000000000010;
    v29._countAndFlagsBits = a1;
    v29._object = a2;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = 32;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    if (a3)
    {
      if (a3 == 1)
      {
        v18 = (void *)0x80000001823062F0;
      }
      else
      {
        v16 = 0xD000000000000011;
        v18 = (void *)0x8000000182306310;
      }
    }
    else
    {
      v16 = 0xD000000000000014;
      v18 = (void *)0x8000000182306270;
    }
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    if (a4 != 14)
    {
      v20._countAndFlagsBits = ICUMeasurementNumberFormatter.Usage.rawValue.getter(a4);
      v29._countAndFlagsBits = 0x2F656761737520;
      v29._object = (void *)0xE700000000000000;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
    }
  }
  outlined init with copy of (Hashable & Sendable)?(a5, (uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)&v15[*(int *)(v21 + 36)], (uint64_t)v12, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v22 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
    v24 = v23;
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v12, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    swift_bridgeObjectRetain();
    v25 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v25 >= 1)
    {
      v26._countAndFlagsBits = 32;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
    }
    v27._countAndFlagsBits = v22;
    v27._object = v24;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
  }
  return v30;
}

__n128 __swift_memcpy172_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 156) = *(__int128 *)((char *)a2 + 156);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

ValueMetadata *type metadata accessor for ICUNumberFormatterBase.AttributePosition()
{
  return &type metadata for ICUNumberFormatterBase.AttributePosition;
}

uint64_t initializeWithCopy for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v9;
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v11;
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v13;
    v15 = *(_QWORD *)(a2 + 80);
    v16 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    v17 = *(void **)(a2 + 96);
    v18 = *(void **)(a2 + 104);
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    v20 = *(void **)(a2 + 112);
    v19 = *(void **)(a2 + 120);
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v20;
    v21 = *(void **)(a2 + 128);
    v29 = v19;
    v30 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 120) = v19;
    *(_QWORD *)(a1 + 128) = v21;
    v31 = v21;
    v32 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v30;
    *(_QWORD *)(a1 + 144) = v32;
    v22 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v22;
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v17;
    v24 = v18;
    v25 = v20;
    v26 = v29;
    v27 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v44;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) == 1)
  {
    if (v6 == 1)
    {
      *v4 = *v5;
      v7 = *(_OWORD *)(a2 + 48);
      v8 = *(_OWORD *)(a2 + 64);
      v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      v10 = *(_OWORD *)(a2 + 112);
      v11 = *(_OWORD *)(a2 + 128);
      v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 112) = v10;
    }
    else
    {
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v19 = *(void **)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v19;
      v20 = *(void **)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v20;
      v21 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v21;
      v22 = *(void **)(a2 + 120);
      *(_QWORD *)(a1 + 120) = v22;
      v44 = *(void **)(a2 + 128);
      *(_QWORD *)(a1 + 128) = v44;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
      *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
      *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v19;
      v24 = v20;
      v25 = v21;
      v26 = v22;
      v27 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of LocalePreferences((id *)(a1 + 32));
    *v4 = *v5;
    v13 = *(_OWORD *)(a2 + 96);
    v15 = *(_OWORD *)(a2 + 48);
    v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v14;
    v17 = *(_OWORD *)(a2 + 128);
    v16 = *(_OWORD *)(a2 + 144);
    v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
    *(_OWORD *)(a1 + 128) = v17;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 112) = v18;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v28 = *(void **)(a1 + 96);
    v29 = *(void **)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v29;
    v30 = v29;

    v31 = *(void **)(a1 + 104);
    v32 = *(void **)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v32;
    v33 = v32;

    v34 = *(void **)(a1 + 112);
    v35 = *(void **)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v35;
    v36 = v35;

    v37 = *(void **)(a1 + 120);
    v38 = *(void **)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v38;
    v39 = v38;

    v40 = *(void **)(a1 + 128);
    v41 = *(void **)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v41;
    v42 = v41;

    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
    *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
    *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  }
  return a1;
}

uint64_t assignWithTake for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40) != 1)
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 != 1)
    {
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v12;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRelease();
      v13 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

      v14 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

      v15 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

      v16 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

      v17 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v18;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
      return a1;
    }
    outlined destroy of LocalePreferences((id *)(a1 + 32));
  }
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUMeasurementNumberFormatter.Signature(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 172))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUMeasurementNumberFormatter.Signature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 172) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 172) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ICUByteCountNumberFormatter.Signature()
{
  return &unk_1E0F27720;
}

_QWORD *initializeBufferWithCopyOfBuffer for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v53;
  void *v54;
  void *v55;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
    *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
    v8 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v9 = v8[9];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for FloatingPointRoundingRule();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = v8[10];
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    *((_BYTE *)v4 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    *((_BYTE *)v4 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    v19 = a3[5];
    v20 = a3[6];
    v21 = (_QWORD *)((char *)v4 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (_QWORD *)((char *)v4 + v20);
    v25 = (uint64_t *)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[7];
    v28 = (char *)v4 + v27;
    v29 = (char *)a2 + v27;
    v30 = *(uint64_t *)((char *)a2 + v27 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30 == 1)
    {
      v31 = *((_OWORD *)v29 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
      *((_OWORD *)v28 + 7) = v31;
      *(_OWORD *)(v28 + 124) = *(_OWORD *)(v29 + 124);
      v32 = *((_OWORD *)v29 + 3);
      *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
      *((_OWORD *)v28 + 3) = v32;
      v33 = *((_OWORD *)v29 + 5);
      *((_OWORD *)v28 + 4) = *((_OWORD *)v29 + 4);
      *((_OWORD *)v28 + 5) = v33;
      v34 = *((_OWORD *)v29 + 1);
      *(_OWORD *)v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v34;
    }
    else
    {
      *v28 = *v29;
      v35 = *((_QWORD *)v29 + 2);
      v36 = *((_QWORD *)v29 + 3);
      *((_QWORD *)v28 + 1) = v30;
      *((_QWORD *)v28 + 2) = v35;
      v37 = *((_QWORD *)v29 + 4);
      v38 = *((_QWORD *)v29 + 5);
      *((_QWORD *)v28 + 3) = v36;
      *((_QWORD *)v28 + 4) = v37;
      v39 = *((_QWORD *)v29 + 6);
      v40 = *((_QWORD *)v29 + 7);
      *((_QWORD *)v28 + 5) = v38;
      *((_QWORD *)v28 + 6) = v39;
      v42 = (void *)*((_QWORD *)v29 + 8);
      v41 = (void *)*((_QWORD *)v29 + 9);
      *((_QWORD *)v28 + 7) = v40;
      *((_QWORD *)v28 + 8) = v42;
      v53 = (void *)*((_QWORD *)v29 + 10);
      v54 = (void *)*((_QWORD *)v29 + 11);
      *((_QWORD *)v28 + 9) = v41;
      *((_QWORD *)v28 + 10) = v53;
      v43 = *((_QWORD *)v29 + 13);
      v55 = (void *)*((_QWORD *)v29 + 12);
      *((_QWORD *)v28 + 11) = v54;
      *((_QWORD *)v28 + 12) = v55;
      v44 = *((_QWORD *)v29 + 15);
      v45 = *((_QWORD *)v29 + 14);
      *((_QWORD *)v28 + 13) = v43;
      *((_QWORD *)v28 + 14) = v45;
      v46 = *((_QWORD *)v29 + 16);
      *((_QWORD *)v28 + 15) = v44;
      *((_QWORD *)v28 + 16) = v46;
      *((_DWORD *)v28 + 34) = *((_DWORD *)v29 + 34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = v42;
      v48 = v41;
      v49 = v53;
      v50 = v54;
      v51 = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t destroy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0) + 36);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 28);
  result = *(_QWORD *)(v7 + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v51;
  void *v52;
  void *v53;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v8 = v7[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = v7[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  v17 = a3[5];
  v18 = a3[6];
  v19 = (_QWORD *)(a1 + v17);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)(a1 + v18);
  v23 = (_QWORD *)(a2 + v18);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[7];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28 == 1)
  {
    v29 = *(_OWORD *)(v27 + 112);
    *(_OWORD *)(v26 + 96) = *(_OWORD *)(v27 + 96);
    *(_OWORD *)(v26 + 112) = v29;
    *(_OWORD *)(v26 + 124) = *(_OWORD *)(v27 + 124);
    v30 = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v26 + 48) = v30;
    v31 = *(_OWORD *)(v27 + 80);
    *(_OWORD *)(v26 + 64) = *(_OWORD *)(v27 + 64);
    *(_OWORD *)(v26 + 80) = v31;
    v32 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v32;
  }
  else
  {
    *(_BYTE *)v26 = *(_BYTE *)v27;
    v33 = *(_QWORD *)(v27 + 16);
    v34 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v26 + 8) = v28;
    *(_QWORD *)(v26 + 16) = v33;
    v35 = *(_QWORD *)(v27 + 32);
    v36 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v26 + 24) = v34;
    *(_QWORD *)(v26 + 32) = v35;
    v37 = *(_QWORD *)(v27 + 48);
    v38 = *(_QWORD *)(v27 + 56);
    *(_QWORD *)(v26 + 40) = v36;
    *(_QWORD *)(v26 + 48) = v37;
    v40 = *(void **)(v27 + 64);
    v39 = *(void **)(v27 + 72);
    *(_QWORD *)(v26 + 56) = v38;
    *(_QWORD *)(v26 + 64) = v40;
    v51 = *(void **)(v27 + 80);
    v52 = *(void **)(v27 + 88);
    *(_QWORD *)(v26 + 72) = v39;
    *(_QWORD *)(v26 + 80) = v51;
    v41 = *(_QWORD *)(v27 + 104);
    v53 = *(void **)(v27 + 96);
    *(_QWORD *)(v26 + 88) = v52;
    *(_QWORD *)(v26 + 96) = v53;
    v42 = *(_QWORD *)(v27 + 120);
    v43 = *(_QWORD *)(v27 + 112);
    *(_QWORD *)(v26 + 104) = v41;
    *(_QWORD *)(v26 + 112) = v43;
    v44 = *(_QWORD *)(v27 + 128);
    *(_QWORD *)(v26 + 120) = v42;
    *(_QWORD *)(v26 + 128) = v44;
    *(_DWORD *)(v26 + 136) = *(_DWORD *)(v27 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = v40;
    v46 = v39;
    v47 = v51;
    v48 = v52;
    v49 = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  id v69;
  void *v71;
  void *v72;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
  *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
  v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v11 = v10[9];
  v12 = (void *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  v20 = v10[10];
  v21 = a1 + v20;
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = *v22;
  *(_BYTE *)(v21 + 8) = *((_BYTE *)v22 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
  *(_BYTE *)(a1 + v10[12]) = *((_BYTE *)a2 + v10[12]);
  v24 = a3[5];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[6];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = a3[7];
  v31 = a1 + v30;
  v32 = (uint64_t)a2 + v30;
  v33 = *(_QWORD *)(a1 + v30 + 8);
  v34 = *(_QWORD *)(v32 + 8);
  if (v33 == 1)
  {
    if (v34 == 1)
    {
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v35 = *(_OWORD *)(v32 + 16);
      v36 = *(_OWORD *)(v32 + 32);
      v37 = *(_OWORD *)(v32 + 64);
      *(_OWORD *)(v31 + 48) = *(_OWORD *)(v32 + 48);
      *(_OWORD *)(v31 + 64) = v37;
      *(_OWORD *)(v31 + 16) = v35;
      *(_OWORD *)(v31 + 32) = v36;
      v38 = *(_OWORD *)(v32 + 80);
      v39 = *(_OWORD *)(v32 + 96);
      v40 = *(_OWORD *)(v32 + 112);
      *(_OWORD *)(v31 + 124) = *(_OWORD *)(v32 + 124);
      *(_OWORD *)(v31 + 96) = v39;
      *(_OWORD *)(v31 + 112) = v40;
      *(_OWORD *)(v31 + 80) = v38;
    }
    else
    {
      *(_BYTE *)v31 = *(_BYTE *)v32;
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
      *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
      *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
      *(_QWORD *)(v31 + 40) = *(_QWORD *)(v32 + 40);
      *(_QWORD *)(v31 + 48) = *(_QWORD *)(v32 + 48);
      *(_QWORD *)(v31 + 56) = *(_QWORD *)(v32 + 56);
      v47 = *(void **)(v32 + 64);
      *(_QWORD *)(v31 + 64) = v47;
      v48 = *(void **)(v32 + 72);
      *(_QWORD *)(v31 + 72) = v48;
      v49 = *(void **)(v32 + 80);
      *(_QWORD *)(v31 + 80) = v49;
      v71 = *(void **)(v32 + 88);
      *(_QWORD *)(v31 + 88) = v71;
      v72 = *(void **)(v32 + 96);
      *(_QWORD *)(v31 + 96) = v72;
      *(_QWORD *)(v31 + 104) = *(_QWORD *)(v32 + 104);
      *(_QWORD *)(v31 + 112) = *(_QWORD *)(v32 + 112);
      *(_QWORD *)(v31 + 120) = *(_QWORD *)(v32 + 120);
      *(_QWORD *)(v31 + 128) = *(_QWORD *)(v32 + 128);
      *(_BYTE *)(v31 + 136) = *(_BYTE *)(v32 + 136);
      *(_BYTE *)(v31 + 137) = *(_BYTE *)(v32 + 137);
      *(_BYTE *)(v31 + 138) = *(_BYTE *)(v32 + 138);
      *(_BYTE *)(v31 + 139) = *(_BYTE *)(v32 + 139);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50 = v47;
      v51 = v48;
      v52 = v49;
      v53 = v71;
      v54 = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v34 == 1)
  {
    outlined destroy of LocalePreferences((id *)v31);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v41 = *(_OWORD *)(v32 + 64);
    v43 = *(_OWORD *)(v32 + 16);
    v42 = *(_OWORD *)(v32 + 32);
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(v32 + 48);
    *(_OWORD *)(v31 + 64) = v41;
    *(_OWORD *)(v31 + 16) = v43;
    *(_OWORD *)(v31 + 32) = v42;
    v45 = *(_OWORD *)(v32 + 96);
    v44 = *(_OWORD *)(v32 + 112);
    v46 = *(_OWORD *)(v32 + 80);
    *(_OWORD *)(v31 + 124) = *(_OWORD *)(v32 + 124);
    *(_OWORD *)(v31 + 96) = v45;
    *(_OWORD *)(v31 + 112) = v44;
    *(_OWORD *)(v31 + 80) = v46;
  }
  else
  {
    *(_BYTE *)v31 = *(_BYTE *)v32;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
    *(_QWORD *)(v31 + 40) = *(_QWORD *)(v32 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 48) = *(_QWORD *)(v32 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 56) = *(_QWORD *)(v32 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v55 = *(void **)(v31 + 64);
    v56 = *(void **)(v32 + 64);
    *(_QWORD *)(v31 + 64) = v56;
    v57 = v56;

    v58 = *(void **)(v31 + 72);
    v59 = *(void **)(v32 + 72);
    *(_QWORD *)(v31 + 72) = v59;
    v60 = v59;

    v61 = *(void **)(v31 + 80);
    v62 = *(void **)(v32 + 80);
    *(_QWORD *)(v31 + 80) = v62;
    v63 = v62;

    v64 = *(void **)(v31 + 88);
    v65 = *(void **)(v32 + 88);
    *(_QWORD *)(v31 + 88) = v65;
    v66 = v65;

    v67 = *(void **)(v31 + 96);
    v68 = *(void **)(v32 + 96);
    *(_QWORD *)(v31 + 96) = v68;
    v69 = v68;

    *(_QWORD *)(v31 + 104) = *(_QWORD *)(v32 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 112) = *(_QWORD *)(v32 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 120) = *(_QWORD *)(v32 + 120);
    *(_QWORD *)(v31 + 128) = *(_QWORD *)(v32 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v31 + 136) = *(_BYTE *)(v32 + 136);
    *(_BYTE *)(v31 + 137) = *(_BYTE *)(v32 + 137);
    *(_BYTE *)(v31 + 138) = *(_BYTE *)(v32 + 138);
    *(_BYTE *)(v31 + 139) = *(_BYTE *)(v32 + 139);
  }
  return a1;
}

uint64_t initializeWithTake for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v8 = v7[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = v7[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  v17 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[7];
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  v21 = v20[7];
  v19[6] = v20[6];
  v19[7] = v21;
  *(_OWORD *)((char *)v19 + 124) = *(_OWORD *)((char *)v20 + 124);
  v22 = v20[3];
  v19[2] = v20[2];
  v19[3] = v22;
  v23 = v20[5];
  v19[4] = v20[4];
  v19[5] = v23;
  v24 = v20[1];
  *v19 = *v20;
  v19[1] = v24;
  return a1;
}

uint64_t assignWithTake for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v8 = v7[9];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = v7[10];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  v20 = a3[5];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[6];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[7];
  v31 = a1 + v30;
  v32 = a2 + v30;
  if (*(_QWORD *)(a1 + v30 + 8) != 1)
  {
    v33 = *(_QWORD *)(v32 + 8);
    if (v33 != 1)
    {
      *(_BYTE *)v31 = *(_BYTE *)v32;
      *(_QWORD *)(v31 + 8) = v33;
      swift_bridgeObjectRelease();
      v38 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
      *(_QWORD *)(v31 + 24) = v38;
      swift_bridgeObjectRelease();
      v39 = *(_QWORD *)(v32 + 40);
      *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
      *(_QWORD *)(v31 + 40) = v39;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v31 + 48) = *(_QWORD *)(v32 + 48);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v31 + 56) = *(_QWORD *)(v32 + 56);
      swift_bridgeObjectRelease();
      v40 = *(void **)(v31 + 64);
      *(_QWORD *)(v31 + 64) = *(_QWORD *)(v32 + 64);

      v41 = *(void **)(v31 + 72);
      *(_QWORD *)(v31 + 72) = *(_QWORD *)(v32 + 72);

      v42 = *(void **)(v31 + 80);
      *(_QWORD *)(v31 + 80) = *(_QWORD *)(v32 + 80);

      v43 = *(void **)(v31 + 88);
      *(_QWORD *)(v31 + 88) = *(_QWORD *)(v32 + 88);

      v44 = *(void **)(v31 + 96);
      *(_QWORD *)(v31 + 96) = *(_QWORD *)(v32 + 96);

      *(_QWORD *)(v31 + 104) = *(_QWORD *)(v32 + 104);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v31 + 112) = *(_QWORD *)(v32 + 112);
      swift_bridgeObjectRelease();
      v45 = *(_QWORD *)(v32 + 128);
      *(_QWORD *)(v31 + 120) = *(_QWORD *)(v32 + 120);
      *(_QWORD *)(v31 + 128) = v45;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v31 + 136) = *(_DWORD *)(v32 + 136);
      return a1;
    }
    outlined destroy of LocalePreferences((id *)v31);
  }
  v34 = *(_OWORD *)(v32 + 112);
  *(_OWORD *)(v31 + 96) = *(_OWORD *)(v32 + 96);
  *(_OWORD *)(v31 + 112) = v34;
  *(_OWORD *)(v31 + 124) = *(_OWORD *)(v32 + 124);
  v35 = *(_OWORD *)(v32 + 48);
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
  *(_OWORD *)(v31 + 48) = v35;
  v36 = *(_OWORD *)(v32 + 80);
  *(_OWORD *)(v31 + 64) = *(_OWORD *)(v32 + 64);
  *(_OWORD *)(v31 + 80) = v36;
  v37 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v37;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUCurrencyNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BA0F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUCurrencyNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BA0FB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t type metadata completion function for ICUCurrencyNumberFormatter.Signature()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ICUNumberFormatter.Signature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  void *v49;
  void *v50;
  void *v51;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v9 = v8[9];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for FloatingPointRoundingRule();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = v8[10];
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    *((_BYTE *)v4 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    v19 = *(int *)(a3 + 20);
    v20 = *(int *)(a3 + 24);
    v21 = (_QWORD *)((char *)v4 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (char *)v4 + v20;
    v25 = (char *)a2 + v20;
    v26 = *(uint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain();
    if (v26 == 1)
    {
      v27 = *((_OWORD *)v25 + 7);
      *((_OWORD *)v24 + 6) = *((_OWORD *)v25 + 6);
      *((_OWORD *)v24 + 7) = v27;
      *(_OWORD *)(v24 + 124) = *(_OWORD *)(v25 + 124);
      v28 = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = v28;
      v29 = *((_OWORD *)v25 + 5);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
      *((_OWORD *)v24 + 5) = v29;
      v30 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v30;
    }
    else
    {
      *v24 = *v25;
      v31 = *((_QWORD *)v25 + 2);
      v32 = *((_QWORD *)v25 + 3);
      *((_QWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 2) = v31;
      v33 = *((_QWORD *)v25 + 4);
      v34 = *((_QWORD *)v25 + 5);
      *((_QWORD *)v24 + 3) = v32;
      *((_QWORD *)v24 + 4) = v33;
      v35 = *((_QWORD *)v25 + 6);
      v36 = *((_QWORD *)v25 + 7);
      *((_QWORD *)v24 + 5) = v34;
      *((_QWORD *)v24 + 6) = v35;
      v38 = (void *)*((_QWORD *)v25 + 8);
      v37 = (void *)*((_QWORD *)v25 + 9);
      *((_QWORD *)v24 + 7) = v36;
      *((_QWORD *)v24 + 8) = v38;
      v49 = (void *)*((_QWORD *)v25 + 10);
      v50 = (void *)*((_QWORD *)v25 + 11);
      *((_QWORD *)v24 + 9) = v37;
      *((_QWORD *)v24 + 10) = v49;
      v39 = *((_QWORD *)v25 + 13);
      v51 = (void *)*((_QWORD *)v25 + 12);
      *((_QWORD *)v24 + 11) = v50;
      *((_QWORD *)v24 + 12) = v51;
      v40 = *((_QWORD *)v25 + 15);
      v41 = *((_QWORD *)v25 + 14);
      *((_QWORD *)v24 + 13) = v39;
      *((_QWORD *)v24 + 14) = v41;
      v42 = *((_QWORD *)v25 + 16);
      *((_QWORD *)v24 + 15) = v40;
      *((_QWORD *)v24 + 16) = v42;
      *((_DWORD *)v24 + 34) = *((_DWORD *)v25 + 34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = v38;
      v44 = v37;
      v45 = v49;
      v46 = v50;
      v47 = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t assignWithCopy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  void *v68;
  void *v69;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  LOWORD(v6) = *((_WORD *)a2 + 37);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_WORD *)(a1 + 74) = v6;
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v11 = v10[9];
  v12 = (void *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  v20 = v10[10];
  v21 = a1 + v20;
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = *v22;
  *(_BYTE *)(v21 + 8) = *((_BYTE *)v22 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
  v24 = *(int *)(a3 + 20);
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = *(int *)(a3 + 24);
  v28 = a1 + v27;
  v29 = (uint64_t)a2 + v27;
  v30 = *(_QWORD *)(a1 + v27 + 8);
  v31 = *(_QWORD *)(v29 + 8);
  if (v30 == 1)
  {
    if (v31 == 1)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
      v32 = *(_OWORD *)(v29 + 16);
      v33 = *(_OWORD *)(v29 + 32);
      v34 = *(_OWORD *)(v29 + 64);
      *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
      *(_OWORD *)(v28 + 64) = v34;
      *(_OWORD *)(v28 + 16) = v32;
      *(_OWORD *)(v28 + 32) = v33;
      v35 = *(_OWORD *)(v29 + 80);
      v36 = *(_OWORD *)(v29 + 96);
      v37 = *(_OWORD *)(v29 + 112);
      *(_OWORD *)(v28 + 124) = *(_OWORD *)(v29 + 124);
      *(_OWORD *)(v28 + 96) = v36;
      *(_OWORD *)(v28 + 112) = v37;
      *(_OWORD *)(v28 + 80) = v35;
    }
    else
    {
      *(_BYTE *)v28 = *(_BYTE *)v29;
      *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
      *(_QWORD *)(v28 + 24) = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
      *(_QWORD *)(v28 + 40) = *(_QWORD *)(v29 + 40);
      *(_QWORD *)(v28 + 48) = *(_QWORD *)(v29 + 48);
      *(_QWORD *)(v28 + 56) = *(_QWORD *)(v29 + 56);
      v44 = *(void **)(v29 + 64);
      *(_QWORD *)(v28 + 64) = v44;
      v45 = *(void **)(v29 + 72);
      *(_QWORD *)(v28 + 72) = v45;
      v46 = *(void **)(v29 + 80);
      *(_QWORD *)(v28 + 80) = v46;
      v68 = *(void **)(v29 + 88);
      *(_QWORD *)(v28 + 88) = v68;
      v69 = *(void **)(v29 + 96);
      *(_QWORD *)(v28 + 96) = v69;
      *(_QWORD *)(v28 + 104) = *(_QWORD *)(v29 + 104);
      *(_QWORD *)(v28 + 112) = *(_QWORD *)(v29 + 112);
      *(_QWORD *)(v28 + 120) = *(_QWORD *)(v29 + 120);
      *(_QWORD *)(v28 + 128) = *(_QWORD *)(v29 + 128);
      *(_BYTE *)(v28 + 136) = *(_BYTE *)(v29 + 136);
      *(_BYTE *)(v28 + 137) = *(_BYTE *)(v29 + 137);
      *(_BYTE *)(v28 + 138) = *(_BYTE *)(v29 + 138);
      *(_BYTE *)(v28 + 139) = *(_BYTE *)(v29 + 139);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = v44;
      v48 = v45;
      v49 = v46;
      v50 = v68;
      v51 = v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v31 == 1)
  {
    outlined destroy of LocalePreferences((id *)v28);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    v38 = *(_OWORD *)(v29 + 64);
    v40 = *(_OWORD *)(v29 + 16);
    v39 = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
    *(_OWORD *)(v28 + 64) = v38;
    *(_OWORD *)(v28 + 16) = v40;
    *(_OWORD *)(v28 + 32) = v39;
    v42 = *(_OWORD *)(v29 + 96);
    v41 = *(_OWORD *)(v29 + 112);
    v43 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(v28 + 124) = *(_OWORD *)(v29 + 124);
    *(_OWORD *)(v28 + 96) = v42;
    *(_OWORD *)(v28 + 112) = v41;
    *(_OWORD *)(v28 + 80) = v43;
  }
  else
  {
    *(_BYTE *)v28 = *(_BYTE *)v29;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    *(_QWORD *)(v28 + 24) = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
    *(_QWORD *)(v28 + 40) = *(_QWORD *)(v29 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 48) = *(_QWORD *)(v29 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 56) = *(_QWORD *)(v29 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v52 = *(void **)(v28 + 64);
    v53 = *(void **)(v29 + 64);
    *(_QWORD *)(v28 + 64) = v53;
    v54 = v53;

    v55 = *(void **)(v28 + 72);
    v56 = *(void **)(v29 + 72);
    *(_QWORD *)(v28 + 72) = v56;
    v57 = v56;

    v58 = *(void **)(v28 + 80);
    v59 = *(void **)(v29 + 80);
    *(_QWORD *)(v28 + 80) = v59;
    v60 = v59;

    v61 = *(void **)(v28 + 88);
    v62 = *(void **)(v29 + 88);
    *(_QWORD *)(v28 + 88) = v62;
    v63 = v62;

    v64 = *(void **)(v28 + 96);
    v65 = *(void **)(v29 + 96);
    *(_QWORD *)(v28 + 96) = v65;
    v66 = v65;

    *(_QWORD *)(v28 + 104) = *(_QWORD *)(v29 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 112) = *(_QWORD *)(v29 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 120) = *(_QWORD *)(v29 + 120);
    *(_QWORD *)(v28 + 128) = *(_QWORD *)(v29 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v28 + 136) = *(_BYTE *)(v29 + 136);
    *(_BYTE *)(v28 + 137) = *(_BYTE *)(v29 + 137);
    *(_BYTE *)(v28 + 138) = *(_BYTE *)(v29 + 138);
    *(_BYTE *)(v28 + 139) = *(_BYTE *)(v29 + 139);
  }
  return a1;
}

uint64_t initializeWithTake for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v8 = v7[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = v7[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  v17 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = v19[7];
  v18[6] = v19[6];
  v18[7] = v20;
  *(_OWORD *)((char *)v18 + 124) = *(_OWORD *)((char *)v19 + 124);
  v21 = v19[3];
  v18[2] = v19[2];
  v18[3] = v21;
  v22 = v19[5];
  v18[4] = v19[4];
  v18[5] = v22;
  v23 = v19[1];
  *v18 = *v19;
  v18[1] = v23;
  return a1;
}

uint64_t assignWithTake for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v8 = v7[9];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = v7[10];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  v20 = *(int *)(a3 + 20);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = *(int *)(a3 + 24);
  v26 = a1 + v25;
  v27 = a2 + v25;
  if (*(_QWORD *)(a1 + v25 + 8) != 1)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28 != 1)
    {
      *(_BYTE *)v26 = *(_BYTE *)v27;
      *(_QWORD *)(v26 + 8) = v28;
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(v26 + 24) = v33;
      swift_bridgeObjectRelease();
      v34 = *(_QWORD *)(v27 + 40);
      *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
      *(_QWORD *)(v26 + 40) = v34;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v26 + 48) = *(_QWORD *)(v27 + 48);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v26 + 56) = *(_QWORD *)(v27 + 56);
      swift_bridgeObjectRelease();
      v35 = *(void **)(v26 + 64);
      *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);

      v36 = *(void **)(v26 + 72);
      *(_QWORD *)(v26 + 72) = *(_QWORD *)(v27 + 72);

      v37 = *(void **)(v26 + 80);
      *(_QWORD *)(v26 + 80) = *(_QWORD *)(v27 + 80);

      v38 = *(void **)(v26 + 88);
      *(_QWORD *)(v26 + 88) = *(_QWORD *)(v27 + 88);

      v39 = *(void **)(v26 + 96);
      *(_QWORD *)(v26 + 96) = *(_QWORD *)(v27 + 96);

      *(_QWORD *)(v26 + 104) = *(_QWORD *)(v27 + 104);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v26 + 112) = *(_QWORD *)(v27 + 112);
      swift_bridgeObjectRelease();
      v40 = *(_QWORD *)(v27 + 128);
      *(_QWORD *)(v26 + 120) = *(_QWORD *)(v27 + 120);
      *(_QWORD *)(v26 + 128) = v40;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v26 + 136) = *(_DWORD *)(v27 + 136);
      return a1;
    }
    outlined destroy of LocalePreferences((id *)v26);
  }
  v29 = *(_OWORD *)(v27 + 112);
  *(_OWORD *)(v26 + 96) = *(_OWORD *)(v27 + 96);
  *(_OWORD *)(v26 + 112) = v29;
  *(_OWORD *)(v26 + 124) = *(_OWORD *)(v27 + 124);
  v30 = *(_OWORD *)(v27 + 48);
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(_OWORD *)(v26 + 48) = v30;
  v31 = *(_OWORD *)(v27 + 80);
  *(_OWORD *)(v26 + 64) = *(_OWORD *)(v27 + 64);
  *(_OWORD *)(v26 + 80) = v31;
  v32 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v32;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUPercentNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BA1C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUPercentNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BA1C2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t base witness table accessor for Equatable in ICUCurrencyNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICUCurrencyNumberFormatter.Signature and conformance ICUCurrencyNumberFormatter.Signature, type metadata accessor for ICUCurrencyNumberFormatter.Signature, (uint64_t)&protocol conformance descriptor for ICUCurrencyNumberFormatter.Signature);
}

unint64_t lazy protocol witness table accessor for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUByteCountNumberFormatter.Signature, &unk_1E0F27720);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature);
  }
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.format(_:)(NSDecimal *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  Swift::String v31;
  int v32;
  NSDecimal *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  void *v49;
  unint64_t v50;
  Swift::String v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  int v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  __int16 i;
  Swift::String v66;
  int v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  Swift::String result;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  NSDecimal *v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE v89[20];
  _BYTE v90[140];
  _BYTE v91[144];
  uint64_t v92;

  LODWORD(v86) = v2;
  v4 = v1;
  v85 = 0;
  v92 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  v9 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 472);
  swift_unknownObjectRetain();
  v12 = v11(ObjectType, v9);
  v83 = v13;
  swift_unknownObjectRelease();
  v14 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v9 + 464);
  swift_unknownObjectRetain();
  v14(v90, ObjectType, v9);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v91, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v84, (uint64_t)v8, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v15 = (uint64_t *)&v8[*(int *)(v6 + 20)];
  v16 = v83;
  *v15 = v12;
  v15[1] = v16;
  outlined init with take of LocalePreferences?((uint64_t)v91, (uint64_t)&v8[*(int *)(v6 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  v17 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v19 = v4;
    v20 = v4;
    LODWORD(v21) = (_DWORD)v86;
    v22 = v85;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v18, (uint64_t)a1, v20, (int)v86);
    if (v22)
    {

      swift_release();
      v22 = 0;
    }
    else
    {
LABEL_33:
      v57 = swift_retain_n();
      MEMORY[0x1E0C80A78](v57);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v78 - 8), (uint64_t *)v90);
      if (v22)
        goto LABEL_47;
      v56 = *(_QWORD *)v90;
      v55 = *(_QWORD *)&v90[8];
      swift_release();
      swift_release_n();
      if (v55)
        goto LABEL_44;
    }
  }
  else
  {
    LODWORD(v21) = (_DWORD)v86;
    v19 = v4;
    v22 = v85;
  }
  v85 = v22;
  *(_QWORD *)v90 = a1;
  v23 = (unint64_t)a1 >> 32;
  v24 = (unint64_t)a1 >> 48;
  v25 = v19;
  v26 = v19 >> 16;
  *(_WORD *)&v90[8] = v19;
  v27 = HIDWORD(v19);
  *(_WORD *)&v90[10] = v26;
  v28 = HIWORD(v25);
  *(_WORD *)&v90[12] = v27;
  v29 = v21;
  v30 = WORD1(v21);
  *(_WORD *)&v90[14] = HIWORD(v25);
  *(_WORD *)&v90[16] = v29;
  *(_WORD *)&v90[18] = v30;
  if (!_So9NSDecimala__length_getter(v90))
  {
    *(_QWORD *)v90 = a1;
    *(_WORD *)&v90[8] = v25;
    *(_WORD *)&v90[10] = v26;
    *(_WORD *)&v90[12] = v27;
    *(_WORD *)&v90[14] = HIWORD(v25);
    *(_WORD *)&v90[16] = v29;
    *(_WORD *)&v90[18] = v30;
    if (_So9NSDecimala__isNegative_getter(v90))
    {
      v55 = 0xE300000000000000;
      v56 = 5136718;
LABEL_44:
      v72 = v56;
      v73 = (void *)v55;
      goto LABEL_48;
    }
  }
  *(_QWORD *)v90 = a1;
  *(_WORD *)&v90[8] = v25;
  *(_WORD *)&v90[10] = v26;
  *(_WORD *)&v90[12] = v27;
  *(_WORD *)&v90[14] = HIWORD(v25);
  *(_WORD *)&v90[16] = v29;
  *(_WORD *)&v90[18] = v30;
  if (!_So9NSDecimala__length_getter(v90))
  {
    v55 = 0xE100000000000000;
    v56 = 48;
    goto LABEL_44;
  }
  v87 = 0;
  v88 = 0xE000000000000000;
  *(_QWORD *)v90 = a1;
  *(_WORD *)&v90[8] = v25;
  *(_WORD *)&v90[10] = v26;
  *(_WORD *)&v90[12] = v27;
  *(_WORD *)&v90[14] = HIWORD(v25);
  *(_WORD *)&v90[16] = v29;
  *(_WORD *)&v90[18] = v30;
  *(_QWORD *)v89 = a1;
  *(_WORD *)&v89[8] = v25;
  *(_WORD *)&v89[10] = v26;
  *(_WORD *)&v89[12] = v27;
  *(_WORD *)&v89[14] = HIWORD(v25);
  *(_WORD *)&v89[16] = v29;
  *(_WORD *)&v89[18] = v30;
  if ((int)_So9NSDecimala__exponent_getter(v89) >= 1)
  {
    do
    {
      LODWORD(v86) = v30;
      v31._countAndFlagsBits = 48;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      *(_DWORD *)v89 = (_DWORD)a1;
      *(_WORD *)&v89[4] = v23;
      *(_WORD *)&v89[6] = v24;
      *(_WORD *)&v89[8] = v25;
      *(_WORD *)&v89[10] = v26;
      *(_WORD *)&v89[12] = v27;
      *(_WORD *)&v89[14] = v28;
      *(_WORD *)&v89[16] = v29;
      *(_WORD *)&v89[18] = (_WORD)v86;
      v32 = _So9NSDecimala__exponent_getter(v89);
      _So9NSDecimala__exponent_setter((v32 - 1), v90);
      a1 = (NSDecimal *)*(unsigned int *)v90;
      v23 = *(unsigned __int16 *)&v90[4];
      LOWORD(v24) = *(_WORD *)&v90[6];
      v25 = *(unsigned __int16 *)&v90[8];
      LOWORD(v26) = *(_WORD *)&v90[10];
      LOWORD(v27) = *(_WORD *)&v90[12];
      LOWORD(v28) = *(_WORD *)&v90[14];
      v29 = *(unsigned __int16 *)&v90[16];
      v30 = *(unsigned __int16 *)&v90[18];
      *(_DWORD *)v89 = *(_DWORD *)v90;
      *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
      *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
      *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
      *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
      *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
      *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
      *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
      *(_WORD *)&v89[18] = *(_WORD *)&v90[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v89) > 0);
  }
  *(_DWORD *)v89 = (_DWORD)a1;
  *(_WORD *)&v89[4] = v23;
  *(_WORD *)&v89[6] = v24;
  *(_WORD *)&v89[8] = v25;
  *(_WORD *)&v89[10] = v26;
  *(_WORD *)&v89[12] = v27;
  *(_WORD *)&v89[14] = v28;
  *(_WORD *)&v89[16] = v29;
  *(_WORD *)&v89[18] = v30;
  if (!_So9NSDecimala__exponent_getter(v89))
  {
    _So9NSDecimala__exponent_setter(1, v90);
    a1 = (NSDecimal *)*(unsigned int *)v90;
    v23 = *(unsigned __int16 *)&v90[4];
    LOWORD(v24) = *(_WORD *)&v90[6];
    v25 = *(unsigned __int16 *)&v90[8];
    LOWORD(v26) = *(_WORD *)&v90[10];
    LOWORD(v27) = *(_WORD *)&v90[12];
    LOWORD(v28) = *(_WORD *)&v90[14];
    v29 = *(unsigned __int16 *)&v90[16];
    LOWORD(v30) = *(_WORD *)&v90[18];
  }
  v86 = a1;
  *(_DWORD *)v89 = (_DWORD)a1;
  v83 = v25;
  v84 = v23;
  *(_WORD *)&v89[4] = v23;
  *(_WORD *)&v89[6] = v24;
  *(_WORD *)&v89[8] = v25;
  *(_WORD *)&v89[10] = v26;
  *(_WORD *)&v89[12] = v27;
  *(_WORD *)&v89[14] = v28;
  *(_WORD *)&v89[16] = v29;
  *(_WORD *)&v89[18] = v30;
  if (!_So9NSDecimala__length_getter(v89))
  {
    v33 = v86;
    LOWORD(v34) = v29;
    LOWORD(v35) = v83;
    LOWORD(v36) = v84;
LABEL_37:
    *(_DWORD *)v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v35;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = v34;
    *(_WORD *)&v89[18] = v30;
    v58 = v35;
    v59 = v34;
    v60 = _So9NSDecimala__exponent_getter(v89);
    v61 = v58;
    v62 = v59;
    if (v60 <= 0)
    {
      v86 = v33;
      *(_DWORD *)v89 = (_DWORD)v33;
      *(_WORD *)&v89[4] = v36;
      *(_WORD *)&v89[6] = v24;
      v63 = v58;
      *(_WORD *)&v89[8] = v58;
      *(_WORD *)&v89[10] = v26;
      *(_WORD *)&v89[12] = v27;
      *(_WORD *)&v89[14] = v28;
      v64 = v62;
      *(_WORD *)&v89[16] = v62;
      *(_WORD *)&v89[18] = v30;
      for (i = v36; _So9NSDecimala__exponent_getter(v89); *(_WORD *)&v89[18] = *(_WORD *)&v90[18])
      {
        v66._countAndFlagsBits = 48;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        *(_DWORD *)v89 = (_DWORD)v86;
        *(_WORD *)&v89[4] = i;
        *(_WORD *)&v89[6] = v24;
        *(_WORD *)&v89[8] = v63;
        *(_WORD *)&v89[10] = v26;
        *(_WORD *)&v89[12] = v27;
        *(_WORD *)&v89[14] = v28;
        *(_WORD *)&v89[16] = v64;
        *(_WORD *)&v89[18] = v30;
        v67 = _So9NSDecimala__exponent_getter(v89);
        _So9NSDecimala__exponent_setter((v67 + 1), v90);
        i = *(_WORD *)&v90[4];
        LOWORD(v24) = *(_WORD *)&v90[6];
        v63 = *(_WORD *)&v90[8];
        LOWORD(v26) = *(_WORD *)&v90[10];
        LOWORD(v27) = *(_WORD *)&v90[12];
        LOWORD(v28) = *(_WORD *)&v90[14];
        v64 = *(_WORD *)&v90[16];
        LOWORD(v30) = *(_WORD *)&v90[18];
        v86 = (NSDecimal *)*(unsigned int *)v90;
        *(_DWORD *)v89 = *(_DWORD *)v90;
        *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
        *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
        *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
        *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
        *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
        *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
        *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
      }
      v68._countAndFlagsBits = 46;
      v68._object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      v69._countAndFlagsBits = 48;
      v69._object = (void *)0xE100000000000000;
      String.append(_:)(v69);
      LOWORD(v36) = i;
      LODWORD(v33) = (_DWORD)v86;
      v61 = v63;
      v62 = v64;
    }
    *(_DWORD *)v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v61;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = v62;
    *(_WORD *)&v89[18] = v30;
    if (_So9NSDecimala__isNegative_getter(v89))
    {
      v70._countAndFlagsBits = 45;
      v70._object = (void *)0xE100000000000000;
      String.append(_:)(v70);
    }
    *(_QWORD *)v89 = v87;
    *(_QWORD *)&v89[8] = v88;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    v56 = String.init<A>(_:)();
    v55 = v71;
    goto LABEL_44;
  }
  a1 = (NSDecimal *)3435973837;
  LODWORD(v33) = (_DWORD)v86;
  v34 = v29;
  v35 = v83;
  v36 = v84;
  while (1)
  {
    v83 = v35;
    LODWORD(v86) = v34;
    *(_DWORD *)v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v35;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = v34;
    *(_WORD *)&v89[18] = v30;
    if (!_So9NSDecimala__exponent_getter(v89))
    {
      v84 = v36;
      v37._countAndFlagsBits = 46;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      LOWORD(v36) = v84;
    }
    *(_DWORD *)v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v83;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = (_WORD)v86;
    *(_WORD *)&v89[18] = v30;
    v38 = _So9NSDecimala__exponent_getter(v89);
    _So9NSDecimala__exponent_setter((v38 + 1), v90);
    v39 = *(unsigned int *)v90;
    v40 = *(unsigned __int16 *)&v90[4];
    v19 = *(unsigned __int16 *)&v90[6];
    v86 = (NSDecimal *)*(unsigned __int16 *)&v90[8];
    v83 = *(unsigned __int16 *)&v90[12];
    v84 = *(unsigned __int16 *)&v90[10];
    v81 = *(unsigned __int16 *)&v90[14];
    v82 = *(unsigned __int16 *)&v90[16];
    v80 = *(unsigned __int16 *)&v90[18];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v90 | ((unint64_t)*(unsigned __int16 *)&v90[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v90[6] << 48), *(unsigned __int16 *)&v90[8] | ((unint64_t)*(unsigned __int16 *)&v90[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v90[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v90[14] << 48), *(unsigned __int16 *)&v90[16] | (*(unsigned __int16 *)&v90[18] << 16));
    v42 = v41;
    v43 = *(_QWORD *)(v41 + 16);
    if (!v43)
    {
      LODWORD(v28) = 0;
      v21 = MEMORY[0x1E0DEE9D8];
      v47 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v47)
        goto LABEL_26;
LABEL_23:
      if (!*(_WORD *)(v21 + 2 * v47 + 30))
      {
        do
        {
          *(_QWORD *)(v21 + 16) = v47 - 1;
          if (v47 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v21 + 28 + 2 * v47--));
      }
      goto LABEL_26;
    }
    v78 = v40;
    v79 = v39;
    v21 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v21 + 16) = v43;
    v22 = (void *)(2 * v43);
    bzero((void *)(v21 + 32), 2 * v43);
    v44 = *(unsigned __int16 *)(2 * v43 + v42 + 30);
    LOWORD(v45) = *(_WORD *)(2 * v43 + v42 + 30) / 0xAu;
    while (1)
    {
      *(_WORD *)(v21 + 30 + 2 * v43) = v45;
      LODWORD(v28) = v44 % 0xA;
      if (v43 == 1)
        break;
      v44 = *(unsigned __int16 *)(v42 + 28 + 2 * v43) | ((_DWORD)v28 << 16);
      v45 = v44 / 0xA;
      v46 = v43 - 2;
      --v43;
      if (v46 >= *(_QWORD *)(v21 + 16))
      {
        __break(1u);
        goto LABEL_33;
      }
    }
    LOWORD(v40) = v78;
    LODWORD(v39) = v79;
    v47 = *(_QWORD *)(v21 + 16);
    if (v47)
      goto LABEL_23;
LABEL_26:
    swift_bridgeObjectRelease();
    *(_DWORD *)v89 = v39;
    *(_WORD *)&v89[4] = v40;
    *(_WORD *)&v89[6] = v19;
    *(_WORD *)&v89[8] = (_WORD)v86;
    *(_WORD *)&v89[10] = v84;
    *(_WORD *)&v89[12] = v83;
    *(_WORD *)&v89[14] = v81;
    *(_WORD *)&v89[16] = v82;
    *(_WORD *)&v89[18] = v80;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v21);
    v85 = v49;
    if (v49)
      break;
    v50 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v50))
      goto LABEL_46;
    _So9NSDecimala__length_setter(v50, v89);
    *(_DWORD *)v90 = *(_DWORD *)v89;
    *(_OWORD *)&v90[4] = *(_OWORD *)&v89[4];
    *(_QWORD *)v89 = v28 | 0x30;
    v51._countAndFlagsBits = MEMORY[0x186DA46D0](v89, 1);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v86 = (NSDecimal *)*(unsigned int *)v90;
    v84 = *(unsigned __int16 *)&v90[4];
    LOWORD(v24) = *(_WORD *)&v90[6];
    v52 = *(unsigned __int16 *)&v90[8];
    LOWORD(v26) = *(_WORD *)&v90[10];
    LOWORD(v27) = *(_WORD *)&v90[12];
    LOWORD(v28) = *(_WORD *)&v90[14];
    v53 = *(unsigned __int16 *)&v90[16];
    LOWORD(v30) = *(_WORD *)&v90[18];
    *(_DWORD *)v89 = *(_DWORD *)v90;
    *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
    *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
    *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
    *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
    *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
    *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
    *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
    *(_WORD *)&v89[18] = *(_WORD *)&v90[18];
    v54 = _So9NSDecimala__length_getter(v89);
    v34 = v53;
    v35 = v52;
    v33 = v86;
    v36 = v84;
    if (!v54)
      goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_46:
  v77 = 0;
  v76 = 3455;
  v75 = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_47:
  swift_release_n();
  v72 = swift_willThrow();
  __break(1u);
LABEL_48:
  result._object = v73;
  result._countAndFlagsBits = v72;
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.Currency.format(_:)(NSDecimal *a1)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  Swift::String v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  Swift::String v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  Swift::String v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  Swift::String v48;
  int v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  Swift::String result;
  _BYTE v57[40];
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE v69[20];
  _BYTE v70[20];
  uint64_t v71;

  v4 = v2;
  v5 = v1;
  v7 = 0;
  v71 = *MEMORY[0x1E0C80C00];
  v8 = specialized static ICUCurrencyNumberFormatter.create(for:)(v3);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v10 = v5;
    v11 = v4;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v9, (uint64_t)a1, v5, v4);
LABEL_32:
    v45 = swift_retain_n();
    MEMORY[0x1E0C80A78](v45);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v57, (uint64_t *)v70);
    if (v7)
      goto LABEL_48;
    v44 = *(_QWORD *)v70;
    v43 = *(_QWORD *)&v70[8];
    swift_release();
    swift_release_n();
    v4 = v11;
    if (v43)
      goto LABEL_45;
  }
  else
  {
    v10 = v5;
  }
  v65 = 0;
  *(_QWORD *)v70 = a1;
  v12 = (unint64_t)a1 >> 32;
  v13 = (unint64_t)a1 >> 48;
  v14 = v10;
  v15 = v10 >> 16;
  *(_WORD *)&v70[8] = v14;
  v16 = HIDWORD(v14);
  *(_WORD *)&v70[10] = v15;
  v17 = HIWORD(v14);
  *(_WORD *)&v70[12] = WORD2(v14);
  v18 = HIWORD(v4);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    *(_QWORD *)v70 = a1;
    *(_WORD *)&v70[8] = v14;
    *(_WORD *)&v70[10] = v15;
    *(_WORD *)&v70[12] = WORD2(v14);
    *(_WORD *)&v70[14] = HIWORD(v14);
    *(_DWORD *)&v70[16] = v4;
    if (_So9NSDecimala__isNegative_getter(v70))
    {
      v43 = 0xE300000000000000;
      v44 = 5136718;
LABEL_45:
      v54 = v44;
      v55 = (void *)v43;
      goto LABEL_49;
    }
  }
  *(_QWORD *)v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    v43 = 0xE100000000000000;
    v44 = 48;
    goto LABEL_45;
  }
  v67 = 0;
  v68 = 0xE000000000000000;
  *(_QWORD *)v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  *(_QWORD *)v69 = a1;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = WORD2(v14);
  *(_WORD *)&v69[14] = HIWORD(v14);
  *(_DWORD *)&v69[16] = v4;
  if ((int)_So9NSDecimala__exponent_getter(v69) >= 1)
  {
    do
    {
      v19._countAndFlagsBits = 48;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      *(_DWORD *)v69 = (_DWORD)a1;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v14;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      *(_WORD *)&v69[16] = v4;
      *(_WORD *)&v69[18] = v18;
      v20 = _So9NSDecimala__exponent_getter(v69);
      _So9NSDecimala__exponent_setter((v20 - 1), v70);
      LODWORD(a1) = *(_DWORD *)v70;
      LOWORD(v12) = *(_WORD *)&v70[4];
      LOWORD(v13) = *(_WORD *)&v70[6];
      v14 = *(unsigned __int16 *)&v70[8];
      LOWORD(v15) = *(_WORD *)&v70[10];
      LOWORD(v16) = *(_WORD *)&v70[12];
      LOWORD(v17) = *(_WORD *)&v70[14];
      v4 = *(unsigned __int16 *)&v70[16];
      LOWORD(v18) = *(_WORD *)&v70[18];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *(_QWORD *)&v69[8] = *(_QWORD *)&v70[8];
      *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
      *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v69) > 0);
  }
  *(_DWORD *)v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  *(_WORD *)&v69[16] = v4;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__exponent_getter(v69))
  {
    _So9NSDecimala__exponent_setter(1, v70);
    LODWORD(a1) = *(_DWORD *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    v14 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    v4 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
  }
  v21 = v4;
  v22 = (int)a1;
  *(_DWORD *)v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  v66 = v14;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  v23 = v21;
  *(_WORD *)&v69[16] = v21;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__length_getter(v69))
  {
    LOWORD(v24) = v66;
LABEL_36:
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    v46 = v24;
    if ((int)_So9NSDecimala__exponent_getter(v69) <= 0)
    {
      *(_DWORD *)v69 = v22;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v46;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      v47 = v23;
      for (*(_WORD *)&v69[16] = v23; ; *(_WORD *)&v69[16] = *(_WORD *)&v70[16])
      {
        *(_WORD *)&v69[18] = v18;
        if (!_So9NSDecimala__exponent_getter(v69))
          break;
        v48._countAndFlagsBits = 48;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        *(_DWORD *)v69 = v22;
        *(_WORD *)&v69[4] = v12;
        *(_WORD *)&v69[6] = v13;
        *(_WORD *)&v69[8] = v46;
        *(_WORD *)&v69[10] = v15;
        *(_WORD *)&v69[12] = v16;
        *(_WORD *)&v69[14] = v17;
        *(_WORD *)&v69[16] = v47;
        *(_WORD *)&v69[18] = v18;
        v49 = _So9NSDecimala__exponent_getter(v69);
        _So9NSDecimala__exponent_setter((v49 + 1), v70);
        v22 = *(_DWORD *)v70;
        LOWORD(v12) = *(_WORD *)&v70[4];
        LOWORD(v13) = *(_WORD *)&v70[6];
        v46 = *(_WORD *)&v70[8];
        LOWORD(v15) = *(_WORD *)&v70[10];
        LOWORD(v16) = *(_WORD *)&v70[12];
        LOWORD(v17) = *(_WORD *)&v70[14];
        v47 = *(_WORD *)&v70[16];
        LOWORD(v18) = *(_WORD *)&v70[18];
        *(_QWORD *)v69 = *(_QWORD *)v70;
        *(_QWORD *)&v69[8] = *(_QWORD *)&v70[8];
      }
      v50._countAndFlagsBits = 46;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 48;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
    }
    else
    {
      v47 = v23;
    }
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v46;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v47;
    *(_WORD *)&v69[18] = v18;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
      v52._countAndFlagsBits = 45;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
    }
    *(_QWORD *)v69 = v67;
    *(_QWORD *)&v69[8] = v68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    v44 = String.init<A>(_:)();
    v43 = v53;
    goto LABEL_45;
  }
  a1 = (NSDecimal *)3435973837;
  v24 = v66;
  while (1)
  {
    v66 = v24;
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    if (!_So9NSDecimala__exponent_getter(v69))
    {
      LODWORD(v64) = v23;
      v25._countAndFlagsBits = 46;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      LOWORD(v23) = v64;
    }
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v66;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    v26 = _So9NSDecimala__exponent_getter(v69);
    _So9NSDecimala__exponent_setter((v26 + 1), v70);
    v27 = *(unsigned int *)v70;
    v7 = *(unsigned __int16 *)&v70[6];
    v11 = *(unsigned __int16 *)&v70[14];
    v66 = *(unsigned __int16 *)&v70[4];
    v63 = *(unsigned __int16 *)&v70[10];
    v64 = *(unsigned __int16 *)&v70[8];
    v62 = *(unsigned __int16 *)&v70[12];
    v28 = *(_WORD *)&v70[18];
    v61 = *(unsigned __int16 *)&v70[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v70 | ((unint64_t)*(unsigned __int16 *)&v70[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[6] << 48), *(unsigned __int16 *)&v70[8] | ((unint64_t)*(unsigned __int16 *)&v70[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v70[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[14] << 48), *(unsigned __int16 *)&v70[16] | (*(unsigned __int16 *)&v70[18] << 16));
    v30 = v29;
    v31 = *(_QWORD *)(v29 + 16);
    if (!v31)
    {
      LODWORD(v17) = 0;
      v32 = MEMORY[0x1E0DEE9D8];
      v36 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v36)
        goto LABEL_25;
LABEL_22:
      if (!*(_WORD *)(v32 + 2 * v36 + 30))
      {
        do
        {
          *(_QWORD *)(v32 + 16) = v36 - 1;
          if (v36 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v32 + 28 + 2 * v36--));
      }
      goto LABEL_25;
    }
    v60 = v27;
    v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v10 = v32 + 30;
    *(_QWORD *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), 2 * v31);
    v33 = *(unsigned __int16 *)(2 * v31 + v30 + 30);
    v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v31) = v34;
      LODWORD(v17) = v33 % 0xA;
      if (v31 == 1)
        break;
      v33 = *(unsigned __int16 *)(v30 + 28 + 2 * v31) | ((_DWORD)v17 << 16);
      v34 = v33 / 0xA;
      v35 = v31 - 2;
      --v31;
      if (v35 >= *(_QWORD *)(v32 + 16))
      {
        __break(1u);
        goto LABEL_32;
      }
    }
    LODWORD(v27) = v60;
    v36 = *(_QWORD *)(v32 + 16);
    if (v36)
      goto LABEL_22;
LABEL_25:
    swift_bridgeObjectRelease();
    *(_DWORD *)v69 = v27;
    *(_WORD *)&v69[4] = v66;
    *(_WORD *)&v69[6] = v7;
    *(_WORD *)&v69[8] = v64;
    *(_WORD *)&v69[10] = v63;
    *(_WORD *)&v69[12] = v62;
    *(_WORD *)&v69[14] = v11;
    *(_WORD *)&v69[16] = v61;
    *(_WORD *)&v69[18] = v28;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v32);
    if (v38)
      break;
    v65 = 0;
    v39 = *(_QWORD *)(v32 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39))
      goto LABEL_47;
    _So9NSDecimala__length_setter(v39, v69);
    *(_DWORD *)v70 = *(_DWORD *)v69;
    *(_OWORD *)&v70[4] = *(_OWORD *)&v69[4];
    *(_QWORD *)v69 = v17 | 0x30;
    v40._countAndFlagsBits = MEMORY[0x186DA46D0](v69, 1);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v66 = *(unsigned int *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    v41 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    v23 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
    *(_QWORD *)v69 = *(_QWORD *)v70;
    *(_QWORD *)&v69[8] = *(_QWORD *)&v70[8];
    *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
    *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    v42 = _So9NSDecimala__length_getter(v69);
    v24 = v41;
    v22 = v66;
    if (!v42)
      goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_47:
  v59 = 0;
  v58 = 3455;
  v57[32] = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_48:
  swift_release_n();
  v54 = swift_willThrow();
  __break(1u);
LABEL_49:
  result._object = v55;
  result._countAndFlagsBits = v54;
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.Percent.format(_:)(NSDecimal *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  Swift::String v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  Swift::String v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  Swift::String v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  Swift::String v48;
  int v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  Swift::String result;
  _BYTE v57[40];
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE v69[20];
  _BYTE v70[20];
  uint64_t v71;

  v4 = v2;
  v5 = v1;
  v7 = 0;
  v71 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ICUPercentNumberFormatter();
  v8 = static ICUPercentNumberFormatter.create(for:)(v3);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v10 = v5;
    v11 = v4;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v9, (uint64_t)a1, v5, v4);
LABEL_32:
    v45 = swift_retain_n();
    MEMORY[0x1E0C80A78](v45);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v57, (uint64_t *)v70);
    if (v7)
      goto LABEL_48;
    v44 = *(_QWORD *)v70;
    v43 = *(_QWORD *)&v70[8];
    swift_release();
    swift_release_n();
    v4 = v11;
    if (v43)
      goto LABEL_45;
  }
  else
  {
    v10 = v5;
  }
  v65 = 0;
  *(_QWORD *)v70 = a1;
  v12 = (unint64_t)a1 >> 32;
  v13 = (unint64_t)a1 >> 48;
  v14 = v10;
  v15 = v10 >> 16;
  *(_WORD *)&v70[8] = v14;
  v16 = HIDWORD(v14);
  *(_WORD *)&v70[10] = v15;
  v17 = HIWORD(v14);
  *(_WORD *)&v70[12] = WORD2(v14);
  v18 = HIWORD(v4);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    *(_QWORD *)v70 = a1;
    *(_WORD *)&v70[8] = v14;
    *(_WORD *)&v70[10] = v15;
    *(_WORD *)&v70[12] = WORD2(v14);
    *(_WORD *)&v70[14] = HIWORD(v14);
    *(_DWORD *)&v70[16] = v4;
    if (_So9NSDecimala__isNegative_getter(v70))
    {
      v43 = 0xE300000000000000;
      v44 = 5136718;
LABEL_45:
      v54 = v44;
      v55 = (void *)v43;
      goto LABEL_49;
    }
  }
  *(_QWORD *)v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    v43 = 0xE100000000000000;
    v44 = 48;
    goto LABEL_45;
  }
  v67 = 0;
  v68 = 0xE000000000000000;
  *(_QWORD *)v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  *(_QWORD *)v69 = a1;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = WORD2(v14);
  *(_WORD *)&v69[14] = HIWORD(v14);
  *(_DWORD *)&v69[16] = v4;
  if ((int)_So9NSDecimala__exponent_getter(v69) >= 1)
  {
    do
    {
      v19._countAndFlagsBits = 48;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      *(_DWORD *)v69 = (_DWORD)a1;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v14;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      *(_WORD *)&v69[16] = v4;
      *(_WORD *)&v69[18] = v18;
      v20 = _So9NSDecimala__exponent_getter(v69);
      _So9NSDecimala__exponent_setter((v20 - 1), v70);
      LODWORD(a1) = *(_DWORD *)v70;
      LOWORD(v12) = *(_WORD *)&v70[4];
      LOWORD(v13) = *(_WORD *)&v70[6];
      v14 = *(unsigned __int16 *)&v70[8];
      LOWORD(v15) = *(_WORD *)&v70[10];
      LOWORD(v16) = *(_WORD *)&v70[12];
      LOWORD(v17) = *(_WORD *)&v70[14];
      v4 = *(unsigned __int16 *)&v70[16];
      LOWORD(v18) = *(_WORD *)&v70[18];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *(_QWORD *)&v69[8] = *(_QWORD *)&v70[8];
      *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
      *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v69) > 0);
  }
  *(_DWORD *)v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  *(_WORD *)&v69[16] = v4;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__exponent_getter(v69))
  {
    _So9NSDecimala__exponent_setter(1, v70);
    LODWORD(a1) = *(_DWORD *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    v14 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    v4 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
  }
  v21 = v4;
  v22 = (int)a1;
  *(_DWORD *)v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  v66 = v14;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  v23 = v21;
  *(_WORD *)&v69[16] = v21;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__length_getter(v69))
  {
    LOWORD(v24) = v66;
LABEL_36:
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    v46 = v24;
    if ((int)_So9NSDecimala__exponent_getter(v69) <= 0)
    {
      *(_DWORD *)v69 = v22;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v46;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      v47 = v23;
      for (*(_WORD *)&v69[16] = v23; ; *(_WORD *)&v69[16] = *(_WORD *)&v70[16])
      {
        *(_WORD *)&v69[18] = v18;
        if (!_So9NSDecimala__exponent_getter(v69))
          break;
        v48._countAndFlagsBits = 48;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        *(_DWORD *)v69 = v22;
        *(_WORD *)&v69[4] = v12;
        *(_WORD *)&v69[6] = v13;
        *(_WORD *)&v69[8] = v46;
        *(_WORD *)&v69[10] = v15;
        *(_WORD *)&v69[12] = v16;
        *(_WORD *)&v69[14] = v17;
        *(_WORD *)&v69[16] = v47;
        *(_WORD *)&v69[18] = v18;
        v49 = _So9NSDecimala__exponent_getter(v69);
        _So9NSDecimala__exponent_setter((v49 + 1), v70);
        v22 = *(_DWORD *)v70;
        LOWORD(v12) = *(_WORD *)&v70[4];
        LOWORD(v13) = *(_WORD *)&v70[6];
        v46 = *(_WORD *)&v70[8];
        LOWORD(v15) = *(_WORD *)&v70[10];
        LOWORD(v16) = *(_WORD *)&v70[12];
        LOWORD(v17) = *(_WORD *)&v70[14];
        v47 = *(_WORD *)&v70[16];
        LOWORD(v18) = *(_WORD *)&v70[18];
        *(_QWORD *)v69 = *(_QWORD *)v70;
        *(_QWORD *)&v69[8] = *(_QWORD *)&v70[8];
      }
      v50._countAndFlagsBits = 46;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 48;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
    }
    else
    {
      v47 = v23;
    }
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v46;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v47;
    *(_WORD *)&v69[18] = v18;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
      v52._countAndFlagsBits = 45;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
    }
    *(_QWORD *)v69 = v67;
    *(_QWORD *)&v69[8] = v68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    v44 = String.init<A>(_:)();
    v43 = v53;
    goto LABEL_45;
  }
  a1 = (NSDecimal *)3435973837;
  v24 = v66;
  while (1)
  {
    v66 = v24;
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    if (!_So9NSDecimala__exponent_getter(v69))
    {
      LODWORD(v64) = v23;
      v25._countAndFlagsBits = 46;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      LOWORD(v23) = v64;
    }
    *(_DWORD *)v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v66;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    v26 = _So9NSDecimala__exponent_getter(v69);
    _So9NSDecimala__exponent_setter((v26 + 1), v70);
    v27 = *(unsigned int *)v70;
    v7 = *(unsigned __int16 *)&v70[6];
    v11 = *(unsigned __int16 *)&v70[14];
    v66 = *(unsigned __int16 *)&v70[4];
    v63 = *(unsigned __int16 *)&v70[10];
    v64 = *(unsigned __int16 *)&v70[8];
    v62 = *(unsigned __int16 *)&v70[12];
    v28 = *(_WORD *)&v70[18];
    v61 = *(unsigned __int16 *)&v70[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v70 | ((unint64_t)*(unsigned __int16 *)&v70[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[6] << 48), *(unsigned __int16 *)&v70[8] | ((unint64_t)*(unsigned __int16 *)&v70[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v70[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[14] << 48), *(unsigned __int16 *)&v70[16] | (*(unsigned __int16 *)&v70[18] << 16));
    v30 = v29;
    v31 = *(_QWORD *)(v29 + 16);
    if (!v31)
    {
      LODWORD(v17) = 0;
      v32 = MEMORY[0x1E0DEE9D8];
      v36 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v36)
        goto LABEL_25;
LABEL_22:
      if (!*(_WORD *)(v32 + 2 * v36 + 30))
      {
        do
        {
          *(_QWORD *)(v32 + 16) = v36 - 1;
          if (v36 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v32 + 28 + 2 * v36--));
      }
      goto LABEL_25;
    }
    v60 = v27;
    v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v10 = v32 + 30;
    *(_QWORD *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), 2 * v31);
    v33 = *(unsigned __int16 *)(2 * v31 + v30 + 30);
    v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v31) = v34;
      LODWORD(v17) = v33 % 0xA;
      if (v31 == 1)
        break;
      v33 = *(unsigned __int16 *)(v30 + 28 + 2 * v31) | ((_DWORD)v17 << 16);
      v34 = v33 / 0xA;
      v35 = v31 - 2;
      --v31;
      if (v35 >= *(_QWORD *)(v32 + 16))
      {
        __break(1u);
        goto LABEL_32;
      }
    }
    LODWORD(v27) = v60;
    v36 = *(_QWORD *)(v32 + 16);
    if (v36)
      goto LABEL_22;
LABEL_25:
    swift_bridgeObjectRelease();
    *(_DWORD *)v69 = v27;
    *(_WORD *)&v69[4] = v66;
    *(_WORD *)&v69[6] = v7;
    *(_WORD *)&v69[8] = v64;
    *(_WORD *)&v69[10] = v63;
    *(_WORD *)&v69[12] = v62;
    *(_WORD *)&v69[14] = v11;
    *(_WORD *)&v69[16] = v61;
    *(_WORD *)&v69[18] = v28;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v32);
    if (v38)
      break;
    v65 = 0;
    v39 = *(_QWORD *)(v32 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39))
      goto LABEL_47;
    _So9NSDecimala__length_setter(v39, v69);
    *(_DWORD *)v70 = *(_DWORD *)v69;
    *(_OWORD *)&v70[4] = *(_OWORD *)&v69[4];
    *(_QWORD *)v69 = v17 | 0x30;
    v40._countAndFlagsBits = MEMORY[0x186DA46D0](v69, 1);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v66 = *(unsigned int *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    v41 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    v23 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
    *(_QWORD *)v69 = *(_QWORD *)v70;
    *(_QWORD *)&v69[8] = *(_QWORD *)&v70[8];
    *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
    *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    v42 = _So9NSDecimala__length_getter(v69);
    v24 = v41;
    v22 = v66;
    if (!v42)
      goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_47:
  v59 = 0;
  v58 = 3455;
  v57[32] = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_48:
  swift_release_n();
  v54 = swift_willThrow();
  __break(1u);
LABEL_49:
  result._object = v55;
  result._countAndFlagsBits = v54;
  return result;
}

double NSDecimal.FormatStyle.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = NSDecimal.FormatStyle.locale(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

double NSDecimal.FormatStyle.Currency.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = NSDecimal.FormatStyle.locale(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Currency, a2).n128_u64[0];
  return result;
}

double NSDecimal.FormatStyle.Percent.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = NSDecimal.FormatStyle.locale(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2).n128_u64[0];
  return result;
}

__n128 NSDecimal.FormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v7;

  outlined init with copy of ICUNumberFormatter.Signature(v3, (uint64_t)a3, a2);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *a3 = v7;
  return result;
}

uint64_t NSDecimal.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 NSDecimal.FormatStyle.locale.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*NSDecimal.FormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 NSDecimal.FormatStyle.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  __n128 v10;

  v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v6 = &v4[v5[9]];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = &v4[v5[10]];
  *(_QWORD *)v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  result = v10;
  *a2 = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle, a1);
}

uint64_t NSDecimal.FormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.grouping(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

double NSDecimal.FormatStyle.precision(_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = NSDecimal.FormatStyle.precision(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

uint64_t NSDecimal.FormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.sign(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t NSDecimal.FormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.decimalSeparator(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t NSDecimal.FormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return NSDecimal.FormatStyle.rounded(rule:increment:)(a1, a2, a3, type metadata accessor for NSDecimal.FormatStyle, a4);
}

uint64_t NSDecimal.FormatStyle.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return NSDecimal.FormatStyle.scale(_:)(type metadata accessor for NSDecimal.FormatStyle, a1, a2);
}

uint64_t NSDecimal.FormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.notation(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x697463656C6C6F63;
  else
    return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void NSDecimal.FormatStyle.hash(into:)(uint64_t a1)
{
  NSDecimal.FormatStyle.hash(into:)(a1, type metadata accessor for NSDecimal.FormatStyle);
}

void static NSDecimal.FormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  static NSDecimal.FormatStyle.== infix(_:_:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle);
}

uint64_t NSDecimal.FormatStyle.encode(to:)(_QWORD *a1)
{
  return NSDecimal.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys, (uint64_t)&unk_1E0F36870, (void (*)(_QWORD))type metadata accessor for NSDecimal.FormatStyle);
}

Swift::Int NSDecimal.FormatStyle.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.hash(into:));
}

uint64_t NSDecimal.FormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  char v28;

  v23 = a2;
  v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v3);
  v24 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.CodingKeys>);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (_OWORD *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (uint64_t)v10 + *(int *)(v11 + 20);
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 72) = 131584;
  *(_WORD *)(v12 + 76) = 512;
  v13 = v12 + v3[9];
  v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v12 + v3[10];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = -1;
  *(_BYTE *)(v12 + v3[11]) = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys();
  v16 = (uint64_t)v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
    v21 = v12;
  }
  else
  {
    v28 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    v17 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v26 = v10;
    *v10 = v27;
    LOBYTE(v27) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    v19 = (uint64_t)v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v19, v12);
    v20 = (uint64_t)v26;
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v26, v23, type metadata accessor for NSDecimal.FormatStyle);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v21 = v20;
    v22 = type metadata accessor for NSDecimal.FormatStyle;
  }
  return outlined destroy of ICUNumberFormatter.Signature(v21, v22);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))NSDecimal.FormatStyle.format(_:), a2);
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle(a1, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle(_QWORD *a1)
{
  return NSDecimal.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))NSDecimal.FormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))NSDecimal.FormatStyle.hash(into:));
}

uint64_t (*NSDecimal.FormatStyle.Percent.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 NSDecimal.FormatStyle.Percent.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  __n128 v10;

  v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v6 = &v4[v5[9]];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)v4 = 0x4059000000000000;
  v4[8] = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  v8 = &v4[v5[10]];
  *(_QWORD *)v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  result = v10;
  *a2 = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle.Percent, a1);
}

uint64_t NSDecimal.FormatStyle.Percent.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.grouping(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  result = a2(0);
  *(_BYTE *)(a3 + *(int *)(result + 20) + 73) = v6;
  return result;
}

double NSDecimal.FormatStyle.Percent.precision(_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = NSDecimal.FormatStyle.precision(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2).n128_u64[0];
  return result;
}

__n128 NSDecimal.FormatStyle.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __n128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a1[1];
  v12 = *a1;
  v10 = (__n128)a1[2];
  v6 = *((_QWORD *)a1 + 6);
  v7 = *((_BYTE *)a1 + 56);
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  v8 = a3 + *(int *)(a2(0) + 20);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.sign(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;
  uint64_t result;
  uint64_t v12;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  if (v7)
    v9 = 256;
  else
    v9 = 0;
  v10 = v9 | v6;
  result = a2(0);
  v12 = a3 + *(int *)(result + 20);
  *(_BYTE *)(v12 + 76) = v8 != 0;
  *(_WORD *)(v12 + 74) = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.decimalSeparator(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  result = a2(0);
  *(_BYTE *)(a3 + *(int *)(result + 20) + 77) = v6;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return NSDecimal.FormatStyle.rounded(rule:increment:)(a1, a2, a3, type metadata accessor for NSDecimal.FormatStyle.Percent, a4);
}

uint64_t NSDecimal.FormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  outlined init with copy of ICUNumberFormatter.Signature(v5, a5, a4);
  v11 = a5 + *(int *)(a4(0) + 20);
  v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of Any?(v13, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    v17 = v11 + *(int *)(v12 + 40);
    *(_QWORD *)v17 = a2;
    *(_BYTE *)(v17 + 8) = 0;
  }
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return NSDecimal.FormatStyle.scale(_:)(type metadata accessor for NSDecimal.FormatStyle.Percent, a1, a2);
}

uint64_t NSDecimal.FormatStyle.scale(_:)@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;

  v5 = v3;
  outlined init with copy of ICUNumberFormatter.Signature(v5, a2, a1);
  result = a1(0);
  v9 = a2 + *(int *)(result + 20);
  *(double *)v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.notation(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  v7 = a3 + *(int *)(a2(0) + 20);
  result = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Percent.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Percent.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t (*NSDecimal.FormatStyle.Currency.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.FormatStyle.Currency.currencyCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NSDecimal.FormatStyle.Currency.currencyCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NSDecimal.FormatStyle.Currency.currencyCode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.FormatStyle.Currency.init(code:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  *(_OWORD *)a4 = *a3;
  *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = a2;
  v4 = a4 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v5 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v6 = v4 + v5[9];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 72) = 512;
  *(_DWORD *)(v4 + 74) = 2;
  *(_BYTE *)(v4 + 78) = 2;
  v9 = v4 + v5[10];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = -1;
  *(_BYTE *)(v4 + v5[11]) = 1;
  *(_BYTE *)(v4 + v5[12]) = 3;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle.Currency, a1);
}

uint64_t NSDecimal.FormatStyle.attributed.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, a1);
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t NSDecimal.FormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t result;

  v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  *(_BYTE *)(a2 + *(int *)(result + 24) + 73) = v4;
  return result;
}

__n128 NSDecimal.FormatStyle.Currency.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;

  v9 = a1[1];
  v10 = *a1;
  v8 = (__n128)a1[2];
  v4 = *((_QWORD *)a1 + 6);
  v5 = *((_BYTE *)a1 + 56);
  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  v6 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  *(_OWORD *)(v6 + 16) = v10;
  *(_OWORD *)(v6 + 32) = v9;
  result = v8;
  *(__n128 *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 64) = v4;
  *(_BYTE *)(v6 + 72) = v5;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  if (v5)
    v8 = 256;
  else
    v8 = 0;
  v9 = v8 | v4;
  if (v6)
    v10 = 0x10000;
  else
    v10 = 0;
  if (v7)
    v11 = 0x1000000;
  else
    v11 = 0;
  v12 = v9 | v10 | v11;
  result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  *(_DWORD *)(a2 + *(int *)(result + 24) + 74) = v12;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t result;

  v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  *(_BYTE *)(a2 + *(int *)(result + 24) + 78) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  outlined init with copy of ICUNumberFormatter.Signature(v4, a4, type metadata accessor for NSDecimal.FormatStyle.Currency);
  v9 = a4 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v10 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v11 = v9 + *(int *)(v10 + 36);
  outlined destroy of Any?(v11, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((a3 & 1) == 0)
  {
    v15 = v9 + *(int *)(v10 + 40);
    *(_QWORD *)v15 = a2;
    *(_BYTE *)(v15 + 8) = 0;
  }
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  outlined init with copy of ICUNumberFormatter.Signature(v2, a1, type metadata accessor for NSDecimal.FormatStyle.Currency);
  result = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  v6 = a1 + *(int *)(result + 24);
  *(double *)v6 = a2;
  *(_BYTE *)(v6 + 8) = 0;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  v5 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v5 + *(int *)(result + 44)) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
  v5 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v5 + *(int *)(result + 48)) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v9, type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      v18 = (uint64_t)v9;
      v19 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }
    else
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v6, type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      v18 = (uint64_t)v6;
      v19 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }
  else
  {
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v12, type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0);
    NSDecimal.FormatStyle.hash(into:)(a1);
    v18 = (uint64_t)v12;
    v19 = type metadata accessor for NSDecimal.FormatStyle;
  }
  return outlined destroy of ICUNumberFormatter.Signature(v18, v19);
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t (*v21)(uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys>);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  MEMORY[0x1E0C80A78](v2);
  v40 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v38);
  v39 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys>);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v34);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys>);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v31);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.CodingKeys>);
  v44 = *(_QWORD *)(v17 - 8);
  v45 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature(v43, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, (uint64_t)v8, type metadata accessor for NSDecimal.FormatStyle.Currency);
      v47 = 1;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
      v22 = v35;
      v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      v24 = v37;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v24);
      v25 = (uint64_t)v8;
    }
    else
    {
      v21 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      v27 = v39;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, v39, type metadata accessor for NSDecimal.FormatStyle.Percent);
      v48 = 2;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
      v28 = v40;
      v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      v29 = v42;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v29);
      v25 = v27;
    }
  }
  else
  {
    v21 = type metadata accessor for NSDecimal.FormatStyle;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle);
    v46 = 0;
    lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
    v23 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    v26 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v26);
    v25 = (uint64_t)v13;
  }
  outlined destroy of ICUNumberFormatter.Signature(v25, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v19, v23);
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;

  v54 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys>);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys>);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x1E0C80A78](v4);
  v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys>);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6);
  v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.CodingKeys>);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v43 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v43 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v43 - v20;
  v22 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  v60 = v9;
  v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
    goto LABEL_9;
  v44 = v15;
  v45 = v18;
  v46 = v12;
  v47 = v21;
  v24 = v57;
  v25 = v58;
  v27 = v59;
  v26 = v60;
  v62 = v10;
  v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v29 = v25;
    v30 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v32 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x1E0DEC450], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v29);
LABEL_9:
    v37 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v37);
  }
  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      v64 = 1;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Currency(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      v35 = (uint64_t)v44;
      v36 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
      v37 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v65 = 2;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
      v33 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Percent(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      v39 = (uint64_t)v46;
      v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v25);
      swift_storeEnumTagMultiPayload();
      v35 = v39;
      v37 = (uint64_t)v61;
    }
  }
  else
  {
    v63 = 0;
    lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    v35 = (uint64_t)v45;
    v38 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
    v37 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }
  v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature(v35, (uint64_t)v47, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  outlined init with take of ICUNumberFormatter.Signature(v42, v54, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  return __swift_destroy_boxed_opaque_existential_1(v37);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x79636E6572727563;
  if (*v0 != 1)
    v1 = 0x697463656C6C6F63;
  if (*v0)
    return v1;
  else
    return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Currency.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x79636E6572727563;
  if (*v0 != 1)
    v1 = 0x746E6563726570;
  if (*v0)
    return v1;
  else
    return 0x6C616D69636564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NSDecimal.FormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.Style.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Attributed.Style@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.Style.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Attributed.Style(_QWORD *a1)
{
  return NSDecimal.FormatStyle.Attributed.Style.encode(to:)(a1);
}

uint64_t NSDecimal.FormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  unint64_t v40;
  Swift::OpaquePointer v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  Swift::String v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  Swift::String v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  Swift::String v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  __int16 i;
  Swift::String v75;
  int v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[140];
  unsigned int v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;

  v87 = a2;
  LODWORD(v89) = a3;
  v88 = a1;
  v5 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v86, (uint64_t)v19, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v10, type metadata accessor for NSDecimal.FormatStyle.Currency);
      v22 = specialized static ICUCurrencyNumberFormatter.create(for:)(v10);
      v23 = v88;
      if (v22)
      {
        ICUNumberFormatter.attributedFormat(_:)(v88, v87, v89 | 0x200000000);
        swift_release();
        v24 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        v25 = (uint64_t)v10;
        return outlined destroy of ICUNumberFormatter.Signature(v25, v24);
      }
      v86 = a4;
      v38 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      v39 = (uint64_t)v10;
    }
    else
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle.Percent);
      type metadata accessor for ICUPercentNumberFormatter();
      v36 = static ICUPercentNumberFormatter.create(for:)((uint64_t)v7);
      v23 = v88;
      if (v36)
      {
        ICUNumberFormatter.attributedFormat(_:)(v88, v87, v89 | 0x200000000);
        swift_release();
        v24 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        v25 = (uint64_t)v7;
        return outlined destroy of ICUNumberFormatter.Signature(v25, v24);
      }
      v86 = a4;
      v38 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      v39 = (uint64_t)v7;
    }
    outlined destroy of ICUNumberFormatter.Signature(v39, v38);
  }
  else
  {
    v86 = a4;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle);
    v26 = (uint64_t)&v16[*(int *)(v14 + 20)];
    v27 = *((_QWORD *)v16 + 1);
    ObjectType = swift_getObjectType();
    v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 472);
    swift_unknownObjectRetain();
    v30 = v29(ObjectType, v27);
    v85 = v31;
    swift_unknownObjectRelease();
    v32 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v27 + 464);
    swift_unknownObjectRetain();
    v32(v90, ObjectType, v27);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)&v91, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of ICUNumberFormatter.Signature(v26, (uint64_t)v13, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v33 = (uint64_t *)&v13[*(int *)(v11 + 20)];
    v34 = v85;
    *v33 = v30;
    v33[1] = v34;
    outlined init with take of LocalePreferences?((uint64_t)&v91, (uint64_t)&v13[*(int *)(v11 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
    v35 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v13);
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v13, type metadata accessor for ICUNumberFormatter.Signature);
    if (v35)
    {
      ICUNumberFormatter.attributedFormat(_:)(v88, v87, v89 | 0x200000000);
      swift_release();
      v24 = type metadata accessor for NSDecimal.FormatStyle;
      v25 = (uint64_t)v16;
      return outlined destroy of ICUNumberFormatter.Signature(v25, v24);
    }
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle);
    v23 = v88;
  }
  v91 = v23;
  v40 = HIDWORD(v23);
  LOWORD(v92) = WORD2(v23);
  v41._rawValue = (void *)HIWORD(v23);
  WORD1(v92) = HIWORD(v23);
  v42 = v87;
  v43 = v87 >> 16;
  *(_QWORD *)((char *)&v92 + 4) = v87;
  v44 = (char *)HIDWORD(v87);
  v45 = HIWORD(v87);
  v46 = v89;
  v47 = WORD1(v89);
  HIDWORD(v92) = v89;
  if (!_So9NSDecimala__length_getter(&v91))
  {
    v91 = v23;
    LOWORD(v92) = WORD2(v23);
    WORD1(v92) = HIWORD(v23);
    WORD2(v92) = v42;
    WORD3(v92) = v43;
    WORD4(v92) = (_WORD)v44;
    WORD5(v92) = v45;
    WORD6(v92) = v46;
    HIWORD(v92) = v47;
    if (_So9NSDecimala__isNegative_getter(&v91))
      goto LABEL_51;
  }
  v91 = v23;
  LOWORD(v92) = WORD2(v23);
  WORD1(v92) = HIWORD(v23);
  WORD2(v92) = v42;
  WORD3(v92) = v43;
  WORD4(v92) = (_WORD)v44;
  WORD5(v92) = v45;
  WORD6(v92) = v46;
  HIWORD(v92) = v47;
  if (!_So9NSDecimala__length_getter(&v91))
    goto LABEL_51;
  v93 = 0;
  v94 = 0xE000000000000000;
  v91 = v23;
  LOWORD(v92) = WORD2(v23);
  WORD1(v92) = HIWORD(v23);
  WORD2(v92) = v42;
  WORD3(v92) = v43;
  WORD4(v92) = (_WORD)v44;
  WORD5(v92) = v45;
  WORD6(v92) = v46;
  HIWORD(v92) = v47;
  *(_QWORD *)v90 = v23;
  *(_WORD *)&v90[8] = v42;
  *(_WORD *)&v90[10] = v43;
  *(_WORD *)&v90[12] = (_WORD)v44;
  *(_WORD *)&v90[14] = v45;
  *(_WORD *)&v90[16] = v46;
  *(_WORD *)&v90[18] = v47;
  if ((int)_So9NSDecimala__exponent_getter(v90) >= 1)
  {
    do
    {
      LODWORD(v89) = v46;
      v48._countAndFlagsBits = 48;
      v48._object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      *(_DWORD *)v90 = v23;
      *(_WORD *)&v90[4] = v40;
      *(_WORD *)&v90[6] = v41._rawValue;
      *(_WORD *)&v90[8] = v42;
      *(_WORD *)&v90[10] = v43;
      *(_WORD *)&v90[12] = (_WORD)v44;
      *(_WORD *)&v90[14] = v45;
      *(_WORD *)&v90[16] = v89;
      *(_WORD *)&v90[18] = v47;
      v49 = _So9NSDecimala__exponent_getter(v90);
      _So9NSDecimala__exponent_setter((v49 - 1), &v91);
      v23 = v91;
      LOWORD(v40) = v92;
      LOWORD(v41._rawValue) = WORD1(v92);
      v42 = WORD2(v92);
      LOWORD(v43) = WORD3(v92);
      LOWORD(v44) = WORD4(v92);
      LOWORD(v45) = WORD5(v92);
      v46 = WORD6(v92);
      LOWORD(v47) = HIWORD(v92);
      *(_DWORD *)v90 = v91;
      *(_OWORD *)&v90[4] = v92;
    }
    while ((int)_So9NSDecimala__exponent_getter(v90) > 0);
  }
  *(_DWORD *)v90 = v23;
  *(_WORD *)&v90[4] = v40;
  *(_WORD *)&v90[6] = v41._rawValue;
  *(_WORD *)&v90[8] = v42;
  *(_WORD *)&v90[10] = v43;
  *(_WORD *)&v90[12] = (_WORD)v44;
  *(_WORD *)&v90[14] = v45;
  *(_WORD *)&v90[16] = v46;
  *(_WORD *)&v90[18] = v47;
  if (!_So9NSDecimala__exponent_getter(v90))
  {
    _So9NSDecimala__exponent_setter(1, &v91);
    v23 = v91;
    LOWORD(v40) = v92;
    LOWORD(v41._rawValue) = WORD1(v92);
    v42 = WORD2(v92);
    LOWORD(v43) = WORD3(v92);
    LOWORD(v44) = WORD4(v92);
    LOWORD(v45) = WORD5(v92);
    v46 = WORD6(v92);
    LOWORD(v47) = HIWORD(v92);
  }
  v88 = v23;
  *(_DWORD *)v90 = v23;
  *(_WORD *)&v90[4] = v40;
  *(_WORD *)&v90[6] = v41._rawValue;
  v50 = v46;
  v51 = v42;
  *(_WORD *)&v90[8] = v42;
  *(_WORD *)&v90[10] = v43;
  *(_WORD *)&v90[12] = (_WORD)v44;
  *(_WORD *)&v90[14] = v45;
  LODWORD(v89) = v50;
  *(_WORD *)&v90[16] = v50;
  *(_WORD *)&v90[18] = v47;
  if (!_So9NSDecimala__length_getter(v90))
  {
LABEL_42:
    v52 = v88;
    v53 = v89;
LABEL_43:
    *(_DWORD *)v90 = v52;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v53;
    *(_WORD *)&v90[18] = v47;
    v69 = v53;
    v70 = v52;
    v71 = _So9NSDecimala__exponent_getter(v90);
    v72 = v70;
    if (v71 <= 0)
    {
      v88 = v70;
      *(_DWORD *)v90 = v70;
      *(_WORD *)&v90[4] = v40;
      *(_WORD *)&v90[6] = v41._rawValue;
      *(_WORD *)&v90[8] = v51;
      *(_WORD *)&v90[10] = v43;
      *(_WORD *)&v90[12] = (_WORD)v44;
      *(_WORD *)&v90[14] = v45;
      v73 = v69;
      *(_WORD *)&v90[16] = v69;
      *(_WORD *)&v90[18] = v47;
      for (i = v51; _So9NSDecimala__exponent_getter(v90); *(_OWORD *)&v90[4] = v92)
      {
        v75._countAndFlagsBits = 48;
        v75._object = (void *)0xE100000000000000;
        String.append(_:)(v75);
        *(_DWORD *)v90 = v88;
        *(_WORD *)&v90[4] = v40;
        *(_WORD *)&v90[6] = v41._rawValue;
        *(_WORD *)&v90[8] = i;
        *(_WORD *)&v90[10] = v43;
        *(_WORD *)&v90[12] = (_WORD)v44;
        *(_WORD *)&v90[14] = v45;
        *(_WORD *)&v90[16] = v73;
        *(_WORD *)&v90[18] = v47;
        v76 = _So9NSDecimala__exponent_getter(v90);
        _So9NSDecimala__exponent_setter((v76 + 1), &v91);
        LOWORD(v40) = v92;
        LOWORD(v41._rawValue) = WORD1(v92);
        i = WORD2(v92);
        LOWORD(v43) = WORD3(v92);
        LOWORD(v44) = WORD4(v92);
        LOWORD(v45) = WORD5(v92);
        v73 = WORD6(v92);
        LOWORD(v47) = HIWORD(v92);
        v88 = v91;
        *(_DWORD *)v90 = v91;
      }
      LODWORD(v89) = v73;
      v77._countAndFlagsBits = 46;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      v78._countAndFlagsBits = 48;
      v78._object = (void *)0xE100000000000000;
      String.append(_:)(v78);
      LOWORD(v51) = i;
      v72 = v88;
    }
    else
    {
      LODWORD(v89) = v69;
    }
    *(_DWORD *)v90 = v72;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v89;
    *(_WORD *)&v90[18] = v47;
    if (_So9NSDecimala__isNegative_getter(v90))
    {
      v79._countAndFlagsBits = 45;
      v79._object = (void *)0xE100000000000000;
      String.append(_:)(v79);
    }
    *(_QWORD *)v90 = v93;
    *(_QWORD *)&v90[8] = v94;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    String.init<A>(_:)();
LABEL_51:
    BigString.init(_:)();
    result = AttributedString.init(_:attributes:)((__int128 *)&v91, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v90);
    *v86 = *(_QWORD *)v90;
    return result;
  }
  v85 = 0;
  v52 = v88;
  v53 = v89;
  while (1)
  {
    v88 = v52;
    LODWORD(v89) = v53;
    *(_DWORD *)v90 = v52;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v53;
    *(_WORD *)&v90[18] = v47;
    if (!_So9NSDecimala__exponent_getter(v90))
    {
      v87 = v51;
      v54._countAndFlagsBits = 46;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      LOWORD(v51) = v87;
    }
    *(_DWORD *)v90 = v88;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v89;
    *(_WORD *)&v90[18] = v47;
    v55 = _So9NSDecimala__exponent_getter(v90);
    _So9NSDecimala__exponent_setter((v55 + 1), &v91);
    v56 = v91;
    v57 = (unsigned __int16)v92;
    LOWORD(v43) = WORD1(v92);
    v87 = WORD3(v92);
    v88 = WORD2(v92);
    v84 = WORD4(v92);
    v82 = WORD5(v92);
    v83 = WORD6(v92);
    v81 = HIWORD(v92);
    NSDecimal.asVariableLengthInteger()(v91 | ((unint64_t)(unsigned __int16)v92 << 32) | ((unint64_t)WORD1(v92) << 48), WORD2(v92) | ((unint64_t)WORD3(v92) << 16) | ((unint64_t)WORD4(v92) << 32) | ((unint64_t)WORD5(v92) << 48), WORD6(v92) | (HIWORD(v92) << 16));
    v51 = v58;
    v40 = *(_QWORD *)(v58 + 16);
    v89 = v57;
    if (v40)
    {
      v80 = v56;
      v41._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v44 = (char *)v41._rawValue + 30;
      *((_QWORD *)v41._rawValue + 2) = v40;
      LOWORD(v47) = 2 * v40;
      bzero((char *)v41._rawValue + 32, 2 * v40);
      v59 = *(unsigned __int16 *)(2 * v40 + v51 + 30);
      LOWORD(v60) = *(_WORD *)(2 * v40 + v51 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v44[2 * v40] = v60;
        LODWORD(v45) = v59 % 0xA;
        if (v40 == 1)
          break;
        v59 = *(unsigned __int16 *)(v51 + 28 + 2 * v40) | ((_DWORD)v45 << 16);
        v60 = v59 / 0xA;
        v61 = v40 - 2;
        --v40;
        if (v61 >= *((_QWORD *)v41._rawValue + 2))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
      LODWORD(v56) = v80;
    }
    else
    {
      LODWORD(v45) = 0;
      v41._rawValue = (void *)MEMORY[0x1E0DEE9D8];
    }
    v62 = *((_QWORD *)v41._rawValue + 2);
    if (v62 && !*((_WORD *)v41._rawValue + v62 + 15))
    {
      do
      {
        *((_QWORD *)v41._rawValue + 2) = v62 - 1;
        if (v62 == 1)
          break;
      }
      while (!*((unsigned __int16 *)v41._rawValue + v62-- + 14));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)v90 = v56;
    *(_WORD *)&v90[4] = v89;
    *(_WORD *)&v90[6] = v43;
    *(_WORD *)&v90[8] = v88;
    *(_WORD *)&v90[10] = v87;
    *(_WORD *)&v90[12] = v84;
    *(_WORD *)&v90[14] = v82;
    *(_WORD *)&v90[16] = v83;
    *(_WORD *)&v90[18] = v81;
    NSDecimal.copyVariableLengthInteger(_:)(v41);
    if (v64)
      break;
    v85 = 0;
    v65 = *((_QWORD *)v41._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v65))
      goto LABEL_53;
    _So9NSDecimala__length_setter(v65, v90);
    v91 = *(_DWORD *)v90;
    v92 = *(_OWORD *)&v90[4];
    *(_QWORD *)v90 = v45 | 0x30;
    v66._countAndFlagsBits = MEMORY[0x186DA46D0](v90, 1);
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    LOWORD(v40) = v92;
    LOWORD(v41._rawValue) = WORD1(v92);
    v87 = WORD2(v92);
    v88 = v91;
    LOWORD(v43) = WORD3(v92);
    LOWORD(v44) = WORD4(v92);
    LOWORD(v45) = WORD5(v92);
    v67 = WORD6(v92);
    LOWORD(v47) = HIWORD(v92);
    *(_DWORD *)v90 = v91;
    *(_OWORD *)&v90[4] = v92;
    v68 = _So9NSDecimala__length_getter(v90);
    v53 = v67;
    v51 = v87;
    v52 = v88;
    if (!v68)
      goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_53:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.FormatStyle.Attributed.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v23;

  v5 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = a1[1];
  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for NSDecimal.FormatStyle.Attributed);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, (uint64_t)v10, type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v10 = v17;
      v10[1] = v18;
      outlined destroy of ICUNumberFormatter.Signature(a2, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v10, a2, type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_storeEnumTagMultiPayload();
      v20 = (uint64_t)v10;
      v21 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }
    else
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v7 = v17;
      v7[1] = v18;
      outlined destroy of ICUNumberFormatter.Signature(a2, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v7, a2, type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_storeEnumTagMultiPayload();
      v20 = (uint64_t)v7;
      v21 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }
  else
  {
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v13 = v17;
    v13[1] = v18;
    outlined destroy of ICUNumberFormatter.Signature(a2, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v13, a2, type metadata accessor for NSDecimal.FormatStyle);
    swift_storeEnumTagMultiPayload();
    v20 = (uint64_t)v13;
    v21 = type metadata accessor for NSDecimal.FormatStyle;
  }
  return outlined destroy of ICUNumberFormatter.Signature(v20, v21);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return 0x656C797473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656C797473 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void NSDecimal.FormatStyle.Percent.hash(into:)(uint64_t a1)
{
  NSDecimal.FormatStyle.hash(into:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent);
}

void NSDecimal.FormatStyle.hash(into:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  _QWORD *v2;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t);
  Swift::UInt8 v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  uint64_t v58;
  Swift::UInt64 v59;
  Swift::UInt64 v60;
  int v61;
  Swift::UInt v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t (*v79)(_QWORD);
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  _QWORD v104[18];
  _BYTE v105[144];
  _BYTE v106[152];

  v4 = v2;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  v83 = v7;
  MEMORY[0x1E0C80A78](v6);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v84 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v2[1];
  ObjectType = swift_getObjectType();
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v104, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      v17 = 0;
    }
    else
    {
      v17 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v17);
    v18 = v87;
    v79 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v20 = v18 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v20 += 16;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v21 = v90;
          if (!v90)
            goto LABEL_16;
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v21 = v90;
        if (!v90)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          v22 = v91;
          if (!v91)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_25:
          v24 = v93;
          v26 = v94;
          v25 = v95;
          v27 = v96;
          v76 = v96;
          v77 = v92;
          if (v92)
          {
            v80 = v2;
            v28 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v29 = v24;
            v30 = v26;
            v31 = v25;
            v32 = v27;
            v33 = v28;
            v4 = v80;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
            v34 = v27;
            v35 = v24;
            v36 = v26;
            v37 = v25;
          }
          v80 = v25;
          v38 = v4;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v39 = v24;
            v40 = v24;
            v41 = v26;
            v42 = v40;
            _CFObject.hash(into:)();

            v26 = v41;
            v78 = v41;
            if (v41)
            {
LABEL_30:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v43 = v26;
              _CFObject.hash(into:)();

              goto LABEL_33;
            }
          }
          else
          {
            v39 = 0;
            Hasher._combine(_:)(0);
            v78 = v26;
            if (v26)
              goto LABEL_30;
          }
          Hasher._combine(_:)(0);
LABEL_33:
          v44 = v80;
          v45 = v39;
          v4 = v38;
          v46 = v76;
          if (v80)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v47 = v44;
            _CFObject.hash(into:)();

            if (v46)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v48 = v46;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v46)
              goto LABEL_35;
          }
          Hasher._combine(_:)(0);
          v48 = 0;
LABEL_38:
          v49 = v80;
          v50 = v78;

          v51 = v97;
          if (v51)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v51);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          a2 = v79;
          v52 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              v16 = v82;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v53 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v53);
              }
              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v54 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }
              if (v102 == 2)
              {
                v55 = 0;
              }
              else
              {
                v55 = v102 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v55);
              if (v103 == 2)
              {
                v56 = 0;
              }
              else
              {
                v57 = v103 & 1;
                Hasher._combine(_:)(1u);
                v56 = v57;
              }
              Hasher._combine(_:)(v56);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v99)
              goto LABEL_43;
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v21);
        swift_bridgeObjectRelease();
        v22 = v91;
        if (!v91)
          goto LABEL_17;
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      v23 = v85;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = v86;
    }
    outlined retain of LocalePreferences(v23);
    if (!v88)
      goto LABEL_14;
    goto LABEL_21;
  }
  v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  v16 = v82;
LABEL_59:
  v58 = (uint64_t)v4 + *(int *)(a2(0) + 20);
  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v59 = *(_QWORD *)v58;
    Hasher._combine(_:)(1u);
    if ((v59 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v60 = v59;
    else
      v60 = 0;
    Hasher._combine(_:)(v60);
  }
  outlined init with take of LocalePreferences?(v58 + 16, (uint64_t)v106, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v61 = *(unsigned __int8 *)(v58 + 73);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }
  v63 = *(unsigned __int16 *)(v58 + 74);
  v64 = v63 | (*(unsigned __int8 *)(v58 + 76) << 16);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64 & 1);
    Hasher._combine(_:)((v64 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v64) & 1);
  }
  v65 = v83;
  v66 = *(unsigned __int8 *)(v58 + 77);
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v67 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v67);
  }
  v68 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v69 = v84;
  outlined init with copy of FloatingPointRoundingRule?(v58 + v68[9], v84);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v69, 1, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v70 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v81, v84, v16);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v16);
  }
  v71 = v58 + v68[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v73 = *(_QWORD *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v74 = v73;
      else
        v74 = 0;
      Hasher._combine(_:)(v74);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v73);
    }
  }
  v75 = *(unsigned __int8 *)(v58 + v68[11]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }
}

void static NSDecimal.FormatStyle.Percent.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  static NSDecimal.FormatStyle.== infix(_:_:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle.Percent);
}

void static NSDecimal.FormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t (*a3)(_QWORD))
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v6 = *a1;
  v8 = *a2;
  v9 = v6;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) != 0)
  {
    v7 = a3(0);
    specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)a1 + *(int *)(v7 + 20), (uint64_t)a2 + *(int *)(v7 + 20));
  }
}

uint64_t NSDecimal.FormatStyle.Percent.encode(to:)(_QWORD *a1)
{
  return NSDecimal.FormatStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Percent.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys, (uint64_t)&unk_1E0F36900, (void (*)(_QWORD))type metadata accessor for NSDecimal.FormatStyle.Percent);
}

uint64_t NSDecimal.FormatStyle.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, void (*a5)(_QWORD))
{
  __int128 *v5;
  uint64_t v6;
  __int128 *v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v14)(_QWORD);
  uint64_t v15;
  __int128 v16;
  char v17;

  v14 = a5;
  v8 = v5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v15 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = *v8;
  v17 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v6)
  {
    v14(0);
    LOBYTE(v16) = 1;
    type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v10);
}

Swift::Int NSDecimal.FormatStyle.Percent.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.Percent.hash(into:));
}

Swift::Int NSDecimal.FormatStyle.hashValue.getter(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

uint64_t NSDecimal.FormatStyle.Percent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  char v28;

  v23 = a2;
  v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v3);
  v24 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Percent.CodingKeys>);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (_OWORD *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (uint64_t)v10 + *(int *)(v11 + 20);
  v13 = v12 + v3[9];
  v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)v12 = 0x4059000000000000;
  *(_BYTE *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 72) = 131584;
  *(_WORD *)(v12 + 76) = 512;
  v15 = v12 + v3[10];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = -1;
  *(_BYTE *)(v12 + v3[11]) = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys();
  v16 = (uint64_t)v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
    v21 = v12;
  }
  else
  {
    v28 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    v17 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v26 = v10;
    *v10 = v27;
    LOBYTE(v27) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    v19 = (uint64_t)v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v19, v12);
    v20 = (uint64_t)v26;
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v26, v23, type metadata accessor for NSDecimal.FormatStyle.Percent);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v21 = v20;
    v22 = type metadata accessor for NSDecimal.FormatStyle.Percent;
  }
  return outlined destroy of ICUNumberFormatter.Signature(v21, v22);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Percent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))NSDecimal.FormatStyle.Percent.format(_:), a2);
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle.Percent@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Percent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Percent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Percent(_QWORD *a1)
{
  return NSDecimal.FormatStyle.Percent.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Percent(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))NSDecimal.FormatStyle.Percent.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))NSDecimal.FormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.FormatStyle(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v8;
  __int128 v9;

  v6 = *a1;
  v8 = *a2;
  v9 = v6;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) != 0)
    return static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20));
  else
    return 0;
}

void NSDecimal.FormatStyle.Currency.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  Swift::UInt8 v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  uint64_t v52;
  Swift::UInt64 v53;
  Swift::UInt64 v54;
  uint64_t v55;
  int v56;
  Swift::UInt v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  Swift::UInt v61;
  int *v62;
  char *v63;
  uint64_t v64;
  int v65;
  Swift::UInt v66;
  Swift::UInt64 v67;
  Swift::UInt v68;
  uint64_t v69;
  void *v70;
  id v71;
  char *v72;
  void *v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[144];
  char v79[8];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  _QWORD v97[18];
  _BYTE v98[144];
  _BYTE v99[152];

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  v77 = v5;
  MEMORY[0x1E0C80A78](v4);
  v75 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v14(v97, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v97, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v99, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v99) == 1)
    {
      v13 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v79[0] == 2)
    {
      v16 = 0;
    }
    else
    {
      v16 = v79[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v16);
    v17 = v80;
    if (v80)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v17 + 16));
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v19 = v17 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v19 += 16;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
        if (!v81)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v82)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v82)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v20 = v83;
          if (!v83)
            goto LABEL_16;
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v20 = v83;
        if (!v83)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          v21 = v84;
          if (!v84)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v21);
          swift_bridgeObjectRelease();
LABEL_25:
          v23 = v86;
          v24 = v87;
          v74 = v88;
          v25 = v89;
          v71 = v85;
          v72 = v9;
          v70 = v89;
          if (v85)
          {
            v26 = v85;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v27 = v23;
            v28 = v24;
            v29 = v74;
            v30 = v25;
            v31 = v26;
            _CFObject.hash(into:)();
            if (v23)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v32 = v23;
              v33 = v24;
              v34 = v23;
              _CFObject.hash(into:)();

              v24 = v33;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            v35 = v25;
            v36 = v23;
            v37 = v24;
            v38 = v74;
            if (v23)
              goto LABEL_27;
          }
          v32 = v23;
          Hasher._combine(_:)(0);
LABEL_30:
          v39 = v70;
          v73 = v24;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v40 = v24;
            _CFObject.hash(into:)();

          }
          else
          {
            Hasher._combine(_:)(0);
          }
          v41 = v32;
          v9 = v72;
          if (v74)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v42 = v74;
            _CFObject.hash(into:)();

            if (v39)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v43 = v39;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v39)
              goto LABEL_35;
          }
          Hasher._combine(_:)(0);
          v43 = 0;
LABEL_38:
          v44 = v73;

          v45 = v90;
          if (v45)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v45);
            swift_bridgeObjectRelease();
            v46 = v91;
            if (v91)
              goto LABEL_40;
          }
          else
          {
            Hasher._combine(_:)(0);
            v46 = v91;
            if (v91)
            {
LABEL_40:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v46);
              swift_bridgeObjectRelease();
              if (v92)
              {
LABEL_41:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_45:
                v15 = v76;
                if (v93 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v47 = v93 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v47);
                }
                if (v94 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v48 = v94 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v48);
                }
                if (v95 == 2)
                {
                  v49 = 0;
                }
                else
                {
                  v49 = v95 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v49);
                if (v96 == 2)
                {
                  v50 = 0;
                }
                else
                {
                  v51 = v96 & 1;
                  Hasher._combine(_:)(1u);
                  v50 = v51;
                }
                Hasher._combine(_:)(v50);
                outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease();
                goto LABEL_58;
              }
LABEL_44:
              Hasher._combine(_:)(0);
              goto LABEL_45;
            }
          }
          Hasher._combine(_:)(0);
          if (v92)
            goto LABEL_41;
          goto LABEL_44;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v20);
        swift_bridgeObjectRelease();
        v21 = v84;
        if (!v84)
          goto LABEL_17;
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
      v22 = v78;
    }
    else
    {
      Hasher._combine(_:)(0);
      v22 = v79;
    }
    outlined retain of LocalePreferences(v22);
    if (!v81)
      goto LABEL_14;
    goto LABEL_21;
  }
  v13 = 1;
LABEL_5:
  Hasher._combine(_:)(v13);
  swift_unknownObjectRelease();
  v15 = v76;
LABEL_58:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v52 = v2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  if ((*(_BYTE *)(v52 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = *(_QWORD *)v52;
    Hasher._combine(_:)(1u);
    if ((v53 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v54 = v53;
    else
      v54 = 0;
    Hasher._combine(_:)(v54);
  }
  v55 = v77;
  outlined init with take of LocalePreferences?(v52 + 16, (uint64_t)v99, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v56 = *(unsigned __int8 *)(v52 + 73);
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v57 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v57);
  }
  v58 = *(unsigned int *)(v52 + 74);
  if (*(_DWORD *)(v52 + 74) == 2)
  {
    LOBYTE(v59) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v58 & 1);
    Hasher._combine(_:)((v58 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v58) & 1);
    v59 = BYTE3(v58) & 1;
  }
  Hasher._combine(_:)(v59);
  v60 = *(unsigned __int8 *)(v52 + 78);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v61 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61);
  }
  v62 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v52 + v62[9], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v9, 1, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v63 = v75;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v75, v9, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v63, v15);
  }
  v64 = v52 + v62[10];
  v65 = *(unsigned __int8 *)(v64 + 8);
  if (v65 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v66 = *(_QWORD *)v64;
    Hasher._combine(_:)(1u);
    if ((v65 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v66 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v67 = v66;
      else
        v67 = 0;
      Hasher._combine(_:)(v67);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v66);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v52 + v62[11]));
  v68 = *(unsigned __int8 *)(v52 + v62[12]);
  if (v68 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }
}

uint64_t NSDecimal.FormatStyle.Currency.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Currency.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = *v3;
  v10[15] = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle.Currency(0);
    LOBYTE(v11) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, type metadata accessor for CurrencyFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NSDecimal.FormatStyle.Currency.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.Currency.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Currency.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  v20 = a2;
  v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Currency.CodingKeys>);
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  v21 = v8;
  v13 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v24 = v3;
  v14 = (uint64_t)v5;
  v26 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  v15 = v21;
  v16 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)v11 = v25;
  LOBYTE(v25) = 1;
  *((_QWORD *)v11 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((_QWORD *)v11 + 3) = v17;
  LOBYTE(v25) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, type metadata accessor for CurrencyFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v16);
  outlined init with take of ICUNumberFormatter.Signature(v14, (uint64_t)&v11[*(int *)(v9 + 24)], type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v11, v20, type metadata accessor for NSDecimal.FormatStyle.Currency);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v11, type metadata accessor for NSDecimal.FormatStyle.Currency);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Currency@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))NSDecimal.FormatStyle.Currency.format(_:), a2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle.Currency@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle(a1, type metadata accessor for NSDecimal.FormatStyle.Currency, a2).n128_u64[0];
  return result;
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle@<Q0>(__n128 *a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, __n128 *a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v7;

  outlined init with copy of ICUNumberFormatter.Signature(v3, (uint64_t)a3, a2);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *a3 = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Currency@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Currency.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Currency(_QWORD *a1)
{
  return NSDecimal.FormatStyle.Currency.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))NSDecimal.FormatStyle.Currency.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))NSDecimal.FormatStyle.Currency.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v9, type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      v18 = (uint64_t)v9;
      v19 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }
    else
    {
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v6, type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      v18 = (uint64_t)v6;
      v19 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }
  else
  {
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v12, type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0);
    NSDecimal.FormatStyle.hash(into:)(a1);
    v18 = (uint64_t)v12;
    v19 = type metadata accessor for NSDecimal.FormatStyle;
  }
  return outlined destroy of ICUNumberFormatter.Signature(v18, v19);
}

uint64_t NSDecimal.FormatStyle.Attributed.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int NSDecimal.FormatStyle.Attributed.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSDecimal.FormatStyle.Attributed(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature(v15, (uint64_t)v11, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v11, v13, type metadata accessor for NSDecimal.FormatStyle.Attributed);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.format(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Attributed(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

uint64_t NSDecimal.FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter(type metadata accessor for NSDecimal.FormatStyle, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle(type metadata accessor for NSDecimal.FormatStyle, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a1);
}

uint64_t NSDecimal.FormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter(type metadata accessor for NSDecimal.FormatStyle.Currency, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle.Currency@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle(type metadata accessor for NSDecimal.FormatStyle.Currency, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, a1);
}

uint64_t NSDecimal.FormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter(type metadata accessor for NSDecimal.FormatStyle.Percent, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a1);
}

uint64_t NSDecimal.FormatStyle.parseStrategy.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = v3;
  outlined init with copy of ICUNumberFormatter.Signature(v6, a3, a1);
  result = __swift_instantiateConcreteTypeFromMangledName(a2);
  *(_BYTE *)(a3 + *(int *)(result + 36)) = 1;
  return result;
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle.Percent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle(type metadata accessor for NSDecimal.FormatStyle.Percent, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  outlined init with copy of ICUNumberFormatter.Signature(v5, a3, a1);
  result = __swift_instantiateConcreteTypeFromMangledName(a2);
  *(_BYTE *)(a3 + *(int *)(result + 36)) = 1;
  return result;
}

uint64_t static FormatStyle<>.number.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  uint64_t v12;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v12);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v12;
  v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v6 = (char *)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_DWORD *)v6 + 18) = 131584;
  *((_WORD *)v6 + 38) = 512;
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v8 = &v6[v7[9]];
  v9 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v11 = &v6[v7[10]];
  *(_QWORD *)v11 = 0;
  v11[8] = -1;
  v6[v7[11]] = 3;
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t static FormatStyle<>.percent.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  uint64_t v12;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v12);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v12;
  v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v6 = (char *)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v8 = &v6[v7[9]];
  v9 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)v6 = 0x4059000000000000;
  v6[8] = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_DWORD *)v6 + 18) = 131584;
  *((_WORD *)v6 + 38) = 512;
  v11 = &v6[v7[10]];
  *(_QWORD *)v11 = 0;
  v11[8] = -1;
  v6[v7[11]] = 3;
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t static FormatStyle<>.currency(code:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  char *v16;
  uint64_t v17;

  v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = static LocaleCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v7, &v17);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  v9 = v17;
  v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *a3 = v9;
  a3[1] = v10;
  a3[2] = a1;
  a3[3] = a2;
  v11 = (char *)a3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v13 = &v11[v12[9]];
  v14 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_WORD *)v11 + 36) = 512;
  *(_DWORD *)(v11 + 74) = 2;
  v11[78] = 2;
  v16 = &v11[v12[10]];
  *(_QWORD *)v16 = 0;
  v16[8] = -1;
  v11[v12[11]] = 1;
  v11[v12[12]] = 3;
  return result;
}

Swift::String __swiftcall NSDecimal.formatted()()
{
  unint64_t v0;
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  Swift::String v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  int v52;
  __int16 v53;
  Swift::String v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  Swift::String v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  __int16 v71;
  Swift::String v72;
  int v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  Swift::String result;
  char v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BYTE v97[20];
  _BYTE v98[140];
  _QWORD v99[20];

  v3 = v2;
  v92 = v0;
  v93 = v1;
  v99[18] = *MEMORY[0x1E0C80C00];
  v90 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v90);
  v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v6);
  v91 = (uint64_t *)((char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static LocaleCache.cache + 16;
  v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v8, &v96);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  v10 = v96;
  v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v12 = v91;
  v13 = (uint64_t)v91 + *(int *)(v6 + 20);
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 72) = 131584;
  *(_WORD *)(v13 + 76) = 512;
  v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v15 = v13 + v14[9];
  v16 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v13 + v14[10];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = -1;
  *(_BYTE *)(v13 + v14[11]) = 3;
  *v12 = v10;
  v12[1] = v11;
  v99[0] = static LocaleCache.cache;
  swift_unknownObjectRetain();
  LocaleCache.current.getter();
  v19 = v18;
  ObjectType = swift_getObjectType();
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 472))(ObjectType, v19);
  v23 = v22;
  swift_release();
  swift_unknownObjectRelease();
  swift_retain();
  _LocaleAutoupdating.prefs.getter();
  swift_release();
  outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v99, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v13, (uint64_t)v5, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v24 = v90;
  v25 = (uint64_t *)&v5[*(int *)(v90 + 20)];
  *v25 = v21;
  v25[1] = v23;
  outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)&v5[*(int *)(v24 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  v26 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v5);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v5, type metadata accessor for ICUNumberFormatter.Signature);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v27, v92, v93, v3);
    v43 = swift_retain_n();
    MEMORY[0x1E0C80A78](v43);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v84 - 8), (uint64_t *)v98);
    v45 = *(_QWORD *)v98;
    v44 = *(_QWORD *)&v98[8];
    swift_release();
    swift_release_n();
    if (v44)
      goto LABEL_49;
  }
  v90 = 0;
  v29 = v92;
  v28 = v93;
  *(_QWORD *)v98 = v92;
  v30 = HIDWORD(v92);
  v31 = HIWORD(v92);
  v32 = v93 >> 16;
  *(_QWORD *)&v98[8] = v93;
  v33 = HIDWORD(v93);
  v34 = HIWORD(v93);
  *(_DWORD *)&v98[16] = v3;
  if (!_So9NSDecimala__length_getter(v98))
  {
    *(_DWORD *)v98 = v29;
    *(_WORD *)&v98[4] = v30;
    *(_WORD *)&v98[6] = v31;
    *(_WORD *)&v98[8] = v28;
    *(_WORD *)&v98[10] = v32;
    *(_WORD *)&v98[12] = v33;
    *(_WORD *)&v98[14] = v34;
    *(_DWORD *)&v98[16] = v3;
    if (_So9NSDecimala__isNegative_getter(v98))
    {
      v44 = 0xE300000000000000;
      v45 = 5136718;
LABEL_49:
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v91, type metadata accessor for NSDecimal.FormatStyle);
      v78 = v45;
      v79 = (void *)v44;
      goto LABEL_52;
    }
  }
  *(_DWORD *)v98 = v29;
  *(_WORD *)&v98[4] = v30;
  *(_WORD *)&v98[6] = v31;
  *(_WORD *)&v98[8] = v28;
  *(_WORD *)&v98[10] = v32;
  *(_WORD *)&v98[12] = v33;
  *(_WORD *)&v98[14] = v34;
  *(_DWORD *)&v98[16] = v3;
  if (!_So9NSDecimala__length_getter(v98))
  {
    v44 = 0xE100000000000000;
    v45 = 48;
    goto LABEL_49;
  }
  v94 = 0;
  v95 = 0xE000000000000000;
  *(_QWORD *)v98 = v29;
  *(_QWORD *)&v98[8] = v28;
  *(_DWORD *)&v98[16] = v3;
  *(_QWORD *)v97 = v29;
  v88 = HIWORD(v29);
  v89 = HIDWORD(v29);
  *(_QWORD *)&v97[8] = v28;
  v35 = v28 >> 16;
  v36 = HIDWORD(v28);
  v37 = HIWORD(v28);
  *(_DWORD *)&v97[16] = v3;
  LODWORD(v38) = HIWORD(v3);
  if ((int)_So9NSDecimala__exponent_getter(v97) < 1)
  {
    LOWORD(v40) = v88;
    LOWORD(v39) = v89;
  }
  else
  {
    LOWORD(v40) = v88;
    LOWORD(v39) = v89;
    do
    {
      LODWORD(v93) = v3;
      v41._countAndFlagsBits = 48;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      *(_DWORD *)v97 = v29;
      *(_WORD *)&v97[4] = v39;
      *(_WORD *)&v97[6] = v40;
      *(_WORD *)&v97[8] = v28;
      *(_WORD *)&v97[10] = v35;
      *(_WORD *)&v97[12] = v36;
      *(_WORD *)&v97[14] = v37;
      *(_WORD *)&v97[16] = v93;
      *(_WORD *)&v97[18] = v38;
      v42 = _So9NSDecimala__exponent_getter(v97);
      _So9NSDecimala__exponent_setter((v42 - 1), v98);
      v29 = *(unsigned int *)v98;
      LOWORD(v39) = *(_WORD *)&v98[4];
      LOWORD(v40) = *(_WORD *)&v98[6];
      v28 = *(unsigned __int16 *)&v98[8];
      LOWORD(v35) = *(_WORD *)&v98[10];
      LOWORD(v36) = *(_WORD *)&v98[12];
      v37 = *(unsigned __int16 *)&v98[14];
      v3 = *(unsigned __int16 *)&v98[16];
      LODWORD(v38) = *(unsigned __int16 *)&v98[18];
      *(_QWORD *)v97 = *(_QWORD *)v98;
      *(_QWORD *)&v97[8] = *(_QWORD *)&v98[8];
      *(_WORD *)&v97[16] = *(_WORD *)&v98[16];
      *(_WORD *)&v97[18] = *(_WORD *)&v98[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v97) > 0);
  }
  *(_DWORD *)v97 = v29;
  *(_WORD *)&v97[4] = v39;
  *(_WORD *)&v97[6] = v40;
  *(_WORD *)&v97[8] = v28;
  *(_WORD *)&v97[10] = v35;
  *(_WORD *)&v97[12] = v36;
  *(_WORD *)&v97[14] = v37;
  *(_WORD *)&v97[16] = v3;
  *(_WORD *)&v97[18] = v38;
  if (!_So9NSDecimala__exponent_getter(v97))
  {
    _So9NSDecimala__exponent_setter(1, v98);
    v29 = *(unsigned int *)v98;
    LOWORD(v39) = *(_WORD *)&v98[4];
    LOWORD(v40) = *(_WORD *)&v98[6];
    v28 = *(unsigned __int16 *)&v98[8];
    LOWORD(v35) = *(_WORD *)&v98[10];
    LOWORD(v36) = *(_WORD *)&v98[12];
    v37 = *(unsigned __int16 *)&v98[14];
    v3 = *(unsigned __int16 *)&v98[16];
    LODWORD(v38) = *(unsigned __int16 *)&v98[18];
  }
  v92 = v29;
  *(_DWORD *)v97 = v29;
  *(_WORD *)&v97[4] = v39;
  *(_WORD *)&v97[6] = v40;
  *(_WORD *)&v97[8] = v28;
  *(_WORD *)&v97[10] = v35;
  *(_WORD *)&v97[12] = v36;
  *(_WORD *)&v97[14] = v37;
  LODWORD(v93) = v3;
  *(_WORD *)&v97[16] = v3;
  *(_WORD *)&v97[18] = v38;
  if (!_So9NSDecimala__length_getter(v97))
  {
LABEL_38:
    v46 = v92;
    v47 = v93;
LABEL_39:
    *(_DWORD *)v97 = v46;
    *(_WORD *)&v97[4] = v39;
    *(_WORD *)&v97[6] = v40;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v35;
    *(_WORD *)&v97[12] = v36;
    *(_WORD *)&v97[14] = v37;
    *(_WORD *)&v97[16] = v47;
    *(_WORD *)&v97[18] = v38;
    v67 = v46;
    v68 = v47;
    v69 = _So9NSDecimala__exponent_getter(v97);
    v70 = v67;
    if (v69 <= 0)
    {
      v92 = v67;
      *(_DWORD *)v97 = v67;
      *(_WORD *)&v97[4] = v39;
      *(_WORD *)&v97[6] = v40;
      *(_WORD *)&v97[8] = v28;
      *(_WORD *)&v97[10] = v35;
      *(_WORD *)&v97[12] = v36;
      *(_WORD *)&v97[14] = v37;
      LODWORD(v93) = v68;
      *(_WORD *)&v97[16] = v68;
      *(_WORD *)&v97[18] = v38;
      v71 = v28;
      if (_So9NSDecimala__exponent_getter(v97))
      {
        LOWORD(v68) = v93;
        do
        {
          v72._countAndFlagsBits = 48;
          v72._object = (void *)0xE100000000000000;
          String.append(_:)(v72);
          *(_DWORD *)v97 = v92;
          *(_WORD *)&v97[4] = v39;
          *(_WORD *)&v97[6] = v40;
          *(_WORD *)&v97[8] = v71;
          *(_WORD *)&v97[10] = v35;
          *(_WORD *)&v97[12] = v36;
          *(_WORD *)&v97[14] = v37;
          *(_WORD *)&v97[16] = v68;
          *(_WORD *)&v97[18] = v38;
          v73 = _So9NSDecimala__exponent_getter(v97);
          _So9NSDecimala__exponent_setter((v73 + 1), v98);
          LOWORD(v39) = *(_WORD *)&v98[4];
          LOWORD(v40) = *(_WORD *)&v98[6];
          v71 = *(_WORD *)&v98[8];
          LOWORD(v35) = *(_WORD *)&v98[10];
          LOWORD(v36) = *(_WORD *)&v98[12];
          LOWORD(v37) = *(_WORD *)&v98[14];
          LOWORD(v68) = *(_WORD *)&v98[16];
          LOWORD(v38) = *(_WORD *)&v98[18];
          v92 = *(unsigned int *)v98;
          *(_QWORD *)v97 = *(_QWORD *)v98;
          *(_QWORD *)&v97[8] = *(_QWORD *)&v98[8];
          *(_WORD *)&v97[16] = *(_WORD *)&v98[16];
          *(_WORD *)&v97[18] = *(_WORD *)&v98[18];
        }
        while (_So9NSDecimala__exponent_getter(v97));
      }
      else
      {
        LOWORD(v68) = v93;
      }
      v74._countAndFlagsBits = 46;
      v74._object = (void *)0xE100000000000000;
      String.append(_:)(v74);
      v75._countAndFlagsBits = 48;
      v75._object = (void *)0xE100000000000000;
      String.append(_:)(v75);
      LOWORD(v28) = v71;
      v70 = v92;
    }
    *(_DWORD *)v97 = v70;
    *(_WORD *)&v97[4] = v39;
    *(_WORD *)&v97[6] = v40;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v35;
    *(_WORD *)&v97[12] = v36;
    *(_WORD *)&v97[14] = v37;
    *(_WORD *)&v97[16] = v68;
    *(_WORD *)&v97[18] = v38;
    if (_So9NSDecimala__isNegative_getter(v97))
    {
      v76._countAndFlagsBits = 45;
      v76._object = (void *)0xE100000000000000;
      String.append(_:)(v76);
    }
    *(_QWORD *)v97 = v94;
    *(_QWORD *)&v97[8] = v95;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    v45 = String.init<A>(_:)();
    v44 = v77;
    goto LABEL_49;
  }
  LODWORD(v46) = v92;
  LOWORD(v47) = v93;
  while (1)
  {
    v89 = v37;
    LODWORD(v92) = v38;
    *(_DWORD *)v97 = v46;
    *(_WORD *)&v97[4] = v39;
    *(_WORD *)&v97[6] = v40;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v35;
    *(_WORD *)&v97[12] = v36;
    *(_WORD *)&v97[14] = v37;
    *(_WORD *)&v97[16] = v47;
    *(_WORD *)&v97[18] = v38;
    v48 = v36;
    v49 = v35;
    v50 = v40;
    v51 = v39;
    v52 = v46;
    v53 = v47;
    if (!_So9NSDecimala__exponent_getter(v97))
    {
      v93 = v28;
      v54._countAndFlagsBits = 46;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      LOWORD(v28) = v93;
    }
    *(_DWORD *)v97 = v52;
    *(_WORD *)&v97[4] = v51;
    *(_WORD *)&v97[6] = v50;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v49;
    *(_WORD *)&v97[12] = v48;
    *(_WORD *)&v97[14] = v89;
    *(_WORD *)&v97[16] = v53;
    *(_WORD *)&v97[18] = v92;
    v55 = _So9NSDecimala__exponent_getter(v97);
    _So9NSDecimala__exponent_setter((v55 + 1), v98);
    v56 = *(unsigned int *)v98;
    LOWORD(v36) = *(_WORD *)&v98[6];
    v92 = *(unsigned __int16 *)&v98[8];
    v93 = *(unsigned __int16 *)&v98[4];
    v88 = *(unsigned __int16 *)&v98[12];
    v89 = *(unsigned __int16 *)&v98[10];
    LOWORD(v35) = *(_WORD *)&v98[18];
    v86 = *(unsigned __int16 *)&v98[14];
    v87 = *(unsigned __int16 *)&v98[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v98 | ((unint64_t)*(unsigned __int16 *)&v98[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v98[6] << 48), *(unsigned __int16 *)&v98[8] | ((unint64_t)*(unsigned __int16 *)&v98[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v98[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v98[14] << 48), *(unsigned __int16 *)&v98[16] | (*(unsigned __int16 *)&v98[18] << 16));
    v28 = v57;
    v39 = *(_QWORD *)(v57 + 16);
    if (!v39)
    {
      v40 = 0;
      v38 = MEMORY[0x1E0DEE9D8];
      v61 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v61)
        goto LABEL_34;
LABEL_31:
      if (!*(_WORD *)(v38 + 2 * v61 + 30))
      {
        do
        {
          *(_QWORD *)(v38 + 16) = v61 - 1;
          if (v61 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v38 + 28 + 2 * v61--));
      }
      goto LABEL_34;
    }
    v85 = v56;
    v38 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v37 = v38 + 30;
    *(_QWORD *)(v38 + 16) = v39;
    bzero((void *)(v38 + 32), 2 * v39);
    v58 = *(unsigned __int16 *)(2 * v39 + v28 + 30);
    v59 = v58 / 0xA;
    while (1)
    {
      *(_WORD *)(v37 + 2 * v39) = v59;
      v40 = v58 % 0xA;
      if (v39 == 1)
        break;
      v58 = *(unsigned __int16 *)(v28 + 28 + 2 * v39) | (v40 << 16);
      v59 = v58 / 0xA;
      v60 = v39 - 2;
      --v39;
      if (v60 >= *(_QWORD *)(v38 + 16))
      {
        __break(1u);
        goto LABEL_38;
      }
    }
    LODWORD(v56) = v85;
    v61 = *(_QWORD *)(v38 + 16);
    if (v61)
      goto LABEL_31;
LABEL_34:
    swift_bridgeObjectRelease();
    *(_DWORD *)v97 = v56;
    *(_WORD *)&v97[4] = v93;
    *(_WORD *)&v97[6] = v36;
    *(_WORD *)&v97[8] = v92;
    *(_WORD *)&v97[10] = v89;
    *(_WORD *)&v97[12] = v88;
    *(_WORD *)&v97[14] = v86;
    *(_WORD *)&v97[16] = v87;
    *(_WORD *)&v97[18] = v35;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v38);
    v90 = v63;
    if (v63)
      break;
    v64 = *(_QWORD *)(v38 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v64))
      goto LABEL_51;
    _So9NSDecimala__length_setter(v64, v97);
    *(_DWORD *)v98 = *(_DWORD *)v97;
    *(_OWORD *)&v98[4] = *(_OWORD *)&v97[4];
    *(_QWORD *)v97 = v40 | 0x30;
    v65._countAndFlagsBits = MEMORY[0x186DA46D0](v97, 1);
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v92 = *(unsigned int *)v98;
    v89 = *(unsigned __int16 *)&v98[4];
    LOWORD(v40) = *(_WORD *)&v98[6];
    v28 = *(unsigned __int16 *)&v98[8];
    LOWORD(v35) = *(_WORD *)&v98[10];
    LOWORD(v36) = *(_WORD *)&v98[12];
    v37 = *(unsigned __int16 *)&v98[14];
    LODWORD(v39) = *(unsigned __int16 *)&v98[16];
    LODWORD(v38) = *(unsigned __int16 *)&v98[18];
    *(_QWORD *)v97 = *(_QWORD *)v98;
    *(_QWORD *)&v97[8] = *(_QWORD *)&v98[8];
    *(_WORD *)&v97[16] = *(_WORD *)&v98[16];
    *(_WORD *)&v97[18] = *(_WORD *)&v98[18];
    v66 = _So9NSDecimala__length_getter(v97);
    v47 = v39;
    v46 = v92;
    LOWORD(v39) = v89;
    if (!v66)
      goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_51:
  v83 = 0;
  v82 = 3455;
  v81 = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  swift_release_n();
  v78 = swift_willThrow();
  __break(1u);
LABEL_52:
  result._object = v79;
  result._countAndFlagsBits = v78;
  return result;
}

uint64_t NSDecimal.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[2];
  int v8;

  v7[0] = a2;
  v7[1] = a3;
  v8 = a4;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a6 + 48))(v7, a5, a6);
}

uint64_t NSDecimal.FormatStyle.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return NSDecimal.FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, type metadata accessor for NSDecimal.FormatStyle, 0, (int64_t)&unk_1E0F428F8);
}

uint64_t specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(_QWORD, __n128), int a7, uint64_t *a8, int64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t ObjectType;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[4];
  uint64_t v100[3];

  v95 = a8;
  LODWORD(v94) = a7;
  v93 = a2;
  v91 = a1;
  v13 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  v14 = *(_QWORD *)(v13 - 8);
  v96 = v13;
  v97 = v14;
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v98 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v84 - v18;
  v20 = a6(0, v17);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v84 - v21;
  v23 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = a3;
  v92 = a5;
  if (a3 >> 14 >= a5 >> 14)
    goto LABEL_10;
  v89 = a9;
  outlined init with copy of ICUNumberFormatter.Signature(v9, (uint64_t)v22, (uint64_t (*)(_QWORD))a6);
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)&v22[*(int *)(v20 + 20)], (uint64_t)v25, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  swift_storeEnumTagMultiPayload();
  v26 = *((_QWORD *)v22 + 1);
  v27 = *(_BYTE *)(v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v95) + 36));
  v94 = v25;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v25, (uint64_t)v19, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  ObjectType = swift_getObjectType();
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 64);
  swift_unknownObjectRetain_n();
  v30 = v29(ObjectType, v26);
  v32 = v31;
  swift_unknownObjectRelease();
  v33 = v96;
  v34 = (uint64_t *)&v19[*(int *)(v96 + 20)];
  *v34 = v30;
  v34[1] = v32;
  v19[*(int *)(v33 + 24)] = v27;
  v35 = (uint64_t)v19;
  if (one-time initialization token for cache != -1)
    swift_once();
  v37 = static ICULegacyNumberFormatter.cache;
  v36 = unk_1EDC3B320;
  v38 = v98;
  outlined init with copy of ICUNumberFormatter.Signature(v35, v98, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v39 = (*(unsigned __int8 *)(v97 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  v95 = (uint64_t *)swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature(v38, (uint64_t)v95 + v39, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v40 = (uint64_t *)(v36 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v36 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v36 + 16, v35, v99);
  os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 24));
  swift_release();
  if (v99[0])
  {
    swift_release();
LABEL_6:
    outlined destroy of ICUNumberFormatter.Signature(v35, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    v41 = String.subscript.getter();
    v43 = v42;
    v45 = v44;
    v47 = v46;
    v100[0] = 0;
    specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v41, v42, v44, v46, v100);
    if ((v48 & 0x100000000) == 0)
    {
      v99[0] = v41;
      v99[1] = v43;
      v99[2] = v45;
      v99[3] = v47;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v49 = String.Index.init<A>(utf16Offset:in:)();
      swift_unknownObjectRelease();
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v94, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      v50 = 0;
LABEL_11:
      LOBYTE(v99[0]) = v50;
      return v49;
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v94, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_10:
    v49 = 0;
    v50 = 1;
    goto LABEL_11;
  }
  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  v53 = v52;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v36 + 24));
  if (v37 >= *(_QWORD *)(*(_QWORD *)(v36 + 16) + 16))
    swift_bridgeObjectRetain();
  else
    *v40 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v100[0] = *v40;
  v55 = v100[0];
  *v40 = 0x8000000000000000;
  v57 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
  v58 = *(_QWORD *)(v55 + 16);
  v59 = (v56 & 1) == 0;
  v60 = v58 + v59;
  if (__OFADD__(v58, v59))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v55 + 24) < v60)
    {
      v61 = v56;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, isUniquelyReferenced_nonNull_native);
      v62 = v100[0];
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
      if ((v61 & 1) != (v64 & 1))
        goto LABEL_65;
      v57 = v63;
      if ((v61 & 1) == 0)
        goto LABEL_61;
LABEL_22:
      v65 = *(_QWORD *)(v62 + 56);
      v66 = 8 * v57;
      swift_release();
      *(_QWORD *)(v65 + v66) = v53;
LABEL_62:
      *(_QWORD *)(v36 + 16) = v62;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 24));
      swift_release_n();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v62 = v55;
      if ((v56 & 1) != 0)
        goto LABEL_22;
LABEL_61:
      v83 = v57;
      outlined init with copy of ICUNumberFormatter.Signature(v35, v38, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v83, v38, v53, (_QWORD *)v62);
      goto LABEL_62;
    }
  }
  v84 = v57;
  v85 = v56;
  v86 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  v67 = static _DictionaryStorage.copy(original:)();
  v62 = v67;
  if (!*(_QWORD *)(v55 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    v35 = v86;
    v57 = v84;
    if ((v85 & 1) != 0)
      goto LABEL_22;
    goto LABEL_61;
  }
  v68 = (char *)(v67 + 64);
  v69 = 1 << *(_BYTE *)(v62 + 32);
  v88 = (char *)(v55 + 64);
  v70 = (unint64_t)(v69 + 63) >> 6;
  if (v62 != v55 || v68 >= &v88[8 * v70])
    memmove(v68, v88, 8 * v70);
  v89 = 0;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v55 + 16);
  v71 = 1 << *(_BYTE *)(v55 + 32);
  v72 = -1;
  if (v71 < 64)
    v72 = ~(-1 << v71);
  v96 = v72 & *(_QWORD *)(v55 + 64);
  v87 = (unint64_t)(v71 + 63) >> 6;
  while (1)
  {
    if (v96)
    {
      v73 = __clz(__rbit64(v96));
      v96 &= v96 - 1;
      v74 = v73 | (v89 << 6);
      v38 = v98;
      goto LABEL_32;
    }
    v79 = v89 + 1;
    v38 = v98;
    if (__OFADD__(v89, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v79 >= v87)
      goto LABEL_60;
    v80 = *(_QWORD *)&v88[8 * v79];
    v81 = v89 + 1;
    if (!v80)
    {
      v81 = v89 + 2;
      if (v89 + 2 >= v87)
        goto LABEL_60;
      v80 = *(_QWORD *)&v88[8 * v81];
      if (!v80)
      {
        v81 = v89 + 3;
        if (v89 + 3 >= v87)
          goto LABEL_60;
        v80 = *(_QWORD *)&v88[8 * v81];
        if (!v80)
        {
          v81 = v89 + 4;
          if (v89 + 4 >= v87)
            goto LABEL_60;
          v80 = *(_QWORD *)&v88[8 * v81];
          if (!v80)
          {
            v81 = v89 + 5;
            if (v89 + 5 >= v87)
              goto LABEL_60;
            v80 = *(_QWORD *)&v88[8 * v81];
            if (!v80)
            {
              v81 = v89 + 6;
              if (v89 + 6 >= v87)
                goto LABEL_60;
              v80 = *(_QWORD *)&v88[8 * v81];
              if (!v80)
              {
                v81 = v89 + 7;
                if (v89 + 7 >= v87)
                  goto LABEL_60;
                v80 = *(_QWORD *)&v88[8 * v81];
                if (!v80)
                {
                  v81 = v89 + 8;
                  if (v89 + 8 >= v87)
                    goto LABEL_60;
                  v80 = *(_QWORD *)&v88[8 * v81];
                  if (!v80)
                  {
                    v81 = v89 + 9;
                    if (v89 + 9 >= v87)
                      goto LABEL_60;
                    v80 = *(_QWORD *)&v88[8 * v81];
                    if (!v80)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    v96 = (v80 - 1) & v80;
    v89 = v81;
    v74 = __clz(__rbit64(v80)) + (v81 << 6);
LABEL_32:
    v75 = *(_QWORD *)(v97 + 72) * v74;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v55 + 48) + v75, v38, type metadata accessor for ICULegacyNumberFormatter.Signature);
    v76 = v38;
    v77 = 8 * v74;
    v78 = *(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v74);
    outlined init with take of ICUNumberFormatter.Signature(v76, *(_QWORD *)(v62 + 48) + v75, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v62 + 56) + v77) = v78;
    swift_retain();
  }
  v82 = v89 + 10;
  if (v89 + 10 >= v87)
    goto LABEL_60;
  v80 = *(_QWORD *)&v88[8 * v82];
  if (v80)
  {
    v81 = v89 + 10;
    v38 = v98;
    goto LABEL_59;
  }
  while (1)
  {
    v81 = v82 + 1;
    if (__OFADD__(v82, 1))
      break;
    v38 = v98;
    if (v81 >= v87)
      goto LABEL_60;
    v80 = *(_QWORD *)&v88[8 * v81];
    ++v82;
    if (v80)
      goto LABEL_59;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return NSDecimal.FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, type metadata accessor for NSDecimal.FormatStyle.Percent, 1, (int64_t)&unk_1E0F428D0);
}

uint64_t NSDecimal.FormatStyle.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD), int a8, int64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;

  v26 = a8;
  v25 = a5;
  v12 = v9;
  v24 = a4;
  v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v12, (uint64_t)v18, a7);
  v18[*(int *)(v16 + 36)] = 0;
  v19 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, v24, v25, (uint64_t (*)(_QWORD, __n128))a7, v26, a6, a9);
  v21 = v20;
  outlined destroy of Any?((uint64_t)v18, a6);
  if ((v21 & 0x100000000) != 0)
    return 0;
  else
    return v19;
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a6, type metadata accessor for NSDecimal.FormatStyle.Percent, 1, (int64_t)&unk_1E0F428D0);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle.Percent()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t NSDecimal.FormatStyle.Currency.consuming(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v6, (uint64_t)v14, type metadata accessor for NSDecimal.FormatStyle.Currency);
  v14[*(int *)(v12 + 36)] = 0;
  v15 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, a4, a5);
  v17 = v16;
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  if ((v17 & 0x100000000) != 0)
    return 0;
  else
    return v15;
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v7 = v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v7, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle.Currency);
  v16[*(int *)(v14 + 36)] = 0;
  v17 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, a4, a5);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  result = outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  if ((v23 & 0x100000000) != 0)
    v25 = 0;
  else
    v25 = v17;
  if ((v23 & 0x100000000) != 0)
    v26 = 0;
  else
    v26 = v19;
  if ((v23 & 0x100000000) != 0)
    v27 = 0;
  else
    v27 = v21;
  if ((v23 & 0x100000000) != 0)
    v28 = 0;
  else
    v28 = v23;
  *(_QWORD *)a6 = v25;
  *(_QWORD *)(a6 + 8) = v26;
  *(_QWORD *)(a6 + 16) = v27;
  *(_DWORD *)(a6 + 24) = v28;
  *(_BYTE *)(a6 + 28) = BYTE4(v23) & 1;
  return result;
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle.Currency()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.localizedCurrency(code:locale:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a3 = *a2;
  *(_QWORD *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 24) = v5;
  v6 = a3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v8 = v6 + v7[9];
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  v10 = v6 + v7[10];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Array._makeMutableAndUnique()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if (!(_DWORD)result)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *v0 = result;
  }
  return result;
}

unint64_t specialized Array._checkSubscript_mutating(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t specialized static NSDecimal.FormatStyle.Currency.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  BOOL v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  v4 = *a1;
  v8 = *a2;
  v9 = v4;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) == 0)
    return 0;
  v5 = *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2) && *((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3);
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  v6 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + *(int *)(v6 + 24), (char *)a2 + *(int *)(v6 + 24));
}

uint64_t specialized static NSDecimal.FormatStyle.Attributed.Style.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  __int128 v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v40 = a2;
  v37 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1E0C80A78](v37);
  v38 = (__int128 *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v36);
  v39 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (__int128 *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (__int128 *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v35 - v12;
  MEMORY[0x1E0C80A78](v14);
  v16 = (__int128 *)((char *)&v35 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal.FormatStyle.Attributed.Style, NSDecimal.FormatStyle.Attributed.Style));
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v19[*(int *)(v20 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v19, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  outlined init with copy of ICUNumberFormatter.Signature(v40, v21, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v13, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v23 = v39;
        outlined init with take of ICUNumberFormatter.Signature(v21, v39, type metadata accessor for NSDecimal.FormatStyle.Currency);
        v24 = *(_OWORD *)v13;
        v41 = *(_OWORD *)v23;
        v42 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (*((_QWORD *)v13 + 2) == *(_QWORD *)(v23 + 16) && *((_QWORD *)v13 + 3) == *(_QWORD *)(v23 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v13[*(int *)(v36 + 24)], v23 + *(int *)(v36 + 24)) & 1) != 0)
        {
          v25 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          outlined destroy of ICUNumberFormatter.Signature(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
          v26 = (uint64_t)v13;
LABEL_23:
          outlined destroy of ICUNumberFormatter.Signature(v26, v25);
          outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
          return 1;
        }
        v31 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        outlined destroy of ICUNumberFormatter.Signature(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
        v32 = (uint64_t)v13;
        goto LABEL_26;
      }
      v27 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      v28 = (uint64_t)v13;
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v10, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v29 = v38;
        outlined init with take of ICUNumberFormatter.Signature(v21, (uint64_t)v38, type metadata accessor for NSDecimal.FormatStyle.Percent);
        v30 = *v10;
        v41 = *v29;
        v42 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v10 + *(int *)(v37 + 20), (char *)v29 + *(int *)(v37 + 20)) & 1) != 0)
        {
          v25 = type metadata accessor for NSDecimal.FormatStyle.Percent;
          outlined destroy of ICUNumberFormatter.Signature((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
          v26 = (uint64_t)v10;
          goto LABEL_23;
        }
        v31 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v29, type metadata accessor for NSDecimal.FormatStyle.Percent);
        v32 = (uint64_t)v10;
        goto LABEL_26;
      }
      v27 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      v28 = (uint64_t)v10;
    }
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ICUNumberFormatter.Signature(v21, (uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      v33 = *v16;
      v41 = *v7;
      v42 = v33;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v16 + *(int *)(v5 + 20), (char *)v7 + *(int *)(v5 + 20)) & 1) != 0)
      {
        v25 = type metadata accessor for NSDecimal.FormatStyle;
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
        v26 = (uint64_t)v16;
        goto LABEL_23;
      }
      v31 = type metadata accessor for NSDecimal.FormatStyle;
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      v32 = (uint64_t)v16;
LABEL_26:
      outlined destroy of ICUNumberFormatter.Signature(v32, v31);
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      return 0;
    }
    v27 = type metadata accessor for NSDecimal.FormatStyle;
    v28 = (uint64_t)v16;
  }
  outlined destroy of ICUNumberFormatter.Signature(v28, v27);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (NSDecimal.FormatStyle.Attributed.Style, NSDecimal.FormatStyle.Attributed.Style));
  return 0;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Attributed.Style);
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_1E0F36870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_1E0F36870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_1E0F36870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_1E0F36870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys, &unk_1E0F36900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys, &unk_1E0F36900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys, &unk_1E0F36900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys, &unk_1E0F36900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys, &unk_1E0F36990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys, &unk_1E0F36990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys, &unk_1E0F36990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys, &unk_1E0F36990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys, &unk_1E0F367E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys, &unk_1E0F367E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys, &unk_1E0F367E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys, &unk_1E0F367E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Percent(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Percent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Currency(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Currency()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Attributed(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, type metadata accessor for NSDecimal.FormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, type metadata accessor for NSDecimal.FormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, type metadata accessor for NSDecimal.FormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed, type metadata accessor for NSDecimal.FormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle> and conformance NSDecimal.ParseStrategy<A>, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, (uint64_t)&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle.Currency()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency> and conformance NSDecimal.ParseStrategy<A>, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, (uint64_t)&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Currency(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle.Percent()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent> and conformance NSDecimal.ParseStrategy<A>, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, (uint64_t)&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Percent(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle.Percent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle.Currency()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v8[8] = *((_BYTE *)a2 + v7 + 8);
    *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    v10 = *(_OWORD *)((char *)a2 + v7 + 48);
    v11 = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 3) = v10;
    *((_OWORD *)v8 + 1) = v11;
    v8[73] = *((_BYTE *)a2 + v7 + 73);
    LOWORD(v7) = *(_WORD *)((char *)a2 + v7 + 74);
    v8[76] = v9[76];
    *((_WORD *)v8 + 37) = v7;
    v8[77] = v9[77];
    v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v13 = v12[9];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for FloatingPointRoundingRule();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = v12[10];
    v21 = &v8[v20];
    v22 = &v9[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v8[v12[11]] = v9[v12[11]];
  }
  return v3;
}

_QWORD *assignWithCopy for NSDecimal.FormatStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  LOBYTE(v7) = *((_BYTE *)a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v8[8] = v7;
  v10 = *((_OWORD *)v9 + 1);
  v11 = *((_OWORD *)v9 + 2);
  v12 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v11;
  *((_OWORD *)v8 + 3) = v12;
  *((_OWORD *)v8 + 1) = v10;
  v8[73] = v9[73];
  LOWORD(v7) = *((_WORD *)v9 + 37);
  v8[76] = v9[76];
  *((_WORD *)v8 + 37) = v7;
  v8[77] = v9[77];
  v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v14 = v13[9];
  v15 = &v8[v14];
  v16 = &v9[v14];
  v17 = type metadata accessor for FloatingPointRoundingRule();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v13[10];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)v24 = v26;
  v8[v13[11]] = v9[v13[11]];
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(_QWORD *)v5 = *(_QWORD *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  LOWORD(v4) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = v6[76];
  *((_WORD *)v5 + 37) = v4;
  v5[77] = v6[77];
  v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v10 = v9[9];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = v9[10];
  v17 = &v5[v16];
  v18 = &v6[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

_QWORD *assignWithTake for NSDecimal.FormatStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  v10 = *(_OWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
  v8[73] = *((_BYTE *)a2 + v7 + 73);
  v8[76] = *((_BYTE *)a2 + v7 + 76);
  *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v7 + 74);
  v8[77] = *((_BYTE *)a2 + v7 + 77);
  v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v12 = v11[9];
  v13 = &v8[v12];
  v14 = &v9[v12];
  v15 = type metadata accessor for FloatingPointRoundingRule();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = v11[10];
  v22 = &v8[v21];
  v23 = &v9[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v8[v11[11]] = v9[v11[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Percent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Percent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle.Currency(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *__dst;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    v12 = *(_OWORD *)((char *)a2 + v9 + 32);
    *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
    *((_OWORD *)v10 + 2) = v12;
    *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
    v10[73] = *((_BYTE *)a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
    v10[78] = *((_BYTE *)a2 + v9 + 78);
    v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v14 = v13[9];
    __dst = &v10[v14];
    v15 = &v11[v14];
    v16 = type metadata accessor for FloatingPointRoundingRule();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v20 = v13[10];
    v21 = &v10[v20];
    v22 = &v11[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v10[v13[11]] = v11[v13[11]];
    v10[v13[12]] = v11[v13[12]];
  }
  return v3;
}

uint64_t destroy for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = v4 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0) + 36);
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t initializeWithCopy for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)v6 = *(_QWORD *)(a2 + v5);
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + v5 + 8);
  v8 = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
  *(_BYTE *)(v6 + 73) = *(_BYTE *)(a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)(a2 + v5 + 74);
  *(_BYTE *)(v6 + 78) = *(_BYTE *)(a2 + v5 + 78);
  v9 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v10 = v9[9];
  v11 = (void *)(v6 + v10);
  v12 = (const void *)(v7 + v10);
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[10];
  v18 = v6 + v17;
  v19 = v7 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v6 + v9[11]) = *(_BYTE *)(v7 + v9[11]);
  *(_BYTE *)(v6 + v9[12]) = *(_BYTE *)(v7 + v9[12]);
  return a1;
}

_QWORD *assignWithCopy for NSDecimal.FormatStyle.Currency(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(_QWORD *)v8 = v10;
  v11 = *((_OWORD *)v9 + 1);
  v12 = *((_OWORD *)v9 + 2);
  v13 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v13;
  *((_OWORD *)v8 + 1) = v11;
  v8[73] = v9[73];
  *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
  v8[78] = v9[78];
  v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v15 = v14[9];
  v16 = &v8[v15];
  v17 = &v9[v15];
  v18 = type metadata accessor for FloatingPointRoundingRule();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  v24 = v14[10];
  v25 = &v8[v24];
  v26 = &v9[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v8[v14[11]] = v9[v14[11]];
  v8[v14[12]] = v9[v14[12]];
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle.Currency(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v6[8] = *((_BYTE *)a2 + v5 + 8);
  *(_QWORD *)v6 = *(_QWORD *)((char *)a2 + v5);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)((char *)a2 + v5 + 57);
  v8 = *(_OWORD *)((char *)a2 + v5 + 48);
  v9 = *(_OWORD *)((char *)a2 + v5 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)((char *)a2 + v5 + 32);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 1) = v9;
  v6[73] = *((_BYTE *)a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)((char *)a2 + v5 + 74);
  v6[78] = *((_BYTE *)a2 + v5 + 78);
  v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v11 = v10[9];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = v10[10];
  v18 = &v6[v17];
  v19 = &v7[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v6[v10[11]] = v7[v10[11]];
  v6[v10[12]] = v7[v10[12]];
  return a1;
}

_QWORD *assignWithTake for NSDecimal.FormatStyle.Currency(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  v7 = a2[2];
  v8 = a2[3];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
  v10[8] = *((_BYTE *)a2 + v9 + 8);
  v12 = *(_OWORD *)((char *)a2 + v9 + 32);
  *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
  *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
  v10[73] = *((_BYTE *)a2 + v9 + 73);
  *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
  v10[78] = *((_BYTE *)a2 + v9 + 78);
  v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v14 = v13[9];
  v15 = &v10[v14];
  v16 = &v11[v14];
  v17 = type metadata accessor for FloatingPointRoundingRule();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v13[10];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v10[v13[11]] = v11[v13[11]];
  v10[v13[12]] = v11[v13[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Currency()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BAD254(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Currency()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_181BAD2DC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t *a2)
{
  int v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__dst;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0) - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      v20 = a1 + v19;
      v21 = (uint64_t)a2 + v19;
      *(_QWORD *)v20 = *(uint64_t *)((char *)a2 + v19);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v19 + 8);
      v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v19 + 16);
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v19 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v19 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v19 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v19 + 77);
      v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v24 = v23[9];
      v25 = (void *)(v20 + v24);
      v26 = (const void *)(v21 + v24);
      v27 = type metadata accessor for FloatingPointRoundingRule();
      v28 = *(_QWORD *)(v27 - 8);
      v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v29(v26, 1, v27))
      {
LABEL_10:
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
LABEL_14:
        v38 = v23[10];
        v39 = v20 + v38;
        v40 = v21 + v38;
        *(_QWORD *)v39 = *(_QWORD *)v40;
        *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
        *(_BYTE *)(v20 + v23[11]) = *(_BYTE *)(v21 + v23[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v6 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v6;
        v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v8 = a1 + v7;
        v9 = (uint64_t)a2 + v7;
        *(_QWORD *)v8 = *(uint64_t *)((char *)a2 + v7);
        *(_BYTE *)(v8 + 8) = *((_BYTE *)a2 + v7 + 8);
        v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)a2 + v7 + 16);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        *(_BYTE *)(v8 + 73) = *((_BYTE *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        *(_BYTE *)(v8 + 78) = *((_BYTE *)a2 + v7 + 78);
        v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v12 = v11[9];
        __dst = (void *)(v8 + v12);
        v13 = (const void *)(v9 + v12);
        v14 = type metadata accessor for FloatingPointRoundingRule();
        v15 = *(_QWORD *)(v14 - 8);
        v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        v35 = v11[10];
        v36 = v8 + v35;
        v37 = v9 + v35;
        *(_QWORD *)v36 = *(_QWORD *)v37;
        *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
        *(_BYTE *)(v8 + v11[11]) = *(_BYTE *)(v9 + v11[11]);
        *(_BYTE *)(v8 + v11[12]) = *(_BYTE *)(v9 + v11[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      v20 = a1 + v30;
      v21 = (uint64_t)a2 + v30;
      *(_QWORD *)v20 = *(uint64_t *)((char *)a2 + v30);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v30 + 8);
      v31 = *(_OWORD *)((char *)a2 + v30 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v30 + 16);
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v30 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v30 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v30 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v30 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v30 + 77);
      v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v32 = v23[9];
      v25 = (void *)(v20 + v32);
      v26 = (const void *)(v21 + v32);
      v27 = type metadata accessor for FloatingPointRoundingRule();
      v28 = *(_QWORD *)(v27 - 8);
      v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v33(v26, 1, v27))
        goto LABEL_10;
    }
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    goto LABEL_14;
  }
  v18 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v18 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for NSDecimal.FormatStyle.Attributed(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    v4 = a1 + *(int *)(v3 + 20);
    v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v6 = v4 + *(int *)(v5 + 36);
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t initializeWithCopy for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int *v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
    v19 = a1 + v18;
    v20 = a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)(a2 + v18);
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(a2 + v18 + 8);
    v21 = *(_OWORD *)(a2 + v18 + 32);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + v18 + 16);
    *(_OWORD *)(v19 + 32) = v21;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)(a2 + v18 + 57);
    *(_BYTE *)(v19 + 73) = *(_BYTE *)(a2 + v18 + 73);
    *(_WORD *)(v19 + 74) = *(_WORD *)(a2 + v18 + 74);
    *(_BYTE *)(v19 + 76) = *(_BYTE *)(a2 + v18 + 76);
    *(_BYTE *)(v19 + 77) = *(_BYTE *)(a2 + v18 + 77);
    v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v23 = v22[9];
    v24 = (void *)(v19 + v23);
    v25 = (const void *)(v20 + v23);
    v26 = type metadata accessor for FloatingPointRoundingRule();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
    swift_unknownObjectRetain();
    if (v28(v25, 1, v26))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v48 = v22[10];
    v49 = v19 + v48;
    v50 = v20 + v48;
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
    v51 = v22[11];
    v46 = (_BYTE *)(v19 + v51);
    v47 = (_BYTE *)(v20 + v51);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
    v7 = a1 + v6;
    v8 = a2 + v6;
    *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(a2 + v6 + 8);
    v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(_BYTE *)(v7 + 73) = *(_BYTE *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(_BYTE *)(v7 + 78) = *(_BYTE *)(a2 + v6 + 78);
    v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v11 = v10[9];
    v12 = (void *)(v7 + v11);
    v13 = (const void *)(v8 + v11);
    v14 = type metadata accessor for FloatingPointRoundingRule();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v42 = v10[10];
    v43 = v7 + v42;
    v44 = v8 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
    *(_BYTE *)(v7 + v10[11]) = *(_BYTE *)(v8 + v10[11]);
    v45 = v10[12];
    v46 = (_BYTE *)(v7 + v45);
    v47 = (_BYTE *)(v8 + v45);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
    v31 = a1 + v30;
    v32 = a2 + v30;
    *(_QWORD *)v31 = *(_QWORD *)(a2 + v30);
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(a2 + v30 + 8);
    v33 = *(_OWORD *)(a2 + v30 + 32);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a2 + v30 + 16);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + v30 + 48);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(a2 + v30 + 57);
    *(_BYTE *)(v31 + 73) = *(_BYTE *)(a2 + v30 + 73);
    *(_WORD *)(v31 + 74) = *(_WORD *)(a2 + v30 + 74);
    *(_BYTE *)(v31 + 76) = *(_BYTE *)(a2 + v30 + 76);
    *(_BYTE *)(v31 + 77) = *(_BYTE *)(a2 + v30 + 77);
    v34 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v35 = v34[9];
    v36 = (void *)(v31 + v35);
    v37 = (const void *)(v32 + v35);
    v38 = type metadata accessor for FloatingPointRoundingRule();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
    swift_unknownObjectRetain();
    if (v40(v37, 1, v38))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v52 = v34[10];
    v53 = v31 + v52;
    v54 = v32 + v52;
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
    v55 = v34[11];
    v46 = (_BYTE *)(v31 + v55);
    v47 = (_BYTE *)(v32 + v55);
  }
  *v46 = *v47;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      v20 = a1 + v19;
      v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      v22 = *(_OWORD *)(v21 + 57);
      v24 = *(_OWORD *)(v21 + 32);
      v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v26 = v25[9];
      v27 = (void *)(v20 + v26);
      v28 = (const void *)(v21 + v26);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1, v29))
      {
LABEL_9:
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_13:
        v46 = v25[10];
        v47 = v20 + v46;
        v48 = (uint64_t *)(v21 + v46);
        v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(_QWORD *)v47 = v49;
        v50 = v25[11];
        v44 = (_BYTE *)(v20 + v50);
        v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v6 = a1 + v5;
        v7 = a2 + v5;
        LOBYTE(v5) = *(_BYTE *)(a2 + v5 + 8);
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        v8 = *(_OWORD *)(v7 + 57);
        v10 = *(_OWORD *)(v7 + 32);
        v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v12 = v11[9];
        v13 = (void *)(v6 + v12);
        v14 = (const void *)(v7 + v12);
        v15 = type metadata accessor for FloatingPointRoundingRule();
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        v39 = v11[10];
        v40 = v6 + v39;
        v41 = (uint64_t *)(v7 + v39);
        v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(_QWORD *)v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        v43 = v11[12];
        v44 = (_BYTE *)(v6 + v43);
        v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      v20 = a1 + v32;
      v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      v33 = *(_OWORD *)(v21 + 57);
      v35 = *(_OWORD *)(v21 + 32);
      v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v36 = v25[9];
      v27 = (void *)(v20 + v36);
      v28 = (const void *)(v21 + v36);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1, v29))
        goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
      v7[8] = *((_BYTE *)a2 + v6 + 8);
      v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((_BYTE *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((_BYTE *)a2 + v6 + 78);
      v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v11 = v10[9];
      v12 = &v7[v11];
      v13 = &v8[v11];
      v14 = type metadata accessor for FloatingPointRoundingRule();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v35 = v10[10];
      v36 = &v7[v35];
      v37 = &v8[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      v38 = v10[12];
      v33 = &v7[v38];
      v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    v17 = type metadata accessor for NSDecimal.FormatStyle(0);
  }
  v18 = *(int *)(v17 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
  v19[8] = *((_BYTE *)a2 + v18 + 8);
  v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((_BYTE *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((_BYTE *)a2 + v18 + 76);
  v19[77] = *((_BYTE *)a2 + v18 + 77);
  v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v23 = v22[9];
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = type metadata accessor for FloatingPointRoundingRule();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = v22[10];
  v30 = &v19[v29];
  v31 = &v20[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  v32 = v22[11];
  v33 = &v19[v32];
  v34 = &v20[v32];
LABEL_13:
  *v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for NSDecimal.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v7 = (char *)a1 + v6;
        v8 = (char *)a2 + v6;
        *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
        v7[8] = *((_BYTE *)a2 + v6 + 8);
        v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v11 = v10[9];
        v12 = &v7[v11];
        v13 = &v8[v11];
        v14 = type metadata accessor for FloatingPointRoundingRule();
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        v35 = v10[10];
        v36 = &v7[v35];
        v37 = &v8[v35];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        v38 = v10[12];
        v33 = &v7[v38];
        v34 = &v8[v38];
LABEL_14:
        *v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    v18 = *(int *)(v17 + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
    v19[8] = *((_BYTE *)a2 + v18 + 8);
    v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v23 = v22[9];
    v24 = &v19[v23];
    v25 = &v20[v23];
    v26 = type metadata accessor for FloatingPointRoundingRule();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = v22[10];
    v30 = &v19[v29];
    v31 = &v20[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v22[11];
    v33 = &v19[v32];
    v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BAE738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BAE780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for NSDecimal.FormatStyle.Attributed()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return &unk_1E0F367E0;
}

void *type metadata accessor for NSDecimal.FormatStyle.Currency.CodingKeys()
{
  return &unk_1E0F36990;
}

void *type metadata accessor for NSDecimal.FormatStyle.Percent.CodingKeys()
{
  return &unk_1E0F36900;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Percent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181BAE8B0 + 4 * byte_1820E6A95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181BAE8E4 + 4 * byte_1820E6A90[v4]))();
}

uint64_t sub_181BAE8E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BAE8EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BAE8F4);
  return result;
}

uint64_t sub_181BAE900(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BAE908);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181BAE90C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BAE914(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.CodingKeys()
{
  return &unk_1E0F36870;
}

uint64_t assignWithCopy for NSDecimal.FormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature(a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0) + 20);
      v20 = a1 + v19;
      v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      v22 = *(_OWORD *)(v21 + 57);
      v24 = *(_OWORD *)(v21 + 32);
      v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v26 = v25[9];
      v27 = (void *)(v20 + v26);
      v28 = (const void *)(v21 + v26);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1, v29))
      {
LABEL_9:
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_13:
        v46 = v25[10];
        v47 = v20 + v46;
        v48 = (uint64_t *)(v21 + v46);
        v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(_QWORD *)v47 = v49;
        v50 = v25[11];
        v44 = (_BYTE *)(v20 + v50);
        v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v6 = a1 + v5;
        v7 = a2 + v5;
        LOBYTE(v5) = *(_BYTE *)(a2 + v5 + 8);
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        v8 = *(_OWORD *)(v7 + 57);
        v10 = *(_OWORD *)(v7 + 32);
        v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v12 = v11[9];
        v13 = (void *)(v6 + v12);
        v14 = (const void *)(v7 + v12);
        v15 = type metadata accessor for FloatingPointRoundingRule();
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        v39 = v11[10];
        v40 = v6 + v39;
        v41 = (uint64_t *)(v7 + v39);
        v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(_QWORD *)v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        v43 = v11[12];
        v44 = (_BYTE *)(v6 + v43);
        v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
      v20 = a1 + v32;
      v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      v33 = *(_OWORD *)(v21 + 57);
      v35 = *(_OWORD *)(v21 + 32);
      v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v36 = v25[9];
      v27 = (void *)(v20 + v36);
      v28 = (const void *)(v21 + v36);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1, v29))
        goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    goto LABEL_13;
  }
  return a1;
}

_OWORD *assignWithTake for NSDecimal.FormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
        v7 = (char *)a1 + v6;
        v8 = (char *)a2 + v6;
        *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
        v7[8] = *((_BYTE *)a2 + v6 + 8);
        v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v11 = v10[9];
        v12 = &v7[v11];
        v13 = &v8[v11];
        v14 = type metadata accessor for FloatingPointRoundingRule();
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        v35 = v10[10];
        v36 = &v7[v35];
        v37 = &v8[v35];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        v38 = v10[12];
        v33 = &v7[v38];
        v34 = &v8[v38];
LABEL_14:
        *v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v17 = type metadata accessor for NSDecimal.FormatStyle(0);
    }
    v18 = *(int *)(v17 + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
    v19[8] = *((_BYTE *)a2 + v18 + 8);
    v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v23 = v22[9];
    v24 = &v19[v23];
    v25 = &v20[v23];
    v26 = type metadata accessor for FloatingPointRoundingRule();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = v22[10];
    v30 = &v19[v29];
    v31 = &v20[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v22[11];
    v33 = &v19[v32];
    v34 = &v20[v32];
    goto LABEL_14;
  }
  return a1;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Attributed.Style()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style, type metadata accessor for NSDecimal.FormatStyle.Attributed.Style, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
}

uint64_t specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697463656C6C6F63 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x697463656C6C6F63 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys, &unk_1E0F365A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys, &unk_1E0F365A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys, &unk_1E0F365A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys, &unk_1E0F365A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys, &unk_1E0F366C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys, &unk_1E0F366C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys, &unk_1E0F366C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys, &unk_1E0F366C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys, &unk_1E0F36750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys, &unk_1E0F36750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys, &unk_1E0F36750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys, &unk_1E0F36750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys, &unk_1E0F36630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys, &unk_1E0F36630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys, &unk_1E0F36630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys, &unk_1E0F36630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Currency.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181BAF7CC + 4 * byte_1820E6A9F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181BAF800 + 4 * byte_1820E6A9A[v4]))();
}

uint64_t sub_181BAF800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BAF808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BAF810);
  return result;
}

uint64_t sub_181BAF81C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BAF824);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181BAF828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BAF830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  return &unk_1E0F365A0;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  return &unk_1E0F36630;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  return &unk_1E0F36750;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181BAF8AC + 4 * byte_1820E6AA4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181BAF8CC + 4 * byte_1820E6AA9[v4]))();
}

_BYTE *sub_181BAF8AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181BAF8CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181BAF8D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181BAF8DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181BAF8E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181BAF8EC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  return &unk_1E0F366C0;
}

uint64_t specialized NSDecimal.FormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C616D69636564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD v52[3];

  LOBYTE(v15) = Substring.UTF8View.subscript.getter();
  if (v15 == 10)
    goto LABEL_7;
  if (v15 == 13)
  {
    if ((unint64_t)Substring.UTF8View.index(after:)() >> 14 >= a5 >> 14
      || (swift_bridgeObjectRetain(),
          v7 = Substring.UTF8View.subscript.getter(),
          swift_bridgeObjectRelease(),
          (_DWORD)v7 != 10))
    {
      if ((unint64_t)Substring.UTF8View.index(after:)() >> 14 >= a2 >> 14)
        return a2;
      __break(1u);
      goto LABEL_16;
    }
    if ((unint64_t)Substring.UTF8View.index(after:)() >> 14 >= a2 >> 14)
      return a2;
    __break(1u);
LABEL_7:
    v7 = a2 >> 14;
    if (a2 >> 14 > a4 >> 14)
    {
      a1 = Substring.UTF8View.index(before:)();
      v16 = Substring.UTF8View.subscript.getter();
      v15 = Substring.UTF8View.index(after:)();
      v17 = v15 >> 14;
      if (v16 == 13)
      {
        if (v17 < a1 >> 14)
        {
          __break(1u);
          goto LABEL_11;
        }
        return a1;
      }
      if (v17 >= v7)
        return a2;
      __break(1u);
LABEL_78:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((a3 & 1) != 0)
      {
        if (v43 >> 14 >= a1 >> 14)
        {
LABEL_83:
          Substring.UTF8View.index(after:)();
          return a1;
        }
        __break(1u);
      }
      v38 = a1 >> 14 >= v43 >> 14;
      result = a1;
      a1 = v43;
      if (!v38)
        goto LABEL_98;
      goto LABEL_83;
    }
LABEL_16:
    result = Substring.UTF8View.index(after:)();
    if (v7 > result >> 14)
      goto LABEL_97;
    return a2;
  }
LABEL_11:
  if ((a3 & 1) != 0)
  {
    if ((v15 + 86) < 0xDBu)
      return 0;
  }
  else if ((v15 + 29) < 0xDFu)
  {
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 16);
  if (!v40)
    return 0;
  v41 = a1 + 32;
  v19 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v19) = 1;
  v39 = a5 & 0xC;
  v20 = a4;
  v21 = 4 << v19;
  if ((a7 & 0x2000000000000000) != 0)
    v22 = HIBYTE(a7) & 0xF;
  else
    v22 = a6 & 0xFFFFFFFFFFFFLL;
  v45 = v20;
  v46 = a5;
  v48 = v20 >> 14;
  v49 = v22;
  v47 = a5 >> 14;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  v43 = a2;
  v50 = a6;
  while (1)
  {
    v24 = *(_QWORD *)(v41 + 8 * v23);
    if ((a3 & 1) != 0)
    {
      v51 = 0;
      v25 = *(_QWORD *)(v24 + 16);
      v26 = v25 - 1;
      v27 = -1;
      v42 = v45;
    }
    else
    {
      result = v46;
      if (v39 == v21)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v46, a6, a7);
        if (result < 0x4000)
          goto LABEL_96;
      }
      else if (v46 < 0x4000)
      {
        goto LABEL_96;
      }
      if ((a7 & 0x1000000000000000) != 0)
      {
        if (v49 < result >> 16)
          goto LABEL_99;
        result = String.UTF8View._foreignIndex(before:)();
        v42 = result;
      }
      else
      {
        v42 = (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      v26 = 0;
      v25 = *(_QWORD *)(v24 + 16);
      v51 = v25 - 1;
      v27 = 1;
    }
    if (v26 >= v25)
      goto LABEL_95;
    v44 = v23;
    v28 = *(unsigned __int8 *)(v24 + 32 + v26);
    swift_bridgeObjectRetain();
    result = Substring.UTF8View.subscript.getter();
    if (v28 == result)
      break;
LABEL_26:
    v23 = v44 + 1;
    result = swift_bridgeObjectRelease();
    a6 = v50;
    if (v44 + 1 == v40)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  a1 = v43;
  v29 = v42 >> 16;
  while (1)
  {
    v30 = v51 - v26;
    if (__OFSUB__(v51, v26))
      break;
    if ((a3 & 1) != 0)
    {
      if (v30 <= 0 && v27 < v30)
        goto LABEL_78;
    }
    else if (!v30)
    {
      goto LABEL_78;
    }
    v31 = v26 + v27;
    if (__OFADD__(v26, v27))
      goto LABEL_89;
    if ((a1 & 0xC) == v21)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v50, a7);
      a1 = result;
      if ((a7 & 0x1000000000000000) != 0)
      {
LABEL_69:
        result = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
        if ((v37 & 1) != 0)
          goto LABEL_26;
        a1 = result;
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_92;
        goto LABEL_57;
      }
    }
    else if ((a7 & 0x1000000000000000) != 0)
    {
      goto LABEL_69;
    }
    v32 = a1 >> 16;
    v33 = (a1 >> 16) + v27;
    if ((a3 & 1) != 0)
    {
      if (v32 >= v29 && v33 < (uint64_t)v29)
        goto LABEL_26;
    }
    else if (v29 >= v32 && (uint64_t)v29 < v33)
    {
      goto LABEL_26;
    }
    if (v33 < 0)
      goto LABEL_90;
    if (v49 < v33)
      goto LABEL_91;
    a1 = (v33 << 16) | 4;
    if ((v31 & 0x8000000000000000) != 0)
      goto LABEL_92;
LABEL_57:
    if (v31 >= *(_QWORD *)(v24 + 16))
      goto LABEL_93;
    v34 = *(unsigned __int8 *)(v24 + 32 + v31);
    result = a1;
    if ((a1 & 0xC) == v21)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v50, a7);
    if (result >> 14 < v48 || result >> 14 >= v47)
      goto LABEL_94;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
    }
    else
    {
      v35 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v52[0] = v50;
        v52[1] = a7 & 0xFFFFFFFFFFFFFFLL;
        result = *((unsigned __int8 *)v52 + v35);
      }
      else
      {
        v36 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v50 & 0x1000000000000000) == 0)
          v36 = _StringObject.sharedUTF8.getter();
        result = *(unsigned __int8 *)(v36 + v35);
      }
    }
    v26 += v27;
    if (v34 != result)
      goto LABEL_26;
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;

  v7 = v3[6];
  v8 = v3[10];
  v9 = v8 >> 10;
  v10 = v7 >> 10;
  if (v8 >> 10 < v7 >> 10)
  {
    __break(1u);
    goto LABEL_59;
  }
  v12 = v3[7];
  v11 = v3[8];
  v5 = v3[9];
  v14 = v3[11];
  v13 = v3[12];
  v15 = v3[13];
  v4 = *a2 >> 10;
  if (v4 == v10 && v9 == a2[4] >> 10 && (result & 4) == 0)
  {
    *a3 = v7;
    a3[1] = v12;
    a3[2] = v11;
    a3[3] = v5;
    a3[4] = v8;
    a3[5] = v14;
    a3[6] = v13;
    a3[7] = v15;
    a3[8] = 0;
    a3[9] = 0;
    a3[10] = 0;
    a3[11] = 2;
    return result;
  }
  if (v4 < v10 || (v81 = a2[4], v79 = v81 >> 10, v9 < v81 >> 10))
  {
    *a3 = v7;
    a3[1] = v12;
    a3[2] = v11;
    a3[3] = v5;
    a3[4] = v8;
    a3[5] = v14;
    a3[6] = v13;
    a3[7] = v15;
    a3[8] = v8;
    a3[9] = v14;
    a3[10] = v13;
    a3[11] = v15;
    return result;
  }
  v73 = a2[5];
  v75 = a2[6];
  v77 = a2[7];
  v83 = result;
  v84 = v8 >> 10;
  v63 = v3[7];
  v64 = v3[8];
  if ((result & 8) == 0)
  {
    if (one-time initialization token for paragraphSeparators == -1)
    {
LABEL_11:
      v16 = &static String.paragraphSeparators;
      goto LABEL_15;
    }
LABEL_59:
    swift_once();
    goto LABEL_11;
  }
  if (one-time initialization token for lineSeparators != -1)
    swift_once();
  v16 = &static String.lineSeparators;
LABEL_15:
  v80 = *v16;
  swift_bridgeObjectRetain();
  v17 = v83;
  if ((v83 & 1) == 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 2;
LABEL_19:
    v22 = v84;
LABEL_20:
    v23 = v80;
    goto LABEL_21;
  }
  if (v4 == v10)
  {
    v21 = v5;
    v18 = v7;
    v19 = v63;
    v20 = v64;
    goto LABEL_19;
  }
  v46 = BigSubstring.UTF8View.index(before:)();
  v70 = v47;
  v72 = v46;
  v20 = v48;
  v21 = v49;
  v22 = v84;
  v62 = v5;
  if (v4 >= v84)
  {
    v19 = v47;
    v18 = v46;
    v23 = v80;
    goto LABEL_45;
  }
  v66 = v49;
  v68 = v48;
  outlined retain of Locale((uint64_t)v3);
  v50 = BigSubstring.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  if (v50 != 10)
  {
    v22 = v84;
    v19 = v70;
    v18 = v72;
    v21 = v66;
    v20 = v68;
    v23 = v80;
    goto LABEL_45;
  }
  outlined retain of Locale((uint64_t)v3);
  v19 = v70;
  v18 = v72;
  v51 = BigSubstring.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  v23 = v80;
  if (v51 != 13)
  {
    v22 = v84;
    v21 = v66;
    v20 = v68;
    goto LABEL_45;
  }
  if (v10 < v72 >> 10)
  {
    v18 = BigSubstring.UTF8View.index(before:)();
    v19 = v52;
    v20 = v53;
    v21 = v54;
    v22 = v84;
LABEL_45:
    v17 = v83;
    goto LABEL_46;
  }
  v17 = v83;
  v22 = v84;
  v21 = v66;
  v20 = v68;
  if (v62 != 2)
  {
    v18 = v7;
    v19 = v63;
    v20 = v64;
    v21 = v62;
    goto LABEL_21;
  }
LABEL_46:
  v55 = v18 >> 10;
  if (v18 >> 10 >= v10 && v55 < v22)
  {
    while (1)
    {
      specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v23, v18, v19, v20, v21, 1, &v85);
      if (v88 != 2)
      {
        v18 = BigSubstring.UTF8View.index(after:)();
        v19 = v59;
        v20 = v60;
        v21 = v61;
        goto LABEL_55;
      }
      if (v10 >= v55)
        break;
      v18 = BigSubstring.UTF8View.index(before:)();
      v19 = v56;
      v20 = v57;
      v21 = v58;
      v55 = v18 >> 10;
      if (v18 >> 10 < v10)
        goto LABEL_55;
      v17 = v83;
      v22 = v84;
      v23 = v80;
      if (v55 >= v84)
        goto LABEL_21;
    }
    v18 = v7;
    v19 = v63;
    v20 = v64;
    v21 = v62;
LABEL_55:
    v17 = v83;
    v22 = v84;
    goto LABEL_20;
  }
LABEL_21:
  v69 = v19;
  v71 = v18;
  if ((v17 & 6) != 0)
  {
    v24 = v79;
    v65 = v21;
    v67 = v20;
    if (v4 == v79)
    {
      v26 = v75;
      v25 = v77;
      v27 = v73;
      v28 = v81;
      if (v79 >= v22)
        goto LABEL_30;
    }
    else
    {
      v28 = BigSubstring.UTF8View.index(before:)();
      v27 = v40;
      v26 = v41;
      v25 = v42;
      v24 = v28 >> 10;
      if (v28 >> 10 >= v84)
      {
LABEL_30:
        v82 = v28;
        v74 = v27;
        v76 = v26;
        v78 = v25;
        result = swift_bridgeObjectRelease();
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 2;
        v39 = 2;
        goto LABEL_39;
      }
    }
    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v23, v28, v27, v26, v25, 1, &v85);
    v38 = v88;
    if (v88 != 2)
    {
      v37 = v91;
      v39 = v92;
      v35 = v89;
      v36 = v90;
      v33 = v86;
      v34 = v87;
      v32 = v85;
      result = swift_bridgeObjectRelease();
LABEL_41:
      v31 = v65;
      v29 = v67;
      goto LABEL_42;
    }
    while (1)
    {
      specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v23, v28, v27, v26, v25, 0, &v85);
      v38 = v88;
      if (v88 != 2)
        break;
      v28 = BigSubstring.UTF8View.index(after:)();
      v27 = v43;
      v26 = v44;
      v25 = v45;
      v24 = v28 >> 10;
      if (v28 >> 10 >= v84)
        goto LABEL_30;
    }
    v82 = v28;
    v74 = v27;
    v76 = v26;
    v78 = v25;
    v37 = v91;
    v39 = v92;
    v35 = v89;
    v36 = v90;
    v33 = v86;
    v34 = v87;
    v32 = v85;
    result = swift_bridgeObjectRelease();
LABEL_39:
    if (v24 == v84)
    {
      v32 = v82;
      v33 = v74;
      v34 = v76;
      v38 = v78;
      v35 = v82;
      v36 = v74;
      v37 = v76;
      v39 = v78;
    }
    goto LABEL_41;
  }
  v29 = v20;
  v30 = v21;
  result = swift_bridgeObjectRelease();
  v31 = v30;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 2;
  v39 = 2;
LABEL_42:
  *a3 = v71;
  a3[1] = v69;
  a3[2] = v29;
  a3[3] = v31;
  a3[4] = v35;
  a3[5] = v36;
  a3[6] = v37;
  a3[7] = v39;
  a3[8] = v32;
  a3[9] = v33;
  a3[10] = v34;
  a3[11] = v38;
  return result;
}

unint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t *v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v14 = a5 >> 14;
  v15 = a4 >> 14;
  if (a5 >> 14 < a4 >> 14)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    swift_once();
    goto LABEL_10;
  }
  v9 = a5;
  v10 = a4;
  v13 = result;
  v8 = a8;
  v11 = a2 >> 14;
  v47 = a3;
  v12 = a3 >> 14;
  if (a2 >> 14 == v15 && v12 == v14 && (result & 4) == 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v20 = a4;
LABEL_76:
    *(_QWORD *)v8 = v20;
    *(_BYTE *)(v8 + 8) = v17;
    *(_QWORD *)(v8 + 16) = v9;
    *(_BYTE *)(v8 + 24) = v16;
    *(_QWORD *)(v8 + 32) = v18;
    *(_BYTE *)(v8 + 40) = v19;
    return result;
  }
  v16 = 0;
  if (v11 < v15 || v14 < v12)
  {
    v20 = a4;
    v17 = 0;
    v18 = a5;
LABEL_75:
    v19 = v16;
    goto LABEL_76;
  }
  v50 = a7;
  v51 = a6;
  v49 = a5 >> 14;
  if ((result & 8) != 0)
  {
    if (one-time initialization token for lineSeparators != -1)
      swift_once();
    v21 = &static String.lineSeparators;
    goto LABEL_15;
  }
  if (one-time initialization token for paragraphSeparators != -1)
    goto LABEL_79;
LABEL_10:
  v21 = &static String.paragraphSeparators;
LABEL_15:
  v48 = *v21;
  swift_bridgeObjectRetain();
  v17 = (v13 & 1) == 0;
  v20 = ((uint64_t)(v13 << 63) >> 63) & v10;
  if ((v13 & 1) == 0 || v11 == v15)
    goto LABEL_43;
  v20 = Substring.UTF8View.index(before:)();
  if (v11 < v49)
  {
    swift_bridgeObjectRetain();
    v22 = Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    if (v22 == 10)
    {
      swift_bridgeObjectRetain();
      v23 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v23 == 13)
      {
        if (v15 >= v20 >> 14)
        {
LABEL_42:
          v17 = 0;
          v20 = v10;
          goto LABEL_43;
        }
        v20 = Substring.UTF8View.index(before:)();
      }
    }
  }
  v17 = 0;
  v24 = v50;
  v25 = (v51 >> 59) & 1;
  if ((v50 & 0x1000000000000000) == 0)
    LOBYTE(v25) = 1;
  v26 = HIBYTE(v50) & 0xF;
  if ((v50 & 0x2000000000000000) == 0)
    v26 = v51 & 0xFFFFFFFFFFFFLL;
  v44 = v26;
  v27 = v20 >> 14;
  if (v20 >> 14 < v15 || v27 >= v49)
  {
LABEL_43:
    if ((v13 & 6) == 0)
    {
LABEL_52:
      result = swift_bridgeObjectRelease();
      v9 = 0;
      v18 = 0;
      v16 = 1;
      v19 = 1;
      goto LABEL_76;
    }
    goto LABEL_44;
  }
  v45 = 4 << v25;
  while (1)
  {
    result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v20, 1, v10, v9, v51, v24);
    if ((v28 & 1) == 0)
    {
      v20 = Substring.UTF8View.index(after:)();
      v17 = 0;
      if ((v13 & 6) == 0)
        goto LABEL_52;
LABEL_44:
      if (v11 != v12)
      {
        v47 = Substring.UTF8View.index(before:)();
        v12 = v47 >> 14;
      }
      if (v12 >= v49)
      {
LABEL_68:
        result = swift_bridgeObjectRelease();
        v18 = 0;
        v35 = 0;
        v16 = 1;
LABEL_70:
        if (v12 == v49)
          v9 = v47;
        else
          v9 = v35;
        if (v12 == v49)
        {
          v16 = 0;
          v18 = v47;
        }
        goto LABEL_75;
      }
      v30 = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v47, 1, v10, v9, v51, v50);
      if ((v32 & 1) == 0)
      {
        v18 = v30;
        v9 = v31;
        result = swift_bridgeObjectRelease();
        v16 = 0;
        v19 = 0;
        goto LABEL_76;
      }
      result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v47, 0, v10, v9, v51, v50);
      if ((v34 & 1) == 0)
      {
        v18 = result;
        v35 = v33;
LABEL_69:
        result = swift_bridgeObjectRelease();
        v16 = 0;
        goto LABEL_70;
      }
      v36 = (v51 >> 59) & 1;
      if ((v50 & 0x1000000000000000) == 0)
        LOBYTE(v36) = 1;
      v37 = 4 << v36;
      v38 = HIBYTE(v50) & 0xF;
      if ((v50 & 0x2000000000000000) == 0)
        v38 = v51 & 0xFFFFFFFFFFFFLL;
      v46 = v38;
      v39 = v47;
      while (1)
      {
        if ((v39 & 0xC) == v37)
        {
          result = _StringGuts._slowEnsureMatchingEncoding(_:)(v39, v51, v50);
          v40 = v50;
          v39 = result;
          if ((v50 & 0x1000000000000000) == 0)
          {
LABEL_60:
            v39 = (v39 & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_61;
          }
        }
        else
        {
          v40 = v50;
          if ((v50 & 0x1000000000000000) == 0)
            goto LABEL_60;
        }
        if (v46 <= v39 >> 16)
          goto LABEL_81;
        v43 = String.UTF8View._foreignIndex(after:)();
        v40 = v50;
        v39 = v43;
LABEL_61:
        v12 = v39 >> 14;
        if (v39 >> 14 >= v49)
        {
          v47 = v39;
          goto LABEL_68;
        }
        result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v39, 0, v10, v9, v51, v40);
        if ((v42 & 1) == 0)
        {
          v18 = result;
          v35 = v41;
          v47 = v39;
          goto LABEL_69;
        }
      }
    }
    if (v15 >= v27)
      goto LABEL_42;
    if ((v20 & 0xC) == v45)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v51, v50);
      v20 = result;
      if (result < 0x4000)
        goto LABEL_78;
    }
    else if (v20 < 0x4000)
    {
      goto LABEL_78;
    }
    v24 = v50;
    if ((v50 & 0x1000000000000000) == 0)
    {
      v20 = (v20 & 0xFFFFFFFFFFFF0000) - 65532;
      goto LABEL_35;
    }
    if (v44 < v20 >> 16)
      break;
    v29 = String.UTF8View._foreignIndex(before:)();
    v24 = v50;
    v20 = v29;
LABEL_35:
    v17 = 0;
    v27 = v20 >> 14;
    if (v20 >> 14 < v15 || v27 >= v49)
      goto LABEL_43;
  }
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

BOOL specialized Range.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL specialized Range.isEmpty.getter()
{
  _QWORD *v0;

  return (v0[4] ^ *v0) < 0x400uLL;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a3 + 56) + 72 * v6, a4);
  }
  else
  {
    *(_QWORD *)(a4 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  return v5;
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 *v3;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v7 = v3[11];
  v38 = v3[10];
  v39 = v7;
  v40 = *((_QWORD *)v3 + 24);
  v8 = v3[7];
  v34 = v3[6];
  v35 = v8;
  v9 = v3[9];
  v36 = v3[8];
  v37 = v9;
  v10 = v3[3];
  v30 = v3[2];
  v31 = v10;
  v11 = v3[5];
  v32 = v3[4];
  v33 = v11;
  v12 = (__n128)v3[1];
  v28 = *v3;
  v29 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18205C850;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  outlined retain of AttributedString.Runs((uint64_t)&v28);
  *(_QWORD *)(v13 + 32) = v14(a1, a2);
  *(_QWORD *)(v13 + 40) = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v26, a1, a2);
  v16 = v27;
  if (v27 == 1)
  {
    v17 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v18 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_18205C850;
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v16;
  }
  v19 = v39;
  *(_OWORD *)(a3 + 160) = v38;
  *(_OWORD *)(a3 + 176) = v19;
  v20 = v40;
  v21 = v35;
  *(_OWORD *)(a3 + 96) = v34;
  *(_OWORD *)(a3 + 112) = v21;
  v22 = v37;
  *(_OWORD *)(a3 + 128) = v36;
  *(_OWORD *)(a3 + 144) = v22;
  v23 = v31;
  *(_OWORD *)(a3 + 32) = v30;
  *(_OWORD *)(a3 + 48) = v23;
  v24 = v33;
  *(_OWORD *)(a3 + 64) = v32;
  *(_OWORD *)(a3 + 80) = v24;
  result = v29;
  *(_OWORD *)a3 = v28;
  *(__n128 *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 192) = v20;
  *(_QWORD *)(a3 + 200) = v13;
  *(_QWORD *)(a3 + 208) = v17;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41[4];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = *(_QWORD *)(v2 + 216);
  v5 = *(_QWORD *)(v2 + 168);
  if (v4 >> 10 == v5 >> 10)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a2, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    v8 = *(_QWORD *)v2;
    v9 = *(_OWORD *)(v2 + 88);
    v67 = *(_OWORD *)(v2 + 72);
    v68 = v9;
    v10 = *(_OWORD *)(v2 + 120);
    v69 = *(_OWORD *)(v2 + 104);
    v70 = v10;
    v11 = *(_OWORD *)(v2 + 24);
    v63 = *(_OWORD *)(v2 + 8);
    v64 = v11;
    v12 = *(_OWORD *)(v2 + 56);
    v65 = *(_OWORD *)(v2 + 40);
    v66 = v12;
    v35 = *(_QWORD *)(v2 + 144);
    v37 = *(_QWORD *)(v2 + 136);
    v32 = *(_QWORD *)(v2 + 160);
    v33 = *(_QWORD *)(v2 + 152);
    v30 = *(_QWORD *)(v2 + 184);
    v31 = *(_QWORD *)(v2 + 176);
    v29 = *(_QWORD *)(v2 + 192);
    v13 = *(_QWORD *)(v2 + 232);
    v40 = *(_QWORD *)(v2 + 224);
    v14 = *(_QWORD *)(v2 + 240);
    v15 = *(_OWORD *)(v2 + 88);
    v76 = *(_OWORD *)(v2 + 72);
    v77 = v15;
    v78 = *(_OWORD *)(v2 + 104);
    v79 = *(_OWORD *)(v2 + 120);
    v72 = *(_OWORD *)(v2 + 8);
    v73 = *(_OWORD *)(v2 + 24);
    v74 = *(_OWORD *)(v2 + 40);
    v75 = *(_OWORD *)(v2 + 56);
    v71 = v8;
    v80 = v37;
    v81 = v35;
    v82 = v33;
    v83 = v32;
    v84 = v5;
    v85 = v31;
    v86 = v30;
    v87 = v29;
    v59 = v4;
    v60 = v40;
    v61 = v13;
    v62 = v14;
    AttributedString.Runs.subscript.getter(&v59, &v42);
    v76 = v67;
    v77 = v68;
    v78 = v69;
    v79 = v70;
    v72 = v63;
    v73 = v64;
    v74 = v65;
    v75 = v66;
    v47 = v67;
    v48 = v68;
    v16 = v42;
    v49 = v69;
    v50 = v70;
    v43 = v63;
    v44 = v64;
    v45 = v65;
    v17 = *(_QWORD *)(v2 + 200);
    v18 = *(_QWORD *)(v2 + 208);
    v71 = v8;
    v80 = v37;
    v81 = v35;
    v82 = v33;
    v83 = v32;
    v84 = v5;
    v85 = v31;
    v86 = v30;
    v87 = v29;
    v88 = v17;
    v89 = v18;
    v41[3] = v14;
    v42 = v8;
    v46 = v66;
    v51 = v37;
    v52 = v35;
    v53 = v33;
    v54 = v32;
    v55 = v5;
    v56 = v31;
    v57 = v30;
    v58 = v29;
    v36 = v13;
    v38 = v4;
    v41[0] = v4;
    v41[1] = v40;
    v41[2] = v13;
    v34 = v14;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v71);
    swift_retain();
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(v41, v17, v18, (uint64_t *)&v59);
    swift_release();
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v71);
    v19 = v59;
    if (v4 >> 10 > v59 >> 10)
    {
      __break(1u);
    }
    else
    {
      v20 = v60;
      v21 = v61;
      v39 = v60;
      v22 = v62;
      *(_QWORD *)(v2 + 216) = v59;
      *(_QWORD *)(v2 + 224) = v20;
      *(_QWORD *)(v2 + 232) = v21;
      *(_QWORD *)(v2 + 240) = v22;
      v24 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD *)(a1 + 24);
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
      v25 = swift_getTupleTypeMetadata2();
      v26 = (unint64_t *)(a2 + *(int *)(v25 + 48));
      AttributedString._AttributeStorage.subscript.getter(v16, v24, v23, a2);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v26 = v38;
      v26[1] = v40;
      v26[2] = v36;
      v26[3] = v34;
      v26[4] = v19;
      v26[5] = v39;
      v26[6] = v21;
      v26[7] = v22;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 0, 1, v25);
    }
  }
  return result;
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  _OWORD v18[12];
  uint64_t v19;

  v11 = *(_OWORD *)(v5 + 176);
  v18[10] = *(_OWORD *)(v5 + 160);
  v18[11] = v11;
  v19 = *(_QWORD *)(v5 + 192);
  v12 = *(_OWORD *)(v5 + 112);
  v18[6] = *(_OWORD *)(v5 + 96);
  v18[7] = v12;
  v13 = *(_OWORD *)(v5 + 144);
  v18[8] = *(_OWORD *)(v5 + 128);
  v18[9] = v13;
  v14 = *(_OWORD *)(v5 + 48);
  v18[2] = *(_OWORD *)(v5 + 32);
  v18[3] = v14;
  v15 = *(_OWORD *)(v5 + 80);
  v18[4] = *(_OWORD *)(v5 + 64);
  v18[5] = v15;
  v16 = *(_OWORD *)(v5 + 16);
  v18[0] = *(_OWORD *)v5;
  v18[1] = v16;
  outlined retain of AttributedString.Runs((uint64_t)v18);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice2.init(runs:)(v5, a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[48];
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v2 = *(_OWORD *)(v1 + 176);
  v3 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v27[32] = *(_OWORD *)(v1 + 160);
  v28 = v2;
  v4 = *(_OWORD *)(v1 + 176);
  v29 = *(_OWORD *)(v1 + 192);
  v5 = *(_OWORD *)(v1 + 112);
  v7 = *(_OWORD *)(v1 + 80);
  v25 = *(_OWORD *)(v1 + 96);
  v6 = v25;
  v26 = v5;
  v8 = *(_OWORD *)(v1 + 112);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)v27 = *(_OWORD *)(v1 + 128);
  v10 = *(_OWORD *)v27;
  *(_OWORD *)&v27[16] = v9;
  v11 = *(_OWORD *)(v1 + 48);
  v13 = *(_OWORD *)(v1 + 16);
  v21 = *(_OWORD *)(v1 + 32);
  v12 = v21;
  v22 = v11;
  v14 = *(_OWORD *)(v1 + 48);
  v15 = *(_OWORD *)(v1 + 80);
  v23 = *(_OWORD *)(v1 + 64);
  v16 = v23;
  v24 = v15;
  v17 = *(_OWORD *)(v1 + 16);
  v20[0] = *(_OWORD *)v1;
  v18 = v20[0];
  v20[1] = v17;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)&v27[32];
  *(_OWORD *)(a1 + 176) = v4;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v7;
  v30 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(v1 + 208);
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v27[8];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v27[24];
  return outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v20);
}

uint64_t AttributedString.Runs.AttributesSlice2.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t TupleTypeMetadata3;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  __int128 v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  char v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int v133;
  void (*v134)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  unint64_t v140;
  __int128 *v141;
  __int128 *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  __int128 v150;
  __int128 v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  __int128 *v185;
  __int128 *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  _OWORD *v208;
  uint64_t v209;
  uint64_t *v210;
  _QWORD *v211;
  unint64_t v212;
  __int128 *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  unint64_t v228;
  unint64_t v229;
  __int128 v230;
  __int128 v231;
  uint64_t *v232;
  __int128 *v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  _QWORD v242[9];
  unint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  uint64_t v246;
  unint64_t v247;
  __int128 *v248;
  unint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  __int128 *v274;
  uint64_t *v275;
  unint64_t v276;
  __int128 *v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _BYTE v289[48];
  _QWORD v290[3];
  uint64_t v291;
  unint64_t v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE v297[48];
  _OWORD v298[13];

  v4 = v2[21];
  v229 = v2[27];
  v5 = v229 >> 10;
  v224 = v4;
  v6 = v4 >> 10;
  if (v229 >> 10 == v6)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(a2, 1, 1, TupleTypeMetadata3);
  }
  v202 = result;
  v8 = *v2;
  v282 = *(_OWORD *)(v2 + 1);
  v283 = *(_OWORD *)(v2 + 3);
  v284 = *(_OWORD *)(v2 + 5);
  v285 = *(_OWORD *)(v2 + 7);
  if (v5 >= v6)
    goto LABEL_251;
  v235 = v2[17];
  if (v5 < v235 >> 10)
    goto LABEL_251;
  v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(v8 + 80);
  v11 = v229 >> 11;
  if (v9)
    v12 = *(_QWORD *)(v8 + 80);
  else
    v12 = 0;
  if (v12 < v11)
    goto LABEL_252;
  v231 = *(_OWORD *)(v2 + 9);
  v13 = *(_OWORD *)(v2 + 11);
  v14 = *(_OWORD *)(v2 + 13);
  v15 = *(_OWORD *)(v2 + 15);
  v234 = (uint64_t *)v2[18];
  v233 = (__int128 *)v2[19];
  v232 = (uint64_t *)v2[20];
  v213 = (__int128 *)v2[22];
  v212 = v2[23];
  v16 = (_QWORD *)v2[24];
  v210 = v2;
  v211 = v16;
  v222 = v2[28];
  v221 = v2[29];
  v220 = v2[30];
  v17 = *(_QWORD *)(v8 + 72);
  v18 = *(_QWORD *)(v8 + 88);
  v217 = v8;
  *(_QWORD *)&v230 = v229 >> 11;
  v199 = a2;
  v200 = v6;
  v201 = v229 >> 10;
  v226 = v14;
  v227 = v13;
  v225 = v15;
  v228 = v235 >> 10;
  if (!v9 || v11 >= v10 || !*(_WORD *)(v9 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v31 = v17;
    v32 = specialized Rope._endPath.getter(v9);
    swift_unknownObjectRelease();
    v23 = 0;
    v11 = 0;
    v33 = 0;
    if (!v9)
      goto LABEL_32;
    goto LABEL_31;
  }
  v223 = v17;
  v19 = v18;
  v20 = *(unsigned __int8 *)(v9 + 18);
  if (*(_BYTE *)(v9 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain();
    v21 = v9;
    while (1)
    {
      v24 = *(unsigned __int16 *)(v21 + 16);
      if (!*(_WORD *)(v21 + 16))
        break;
      v25 = *(_QWORD *)(v21 + 40);
      v26 = __OFSUB__(v11, v25);
      v27 = v11 - v25;
      if (v26)
        goto LABEL_243;
      if (__OFADD__(v27, 1))
        goto LABEL_244;
      if (v27 + 1 < 1)
      {
        v24 = 0;
        goto LABEL_16;
      }
      if ((_DWORD)v24 == 1)
      {
        v11 = v27;
        break;
      }
      v28 = (uint64_t *)(v21 + 64);
      v29 = 1;
      while (1)
      {
        v30 = *v28;
        v28 += 3;
        v11 = v27 - v30;
        if (__OFSUB__(v27, v30))
          goto LABEL_237;
        if (__OFADD__(v11, 1))
        {
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
          goto LABEL_241;
        }
        if (v11 + 1 < 1)
          break;
        ++v29;
        v27 = v11;
        if (v24 == v29)
          goto LABEL_15;
      }
      v24 = v29;
      v11 = v27;
LABEL_16:
      v22 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
      v20 = ((-15 << v22) - 1) & v20 | (v24 << v22);
      v23 = *(_QWORD *)(v21 + 24 + 24 * v24);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v21 = v23;
      if (!*(_BYTE *)(v23 + 18))
        goto LABEL_73;
    }
LABEL_15:
    if (!v11)
      goto LABEL_16;
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
    goto LABEL_250;
  }
  swift_unknownObjectRetain_n();
  result = swift_retain();
  v23 = v9;
LABEL_73:
  v68 = *(unsigned __int16 *)(v23 + 16);
  if (!*(_WORD *)(v23 + 16))
  {
    v8 = v217;
LABEL_95:
    if (v11)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    goto LABEL_96;
  }
  v69 = *(_QWORD *)(v23 + 24);
  v26 = __OFSUB__(v11, v69);
  v70 = v11 - v69;
  v8 = v217;
  if (v26)
  {
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }
  if (__OFADD__(v70, 1))
  {
LABEL_277:
    __break(1u);
    goto LABEL_278;
  }
  if (v70 + 1 < 1)
  {
    v68 = 0;
  }
  else
  {
    if ((_DWORD)v68 == 1)
    {
      v11 = v70;
      goto LABEL_95;
    }
    v74 = (uint64_t *)(v23 + 48);
    v75 = 1;
    while (1)
    {
      v76 = *v74;
      v74 += 3;
      v11 = v70 - v76;
      if (__OFSUB__(v70, v76))
        goto LABEL_268;
      if (__OFADD__(v11, 1))
        goto LABEL_269;
      if (v11 + 1 < 1)
        break;
      ++v75;
      v70 = v11;
      if (v68 == v75)
        goto LABEL_95;
    }
    v68 = v75;
    v11 = v70;
  }
LABEL_96:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v32 = v20 & 0xFFFFFFFFFFFFF0FFLL | (v68 << 8);
  v18 = v19;
  v31 = v223;
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v18, v32, v23, v9, v31);
  swift_unknownObjectRelease_n();
  v33 = v11;
LABEL_32:
  v34 = *(_OWORD *)(v8 + 32);
  v298[9] = *(_OWORD *)(v8 + 16);
  v298[10] = v34;
  v298[11] = *(_OWORD *)(v8 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v33))
  {
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  v35 = BigString.UTF8View.index(_:offsetBy:)();
  result = outlined release of Locale((uint64_t)&v286);
  if (v18 != *(_QWORD *)(v8 + 88))
  {
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  if (v23)
  {
    v36 = (_QWORD *)(v23 + 24 * ((v32 >> ((4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C)) & 0xF));
    v38 = v36[3];
    v37 = v36[4];
    v39 = v36[5];
    swift_retain();
    v198 = v37;
    swift_bridgeObjectRetain();
    v197 = v39;
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v40 = *(_QWORD *)(v8 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    v38 = specialized Rope._Node.subscript.getter(v32, v40);
    v197 = v42;
    v198 = v41;
    result = swift_unknownObjectRelease();
  }
  if (v228 >= v35 >> 10)
    v43 = v235;
  else
    v43 = v35;
  if (__OFADD__(v38, v35 >> 11))
    goto LABEL_255;
  v44 = (_OWORD *)(v8 + 16);
  if ((uint64_t)(v224 >> 11) >= (uint64_t)(v38 + (v35 >> 11)))
    v45 = v38 + (v35 >> 11);
  else
    v45 = v224 >> 11;
  v46 = *(_OWORD *)(v8 + 32);
  v298[6] = *v44;
  v298[7] = v46;
  v298[8] = *(_OWORD *)(v8 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(v45, v43 >> 11))
    goto LABEL_256;
  v47 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v287);
  result = swift_release();
  if (v47 >> 10 < v43 >> 10)
  {
LABEL_257:
    __break(1u);
    goto LABEL_258;
  }
  v49 = v210[25];
  v48 = v210[26];
  v264 = v282;
  v265 = v283;
  v266 = v284;
  v267 = v285;
  v268 = v231;
  v269 = v227;
  v270 = v226;
  v271 = v225;
  v263 = v8;
  v272 = v235;
  v273 = (uint64_t)v234;
  v274 = v233;
  v275 = v232;
  v276 = v224;
  v277 = v213;
  v278 = v212;
  v279 = v211;
  v280 = v49;
  v281 = v48;
  v223 = v49;
  v50 = *(_QWORD *)(v49 + 16);
  if (!v50)
  {
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }
  v51 = *(_QWORD *)(v8 + 64);
  v52 = *(_QWORD *)(v8 + 72);
  v53 = *(_QWORD *)(v8 + 80);
  *(_QWORD *)&v225 = *(_QWORD *)(v8 + 88);
  v208 = (_OWORD *)(v8 + 16);
  v196 = v48;
  *(_QWORD *)&v226 = v50;
  v235 = v52;
  if (v51)
  {
    v54 = v230;
    if (v53 < (uint64_t)v230)
    {
LABEL_272:
      __break(1u);
      goto LABEL_273;
    }
    if (*(_WORD *)(v51 + 16) && (uint64_t)v230 < v53)
    {
      v55 = *(unsigned __int8 *)(v51 + 18);
      if (*(_BYTE *)(v51 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v263);
        v56 = v230;
        v57 = v51;
        while (1)
        {
          v60 = *(unsigned __int16 *)(v57 + 16);
          if (!*(_WORD *)(v57 + 16))
            goto LABEL_54;
          v61 = *(_QWORD *)(v57 + 40);
          v26 = __OFSUB__(v56, v61);
          v62 = v56 - v61;
          if (v26)
            goto LABEL_245;
          if (__OFADD__(v62, 1))
            goto LABEL_246;
          if (v62 + 1 < 1)
          {
            v60 = 0;
          }
          else
          {
            if ((_DWORD)v60 == 1)
            {
              v56 = v62;
LABEL_54:
              if (v56)
                goto LABEL_242;
              goto LABEL_55;
            }
            v63 = (uint64_t *)(v57 + 64);
            v64 = 1;
            while (1)
            {
              v65 = *v63;
              v63 += 3;
              v56 = v62 - v65;
              if (__OFSUB__(v62, v65))
                goto LABEL_239;
              if (__OFADD__(v56, 1))
                goto LABEL_240;
              if (v56 + 1 < 1)
                break;
              ++v64;
              v62 = v56;
              if (v60 == v64)
                goto LABEL_54;
            }
            v60 = v64;
            v56 = v62;
          }
LABEL_55:
          v58 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
          v55 = ((-15 << v58) - 1) & v55 | (v60 << v58);
          v59 = *(_QWORD *)(v57 + 24 + 24 * v60);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v57 = v59;
          if (!*(_BYTE *)(v59 + 18))
            goto LABEL_80;
        }
      }
      swift_unknownObjectRetain_n();
      swift_retain();
      result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v263);
      v56 = v230;
      v59 = v51;
LABEL_80:
      v71 = *(unsigned __int16 *)(v59 + 16);
      v215 = v59;
      if ((_DWORD)v71)
      {
        v72 = *(_QWORD *)(v59 + 24);
        v26 = __OFSUB__(v56, v72);
        v73 = v56 - v72;
        v44 = v208;
        if (v26)
        {
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
          goto LABEL_281;
        }
        if (__OFADD__(v73, 1))
          goto LABEL_279;
        if (v73 + 1 < 1)
        {
          v71 = 0;
        }
        else
        {
          if ((_DWORD)v71 == 1)
          {
            v56 = v73;
            goto LABEL_102;
          }
          v77 = (uint64_t *)(v215 + 48);
          v78 = 1;
          while (1)
          {
            v79 = *v77;
            v77 += 3;
            v56 = v73 - v79;
            if (__OFSUB__(v73, v79))
              goto LABEL_270;
            if (__OFADD__(v56, 1))
              goto LABEL_271;
            if (v56 + 1 < 1)
              break;
            ++v78;
            v73 = v56;
            if (v71 == v78)
              goto LABEL_102;
          }
          v71 = v78;
          v56 = v73;
        }
LABEL_103:
        swift_unknownObjectRelease();
        v67 = v215;
        swift_unknownObjectRelease();
        v66 = v55 & 0xFFFFFFFFFFFFF0FFLL | (v71 << 8);
        v54 = v230;
        goto LABEL_71;
      }
      v44 = v208;
LABEL_102:
      if (v56)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }
      goto LABEL_103;
    }
  }
  else
  {
    v54 = v230;
    if (v229 >= 0x800)
    {
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v263);
  v66 = specialized Rope._endPath.getter(v51);
  result = swift_unknownObjectRelease();
  v67 = 0;
  v56 = 0;
  if (v51)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v235 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v225, v66, v67, v51, v235);
    result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }
  v235 = 0;
LABEL_105:
  v218 = v54 - v56;
  if (__OFSUB__(v54, v56))
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }
  v80 = v44[1];
  v298[3] = *v44;
  v298[4] = v80;
  v298[5] = v44[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v56))
  {
LABEL_260:
    __break(1u);
    goto LABEL_261;
  }
  v81 = BigString.UTF8View.index(_:offsetBy:)();
  v83 = v82;
  v193 = v85;
  v194 = v84;
  result = outlined release of Locale((uint64_t)&v288);
  v207 = v231;
  if ((uint64_t)v235 >= (uint64_t)v231)
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }
  if ((_QWORD)v225 != *(_QWORD *)(v8 + 88))
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
    goto LABEL_265;
  }
  v191 = v83;
  v192 = v81;
  v86 = *(_BYTE **)(v8 + 64);
  if (v67)
  {
    v87 = v67 + 24 * ((v66 >> ((4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C)) & 0xF);
    v88 = *(_QWORD *)(v87 + 40);
    *(_QWORD *)&v230 = *(_QWORD *)(v87 + 32);
    swift_bridgeObjectRetain();
    v195 = v88;
    result = swift_bridgeObjectRetain();
    v89 = v225;
    v90 = v225;
    v91 = v226;
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v66, (uint64_t)v86);
    *(_QWORD *)&v230 = v92;
    v195 = v93;
    result = swift_unknownObjectRelease();
    v86 = *(_BYTE **)(v8 + 64);
    v90 = *(_QWORD *)(v8 + 88);
    v91 = v226;
    v89 = v225;
  }
  v216 = v235 + 1;
  v243 = v89;
  v244 = v66;
  v233 = (__int128 *)&v295;
  v234 = &v251;
  v206 = (uint64_t *)(v223 + 40);
  v245 = (_BYTE *)v67;
LABEL_113:
  if (v89 != v90)
    goto LABEL_247;
  v214 = v90;
  v219 = v66;
  if (v67)
  {
    v94 = *(_QWORD *)(v67 + 24 * ((v66 >> ((4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v94 = specialized Rope._Node.subscript.getter(v66, (uint64_t)v86);
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v218, v94))
    goto LABEL_248;
  v205 = v218 + v94;
  if (v86)
  {
    v95 = ((-15 << ((4 * v86[18] + 8) & 0x3C)) - 1) & (unint64_t)v86[18] | ((unint64_t)*((unsigned __int16 *)v86 + 8) << ((4 * v86[18] + 8) & 0x3C));
    result = swift_unknownObjectRetain();
  }
  else
  {
    v95 = 0;
  }
  if (v219 >= v95)
    goto LABEL_249;
  if (v67)
  {
    v96 = (4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C;
    v97 = ((v219 >> v96) & 0xF) + 1;
    if (v97 < *(unsigned __int16 *)(v67 + 16))
    {
      v98 = (v97 << v96) | ((-15 << v96) - 1) & v219;
      result = swift_unknownObjectRelease_n();
LABEL_128:
      v86 = v245;
      goto LABEL_135;
    }
  }
  v99 = v86[18];
  v100 = (4 * v99 + 8) & 0x3C;
  v101 = (v219 >> v100) & 0xF;
  *(_QWORD *)&v293 = v101;
  if (v99)
  {
    swift_unknownObjectRetain();
    v102 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v86 + 24), (uint64_t *)&v293, (uint64_t)&v243, (uint64_t)v86, v99);
    result = swift_unknownObjectRelease();
    if ((v102 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v98 = v244;
      goto LABEL_128;
    }
  }
  else
  {
    v103 = v101 + 1;
    if (v101 + 1 < (unint64_t)*((unsigned __int16 *)v86 + 8))
    {
      result = swift_unknownObjectRelease_n();
      v98 = (v103 << v100) | ((-15 << v100) - 1) & v219;
      goto LABEL_135;
    }
  }
  if (v86)
  {
    v104 = v86[18];
    v105 = *((unsigned __int16 *)v86 + 8);
    result = swift_unknownObjectRelease_n();
    v98 = ((-15 << ((4 * v104 + 8) & 0x3C)) - 1) & v104 | (unint64_t)(v105 << ((4 * v104 + 8) & 0x3C));
  }
  else
  {
    v98 = 0;
  }
  v86 = 0;
  v243 = v214;
LABEL_135:
  v106 = v230;
  if (v216 != v207)
  {
    if (v243 != *(_QWORD *)(v8 + 88))
    {
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
      goto LABEL_253;
    }
    *(_QWORD *)&v225 = v243;
    v215 = v67;
    v203 = v86;
    v204 = v98;
    if (v86)
    {
      v107 = &v86[24 * ((v98 >> ((4 * v86[18] + 8) & 0x3C)) & 0xF)];
      v108 = *((_QWORD *)v107 + 4);
      v109 = *((_QWORD *)v107 + 5);
      swift_bridgeObjectRetain();
      v209 = v109;
      swift_bridgeObjectRetain();
    }
    else
    {
      v110 = *(_QWORD *)(v8 + 64);
      swift_unknownObjectRetain();
      v106 = v230;
      specialized Rope._Node.subscript.getter(v98, v110);
      v209 = v111;
      v108 = v112;
      swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRetain();
    v113 = 0;
    v114 = v206;
    v235 = v108;
    while (1)
    {
      v116 = v113 + 1;
      if (__OFADD__(v113, 1))
      {
        __break(1u);
LABEL_237:
        __break(1u);
        goto LABEL_238;
      }
      v118 = *(v114 - 1);
      v117 = *v114;
      if (*(_QWORD *)(v106 + 16))
      {
        swift_bridgeObjectRetain_n();
        v119 = specialized __RawDictionaryStorage.find<A>(_:)(v118, v117);
        if ((v120 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v106 + 56) + 72 * v119, (uint64_t)&v258);
        }
        else
        {
          v262 = 0;
          v260 = 0u;
          v261 = 0u;
          v258 = 0u;
          v259 = 0u;
        }
        swift_bridgeObjectRelease();
        v108 = v235;
        if (!*(_QWORD *)(v235 + 16))
        {
LABEL_150:
          v257 = 0;
          v255 = 0u;
          v256 = 0u;
          v253 = 0u;
          v254 = 0u;
          goto LABEL_157;
        }
      }
      else
      {
        v262 = 0;
        v260 = 0u;
        v261 = 0u;
        v258 = 0u;
        v259 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v108 + 16))
          goto LABEL_150;
      }
      swift_bridgeObjectRetain();
      v121 = specialized __RawDictionaryStorage.find<A>(_:)(v118, v117);
      if ((v122 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v108 + 56) + 72 * v121, (uint64_t)&v253);
      }
      else
      {
        v257 = 0;
        v255 = 0u;
        v256 = 0u;
        v253 = 0u;
        v254 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_157:
      swift_bridgeObjectRelease();
      v86 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v258, (uint64_t)&v243, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v253, (uint64_t)v234, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v246)
      {
        if (v252)
          goto LABEL_174;
        outlined destroy of Any?((uint64_t)&v243, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v253, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?((uint64_t)&v258, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_144;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v243, (uint64_t)v242, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v252)
        goto LABEL_173;
      v123 = *((_OWORD *)v234 + 3);
      v239 = *((_OWORD *)v234 + 2);
      v240 = v123;
      v241 = v234[8];
      v124 = *((_OWORD *)v234 + 1);
      v237 = *(_OWORD *)v234;
      v238 = v124;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v242, (uint64_t)v298);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v237, (uint64_t)v297);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v298, (uint64_t)&v293, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v297, (uint64_t)v233, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v294)
      {
        if (!v296)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v293);
LABEL_142:
          v115 = 0;
          goto LABEL_143;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v293, (uint64_t)v290);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v233, (uint64_t)v289);
        v125 = v291;
        v228 = v292;
        *(_QWORD *)&v227 = __swift_project_boxed_opaque_existential_1(v290, v291);
        v232 = &v191;
        v126 = *(_QWORD *)(v125 - 8);
        MEMORY[0x1E0C80A78](v227);
        v128 = (char *)&v191 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v289, (uint64_t)&v236);
        v129 = type metadata accessor for Optional();
        *(_QWORD *)&v231 = &v191;
        v130 = *(_QWORD *)(v129 - 8);
        MEMORY[0x1E0C80A78](v129);
        v132 = (char *)&v191 - v131;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v133 = swift_dynamicCast();
        v134 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56);
        if (v133)
        {
          v134(v132, 0, 1, v125);
          (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v128, v132, v125);
          v115 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v125);
        }
        else
        {
          v134(v132, 1, 1, v125);
          (*(void (**)(char *, uint64_t))(v130 + 8))(v132, v129);
          v115 = 0;
        }
        v91 = v226;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v289);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v290);
        v106 = v230;
      }
      else
      {
        if (v296)
        {
          outlined destroy of Any?((uint64_t)v233, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_142;
        }
        v115 = 1;
      }
LABEL_143:
      outlined destroy of Any?((uint64_t)v297, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v298, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v237);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v242);
      outlined destroy of Any?((uint64_t)&v243, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v253, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v258, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v115 & 1) == 0)
        goto LABEL_175;
LABEL_144:
      v114 += 2;
      ++v113;
      v108 = v235;
      if (v116 == v91)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v8 = v217;
        v86 = *(_BYTE **)(v217 + 64);
        v90 = *(_QWORD *)(v217 + 88);
        v66 = v204;
        v218 = v205;
        v89 = v225;
        v243 = v225;
        v244 = v204;
        v67 = (uint64_t)v203;
        v245 = v203;
        v26 = __OFADD__(v216++, 1);
        v44 = v208;
        if (!v26)
          goto LABEL_113;
        __break(1u);
LABEL_173:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v242);
LABEL_174:
        outlined destroy of Any?((uint64_t)&v243, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v253, (uint64_t *)v86);
        outlined destroy of Any?((uint64_t)&v258, (uint64_t *)v86);
LABEL_175:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v8 = v217;
        v44 = v208;
        v67 = v215;
        goto LABEL_176;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_176:
  v135 = v219;
  if (v214 != *(_QWORD *)(v8 + 88))
    goto LABEL_263;
  if (v67)
  {
    v136 = *(_QWORD *)(v67 + 24 * ((v219 >> ((4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v137 = *(_QWORD *)(v8 + 64);
    swift_unknownObjectRetain();
    v136 = specialized Rope._Node.subscript.getter(v135, v137);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v138 = v218 + v136;
  if (__OFADD__(v218, v136))
    goto LABEL_264;
  v139 = v44[1];
  v237 = *v44;
  v238 = v139;
  v239 = v44[2];
  BigString.utf8.getter();
  result = v192;
  if (__OFSUB__(v138, v192 >> 11))
  {
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
    goto LABEL_272;
  }
  v140 = BigString.UTF8View.index(_:offsetBy:)();
  v142 = v141;
  v144 = v143;
  v146 = v145;
  result = outlined release of Locale((uint64_t)v289);
  if (v200 >= v140 >> 10)
    v147 = v140;
  else
    v147 = v224;
  if (v200 >= v140 >> 10)
  {
    v148 = v144;
  }
  else
  {
    v142 = v213;
    v148 = v212;
  }
  if (v200 >= v140 >> 10)
    v149 = v146;
  else
    v149 = v211;
  v150 = *v44;
  v151 = v44[2];
  v298[1] = v44[1];
  v298[2] = v151;
  v298[0] = v150;
  v152 = v201;
  if (v147 >> 10 < v201)
    goto LABEL_266;
  *(_QWORD *)&v258 = v229;
  *((_QWORD *)&v258 + 1) = v222;
  *(_QWORD *)&v259 = v221;
  *((_QWORD *)&v259 + 1) = v220;
  *(_QWORD *)&v260 = v147;
  *((_QWORD *)&v260 + 1) = v142;
  *(_QWORD *)&v261 = v148;
  *((_QWORD *)&v261 + 1) = v149;
  v153 = v196;
  v154 = *(_QWORD *)(v196 + 16);
  v235 = v148;
  if (!v154 || v201 == v147 >> 10)
    goto LABEL_206;
  v155 = v142;
  outlined retain of Locale((uint64_t)v298);
  swift_bridgeObjectRetain();
  v156 = 40;
  v157 = v154;
  while (*(_QWORD *)(v153 + v156))
  {
    swift_bridgeObjectRelease();
    v156 += 16;
    if (!--v157)
    {
      swift_bridgeObjectRelease();
      v142 = v155;
      v158 = v235;
      goto LABEL_201;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v290);
  *(_QWORD *)&v253 = v229;
  *((_QWORD *)&v253 + 1) = v222;
  *(_QWORD *)&v254 = v221;
  *((_QWORD *)&v254 + 1) = v220;
  *(_QWORD *)&v255 = v229;
  *((_QWORD *)&v255 + 1) = v222;
  *(_QWORD *)&v256 = v221;
  *((_QWORD *)&v256 + 1) = v220;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v253, &v243);
  result = outlined release of Locale((uint64_t)&v293);
  v142 = v155;
  v158 = v235;
  if (v250 != (uint64_t *)2)
  {
    v147 = v247;
    if (v152 > v247 >> 10)
      goto LABEL_280;
    v142 = v248;
    v158 = v249;
    v149 = v250;
  }
LABEL_201:
  v242[0] = v229;
  v242[1] = v222;
  v242[2] = v221;
  v242[3] = v220;
  v242[4] = v147;
  v242[5] = v142;
  v235 = v158;
  v242[6] = v158;
  v242[7] = v149;
  v159 = *(_QWORD *)(v153 + 16);
  if (!v159)
  {
LABEL_205:
    outlined release of Locale((uint64_t)v298);
LABEL_206:
    swift_release();
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v263);
    v161 = v210;
    v162 = v235;
    goto LABEL_207;
  }
  v160 = 40;
  while (!*(_QWORD *)(v153 + v160))
  {
    v160 += 16;
    if (!--v159)
      goto LABEL_205;
  }
  v232 = v149;
  v233 = v142;
  v234 = (uint64_t *)v147;
  swift_bridgeObjectRetain();
  v175 = (unint64_t *)(v153 + 40);
  v176 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v177 = *v175;
    if (*v175)
    {
      v178 = v153;
      v179 = *(v175 - 1);
      if ((v177 & 0x2000000000000000) != 0)
        v180 = HIBYTE(v177) & 0xF;
      else
        v180 = v179 & 0xFFFFFFFFFFFFLL;
      if (v180)
      {
        if ((v177 & 0x1000000000000000) != 0)
        {
          v181 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v177 & 0x2000000000000000) != 0)
          {
            v243 = *(v175 - 1);
            v244 = v177 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v179 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            swift_bridgeObjectRetain();
          }
          v181 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v176 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v176 + 2) + 1, 1, v176);
        v183 = *((_QWORD *)v176 + 2);
        v182 = *((_QWORD *)v176 + 3);
        if (v183 >= v182 >> 1)
          v176 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v182 > 1), v183 + 1, 1, v176);
        *((_QWORD *)v176 + 2) = v183 + 1;
        *(_DWORD *)&v176[4 * v183 + 32] = v181;
      }
      v153 = v178;
    }
    v175 += 2;
    --v154;
  }
  while (v154);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v297);
  v184 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v176);
  v186 = v185;
  v188 = v187;
  v190 = v189;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v243);
  outlined release of Locale((uint64_t)v298);
  swift_release();
  result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v263);
  v161 = v210;
  v142 = v233;
  v147 = (unint64_t)v234;
  v162 = v235;
  v149 = v232;
  if (v190 == (uint64_t *)2)
  {
LABEL_207:
    v163 = v161[27];
    if (v147 >> 10 >= v163 >> 10)
    {
      *(_QWORD *)&v231 = v161[30];
      v230 = *((_OWORD *)v161 + 14);
      v161[27] = v147;
      v161[28] = (uint64_t)v142;
      v161[29] = v162;
      v161[30] = (uint64_t)v149;
      v164 = v202;
      v228 = *(_QWORD *)(v202 + 32);
      v233 = v142;
      v165 = *(_QWORD *)(v202 + 16);
      v235 = v162;
      v232 = v149;
      v229 = v163;
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      v234 = (uint64_t *)v147;
      v166 = *(_QWORD *)(v164 + 40);
      v167 = *(_QWORD *)(v164 + 24);
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
      v168 = swift_getTupleTypeMetadata3();
      v170 = v198;
      v169 = v199;
      v171 = v199 + *(int *)(v168 + 48);
      v172 = v199 + *(int *)(v168 + 64);
      AttributedString._AttributeStorage.subscript.getter(v198, v165, v228, v199);
      AttributedString._AttributeStorage.subscript.getter(v170, v167, v166, v171);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)v172 = v229;
      *(_OWORD *)(v172 + 8) = v230;
      v173 = (uint64_t)v234;
      *(_QWORD *)(v172 + 24) = v231;
      *(_QWORD *)(v172 + 32) = v173;
      v174 = v235;
      *(_QWORD *)(v172 + 40) = v233;
      *(_QWORD *)(v172 + 48) = v174;
      *(_QWORD *)(v172 + 56) = v232;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 56))(v169, 0, 1, v168);
    }
    goto LABEL_267;
  }
  if (v152 <= v184 >> 10)
  {
    v147 = v184;
    v142 = v186;
    v162 = v188;
    v149 = v190;
    goto LABEL_207;
  }
LABEL_281:
  __break(1u);
  return result;
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v7;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double result;
  _OWORD v21[12];
  uint64_t v22;

  v14 = *(_OWORD *)(v7 + 176);
  v21[10] = *(_OWORD *)(v7 + 160);
  v21[11] = v14;
  v22 = *(_QWORD *)(v7 + 192);
  v15 = *(_OWORD *)(v7 + 112);
  v21[6] = *(_OWORD *)(v7 + 96);
  v21[7] = v15;
  v16 = *(_OWORD *)(v7 + 144);
  v21[8] = *(_OWORD *)(v7 + 128);
  v21[9] = v16;
  v17 = *(_OWORD *)(v7 + 48);
  v21[2] = *(_OWORD *)(v7 + 32);
  v21[3] = v17;
  v18 = *(_OWORD *)(v7 + 80);
  v21[4] = *(_OWORD *)(v7 + 64);
  v21[5] = v18;
  v19 = *(_OWORD *)(v7 + 16);
  v21[0] = *(_OWORD *)v7;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v21);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice3.init(runs:)(v7, a1, a2, a3, a4, a5, a7, a6).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice3.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t TupleTypeMetadata;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  _QWORD *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  int v108;
  char v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char *v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  char v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  int v143;
  void (*v144)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  __int128 *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  __int128 *v157;
  unint64_t v158;
  unint64_t v159;
  int64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  __int128 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t AssociatedTypeWitness;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  __int128 *v205;
  _QWORD *v206;
  unint64_t *v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  int v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  int64_t v219;
  __int128 *v220;
  __int128 *v221;
  _QWORD v222[4];
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  __int128 *v233;
  _QWORD *v234;
  __int128 *v235;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t *v260;
  __int128 v261;
  _QWORD *v262;
  __int128 *v263;
  int64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  _QWORD v270[9];
  _QWORD v271[5];
  unint64_t v272;
  uint64_t v273;
  _BYTE *v274;
  uint64_t v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 *v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  unint64_t v301;
  uint64_t v302;
  __int128 *v303;
  _QWORD *v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  __int128 *v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE v318[48];
  _BYTE v319[48];
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD v324[3];
  uint64_t v325;
  uint64_t v326;
  _OWORD v327[3];
  _OWORD v328[13];

  v4 = *(_QWORD *)(v2 + 216);
  v5 = v4 >> 10;
  v251 = *(_QWORD *)(v2 + 168);
  if (v4 >> 10 == v251 >> 10)
  {
    swift_getAssociatedTypeWitness();
    v292 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(_QWORD *)&v293 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((_QWORD *)&v293 + 1) = type metadata accessor for Optional();
    *(_QWORD *)&v294 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(a2, 1, 1, TupleTypeMetadata);
  }
  v7 = *(_QWORD **)v2;
  v8 = *(_OWORD *)(v2 + 24);
  v311 = *(_OWORD *)(v2 + 8);
  v312 = v8;
  v9 = *(_OWORD *)(v2 + 56);
  v313 = *(_OWORD *)(v2 + 40);
  v314 = v9;
  if (v5 >= v251 >> 10)
    goto LABEL_274;
  v10 = *(_QWORD *)(v2 + 136);
  if (v5 < v10 >> 10)
    goto LABEL_274;
  v11 = v7[8];
  v12 = v7[10];
  if (v11)
    v13 = v7[10];
  else
    v13 = 0;
  v264 = v4 >> 11;
  if (v13 < (uint64_t)(v4 >> 11))
    goto LABEL_275;
  v261 = *(_OWORD *)(v2 + 72);
  v14 = *(_OWORD *)(v2 + 88);
  v15 = *(_OWORD *)(v2 + 104);
  v16 = *(_OWORD *)(v2 + 120);
  v257 = *(_QWORD *)(v2 + 144);
  v17 = *(__int128 **)(v2 + 152);
  v262 = *(_QWORD **)(v2 + 160);
  v263 = v17;
  v18 = *(_QWORD **)(v2 + 176);
  v236 = *(_QWORD *)(v2 + 184);
  v237 = v18;
  v19 = *(__int128 **)(v2 + 192);
  v234 = (_QWORD *)v2;
  v235 = v19;
  v20 = *(_QWORD *)(v2 + 224);
  v246 = *(_QWORD *)(v2 + 232);
  v247 = v20;
  v21 = *(_QWORD *)(v2 + 240);
  v244 = v4;
  v245 = v21;
  v22 = v7[9];
  v258 = v7;
  v259 = v22;
  v23 = v7[11];
  v248 = a2;
  v242 = (_QWORD *)result;
  v226 = v251 >> 10;
  v227 = v4 >> 10;
  v254 = v15;
  v255 = v14;
  v253 = v16;
  v256 = (_QWORD *)(v10 >> 10);
  v260 = (uint64_t *)v23;
  if (!v11 || v264 >= v12 || !*(_WORD *)(v11 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v36 = v259;
    v37 = specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    v28 = 0;
    v25 = 0;
    v38 = 0;
    if (!v11)
      goto LABEL_32;
    goto LABEL_31;
  }
  v24 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain();
    v25 = v264;
    v26 = v11;
    while (1)
    {
      v29 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16))
        break;
      v30 = *(_QWORD *)(v26 + 40);
      v31 = __OFSUB__(v25, v30);
      v32 = v25 - v30;
      if (v31)
        goto LABEL_266;
      if (__OFADD__(v32, 1))
        goto LABEL_267;
      if (v32 + 1 < 1)
      {
        v29 = 0;
        goto LABEL_16;
      }
      if ((_DWORD)v29 == 1)
      {
        v25 = v32;
        break;
      }
      v33 = (uint64_t *)(v26 + 64);
      v34 = 1;
      while (1)
      {
        v35 = *v33;
        v33 += 3;
        v25 = v32 - v35;
        if (__OFSUB__(v32, v35))
          goto LABEL_260;
        if (__OFADD__(v25, 1))
        {
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
          goto LABEL_264;
        }
        if (v25 + 1 < 1)
          break;
        ++v34;
        v32 = v25;
        if (v29 == v34)
          goto LABEL_15;
      }
      v29 = v34;
      v25 = v32;
LABEL_16:
      v27 = (4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C;
      v24 = ((-15 << v27) - 1) & v24 | (v29 << v27);
      v28 = *(_QWORD *)(v26 + 24 + 24 * v29);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v26 = v28;
      if (!*(_BYTE *)(v28 + 18))
        goto LABEL_73;
    }
LABEL_15:
    if (!v25)
      goto LABEL_16;
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
    goto LABEL_273;
  }
  swift_unknownObjectRetain_n();
  result = swift_retain();
  v25 = v264;
  v28 = v11;
LABEL_73:
  v73 = *(unsigned __int16 *)(v28 + 16);
  if (!*(_WORD *)(v28 + 16))
  {
    v36 = v259;
LABEL_95:
    if (v25)
    {
LABEL_297:
      __break(1u);
      goto LABEL_298;
    }
    goto LABEL_96;
  }
  v74 = *(_QWORD *)(v28 + 24);
  v31 = __OFSUB__(v25, v74);
  v75 = v25 - v74;
  if (v31)
  {
LABEL_299:
    __break(1u);
    goto LABEL_300;
  }
  v36 = v259;
  if (__OFADD__(v75, 1))
  {
LABEL_300:
    __break(1u);
    goto LABEL_301;
  }
  if (v75 + 1 < 1)
  {
    v73 = 0;
  }
  else
  {
    if ((_DWORD)v73 == 1)
    {
      v25 = v75;
      goto LABEL_95;
    }
    v79 = (uint64_t *)(v28 + 48);
    v80 = 1;
    while (1)
    {
      v81 = *v79;
      v79 += 3;
      v25 = v75 - v81;
      if (__OFSUB__(v75, v81))
        goto LABEL_291;
      if (__OFADD__(v25, 1))
        goto LABEL_292;
      if (v25 + 1 < 1)
        break;
      ++v80;
      v75 = v25;
      if (v73 == v80)
        goto LABEL_95;
    }
    v73 = v80;
    v25 = v75;
  }
LABEL_96:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v37 = v24 & 0xFFFFFFFFFFFFF0FFLL | (v73 << 8);
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v260, v37, v28, v11, v36);
  swift_unknownObjectRelease_n();
  v38 = v25;
LABEL_32:
  v39 = (uint64_t)v258;
  v40 = *((_OWORD *)v258 + 2);
  v328[9] = *((_OWORD *)v258 + 1);
  v328[10] = v40;
  v328[11] = *((_OWORD *)v258 + 3);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v38))
  {
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }
  v41 = BigString.UTF8View.index(_:offsetBy:)();
  result = outlined release of Locale((uint64_t)&v315);
  if (v260 != (uint64_t *)v258[11])
  {
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
  if (v28)
  {
    v42 = (_QWORD *)(v28 + 24 * ((v37 >> ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C)) & 0xF));
    v44 = v42[3];
    v43 = v42[4];
    v45 = v42[5];
    swift_retain();
    v249 = v43;
    swift_bridgeObjectRetain();
    v225 = v45;
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v46 = v258[8];
    swift_retain();
    swift_unknownObjectRetain();
    v39 = (uint64_t)v258;
    v44 = specialized Rope._Node.subscript.getter(v37, v46);
    v249 = v47;
    v225 = v48;
    result = swift_unknownObjectRelease();
  }
  if ((unint64_t)v256 >= v41 >> 10)
    v49 = v10;
  else
    v49 = v41;
  if (__OFADD__(v44, v41 >> 11))
    goto LABEL_278;
  if ((uint64_t)(v251 >> 11) >= (uint64_t)(v44 + (v41 >> 11)))
    v50 = v44 + (v41 >> 11);
  else
    v50 = v251 >> 11;
  v51 = *(_OWORD *)(v39 + 32);
  v328[6] = *(_OWORD *)(v39 + 16);
  v328[7] = v51;
  v233 = (__int128 *)(v39 + 16);
  v328[8] = *(_OWORD *)(v39 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(v50, v49 >> 11))
    goto LABEL_279;
  v52 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v316);
  result = swift_release();
  if (v52 >> 10 < v49 >> 10)
  {
LABEL_280:
    __break(1u);
    goto LABEL_281;
  }
  v293 = v311;
  v294 = v312;
  v295 = v313;
  v54 = v234[25];
  v53 = v234[26];
  v296 = v314;
  v297 = v261;
  v298 = v255;
  v299 = v254;
  v300 = v253;
  v292 = v39;
  v301 = v10;
  v302 = v257;
  v303 = v263;
  v304 = v262;
  v305 = v251;
  v306 = v237;
  v307 = v236;
  v308 = v235;
  v309 = v54;
  v310 = v53;
  v250 = v54;
  v55 = *(_QWORD *)(v54 + 16);
  if (!v55)
  {
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
  v56 = *(_QWORD *)(v39 + 64);
  v57 = *(__int128 **)(v39 + 72);
  v58 = *(_QWORD *)(v39 + 80);
  *(_QWORD *)&v254 = *(_QWORD *)(v39 + 88);
  v240 = v53;
  if (v56)
  {
    if (v58 < v264)
    {
LABEL_295:
      __break(1u);
      goto LABEL_296;
    }
    if (*(_WORD *)(v56 + 16) && v264 < v58)
    {
      v263 = v57;
      v59 = *(unsigned __int8 *)(v56 + 18);
      if (*(_BYTE *)(v56 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v292);
        v60 = v264;
        v61 = v56;
        while (1)
        {
          v64 = *(unsigned __int16 *)(v61 + 16);
          if (!*(_WORD *)(v61 + 16))
            goto LABEL_54;
          v65 = *(_QWORD *)(v61 + 40);
          v31 = __OFSUB__(v60, v65);
          v66 = v60 - v65;
          if (v31)
            goto LABEL_268;
          if (__OFADD__(v66, 1))
            goto LABEL_269;
          if (v66 + 1 < 1)
          {
            v64 = 0;
          }
          else
          {
            if ((_DWORD)v64 == 1)
            {
              v60 = v66;
LABEL_54:
              if (v60)
                goto LABEL_265;
              goto LABEL_55;
            }
            v67 = (uint64_t *)(v61 + 64);
            v68 = 1;
            while (1)
            {
              v69 = *v67;
              v67 += 3;
              v60 = v66 - v69;
              if (__OFSUB__(v66, v69))
                goto LABEL_262;
              if (__OFADD__(v60, 1))
                goto LABEL_263;
              if (v60 + 1 < 1)
                break;
              ++v68;
              v66 = v60;
              if (v64 == v68)
                goto LABEL_54;
            }
            v64 = v68;
            v60 = v66;
          }
LABEL_55:
          v62 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          v59 = ((-15 << v62) - 1) & v59 | (v64 << v62);
          v63 = *(_QWORD *)(v61 + 24 + 24 * v64);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v61 = v63;
          if (!*(_BYTE *)(v63 + 18))
            goto LABEL_80;
        }
      }
      swift_unknownObjectRetain_n();
      swift_retain();
      result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v292);
      v60 = v264;
      v63 = v56;
LABEL_80:
      v76 = *(unsigned __int16 *)(v63 + 16);
      *(_QWORD *)&v253 = v63;
      if ((_DWORD)v76)
      {
        v77 = *(_QWORD *)(v63 + 24);
        v31 = __OFSUB__(v60, v77);
        v78 = v60 - v77;
        v39 = (uint64_t)v258;
        if (v31)
        {
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
          goto LABEL_304;
        }
        if (__OFADD__(v78, 1))
          goto LABEL_302;
        if (v78 + 1 < 1)
        {
          v76 = 0;
        }
        else
        {
          if ((_DWORD)v76 == 1)
          {
            v60 = v78;
            goto LABEL_102;
          }
          v82 = (uint64_t *)(v253 + 48);
          v83 = 1;
          while (1)
          {
            v84 = *v82;
            v82 += 3;
            v60 = v78 - v84;
            if (__OFSUB__(v78, v84))
              goto LABEL_293;
            if (__OFADD__(v60, 1))
              goto LABEL_294;
            if (v60 + 1 < 1)
              break;
            ++v83;
            v78 = v60;
            if (v76 == v83)
              goto LABEL_102;
          }
          v76 = v83;
          v60 = v78;
        }
LABEL_103:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v85 = v59 & 0xFFFFFFFFFFFFF0FFLL;
        v71 = v253;
        v70 = v85 | (v76 << 8);
        v57 = v263;
        goto LABEL_71;
      }
      v39 = (uint64_t)v258;
LABEL_102:
      if (v60)
      {
LABEL_298:
        __break(1u);
        goto LABEL_299;
      }
      goto LABEL_103;
    }
  }
  else if (v244 >= 0x800)
  {
LABEL_296:
    __break(1u);
    goto LABEL_297;
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v292);
  v70 = specialized Rope._endPath.getter(v56);
  result = swift_unknownObjectRelease();
  v71 = 0;
  v60 = 0;
  if (v56)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v72 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v254, v70, v71, v56, (uint64_t)v57);
    result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }
  v72 = 0;
LABEL_105:
  v243 = v264 - v60;
  if (__OFSUB__(v264, v60))
  {
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }
  v86 = v233[1];
  v328[3] = *v233;
  v328[4] = v86;
  v328[5] = v233[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v60))
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }
  v224 = BigString.UTF8View.index(_:offsetBy:)();
  v88 = v87;
  v222[2] = v90;
  v222[3] = v89;
  result = outlined release of Locale((uint64_t)&v317);
  v231 = v261;
  if (v72 >= (uint64_t)v261)
  {
LABEL_284:
    __break(1u);
    goto LABEL_285;
  }
  if ((_QWORD)v254 != *(_QWORD *)(v39 + 88))
  {
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  *(_QWORD *)&v255 = v70;
  v222[1] = v88;
  v91 = *(_BYTE **)(v39 + 64);
  if (v71)
  {
    v92 = v255;
    v93 = v71 + 24 * (((unint64_t)v255 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
    v94 = *(_QWORD *)(v93 + 40);
    v259 = *(_QWORD *)(v93 + 32);
    swift_bridgeObjectRetain();
    v223 = v94;
    result = swift_bridgeObjectRetain();
    v95 = v254;
    v96 = v254;
  }
  else
  {
    swift_unknownObjectRetain();
    v92 = v255;
    specialized Rope._Node.subscript.getter(v255, (uint64_t)v91);
    v259 = v97;
    v223 = v98;
    result = swift_unknownObjectRelease();
    v91 = *(_BYTE **)(v39 + 64);
    v96 = *(_QWORD *)(v39 + 88);
    v95 = v254;
  }
  v241 = v72 + 1;
  v272 = v95;
  v273 = v92;
  v263 = (__int128 *)&v322;
  v230 = (uint64_t *)(v250 + 40);
  v274 = (_BYTE *)v71;
  v252 = v55;
  v260 = &v280;
LABEL_113:
  if (v95 != v96)
    goto LABEL_270;
  v238 = v96;
  if (v71)
  {
    v99 = *(_QWORD *)(v71 + 24 * (((unint64_t)v255 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v99 = specialized Rope._Node.subscript.getter(v255, (uint64_t)v91);
  }
  v100 = v240;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v243, v99))
    goto LABEL_271;
  v229 = v243 + v99;
  *(_QWORD *)&v253 = v71;
  if (v91)
  {
    v101 = ((-15 << ((4 * v91[18] + 8) & 0x3C)) - 1) & (unint64_t)v91[18] | ((unint64_t)*((unsigned __int16 *)v91 + 8) << ((4 * v91[18] + 8) & 0x3C));
    result = swift_unknownObjectRetain();
  }
  else
  {
    v101 = 0;
  }
  v102 = v255;
  v104 = v259;
  v103 = (uint64_t)v260;
  if ((unint64_t)v255 >= v101)
    goto LABEL_272;
  v105 = v253;
  if ((_QWORD)v253)
  {
    v106 = (4 * *(_BYTE *)(v253 + 18) + 8) & 0x3C;
    v107 = (((unint64_t)v255 >> v106) & 0xF) + 1;
    if (v107 < *(unsigned __int16 *)(v253 + 16))
    {
      v239 = (v107 << v106) | ((-15 << v106) - 1) & v255;
      result = swift_unknownObjectRelease_n();
LABEL_128:
      v91 = v274;
      goto LABEL_137;
    }
  }
  v108 = v91[18];
  v109 = (4 * v108 + 8) & 0x3C;
  v110 = ((unint64_t)v255 >> v109) & 0xF;
  *(_QWORD *)&v320 = v110;
  if (v108)
  {
    swift_unknownObjectRetain();
    v104 = v259;
    v111 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v91 + 24), (uint64_t *)&v320, (uint64_t)&v272, (uint64_t)v91, v108);
    result = swift_unknownObjectRelease();
    v105 = v253;
    if ((v111 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v239 = v273;
      v103 = (uint64_t)v260;
      goto LABEL_128;
    }
    goto LABEL_132;
  }
  v112 = v110 + 1;
  if (v110 + 1 >= *((unsigned __int16 *)v91 + 8))
  {
    v105 = v253;
LABEL_132:
    if (v91)
    {
      v113 = v91[18];
      v114 = *((unsigned __int16 *)v91 + 8);
      result = swift_unknownObjectRelease_n();
      v115 = (4 * v113 + 8) & 0x3C;
      v116 = ((-15 << v115) - 1) & v113;
      v105 = v253;
      v239 = v116 | (v114 << v115);
    }
    else
    {
      v239 = 0;
    }
    v91 = 0;
    v272 = v238;
    goto LABEL_136;
  }
  result = swift_unknownObjectRelease_n();
  v239 = (v112 << v109) | ((-15 << v109) - 1) & v102;
  v105 = v253;
LABEL_136:
  v103 = (uint64_t)v260;
LABEL_137:
  if (v241 != v231)
  {
    if (v272 != *(_QWORD *)(v39 + 88))
    {
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
      goto LABEL_276;
    }
    *(_QWORD *)&v254 = v272;
    v228 = v91;
    if (v91)
    {
      v117 = &v91[24 * ((v239 >> ((4 * v91[18] + 8) & 0x3C)) & 0xF)];
      v118 = *((_QWORD *)v117 + 4);
      v119 = *((_QWORD *)v117 + 5);
      swift_bridgeObjectRetain();
      v232 = v119;
      swift_bridgeObjectRetain();
    }
    else
    {
      v120 = *(_QWORD *)(v39 + 64);
      swift_unknownObjectRetain();
      v104 = v259;
      v103 = (uint64_t)v260;
      specialized Rope._Node.subscript.getter(v239, v120);
      v232 = v121;
      v118 = v122;
      swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRetain();
    v123 = 0;
    v124 = v230;
    v264 = v118;
    while (1)
    {
      v126 = v123 + 1;
      if (__OFADD__(v123, 1))
      {
        __break(1u);
LABEL_260:
        __break(1u);
        goto LABEL_261;
      }
      v127 = *(v124 - 1);
      v128 = *v124;
      if (*(_QWORD *)(v104 + 16))
      {
        swift_bridgeObjectRetain_n();
        v129 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
        if ((v130 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v104 + 56) + 72 * v129, (uint64_t)&v287);
        }
        else
        {
          v291 = 0;
          v289 = 0u;
          v290 = 0u;
          v287 = 0u;
          v288 = 0u;
        }
        swift_bridgeObjectRelease();
        v118 = v264;
        if (!*(_QWORD *)(v264 + 16))
        {
LABEL_152:
          v286 = 0;
          v284 = 0u;
          v285 = 0u;
          v282 = 0u;
          v283 = 0u;
          goto LABEL_159;
        }
      }
      else
      {
        v291 = 0;
        v289 = 0u;
        v290 = 0u;
        v287 = 0u;
        v288 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v118 + 16))
          goto LABEL_152;
      }
      swift_bridgeObjectRetain();
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
      if ((v132 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v118 + 56) + 72 * v131, (uint64_t)&v282);
      }
      else
      {
        v286 = 0;
        v284 = 0u;
        v285 = 0u;
        v282 = 0u;
        v283 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_159:
      swift_bridgeObjectRelease();
      v91 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v287, (uint64_t)&v272, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v282, v103, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v275)
      {
        if (v281)
          goto LABEL_176;
        outlined destroy of Any?((uint64_t)&v272, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v282, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?((uint64_t)&v287, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_146;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v272, (uint64_t)v270, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v281)
        goto LABEL_175;
      v133 = *(_OWORD *)(v103 + 48);
      v267 = *(_OWORD *)(v103 + 32);
      v268 = v133;
      v269 = *(_QWORD *)(v103 + 64);
      v134 = *(_OWORD *)(v103 + 16);
      v265 = *(_OWORD *)v103;
      v266 = v134;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v270, (uint64_t)v328);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v265, (uint64_t)v327);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v328, (uint64_t)&v320, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v327, (uint64_t)v263, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v321)
      {
        if (!v323)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v320);
LABEL_144:
          v125 = 0;
          goto LABEL_145;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v320, (uint64_t)v324);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v263, (uint64_t)v319);
        v135 = v325;
        v257 = v326;
        v256 = __swift_project_boxed_opaque_existential_1(v324, v325);
        v262 = v222;
        v136 = *(_QWORD *)(v135 - 8);
        MEMORY[0x1E0C80A78](v256);
        v138 = (char *)v222 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v319, (uint64_t)v318);
        v139 = type metadata accessor for Optional();
        *(_QWORD *)&v261 = v222;
        v140 = *(_QWORD *)(v139 - 8);
        MEMORY[0x1E0C80A78](v139);
        v142 = (char *)v222 - v141;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v143 = swift_dynamicCast();
        v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
        if (v143)
        {
          v144(v142, 0, 1, v135);
          (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v138, v142, v135);
          v125 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v135);
        }
        else
        {
          v144(v142, 1, 1, v135);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v142, v139);
          v125 = 0;
        }
        v55 = v252;
        v104 = v259;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v319);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v324);
        v103 = (uint64_t)v260;
      }
      else
      {
        if (v323)
        {
          outlined destroy of Any?((uint64_t)v263, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_144;
        }
        v125 = 1;
      }
LABEL_145:
      outlined destroy of Any?((uint64_t)v327, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v328, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v265);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v270);
      outlined destroy of Any?((uint64_t)&v272, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v282, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v287, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v125 & 1) == 0)
        goto LABEL_177;
LABEL_146:
      v124 += 2;
      ++v123;
      v118 = v264;
      if (v126 == v55)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v39 = (uint64_t)v258;
        v91 = (_BYTE *)v258[8];
        v96 = v258[11];
        v243 = v229;
        v95 = v254;
        v272 = v254;
        v273 = v239;
        v71 = (uint64_t)v228;
        *(_QWORD *)&v255 = v239;
        v274 = v228;
        v31 = __OFADD__(v241++, 1);
        if (!v31)
          goto LABEL_113;
        __break(1u);
LABEL_175:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v270);
LABEL_176:
        outlined destroy of Any?((uint64_t)&v272, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v282, (uint64_t *)v91);
        outlined destroy of Any?((uint64_t)&v287, (uint64_t *)v91);
LABEL_177:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v39 = (uint64_t)v258;
        v100 = v240;
        v105 = v253;
        v102 = v255;
        goto LABEL_178;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_178:
  if (v238 != *(_QWORD *)(v39 + 88))
    goto LABEL_286;
  if (v105)
  {
    v145 = *(_QWORD *)(v105 + 24 * ((v102 >> ((4 * *(_BYTE *)(v105 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v146 = *(_QWORD *)(v39 + 64);
    swift_unknownObjectRetain();
    v145 = specialized Rope._Node.subscript.getter(v102, v146);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v147 = v243 + v145;
  if (__OFADD__(v243, v145))
    goto LABEL_287;
  v148 = v233;
  v149 = v233[1];
  v328[0] = *v233;
  v328[1] = v149;
  v328[2] = v233[2];
  BigString.utf8.getter();
  result = v224;
  if (__OFSUB__(v147, v224 >> 11))
  {
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
    goto LABEL_295;
  }
  v150 = BigString.UTF8View.index(_:offsetBy:)();
  v152 = v151;
  v153 = v148;
  v155 = v154;
  v157 = v156;
  result = outlined release of Locale((uint64_t)v318);
  v158 = v227;
  if (v226 >= v150 >> 10)
    v159 = v150;
  else
    v159 = v251;
  if (v226 >= v150 >> 10)
  {
    v160 = v155;
  }
  else
  {
    v152 = v237;
    v160 = v236;
  }
  if (v226 < v150 >> 10)
    v157 = v235;
  v161 = *v153;
  v162 = v153[1];
  v327[2] = v153[2];
  v327[1] = v162;
  v327[0] = v161;
  if (v159 >> 10 < v227)
    goto LABEL_289;
  *(_QWORD *)&v282 = v244;
  *((_QWORD *)&v282 + 1) = v247;
  *(_QWORD *)&v283 = v246;
  *((_QWORD *)&v283 + 1) = v245;
  *(_QWORD *)&v284 = v159;
  *((_QWORD *)&v284 + 1) = v152;
  *(_QWORD *)&v285 = v160;
  *((_QWORD *)&v285 + 1) = v157;
  v163 = *(_QWORD *)(v100 + 16);
  if (!v163 || v227 == v159 >> 10)
  {
    v263 = v157;
    v264 = v160;
LABEL_208:
    swift_release();
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v292);
    v169 = v234;
    goto LABEL_209;
  }
  v164 = v152;
  outlined retain of Locale((uint64_t)v327);
  swift_bridgeObjectRetain();
  v165 = 40;
  v166 = v163;
  while (*(_QWORD *)(v100 + v165))
  {
    swift_bridgeObjectRelease();
    v165 += 16;
    if (!--v166)
    {
      swift_bridgeObjectRelease();
      v152 = v164;
      goto LABEL_203;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v319);
  v270[0] = v244;
  v270[1] = v247;
  v270[2] = v246;
  v270[3] = v245;
  v270[4] = v244;
  v270[5] = v247;
  v270[6] = v246;
  v270[7] = v245;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, v270, &v272);
  result = outlined release of Locale((uint64_t)&v320);
  v152 = v164;
  if (v279 != (__int128 *)2)
  {
    v159 = v276;
    if (v158 > v276 >> 10)
      goto LABEL_303;
    v152 = v277;
    v160 = v278;
    v157 = v279;
  }
LABEL_203:
  *(_QWORD *)&v265 = v244;
  *((_QWORD *)&v265 + 1) = v247;
  *(_QWORD *)&v266 = v246;
  *((_QWORD *)&v266 + 1) = v245;
  *(_QWORD *)&v267 = v159;
  *((_QWORD *)&v267 + 1) = v152;
  *(_QWORD *)&v268 = v160;
  *((_QWORD *)&v268 + 1) = v157;
  v167 = *(_QWORD *)(v100 + 16);
  v263 = v157;
  v264 = v160;
  if (!v167)
  {
LABEL_207:
    outlined release of Locale((uint64_t)v327);
    goto LABEL_208;
  }
  v168 = 40;
  while (!*(_QWORD *)(v100 + v168))
  {
    v168 += 16;
    if (!--v167)
      goto LABEL_207;
  }
  v206 = v152;
  swift_bridgeObjectRetain();
  v207 = (unint64_t *)(v100 + 40);
  v208 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v209 = *v207;
    if (*v207)
    {
      v210 = *(v207 - 1);
      if ((v209 & 0x2000000000000000) != 0 ? HIBYTE(v209) & 0xF : v210 & 0xFFFFFFFFFFFFLL)
      {
        if ((v209 & 0x1000000000000000) != 0)
        {
          v212 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v209 & 0x2000000000000000) != 0)
          {
            v272 = *(v207 - 1);
            v273 = v209 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v210 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            swift_bridgeObjectRetain();
          }
          v212 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v208 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v208 + 2) + 1, 1, v208);
        v214 = *((_QWORD *)v208 + 2);
        v213 = *((_QWORD *)v208 + 3);
        if (v214 >= v213 >> 1)
          v208 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v213 > 1), v214 + 1, 1, v208);
        *((_QWORD *)v208 + 2) = v214 + 1;
        *(_DWORD *)&v208[4 * v214 + 32] = v212;
      }
    }
    v207 += 2;
    --v163;
  }
  while (v163);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v324);
  v215 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v208);
  v217 = v216;
  v219 = v218;
  v221 = v220;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v272);
  outlined release of Locale((uint64_t)v327);
  swift_release();
  result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v292);
  v169 = v234;
  v152 = v206;
  if (v221 != (__int128 *)2)
  {
    if (v158 > v215 >> 10)
    {
LABEL_304:
      __break(1u);
      return result;
    }
    v159 = v215;
    v152 = v217;
    v263 = v221;
    v264 = v219;
  }
LABEL_209:
  v170 = v169[27];
  if (v159 >> 10 < v170 >> 10)
    goto LABEL_290;
  v171 = v169[28];
  v260 = (uint64_t *)v169[29];
  *(_QWORD *)&v261 = v171;
  v259 = v169[30];
  v169[27] = v159;
  v169[28] = v152;
  v262 = v152;
  v172 = v263;
  v169[29] = v264;
  v169[30] = v172;
  v173 = (*(uint64_t (**)(_QWORD, _QWORD))(v242[5] + 24))(v242[2], v242[5]);
  v175 = v249;
  if (*(_QWORD *)(v249 + 16))
  {
    v176 = specialized __RawDictionaryStorage.find<A>(_:)(v173, v174);
    v177 = v248;
    if ((v178 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v175 + 56) + 72 * v176, (uint64_t)&v287);
    }
    else
    {
      v291 = 0;
      v289 = 0u;
      v290 = 0u;
      v287 = 0u;
      v288 = 0u;
    }
  }
  else
  {
    v291 = 0;
    v289 = 0u;
    v290 = 0u;
    v287 = 0u;
    v288 = 0u;
    v177 = v248;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v288 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v287, (uint64_t)v271);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v287);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v177, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v287, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v180 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 56))(v177, 1, 1, v180);
  }
  v181 = (*(uint64_t (**)(_QWORD, _QWORD))(v242[6] + 24))(v242[3], v242[6]);
  v183 = v249;
  if (*(_QWORD *)(v249 + 16) && (v184 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v182), (v185 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v183 + 56) + 72 * v184, (uint64_t)&v287);
  }
  else
  {
    v291 = 0;
    v289 = 0u;
    v290 = 0u;
    v287 = 0u;
    v288 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v271[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v271[1] = type metadata accessor for Optional();
  v186 = v242[7];
  v187 = v242[4];
  swift_getAssociatedTypeWitness();
  v271[2] = type metadata accessor for Optional();
  v271[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v188 = (int *)swift_getTupleTypeMetadata();
  v189 = v248 + v188[12];
  if (*((_QWORD *)&v288 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v287, (uint64_t)v271);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v190 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v287);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v190 - 8) + 56))(v189, 0, 1, v190);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v287, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v191 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 56))(v189, 1, 1, v191);
  }
  v192 = (*(uint64_t (**)(uint64_t, uint64_t))(v186 + 24))(v187, v186);
  v194 = v249;
  if (*(_QWORD *)(v249 + 16) && (v195 = specialized __RawDictionaryStorage.find<A>(_:)(v192, v193), (v196 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v194 + 56) + 72 * v195, (uint64_t)&v287);
  }
  else
  {
    v291 = 0;
    v289 = 0u;
    v290 = 0u;
    v287 = 0u;
    v288 = 0u;
  }
  swift_bridgeObjectRelease();
  v197 = v248;
  v198 = v248 + v188[16];
  if (*((_QWORD *)&v288 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v287, (uint64_t)v271);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v199 = swift_getAssociatedTypeWitness();
    v197 = v248;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v287);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v199 - 8) + 56))(v198, 0, 1, v199);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v287, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v200 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v200 - 8) + 56))(v198, 1, 1, v200);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v201 = (unint64_t *)(v197 + v188[20]);
  v202 = v261;
  *v201 = v170;
  v201[1] = v202;
  v203 = v259;
  v201[2] = (unint64_t)v260;
  v201[3] = v203;
  v204 = v262;
  v201[4] = v159;
  v201[5] = (unint64_t)v204;
  v205 = v263;
  v201[6] = v264;
  v201[7] = (unint64_t)v205;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v188 - 1) + 56))(v197, 0, 1, v188);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  _OWORD v20[12];
  uint64_t v21;

  v13 = *(_OWORD *)(v8 + 176);
  v20[10] = *(_OWORD *)(v8 + 160);
  v20[11] = v13;
  v21 = *(_QWORD *)(v8 + 192);
  v14 = *(_OWORD *)(v8 + 112);
  v20[6] = *(_OWORD *)(v8 + 96);
  v20[7] = v14;
  v15 = *(_OWORD *)(v8 + 144);
  v20[8] = *(_OWORD *)(v8 + 128);
  v20[9] = v15;
  v16 = *(_OWORD *)(v8 + 48);
  v20[2] = *(_OWORD *)(v8 + 32);
  v20[3] = v16;
  v17 = *(_OWORD *)(v8 + 80);
  v20[4] = *(_OWORD *)(v8 + 64);
  v20[5] = v17;
  v18 = *(_OWORD *)(v8 + 16);
  v20[0] = *(_OWORD *)v8;
  v20[1] = v18;
  outlined retain of AttributedString.Runs((uint64_t)v20);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice4.init(runs:)(v8, a1, a2, a3, a5, a6, a7, a4, a8).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice4.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  __int128 v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  char v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  int v143;
  void (*v144)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t AssociatedTypeWitness;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  char *v221;
  unint64_t v222;
  uint64_t v223;
  int v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[4];
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  unint64_t v242;
  int64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 *v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  unint64_t v265;
  uint64_t v266;
  __int128 v267;
  __int128 v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  char *v273;
  _QWORD *v274;
  __int128 v275;
  uint64_t *v276;
  uint64_t v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  _QWORD v283[9];
  _QWORD v284[5];
  unint64_t v285;
  uint64_t v286;
  _BYTE *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _BYTE v331[48];
  _BYTE v332[48];
  __int128 v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD v337[3];
  uint64_t v338;
  uint64_t v339;
  _OWORD v340[3];
  _OWORD v341[13];

  v4 = *(_QWORD *)(v2 + 216);
  v5 = v4 >> 10;
  v265 = *(_QWORD *)(v2 + 168);
  if (v4 >> 10 == v265 >> 10)
  {
    swift_getAssociatedTypeWitness();
    v305 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(_QWORD *)&v306 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((_QWORD *)&v306 + 1) = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(_QWORD *)&v307 = type metadata accessor for Optional();
    *((_QWORD *)&v307 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(a2, 1, 1, TupleTypeMetadata);
  }
  v250 = (_QWORD *)result;
  v7 = *(_QWORD *)v2;
  v8 = *(_OWORD *)(v2 + 24);
  v324 = *(_OWORD *)(v2 + 8);
  v325 = v8;
  v9 = *(_OWORD *)(v2 + 56);
  v326 = *(_OWORD *)(v2 + 40);
  v327 = v9;
  if (v5 >= v265 >> 10)
    goto LABEL_277;
  v10 = (_QWORD *)(*(_QWORD *)(v2 + 136) >> 10);
  if (v5 < (unint64_t)v10)
    goto LABEL_277;
  v271 = *(_QWORD *)(v2 + 136);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(v7 + 80);
  v13 = v4 >> 11;
  if (v11)
    v14 = *(_QWORD *)(v7 + 80);
  else
    v14 = 0;
  if (v14 < v13)
    goto LABEL_278;
  v275 = *(_OWORD *)(v2 + 72);
  v15 = *(_OWORD *)(v2 + 88);
  v16 = *(_OWORD *)(v2 + 104);
  v17 = *(_OWORD *)(v2 + 120);
  v270 = *(_QWORD *)(v2 + 144);
  v277 = *(_QWORD *)(v2 + 152);
  v276 = *(uint64_t **)(v2 + 160);
  v254 = *(_QWORD *)(v2 + 176);
  v253 = *(_QWORD *)(v2 + 184);
  v18 = *(_QWORD *)(v2 + 192);
  v251 = (_QWORD *)v2;
  v252 = v18;
  v263 = *(_QWORD *)(v2 + 224);
  v262 = *(_QWORD *)(v2 + 232);
  v19 = *(_QWORD *)(v2 + 240);
  v260 = v4;
  v261 = v19;
  v20 = *(_QWORD *)(v7 + 72);
  v21 = *(_QWORD *)(v7 + 88);
  v266 = a2;
  v272 = v7;
  v273 = (char *)(v4 >> 11);
  v239 = v265 >> 10;
  v240 = v4 >> 10;
  v267 = v16;
  v268 = v15;
  v264 = v17;
  v269 = v10;
  v274 = (_QWORD *)v21;
  if (!v11 || v13 >= v12 || !*(_WORD *)(v11 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v22 = v20;
    v34 = specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    v26 = 0;
    v13 = 0;
    v35 = 0;
    if (!v11)
      goto LABEL_32;
    goto LABEL_31;
  }
  v22 = v20;
  v23 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain();
    v24 = v11;
    while (1)
    {
      v27 = *(unsigned __int16 *)(v24 + 16);
      if (!*(_WORD *)(v24 + 16))
        break;
      v28 = *(_QWORD *)(v24 + 40);
      v29 = __OFSUB__(v13, v28);
      v30 = v13 - v28;
      if (v29)
        goto LABEL_269;
      if (__OFADD__(v30, 1))
        goto LABEL_270;
      if (v30 + 1 < 1)
      {
        v27 = 0;
        goto LABEL_16;
      }
      if ((_DWORD)v27 == 1)
      {
        v13 = v30;
        break;
      }
      v31 = (uint64_t *)(v24 + 64);
      v32 = 1;
      while (1)
      {
        v33 = *v31;
        v31 += 3;
        v13 = v30 - v33;
        if (__OFSUB__(v30, v33))
          goto LABEL_263;
        if (__OFADD__(v13, 1))
        {
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
          goto LABEL_267;
        }
        if (v13 + 1 < 1)
          break;
        ++v32;
        v30 = v13;
        if (v27 == v32)
          goto LABEL_15;
      }
      v27 = v32;
      v13 = v30;
LABEL_16:
      v25 = (4 * *(_BYTE *)(v24 + 18) + 8) & 0x3C;
      v23 = ((-15 << v25) - 1) & v23 | (v27 << v25);
      v26 = *(_QWORD *)(v24 + 24 + 24 * v27);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v24 = v26;
      if (!*(_BYTE *)(v26 + 18))
        goto LABEL_73;
    }
LABEL_15:
    if (!v13)
      goto LABEL_16;
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
    goto LABEL_276;
  }
  swift_unknownObjectRetain_n();
  result = swift_retain();
  v26 = v11;
LABEL_73:
  v73 = *(unsigned __int16 *)(v26 + 16);
  if (!*(_WORD *)(v26 + 16))
  {
    v7 = v272;
LABEL_95:
    if (v13)
    {
LABEL_300:
      __break(1u);
      goto LABEL_301;
    }
    goto LABEL_96;
  }
  v74 = *(_QWORD *)(v26 + 24);
  v29 = __OFSUB__(v13, v74);
  v75 = v13 - v74;
  v7 = v272;
  if (v29)
  {
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }
  if (__OFADD__(v75, 1))
  {
LABEL_303:
    __break(1u);
    goto LABEL_304;
  }
  if (v75 + 1 < 1)
  {
    v73 = 0;
  }
  else
  {
    if ((_DWORD)v73 == 1)
    {
      v13 = v75;
      goto LABEL_95;
    }
    v79 = (uint64_t *)(v26 + 48);
    v80 = 1;
    while (1)
    {
      v81 = *v79;
      v79 += 3;
      v13 = v75 - v81;
      if (__OFSUB__(v75, v81))
        goto LABEL_294;
      if (__OFADD__(v13, 1))
        goto LABEL_295;
      if (v13 + 1 < 1)
        break;
      ++v80;
      v75 = v13;
      if (v73 == v80)
        goto LABEL_95;
    }
    v73 = v80;
    v13 = v75;
  }
LABEL_96:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v34 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v73 << 8);
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v274, v34, v26, v11, v22);
  swift_unknownObjectRelease_n();
  v35 = v13;
LABEL_32:
  v36 = *(_OWORD *)(v7 + 32);
  v341[9] = *(_OWORD *)(v7 + 16);
  v341[10] = v36;
  v341[11] = *(_OWORD *)(v7 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v35))
  {
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
  v37 = BigString.UTF8View.index(_:offsetBy:)();
  result = outlined release of Locale((uint64_t)&v328);
  if (v274 != *(_QWORD **)(v7 + 88))
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }
  if (v26)
  {
    v38 = (_QWORD *)(v26 + 24 * ((v34 >> ((4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C)) & 0xF));
    v40 = v38[3];
    v39 = v38[4];
    v41 = v38[5];
    swift_retain();
    v248 = v39;
    swift_bridgeObjectRetain();
    v238 = v41;
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v42 = *(_QWORD *)(v7 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    v40 = specialized Rope._Node.subscript.getter(v34, v42);
    v248 = v43;
    v238 = v44;
    result = swift_unknownObjectRelease();
  }
  if ((unint64_t)v269 >= v37 >> 10)
    v45 = v271;
  else
    v45 = v37;
  if (__OFADD__(v40, v37 >> 11))
    goto LABEL_281;
  if ((uint64_t)(v265 >> 11) >= (uint64_t)(v40 + (v37 >> 11)))
    v46 = v40 + (v37 >> 11);
  else
    v46 = v265 >> 11;
  v47 = *(_OWORD *)(v7 + 32);
  v341[6] = *(_OWORD *)(v7 + 16);
  v341[7] = v47;
  v249 = (__int128 *)(v7 + 16);
  v341[8] = *(_OWORD *)(v7 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(v46, v45 >> 11))
    goto LABEL_282;
  v48 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v329);
  result = swift_release();
  if (v48 >> 10 < v45 >> 10)
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }
  v306 = v324;
  v307 = v325;
  v308 = v326;
  v50 = v251[25];
  v49 = v251[26];
  v309 = v327;
  v310 = v275;
  v311 = v268;
  v312 = v267;
  v313 = v264;
  v305 = v7;
  v314 = v271;
  v315 = v270;
  v316 = v277;
  v317 = (uint64_t)v276;
  v318 = v265;
  v319 = v254;
  v320 = v253;
  v321 = v252;
  v322 = v50;
  v323 = v49;
  *(_QWORD *)&v264 = v50;
  v51 = *(_QWORD *)(v50 + 16);
  if (!v51)
  {
LABEL_284:
    __break(1u);
    goto LABEL_285;
  }
  v258 = v49;
  v52 = *(_QWORD *)(v7 + 64);
  v53 = *(_QWORD *)(v7 + 72);
  v55 = *(_QWORD *)(v7 + 80);
  v54 = *(_QWORD *)(v7 + 88);
  *(_QWORD *)&v267 = v51;
  v277 = v55;
  if (v52)
  {
    v56 = v273;
    if (v55 < (uint64_t)v273)
    {
LABEL_298:
      __break(1u);
      goto LABEL_299;
    }
    if (*(_WORD *)(v52 + 16) && (uint64_t)v273 < v55)
    {
      v246 = v54;
      v57 = *(unsigned __int8 *)(v52 + 18);
      if (*(_BYTE *)(v52 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v305);
        v58 = v273;
        v59 = v52;
        while (1)
        {
          v62 = *(unsigned __int16 *)(v59 + 16);
          if (!*(_WORD *)(v59 + 16))
            goto LABEL_54;
          v63 = *(_QWORD *)(v59 + 40);
          v29 = __OFSUB__(v58, v63);
          v64 = &v58[-v63];
          if (v29)
            goto LABEL_271;
          if (__OFADD__(v64, 1))
            goto LABEL_272;
          if ((uint64_t)(v64 + 1) < 1)
          {
            v62 = 0;
          }
          else
          {
            if ((_DWORD)v62 == 1)
            {
              v58 = v64;
LABEL_54:
              if (v58)
                goto LABEL_268;
              goto LABEL_55;
            }
            v65 = (uint64_t *)(v59 + 64);
            v66 = 1;
            while (1)
            {
              v67 = *v65;
              v65 += 3;
              v58 = &v64[-v67];
              if (__OFSUB__(v64, v67))
                goto LABEL_265;
              if (__OFADD__(v58, 1))
                goto LABEL_266;
              if ((uint64_t)(v58 + 1) < 1)
                break;
              ++v66;
              v64 = v58;
              if (v62 == v66)
                goto LABEL_54;
            }
            v62 = v66;
            v58 = v64;
          }
LABEL_55:
          v60 = (4 * *(_BYTE *)(v59 + 18) + 8) & 0x3C;
          v57 = ((-15 << v60) - 1) & v57 | (v62 << v60);
          v61 = *(_QWORD *)(v59 + 24 + 24 * v62);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v59 = v61;
          if (!*(_BYTE *)(v61 + 18))
            goto LABEL_80;
        }
      }
      swift_unknownObjectRetain_n();
      swift_retain();
      result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v305);
      v58 = v273;
      v61 = v52;
LABEL_80:
      v76 = *(unsigned __int16 *)(v61 + 16);
      *(_QWORD *)&v268 = v61;
      if ((_DWORD)v76)
      {
        v77 = *(_QWORD *)(v61 + 24);
        v29 = __OFSUB__(v58, v77);
        v78 = &v58[-v77];
        v51 = v267;
        if (v29)
        {
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
          goto LABEL_307;
        }
        if (__OFADD__(v78, 1))
          goto LABEL_305;
        if ((uint64_t)(v78 + 1) < 1)
        {
          v76 = 0;
        }
        else
        {
          if ((_DWORD)v76 == 1)
          {
            v58 = v78;
            goto LABEL_102;
          }
          v82 = (uint64_t *)(v268 + 48);
          v83 = 1;
          while (1)
          {
            v84 = *v82;
            v82 += 3;
            v58 = &v78[-v84];
            if (__OFSUB__(v78, v84))
              goto LABEL_296;
            if (__OFADD__(v58, 1))
              goto LABEL_297;
            if ((uint64_t)(v58 + 1) < 1)
              break;
            ++v83;
            v78 = v58;
            if (v76 == v83)
              goto LABEL_102;
          }
          v76 = v83;
          v58 = v78;
        }
LABEL_103:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v85 = v57 & 0xFFFFFFFFFFFFF0FFLL;
        v69 = v268;
        v68 = v85 | (v76 << 8);
        v54 = v246;
        v56 = v273;
        goto LABEL_71;
      }
      v51 = v267;
LABEL_102:
      if (v58)
      {
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }
      goto LABEL_103;
    }
  }
  else
  {
    v56 = v273;
    if (v260 >= 0x800)
    {
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v305);
  v68 = specialized Rope._endPath.getter(v52);
  result = swift_unknownObjectRelease();
  v69 = 0;
  v58 = 0;
  if (v52)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v70 = v53;
    v71 = v54;
    v72 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v54, v68, v69, v52, v70);
    result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }
  v71 = v54;
  v72 = 0;
LABEL_105:
  v259 = v56 - v58;
  if (__OFSUB__(v56, v58))
  {
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }
  v86 = v249[1];
  v341[3] = *v249;
  v341[4] = v86;
  v341[5] = v249[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v58))
  {
LABEL_286:
    __break(1u);
    goto LABEL_287;
  }
  v237 = BigString.UTF8View.index(_:offsetBy:)();
  v88 = v87;
  v235[2] = v90;
  v235[3] = v89;
  result = outlined release of Locale((uint64_t)&v330);
  v245 = v275;
  if (v72 >= (uint64_t)v275)
  {
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  if (v71 != *(_QWORD *)(v272 + 88))
  {
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  v235[1] = v88;
  v91 = *(_BYTE **)(v272 + 64);
  if (v69)
  {
    v92 = v69 + 24 * ((v68 >> ((4 * *(_BYTE *)(v69 + 18) + 8) & 0x3C)) & 0xF);
    v93 = *(_QWORD *)(v92 + 40);
    v271 = *(_QWORD *)(v92 + 32);
    swift_bridgeObjectRetain();
    v236 = v93;
    result = swift_bridgeObjectRetain();
    v94 = v71;
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v68, (uint64_t)v91);
    v271 = v95;
    v236 = v96;
    result = swift_unknownObjectRelease();
    v91 = *(_BYTE **)(v272 + 64);
    v94 = *(_QWORD *)(v272 + 88);
  }
  v257 = v72 + 1;
  v276 = &v293;
  v285 = v71;
  v286 = v68;
  *(_QWORD *)&v275 = &v335;
  v244 = (uint64_t *)(v264 + 40);
  v287 = (_BYTE *)v69;
  v97 = v68;
  v98 = v272;
LABEL_113:
  if (v71 != v94)
    goto LABEL_273;
  v255 = v94;
  if (v69)
  {
    v99 = *(_QWORD *)(v69 + 24 * ((v97 >> ((4 * *(_BYTE *)(v69 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v99 = specialized Rope._Node.subscript.getter(v97, (uint64_t)v91);
  }
  v100 = v271;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v259, v99))
    goto LABEL_274;
  v243 = v259 + v99;
  *(_QWORD *)&v268 = v69;
  if (!v91)
    goto LABEL_275;
  v101 = ((-15 << ((4 * v91[18] + 8) & 0x3C)) - 1) & (unint64_t)v91[18] | ((unint64_t)*((unsigned __int16 *)v91 + 8) << ((4 * v91[18] + 8) & 0x3C));
  result = swift_unknownObjectRetain();
  if (v97 >= v101)
    goto LABEL_275;
  v102 = v268;
  v256 = v97;
  if ((_QWORD)v268)
  {
    v103 = (4 * *(_BYTE *)(v268 + 18) + 8) & 0x3C;
    v104 = ((v97 >> v103) & 0xF) + 1;
    if (v104 < *(unsigned __int16 *)(v268 + 16))
    {
      v105 = (v104 << v103) | ((-15 << v103) - 1) & v97;
      result = swift_unknownObjectRelease_n();
LABEL_128:
      v91 = v287;
      goto LABEL_132;
    }
  }
  v106 = v91[18];
  v107 = (4 * v106 + 8) & 0x3C;
  v108 = (v97 >> v107) & 0xF;
  *(_QWORD *)&v333 = v108;
  if (v106)
  {
    swift_unknownObjectRetain();
    v109 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v91 + 24), (uint64_t *)&v333, (uint64_t)&v285, (uint64_t)v91, v106);
    swift_unknownObjectRelease();
    v102 = v268;
    if ((v109 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v105 = v286;
      goto LABEL_128;
    }
  }
  else
  {
    v110 = v108 + 1;
    if (v108 + 1 < (unint64_t)*((unsigned __int16 *)v91 + 8))
    {
      result = swift_unknownObjectRelease_n();
      v111 = v110 << v107;
      v97 = v256;
      v105 = v111 | ((-15 << v107) - 1) & v256;
      v102 = v268;
      goto LABEL_132;
    }
  }
  v112 = v91[18];
  v113 = *((unsigned __int16 *)v91 + 8);
  result = swift_unknownObjectRelease_n();
  v114 = (4 * v112 + 8) & 0x3C;
  v115 = ((-15 << v114) - 1) & v112;
  v102 = v268;
  v116 = v113 << v114;
  v97 = v256;
  v105 = v115 | v116;
  v91 = 0;
  v285 = v255;
LABEL_132:
  if (v257 != v245)
  {
    if (v285 != *(_QWORD *)(v98 + 88))
    {
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
      goto LABEL_279;
    }
    v246 = v285;
    v241 = v91;
    v242 = v105;
    if (v91)
    {
      v117 = &v91[24 * ((v105 >> ((4 * v91[18] + 8) & 0x3C)) & 0xF)];
      v118 = *((_QWORD *)v117 + 4);
      v119 = *((_QWORD *)v117 + 5);
      swift_bridgeObjectRetain();
      v247 = v119;
      swift_bridgeObjectRetain();
    }
    else
    {
      v120 = *(_QWORD *)(v98 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v105, v120);
      v247 = v121;
      v118 = v122;
      swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRetain();
    v123 = 0;
    v124 = v244;
    v277 = v118;
    while (1)
    {
      v126 = v123 + 1;
      if (__OFADD__(v123, 1))
      {
        __break(1u);
LABEL_263:
        __break(1u);
        goto LABEL_264;
      }
      v127 = *(v124 - 1);
      v128 = *v124;
      if (*(_QWORD *)(v100 + 16))
      {
        swift_bridgeObjectRetain_n();
        v129 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
        if ((v130 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v100 + 56) + 72 * v129, (uint64_t)&v300);
        }
        else
        {
          v304 = 0;
          v302 = 0u;
          v303 = 0u;
          v300 = 0u;
          v301 = 0u;
        }
        swift_bridgeObjectRelease();
        v118 = v277;
        if (!*(_QWORD *)(v277 + 16))
        {
LABEL_147:
          v299 = 0;
          v297 = 0u;
          v298 = 0u;
          v295 = 0u;
          v296 = 0u;
          goto LABEL_154;
        }
      }
      else
      {
        v304 = 0;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v118 + 16))
          goto LABEL_147;
      }
      swift_bridgeObjectRetain();
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
      if ((v132 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v118 + 56) + 72 * v131, (uint64_t)&v295);
      }
      else
      {
        v299 = 0;
        v297 = 0u;
        v298 = 0u;
        v295 = 0u;
        v296 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_154:
      swift_bridgeObjectRelease();
      v91 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v300, (uint64_t)&v285, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v295, (uint64_t)v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v288)
      {
        if (v294)
          goto LABEL_171;
        outlined destroy of Any?((uint64_t)&v285, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_141;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v285, (uint64_t)v283, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v294)
        goto LABEL_170;
      v133 = *((_OWORD *)v276 + 3);
      v280 = *((_OWORD *)v276 + 2);
      v281 = v133;
      v282 = v276[8];
      v134 = *((_OWORD *)v276 + 1);
      v278 = *(_OWORD *)v276;
      v279 = v134;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v283, (uint64_t)v341);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v278, (uint64_t)v340);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v341, (uint64_t)&v333, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v340, v275, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v334)
      {
        if (!v336)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v333);
LABEL_139:
          v125 = 0;
          goto LABEL_140;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v333, (uint64_t)v337);
        outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)v275, (uint64_t)v332);
        v135 = v338;
        v270 = v339;
        v269 = __swift_project_boxed_opaque_existential_1(v337, v338);
        v274 = v235;
        v136 = *(_QWORD *)(v135 - 8);
        MEMORY[0x1E0C80A78](v269);
        v138 = (char *)v235 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v332, (uint64_t)v331);
        v139 = type metadata accessor for Optional();
        v273 = (char *)v235;
        v140 = *(_QWORD *)(v139 - 8);
        MEMORY[0x1E0C80A78](v139);
        v142 = (char *)v235 - v141;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v143 = swift_dynamicCast();
        v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
        if (v143)
        {
          v144(v142, 0, 1, v135);
          (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v138, v142, v135);
          v125 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v135);
        }
        else
        {
          v144(v142, 1, 1, v135);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v142, v139);
          v125 = 0;
        }
        v100 = v271;
        v98 = v272;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v332);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v337);
        v51 = v267;
      }
      else
      {
        if (v336)
        {
          outlined destroy of Any?(v275, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_139;
        }
        v125 = 1;
      }
LABEL_140:
      outlined destroy of Any?((uint64_t)v340, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v341, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v278);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v283);
      outlined destroy of Any?((uint64_t)&v285, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v125 & 1) == 0)
        goto LABEL_172;
LABEL_141:
      v124 += 2;
      ++v123;
      v118 = v277;
      if (v126 == v51)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v91 = *(_BYTE **)(v98 + 64);
        v94 = *(_QWORD *)(v98 + 88);
        v97 = v242;
        v259 = v243;
        v71 = v246;
        v285 = v246;
        v286 = v242;
        v69 = (uint64_t)v241;
        v287 = v241;
        v29 = __OFADD__(v257++, 1);
        if (!v29)
          goto LABEL_113;
        __break(1u);
LABEL_170:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v283);
LABEL_171:
        outlined destroy of Any?((uint64_t)&v285, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v295, (uint64_t *)v91);
        outlined destroy of Any?((uint64_t)&v300, (uint64_t *)v91);
LABEL_172:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v102 = v268;
        v97 = v256;
        goto LABEL_173;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_173:
  if (v255 != *(_QWORD *)(v98 + 88))
    goto LABEL_289;
  if (v102)
  {
    v145 = *(_QWORD *)(v102 + 24 * ((v97 >> ((4 * *(_BYTE *)(v102 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v146 = *(_QWORD *)(v98 + 64);
    swift_unknownObjectRetain();
    v145 = specialized Rope._Node.subscript.getter(v97, v146);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v147 = v259 + v145;
  if (__OFADD__(v259, v145))
    goto LABEL_290;
  v148 = v249;
  v149 = v249[1];
  v341[0] = *v249;
  v341[1] = v149;
  v341[2] = v249[2];
  BigString.utf8.getter();
  result = v237;
  if (__OFSUB__(v147, v237 >> 11))
  {
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }
  v150 = BigString.UTF8View.index(_:offsetBy:)();
  v152 = v151;
  v153 = v148;
  v155 = v154;
  v157 = v156;
  result = outlined release of Locale((uint64_t)v331);
  v158 = v240;
  if (v239 >= v150 >> 10)
    v159 = v150;
  else
    v159 = v265;
  if (v239 >= v150 >> 10)
  {
    v160 = v155;
  }
  else
  {
    v152 = v254;
    v160 = v253;
  }
  if (v239 >= v150 >> 10)
    v161 = v157;
  else
    v161 = v252;
  v162 = *v153;
  v163 = v153[1];
  v340[2] = v153[2];
  v340[1] = v163;
  v340[0] = v162;
  if (v159 >> 10 < v240)
    goto LABEL_292;
  *(_QWORD *)&v295 = v260;
  *((_QWORD *)&v295 + 1) = v263;
  *(_QWORD *)&v296 = v262;
  *((_QWORD *)&v296 + 1) = v261;
  *(_QWORD *)&v297 = v159;
  *((_QWORD *)&v297 + 1) = v152;
  *(_QWORD *)&v298 = v160;
  *((_QWORD *)&v298 + 1) = v161;
  v164 = v258;
  v165 = *(_QWORD *)(v258 + 16);
  v277 = v161;
  if (!v165 || v240 == v159 >> 10)
  {
    v276 = (uint64_t *)v160;
LABEL_204:
    swift_release();
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v305);
    v173 = v250;
    v172 = v251;
    v174 = v248;
    v175 = v277;
    goto LABEL_205;
  }
  v166 = v152;
  outlined retain of Locale((uint64_t)v340);
  swift_bridgeObjectRetain();
  v167 = 40;
  v168 = v165;
  while (*(_QWORD *)(v164 + v167))
  {
    swift_bridgeObjectRelease();
    v167 += 16;
    if (!--v168)
    {
      swift_bridgeObjectRelease();
      v152 = v166;
      v169 = v277;
      goto LABEL_199;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v332);
  v283[0] = v260;
  v283[1] = v263;
  v283[2] = v262;
  v283[3] = v261;
  v283[4] = v260;
  v283[5] = v263;
  v283[6] = v262;
  v283[7] = v261;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, v283, &v285);
  result = outlined release of Locale((uint64_t)&v333);
  v152 = v166;
  v169 = v277;
  if (v292 != 2)
  {
    v159 = v289;
    if (v158 > v289 >> 10)
      goto LABEL_306;
    v152 = v290;
    v160 = v291;
    v169 = v292;
  }
LABEL_199:
  *(_QWORD *)&v278 = v260;
  *((_QWORD *)&v278 + 1) = v263;
  *(_QWORD *)&v279 = v262;
  *((_QWORD *)&v279 + 1) = v261;
  *(_QWORD *)&v280 = v159;
  *((_QWORD *)&v280 + 1) = v152;
  *(_QWORD *)&v281 = v160;
  *((_QWORD *)&v281 + 1) = v169;
  v276 = (uint64_t *)v160;
  v277 = v169;
  v170 = *(_QWORD *)(v164 + 16);
  if (!v170)
  {
LABEL_203:
    outlined release of Locale((uint64_t)v340);
    goto LABEL_204;
  }
  v171 = 40;
  while (!*(_QWORD *)(v164 + v171))
  {
    v171 += 16;
    if (!--v170)
      goto LABEL_203;
  }
  *(_QWORD *)&v275 = v152;
  swift_bridgeObjectRetain();
  v220 = (unint64_t *)(v164 + 40);
  v221 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v222 = *v220;
    if (*v220)
    {
      v223 = *(v220 - 1);
      if ((v222 & 0x2000000000000000) != 0 ? HIBYTE(v222) & 0xF : v223 & 0xFFFFFFFFFFFFLL)
      {
        if ((v222 & 0x1000000000000000) != 0)
        {
          v225 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v222 & 0x2000000000000000) != 0)
          {
            v285 = *(v220 - 1);
            v286 = v222 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v223 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            swift_bridgeObjectRetain();
          }
          v225 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v221 + 2) + 1, 1, v221);
        v227 = *((_QWORD *)v221 + 2);
        v226 = *((_QWORD *)v221 + 3);
        if (v227 >= v226 >> 1)
          v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v226 > 1), v227 + 1, 1, v221);
        *((_QWORD *)v221 + 2) = v227 + 1;
        *(_DWORD *)&v221[4 * v227 + 32] = v225;
      }
    }
    v220 += 2;
    --v165;
  }
  while (v165);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v337);
  v228 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v221);
  v230 = v229;
  v232 = v231;
  v234 = v233;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v285);
  outlined release of Locale((uint64_t)v340);
  swift_release();
  result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v305);
  v173 = v250;
  v172 = v251;
  v174 = v248;
  v152 = v275;
  v175 = v277;
  if (v234 != 2)
  {
    if (v158 > v228 >> 10)
    {
LABEL_307:
      __break(1u);
      return result;
    }
    v159 = v228;
    v152 = v230;
    v276 = (uint64_t *)v232;
    v175 = v234;
  }
LABEL_205:
  v176 = v172[27];
  if (v159 >> 10 < v176 >> 10)
    goto LABEL_293;
  v273 = (char *)v172[28];
  v177 = v172[29];
  v270 = v172[30];
  v271 = v177;
  v172[27] = v159;
  v172[28] = v152;
  *(_QWORD *)&v275 = v152;
  v172[29] = v276;
  v172[30] = v175;
  v277 = v175;
  v178 = (*(uint64_t (**)(_QWORD, _QWORD))(v173[6] + 24))(v173[2], v173[6]);
  if (*(_QWORD *)(v174 + 16))
  {
    v180 = specialized __RawDictionaryStorage.find<A>(_:)(v178, v179);
    v181 = v266;
    if ((v182 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v174 + 56) + 72 * v180, (uint64_t)&v300);
    }
    else
    {
      v304 = 0;
      v302 = 0u;
      v303 = 0u;
      v300 = 0u;
      v301 = 0u;
    }
  }
  else
  {
    v304 = 0;
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
    v181 = v266;
  }
  swift_bridgeObjectRelease();
  v274 = (_QWORD *)v159;
  v269 = (_QWORD *)v176;
  if (*((_QWORD *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v300, (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v181, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v184 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v184 - 8) + 56))(v181, 1, 1, v184);
  }
  v185 = (*(uint64_t (**)(_QWORD, _QWORD))(v173[7] + 24))(v173[3], v173[7]);
  if (*(_QWORD *)(v174 + 16) && (v187 = specialized __RawDictionaryStorage.find<A>(_:)(v185, v186), (v188 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v174 + 56) + 72 * v187, (uint64_t)&v300);
  }
  else
  {
    v304 = 0;
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v284[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v284[1] = type metadata accessor for Optional();
  v189 = v250;
  v190 = v250[8];
  v191 = v250[4];
  swift_getAssociatedTypeWitness();
  v284[2] = type metadata accessor for Optional();
  v192 = v189[9];
  v193 = v189[5];
  swift_getAssociatedTypeWitness();
  v284[3] = type metadata accessor for Optional();
  v284[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v194 = (int *)swift_getTupleTypeMetadata();
  v195 = v266 + v194[12];
  if (*((_QWORD *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v300, (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v196 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v196 - 8) + 56))(v195, 0, 1, v196);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v197 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 56))(v195, 1, 1, v197);
  }
  v198 = (*(uint64_t (**)(uint64_t, uint64_t))(v190 + 24))(v191, v190);
  v200 = v248;
  if (*(_QWORD *)(v248 + 16) && (v201 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v199), (v202 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v200 + 56) + 72 * v201, (uint64_t)&v300);
  }
  else
  {
    v304 = 0;
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
  }
  swift_bridgeObjectRelease();
  v203 = v266 + v194[16];
  if (*((_QWORD *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v300, (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v204 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v204 - 8) + 56))(v203, 0, 1, v204);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v205 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v205 - 8) + 56))(v203, 1, 1, v205);
  }
  v206 = v269;
  v207 = (*(uint64_t (**)(uint64_t, uint64_t))(v192 + 24))(v193, v192);
  if (*(_QWORD *)(v200 + 16) && (v209 = specialized __RawDictionaryStorage.find<A>(_:)(v207, v208), (v210 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v200 + 56) + 72 * v209, (uint64_t)&v300);
  }
  else
  {
    v304 = 0;
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
  }
  swift_bridgeObjectRelease();
  v211 = v266;
  v212 = v266 + v194[20];
  if (*((_QWORD *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v300, (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v213 = swift_getAssociatedTypeWitness();
    v211 = v266;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v213 - 8) + 56))(v212, 0, 1, v213);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v214 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v214 - 8) + 56))(v212, 1, 1, v214);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v215 = (_QWORD *)(v211 + v194[24]);
  v216 = v273;
  *v215 = v206;
  v215[1] = v216;
  v217 = v270;
  v215[2] = v271;
  v215[3] = v217;
  v218 = v275;
  v215[4] = v274;
  v215[5] = v218;
  v219 = v277;
  v215[6] = v276;
  v215[7] = v219;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v194 - 1) + 56))(v211, 0, 1, v194);
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double result;
  _OWORD v23[12];
  uint64_t v24;

  v16 = *(_OWORD *)(v11 + 176);
  v23[10] = *(_OWORD *)(v11 + 160);
  v23[11] = v16;
  v24 = *(_QWORD *)(v11 + 192);
  v17 = *(_OWORD *)(v11 + 112);
  v23[6] = *(_OWORD *)(v11 + 96);
  v23[7] = v17;
  v18 = *(_OWORD *)(v11 + 144);
  v23[8] = *(_OWORD *)(v11 + 128);
  v23[9] = v18;
  v19 = *(_OWORD *)(v11 + 48);
  v23[2] = *(_OWORD *)(v11 + 32);
  v23[3] = v19;
  v20 = *(_OWORD *)(v11 + 80);
  v23[4] = *(_OWORD *)(v11 + 64);
  v23[5] = v20;
  v21 = *(_OWORD *)(v11 + 16);
  v23[0] = *(_OWORD *)v11;
  v23[1] = v21;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice5.init(runs:)(v11, a1, a2, a3, a5, a7, a8, a4, a9, a10, a11).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice5.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t TupleTypeMetadata;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  __int128 v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  int v145;
  void (*v146)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v147;
  uint64_t v148;
  char *v149;
  __int128 *v150;
  __int128 v151;
  unint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  __int128 *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t AssociatedTypeWitness;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  void (*v213)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  unint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  unint64_t *v239;
  char *v240;
  unint64_t v241;
  uint64_t v242;
  int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD v254[3];
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  __int128 *v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  unint64_t v295;
  uint64_t *v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  _QWORD v302[9];
  _QWORD v303[6];
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE v350[48];
  _BYTE v351[48];
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD v356[3];
  uint64_t v357;
  unint64_t v358;
  _OWORD v359[3];
  _OWORD v360[13];

  v4 = *(_QWORD *)(v2 + 168);
  v289 = *(_QWORD *)(v2 + 216);
  v5 = v289 >> 10;
  v283 = v4;
  v6 = v4 >> 10;
  if (v289 >> 10 == v6)
  {
    swift_getAssociatedTypeWitness();
    v324 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(_QWORD *)&v325 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((_QWORD *)&v325 + 1) = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(_QWORD *)&v326 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((_QWORD *)&v326 + 1) = type metadata accessor for Optional();
    *(_QWORD *)&v327 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(a2, 1, 1, TupleTypeMetadata);
  }
  v267 = (_QWORD *)result;
  v8 = *(_QWORD *)v2;
  v9 = *(_OWORD *)(v2 + 24);
  v343 = *(_OWORD *)(v2 + 8);
  v344 = v9;
  v10 = *(_OWORD *)(v2 + 56);
  v345 = *(_OWORD *)(v2 + 40);
  v346 = v10;
  if (v5 >= v6)
    goto LABEL_289;
  v11 = *(_QWORD *)(v2 + 136) >> 10;
  if (v5 < v11)
    goto LABEL_289;
  v291 = *(_QWORD **)(v2 + 136);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(v8 + 80);
  v14 = v289 >> 11;
  if (v12)
    v15 = *(_QWORD *)(v8 + 80);
  else
    v15 = 0;
  if (v15 < v14)
    goto LABEL_290;
  v294 = *(_OWORD *)(v2 + 72);
  v16 = *(_OWORD *)(v2 + 88);
  v17 = *(_OWORD *)(v2 + 104);
  v18 = *(_OWORD *)(v2 + 120);
  v19 = *(_QWORD *)(v2 + 144);
  v296 = *(uint64_t **)(v2 + 152);
  v295 = *(_QWORD *)(v2 + 160);
  v271 = *(_QWORD **)(v2 + 176);
  v270 = *(_QWORD *)(v2 + 184);
  v20 = *(_QWORD *)(v2 + 192);
  v268 = (_QWORD *)v2;
  v269 = v20;
  v280 = *(_QWORD *)(v2 + 224);
  v279 = *(_QWORD *)(v2 + 232);
  v21 = *(_QWORD *)(v2 + 240);
  v277 = a2;
  v278 = v21;
  v22 = *(_QWORD *)(v8 + 72);
  v23 = *(_QWORD *)(v8 + 88);
  v290 = v8;
  v292 = (char *)(v289 >> 11);
  v293 = v23;
  v258 = v6;
  v259 = v289 >> 10;
  v285 = v17;
  v286 = v16;
  v284 = v18;
  v287 = v11;
  if (!v12 || v14 >= v13 || !*(_WORD *)(v12 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v36 = v22;
    v37 = specialized Rope._endPath.getter(v12);
    swift_unknownObjectRelease();
    v28 = 0;
    v14 = 0;
    v38 = 0;
    if (!v12)
      goto LABEL_32;
    goto LABEL_31;
  }
  v288 = v22;
  v24 = v19;
  v25 = *(unsigned __int8 *)(v12 + 18);
  if (*(_BYTE *)(v12 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain();
    v26 = v12;
    while (1)
    {
      v29 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16))
        break;
      v30 = *(_QWORD *)(v26 + 40);
      v31 = __OFSUB__(v14, v30);
      v32 = v14 - v30;
      if (v31)
        goto LABEL_281;
      if (__OFADD__(v32, 1))
        goto LABEL_282;
      if (v32 + 1 < 1)
      {
        v29 = 0;
        goto LABEL_16;
      }
      if ((_DWORD)v29 == 1)
      {
        v14 = v32;
        break;
      }
      v33 = (uint64_t *)(v26 + 64);
      v34 = 1;
      while (1)
      {
        v35 = *v33;
        v33 += 3;
        v14 = v32 - v35;
        if (__OFSUB__(v32, v35))
          goto LABEL_275;
        if (__OFADD__(v14, 1))
        {
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
          goto LABEL_279;
        }
        if (v14 + 1 < 1)
          break;
        ++v34;
        v32 = v14;
        if (v29 == v34)
          goto LABEL_15;
      }
      v29 = v34;
      v14 = v32;
LABEL_16:
      v27 = (4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C;
      v25 = ((-15 << v27) - 1) & v25 | (v29 << v27);
      v28 = *(_QWORD *)(v26 + 24 + 24 * v29);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v26 = v28;
      if (!*(_BYTE *)(v28 + 18))
        goto LABEL_73;
    }
LABEL_15:
    if (!v14)
      goto LABEL_16;
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  swift_unknownObjectRetain_n();
  result = swift_retain();
  v28 = v12;
LABEL_73:
  v74 = *(unsigned __int16 *)(v28 + 16);
  if (!*(_WORD *)(v28 + 16))
  {
    v8 = v290;
LABEL_95:
    if (v14)
    {
LABEL_312:
      __break(1u);
      goto LABEL_313;
    }
    goto LABEL_96;
  }
  v75 = *(_QWORD *)(v28 + 24);
  v31 = __OFSUB__(v14, v75);
  v76 = v14 - v75;
  v8 = v290;
  if (v31)
  {
LABEL_314:
    __break(1u);
    goto LABEL_315;
  }
  if (__OFADD__(v76, 1))
  {
LABEL_315:
    __break(1u);
    goto LABEL_316;
  }
  if (v76 + 1 < 1)
  {
    v74 = 0;
  }
  else
  {
    if ((_DWORD)v74 == 1)
    {
      v14 = v76;
      goto LABEL_95;
    }
    v80 = (uint64_t *)(v28 + 48);
    v81 = 1;
    while (1)
    {
      v82 = *v80;
      v80 += 3;
      v14 = v76 - v82;
      if (__OFSUB__(v76, v82))
        goto LABEL_306;
      if (__OFADD__(v14, 1))
        goto LABEL_307;
      if (v14 + 1 < 1)
        break;
      ++v81;
      v76 = v14;
      if (v74 == v81)
        goto LABEL_95;
    }
    v74 = v81;
    v14 = v76;
  }
LABEL_96:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v37 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v74 << 8);
  v19 = v24;
  v36 = v288;
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v293, v37, v28, v12, v36);
  swift_unknownObjectRelease_n();
  v38 = v14;
LABEL_32:
  v39 = *(_OWORD *)(v8 + 32);
  v360[9] = *(_OWORD *)(v8 + 16);
  v360[10] = v39;
  v360[11] = *(_OWORD *)(v8 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v38))
  {
LABEL_291:
    __break(1u);
    goto LABEL_292;
  }
  v282 = v19;
  v40 = BigString.UTF8View.index(_:offsetBy:)();
  result = outlined release of Locale((uint64_t)&v347);
  if (v293 != *(_QWORD *)(v8 + 88))
  {
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
    goto LABEL_295;
  }
  if (v28)
  {
    v41 = (_QWORD *)(v28 + 24 * ((v37 >> ((4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C)) & 0xF));
    v43 = v41[3];
    v42 = v41[4];
    v44 = v41[5];
    swift_retain();
    v288 = v42;
    swift_bridgeObjectRetain();
    v257 = v44;
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v45 = *(_QWORD *)(v8 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    v43 = specialized Rope._Node.subscript.getter(v37, v45);
    v288 = v46;
    v257 = v47;
    result = swift_unknownObjectRelease();
  }
  if (v287 >= v40 >> 10)
    v48 = (unint64_t)v291;
  else
    v48 = v40;
  if (__OFADD__(v43, v40 >> 11))
    goto LABEL_293;
  if ((uint64_t)(v283 >> 11) >= (uint64_t)(v43 + (v40 >> 11)))
    v49 = v43 + (v40 >> 11);
  else
    v49 = v283 >> 11;
  v50 = *(_OWORD *)(v8 + 32);
  v360[6] = *(_OWORD *)(v8 + 16);
  v360[7] = v50;
  v266 = (__int128 *)(v8 + 16);
  v360[8] = *(_OWORD *)(v8 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(v49, v48 >> 11))
    goto LABEL_294;
  v51 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v348);
  result = swift_release();
  if (v51 >> 10 < v48 >> 10)
  {
LABEL_295:
    __break(1u);
    goto LABEL_296;
  }
  v325 = v343;
  v326 = v344;
  v327 = v345;
  v53 = v268[25];
  v52 = v268[26];
  v328 = v346;
  v329 = v294;
  v330 = v286;
  v331 = v285;
  v332 = v284;
  v324 = v8;
  v333 = v291;
  v334 = v282;
  v335 = (uint64_t)v296;
  v336 = v295;
  v337 = v283;
  v338 = v271;
  v339 = v270;
  v340 = v269;
  v341 = v53;
  v342 = v52;
  v282 = v53;
  v54 = *(_QWORD *)(v53 + 16);
  if (!v54)
  {
LABEL_296:
    __break(1u);
    goto LABEL_297;
  }
  v274 = v52;
  v55 = *(_QWORD *)(v8 + 64);
  v56 = *(_QWORD *)(v8 + 72);
  v58 = *(_QWORD *)(v8 + 80);
  v57 = *(_QWORD *)(v8 + 88);
  *(_QWORD *)&v285 = v54;
  v281 = v57;
  if (v55)
  {
    v59 = v292;
    if (v58 < (uint64_t)v292)
    {
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }
    if (*(_WORD *)(v55 + 16) && (uint64_t)v292 < v58)
    {
      v296 = (uint64_t *)v56;
      v60 = *(unsigned __int8 *)(v55 + 18);
      if (*(_BYTE *)(v55 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v324);
        v61 = v55;
        while (1)
        {
          v64 = *(unsigned __int16 *)(v61 + 16);
          if (!*(_WORD *)(v61 + 16))
            goto LABEL_54;
          v65 = *(_QWORD *)(v61 + 40);
          v31 = __OFSUB__(v59, v65);
          v66 = &v59[-v65];
          if (v31)
            goto LABEL_283;
          if (__OFADD__(v66, 1))
            goto LABEL_284;
          if ((uint64_t)(v66 + 1) < 1)
          {
            v64 = 0;
          }
          else
          {
            if ((_DWORD)v64 == 1)
            {
              v59 = v66;
LABEL_54:
              if (v59)
                goto LABEL_280;
              goto LABEL_55;
            }
            v67 = (uint64_t *)(v61 + 64);
            v68 = 1;
            while (1)
            {
              v69 = *v67;
              v67 += 3;
              v59 = &v66[-v69];
              if (__OFSUB__(v66, v69))
                goto LABEL_277;
              if (__OFADD__(v59, 1))
                goto LABEL_278;
              if ((uint64_t)(v59 + 1) < 1)
                break;
              ++v68;
              v66 = v59;
              if (v64 == v68)
                goto LABEL_54;
            }
            v64 = v68;
            v59 = v66;
          }
LABEL_55:
          v62 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
          v60 = ((-15 << v62) - 1) & v60 | (v64 << v62);
          v63 = *(_QWORD *)(v61 + 24 + 24 * v64);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v61 = v63;
          if (!*(_BYTE *)(v63 + 18))
            goto LABEL_80;
        }
      }
      swift_unknownObjectRetain_n();
      swift_retain();
      result = outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v324);
      v63 = v55;
LABEL_80:
      v77 = *(unsigned __int16 *)(v63 + 16);
      if (*(_WORD *)(v63 + 16))
      {
        v78 = *(_QWORD *)(v63 + 24);
        v31 = __OFSUB__(v59, v78);
        v79 = &v59[-v78];
        v56 = (uint64_t)v296;
        if (v31)
        {
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
          goto LABEL_319;
        }
        if (__OFADD__(v79, 1))
          goto LABEL_317;
        if ((uint64_t)(v79 + 1) < 1)
        {
          v77 = 0;
        }
        else
        {
          if ((_DWORD)v77 == 1)
          {
            v59 = v79;
            goto LABEL_102;
          }
          v83 = (uint64_t *)(v63 + 48);
          v84 = 1;
          while (1)
          {
            v85 = *v83;
            v83 += 3;
            v59 = &v79[-v85];
            if (__OFSUB__(v79, v85))
              goto LABEL_308;
            if (__OFADD__(v59, 1))
              goto LABEL_309;
            if ((uint64_t)(v59 + 1) < 1)
              break;
            ++v84;
            v79 = v59;
            if (v77 == v84)
              goto LABEL_102;
          }
          v77 = v84;
          v59 = v79;
        }
LABEL_103:
        swift_unknownObjectRelease();
        v71 = v63;
        swift_unknownObjectRelease();
        v70 = v60 & 0xFFFFFFFFFFFFF0FFLL | (v77 << 8);
        v54 = v285;
        *(_QWORD *)&v284 = v70;
        goto LABEL_71;
      }
      v56 = (uint64_t)v296;
LABEL_102:
      if (v59)
      {
LABEL_313:
        __break(1u);
        goto LABEL_314;
      }
      goto LABEL_103;
    }
  }
  else if (v289 >= 0x800)
  {
LABEL_311:
    __break(1u);
    goto LABEL_312;
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v324);
  v70 = specialized Rope._endPath.getter(v55);
  result = swift_unknownObjectRelease();
  v71 = 0;
  v59 = 0;
  *(_QWORD *)&v284 = v70;
  if (v55)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v72 = v281;
    v73 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v281, v70, v71, v55, v56);
    result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }
  v73 = 0;
  v72 = v281;
LABEL_105:
  v276 = (char *)(v292 - v59);
  if (__OFSUB__(v292, v59))
  {
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }
  v86 = v266[1];
  v360[3] = *v266;
  v360[4] = v86;
  v360[5] = v266[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v59))
  {
LABEL_298:
    __break(1u);
    goto LABEL_299;
  }
  v256 = BigString.UTF8View.index(_:offsetBy:)();
  v88 = v87;
  v254[1] = v90;
  v254[2] = v89;
  result = outlined release of Locale((uint64_t)&v349);
  v264 = v294;
  if (v73 >= (uint64_t)v294)
  {
LABEL_299:
    __break(1u);
    goto LABEL_300;
  }
  if (v72 != *(_QWORD *)(v8 + 88))
  {
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }
  v254[0] = v88;
  v91 = *(_QWORD *)(v8 + 64);
  if (v71)
  {
    v92 = v284;
    v93 = v71 + 24 * (((unint64_t)v284 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
    v94 = v73;
    v95 = *(_QWORD *)(v93 + 40);
    v295 = *(_QWORD *)(v93 + 32);
    swift_bridgeObjectRetain();
    v255 = v95;
    v73 = v94;
    v8 = v290;
    result = swift_bridgeObjectRetain();
    v96 = v72;
  }
  else
  {
    swift_unknownObjectRetain();
    v92 = v284;
    specialized Rope._Node.subscript.getter(v284, v91);
    v295 = v97;
    v255 = v98;
    result = swift_unknownObjectRelease();
    v91 = *(_QWORD *)(v8 + 64);
    v96 = *(_QWORD *)(v8 + 88);
  }
  v273 = v73 + 1;
  v296 = &v312;
  v304 = v72;
  v305 = v92;
  *(_QWORD *)&v294 = &v354;
  v263 = (uint64_t *)(v282 + 40);
  v306 = v71;
  v99 = v92;
LABEL_113:
  if (v72 != v96)
    goto LABEL_285;
  v272 = v96;
  v275 = v71;
  if (v71)
  {
    v100 = *(_QWORD *)(v71 + 24 * ((v99 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v100 = specialized Rope._Node.subscript.getter(v99, v91);
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v276, v100))
    goto LABEL_286;
  v262 = &v276[v100];
  if (v91)
  {
    v101 = ((-15 << ((4 * *(_BYTE *)(v91 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v91 + 18) | ((unint64_t)*(unsigned __int16 *)(v91 + 16) << ((4 * *(_BYTE *)(v91 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
  }
  else
  {
    v101 = 0;
  }
  if (v99 >= v101)
    goto LABEL_287;
  *(_QWORD *)&v284 = v99;
  if (v275)
  {
    v102 = (4 * *(_BYTE *)(v275 + 18) + 8) & 0x3C;
    v103 = ((v99 >> v102) & 0xF) + 1;
    if (v103 < *(unsigned __int16 *)(v275 + 16))
    {
      v104 = (v103 << v102) | ((-15 << v102) - 1) & v99;
      result = swift_unknownObjectRelease_n();
LABEL_128:
      v109 = v306;
LABEL_129:
      v110 = v295;
      goto LABEL_137;
    }
  }
  v105 = *(unsigned __int8 *)(v91 + 18);
  v106 = (4 * v105 + 8) & 0x3C;
  v107 = (v99 >> v106) & 0xF;
  *(_QWORD *)&v352 = v107;
  if (v105)
  {
    swift_unknownObjectRetain();
    v108 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v91 + 24, (uint64_t *)&v352, (uint64_t)&v304, v91, v105);
    result = swift_unknownObjectRelease();
    if ((v108 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v104 = v305;
      goto LABEL_128;
    }
  }
  else
  {
    v111 = v107 + 1;
    if (v107 + 1 < (unint64_t)*(unsigned __int16 *)(v91 + 16))
    {
      result = swift_unknownObjectRelease_n();
      v112 = v111 << v106;
      v99 = v284;
      v104 = v112 | ((-15 << v106) - 1) & v284;
      v109 = v91;
      goto LABEL_129;
    }
    v99 = v284;
  }
  if (v91)
  {
    v113 = *(unsigned __int8 *)(v91 + 18);
    v114 = *(unsigned __int16 *)(v91 + 16);
    result = swift_unknownObjectRelease_n();
    v115 = (4 * v113 + 8) & 0x3C;
    v116 = ((-15 << v115) - 1) & v113;
    v117 = v114 << v115;
    v99 = v284;
    v104 = v116 | v117;
  }
  else
  {
    v104 = 0;
  }
  v110 = v295;
  v109 = 0;
  v304 = v272;
LABEL_137:
  if (v273 != v264)
  {
    if (v304 != *(_QWORD *)(v8 + 88))
    {
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
      goto LABEL_291;
    }
    v281 = v304;
    v260 = v109;
    v261 = v104;
    if (v109)
    {
      v118 = v109 + 24 * ((v104 >> ((4 * *(_BYTE *)(v109 + 18) + 8) & 0x3C)) & 0xF);
      v120 = *(_QWORD *)(v118 + 32);
      v119 = *(_QWORD *)(v118 + 40);
      swift_bridgeObjectRetain();
      v265 = v119;
      swift_bridgeObjectRetain();
    }
    else
    {
      v121 = *(_QWORD *)(v8 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v104, v121);
      v120 = v122;
      v265 = v123;
      v110 = v295;
      swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRetain();
    v124 = 0;
    v125 = v263;
    v293 = v120;
    while (1)
    {
      v128 = v124 + 1;
      if (__OFADD__(v124, 1))
      {
        __break(1u);
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }
      v129 = *(v125 - 1);
      v130 = *v125;
      if (*(_QWORD *)(v110 + 16))
      {
        swift_bridgeObjectRetain_n();
        v131 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v130);
        if ((v132 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v110 + 56) + 72 * v131, (uint64_t)&v319);
        }
        else
        {
          v323 = 0;
          v321 = 0u;
          v322 = 0u;
          v319 = 0u;
          v320 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v120 + 16))
        {
LABEL_152:
          v318 = 0;
          v316 = 0u;
          v317 = 0u;
          v314 = 0u;
          v315 = 0u;
          goto LABEL_159;
        }
      }
      else
      {
        v323 = 0;
        v321 = 0u;
        v322 = 0u;
        v319 = 0u;
        v320 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v120 + 16))
          goto LABEL_152;
      }
      swift_bridgeObjectRetain();
      v133 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v130);
      if ((v134 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v120 + 56) + 72 * v133, (uint64_t)&v314);
      }
      else
      {
        v318 = 0;
        v316 = 0u;
        v317 = 0u;
        v314 = 0u;
        v315 = 0u;
      }
      swift_bridgeObjectRelease();
      v110 = v295;
LABEL_159:
      swift_bridgeObjectRelease();
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v319, (uint64_t)&v304, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v314, (uint64_t)v296, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v307)
      {
        if (v313)
          goto LABEL_176;
        outlined destroy of Any?((uint64_t)&v304, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v314, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_146;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v304, (uint64_t)v302, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v313)
        goto LABEL_175;
      v135 = *((_OWORD *)v296 + 3);
      v299 = *((_OWORD *)v296 + 2);
      v300 = v135;
      v301 = v296[8];
      v136 = *((_OWORD *)v296 + 1);
      v297 = *(_OWORD *)v296;
      v298 = v136;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v302, (uint64_t)v360);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v297, (uint64_t)v359);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v360, (uint64_t)&v352, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v359, v294, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v353)
      {
        if (!v355)
        {
          v126 = v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v352);
LABEL_144:
          v127 = 0;
          goto LABEL_145;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v352, (uint64_t)v356);
        outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)v294, (uint64_t)v351);
        v137 = v357;
        v287 = v358;
        *(_QWORD *)&v286 = __swift_project_boxed_opaque_existential_1(v356, v357);
        v292 = (char *)v254;
        v138 = *(_QWORD *)(v137 - 8);
        MEMORY[0x1E0C80A78](v286);
        v140 = (char *)v254 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v351, (uint64_t)v350);
        v141 = type metadata accessor for Optional();
        v291 = v254;
        v142 = *(_QWORD *)(v141 - 8);
        MEMORY[0x1E0C80A78](v141);
        v144 = (char *)v254 - v143;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v145 = swift_dynamicCast();
        v146 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56);
        if (v145)
        {
          v146(v144, 0, 1, v137);
          (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v140, v144, v137);
          v127 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v138 + 8))(v140, v137);
        }
        else
        {
          v146(v144, 1, 1, v137);
          (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
          v127 = 0;
        }
        v126 = v290;
        v54 = v285;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v351);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v356);
        v110 = v295;
      }
      else
      {
        v126 = v8;
        if (v355)
        {
          outlined destroy of Any?(v294, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_144;
        }
        v127 = 1;
      }
LABEL_145:
      outlined destroy of Any?((uint64_t)v359, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v360, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v297);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v302);
      outlined destroy of Any?((uint64_t)&v304, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v314, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      v8 = v126;
      v120 = v293;
      if ((v127 & 1) == 0)
        goto LABEL_177;
LABEL_146:
      v125 += 2;
      ++v124;
      if (v128 == v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v91 = *(_QWORD *)(v8 + 64);
        v96 = *(_QWORD *)(v8 + 88);
        v99 = v261;
        v276 = v262;
        v72 = v281;
        v304 = v281;
        v305 = v261;
        v71 = v260;
        v306 = v260;
        v31 = __OFADD__(v273++, 1);
        if (!v31)
          goto LABEL_113;
        __break(1u);
LABEL_175:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v302);
LABEL_176:
        outlined destroy of Any?((uint64_t)&v304, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v314, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_177:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v99 = v284;
        goto LABEL_178;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_178:
  if (v272 != *(_QWORD *)(v8 + 88))
    goto LABEL_301;
  if (v275)
  {
    v147 = *(_QWORD *)(v275 + 24 * ((v99 >> ((4 * *(_BYTE *)(v275 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v148 = *(_QWORD *)(v8 + 64);
    swift_unknownObjectRetain();
    v147 = specialized Rope._Node.subscript.getter(v99, v148);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v149 = &v276[v147];
  if (__OFADD__(v276, v147))
    goto LABEL_302;
  v150 = v266;
  v151 = v266[1];
  v360[0] = *v266;
  v360[1] = v151;
  v360[2] = v266[2];
  BigString.utf8.getter();
  result = v256;
  if (__OFSUB__(v149, v256 >> 11))
  {
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
    goto LABEL_310;
  }
  v152 = BigString.UTF8View.index(_:offsetBy:)();
  v154 = v153;
  v155 = v150;
  v157 = v156;
  v159 = v158;
  result = outlined release of Locale((uint64_t)v350);
  v160 = v259;
  if (v258 >= v152 >> 10)
    v161 = v152;
  else
    v161 = v283;
  if (v258 >= v152 >> 10)
  {
    v162 = v157;
  }
  else
  {
    v154 = v271;
    v162 = v270;
  }
  if (v258 >= v152 >> 10)
    v163 = v159;
  else
    v163 = v269;
  v164 = *v155;
  v165 = v155[1];
  v359[2] = v155[2];
  v359[1] = v165;
  v359[0] = v164;
  if (v161 >> 10 < v259)
    goto LABEL_304;
  *(_QWORD *)&v314 = v289;
  *((_QWORD *)&v314 + 1) = v280;
  *(_QWORD *)&v315 = v279;
  *((_QWORD *)&v315 + 1) = v278;
  *(_QWORD *)&v316 = v161;
  *((_QWORD *)&v316 + 1) = v154;
  *(_QWORD *)&v317 = v162;
  *((_QWORD *)&v317 + 1) = v163;
  v166 = v274;
  v167 = *(_QWORD *)(v274 + 16);
  v296 = (uint64_t *)v163;
  if (!v167 || v259 == v161 >> 10)
  {
    v295 = v162;
LABEL_209:
    swift_release();
    result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v324);
    v175 = v267;
    v174 = v268;
    v176 = (uint64_t)v296;
    goto LABEL_210;
  }
  v168 = v154;
  outlined retain of Locale((uint64_t)v359);
  swift_bridgeObjectRetain();
  v169 = 40;
  v170 = v167;
  while (*(_QWORD *)(v166 + v169))
  {
    swift_bridgeObjectRelease();
    v169 += 16;
    if (!--v170)
    {
      swift_bridgeObjectRelease();
      v154 = v168;
      v171 = (uint64_t)v296;
      goto LABEL_204;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v351);
  v302[0] = v289;
  v302[1] = v280;
  v302[2] = v279;
  v302[3] = v278;
  v302[4] = v289;
  v302[5] = v280;
  v302[6] = v279;
  v302[7] = v278;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, v302, (unint64_t *)&v304);
  result = outlined release of Locale((uint64_t)&v352);
  v154 = v168;
  v171 = (uint64_t)v296;
  if (v311 != 2)
  {
    v161 = v308;
    if (v160 > v308 >> 10)
      goto LABEL_318;
    v154 = v309;
    v162 = v310;
    v171 = v311;
  }
LABEL_204:
  *(_QWORD *)&v297 = v289;
  *((_QWORD *)&v297 + 1) = v280;
  *(_QWORD *)&v298 = v279;
  *((_QWORD *)&v298 + 1) = v278;
  *(_QWORD *)&v299 = v161;
  *((_QWORD *)&v299 + 1) = v154;
  *(_QWORD *)&v300 = v162;
  *((_QWORD *)&v300 + 1) = v171;
  v295 = v162;
  v296 = (uint64_t *)v171;
  v172 = *(_QWORD *)(v166 + 16);
  if (!v172)
  {
LABEL_208:
    outlined release of Locale((uint64_t)v359);
    goto LABEL_209;
  }
  v173 = 40;
  while (!*(_QWORD *)(v166 + v173))
  {
    v173 += 16;
    if (!--v172)
      goto LABEL_208;
  }
  v291 = v154;
  v292 = (char *)v161;
  swift_bridgeObjectRetain();
  v239 = (unint64_t *)(v166 + 40);
  v240 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v241 = *v239;
    if (*v239)
    {
      v242 = *(v239 - 1);
      if ((v241 & 0x2000000000000000) != 0 ? HIBYTE(v241) & 0xF : v242 & 0xFFFFFFFFFFFFLL)
      {
        if ((v241 & 0x1000000000000000) != 0)
        {
          v244 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v241 & 0x2000000000000000) != 0)
          {
            v304 = *(v239 - 1);
            v305 = v241 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v242 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            swift_bridgeObjectRetain();
          }
          v244 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v240 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v240 + 2) + 1, 1, v240);
        v246 = *((_QWORD *)v240 + 2);
        v245 = *((_QWORD *)v240 + 3);
        if (v246 >= v245 >> 1)
          v240 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v245 > 1), v246 + 1, 1, v240);
        *((_QWORD *)v240 + 2) = v246 + 1;
        *(_DWORD *)&v240[4 * v246 + 32] = v244;
      }
    }
    v239 += 2;
    --v167;
  }
  while (v167);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v356);
  v247 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v240);
  v249 = v248;
  v251 = v250;
  v253 = v252;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v304);
  outlined release of Locale((uint64_t)v359);
  swift_release();
  result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v324);
  v175 = v267;
  v174 = v268;
  v154 = v291;
  v161 = (unint64_t)v292;
  v176 = (uint64_t)v296;
  if (v253 != 2)
  {
    if (v160 > v247 >> 10)
    {
LABEL_319:
      __break(1u);
      return result;
    }
    v161 = v247;
    v154 = v249;
    v295 = v251;
    v176 = v253;
  }
LABEL_210:
  v177 = v174[27];
  if (v161 >> 10 < v177 >> 10)
    goto LABEL_305;
  v178 = v174[28];
  *(_QWORD *)&v286 = v174[29];
  *(_QWORD *)&v285 = v174[30];
  v174[27] = v161;
  v174[28] = v154;
  v291 = v154;
  v174[29] = v295;
  v174[30] = v176;
  v296 = (uint64_t *)v176;
  v179 = (*(uint64_t (**)(_QWORD, _QWORD))(v175[7] + 24))(v175[2], v175[7]);
  v181 = v288;
  v182 = *(_QWORD *)(v288 + 16);
  v292 = (char *)v161;
  if (v182)
  {
    v183 = specialized __RawDictionaryStorage.find<A>(_:)(v179, v180);
    v184 = v277;
    if ((v185 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v181 + 56) + 72 * v183, (uint64_t)&v319);
    }
    else
    {
      v323 = 0;
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
    }
  }
  else
  {
    v323 = 0;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    v184 = v277;
  }
  swift_bridgeObjectRelease();
  v287 = v178;
  if (*((_QWORD *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v319, (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v184, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v187 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 56))(v184, 1, 1, v187);
  }
  v188 = (*(uint64_t (**)(_QWORD, _QWORD))(v175[8] + 24))(v175[3], v175[8]);
  v190 = v288;
  v191 = *(_QWORD *)(v288 + 16);
  v289 = v177;
  if (v191 && (v192 = specialized __RawDictionaryStorage.find<A>(_:)(v188, v189), (v193 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v190 + 56) + 72 * v192, (uint64_t)&v319);
  }
  else
  {
    v323 = 0;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v303[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v303[1] = type metadata accessor for Optional();
  v194 = v267;
  v195 = v267[9];
  v196 = v267[4];
  swift_getAssociatedTypeWitness();
  v303[2] = type metadata accessor for Optional();
  v197 = v194[10];
  v198 = v194[5];
  swift_getAssociatedTypeWitness();
  v303[3] = type metadata accessor for Optional();
  v199 = v194[6];
  v293 = v194[11];
  *(_QWORD *)&v294 = v199;
  swift_getAssociatedTypeWitness();
  v303[4] = type metadata accessor for Optional();
  v303[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v200 = (int *)swift_getTupleTypeMetadata();
  v201 = v277;
  v202 = v277 + v200[12];
  if (*((_QWORD *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v319, (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v203 = swift_getAssociatedTypeWitness();
    v201 = v277;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v203 - 8) + 56))(v202, 0, 1, v203);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v204 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v204 - 8) + 56))(v202, 1, 1, v204);
  }
  v205 = (*(uint64_t (**)(uint64_t, uint64_t))(v195 + 24))(v196, v195);
  v207 = v288;
  if (*(_QWORD *)(v288 + 16) && (v208 = specialized __RawDictionaryStorage.find<A>(_:)(v205, v206), (v209 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v207 + 56) + 72 * v208, (uint64_t)&v319);
  }
  else
  {
    v323 = 0;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }
  swift_bridgeObjectRelease();
  v210 = v201 + v200[16];
  v211 = v287;
  if (*((_QWORD *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v319, (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v212 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    v213 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v212 - 8) + 56);
    v214 = v212;
    v201 = v277;
    v213(v210, 0, 1, v214);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v215 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v215 - 8) + 56))(v210, 1, 1, v215);
  }
  v216 = (*(uint64_t (**)(uint64_t, uint64_t))(v197 + 24))(v198, v197);
  v218 = v288;
  v219 = v289;
  if (*(_QWORD *)(v288 + 16) && (v220 = specialized __RawDictionaryStorage.find<A>(_:)(v216, v217), (v221 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v218 + 56) + 72 * v220, (uint64_t)&v319);
  }
  else
  {
    v323 = 0;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }
  swift_bridgeObjectRelease();
  v222 = v201 + v200[20];
  v223 = v295;
  if (*((_QWORD *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v319, (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v224 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v224 - 8) + 56))(v222, 0, 1, v224);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v225 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v225 - 8) + 56))(v222, 1, 1, v225);
  }
  v226 = (*(uint64_t (**)(_QWORD))(v293 + 24))(v294);
  v228 = v288;
  v229 = v292;
  if (*(_QWORD *)(v288 + 16) && (v230 = specialized __RawDictionaryStorage.find<A>(_:)(v226, v227), (v231 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v228 + 56) + 72 * v230, (uint64_t)&v319);
  }
  else
  {
    v323 = 0;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
  }
  swift_bridgeObjectRelease();
  v232 = v201 + v200[24];
  if (*((_QWORD *)&v320 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v319, (uint64_t)v303);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v233 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v319);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v233 - 8) + 56))(v232, 0, 1, v233);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v319, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v234 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v234 - 8) + 56))(v232, 1, 1, v234);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v235 = (unint64_t *)(v201 + v200[28]);
  *v235 = v219;
  v235[1] = v211;
  v236 = v285;
  v235[2] = v286;
  v235[3] = v236;
  v237 = v291;
  v235[4] = (unint64_t)v229;
  v235[5] = (unint64_t)v237;
  v238 = (uint64_t)v296;
  v235[6] = v223;
  v235[7] = v238;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v200 - 1) + 56))(v201, 0, 1, v200);
}

__n128 AttributedString.Runs.AttributesSlice1.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 136);
  v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.Runs.AttributesSlice1.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 168);
  v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.index(after:)(_OWORD *a1, uint64_t a2)
{
  return AttributedString.Runs.AttributesSlice1.index(after:)(a1, a2, (void (*)(_OWORD *, uint64_t, uint64_t))AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:));
}

uint64_t AttributedString.Runs.AttributesSlice1.index(before:)(_OWORD *a1, uint64_t a2)
{
  return AttributedString.Runs.AttributesSlice1.index(after:)(a1, a2, (void (*)(_OWORD *, uint64_t, uint64_t))AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:));
}

uint64_t AttributedString.Runs.AttributesSlice1.index(after:)(_OWORD *a1, uint64_t a2, void (*a3)(_OWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v21[14];
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v5 = *(_OWORD *)(v3 + 144);
  v6 = *(_OWORD *)(v3 + 176);
  v32 = *(_OWORD *)(v3 + 160);
  v33 = v6;
  v7 = *(_OWORD *)(v3 + 80);
  v8 = *(_OWORD *)(v3 + 112);
  v28 = *(_OWORD *)(v3 + 96);
  v29 = v8;
  v9 = *(_OWORD *)(v3 + 112);
  v10 = *(_OWORD *)(v3 + 144);
  v30 = *(_OWORD *)(v3 + 128);
  v31 = v10;
  v11 = *(_OWORD *)(v3 + 16);
  v12 = *(_OWORD *)(v3 + 48);
  v24 = *(_OWORD *)(v3 + 32);
  v25 = v12;
  v13 = *(_OWORD *)(v3 + 48);
  v14 = *(_OWORD *)(v3 + 80);
  v26 = *(_OWORD *)(v3 + 64);
  v27 = v14;
  v15 = *(_OWORD *)(v3 + 16);
  v23[0] = *(_OWORD *)v3;
  v23[1] = v15;
  v16 = *(_OWORD *)(v3 + 176);
  v21[12] = v32;
  v21[13] = v16;
  v21[8] = v28;
  v21[9] = v9;
  v21[10] = v30;
  v21[11] = v5;
  v21[4] = v24;
  v21[5] = v13;
  v21[6] = v26;
  v21[7] = v7;
  v17 = *(_QWORD *)(v3 + 200);
  v34 = *(_QWORD *)(v3 + 192);
  v18 = *(_QWORD *)(v3 + 208);
  v22 = *(_QWORD *)(v3 + 192);
  v21[2] = v23[0];
  v21[3] = v11;
  v19 = a1[1];
  v21[0] = *a1;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  a3(v21, v17, v18);
  return outlined release of AttributedString.Runs((uint64_t)v23);
}

uint64_t AttributedString.Runs.AttributesSlice1.subscript.getter(uint64_t a1, _OWORD *a2, unint64_t *a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  char v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  int v122;
  void (*v123)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v124;
  uint64_t v125;
  char *v126;
  __int128 *v127;
  __int128 v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t AssociatedTypeWitness;
  uint64_t v156;
  uint64_t v157;
  _OWORD *v158;
  uint64_t v159;
  unint64_t *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  __int128 v181;
  _OWORD *v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  __int128 v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  __int128 *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  _QWORD v227[2];
  __int128 v228;
  unint64_t v229;
  unint64_t v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  _OWORD v247[2];
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  _BYTE v256[48];
  _BYTE v257[48];
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD v263[3];
  uint64_t v264;
  uint64_t v265;
  _OWORD v266[3];
  _OWORD v267[6];
  _OWORD v268[4];
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;

  v8 = *v4;
  v9 = v4[1];
  v10 = v4[2];
  v268[3] = v4[3];
  v268[2] = v10;
  v11 = v4[1];
  v12 = v4[2];
  v13 = *v4;
  v268[0] = v8;
  v268[1] = v11;
  v15 = v4[5];
  v14 = v4[6];
  v16 = v14;
  v272 = v4[7];
  v271 = v14;
  v17 = v4[3];
  v18 = v4[5];
  v269 = v4[4];
  v270 = v18;
  v20 = v4[9];
  v19 = v4[10];
  v21 = v19;
  v276 = v4[11];
  v275 = v19;
  v22 = v4[7];
  v23 = v4[9];
  v273 = v4[8];
  v274 = v23;
  v24 = v4[11];
  v252 = v21;
  v253 = v24;
  v248 = v16;
  v249 = v22;
  v250 = v273;
  v251 = v20;
  v245 = v12;
  v246 = v17;
  v26 = *a3;
  v25 = a3[1];
  v28 = a3[2];
  v27 = a3[3];
  v29 = *((_QWORD *)v4 + 25);
  v277 = *((_QWORD *)v4 + 24);
  v30 = *((_QWORD *)v4 + 26);
  v254 = *((_QWORD *)v4 + 24);
  v247[0] = v269;
  v247[1] = v15;
  v243 = v13;
  v244 = v9;
  *(_QWORD *)&v233 = v26;
  v205 = v25;
  *(_QWORD *)&v206 = v28;
  *((_QWORD *)&v233 + 1) = v25;
  *(_QWORD *)&v234 = v28;
  *((_QWORD *)&v206 + 1) = v27;
  *((_QWORD *)&v234 + 1) = v27;
  outlined retain of AttributedString.Runs((uint64_t)v268);
  v212 = v29;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((unint64_t)&v238, (unint64_t *)&v233, v29, v30, (uint64_t *)&v258);
  v31 = v258;
  v32 = v259;
  result = outlined release of AttributedString.Runs((uint64_t)v268);
  if (v26 >> 10 < *((_QWORD *)&v273 + 1) >> 10 || v26 >> 10 >= *((_QWORD *)&v275 + 1) >> 10)
    goto LABEL_202;
  v34 = *(_QWORD *)(v212 + 16);
  if (!v34)
  {
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
    goto LABEL_205;
  }
  v208 = v30;
  v187 = v32;
  v188 = v31;
  v35 = *(_QWORD *)(*(_QWORD *)&v268[0] + 64);
  v36 = *(_QWORD *)(*(_QWORD *)&v268[0] + 80);
  v37 = (__int128 *)(v26 >> 11);
  if (v35)
    v38 = *(_QWORD *)(*(_QWORD *)&v268[0] + 80);
  else
    v38 = 0;
  if (v38 < (uint64_t)v37)
    goto LABEL_204;
  v182 = a2;
  v183 = *((_QWORD *)&v31 + 1);
  v221 = *(_QWORD *)(*(_QWORD *)&v268[0] + 72);
  v39 = *(_QWORD *)(*(_QWORD *)&v268[0] + 88);
  v200 = v26;
  v211 = v34;
  v209 = *(_QWORD *)&v268[0];
  v210 = v39;
  v186 = a1;
  v185 = v238;
  v181 = v239;
  v184 = a4;
  v196 = v26 >> 10;
  v192 = *((_QWORD *)&v275 + 1) >> 10;
  v193 = *((_QWORD *)&v275 + 1);
  v190 = *((_QWORD *)&v276 + 1);
  v191 = v276;
  v189 = v277;
  if (v35 && (uint64_t)v37 < v36 && *(_WORD *)(v35 + 16))
  {
    v40 = *(unsigned __int8 *)(v35 + 18);
    if (*(_BYTE *)(v35 + 18))
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)v268);
      result = swift_unknownObjectRetain();
      v41 = v26 >> 11;
      v42 = v35;
      while (1)
      {
        v45 = *(unsigned __int16 *)(v42 + 16);
        if (!*(_WORD *)(v42 + 16))
          break;
        v46 = *(_QWORD *)(v42 + 40);
        v47 = __OFSUB__(v41, v46);
        v48 = v41 - v46;
        if (v47)
          goto LABEL_196;
        if (__OFADD__(v48, 1))
          goto LABEL_197;
        if ((uint64_t)(v48 + 1) < 1)
        {
          v45 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v45 == 1)
        {
          v41 = v48;
          break;
        }
        v49 = (uint64_t *)(v42 + 64);
        v50 = 1;
        while (1)
        {
          v51 = *v49;
          v49 += 3;
          v41 = v48 - v51;
          if (__OFSUB__(v48, v51))
            goto LABEL_193;
          if (__OFADD__(v41, 1))
          {
LABEL_194:
            __break(1u);
            goto LABEL_195;
          }
          if ((uint64_t)(v41 + 1) < 1)
            break;
          ++v50;
          v48 = v41;
          if (v45 == v50)
            goto LABEL_14;
        }
        v45 = v50;
        v41 = v48;
LABEL_15:
        v43 = (4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C;
        v40 = ((-15 << v43) - 1) & v40 | (v45 << v43);
        v44 = *(_QWORD *)(v42 + 24 + 24 * v45);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v42 = v44;
        if (!*(_BYTE *)(v44 + 18))
          goto LABEL_32;
      }
LABEL_14:
      if (!v41)
        goto LABEL_15;
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
      goto LABEL_201;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v268);
    result = swift_unknownObjectRetain();
    v41 = v26 >> 11;
    v44 = v35;
LABEL_32:
    v220 = (__int128 *)(v26 >> 11);
    v57 = *(unsigned __int16 *)(v44 + 16);
    if (*(_WORD *)(v44 + 16))
    {
      v58 = *(_QWORD *)(v44 + 24);
      v47 = __OFSUB__(v41, v58);
      v59 = v41 - v58;
      v34 = v211;
      if (v47)
      {
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      if (__OFADD__(v59, 1))
        goto LABEL_219;
      v55 = v44;
      if ((uint64_t)(v59 + 1) < 1)
      {
        v57 = 0;
      }
      else
      {
        if ((_DWORD)v57 == 1)
        {
          v41 = v59;
          goto LABEL_45;
        }
        v60 = (uint64_t *)(v44 + 48);
        v61 = 1;
        while (1)
        {
          v62 = *v60;
          v60 += 3;
          v41 = v59 - v62;
          if (__OFSUB__(v59, v62))
            goto LABEL_215;
          if (__OFADD__(v41, 1))
            goto LABEL_216;
          if ((uint64_t)(v41 + 1) < 1)
            break;
          ++v61;
          v59 = v41;
          if (v57 == v61)
            goto LABEL_45;
        }
        v57 = v61;
        v41 = v59;
      }
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v54 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v57 << 8);
      v37 = v220;
      v53 = v221;
      goto LABEL_30;
    }
    v55 = v44;
    v34 = v211;
LABEL_45:
    if (v41)
    {
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
    goto LABEL_46;
  }
  swift_unknownObjectRetain();
  outlined retain of AttributedString.Runs((uint64_t)v268);
  v52 = swift_unknownObjectRetain();
  v53 = v221;
  v54 = specialized Rope._endPath.getter(v52);
  result = swift_unknownObjectRelease();
  v55 = 0;
  v41 = 0;
  if (v35)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v56 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v210, v54, v55, v35, v53);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v56 = 0;
LABEL_48:
  v207 = (char *)v37 - v41;
  if (__OFSUB__(v37, v41))
  {
LABEL_205:
    __break(1u);
    goto LABEL_206;
  }
  v63 = v209;
  v64 = *(_OWORD *)(v209 + 32);
  v267[3] = *(_OWORD *)(v209 + 16);
  v267[4] = v64;
  v267[5] = *(_OWORD *)(v209 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v41))
  {
LABEL_206:
    __break(1u);
    goto LABEL_207;
  }
  v180 = BigString.UTF8View.index(_:offsetBy:)();
  v66 = v65;
  v177 = v68;
  v178 = v67;
  result = outlined release of Locale((uint64_t)&v255);
  v198 = *((_QWORD *)&v269 + 1);
  if (v56 >= *((uint64_t *)&v269 + 1))
  {
LABEL_207:
    __break(1u);
    goto LABEL_208;
  }
  if (v210 != *(_QWORD *)(v209 + 88))
  {
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
    goto LABEL_211;
  }
  v175 = v66;
  v69 = *(uint64_t **)(v209 + 64);
  if (v55)
  {
    v70 = v55 + 24 * ((v54 >> ((4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C)) & 0xF);
    v213 = v54;
    v71 = v56;
    v73 = *(_QWORD *)(v70 + 32);
    v72 = *(_QWORD *)(v70 + 40);
    swift_bridgeObjectRetain();
    v179 = v72;
    v56 = v71;
    result = swift_bridgeObjectRetain();
    v74 = v210;
    v75 = v210;
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v54, (uint64_t)v69);
    v73 = v76;
    v179 = v77;
    result = swift_unknownObjectRelease();
    v69 = *(uint64_t **)(v209 + 64);
    v75 = *(_QWORD *)(v209 + 88);
    v74 = v210;
  }
  v176 = (__int128 *)(v209 + 16);
  v204 = v56 + 1;
  *(_QWORD *)&v243 = v74;
  *((_QWORD *)&v243 + 1) = v54;
  v220 = (__int128 *)&v261;
  *(_QWORD *)&v244 = v55;
  v197 = (uint64_t *)(v212 + 40);
  v216 = (char *)v247 + 8;
  v217 = v73;
LABEL_56:
  if (v74 != v75)
    goto LABEL_198;
  v201 = v75;
  v213 = v54;
  if (v55)
  {
    v78 = *(_QWORD *)(v55 + 24 * ((v54 >> ((4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v78 = specialized Rope._Node.subscript.getter(v54, (uint64_t)v69);
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v79 = &v207[v78];
  if (__OFADD__(v207, v78))
    goto LABEL_199;
  if (v69)
  {
    v80 = ((-15 << ((4 * *((_BYTE *)v69 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v69 + 18) | ((unint64_t)*((unsigned __int16 *)v69 + 8) << ((4 * *((_BYTE *)v69 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
  }
  else
  {
    v80 = 0;
  }
  v81 = v213;
  v82 = v217;
  if (v213 >= v80)
    goto LABEL_200;
  v202 = v55;
  if (v55)
  {
    v83 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
    v84 = ((v213 >> v83) & 0xF) + 1;
    if (v84 < *(unsigned __int16 *)(v55 + 16))
    {
      v203 = (v84 << v83) | ((-15 << v83) - 1) & v213;
      result = swift_unknownObjectRelease_n();
      v85 = (uint64_t)v216;
LABEL_71:
      v69 = (uint64_t *)v244;
      goto LABEL_79;
    }
  }
  v86 = *((unsigned __int8 *)v69 + 18);
  v87 = (4 * v86 + 8) & 0x3C;
  v88 = (v213 >> v87) & 0xF;
  *(_QWORD *)&v258 = v88;
  if (v86)
  {
    swift_unknownObjectRetain();
    v82 = v217;
    v89 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v69 + 3), (uint64_t *)&v258, (uint64_t)&v243, (uint64_t)v69, v86);
    result = swift_unknownObjectRelease();
    v85 = (uint64_t)v216;
    if ((v89 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v203 = *((_QWORD *)&v243 + 1);
      v81 = v213;
      goto LABEL_71;
    }
  }
  else
  {
    v90 = v88 + 1;
    if (v88 + 1 < (unint64_t)*((unsigned __int16 *)v69 + 8))
    {
      result = swift_unknownObjectRelease_n();
      v81 = v213;
      v203 = (v90 << v87) | ((-15 << v87) - 1) & v213;
      v55 = v202;
      v85 = (uint64_t)v216;
      goto LABEL_79;
    }
    v55 = v202;
    v85 = (uint64_t)v216;
  }
  if (v69)
  {
    v91 = *((unsigned __int8 *)v69 + 18);
    v92 = *((unsigned __int16 *)v69 + 8);
    result = swift_unknownObjectRelease_n();
    v93 = (4 * v91 + 8) & 0x3C;
    v94 = ((-15 << v93) - 1) & v91;
    v85 = (uint64_t)v216;
    v95 = v92 << v93;
    v55 = v202;
    v203 = v94 | v95;
  }
  else
  {
    v203 = 0;
  }
  v81 = v213;
  v69 = 0;
  *(_QWORD *)&v243 = v201;
LABEL_79:
  if (v204 != v198)
  {
    if ((_QWORD)v243 != *(_QWORD *)(v63 + 88))
    {
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }
    v210 = v243;
    v194 = (uint64_t)v69;
    v195 = v79;
    if (v69)
    {
      v96 = (char *)&v69[3 * ((v203 >> ((4 * *((_BYTE *)v69 + 18) + 8) & 0x3C)) & 0xF)];
      v97 = *((_QWORD *)v96 + 4);
      v98 = *((_QWORD *)v96 + 5);
      swift_bridgeObjectRetain();
      v199 = v98;
      swift_bridgeObjectRetain();
    }
    else
    {
      v99 = *(_QWORD *)(v63 + 64);
      swift_unknownObjectRetain();
      v82 = v217;
      specialized Rope._Node.subscript.getter(v203, v99);
      v199 = v100;
      v97 = v101;
      swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRetain();
    v102 = 0;
    v103 = v197;
    v221 = v97;
    while (1)
    {
      v105 = v102 + 1;
      if (__OFADD__(v102, 1))
      {
        __break(1u);
LABEL_193:
        __break(1u);
        goto LABEL_194;
      }
      v106 = *(v103 - 1);
      v107 = *v103;
      if (*(_QWORD *)(v82 + 16))
      {
        swift_bridgeObjectRetain_n();
        v108 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
        if ((v109 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v82 + 56) + 72 * v108, (uint64_t)&v238);
        }
        else
        {
          v242 = 0;
          v240 = 0u;
          v241 = 0u;
          v238 = 0u;
          v239 = 0u;
        }
        swift_bridgeObjectRelease();
        v97 = v221;
        if (!*(_QWORD *)(v221 + 16))
        {
LABEL_94:
          v237 = 0;
          v235 = 0u;
          v236 = 0u;
          v233 = 0u;
          v234 = 0u;
          goto LABEL_101;
        }
      }
      else
      {
        v242 = 0;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v97 + 16))
          goto LABEL_94;
      }
      swift_bridgeObjectRetain();
      v110 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
      if ((v111 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v97 + 56) + 72 * v110, (uint64_t)&v233);
      }
      else
      {
        v237 = 0;
        v235 = 0u;
        v236 = 0u;
        v233 = 0u;
        v234 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v69 = (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v238, (uint64_t)&v243, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v233, v85, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((_QWORD *)&v244 + 1))
      {
        if ((_QWORD)v248)
          goto LABEL_118;
        outlined destroy of Any?((uint64_t)&v243, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v233, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?((uint64_t)&v238, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v243, (uint64_t)v227, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!(_QWORD)v248)
        goto LABEL_117;
      v112 = *(_OWORD *)(v85 + 48);
      v224 = *(_OWORD *)(v85 + 32);
      v225 = v112;
      v226 = *(_QWORD *)(v85 + 64);
      v113 = *(_OWORD *)(v85 + 16);
      v222 = *(_OWORD *)v85;
      v223 = v113;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v227, (uint64_t)v267);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v222, (uint64_t)v266);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v267, (uint64_t)&v258, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v266, (uint64_t)v220, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v260)
      {
        if (!v262)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v258);
LABEL_86:
          v104 = 0;
          goto LABEL_87;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v258, (uint64_t)v263);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v220, (uint64_t)v257);
        v114 = v264;
        v215 = v265;
        v214 = __swift_project_boxed_opaque_existential_1(v263, v264);
        v219 = &v175;
        v115 = *(_QWORD *)(v114 - 8);
        MEMORY[0x1E0C80A78](v214);
        v117 = (char *)&v175 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v257, (uint64_t)v256);
        v118 = type metadata accessor for Optional();
        v218 = &v175;
        v119 = *(_QWORD *)(v118 - 8);
        MEMORY[0x1E0C80A78](v118);
        v121 = (char *)&v175 - v120;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v122 = swift_dynamicCast();
        v123 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56);
        if (v122)
        {
          v123(v121, 0, 1, v114);
          (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v117, v121, v114);
          v104 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
        }
        else
        {
          v123(v121, 1, 1, v114);
          (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v118);
          v104 = 0;
        }
        v34 = v211;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v257);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
        v85 = (uint64_t)v216;
        v82 = v217;
      }
      else
      {
        if (v262)
        {
          outlined destroy of Any?((uint64_t)v220, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }
        v104 = 1;
      }
LABEL_87:
      outlined destroy of Any?((uint64_t)v266, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v267, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v222);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v227);
      outlined destroy of Any?((uint64_t)&v243, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v233, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v238, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v104 & 1) == 0)
        goto LABEL_119;
LABEL_88:
      v103 += 2;
      ++v102;
      v97 = v221;
      if (v105 == v34)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v63 = v209;
        v74 = v210;
        v69 = *(uint64_t **)(v209 + 64);
        v75 = *(_QWORD *)(v209 + 88);
        v207 = v195;
        *(_QWORD *)&v243 = v210;
        v54 = v203;
        *((_QWORD *)&v243 + 1) = v203;
        v55 = v194;
        *(_QWORD *)&v244 = v194;
        v47 = __OFADD__(v204++, 1);
        if (!v47)
          goto LABEL_56;
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v227);
LABEL_118:
        outlined destroy of Any?((uint64_t)&v243, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v233, v69);
        outlined destroy of Any?((uint64_t)&v238, v69);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v63 = v209;
        v55 = v202;
        v81 = v213;
        goto LABEL_120;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_120:
  if (v201 != *(_QWORD *)(v63 + 88))
    goto LABEL_209;
  if (v55)
  {
    v124 = *(_QWORD *)(v55 + 24 * ((v81 >> ((4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v125 = *(_QWORD *)(v209 + 64);
    swift_unknownObjectRetain();
    v124 = specialized Rope._Node.subscript.getter(v81, v125);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v126 = &v207[v124];
  v127 = v176;
  if (__OFADD__(v207, v124))
    goto LABEL_210;
  v128 = v176[1];
  v267[0] = *v176;
  v267[1] = v128;
  v267[2] = v176[2];
  BigString.utf8.getter();
  result = v180;
  if (__OFSUB__(v126, v180 >> 11))
  {
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
    goto LABEL_213;
  }
  v129 = BigString.UTF8View.index(_:offsetBy:)();
  v131 = v130;
  v133 = v132;
  v135 = v134;
  result = outlined release of Locale((uint64_t)v256);
  if (v192 >= v129 >> 10)
    v136 = v129;
  else
    v136 = v193;
  if (v192 >= v129 >> 10)
    v137 = v131;
  else
    v137 = v191;
  if (v192 >= v129 >> 10)
    v138 = v133;
  else
    v138 = v190;
  if (v192 >= v129 >> 10)
    v139 = v135;
  else
    v139 = v189;
  v140 = *v127;
  v141 = v127[1];
  v266[2] = v127[2];
  v266[1] = v141;
  v266[0] = v140;
  if (v136 >> 10 < v196)
    goto LABEL_212;
  *(_QWORD *)&v233 = v200;
  *((_QWORD *)&v233 + 1) = v205;
  v234 = v206;
  *(_QWORD *)&v235 = v136;
  *((_QWORD *)&v235 + 1) = v137;
  *(_QWORD *)&v236 = v138;
  *((_QWORD *)&v236 + 1) = v139;
  v142 = v208;
  v143 = *(_QWORD *)(v208 + 16);
  if (!v143 || v196 == v136 >> 10)
    goto LABEL_153;
  outlined retain of Locale((uint64_t)v266);
  swift_bridgeObjectRetain();
  v144 = 40;
  v145 = v143;
  while (*(_QWORD *)(v142 + v144))
  {
    swift_bridgeObjectRelease();
    v144 += 16;
    if (!--v145)
    {
      swift_bridgeObjectRelease();
      goto LABEL_148;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v257);
  v227[0] = v200;
  v227[1] = v205;
  v228 = v206;
  v229 = v200;
  v230 = v205;
  v231 = v206;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, v227, (unint64_t *)&v243);
  result = outlined release of Locale((uint64_t)&v258);
  if (*((_QWORD *)&v246 + 1) != 2)
  {
    v136 = v245;
    if (v196 > (unint64_t)v245 >> 10)
      goto LABEL_220;
    v137 = *((_QWORD *)&v245 + 1);
    v139 = *((_QWORD *)&v246 + 1);
    v138 = v246;
  }
LABEL_148:
  *(_QWORD *)&v222 = v200;
  *((_QWORD *)&v222 + 1) = v205;
  v223 = v206;
  *(_QWORD *)&v224 = v136;
  *((_QWORD *)&v224 + 1) = v137;
  *(_QWORD *)&v225 = v138;
  *((_QWORD *)&v225 + 1) = v139;
  v146 = *(_QWORD *)(v142 + 16);
  if (!v146)
  {
LABEL_152:
    outlined release of Locale((uint64_t)v266);
LABEL_153:
    result = outlined release of AttributedString.Runs((uint64_t)v268);
    goto LABEL_154;
  }
  v147 = 40;
  while (!*(_QWORD *)(v142 + v147))
  {
    v147 += 16;
    if (!--v146)
      goto LABEL_152;
  }
  v221 = v137;
  swift_bridgeObjectRetain();
  v160 = (unint64_t *)(v142 + 40);
  v161 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v162 = *v160;
    if (*v160)
    {
      v163 = *(v160 - 1);
      if ((v162 & 0x2000000000000000) != 0 ? HIBYTE(v162) & 0xF : v163 & 0xFFFFFFFFFFFFLL)
      {
        if ((v162 & 0x1000000000000000) != 0)
        {
          v165 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v162 & 0x2000000000000000) != 0)
          {
            *(_QWORD *)&v243 = *(v160 - 1);
            *((_QWORD *)&v243 + 1) = v162 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v163 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            swift_bridgeObjectRetain();
          }
          v165 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v161 + 2) + 1, 1, v161);
        v167 = *((_QWORD *)v161 + 2);
        v166 = *((_QWORD *)v161 + 3);
        if (v167 >= v166 >> 1)
          v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v166 > 1), v167 + 1, 1, v161);
        *((_QWORD *)v161 + 2) = v167 + 1;
        *(_DWORD *)&v161[4 * v167 + 32] = v165;
      }
    }
    v160 += 2;
    --v143;
  }
  while (v143);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v263);
  v168 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v161);
  v170 = v169;
  v172 = v171;
  v174 = v173;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v243);
  outlined release of Locale((uint64_t)v266);
  result = outlined release of AttributedString.Runs((uint64_t)v268);
  v137 = v221;
  if (v174 == 2)
  {
LABEL_154:
    if (v188 == *(_QWORD *)(v209 + 88))
    {
      v221 = v139;
      if (v187)
      {
        v148 = *(_QWORD *)(v187 + 24 * ((v183 >> ((4 * *(_BYTE *)(v187 + 18) + 8) & 0x3C)) & 0xF) + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v149 = *(_QWORD *)(v209 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v183, v149);
        v148 = v150;
        swift_unknownObjectRelease();
      }
      v151 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v184 + 24) + 24))(*(_QWORD *)(v184 + 16), *(_QWORD *)(v184 + 24));
      if (*(_QWORD *)(v148 + 16)
        && (v153 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v152), (v154 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v148 + 56) + 72 * v153, (uint64_t)&v238);
      }
      else
      {
        v242 = 0;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v239 + 1))
      {
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v238, (uint64_t)&v232);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v156 = v186;
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v238);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v156, 0, 1, AssociatedTypeWitness);
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v238, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        v157 = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v186, 1, 1, v157);
      }
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v136 >> 10 >= (unint64_t)v185 >> 10)
      {
        v158 = v182;
        *v182 = v185;
        v158[1] = v181;
        *((_QWORD *)v158 + 4) = v136;
        *((_QWORD *)v158 + 5) = v137;
        v159 = v221;
        *((_QWORD *)v158 + 6) = v138;
        *((_QWORD *)v158 + 7) = v159;
        return result;
      }
      goto LABEL_214;
    }
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }
  if (v196 <= v168 >> 10)
  {
    v136 = v168;
    v137 = v170;
    v138 = v172;
    v139 = v174;
    goto LABEL_154;
  }
LABEL_221:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice1.index(before:));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t **a1, unint64_t *a2, uint64_t a3))()
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)();
  _OWORD *v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6[5] = v9;
  v10 = (char *)malloc(*(_QWORD *)(v9 + 64));
  v6[6] = (uint64_t)v10;
  v11 = AttributedString.Runs.AttributesSlice1.subscript.read(v6, a2, a3);
  v13 = v12;
  v6[7] = (uint64_t)v11;
  (*(void (**)(char *))(*(_QWORD *)(v7 - 8) + 16))(v10);
  v14 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  *(_OWORD *)v14 = *v13;
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v16;
  *((_OWORD *)v14 + 3) = v17;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>;
}

uint64_t (*AttributedString.Runs.AttributesSlice1.subscript.read(uint64_t *a1, unint64_t *a2, uint64_t a3))()
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;

  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  v8 = (char *)malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  AttributedString.Runs.AttributesSlice1.subscript.getter((uint64_t)v8, &v8[*(int *)(TupleTypeMetadata2 + 48)], a2, a3);
  return AttributedString.Runs.AttributesSlice1.subscript.read;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>, a3);
  JUMPOUT(0x186DA4550);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice1<A>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice1.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice1.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v6 = *a1;
  v7 = v3[11];
  v39 = v3[10];
  v40 = v7;
  v41 = *((_QWORD *)v3 + 24);
  v8 = v3[7];
  v35 = v3[6];
  v36 = v8;
  v9 = v3[9];
  v37 = v3[8];
  v38 = v9;
  v10 = v3[3];
  v31 = v3[2];
  v32 = v10;
  v11 = v3[5];
  v33 = v3[4];
  v34 = v11;
  v12 = (__n128)v3[1];
  v29 = *v3;
  v30 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18205C850;
  v14 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v6 + 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  outlined retain of AttributedString.Runs((uint64_t)&v29);
  *(_QWORD *)(v13 + 32) = v15(v14, a2);
  *(_QWORD *)(v13 + 40) = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v27, v14, a2);
  v17 = v28;
  if (v28 == 1)
  {
    v18 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v19 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_18205C850;
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v17;
  }
  v20 = v40;
  *(_OWORD *)(a3 + 160) = v39;
  *(_OWORD *)(a3 + 176) = v20;
  v21 = v41;
  v22 = v36;
  *(_OWORD *)(a3 + 96) = v35;
  *(_OWORD *)(a3 + 112) = v22;
  v23 = v38;
  *(_OWORD *)(a3 + 128) = v37;
  *(_OWORD *)(a3 + 144) = v23;
  v24 = v32;
  *(_OWORD *)(a3 + 32) = v31;
  *(_OWORD *)(a3 + 48) = v24;
  v25 = v34;
  *(_OWORD *)(a3 + 64) = v33;
  *(_OWORD *)(a3 + 80) = v25;
  result = v30;
  *(_OWORD *)a3 = v29;
  *(__n128 *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 192) = v21;
  *(_QWORD *)(a3 + 200) = v13;
  *(_QWORD *)(a3 + 208) = v18;
  return result;
}

__n128 AttributedString.Runs.AttributesSlice2.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  uint64_t v25[2];
  _QWORD v26[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18205F0D0;
  *(_QWORD *)(v12 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a2, a4);
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a3, a5);
  *(_QWORD *)(v12 + 56) = v14;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 32))(v26, a2, a4);
  v15 = v26[0];
  v16 = v26[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v25, a3, a5);
  v17 = specialized RangeReplaceableCollection.init(_contents:_:)(v15, v16, v25[0], v25[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v15, v16);
  v18 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a6 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a6 + 176) = v18;
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a6 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a6 + 112) = v20;
  v21 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a6 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a6 + 144) = v21;
  v22 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a6 + 48) = v22;
  v23 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a6 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a6 + 80) = v23;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(__n128 *)(a6 + 16) = result;
  *(_QWORD *)(a6 + 192) = v19;
  *(_QWORD *)(a6 + 200) = v12;
  *(_QWORD *)(a6 + 208) = v17;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice2.subscript.getter(uint64_t result, uint64_t a2, unint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  __int128 *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int v104;
  void (*v105)(char *, uint64_t, uint64_t, uint64_t);
  char *v106;
  unint64_t v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  __int128 *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 *v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  _OWORD *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 *v164;
  unint64_t *v165;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  int v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  __int128 *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char v203;
  unint64_t v204;
  int v205;
  char v206;
  unint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  int v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  __int128 *v221;
  uint64_t v222;
  __int128 *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  _QWORD *v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char v233;
  unint64_t v234;
  char v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  int v246;
  void (*v247)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v248;
  uint64_t v249;
  char *v250;
  __int128 v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  __int128 *v261;
  unint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char v279;
  uint64_t AssociatedTypeWitness;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD v310[2];
  uint64_t v311;
  uint64_t v312;
  char *v313;
  unint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  unint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  _OWORD *v339;
  char *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  char *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  _QWORD *v355;
  __int128 *v356;
  _QWORD *v357;
  __int128 *v358;
  _BYTE *v359;
  _BYTE *v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  _QWORD v366[9];
  _BYTE v367[40];
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _BYTE v376[24];
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  uint64_t v404;
  _BYTE v405[48];
  _BYTE v406[48];
  __int128 v407;
  uint64_t v408;
  _BYTE v409[24];
  uint64_t v410;
  _QWORD v411[3];
  uint64_t v412;
  char *v413;
  _OWORD v414[3];
  _OWORD v415[6];
  _QWORD v416[8];
  _OWORD v417[3];
  _QWORD v418[8];
  _QWORD v419[3];
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  _OWORD v434[4];
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  uint64_t v443;

  v330 = a5;
  v6 = *a4;
  v7 = a4[1];
  v344 = a4[2];
  v345 = v7;
  v343 = a4[3];
  v8 = *v5;
  v9 = v5[1];
  v10 = v5[2];
  v434[3] = v5[3];
  v434[2] = v10;
  v434[0] = v8;
  v434[1] = v9;
  v11 = v5[4];
  v12 = v5[5];
  v13 = v5[6];
  v438 = v5[7];
  v437 = v13;
  v435 = v11;
  v436 = v12;
  v14 = v5[8];
  v15 = v5[9];
  v16 = v5[10];
  v17 = v5[11];
  v443 = *((_QWORD *)v5 + 24);
  v442 = v17;
  v441 = v16;
  v439 = v14;
  v352 = v6;
  v18 = v6 >> 10;
  v440 = v15;
  if (v18 < *((_QWORD *)&v14 + 1) >> 10)
    goto LABEL_380;
  v331 = *((_QWORD *)&v441 + 1) >> 10;
  if (*((_QWORD *)&v441 + 1) >> 10 < v18)
    goto LABEL_380;
  v347 = *((_QWORD *)v5 + 25);
  v19 = *(_QWORD *)(v347 + 16);
  if (!v19)
  {
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
    goto LABEL_383;
  }
  v20 = *(_QWORD *)&v434[0];
  v21 = *(_QWORD *)(*(_QWORD *)&v434[0] + 64);
  v22 = *(_QWORD *)(*(_QWORD *)&v434[0] + 80);
  if (v21)
    v23 = *(_QWORD *)(*(_QWORD *)&v434[0] + 80);
  else
    v23 = 0;
  v358 = (__int128 *)(v352 >> 11);
  if (v23 < (uint64_t)(v352 >> 11))
    goto LABEL_382;
  v334 = v18;
  v357 = (_QWORD *)*((_QWORD *)v5 + 26);
  v337 = *((_QWORD *)&v440 + 1);
  v338 = v440;
  v332 = v441;
  v321 = *((_QWORD *)&v442 + 1);
  v322 = v442;
  v319 = a2;
  v320 = v443;
  v24 = *(_QWORD *)(*(_QWORD *)&v434[0] + 72);
  v25 = *(_QWORD *)(*(_QWORD *)&v434[0] + 88);
  v341 = *((_QWORD *)&v14 + 1);
  v342 = v25;
  v348 = *(_QWORD *)&v434[0];
  v353 = v19;
  v317 = a3;
  v318 = result;
  v323 = *((_QWORD *)&v441 + 1);
  v340 = (char *)(*((_QWORD *)&v14 + 1) >> 10);
  if (v21 && (uint64_t)v358 < v22 && *(_WORD *)(v21 + 16))
  {
    v26 = *(unsigned __int8 *)(v21 + 18);
    if (*(_BYTE *)(v21 + 18))
    {
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)v434);
      v27 = v358;
      v28 = v21;
      while (1)
      {
        v31 = *(unsigned __int16 *)(v28 + 16);
        if (!*(_WORD *)(v28 + 16))
          goto LABEL_14;
        v32 = *(_QWORD *)(v28 + 40);
        v33 = __OFSUB__(v27, v32);
        v34 = (__int128 *)((char *)v27 - v32);
        if (v33)
          goto LABEL_372;
        if (__OFADD__(v34, 1))
          goto LABEL_373;
        if ((uint64_t)v34 + 1 < 1)
        {
          v31 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v31 == 1)
          break;
        v35 = (uint64_t *)(v28 + 64);
        v36 = 1;
        while (1)
        {
          v37 = *v35;
          v35 += 3;
          v27 = (__int128 *)((char *)v34 - v37);
          if (__OFSUB__(v34, v37))
            goto LABEL_365;
          if (__OFADD__(v27, 1))
          {
LABEL_366:
            __break(1u);
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
LABEL_369:
            __break(1u);
            goto LABEL_370;
          }
          if ((uint64_t)v27 + 1 < 1)
            break;
          ++v36;
          v34 = v27;
          if (v31 == v36)
            goto LABEL_14;
        }
        v31 = v36;
        v27 = v34;
LABEL_15:
        v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
        v26 = ((-15 << v29) - 1) & v26 | (v31 << v29);
        v30 = *(_QWORD *)(v28 + 24 + 24 * v31);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v28 = v30;
        if (!*(_BYTE *)(v30 + 18))
          goto LABEL_32;
      }
      v27 = v34;
LABEL_14:
      if (!v27)
        goto LABEL_15;
LABEL_370:
      __break(1u);
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
      goto LABEL_379;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v434);
    v27 = v358;
    v30 = v21;
LABEL_32:
    v39 = *(unsigned __int16 *)(v30 + 16);
    if (*(_WORD *)(v30 + 16))
    {
      v40 = *(_QWORD *)(v30 + 24);
      v33 = __OFSUB__(v27, v40);
      v41 = (__int128 *)((char *)v27 - v40);
      v20 = v348;
      if (v33)
      {
LABEL_413:
        __break(1u);
        goto LABEL_414;
      }
      if (__OFADD__(v41, 1))
      {
LABEL_414:
        __break(1u);
        goto LABEL_415;
      }
      v42 = v30;
      if ((uint64_t)v41 + 1 < 1)
      {
        v39 = 0;
      }
      else
      {
        if ((_DWORD)v39 == 1)
        {
          v27 = v41;
          goto LABEL_45;
        }
        v43 = (uint64_t *)(v30 + 48);
        v44 = 1;
        while (1)
        {
          v45 = *v43;
          v43 += 3;
          v27 = (__int128 *)((char *)v41 - v45);
          if (__OFSUB__(v41, v45))
            goto LABEL_396;
          if (__OFADD__(v27, 1))
            goto LABEL_397;
          if ((uint64_t)v27 + 1 < 1)
            break;
          ++v44;
          v41 = v27;
          if (v39 == v44)
            goto LABEL_45;
        }
        v39 = v44;
        v27 = v41;
      }
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v335 = v26 & 0xFFFFFFFFFFFFF0FFLL | (v39 << 8);
      v38 = v42;
      v19 = v353;
      goto LABEL_30;
    }
    v42 = v30;
    v20 = v348;
LABEL_45:
    if (v27)
    {
LABEL_411:
      __break(1u);
      goto LABEL_412;
    }
    goto LABEL_46;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v434);
  v335 = specialized Rope._endPath.getter(v21);
  result = swift_unknownObjectRelease();
  v38 = 0;
  v27 = 0;
  if (v21)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v355 = (_QWORD *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v342, v335, v38, v21, v24);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v355 = 0;
LABEL_48:
  v350 = (char *)((char *)v358 - (char *)v27);
  if (__OFSUB__(v358, v27))
  {
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }
  v46 = *(_OWORD *)(v20 + 32);
  v431 = *(_OWORD *)(v20 + 16);
  v432 = v46;
  v433 = *(_OWORD *)(v20 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v27))
  {
LABEL_384:
    __break(1u);
    goto LABEL_385;
  }
  v47 = (_OWORD *)(v20 + 16);
  v48 = v343;
  v329 = BigString.UTF8View.index(_:offsetBy:)();
  v326 = v50;
  v327 = v49;
  v325 = v51;
  result = outlined release of Locale((uint64_t)&v388);
  v52 = v352;
  v328 = v345;
  v333 = v344;
  v336 = *((_QWORD *)&v435 + 1);
  v339 = (_OWORD *)(v20 + 16);
  v316 = v38;
  if (v355 == *((_QWORD **)&v435 + 1))
    goto LABEL_147;
  if (v342 != *(_QWORD *)(v20 + 88))
  {
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }
  if (v38)
  {
    v53 = v38 + 24 * ((v335 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF);
    v55 = *(_QWORD *)(v53 + 32);
    v54 = *(_QWORD *)(v53 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v56 = *(_QWORD *)(v20 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v335, v56);
    v55 = v57;
    v54 = v58;
    result = swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v434[0] + 1) >= (uint64_t)v355)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_115;
  }
  v311 = *((_QWORD *)&v434[0] + 1);
  v312 = v54;
  v359 = v376;
  v356 = (__int128 *)v409;
  v315 = (uint64_t *)(v347 + 40);
  v59 = v335;
  v60 = v38;
  v333 = v55;
LABEL_57:
  v62 = *(_QWORD *)(v20 + 64);
  v61 = *(_QWORD *)(v20 + 72);
  v63 = *(_QWORD *)(v20 + 88);
  v368 = v342;
  v369 = v59;
  v370 = v60;
  if (v342 != v63)
    goto LABEL_404;
  v64 = v59;
  v360 = (_BYTE *)v61;
  v65 = v19;
  if (v62)
  {
    v66 = *(unsigned __int8 *)(v62 + 18);
    v67 = v60;
    result = swift_unknownObjectRetain();
    v60 = v67;
    if (v64 <= v66)
      goto LABEL_405;
  }
  else if (!v59)
  {
    goto LABEL_405;
  }
  if (!v60 || (v68 = (4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C, ((v64 >> v68) & 0xF) == 0))
  {
    v70 = *(unsigned __int8 *)(v62 + 18);
    v71 = (4 * v70 + 8) & 0x3C;
    v72 = (v64 >> v71) & 0xF;
    *(_QWORD *)&v407 = v72;
    if (v70)
    {
      swift_unknownObjectRetain();
      v73 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v62 + 16, v62 + 24, (uint64_t *)&v407, (uint64_t)&v368, v70);
      result = swift_unknownObjectRelease();
      if ((v73 & 1) == 0)
        goto LABEL_410;
      if (v368 != v342)
        goto LABEL_406;
      v60 = v370;
      v74 = v369;
      v19 = v353;
      if (v370)
        goto LABEL_69;
    }
    else
    {
      if (!v72)
        goto LABEL_410;
      v19 = v65;
      v74 = ((v72 - 1) << v71) | ((-15 << v71) - 1) & v64;
      v369 = v74;
      v370 = v62;
      v60 = v62;
      if (v62)
      {
LABEL_69:
        v69 = v74;
        goto LABEL_70;
      }
    }
    swift_unknownObjectRetain();
    v69 = v74;
    v76 = specialized Rope._Node.subscript.getter(v74, v62);
    swift_unknownObjectRelease();
    v324 = 0;
    v77 = 1;
    goto LABEL_74;
  }
  v69 = ((((v64 >> v68) & 0xF) - 1) << v68) | ((-15 << v68) - 1) & v64;
  v369 = v69;
  v19 = v65;
LABEL_70:
  v75 = (v69 >> ((4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C)) & 0xF;
  v324 = v60;
  v76 = *(_QWORD *)(v60 + 24 * v75 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = 0;
LABEL_74:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v350, v76))
    goto LABEL_407;
  if (v342 != *(_QWORD *)(v20 + 88))
    goto LABEL_408;
  v313 = &v350[-v76];
  v314 = v69;
  if ((v77 & 1) != 0)
  {
    v78 = *(_QWORD *)(v20 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v69, v78);
    v328 = v79;
    v81 = v80;
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = v324 + 24 * ((v69 >> ((4 * *(_BYTE *)(v324 + 18) + 8) & 0x3C)) & 0xF);
    v81 = *(_QWORD *)(v82 + 32);
    v83 = *(_QWORD *)(v82 + 40);
    swift_bridgeObjectRetain();
    v328 = v83;
    swift_bridgeObjectRetain();
  }
  v355 = (_QWORD *)((char *)v355 - 1);
  result = swift_bridgeObjectRetain();
  v84 = 0;
  v85 = v315;
  v360 = (_BYTE *)v81;
  while (1)
  {
    v87 = v84 + 1;
    if (__OFADD__(v84, 1))
      goto LABEL_369;
    v88 = *(v85 - 1);
    v89 = *v85;
    if (*(_QWORD *)(v55 + 16))
    {
      swift_bridgeObjectRetain_n();
      v90 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v89);
      if ((v91 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v55 + 56) + 72 * v90, (uint64_t)&v399);
      }
      else
      {
        v403 = 0;
        v402 = 0u;
        v401 = 0u;
        v400 = 0u;
        v399 = 0u;
      }
      swift_bridgeObjectRelease();
      v81 = (uint64_t)v360;
      if (!*((_QWORD *)v360 + 2))
      {
LABEL_89:
        v397 = 0;
        v396 = 0u;
        v395 = 0u;
        v394 = 0u;
        v393 = 0u;
        goto LABEL_96;
      }
    }
    else
    {
      v403 = 0;
      v402 = 0u;
      v401 = 0u;
      v400 = 0u;
      v399 = 0u;
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(v81 + 16))
        goto LABEL_89;
    }
    swift_bridgeObjectRetain();
    v92 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v89);
    if ((v93 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v81 + 56) + 72 * v92, (uint64_t)&v393);
    }
    else
    {
      v397 = 0;
      v396 = 0u;
      v395 = 0u;
      v394 = 0u;
      v393 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_96:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v399, (uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v393, (uint64_t)v359, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v371)
    {
      if (v377)
        goto LABEL_113;
      outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v393, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_83;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v368, (uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v377)
      break;
    v94 = *((_OWORD *)v359 + 3);
    v380 = *((_OWORD *)v359 + 2);
    v381 = v94;
    v382 = *((_QWORD *)v359 + 8);
    v95 = *((_OWORD *)v359 + 1);
    v378 = *(_OWORD *)v359;
    v379 = v95;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v383, (uint64_t)v366);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v378, (uint64_t)&v361);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v366, (uint64_t)&v407, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v361, (uint64_t)v356, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v408)
    {
      if (!v410)
      {
        v86 = 1;
        goto LABEL_82;
      }
      outlined destroy of Any?((uint64_t)v356, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_81:
      v86 = 0;
      goto LABEL_82;
    }
    if (!v410)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
      goto LABEL_81;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v419);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v356, (uint64_t)v418);
    v96 = v420;
    v349 = v421;
    v346 = __swift_project_boxed_opaque_existential_1(v419, v420);
    v354 = v310;
    v97 = *(_QWORD *)(v96 - 8);
    MEMORY[0x1E0C80A78](v346);
    v99 = (char *)v310 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v418, (uint64_t)v416);
    v100 = type metadata accessor for Optional();
    v351 = (unint64_t)v310;
    v101 = *(_QWORD *)(v100 - 8);
    MEMORY[0x1E0C80A78](v100);
    v103 = (char *)v310 - v102;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v104 = swift_dynamicCast();
    v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    if (v104)
    {
      v105(v103, 0, 1, v96);
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v99, v103, v96);
      v86 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
    }
    else
    {
      v105(v103, 1, 1, v96);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
      v86 = 0;
    }
    v20 = v348;
    v55 = v333;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v418);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v419);
    v19 = v353;
LABEL_82:
    outlined destroy of Any?((uint64_t)&v361, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v366, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v378);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
    outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v393, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v86 & 1) == 0)
      goto LABEL_114;
LABEL_83:
    v85 += 2;
    ++v84;
    v81 = (uint64_t)v360;
    if (v87 == v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v106 = v313;
      v59 = v314;
      v350 = v313;
      v47 = v339;
      v60 = v324;
      if (v311 >= (uint64_t)v355)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v350 = v106;
        goto LABEL_115;
      }
      goto LABEL_57;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
LABEL_113:
  outlined destroy of Any?((uint64_t)&v368, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v393, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = v339;
LABEL_115:
  v107 = v329;
  v108 = v47[1];
  v428 = *v47;
  v429 = v108;
  v430 = v47[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(v350, v107 >> 11))
    goto LABEL_402;
  v109 = BigString.UTF8View.index(_:offsetBy:)();
  v111 = v110;
  v113 = v112;
  v115 = v114;
  outlined release of Locale((uint64_t)&v389);
  if ((unint64_t)v340 >= v109 >> 10)
    v116 = v341;
  else
    v116 = v109;
  if ((unint64_t)v340 >= v109 >> 10)
    v117 = v338;
  else
    v117 = v111;
  if ((unint64_t)v340 >= v109 >> 10)
    v118 = v337;
  else
    v118 = v113;
  if ((unint64_t)v340 >= v109 >> 10)
    v119 = v332;
  else
    v119 = v115;
  v120 = v47[1];
  v425 = *v47;
  v426 = v120;
  v427 = v47[2];
  BigString.unicodeScalars.getter();
  v52 = v116;
  v121 = BigString.UnicodeScalarView.index(after:)();
  v123 = v122;
  v125 = v124;
  v127 = v126;
  result = outlined release of Locale((uint64_t)&v390);
  v128 = *v47;
  v129 = v47[1];
  v417[2] = v47[2];
  v417[1] = v129;
  v417[0] = v128;
  if (v121 >> 10 < v52 >> 10)
  {
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
    goto LABEL_409;
  }
  v419[0] = v52;
  v328 = v117;
  v419[1] = v117;
  v333 = v118;
  v419[2] = v118;
  v420 = v119;
  v421 = (_QWORD *)v121;
  v422 = v123;
  v423 = v125;
  v424 = v127;
  v130 = v357[2];
  v48 = v119;
  if (!v130 || v52 >> 10 == v121 >> 10)
  {
LABEL_146:
    v20 = v348;
LABEL_147:
    v327 = v52;
    result = outlined release of AttributedString.Runs((uint64_t)v434);
    goto LABEL_148;
  }
  v131 = v121;
  v360 = (_BYTE *)(v121 >> 10);
  v327 = v52;
  outlined retain of Locale((uint64_t)v417);
  swift_bridgeObjectRetain();
  v132 = 5;
  v133 = v130;
  while (v357[v132])
  {
    swift_bridgeObjectRelease();
    v132 += 2;
    if (!--v133)
    {
      swift_bridgeObjectRelease();
      goto LABEL_140;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v134 = BigString.startIndex.getter();
  v135 = (unint64_t)v360;
  if ((unint64_t)v360 <= v134 >> 10)
  {
LABEL_140:
    v52 = v327;
    v141 = v333;
LABEL_141:
    v416[0] = v52;
    v416[1] = v328;
    v333 = v141;
    v416[2] = v141;
    v416[3] = v48;
    v416[4] = v131;
    v416[5] = v123;
    v416[6] = v125;
    v416[7] = v127;
    v142 = v357[2];
    if (v142)
    {
      v143 = 5;
      while (!v357[v143])
      {
        v143 += 2;
        if (!--v142)
          goto LABEL_145;
      }
      v327 = v52;
      v165 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v166 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v167 = *v165;
        if (*v165)
        {
          v168 = *(v165 - 1);
          if ((v167 & 0x2000000000000000) != 0 ? HIBYTE(v167) & 0xF : v168 & 0xFFFFFFFFFFFFLL)
          {
            if ((v167 & 0x1000000000000000) != 0)
            {
              v170 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v167 & 0x2000000000000000) != 0)
              {
                v368 = *(v165 - 1);
                v369 = v167 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v168 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
              }
              v170 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v166 + 2) + 1, 1, v166);
            v172 = *((_QWORD *)v166 + 2);
            v171 = *((_QWORD *)v166 + 3);
            if (v172 >= v171 >> 1)
              v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v171 > 1), v172 + 1, 1, v166);
            *((_QWORD *)v166 + 2) = v172 + 1;
            *(_DWORD *)&v166[4 * v172 + 32] = v170;
          }
        }
        v165 += 2;
        --v130;
      }
      while (v130);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v398);
      v173 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v166);
      v175 = v174;
      v177 = v176;
      v179 = v178;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v399);
      outlined release of Locale((uint64_t)v417);
      result = outlined release of AttributedString.Runs((uint64_t)v434);
      v20 = v348;
      if (v179 != 2)
      {
        if ((unint64_t)v360 < v173 >> 10)
        {
LABEL_420:
          __break(1u);
          goto LABEL_421;
        }
        v327 = v173;
        v328 = v175;
        v333 = v177;
        v48 = v179;
      }
LABEL_148:
      if (v334 >= v331)
      {
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
      v144 = *(_QWORD *)(v20 + 64);
      v145 = *(_QWORD *)(v20 + 72);
      v146 = *(_QWORD *)(v20 + 80);
      v346 = *(_QWORD **)(v20 + 88);
      v315 = (uint64_t *)v48;
      if (v144)
      {
        if (v146 < (uint64_t)v358)
        {
LABEL_400:
          __break(1u);
          goto LABEL_401;
        }
        if (*(_WORD *)(v144 + 16) && (uint64_t)v358 < v146)
        {
          v360 = (_BYTE *)v145;
          v147 = *(unsigned __int8 *)(v144 + 18);
          if (*(_BYTE *)(v144 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v434);
            result = swift_unknownObjectRetain();
            v148 = v358;
            v149 = v144;
            while (1)
            {
              v152 = *(unsigned __int16 *)(v149 + 16);
              if (!*(_WORD *)(v149 + 16))
                goto LABEL_156;
              v153 = *(_QWORD *)(v149 + 40);
              v33 = __OFSUB__(v148, v153);
              v154 = (__int128 *)((char *)v148 - v153);
              if (v33)
                goto LABEL_374;
              if (__OFADD__(v154, 1))
                goto LABEL_375;
              if ((uint64_t)v154 + 1 < 1)
              {
                v152 = 0;
              }
              else
              {
                if ((_DWORD)v152 == 1)
                {
                  v148 = v154;
LABEL_156:
                  if (v148)
                    goto LABEL_371;
                  goto LABEL_157;
                }
                v155 = (uint64_t *)(v149 + 64);
                v156 = 1;
                while (1)
                {
                  v157 = *v155;
                  v155 += 3;
                  v148 = (__int128 *)((char *)v154 - v157);
                  if (__OFSUB__(v154, v157))
                    goto LABEL_367;
                  if (__OFADD__(v148, 1))
                    goto LABEL_368;
                  if ((uint64_t)v148 + 1 < 1)
                    break;
                  ++v156;
                  v154 = v148;
                  if (v152 == v156)
                    goto LABEL_156;
                }
                v152 = v156;
                v148 = v154;
              }
LABEL_157:
              v150 = (4 * *(_BYTE *)(v149 + 18) + 8) & 0x3C;
              v147 = ((-15 << v150) - 1) & v147 | (v152 << v150);
              v151 = *(_QWORD *)(v149 + 24 + 24 * v152);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v149 = v151;
              if (!*(_BYTE *)(v151 + 18))
                goto LABEL_175;
            }
          }
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v434);
          result = swift_unknownObjectRetain();
          v148 = v358;
          v151 = v144;
LABEL_175:
          v162 = *(unsigned __int16 *)(v151 + 16);
          v341 = v151;
          if ((_DWORD)v162)
          {
            v163 = *(_QWORD *)(v151 + 24);
            v33 = __OFSUB__(v148, v163);
            v164 = (__int128 *)((char *)v148 - v163);
            v20 = v348;
            if (v33)
            {
LABEL_415:
              __break(1u);
LABEL_416:
              __break(1u);
LABEL_417:
              __break(1u);
              goto LABEL_418;
            }
            if (__OFADD__(v164, 1))
              goto LABEL_416;
            if ((uint64_t)v164 + 1 < 1)
            {
              v158 = v47;
              v162 = 0;
            }
            else
            {
              if ((_DWORD)v162 == 1)
              {
                v148 = v164;
LABEL_211:
                if (v148)
                {
LABEL_412:
                  __break(1u);
                  goto LABEL_413;
                }
                v158 = v47;
                goto LABEL_213;
              }
              v180 = (uint64_t *)(v341 + 48);
              v181 = 1;
              while (1)
              {
                v182 = *v180;
                v180 += 3;
                v148 = (__int128 *)((char *)v164 - v182);
                if (__OFSUB__(v164, v182))
                  goto LABEL_398;
                if (__OFADD__(v148, 1))
                  goto LABEL_399;
                if ((uint64_t)v148 + 1 < 1)
                  break;
                ++v181;
                v164 = v148;
                if (v162 == v181)
                  goto LABEL_211;
              }
              v158 = v47;
              v162 = v181;
              v148 = v164;
            }
LABEL_213:
            swift_unknownObjectRelease();
            v183 = v341;
            swift_unknownObjectRelease();
            v184 = v147 & 0xFFFFFFFFFFFFF0FFLL;
            v160 = v183;
            v159 = v184 | (v162 << 8);
            v145 = (uint64_t)v360;
            goto LABEL_173;
          }
          v20 = v348;
          goto LABEL_211;
        }
      }
      else if (v352 >= 0x800)
      {
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
        goto LABEL_411;
      }
      v158 = v47;
      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v434);
      swift_unknownObjectRetain();
      v159 = specialized Rope._endPath.getter(v144);
      result = swift_unknownObjectRelease();
      v160 = 0;
      v148 = 0;
      if (!v144)
      {
        v161 = 0;
LABEL_215:
        v340 = (char *)((char *)v358 - (char *)v148);
        if (__OFSUB__(v358, v148))
        {
LABEL_386:
          __break(1u);
          goto LABEL_387;
        }
        v185 = v158[1];
        v415[3] = *v158;
        v415[4] = v185;
        v415[5] = v158[2];
        result = BigString.utf8.getter();
        if (__OFSUB__(0, v148))
        {
LABEL_387:
          __break(1u);
          goto LABEL_388;
        }
        v186 = BigString.UTF8View.index(_:offsetBy:)();
        v188 = v187;
        v312 = v190;
        v313 = v189;
        result = outlined release of Locale((uint64_t)&v404);
        if (v161 >= v336)
        {
LABEL_388:
          __break(1u);
          goto LABEL_389;
        }
        v191 = v346;
        if (v346 != *(_QWORD **)(v20 + 88))
        {
LABEL_389:
          __break(1u);
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
          goto LABEL_392;
        }
        v310[1] = v188;
        v311 = v186;
        v192 = *(_QWORD *)(v20 + 64);
        if (v160)
        {
          v193 = v160 + 24 * ((v159 >> ((4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C)) & 0xF);
          v194 = *(_QWORD *)(v193 + 40);
          v359 = *(_BYTE **)(v193 + 32);
          swift_bridgeObjectRetain();
          v314 = v194;
          result = swift_bridgeObjectRetain();
          v195 = v191;
        }
        else
        {
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v159, v192);
          v359 = (_BYTE *)v196;
          v314 = v197;
          result = swift_unknownObjectRelease();
          v192 = *(_QWORD *)(v20 + 64);
          v195 = *(_QWORD **)(v20 + 88);
        }
        v198 = v353;
        v351 = v159;
        v338 = v161 + 1;
        v360 = v376;
        v368 = (unint64_t)v191;
        v369 = v159;
        v358 = (__int128 *)v409;
        v326 = (uint64_t *)(v347 + 40);
        v370 = v160;
        v199 = v339;
LABEL_223:
        if (v191 != v195)
          goto LABEL_376;
        v332 = (unint64_t)v195;
        if (v160)
        {
          v200 = *(_QWORD *)(v160 + 24 * ((v351 >> ((4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v200 = specialized Rope._Node.subscript.getter(v351, v192);
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (__OFADD__(v340, v200))
          goto LABEL_377;
        v325 = &v340[v200];
        if (v192)
        {
          v201 = ((-15 << ((4 * *(_BYTE *)(v192 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v192 + 18) | ((unint64_t)*(unsigned __int16 *)(v192 + 16) << ((4 * *(_BYTE *)(v192 + 18) + 8) & 0x3C));
          result = swift_unknownObjectRetain();
        }
        else
        {
          v201 = 0;
        }
        v191 = v357;
        if (v351 >= v201)
          goto LABEL_378;
        v202 = v351;
        v341 = v160;
        if (v160)
        {
          v203 = (4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C;
          v204 = ((v351 >> v203) & 0xF) + 1;
          if (v204 < *(unsigned __int16 *)(v160 + 16))
          {
            v337 = (v204 << v203) | ((-15 << v203) - 1) & v351;
            result = swift_unknownObjectRelease_n();
LABEL_238:
            v209 = v370;
LABEL_239:
            v210 = (uint64_t)v359;
            goto LABEL_247;
          }
        }
        v205 = *(unsigned __int8 *)(v192 + 18);
        v206 = (4 * v205 + 8) & 0x3C;
        v207 = (v351 >> v206) & 0xF;
        *(_QWORD *)&v407 = v207;
        if (v205)
        {
          swift_unknownObjectRetain();
          v208 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v192 + 24, (uint64_t *)&v407, (uint64_t)&v368, v192, v205);
          result = swift_unknownObjectRelease();
          v160 = v341;
          if ((v208 & 1) != 0)
          {
            result = swift_unknownObjectRelease_n();
            v337 = v369;
            v202 = v351;
            goto LABEL_238;
          }
        }
        else
        {
          v211 = v207 + 1;
          if (v207 + 1 < *(unsigned __int16 *)(v192 + 16))
          {
            result = swift_unknownObjectRelease_n();
            v212 = v211 << v206;
            v202 = v351;
            v337 = v212 | ((-15 << v206) - 1) & v351;
            v209 = v192;
            v160 = v341;
            goto LABEL_239;
          }
          v160 = v341;
        }
        if (v192)
        {
          v213 = *(unsigned __int8 *)(v192 + 18);
          v214 = *(unsigned __int16 *)(v192 + 16);
          result = swift_unknownObjectRelease_n();
          v215 = (4 * v213 + 8) & 0x3C;
          v216 = ((-15 << v215) - 1) & v213;
          v217 = v214 << v215;
          v160 = v341;
          v337 = v216 | v217;
        }
        else
        {
          v337 = 0;
        }
        v210 = (uint64_t)v359;
        v209 = 0;
        v368 = v332;
        v202 = v351;
LABEL_247:
        if (v338 != v336)
        {
          v218 = *(_QWORD *)(v20 + 88);
          v346 = (_QWORD *)v368;
          if (v368 != v218)
          {
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
            goto LABEL_381;
          }
          v324 = v209;
          if (v209)
          {
            v219 = v209 + 24 * ((v337 >> ((4 * *(_BYTE *)(v209 + 18) + 8) & 0x3C)) & 0xF);
            v221 = *(__int128 **)(v219 + 32);
            v220 = *(_QWORD *)(v219 + 40);
            swift_bridgeObjectRetain();
            v329 = v220;
            swift_bridgeObjectRetain();
          }
          else
          {
            v222 = *(_QWORD *)(v20 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v337, v222);
            v221 = v223;
            v329 = v224;
            v210 = (uint64_t)v359;
            swift_unknownObjectRelease();
          }
          result = swift_bridgeObjectRetain();
          v225 = 0;
          v226 = v326;
          v356 = v221;
          while (1)
          {
            v229 = v225 + 1;
            if (__OFADD__(v225, 1))
            {
              __break(1u);
LABEL_365:
              __break(1u);
              goto LABEL_366;
            }
            v231 = *(v226 - 1);
            v230 = *v226;
            if (*(_QWORD *)(v210 + 16))
            {
              swift_bridgeObjectRetain_n();
              v232 = specialized __RawDictionaryStorage.find<A>(_:)(v231, v230);
              if ((v233 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v210 + 56) + 72 * v232, (uint64_t)&v383);
              }
              else
              {
                v387 = 0;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }
              swift_bridgeObjectRelease();
              if (!*((_QWORD *)v221 + 2))
              {
LABEL_262:
                v382 = 0;
                v380 = 0u;
                v381 = 0u;
                v378 = 0u;
                v379 = 0u;
                goto LABEL_269;
              }
            }
            else
            {
              v387 = 0;
              v385 = 0u;
              v386 = 0u;
              v383 = 0u;
              v384 = 0u;
              swift_bridgeObjectRetain();
              if (!*((_QWORD *)v221 + 2))
                goto LABEL_262;
            }
            swift_bridgeObjectRetain();
            v234 = specialized __RawDictionaryStorage.find<A>(_:)(v231, v230);
            if ((v235 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*((_QWORD *)v221 + 7) + 72 * v234, (uint64_t)&v378);
            }
            else
            {
              v382 = 0;
              v380 = 0u;
              v381 = 0u;
              v378 = 0u;
              v379 = 0u;
            }
            swift_bridgeObjectRelease();
            v210 = (uint64_t)v359;
LABEL_269:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v383, (uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v378, (uint64_t)v360, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v371)
            {
              if (v377)
                goto LABEL_286;
              outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v378, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              result = outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_256;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v368, (uint64_t)v366, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v377)
              goto LABEL_285;
            v236 = *((_OWORD *)v360 + 3);
            v363 = *((_OWORD *)v360 + 2);
            v364 = v236;
            v365 = *((_QWORD *)v360 + 8);
            v237 = *((_OWORD *)v360 + 1);
            v361 = *(_OWORD *)v360;
            v362 = v237;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v366, (uint64_t)v415);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v361, (uint64_t)v414);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v415, (uint64_t)&v407, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v414, (uint64_t)v358, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v408)
            {
              if (!v410)
              {
                v227 = v191;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
LABEL_254:
                v228 = 0;
                goto LABEL_255;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v411);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v358, (uint64_t)v406);
              v238 = v412;
              v350 = v413;
              v349 = __swift_project_boxed_opaque_existential_1(v411, v412);
              v355 = v310;
              v239 = *(_QWORD *)(v238 - 8);
              MEMORY[0x1E0C80A78](v349);
              v241 = (char *)v310 - ((v240 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v406, (uint64_t)v405);
              v242 = type metadata accessor for Optional();
              v354 = v310;
              v243 = *(_QWORD *)(v242 - 8);
              MEMORY[0x1E0C80A78](v242);
              v245 = (char *)v310 - v244;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v246 = swift_dynamicCast();
              v247 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v239 + 56);
              if (v246)
              {
                v247(v245, 0, 1, v238);
                (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v241, v245, v238);
                v228 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v239 + 8))(v241, v238);
              }
              else
              {
                v247(v245, 1, 1, v238);
                (*(void (**)(char *, uint64_t))(v243 + 8))(v245, v242);
                v228 = 0;
              }
              v227 = v357;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v406);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v411);
              v198 = v353;
              v210 = (uint64_t)v359;
            }
            else
            {
              v227 = v191;
              if (v410)
              {
                outlined destroy of Any?((uint64_t)v358, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_254;
              }
              v228 = 1;
            }
LABEL_255:
            outlined destroy of Any?((uint64_t)v414, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v415, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v361);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
            outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v378, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            v191 = v227;
            v221 = v356;
            if ((v228 & 1) == 0)
              goto LABEL_287;
LABEL_256:
            v226 += 2;
            ++v225;
            if (v229 == v198)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v20 = v348;
              v192 = *(_QWORD *)(v348 + 64);
              v195 = *(_QWORD **)(v348 + 88);
              v340 = v325;
              v191 = v346;
              v368 = (unint64_t)v346;
              v369 = v337;
              v160 = v324;
              v351 = v337;
              v370 = v324;
              v199 = v339;
              v33 = __OFADD__(v338++, 1);
              if (!v33)
                goto LABEL_223;
              __break(1u);
LABEL_285:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
LABEL_286:
              outlined destroy of Any?((uint64_t)&v368, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v378, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_287:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v20 = v348;
              v199 = v339;
              v160 = v341;
              v202 = v351;
              goto LABEL_288;
            }
          }
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
LABEL_288:
        if (v332 != *(_QWORD *)(v20 + 88))
          goto LABEL_390;
        if (v160)
        {
          v248 = *(_QWORD *)(v160 + 24 * ((v202 >> ((4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v249 = *(_QWORD *)(v20 + 64);
          swift_unknownObjectRetain();
          v248 = specialized Rope._Node.subscript.getter(v202, v249);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v250 = &v340[v248];
        if (__OFADD__(v340, v248))
          goto LABEL_391;
        v251 = v199[1];
        v415[0] = *v199;
        v415[1] = v251;
        v415[2] = v199[2];
        BigString.utf8.getter();
        result = v311;
        if (__OFSUB__(v250, (unint64_t)v311 >> 11))
        {
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
          goto LABEL_394;
        }
        v252 = BigString.UTF8View.index(_:offsetBy:)();
        v254 = v253;
        v256 = v255;
        v258 = v257;
        result = outlined release of Locale((uint64_t)v405);
        if (v331 >= v252 >> 10)
          v259 = v252;
        else
          v259 = v323;
        if (v331 >= v252 >> 10)
          v260 = v254;
        else
          v260 = v322;
        v261 = v199;
        if (v331 >= v252 >> 10)
          v262 = v256;
        else
          v262 = v321;
        if (v331 >= v252 >> 10)
          v263 = v258;
        else
          v263 = v320;
        v264 = *v261;
        v265 = v261[1];
        v414[2] = v261[2];
        v414[1] = v265;
        v414[0] = v264;
        v266 = v334;
        if (v259 >> 10 < v334)
          goto LABEL_393;
        *(_QWORD *)&v378 = v352;
        *((_QWORD *)&v378 + 1) = v345;
        *(_QWORD *)&v379 = v344;
        *((_QWORD *)&v379 + 1) = v343;
        *(_QWORD *)&v380 = v259;
        *((_QWORD *)&v380 + 1) = v260;
        *(_QWORD *)&v381 = v262;
        *((_QWORD *)&v381 + 1) = v263;
        v267 = v191[2];
        if (v267 && v334 != v259 >> 10)
        {
          swift_bridgeObjectRetain();
          outlined retain of Locale((uint64_t)v414);
          v268 = 5;
          v269 = v267;
          while (v191[v268])
          {
            swift_bridgeObjectRelease();
            v268 += 2;
            if (!--v269)
            {
              swift_bridgeObjectRelease();
              goto LABEL_316;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v406);
          v366[0] = v352;
          v366[1] = v345;
          v366[2] = v344;
          v366[3] = v343;
          v366[4] = v352;
          v366[5] = v345;
          v366[6] = v344;
          v366[7] = v343;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2, v366, &v368);
          result = outlined release of Locale((uint64_t)&v407);
          if (v375 != 2)
          {
            v259 = v372;
            if (v266 > v372 >> 10)
              goto LABEL_417;
            v260 = v373;
            v262 = v374;
            v263 = v375;
          }
LABEL_316:
          *(_QWORD *)&v361 = v352;
          *((_QWORD *)&v361 + 1) = v345;
          *(_QWORD *)&v362 = v344;
          *((_QWORD *)&v362 + 1) = v343;
          *(_QWORD *)&v363 = v259;
          *((_QWORD *)&v363 + 1) = v260;
          *(_QWORD *)&v364 = v262;
          *((_QWORD *)&v364 + 1) = v263;
          v270 = v191[2];
          if (v270)
          {
            v271 = 5;
            while (!v191[v271])
            {
              v271 += 2;
              if (!--v270)
                goto LABEL_320;
            }
            v360 = (_BYTE *)v263;
            v293 = v260;
            *(_QWORD *)&v383 = MEMORY[0x1E0DEE9D8];
            swift_bridgeObjectRetain();
            v294 = v191 + 5;
            do
            {
              v299 = *v294;
              if (*v294)
              {
                v300 = *(v294 - 1);
                if ((v299 & 0x2000000000000000) != 0 ? HIBYTE(v299) & 0xF : v300 & 0xFFFFFFFFFFFFLL)
                {
                  if ((v299 & 0x1000000000000000) != 0)
                  {
                    v295 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                  }
                  else
                  {
                    if ((v299 & 0x2000000000000000) != 0)
                    {
                      v368 = *(v294 - 1);
                      v369 = v299 & 0xFFFFFFFFFFFFFFLL;
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      if ((v300 & 0x1000000000000000) == 0)
                        _StringObject.sharedUTF8.getter();
                      swift_bridgeObjectRetain();
                    }
                    v295 = _decodeScalar(_:startingAt:)();
                    swift_bridgeObjectRelease();
                  }
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  v296 = *(_QWORD *)(v383 + 16);
                  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v296);
                  v297 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v296, v295);
                  destructiveProjectEnumData for PredicateCodableError(v297, v298);
                }
              }
              v294 += 2;
              --v267;
            }
            while (v267);
            swift_bridgeObjectRelease();
            v302 = v383;
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v411);
            v303 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v302);
            v305 = v304;
            v307 = v306;
            v309 = v308;
            swift_bridgeObjectRelease();
            outlined release of Locale((uint64_t)&v368);
            outlined release of Locale((uint64_t)v414);
            result = outlined release of AttributedString.Runs((uint64_t)v434);
            v260 = v293;
            v263 = (uint64_t)v360;
            if (v309 != 2)
            {
              if (v334 > v303 >> 10)
              {
LABEL_418:
                __break(1u);
                goto LABEL_419;
              }
              v259 = v303;
              v260 = v305;
              v262 = v307;
              v263 = v309;
            }
LABEL_322:
            if (v342 == *(_QWORD *)(v348 + 88))
            {
              v360 = (_BYTE *)v263;
              v272 = v260;
              if (v316)
              {
                v273 = *(_QWORD *)(v316 + 24 * ((v335 >> ((4 * *(_BYTE *)(v316 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v274 = *(_QWORD *)(v348 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v335, v274);
                v273 = v275;
                swift_unknownObjectRelease();
              }
              v276 = (*(uint64_t (**)(_QWORD, _QWORD))(v330[4] + 24))(v330[2], v330[4]);
              if (*(_QWORD *)(v273 + 16)
                && (v278 = specialized __RawDictionaryStorage.find<A>(_:)(v276, v277), (v279 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v273 + 56) + 72 * v278, (uint64_t)&v383);
              }
              else
              {
                v387 = 0;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v383, (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                v281 = v318;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v281, 0, 1, AssociatedTypeWitness);
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v282 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v282 - 8) + 56))(v318, 1, 1, v282);
              }
              v283 = (*(uint64_t (**)(_QWORD, _QWORD))(v330[5] + 24))(v330[3], v330[5]);
              if (*(_QWORD *)(v273 + 16)
                && (v285 = specialized __RawDictionaryStorage.find<A>(_:)(v283, v284), (v286 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v273 + 56) + 72 * v285, (uint64_t)&v383);
              }
              else
              {
                v387 = 0;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v383, (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v287 = swift_getAssociatedTypeWitness();
                v288 = v319;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v287 - 8) + 56))(v288, 0, 1, v287);
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v289 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v289 - 8) + 56))(v319, 1, 1, v289);
              }
              v290 = v315;
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if (v259 >> 10 >= v327 >> 10)
              {
                v291 = v317;
                *v317 = v327;
                v292 = v333;
                v291[1] = v328;
                v291[2] = v292;
                v291[3] = (unint64_t)v290;
                v291[4] = v259;
                v291[5] = v272;
                v291[6] = v262;
                v291[7] = (unint64_t)v360;
                return result;
              }
LABEL_395:
              __break(1u);
LABEL_396:
              __break(1u);
LABEL_397:
              __break(1u);
LABEL_398:
              __break(1u);
LABEL_399:
              __break(1u);
              goto LABEL_400;
            }
LABEL_394:
            __break(1u);
            goto LABEL_395;
          }
LABEL_320:
          outlined release of Locale((uint64_t)v414);
        }
        result = outlined release of AttributedString.Runs((uint64_t)v434);
        goto LABEL_322;
      }
LABEL_173:
      swift_unknownObjectRetain();
      v161 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v346, v159, v160, v144, v145);
      result = swift_unknownObjectRelease_n();
      goto LABEL_215;
    }
LABEL_145:
    outlined release of Locale((uint64_t)v417);
    goto LABEL_146;
  }
  BigString.utf8.getter();
  v359 = (_BYTE *)v127;
  v136 = BigString.UTF8View.index(before:)();
  v355 = v138;
  v356 = v137;
  v140 = v139;
  outlined release of Locale((uint64_t)&v391);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  result = outlined release of Locale((uint64_t)&v392);
  if (v135 < v136 >> 10)
  {
LABEL_419:
    __break(1u);
    goto LABEL_420;
  }
  v418[0] = v136;
  v418[1] = v356;
  v418[2] = v355;
  v418[3] = v140;
  v418[4] = v131;
  v418[5] = v123;
  v418[6] = v125;
  v127 = (uint64_t)v359;
  v418[7] = v359;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1, v418, &v368);
  result = outlined release of Locale((uint64_t)&v393);
  v47 = v339;
  v52 = v327;
  v141 = v333;
  if (v371 == 2)
    goto LABEL_141;
  v52 = v368;
  if ((unint64_t)v360 >= v368 >> 10)
  {
    v328 = v369;
    v141 = v370;
    v48 = v371;
    goto LABEL_141;
  }
LABEL_421:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice2.index(before:));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t **a1, unint64_t *a2, _QWORD *a3))()
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata3;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v6[4] = TupleTypeMetadata3;
  v10 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v6[5] = v10;
  v11 = (char *)malloc(*(_QWORD *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  v12 = AttributedString.Runs.AttributesSlice2.subscript.read(v6, a2, a3);
  v14 = v13;
  v16 = v15;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(_QWORD *)(v7 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata3 + 48)], v14, v8);
  v17 = &v11[*(int *)(TupleTypeMetadata3 + 64)];
  v18 = v16[1];
  v19 = v16[2];
  v20 = v16[3];
  *(_OWORD *)v17 = *v16;
  *((_OWORD *)v17 + 1) = v18;
  *((_OWORD *)v17 + 2) = v19;
  *((_OWORD *)v17 + 3) = v20;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

uint64_t (*AttributedString.Runs.AttributesSlice2.subscript.read(uint64_t *a1, unint64_t *a2, _QWORD *a3))()
{
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  char *v8;

  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *a1 = TupleTypeMetadata3;
  v7 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  a1[1] = v7;
  v8 = (char *)malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  AttributedString.Runs.AttributesSlice2.subscript.getter((uint64_t)v8, (uint64_t)&v8[*(int *)(TupleTypeMetadata3 + 48)], (unint64_t *)&v8[*(int *)(TupleTypeMetadata3 + 64)], a2, a3);
  return AttributedString.Runs.AttributesSlice1.subscript.read;
}

void AttributedString.Runs.AttributesSlice1.subscript.read(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>, a3);
  JUMPOUT(0x186DA4550);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice2<A, B>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice2.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice2.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>, a1);
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  _OWORD v18[12];
  uint64_t v19;

  v9 = *a1;
  v10 = *a2;
  v11 = *(_OWORD *)(v5 + 176);
  v18[10] = *(_OWORD *)(v5 + 160);
  v18[11] = v11;
  v19 = *(_QWORD *)(v5 + 192);
  v12 = *(_OWORD *)(v5 + 112);
  v18[6] = *(_OWORD *)(v5 + 96);
  v18[7] = v12;
  v13 = *(_OWORD *)(v5 + 144);
  v18[8] = *(_OWORD *)(v5 + 128);
  v18[9] = v13;
  v14 = *(_OWORD *)(v5 + 48);
  v18[2] = *(_OWORD *)(v5 + 32);
  v18[3] = v14;
  v15 = *(_OWORD *)(v5 + 80);
  v18[4] = *(_OWORD *)(v5 + 64);
  v18[5] = v15;
  v16 = *(_OWORD *)(v5 + 16);
  v18[0] = *(_OWORD *)v5;
  v18[1] = v16;
  outlined retain of AttributedString.Runs((uint64_t)v18);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice2.init(runs:)(v5, *(_QWORD *)(v9 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v10 + *MEMORY[0x1E0DEE2A8] + 8), a3, a4, a5).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice3.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 result;
  uint64_t v32[2];
  _QWORD v33[2];
  _QWORD v34[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_182065BD0;
  *(_QWORD *)(v16 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a2, a5);
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)(v16 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  *(_QWORD *)(v16 + 56) = v18;
  *(_QWORD *)(v16 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a4, a7);
  *(_QWORD *)(v16 + 72) = v19;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v34, a2, a5);
  v20 = v34[0];
  v21 = v34[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v33, a3, a6);
  v22 = v33[0];
  v23 = v33[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 32))(v32, a4, a7);
  v24 = specialized RangeReplaceableCollection.init(_contents:_:_:)(v20, v21, v22, v23, v32[0], v32[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v22, v23);
  outlined consume of AttributedString.AttributeRunBoundaries?(v20, v21);
  v25 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v25;
  v26 = *(_QWORD *)(a1 + 192);
  v27 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v27;
  v28 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v28;
  v29 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v29;
  v30 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v30;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(_QWORD *)(a8 + 192) = v26;
  *(_QWORD *)(a8 + 200) = v16;
  *(_QWORD *)(a8 + 208) = v24;
  return result;
}

unint64_t *AttributedString.Runs.AttributesSlice2.index(after:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  __int128 *v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  int v95;
  void (*v96)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 *v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  __int128 *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t *v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _BYTE *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  __int128 *v176;
  uint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  _QWORD v185[9];
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE v207[48];
  _QWORD v208[3];
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE v215[48];
  _OWORD v216[6];
  _OWORD v217[4];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  unint64_t v226;

  v3 = *result;
  v162 = result[1];
  v161 = result[2];
  v160 = result[3];
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[3];
  v217[2] = v2[2];
  v217[3] = v6;
  v217[0] = v4;
  v217[1] = v5;
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[7];
  v220 = v2[6];
  v221 = v9;
  v218 = v7;
  v219 = v8;
  v10 = v2[8];
  v11 = v2[9];
  v12 = v2[11];
  v224 = v2[10];
  v225 = v12;
  v222 = v10;
  v223 = v11;
  v165 = v3;
  v13 = v3 >> 10;
  v226 = *((_QWORD *)v2 + 24);
  if (v13 < *((_QWORD *)&v10 + 1) >> 10 || v13 >= *((_QWORD *)&v224 + 1) >> 10)
    goto LABEL_187;
  v166 = *((_QWORD *)v2 + 25);
  if (!*(_QWORD *)(v166 + 16))
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }
  v172 = *(_QWORD *)(v166 + 16);
  v14 = *(_QWORD *)&v217[0];
  v15 = *(_QWORD *)(*(_QWORD *)&v217[0] + 64);
  v16 = *(_QWORD *)(*(_QWORD *)&v217[0] + 80);
  v17 = v165 >> 11;
  if (v15)
    v18 = *(_QWORD *)(*(_QWORD *)&v217[0] + 80);
  else
    v18 = 0;
  if (v18 < v17)
    goto LABEL_189;
  v144 = a2;
  v167 = *((_QWORD *)v2 + 26);
  v19 = *(_QWORD *)(*(_QWORD *)&v217[0] + 72);
  v20 = *(_QWORD *)(*(_QWORD *)&v217[0] + 88);
  v156 = *(_QWORD *)&v217[0];
  v169 = v20;
  v152 = v13;
  v148 = *((_QWORD *)&v224 + 1) >> 10;
  v149 = *((_QWORD *)&v224 + 1);
  v146 = *((_QWORD *)&v225 + 1);
  v147 = v225;
  v145 = v226;
  if (v15 && v17 < v16 && *(_WORD *)(v15 + 16))
  {
    v21 = *(unsigned __int8 *)(v15 + 18);
    v178 = v165 >> 11;
    if (v21)
    {
      swift_unknownObjectRetain_n();
      result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v217);
      v22 = v165 >> 11;
      v23 = v15;
      while (1)
      {
        v26 = *(unsigned __int16 *)(v23 + 16);
        if (!*(_WORD *)(v23 + 16))
          break;
        v27 = *(_QWORD *)(v23 + 40);
        v28 = __OFSUB__(v22, v27);
        v29 = v22 - v27;
        if (v28)
          goto LABEL_181;
        if (__OFADD__(v29, 1))
          goto LABEL_182;
        if ((uint64_t)(v29 + 1) < 1)
        {
          v26 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v26 == 1)
        {
          v22 = v29;
          break;
        }
        v30 = (uint64_t *)(v23 + 64);
        v31 = 1;
        while (1)
        {
          v32 = *v30;
          v30 += 3;
          v22 = v29 - v32;
          if (__OFSUB__(v29, v32))
            goto LABEL_178;
          if (__OFADD__(v22, 1))
          {
LABEL_179:
            __break(1u);
            goto LABEL_180;
          }
          if ((uint64_t)(v22 + 1) < 1)
            break;
          ++v31;
          v29 = v22;
          if (v26 == v31)
            goto LABEL_14;
        }
        v26 = v31;
        v22 = v29;
LABEL_15:
        v24 = (4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C;
        v21 = ((-15 << v24) - 1) & v21 | (v26 << v24);
        v25 = *(_QWORD *)(v23 + 24 + 24 * v26);
        swift_unknownObjectRetain();
        result = (unint64_t *)swift_unknownObjectRelease();
        v23 = v25;
        if (!*(_BYTE *)(v25 + 18))
          goto LABEL_32;
      }
LABEL_14:
      if (!v22)
        goto LABEL_15;
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
    swift_unknownObjectRetain_n();
    result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v217);
    v22 = v165 >> 11;
    v25 = v15;
LABEL_32:
    v35 = *(unsigned __int16 *)(v25 + 16);
    v164 = v25;
    if ((_DWORD)v35)
    {
      v36 = *(_QWORD *)(v25 + 24);
      v28 = __OFSUB__(v22, v36);
      v37 = v22 - v36;
      v14 = v156;
      v17 = v178;
      if (v28)
      {
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
        goto LABEL_204;
      }
      if (__OFADD__(v37, 1))
        goto LABEL_202;
      if ((uint64_t)(v37 + 1) < 1)
      {
        v35 = 0;
      }
      else
      {
        if ((_DWORD)v35 == 1)
        {
          v22 = v37;
          goto LABEL_45;
        }
        v38 = (uint64_t *)(v164 + 48);
        v39 = 1;
        while (1)
        {
          v40 = *v38;
          v38 += 3;
          v22 = v37 - v40;
          if (__OFSUB__(v37, v40))
            goto LABEL_198;
          if (__OFADD__(v22, 1))
            goto LABEL_199;
          if ((uint64_t)(v22 + 1) < 1)
            break;
          ++v39;
          v37 = v22;
          if (v35 == v39)
            goto LABEL_45;
        }
        v35 = v39;
        v22 = v37;
      }
LABEL_46:
      swift_unknownObjectRelease();
      v33 = v164;
      swift_unknownObjectRelease();
      v168 = v21 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
      goto LABEL_30;
    }
    v14 = v156;
    v17 = v178;
LABEL_45:
    if (v22)
    {
LABEL_200:
      __break(1u);
      goto LABEL_201;
    }
    goto LABEL_46;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v217);
  v168 = specialized Rope._endPath.getter(v15);
  result = (unint64_t *)swift_unknownObjectRelease();
  v33 = 0;
  v22 = 0;
  if (v15)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v34 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v169, v168, v33, v15, v19);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v34 = 0;
LABEL_48:
  v163 = v17 - v22;
  if (__OFSUB__(v17, v22))
  {
LABEL_190:
    __break(1u);
    goto LABEL_191;
  }
  v41 = *(_OWORD *)(v14 + 32);
  v216[3] = *(_OWORD *)(v14 + 16);
  v216[4] = v41;
  v216[5] = *(_OWORD *)(v14 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0, v22))
  {
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  v143 = BigString.UTF8View.index(_:offsetBy:)();
  v43 = v42;
  v140 = v45;
  v141 = v44;
  result = (unint64_t *)outlined release of Locale((uint64_t)&v206);
  v155 = *((_QWORD *)&v218 + 1);
  if (v34 >= *((uint64_t *)&v218 + 1))
  {
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }
  if (v169 != *(_QWORD *)(v14 + 88))
  {
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
    goto LABEL_196;
  }
  v138 = v43;
  v46 = *(_BYTE **)(v14 + 64);
  if (v33)
  {
    v47 = v168;
    v48 = v33 + 24 * ((v168 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF);
    v49 = *(_QWORD *)(v48 + 40);
    v173 = *(_QWORD *)(v48 + 32);
    swift_bridgeObjectRetain();
    v142 = v49;
    result = (unint64_t *)swift_bridgeObjectRetain();
    v50 = v169;
    v51 = v169;
  }
  else
  {
    swift_unknownObjectRetain();
    v47 = v168;
    specialized Rope._Node.subscript.getter(v168, (uint64_t)v46);
    v173 = v52;
    v142 = v53;
    result = (unint64_t *)swift_unknownObjectRelease();
    v46 = *(_BYTE **)(v14 + 64);
    v51 = *(_QWORD *)(v14 + 88);
    v50 = v169;
  }
  v139 = (__int128 *)(v14 + 16);
  v159 = v34 + 1;
  v186 = v50;
  v187 = v47;
  v176 = (__int128 *)&v213;
  v177 = &v194;
  v188 = (_BYTE *)v33;
  v154 = (uint64_t *)(v166 + 40);
LABEL_56:
  if (v50 != v51)
    goto LABEL_183;
  v164 = v33;
  if (v33)
  {
    v54 = v168;
    v55 = *(_QWORD *)(v33 + 24 * ((v168 >> ((4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v54 = v168;
    v55 = specialized Rope._Node.subscript.getter(v168, (uint64_t)v46);
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  if (__OFADD__(v163, v55))
    goto LABEL_184;
  v151 = v163 + v55;
  if (v46)
  {
    v56 = ((-15 << ((4 * v46[18] + 8) & 0x3C)) - 1) & (unint64_t)v46[18] | ((unint64_t)*((unsigned __int16 *)v46 + 8) << ((4 * v46[18] + 8) & 0x3C));
    result = (unint64_t *)swift_unknownObjectRetain();
  }
  else
  {
    v56 = 0;
  }
  v57 = v164;
  v58 = v173;
  if (v54 >= v56)
    goto LABEL_185;
  if (v164)
  {
    v59 = (4 * *(_BYTE *)(v164 + 18) + 8) & 0x3C;
    v60 = ((v54 >> v59) & 0xF) + 1;
    if (v60 < *(unsigned __int16 *)(v164 + 16))
    {
      v158 = (v60 << v59) | ((-15 << v59) - 1) & v54;
      result = (unint64_t *)swift_unknownObjectRelease_n();
LABEL_71:
      v46 = v188;
      v65 = v172;
      goto LABEL_79;
    }
  }
  v61 = v46[18];
  v62 = (4 * v61 + 8) & 0x3C;
  v63 = (v54 >> v62) & 0xF;
  *(_QWORD *)&v211 = v63;
  if (v61)
  {
    swift_unknownObjectRetain();
    v64 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v46 + 24), (uint64_t *)&v211, (uint64_t)&v186, (uint64_t)v46, v61);
    result = (unint64_t *)swift_unknownObjectRelease();
    if ((v64 & 1) != 0)
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v158 = v187;
      v58 = v173;
      goto LABEL_71;
    }
    goto LABEL_74;
  }
  v66 = v63 + 1;
  if (v63 + 1 >= (unint64_t)*((unsigned __int16 *)v46 + 8))
  {
LABEL_74:
    if (v46)
    {
      v67 = v46[18];
      v68 = *((unsigned __int16 *)v46 + 8);
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v158 = ((-15 << ((4 * v67 + 8) & 0x3C)) - 1) & v67 | (unint64_t)(v68 << ((4 * v67 + 8) & 0x3C));
    }
    else
    {
      v158 = 0;
    }
    v46 = 0;
    v186 = v51;
    goto LABEL_78;
  }
  result = (unint64_t *)swift_unknownObjectRelease_n();
  v158 = (v66 << v62) | ((-15 << v62) - 1) & v54;
LABEL_78:
  v65 = v172;
  v58 = v173;
LABEL_79:
  if (v159 != v155)
  {
    if (v186 != *(_QWORD *)(v14 + 88))
    {
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
      goto LABEL_188;
    }
    v169 = v186;
    v153 = v51;
    v150 = v46;
    if (v46)
    {
      v69 = &v46[24 * ((v158 >> ((4 * v46[18] + 8) & 0x3C)) & 0xF)];
      v70 = *((_QWORD *)v69 + 4);
      v71 = *((_QWORD *)v69 + 5);
      swift_bridgeObjectRetain();
      v157 = v71;
      swift_bridgeObjectRetain();
    }
    else
    {
      v72 = *(_QWORD *)(v14 + 64);
      swift_unknownObjectRetain();
      v65 = v172;
      v58 = v173;
      specialized Rope._Node.subscript.getter(v158, v72);
      v157 = v73;
      v70 = v74;
      swift_unknownObjectRelease();
    }
    result = (unint64_t *)swift_bridgeObjectRetain();
    v75 = 0;
    v76 = v154;
    v178 = v70;
    while (1)
    {
      v78 = v75 + 1;
      if (__OFADD__(v75, 1))
      {
        __break(1u);
LABEL_178:
        __break(1u);
        goto LABEL_179;
      }
      v79 = *(v76 - 1);
      v80 = *v76;
      if (*(_QWORD *)(v58 + 16))
      {
        swift_bridgeObjectRetain_n();
        v81 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80);
        if ((v82 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v58 + 56) + 72 * v81, (uint64_t)&v201);
        }
        else
        {
          v205 = 0;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
        }
        swift_bridgeObjectRelease();
        v70 = v178;
        if (!*(_QWORD *)(v178 + 16))
        {
LABEL_94:
          v200 = 0;
          v198 = 0u;
          v199 = 0u;
          v196 = 0u;
          v197 = 0u;
          goto LABEL_101;
        }
      }
      else
      {
        v205 = 0;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v70 + 16))
          goto LABEL_94;
      }
      swift_bridgeObjectRetain();
      v83 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80);
      if ((v84 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v70 + 56) + 72 * v83, (uint64_t)&v196);
      }
      else
      {
        v200 = 0;
        v198 = 0u;
        v199 = 0u;
        v196 = 0u;
        v197 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v46 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v201, (uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v196, (uint64_t)v177, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v189)
      {
        if (v195)
          goto LABEL_118;
        outlined destroy of Any?((uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v196, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = (unint64_t *)outlined destroy of Any?((uint64_t)&v201, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v186, (uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v195)
        goto LABEL_117;
      v85 = *((_OWORD *)v177 + 3);
      v182 = *((_OWORD *)v177 + 2);
      v183 = v85;
      v184 = v177[8];
      v86 = *((_OWORD *)v177 + 1);
      v180 = *(_OWORD *)v177;
      v181 = v86;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v185, (uint64_t)v216);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v180, (uint64_t)v215);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v216, (uint64_t)&v211, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v215, (uint64_t)v176, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v212)
      {
        if (!v214)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v211);
LABEL_86:
          v77 = 0;
          goto LABEL_87;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v211, (uint64_t)v208);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v176, (uint64_t)v207);
        v87 = v209;
        v171 = v210;
        v170 = __swift_project_boxed_opaque_existential_1(v208, v209);
        v175 = &v138;
        v88 = *(_QWORD *)(v87 - 8);
        MEMORY[0x1E0C80A78](v170);
        v90 = (char *)&v138 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v207, (uint64_t)&v179);
        v91 = type metadata accessor for Optional();
        v174 = &v138;
        v92 = *(_QWORD *)(v91 - 8);
        MEMORY[0x1E0C80A78](v91);
        v94 = (char *)&v138 - v93;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v95 = swift_dynamicCast();
        v96 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56);
        if (v95)
        {
          v96(v94, 0, 1, v87);
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v90, v94, v87);
          v77 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v87);
        }
        else
        {
          v96(v94, 1, 1, v87);
          (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
          v77 = 0;
        }
        v65 = v172;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v208);
        v58 = v173;
      }
      else
      {
        if (v214)
        {
          outlined destroy of Any?((uint64_t)v176, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }
        v77 = 1;
      }
LABEL_87:
      outlined destroy of Any?((uint64_t)v215, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v216, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v180);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v185);
      outlined destroy of Any?((uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v196, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = (unint64_t *)outlined destroy of Any?((uint64_t)&v201, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v77 & 1) == 0)
        goto LABEL_119;
LABEL_88:
      v76 += 2;
      ++v75;
      v70 = v178;
      if (v78 == v65)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        v14 = v156;
        v46 = *(_BYTE **)(v156 + 64);
        v51 = *(_QWORD *)(v156 + 88);
        v163 = v151;
        v50 = v169;
        v186 = v169;
        v187 = v158;
        v33 = (uint64_t)v150;
        v168 = v158;
        v188 = v150;
        v28 = __OFADD__(v159++, 1);
        if (!v28)
          goto LABEL_56;
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v185);
LABEL_118:
        outlined destroy of Any?((uint64_t)&v186, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v196, (uint64_t *)v46);
        outlined destroy of Any?((uint64_t)&v201, (uint64_t *)v46);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        v14 = v156;
        v57 = v164;
        v54 = v168;
        v51 = v153;
        goto LABEL_120;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_120:
  if (v51 != *(_QWORD *)(v14 + 88))
    goto LABEL_194;
  if (v57)
  {
    v97 = *(_QWORD *)(v57 + 24 * ((v54 >> ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v98 = *(_QWORD *)(v14 + 64);
    swift_unknownObjectRetain();
    v97 = specialized Rope._Node.subscript.getter(v54, v98);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  v99 = v163 + v97;
  if (__OFADD__(v163, v97))
    goto LABEL_195;
  v100 = v139;
  v101 = v139[1];
  v180 = *v139;
  v181 = v101;
  v182 = v139[2];
  BigString.utf8.getter();
  result = (unint64_t *)v143;
  if (__OFSUB__(v99, v143 >> 11))
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
  v102 = BigString.UTF8View.index(_:offsetBy:)();
  v104 = v103;
  v105 = v100;
  v107 = v106;
  v109 = v108;
  result = (unint64_t *)outlined release of Locale((uint64_t)v207);
  if (v148 >= v102 >> 10)
    v110 = v102;
  else
    v110 = v149;
  if (v148 >= v102 >> 10)
  {
    v111 = v107;
  }
  else
  {
    v104 = v147;
    v111 = v146;
  }
  if (v148 >= v102 >> 10)
    v112 = v109;
  else
    v112 = v145;
  v113 = *v105;
  v114 = v105[2];
  v216[1] = v105[1];
  v216[2] = v114;
  v216[0] = v113;
  if (v110 >> 10 < v152)
  {
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  *(_QWORD *)&v201 = v165;
  *((_QWORD *)&v201 + 1) = v162;
  *(_QWORD *)&v202 = v161;
  *((_QWORD *)&v202 + 1) = v160;
  *(_QWORD *)&v203 = v110;
  *((_QWORD *)&v203 + 1) = v104;
  *(_QWORD *)&v204 = v111;
  *((_QWORD *)&v204 + 1) = v112;
  v115 = v167;
  v116 = *(_QWORD *)(v167 + 16);
  if (!v116 || v152 == v110 >> 10)
    goto LABEL_150;
  v117 = v104;
  outlined retain of Locale((uint64_t)v216);
  swift_bridgeObjectRetain();
  v118 = 40;
  v119 = v116;
  while (*(_QWORD *)(v115 + v118))
  {
    swift_bridgeObjectRelease();
    v118 += 16;
    if (!--v119)
    {
      swift_bridgeObjectRelease();
      v104 = v117;
      goto LABEL_145;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v208);
  *(_QWORD *)&v196 = v165;
  *((_QWORD *)&v196 + 1) = v162;
  *(_QWORD *)&v197 = v161;
  *((_QWORD *)&v197 + 1) = v160;
  *(_QWORD *)&v198 = v165;
  *((_QWORD *)&v198 + 1) = v162;
  *(_QWORD *)&v199 = v161;
  *((_QWORD *)&v199 + 1) = v160;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v196, (unint64_t *)&v186);
  result = (unint64_t *)outlined release of Locale((uint64_t)&v211);
  v104 = v117;
  if (v193 != 2)
  {
    v110 = v190;
    if (v152 > v190 >> 10)
      goto LABEL_203;
    v104 = v191;
    v111 = v192;
    v112 = v193;
  }
LABEL_145:
  v185[0] = v165;
  v185[1] = v162;
  v185[2] = v161;
  v185[3] = v160;
  v185[4] = v110;
  v185[5] = v104;
  v185[6] = v111;
  v185[7] = v112;
  v120 = *(_QWORD *)(v115 + 16);
  if (!v120)
  {
LABEL_149:
    outlined release of Locale((uint64_t)v216);
LABEL_150:
    result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v217);
LABEL_151:
    v122 = v144;
    *v144 = v110;
    v122[1] = v104;
    v122[2] = v111;
    v122[3] = v112;
    return result;
  }
  v121 = 40;
  while (!*(_QWORD *)(v115 + v121))
  {
    v121 += 16;
    if (!--v120)
      goto LABEL_149;
  }
  v178 = v104;
  swift_bridgeObjectRetain();
  v123 = (unint64_t *)(v115 + 40);
  v124 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v125 = *v123;
    if (*v123)
    {
      v126 = *(v123 - 1);
      if ((v125 & 0x2000000000000000) != 0 ? HIBYTE(v125) & 0xF : v126 & 0xFFFFFFFFFFFFLL)
      {
        if ((v125 & 0x1000000000000000) != 0)
        {
          v128 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v125 & 0x2000000000000000) != 0)
          {
            v186 = *(v123 - 1);
            v187 = v125 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v126 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            swift_bridgeObjectRetain();
          }
          v128 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v124 + 2) + 1, 1, v124);
        v130 = *((_QWORD *)v124 + 2);
        v129 = *((_QWORD *)v124 + 3);
        if (v130 >= v129 >> 1)
          v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v129 > 1), v130 + 1, 1, v124);
        *((_QWORD *)v124 + 2) = v130 + 1;
        *(_DWORD *)&v124[4 * v130 + 32] = v128;
      }
    }
    v123 += 2;
    --v116;
  }
  while (v116);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v215);
  v131 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v124);
  v133 = v132;
  v135 = v134;
  v137 = v136;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v186);
  outlined release of Locale((uint64_t)v216);
  result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v217);
  v104 = v178;
  if (v137 == 2)
    goto LABEL_151;
  if (v152 <= v131 >> 10)
  {
    v110 = v131;
    v104 = v133;
    v111 = v135;
    v112 = v137;
    goto LABEL_151;
  }
LABEL_204:
  __break(1u);
  return result;
}

unint64_t *AttributedString.Runs.AttributesSlice2.index(before:)@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int v85;
  void (*v86)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v87;
  __int128 *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __int128 *v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  _QWORD v149[2];
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  __int128 *v179;
  uint64_t *v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  _QWORD v187[9];
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  _BYTE v204[48];
  _BYTE v205[48];
  _QWORD v206[3];
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE v213[48];
  _OWORD v214[3];
  _OWORD v215[9];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;

  v3 = *result;
  v4 = result[1];
  v5 = result[2];
  v6 = result[3];
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[2];
  v215[3] = v2[3];
  v215[2] = v9;
  v215[0] = v7;
  v215[1] = v8;
  v10 = v2[4];
  v11 = v2[5];
  v12 = v2[6];
  v215[7] = v2[7];
  v215[6] = v12;
  v215[4] = v10;
  v215[5] = v11;
  v13 = v2[8];
  v14 = v2[9];
  v15 = v2[10];
  v16 = v2[11];
  v219 = *((_QWORD *)v2 + 24);
  v218 = v16;
  v217 = v15;
  v215[8] = v13;
  v216 = v14;
  if (*((_QWORD *)&v13 + 1) >> 10 >= v3 >> 10 || *((_QWORD *)&v217 + 1) >> 10 < v3 >> 10)
  {
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }
  v166 = *((_QWORD *)v2 + 25);
  v17 = *(_QWORD *)(v166 + 16);
  if (!v17)
  {
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
  v165 = v6;
  v18 = *(_QWORD *)&v215[0];
  v19 = *(_QWORD *)(*(_QWORD *)&v215[0] + 64);
  v20 = *(_QWORD *)(*(_QWORD *)&v215[0] + 80);
  if (v19)
    v21 = *(_QWORD *)(*(_QWORD *)&v215[0] + 80);
  else
    v21 = 0;
  if (v3 < 0x800)
    goto LABEL_180;
  v22 = (v3 >> 11) - 1;
  if (v21 < v22)
    goto LABEL_180;
  v154 = a2;
  v167 = *((_QWORD *)v2 + 26);
  v156 = *((_QWORD *)&v216 + 1);
  v157 = v216;
  v155 = v217;
  v23 = *(_QWORD *)(*(_QWORD *)&v215[0] + 72);
  v178 = *(_QWORD *)(*(_QWORD *)&v215[0] + 88);
  v162 = v3 >> 10;
  v163 = v4;
  v164 = v3;
  v170 = v5;
  v172 = v17;
  v173 = *(_QWORD *)&v215[0];
  v158 = *((_QWORD *)&v13 + 1) >> 10;
  v159 = *((_QWORD *)&v13 + 1);
  v160 = v3 >> 11;
  if (!v19 || (uint64_t)(v3 >> 11) > v20 || !*(_WORD *)(v19 + 16))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v215);
    v175 = specialized Rope._endPath.getter(v19);
    result = (unint64_t *)swift_unknownObjectRelease();
    v37 = 0;
    v24 = 0;
    if (!v19)
      goto LABEL_168;
    goto LABEL_31;
  }
  v181 = v23;
  v23 = *(unsigned __int8 *)(v19 + 18);
  if (*(_BYTE *)(v19 + 18))
  {
    swift_unknownObjectRetain_n();
    result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v215);
    v24 = v22;
    v25 = v19;
    while (1)
    {
      v28 = *(unsigned __int16 *)(v25 + 16);
      if (!*(_WORD *)(v25 + 16))
        goto LABEL_15;
      v29 = *(_QWORD *)(v25 + 40);
      v30 = __OFSUB__(v24, v29);
      v31 = v24 - v29;
      if (v30)
        goto LABEL_176;
      if (__OFADD__(v31, 1))
        goto LABEL_177;
      if ((uint64_t)(v31 + 1) < 1)
      {
        v28 = 0;
        goto LABEL_16;
      }
      if ((_DWORD)v28 == 1)
        break;
      v32 = (uint64_t *)(v25 + 64);
      v33 = 1;
      while (1)
      {
        v34 = *v32;
        v32 += 3;
        v24 = v31 - v34;
        if (__OFSUB__(v31, v34))
        {
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
          goto LABEL_175;
        }
        if (__OFADD__(v24, 1))
          goto LABEL_173;
        if ((uint64_t)(v24 + 1) < 1)
          break;
        ++v33;
        v31 = v24;
        if (v28 == v33)
          goto LABEL_15;
      }
      v28 = v33;
      v24 = v31;
LABEL_16:
      v26 = (4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C;
      v23 = ((-15 << v26) - 1) & v23 | (v28 << v26);
      v27 = *(_QWORD *)(v25 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      result = (unint64_t *)swift_unknownObjectRelease();
      v25 = v27;
      if (!*(_BYTE *)(v27 + 18))
        goto LABEL_153;
    }
    v24 = v31;
LABEL_15:
    if (!v24)
      goto LABEL_16;
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  swift_unknownObjectRetain_n();
  result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v215);
  v24 = v22;
  v27 = v19;
LABEL_153:
  v180 = (uint64_t *)v22;
  v145 = *(unsigned __int16 *)(v27 + 16);
  if (*(_WORD *)(v27 + 16))
  {
    v146 = *(_QWORD *)(v27 + 24);
    v30 = __OFSUB__(v24, v146);
    v35 = v24 - v146;
    v17 = v172;
    v18 = v173;
    if (v30)
      goto LABEL_193;
    if (__OFADD__(v35, 1))
    {
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
      goto LABEL_196;
    }
    v37 = v27;
    if ((uint64_t)(v35 + 1) < 1)
    {
      v145 = 0;
      goto LABEL_167;
    }
    if ((_DWORD)v145 != 1)
    {
      v147 = (uint64_t *)(v27 + 48);
      v36 = 1;
      while (1)
      {
        v148 = *v147;
        v147 += 3;
        v24 = v35 - v148;
        if (__OFSUB__(v35, v148))
          goto LABEL_184;
        if (__OFADD__(v24, 1))
          goto LABEL_185;
        if ((uint64_t)(v24 + 1) < 1)
          goto LABEL_171;
        ++v36;
        v35 = v24;
        if (v145 == v36)
          goto LABEL_166;
      }
    }
    v24 = v35;
  }
  else
  {
    v37 = v27;
    v17 = v172;
    v18 = v173;
  }
LABEL_166:
  if (v24)
    goto LABEL_192;
LABEL_167:
  while (1)
  {
    swift_unknownObjectRelease();
    result = (unint64_t *)swift_unknownObjectRelease();
    v35 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v145 << 8);
    v175 = v35;
    v22 = (uint64_t)v180;
    v23 = v181;
    if (!v19)
      break;
LABEL_31:
    swift_unknownObjectRetain();
    v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v178, v175, v37, v19, v23);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    v19 = v22 - v24;
    if (!__OFSUB__(v22, v24))
      goto LABEL_32;
LABEL_170:
    __break(1u);
LABEL_171:
    v145 = v36;
    v24 = v35;
  }
LABEL_168:
  v174 = 0;
  v19 = v22 - v24;
  if (__OFSUB__(v22, v24))
    goto LABEL_170;
LABEL_32:
  if (v178 != *(_QWORD *)(v18 + 88))
  {
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
    goto LABEL_187;
  }
  v38 = v37;
  if (v37)
  {
    v39 = v37 + 24 * ((v175 >> ((4 * *(_BYTE *)(v37 + 18) + 8) & 0x3C)) & 0xF);
    v40 = *(_QWORD *)(v39 + 32);
    v41 = *(_QWORD *)(v39 + 40);
    swift_bridgeObjectRetain();
    result = (unint64_t *)swift_bridgeObjectRetain();
  }
  else
  {
    v42 = *(_QWORD *)(v18 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v175, v42);
    v40 = v43;
    v41 = v44;
    result = (unint64_t *)swift_unknownObjectRelease();
  }
  v45 = v167;
  if (*((uint64_t *)&v215[0] + 1) < v174)
  {
    v149[0] = *((_QWORD *)&v215[0] + 1);
    v149[1] = v41;
    v179 = (__int128 *)&v211;
    v180 = &v192;
    v152 = (uint64_t *)(v166 + 40);
    v171 = v40;
LABEL_38:
    v161 = v19;
    v46 = *(_QWORD *)(v18 + 64);
    v47 = *(_QWORD *)(v18 + 88);
    v48 = v175;
    v188 = v178;
    v189 = v175;
    v190 = v38;
    if (v178 != v47)
      goto LABEL_186;
    if (v46)
    {
      v49 = *(unsigned __int8 *)(v46 + 18);
      result = (unint64_t *)swift_unknownObjectRetain();
      if (v48 <= v49)
      {
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
        goto LABEL_190;
      }
    }
    else if (!v175)
    {
      goto LABEL_187;
    }
    if (v38)
    {
      v50 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
      if (((v48 >> v50) & 0xF) != 0)
      {
        v51 = ((((v48 >> v50) & 0xF) - 1) << v50) | ((-15 << v50) - 1) & v48;
        v189 = v51;
        goto LABEL_50;
      }
    }
    v52 = *(unsigned __int8 *)(v46 + 18);
    v53 = (4 * v52 + 8) & 0x3C;
    v54 = (v48 >> v53) & 0xF;
    *(_QWORD *)&v209 = v54;
    if (v52)
    {
      swift_unknownObjectRetain();
      v55 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v46 + 16, v46 + 24, (uint64_t *)&v209, (uint64_t)&v188, v52);
      result = (unint64_t *)swift_unknownObjectRelease();
      if ((v55 & 1) != 0)
      {
        if (v188 != v178)
          goto LABEL_188;
        v51 = v189;
        v38 = v190;
        if (v190)
        {
LABEL_50:
          v56 = *(_QWORD *)(v38 + 24 * ((v51 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v57 = 0;
          goto LABEL_54;
        }
LABEL_53:
        swift_unknownObjectRetain();
        v56 = specialized Rope._Node.subscript.getter(v51, v46);
        swift_unknownObjectRelease();
        v57 = 1;
LABEL_54:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v161, v56))
          goto LABEL_189;
        if (v178 == *(_QWORD *)(v18 + 88))
        {
          v150 = v161 - v56;
          v151 = v38;
          v175 = v51;
          if ((v57 & 1) != 0)
          {
            v58 = *(_QWORD *)(v18 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v51, v58);
            v153 = v59;
            v61 = v60;
            swift_unknownObjectRelease();
          }
          else
          {
            v62 = v38 + 24 * ((v51 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF);
            v61 = *(_QWORD *)(v62 + 32);
            v63 = *(_QWORD *)(v62 + 40);
            swift_bridgeObjectRetain();
            v153 = v63;
            swift_bridgeObjectRetain();
          }
          v64 = v171;
          --v174;
          result = (unint64_t *)swift_bridgeObjectRetain();
          v65 = 0;
          v66 = v152;
          v181 = v61;
          while (1)
          {
            v68 = v65 + 1;
            if (__OFADD__(v65, 1))
              goto LABEL_174;
            v70 = *(v66 - 1);
            v69 = *v66;
            if (*(_QWORD *)(v64 + 16))
            {
              swift_bridgeObjectRetain_n();
              v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v69);
              if ((v72 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v64 + 56) + 72 * v71, (uint64_t)&v199);
              }
              else
              {
                v203 = 0;
                v201 = 0u;
                v202 = 0u;
                v199 = 0u;
                v200 = 0u;
              }
              swift_bridgeObjectRelease();
              v61 = v181;
              if (!*(_QWORD *)(v181 + 16))
              {
LABEL_69:
                v198 = 0;
                v196 = 0u;
                v197 = 0u;
                v194 = 0u;
                v195 = 0u;
                goto LABEL_76;
              }
            }
            else
            {
              v203 = 0;
              v201 = 0u;
              v202 = 0u;
              v199 = 0u;
              v200 = 0u;
              swift_bridgeObjectRetain();
              if (!*(_QWORD *)(v61 + 16))
                goto LABEL_69;
            }
            swift_bridgeObjectRetain();
            v73 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v69);
            if ((v74 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v61 + 56) + 72 * v73, (uint64_t)&v194);
            }
            else
            {
              v198 = 0;
              v196 = 0u;
              v197 = 0u;
              v194 = 0u;
              v195 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_76:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v199, (uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v194, (uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v191)
            {
              if (v193)
                goto LABEL_93;
              outlined destroy of Any?((uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              result = (unint64_t *)outlined destroy of Any?((uint64_t)&v199, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_63;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v188, (uint64_t)v187, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v193)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
LABEL_93:
              outlined destroy of Any?((uint64_t)&v188, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v199, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_94:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v45 = v167;
              v19 = v161;
              goto LABEL_95;
            }
            v75 = *((_OWORD *)v180 + 3);
            v184 = *((_OWORD *)v180 + 2);
            v185 = v75;
            v186 = v180[8];
            v76 = *((_OWORD *)v180 + 1);
            v182 = *(_OWORD *)v180;
            v183 = v76;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v187, (uint64_t)v214);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v182, (uint64_t)v213);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v214, (uint64_t)&v209, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v213, (uint64_t)v179, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v210)
            {
              if (!v212)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v209);
LABEL_61:
                v67 = 0;
                goto LABEL_62;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v209, (uint64_t)v206);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v179, (uint64_t)v205);
              v77 = v207;
              v169 = v208;
              v168 = __swift_project_boxed_opaque_existential_1(v206, v207);
              v177 = v149;
              v78 = *(_QWORD *)(v77 - 8);
              MEMORY[0x1E0C80A78](v168);
              v80 = (char *)v149 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v205, (uint64_t)v204);
              v81 = type metadata accessor for Optional();
              v176 = v149;
              v82 = *(_QWORD *)(v81 - 8);
              MEMORY[0x1E0C80A78](v81);
              v84 = (char *)v149 - v83;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v85 = swift_dynamicCast();
              v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
              if (v85)
              {
                v86(v84, 0, 1, v77);
                (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v80, v84, v77);
                v67 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v77);
              }
              else
              {
                v86(v84, 1, 1, v77);
                (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
                v67 = 0;
              }
              v18 = v173;
              v64 = v171;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v206);
              v17 = v172;
            }
            else
            {
              if (v212)
              {
                outlined destroy of Any?((uint64_t)v179, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_61;
              }
              v67 = 1;
            }
LABEL_62:
            outlined destroy of Any?((uint64_t)v213, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v214, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v182);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
            outlined destroy of Any?((uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = (unint64_t *)outlined destroy of Any?((uint64_t)&v199, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v67 & 1) == 0)
              goto LABEL_94;
LABEL_63:
            v66 += 2;
            ++v65;
            v61 = v181;
            if (v68 == v17)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = (unint64_t *)swift_bridgeObjectRelease();
              v38 = v151;
              v19 = v150;
              v45 = v167;
              if (v149[0] < v174)
                goto LABEL_38;
              v19 = v150;
              goto LABEL_91;
            }
          }
        }
LABEL_190:
        __break(1u);
      }
    }
    else if (v54)
    {
      v51 = ((v54 - 1) << v53) | ((-15 << v53) - 1) & v48;
      v189 = v51;
      v190 = v46;
      v38 = v46;
      if (v46)
        goto LABEL_50;
      goto LABEL_53;
    }
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
LABEL_91:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_95:
  v87 = *(_OWORD *)(v18 + 32);
  v182 = *(_OWORD *)(v18 + 16);
  v183 = v87;
  v184 = *(_OWORD *)(v18 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v19, v160))
    goto LABEL_182;
  v88 = (__int128 *)(v18 + 16);
  v90 = v163;
  v89 = v164;
  v91 = v165;
  v92 = BigString.UTF8View.index(_:offsetBy:)();
  v94 = v93;
  v96 = v95;
  v98 = v97;
  result = (unint64_t *)outlined release of Locale((uint64_t)v204);
  if (v158 >= v92 >> 10)
    v99 = v159;
  else
    v99 = v92;
  if (v158 >= v92 >> 10)
    v100 = v157;
  else
    v100 = v94;
  v101 = v99;
  if (v158 >= v92 >> 10)
    v102 = v156;
  else
    v102 = v96;
  if (v158 >= v92 >> 10)
    v103 = v155;
  else
    v103 = v98;
  v104 = *v88;
  v105 = v88[1];
  v214[2] = v88[2];
  v214[1] = v105;
  v214[0] = v104;
  if (v162 < v99 >> 10)
    goto LABEL_183;
  *(_QWORD *)&v199 = v99;
  *((_QWORD *)&v199 + 1) = v100;
  *(_QWORD *)&v200 = v102;
  *((_QWORD *)&v200 + 1) = v103;
  *(_QWORD *)&v201 = v89;
  *((_QWORD *)&v201 + 1) = v90;
  *(_QWORD *)&v202 = v170;
  *((_QWORD *)&v202 + 1) = v91;
  v106 = *(_QWORD *)(v45 + 16);
  v181 = v103;
  v107 = v102;
  v108 = v100;
  if (!v106 || v99 >> 10 == v162)
    goto LABEL_127;
  v180 = (uint64_t *)v99;
  outlined retain of Locale((uint64_t)v214);
  swift_bridgeObjectRetain();
  v109 = 40;
  v110 = v106;
  while (*(_QWORD *)(v45 + v109))
  {
    swift_bridgeObjectRelease();
    v109 += 16;
    if (!--v110)
    {
      swift_bridgeObjectRelease();
LABEL_121:
      v113 = v163;
      v121 = v164;
      v114 = v170;
      v101 = (uint64_t)v180;
      v122 = v181;
      goto LABEL_122;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v111 = BigString.startIndex.getter();
  v112 = v162;
  if (v162 <= v111 >> 10)
  {
    v45 = v167;
    goto LABEL_121;
  }
  BigString.utf8.getter();
  v113 = v163;
  v114 = v170;
  v115 = v165;
  v116 = BigString.UTF8View.index(before:)();
  v178 = v118;
  v179 = v117;
  v177 = v119;
  outlined release of Locale((uint64_t)v205);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  result = (unint64_t *)outlined release of Locale((uint64_t)v206);
  if (v112 < v116 >> 10)
    goto LABEL_195;
  *(_QWORD *)&v194 = v116;
  *((_QWORD *)&v194 + 1) = v179;
  *(_QWORD *)&v195 = v178;
  *((_QWORD *)&v195 + 1) = v177;
  v120 = v164;
  *(_QWORD *)&v196 = v164;
  *((_QWORD *)&v196 + 1) = v113;
  *(_QWORD *)&v197 = v114;
  *((_QWORD *)&v197 + 1) = v115;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1, &v194, &v188);
  result = (unint64_t *)outlined release of Locale((uint64_t)&v209);
  v45 = v167;
  v121 = v120;
  v101 = (uint64_t)v180;
  v122 = v181;
  if (v191 != 2)
  {
    v101 = v188;
    if (v162 < v188 >> 10)
      goto LABEL_197;
    v108 = v189;
    v107 = v190;
    v122 = v191;
  }
LABEL_122:
  v187[0] = v101;
  v187[1] = v108;
  v187[2] = v107;
  v187[3] = v122;
  v187[4] = v121;
  v187[5] = v113;
  v187[6] = v114;
  v187[7] = v165;
  v123 = *(_QWORD *)(v45 + 16);
  v181 = v122;
  if (!v123)
  {
LABEL_126:
    outlined release of Locale((uint64_t)v214);
LABEL_127:
    result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v215);
    v125 = v108;
    v126 = v181;
    goto LABEL_128;
  }
  v124 = 40;
  while (!*(_QWORD *)(v45 + v124))
  {
    v124 += 16;
    if (!--v123)
      goto LABEL_126;
  }
  v128 = v107;
  v125 = v108;
  v129 = v101;
  swift_bridgeObjectRetain();
  v130 = (unint64_t *)(v45 + 40);
  v131 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v132 = *v130;
    if (*v130)
    {
      v133 = *(v130 - 1);
      if ((v132 & 0x2000000000000000) != 0 ? HIBYTE(v132) & 0xF : v133 & 0xFFFFFFFFFFFFLL)
      {
        if ((v132 & 0x1000000000000000) != 0)
        {
          v135 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v132 & 0x2000000000000000) != 0)
          {
            v188 = *(v130 - 1);
            v189 = v132 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v133 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            swift_bridgeObjectRetain();
          }
          v135 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v131 + 2) + 1, 1, v131);
        v137 = *((_QWORD *)v131 + 2);
        v136 = *((_QWORD *)v131 + 3);
        if (v137 >= v136 >> 1)
          v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v136 > 1), v137 + 1, 1, v131);
        *((_QWORD *)v131 + 2) = v137 + 1;
        *(_DWORD *)&v131[4 * v137 + 32] = v135;
      }
    }
    v130 += 2;
    --v106;
  }
  while (v106);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v213);
  v138 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v131);
  v140 = v139;
  v142 = v141;
  v144 = v143;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v188);
  outlined release of Locale((uint64_t)v214);
  result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v215);
  v101 = v129;
  v107 = v128;
  v126 = v181;
  if (v144 == 2)
  {
LABEL_128:
    v127 = v154;
    *v154 = v101;
    v127[1] = v125;
    v127[2] = v107;
    v127[3] = v126;
  }
  else
  {
    if (v162 >= v138 >> 10)
    {
      v101 = v138;
      v125 = v140;
      v107 = v142;
      v126 = v144;
      goto LABEL_128;
    }
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice3.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  __int128 *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  char v75;
  char v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  void (*v107)(char *, uint64_t, uint64_t, uint64_t);
  char *v108;
  __int128 *v109;
  unint64_t v110;
  __int128 v111;
  unint64_t v112;
  __int128 *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  __int128 *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  unint64_t *v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  int v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  _BYTE *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t *v203;
  char v204;
  unint64_t v205;
  unint64_t v206;
  int v207;
  char v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char v227;
  unint64_t v228;
  char v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  int v240;
  void (*v241)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v242;
  uint64_t v243;
  char *v244;
  __int128 *v245;
  __int128 v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  __int128 v258;
  __int128 v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char v273;
  uint64_t AssociatedTypeWitness;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t *v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t *v323;
  _BYTE *v324;
  unint64_t v325;
  char *v326;
  uint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  __int128 *v336;
  uint64_t v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  char *v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  char *v351;
  unint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t *v355;
  __int128 *v356;
  uint64_t v357;
  __int128 *v358;
  _BYTE *v359;
  unint64_t v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  _QWORD v366[9];
  _BYTE v367[40];
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  _BYTE v376[24];
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  uint64_t v404;
  _BYTE v405[48];
  _BYTE v406[48];
  __int128 v407;
  uint64_t v408;
  _BYTE v409[24];
  uint64_t v410;
  _QWORD v411[3];
  uint64_t v412;
  char *v413;
  _OWORD v414[3];
  _OWORD v415[6];
  _QWORD v416[8];
  _OWORD v417[3];
  _QWORD v418[8];
  _QWORD v419[3];
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  _OWORD v434[4];
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  unint64_t v443;

  v339 = a6;
  v7 = *a5;
  v8 = a5[1];
  v344 = a5[2];
  v345 = v8;
  v343 = a5[3];
  v9 = *v6;
  v10 = v6[1];
  v11 = v6[2];
  v434[3] = v6[3];
  v434[2] = v11;
  v434[0] = v9;
  v434[1] = v10;
  v12 = v6[4];
  v13 = v6[5];
  v14 = v6[6];
  v438 = v6[7];
  v437 = v14;
  v435 = v12;
  v436 = v13;
  v15 = v6[8];
  v16 = v6[9];
  v17 = v6[10];
  v18 = v6[11];
  v443 = *((_QWORD *)v6 + 24);
  v442 = v18;
  v441 = v17;
  v439 = v15;
  v352 = v7;
  v19 = v7 >> 10;
  v440 = v16;
  if (v19 < *((_QWORD *)&v15 + 1) >> 10)
    goto LABEL_381;
  v331 = *((_QWORD *)&v441 + 1) >> 10;
  if (*((_QWORD *)&v441 + 1) >> 10 < v19)
    goto LABEL_381;
  v348 = *((_QWORD *)v6 + 25);
  v20 = *(_QWORD *)(v348 + 16);
  if (!v20)
  {
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }
  v21 = *(_QWORD *)&v434[0];
  v22 = *(_QWORD *)(*(_QWORD *)&v434[0] + 64);
  v23 = *(_QWORD *)(*(_QWORD *)&v434[0] + 80);
  if (v22)
    v24 = *(_QWORD *)(*(_QWORD *)&v434[0] + 80);
  else
    v24 = 0;
  v358 = (__int128 *)(v352 >> 11);
  if (v24 < (uint64_t)(v352 >> 11))
    goto LABEL_383;
  v334 = v19;
  v357 = *((_QWORD *)v6 + 26);
  v338 = *((_QWORD *)&v440 + 1);
  v340 = v440;
  v332 = v441;
  v320 = *((_QWORD *)&v442 + 1);
  v321 = v442;
  v318 = a3;
  v319 = v443;
  v25 = *(_QWORD *)(*(_QWORD *)&v434[0] + 72);
  v26 = *(_QWORD *)(*(_QWORD *)&v434[0] + 88);
  v341 = (char *)(*((_QWORD *)&v15 + 1) >> 10);
  v342 = v26;
  v349 = *(_QWORD *)&v434[0];
  v354 = v20;
  v315 = a4;
  v316 = result;
  v317 = a2;
  v322 = *((_QWORD *)&v441 + 1);
  v346 = *((_QWORD *)&v15 + 1);
  if (v22 && (uint64_t)v358 < v23 && *(_WORD *)(v22 + 16))
  {
    v27 = *(unsigned __int8 *)(v22 + 18);
    if (*(_BYTE *)(v22 + 18))
    {
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)v434);
      v28 = v358;
      v29 = v22;
      while (1)
      {
        v32 = *(unsigned __int16 *)(v29 + 16);
        if (!*(_WORD *)(v29 + 16))
          goto LABEL_14;
        v33 = *(_QWORD *)(v29 + 40);
        v34 = __OFSUB__(v28, v33);
        v35 = (__int128 *)((char *)v28 - v33);
        if (v34)
          goto LABEL_373;
        if (__OFADD__(v35, 1))
          goto LABEL_374;
        if ((uint64_t)v35 + 1 < 1)
        {
          v32 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v32 == 1)
          break;
        v36 = (uint64_t *)(v29 + 64);
        v37 = 1;
        while (1)
        {
          v38 = *v36;
          v36 += 3;
          v28 = (__int128 *)((char *)v35 - v38);
          if (__OFSUB__(v35, v38))
            goto LABEL_366;
          if (__OFADD__(v28, 1))
          {
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
LABEL_369:
            __break(1u);
LABEL_370:
            __break(1u);
            goto LABEL_371;
          }
          if ((uint64_t)v28 + 1 < 1)
            break;
          ++v37;
          v35 = v28;
          if (v32 == v37)
            goto LABEL_14;
        }
        v32 = v37;
        v28 = v35;
LABEL_15:
        v30 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
        v27 = ((-15 << v30) - 1) & v27 | (v32 << v30);
        v31 = *(_QWORD *)(v29 + 24 + 24 * v32);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v29 = v31;
        if (!*(_BYTE *)(v31 + 18))
          goto LABEL_32;
      }
      v28 = v35;
LABEL_14:
      if (!v28)
        goto LABEL_15;
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
      goto LABEL_380;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v434);
    v28 = v358;
    v31 = v22;
LABEL_32:
    v41 = *(unsigned __int16 *)(v31 + 16);
    if (*(_WORD *)(v31 + 16))
    {
      v42 = *(_QWORD *)(v31 + 24);
      v34 = __OFSUB__(v28, v42);
      v43 = (__int128 *)((char *)v28 - v42);
      v21 = v349;
      if (v34)
      {
LABEL_414:
        __break(1u);
        goto LABEL_415;
      }
      v44 = v31;
      v20 = v354;
      if (__OFADD__(v43, 1))
      {
LABEL_415:
        __break(1u);
        goto LABEL_416;
      }
      if ((uint64_t)v43 + 1 < 1)
      {
        v41 = 0;
      }
      else
      {
        if ((_DWORD)v41 == 1)
        {
          v28 = v43;
          goto LABEL_45;
        }
        v45 = (uint64_t *)(v44 + 48);
        v46 = 1;
        while (1)
        {
          v47 = *v45;
          v45 += 3;
          v28 = (__int128 *)((char *)v43 - v47);
          if (__OFSUB__(v43, v47))
            goto LABEL_397;
          if (__OFADD__(v28, 1))
            goto LABEL_398;
          if ((uint64_t)v28 + 1 < 1)
            break;
          ++v46;
          v43 = v28;
          if (v41 == v46)
            goto LABEL_45;
        }
        v41 = v46;
        v28 = v43;
      }
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v335 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v41 << 8);
      v39 = v44;
      goto LABEL_30;
    }
    v44 = v31;
    v21 = v349;
    v20 = v354;
LABEL_45:
    if (v28)
    {
LABEL_412:
      __break(1u);
      goto LABEL_413;
    }
    goto LABEL_46;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v434);
  v335 = specialized Rope._endPath.getter(v22);
  result = swift_unknownObjectRelease();
  v39 = 0;
  v28 = 0;
  if (v22)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v40 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v342, v335, v39, v22, v25);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v40 = 0;
LABEL_48:
  v351 = (char *)((char *)v358 - (char *)v28);
  if (__OFSUB__(v358, v28))
  {
LABEL_384:
    __break(1u);
    goto LABEL_385;
  }
  v48 = *(_OWORD *)(v21 + 32);
  v431 = *(_OWORD *)(v21 + 16);
  v432 = v48;
  v433 = *(_OWORD *)(v21 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v28))
  {
LABEL_385:
    __break(1u);
    goto LABEL_386;
  }
  v336 = (__int128 *)(v21 + 16);
  v330 = BigString.UTF8View.index(_:offsetBy:)();
  v327 = v50;
  v328 = v49;
  v326 = v51;
  result = outlined release of Locale((uint64_t)&v388);
  v52 = v352;
  v333 = v345;
  v329 = v344;
  v53 = v343;
  v337 = *((_QWORD *)&v435 + 1);
  v314 = v39;
  if (v40 == *((_QWORD *)&v435 + 1))
    goto LABEL_143;
  if (v342 != *(_QWORD *)(v21 + 88))
  {
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }
  v54 = v40;
  if (v39)
  {
    v55 = v39 + 24 * ((v335 >> ((4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C)) & 0xF);
    v57 = *(_QWORD *)(v55 + 32);
    v56 = *(_QWORD *)(v55 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v58 = *(_QWORD *)(v21 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v335, v58);
    v57 = v59;
    v56 = v60;
    result = swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v434[0] + 1) >= v54)
  {
    swift_bridgeObjectRelease();
    goto LABEL_114;
  }
  v310 = *((_QWORD *)&v434[0] + 1);
  v311 = v56;
  v359 = v376;
  v356 = (__int128 *)v409;
  v323 = (uint64_t *)(v348 + 40);
  v61 = v335;
  v62 = v39;
  v333 = v57;
LABEL_57:
  v64 = *(_QWORD *)(v21 + 64);
  v63 = *(_QWORD *)(v21 + 72);
  v65 = *(_QWORD *)(v21 + 88);
  v368 = v342;
  v369 = v61;
  v370 = v62;
  if (v342 != v65)
    goto LABEL_405;
  v360 = v63;
  v66 = v20;
  if (v64)
  {
    v67 = *(unsigned __int8 *)(v64 + 18);
    v68 = v61;
    v69 = v62;
    result = swift_unknownObjectRetain();
    v62 = v69;
    v61 = v68;
    if (v68 <= v67)
      goto LABEL_406;
  }
  else if (!v61)
  {
    goto LABEL_406;
  }
  if (!v62 || (v70 = (4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C, ((v61 >> v70) & 0xF) == 0))
  {
    v72 = *(unsigned __int8 *)(v64 + 18);
    v73 = (4 * v72 + 8) & 0x3C;
    v74 = (v61 >> v73) & 0xF;
    *(_QWORD *)&v407 = v74;
    if (v72)
    {
      swift_unknownObjectRetain();
      v75 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v64 + 16, v64 + 24, (uint64_t *)&v407, (uint64_t)&v368, v72);
      result = swift_unknownObjectRelease();
      if ((v75 & 1) == 0)
        goto LABEL_411;
      if (v368 != v342)
        goto LABEL_407;
      v62 = v370;
      v71 = v369;
      v20 = v354;
      if (v370)
        goto LABEL_69;
    }
    else
    {
      if (!v74)
        goto LABEL_411;
      v20 = v66;
      v71 = ((v74 - 1) << v73) | ((-15 << v73) - 1) & v61;
      v369 = v71;
      v370 = v64;
      v62 = v64;
      if (v64)
        goto LABEL_69;
    }
    v79 = v71;
    swift_unknownObjectRetain();
    v329 = v79;
    v77 = specialized Rope._Node.subscript.getter(v79, v64);
    swift_unknownObjectRelease();
    v324 = 0;
    v78 = 1;
    goto LABEL_73;
  }
  v71 = ((((v61 >> v70) & 0xF) - 1) << v70) | ((-15 << v70) - 1) & v61;
  v369 = v71;
  v20 = v66;
LABEL_69:
  v76 = (4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C;
  v329 = v71;
  v324 = (_BYTE *)v62;
  v77 = *(_QWORD *)(v62 + 24 * ((v71 >> v76) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = 0;
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v351, v77))
    goto LABEL_408;
  if (v342 != *(_QWORD *)(v21 + 88))
    goto LABEL_409;
  v312 = &v351[-v77];
  if ((v78 & 1) != 0)
  {
    v80 = *(_QWORD *)(v21 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v329, v80);
    v325 = v81;
    v83 = v82;
    swift_unknownObjectRelease();
  }
  else
  {
    v84 = &v324[24 * ((v329 >> ((4 * v324[18] + 8) & 0x3C)) & 0xF)];
    v83 = *((_QWORD *)v84 + 4);
    v85 = *((_QWORD *)v84 + 5);
    swift_bridgeObjectRetain();
    v325 = v85;
    swift_bridgeObjectRetain();
  }
  v313 = v54 - 1;
  result = swift_bridgeObjectRetain();
  v86 = 0;
  v87 = v323;
  v360 = v83;
  while (1)
  {
    v89 = v86 + 1;
    if (__OFADD__(v86, 1))
      goto LABEL_370;
    v91 = *(v87 - 1);
    v90 = *v87;
    if (*(_QWORD *)(v57 + 16))
    {
      swift_bridgeObjectRetain_n();
      v92 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v90);
      if ((v93 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v57 + 56) + 72 * v92, (uint64_t)&v399);
      }
      else
      {
        v403 = 0;
        v402 = 0u;
        v401 = 0u;
        v400 = 0u;
        v399 = 0u;
      }
      swift_bridgeObjectRelease();
      v83 = v360;
      if (!*(_QWORD *)(v360 + 16))
      {
LABEL_88:
        v397 = 0;
        v396 = 0u;
        v395 = 0u;
        v394 = 0u;
        v393 = 0u;
        goto LABEL_95;
      }
    }
    else
    {
      v403 = 0;
      v402 = 0u;
      v401 = 0u;
      v400 = 0u;
      v399 = 0u;
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(v83 + 16))
        goto LABEL_88;
    }
    swift_bridgeObjectRetain();
    v94 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v90);
    if ((v95 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v83 + 56) + 72 * v94, (uint64_t)&v393);
    }
    else
    {
      v397 = 0;
      v396 = 0u;
      v395 = 0u;
      v394 = 0u;
      v393 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v399, (uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v393, (uint64_t)v359, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v371)
    {
      if (v377)
        goto LABEL_112;
      outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v393, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_82;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v368, (uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v377)
      break;
    v96 = *((_OWORD *)v359 + 3);
    v380 = *((_OWORD *)v359 + 2);
    v381 = v96;
    v382 = *((_QWORD *)v359 + 8);
    v97 = *((_OWORD *)v359 + 1);
    v378 = *(_OWORD *)v359;
    v379 = v97;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v383, (uint64_t)v366);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v378, (uint64_t)&v361);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v366, (uint64_t)&v407, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v361, (uint64_t)v356, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v408)
    {
      if (!v410)
      {
        v88 = 1;
        goto LABEL_81;
      }
      outlined destroy of Any?((uint64_t)v356, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_80:
      v88 = 0;
      goto LABEL_81;
    }
    if (!v410)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
      goto LABEL_80;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v419);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v356, (uint64_t)v418);
    v98 = v420;
    v350 = v421;
    v347 = __swift_project_boxed_opaque_existential_1(v419, v420);
    v355 = &v309;
    v99 = *(_QWORD *)(v98 - 8);
    MEMORY[0x1E0C80A78](v347);
    v101 = (char *)&v309 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v418, (uint64_t)v416);
    v102 = type metadata accessor for Optional();
    v353 = &v309;
    v103 = *(_QWORD *)(v102 - 8);
    MEMORY[0x1E0C80A78](v102);
    v105 = (char *)&v309 - v104;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v106 = swift_dynamicCast();
    v107 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
    if (v106)
    {
      v107(v105, 0, 1, v98);
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v101, v105, v98);
      v88 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
    }
    else
    {
      v107(v105, 1, 1, v98);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
      v88 = 0;
    }
    v21 = v349;
    v57 = v333;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v418);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v419);
    v20 = v354;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v361, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v366, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v378);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
    outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v393, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v88 & 1) == 0)
      goto LABEL_113;
LABEL_82:
    v87 += 2;
    ++v86;
    v83 = v360;
    if (v89 == v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v108 = v312;
      v54 = v313;
      v351 = v312;
      v61 = v329;
      v62 = (unint64_t)v324;
      if (v310 >= v313)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v351 = v108;
        goto LABEL_115;
      }
      goto LABEL_57;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
LABEL_112:
  outlined destroy of Any?((uint64_t)&v368, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v393, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_113:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_114:
  swift_bridgeObjectRelease();
LABEL_115:
  v109 = v336;
  v110 = v330;
  v111 = v336[1];
  v428 = *v336;
  v429 = v111;
  v430 = v336[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(v351, v110 >> 11))
    goto LABEL_403;
  v112 = BigString.UTF8View.index(_:offsetBy:)();
  v113 = v109;
  v115 = v114;
  v117 = v116;
  v119 = v118;
  outlined release of Locale((uint64_t)&v389);
  if ((unint64_t)v341 >= v112 >> 10)
    v120 = v346;
  else
    v120 = v112;
  if ((unint64_t)v341 >= v112 >> 10)
    v121 = v340;
  else
    v121 = v115;
  if ((unint64_t)v341 >= v112 >> 10)
  {
    v117 = v338;
    v119 = v332;
  }
  v122 = v113[1];
  v425 = *v113;
  v426 = v122;
  v427 = v113[2];
  BigString.unicodeScalars.getter();
  v52 = v120;
  v123 = BigString.UnicodeScalarView.index(after:)();
  v125 = v124;
  v127 = v126;
  v129 = v128;
  result = outlined release of Locale((uint64_t)&v390);
  v130 = *v113;
  v131 = v113[1];
  v417[2] = v113[2];
  v417[1] = v131;
  v417[0] = v130;
  if (v123 >> 10 < v52 >> 10)
  {
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }
  v419[0] = v52;
  v333 = v121;
  v419[1] = v121;
  v329 = v117;
  v419[2] = v117;
  v420 = v119;
  v421 = (_QWORD *)v123;
  v422 = v125;
  v423 = v127;
  v424 = v129;
  v132 = *(_QWORD *)(v357 + 16);
  v53 = v119;
  if (!v132 || v52 >> 10 == v123 >> 10)
  {
    v21 = v349;
    goto LABEL_143;
  }
  v133 = v125;
  v134 = v123;
  v360 = v123 >> 10;
  v328 = v52;
  outlined retain of Locale((uint64_t)v417);
  swift_bridgeObjectRetain();
  v135 = 40;
  v136 = v132;
  while (*(_QWORD *)(v357 + v135))
  {
    swift_bridgeObjectRelease();
    v135 += 16;
    if (!--v136)
    {
      swift_bridgeObjectRelease();
      goto LABEL_137;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v137 = BigString.startIndex.getter();
  v138 = v360;
  if (v360 <= v137 >> 10)
  {
LABEL_137:
    v21 = v349;
    v52 = v328;
    v144 = v333;
LABEL_138:
    v416[0] = v52;
    v333 = v144;
    v416[1] = v144;
    v416[2] = v329;
    v416[3] = v53;
    v416[4] = v134;
    v416[5] = v133;
    v416[6] = v127;
    v416[7] = v129;
    v145 = *(_QWORD *)(v357 + 16);
    if (v145)
    {
      v146 = 40;
      while (!*(_QWORD *)(v357 + v146))
      {
        v146 += 16;
        if (!--v145)
          goto LABEL_142;
      }
      v323 = (uint64_t *)v53;
      v328 = v52;
      v168 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v169 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v170 = *v168;
        if (*v168)
        {
          v171 = *(v168 - 1);
          if ((v170 & 0x2000000000000000) != 0 ? HIBYTE(v170) & 0xF : v171 & 0xFFFFFFFFFFFFLL)
          {
            if ((v170 & 0x1000000000000000) != 0)
            {
              v173 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v170 & 0x2000000000000000) != 0)
              {
                v368 = *(v168 - 1);
                v369 = v170 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v171 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
              }
              v173 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v169 + 2) + 1, 1, v169);
            v175 = *((_QWORD *)v169 + 2);
            v174 = *((_QWORD *)v169 + 3);
            if (v175 >= v174 >> 1)
              v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v174 > 1), v175 + 1, 1, v169);
            *((_QWORD *)v169 + 2) = v175 + 1;
            *(_DWORD *)&v169[4 * v175 + 32] = v173;
          }
        }
        v168 += 2;
        --v132;
      }
      while (v132);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v398);
      v176 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v169);
      v178 = v177;
      v180 = v179;
      v182 = v181;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v399);
      outlined release of Locale((uint64_t)v417);
      result = outlined release of AttributedString.Runs((uint64_t)v434);
      if (v182 != (uint64_t *)2)
      {
        if (v360 < v176 >> 10)
        {
LABEL_421:
          __break(1u);
          goto LABEL_422;
        }
        v328 = v176;
        v329 = v180;
        v333 = v178;
        v323 = v182;
      }
LABEL_144:
      if (v334 >= v331)
      {
LABEL_386:
        __break(1u);
        goto LABEL_387;
      }
      v147 = *(_QWORD *)(v21 + 64);
      v148 = *(_QWORD *)(v21 + 72);
      v149 = *(_QWORD *)(v21 + 80);
      v346 = *(_QWORD *)(v21 + 88);
      if (v147)
      {
        v150 = v357;
        if (v149 < (uint64_t)v358)
        {
LABEL_401:
          __break(1u);
          goto LABEL_402;
        }
        if (*(_WORD *)(v147 + 16) && (uint64_t)v358 < v149)
        {
          v360 = v148;
          v151 = *(unsigned __int8 *)(v147 + 18);
          if (*(_BYTE *)(v147 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v434);
            result = swift_unknownObjectRetain();
            v152 = v358;
            v153 = v147;
            while (1)
            {
              v156 = *(unsigned __int16 *)(v153 + 16);
              if (!*(_WORD *)(v153 + 16))
                goto LABEL_152;
              v157 = *(_QWORD *)(v153 + 40);
              v34 = __OFSUB__(v152, v157);
              v158 = (__int128 *)((char *)v152 - v157);
              if (v34)
                goto LABEL_375;
              if (__OFADD__(v158, 1))
                goto LABEL_376;
              if ((uint64_t)v158 + 1 < 1)
              {
                v156 = 0;
              }
              else
              {
                if ((_DWORD)v156 == 1)
                {
                  v152 = v158;
LABEL_152:
                  if (v152)
                    goto LABEL_372;
                  goto LABEL_153;
                }
                v159 = (uint64_t *)(v153 + 64);
                v160 = 1;
                while (1)
                {
                  v161 = *v159;
                  v159 += 3;
                  v152 = (__int128 *)((char *)v158 - v161);
                  if (__OFSUB__(v158, v161))
                    goto LABEL_368;
                  if (__OFADD__(v152, 1))
                    goto LABEL_369;
                  if ((uint64_t)v152 + 1 < 1)
                    break;
                  ++v160;
                  v158 = v152;
                  if (v156 == v160)
                    goto LABEL_152;
                }
                v156 = v160;
                v152 = v158;
              }
LABEL_153:
              v154 = (4 * *(_BYTE *)(v153 + 18) + 8) & 0x3C;
              v151 = ((-15 << v154) - 1) & v151 | (v156 << v154);
              v155 = *(_QWORD *)(v153 + 24 + 24 * v156);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v153 = v155;
              if (!*(_BYTE *)(v155 + 18))
                goto LABEL_171;
            }
          }
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v434);
          result = swift_unknownObjectRetain();
          v152 = v358;
          v155 = v147;
LABEL_171:
          v165 = *(unsigned __int16 *)(v155 + 16);
          if (*(_WORD *)(v155 + 16))
          {
            v166 = *(_QWORD *)(v155 + 24);
            v34 = __OFSUB__(v152, v166);
            v167 = (__int128 *)((char *)v152 - v166);
            v21 = v349;
            v148 = v360;
            if (v34)
            {
LABEL_416:
              __break(1u);
LABEL_417:
              __break(1u);
LABEL_418:
              __break(1u);
              goto LABEL_419;
            }
            if (__OFADD__(v167, 1))
              goto LABEL_417;
            if ((uint64_t)v167 + 1 < 1)
            {
              v165 = 0;
            }
            else
            {
              if ((_DWORD)v165 == 1)
              {
                v152 = v167;
                goto LABEL_207;
              }
              v183 = (uint64_t *)(v155 + 48);
              v184 = 1;
              while (1)
              {
                v185 = *v183;
                v183 += 3;
                v152 = (__int128 *)((char *)v167 - v185);
                if (__OFSUB__(v167, v185))
                  goto LABEL_399;
                if (__OFADD__(v152, 1))
                  goto LABEL_400;
                if ((uint64_t)v152 + 1 < 1)
                  break;
                ++v184;
                v167 = v152;
                if (v165 == v184)
                  goto LABEL_207;
              }
              v165 = v184;
              v152 = v167;
            }
LABEL_208:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v162 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v165 << 8);
            v150 = v357;
            v163 = v155;
            goto LABEL_169;
          }
          v21 = v349;
          v148 = v360;
LABEL_207:
          if (v152)
          {
LABEL_413:
            __break(1u);
            goto LABEL_414;
          }
          goto LABEL_208;
        }
      }
      else
      {
        v150 = v357;
        if (v352 >= 0x800)
        {
LABEL_410:
          __break(1u);
LABEL_411:
          __break(1u);
          goto LABEL_412;
        }
      }
      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v434);
      swift_unknownObjectRetain();
      v162 = specialized Rope._endPath.getter(v147);
      result = swift_unknownObjectRelease();
      v152 = 0;
      v163 = 0;
      if (!v147)
      {
        v164 = 0;
LABEL_210:
        v341 = (char *)((char *)v358 - (char *)v152);
        if (__OFSUB__(v358, v152))
        {
LABEL_387:
          __break(1u);
          goto LABEL_388;
        }
        v186 = v336[1];
        v415[3] = *v336;
        v415[4] = v186;
        v415[5] = v336[2];
        result = BigString.utf8.getter();
        if (__OFSUB__(0, v152))
        {
LABEL_388:
          __break(1u);
          goto LABEL_389;
        }
        v187 = BigString.UTF8View.index(_:offsetBy:)();
        v189 = v188;
        v311 = v191;
        v312 = v190;
        result = outlined release of Locale((uint64_t)&v404);
        if (v164 >= v337)
        {
LABEL_389:
          __break(1u);
          goto LABEL_390;
        }
        if (v346 != *(_QWORD *)(v21 + 88))
        {
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
          goto LABEL_393;
        }
        v309 = v189;
        v310 = v187;
        v192 = *(_BYTE **)(v21 + 64);
        if (v163)
        {
          v193 = v162;
          v194 = v163 + 24 * ((v162 >> ((4 * *(_BYTE *)(v163 + 18) + 8) & 0x3C)) & 0xF);
          v195 = *(_QWORD *)(v194 + 40);
          v353 = *(uint64_t **)(v194 + 32);
          swift_bridgeObjectRetain();
          v313 = v195;
          result = swift_bridgeObjectRetain();
          v196 = v346;
          v197 = v346;
        }
        else
        {
          swift_unknownObjectRetain();
          v193 = v162;
          specialized Rope._Node.subscript.getter(v162, (uint64_t)v192);
          v353 = v198;
          v313 = v199;
          result = swift_unknownObjectRelease();
          v192 = *(_BYTE **)(v21 + 64);
          v197 = *(_QWORD *)(v21 + 88);
          v196 = v346;
        }
        v338 = v164 + 1;
        v368 = v196;
        v369 = v193;
        v358 = (__int128 *)v409;
        v359 = v376;
        v327 = (uint64_t *)(v348 + 40);
        v370 = v163;
        v200 = v354;
LABEL_218:
        if (v196 != v197)
          goto LABEL_377;
        v332 = v197;
        v340 = v163;
        if (v163)
        {
          v201 = *(_QWORD *)(v163 + 24 * ((v193 >> ((4 * *(_BYTE *)(v163 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v201 = specialized Rope._Node.subscript.getter(v193, (uint64_t)v192);
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (__OFADD__(v341, v201))
          goto LABEL_378;
        v326 = &v341[v201];
        if (v192)
        {
          v202 = ((-15 << ((4 * v192[18] + 8) & 0x3C)) - 1) & (unint64_t)v192[18] | ((unint64_t)*((unsigned __int16 *)v192 + 8) << ((4 * v192[18] + 8) & 0x3C));
          result = swift_unknownObjectRetain();
        }
        else
        {
          v202 = 0;
        }
        v203 = v353;
        if (v193 >= v202)
          goto LABEL_379;
        if (v340)
        {
          v204 = (4 * *(_BYTE *)(v340 + 18) + 8) & 0x3C;
          v205 = ((v193 >> v204) & 0xF) + 1;
          if (v205 < *(unsigned __int16 *)(v340 + 16))
          {
            v206 = (v205 << v204) | ((-15 << v204) - 1) & v193;
            result = swift_unknownObjectRelease_n();
LABEL_233:
            v192 = (_BYTE *)v370;
            goto LABEL_240;
          }
        }
        v207 = v192[18];
        v208 = (4 * v207 + 8) & 0x3C;
        v209 = (v193 >> v208) & 0xF;
        *(_QWORD *)&v407 = v209;
        if (v207)
        {
          swift_unknownObjectRetain();
          v210 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v192 + 24), (uint64_t *)&v407, (uint64_t)&v368, (uint64_t)v192, v207);
          result = swift_unknownObjectRelease();
          if ((v210 & 1) != 0)
          {
            result = swift_unknownObjectRelease_n();
            v206 = v369;
            goto LABEL_233;
          }
        }
        else
        {
          v211 = v209 + 1;
          if (v209 + 1 < (unint64_t)*((unsigned __int16 *)v192 + 8))
          {
            result = swift_unknownObjectRelease_n();
            v206 = (v211 << v208) | ((-15 << v208) - 1) & v193;
            goto LABEL_240;
          }
        }
        if (v192)
        {
          v212 = v192[18];
          v213 = *((unsigned __int16 *)v192 + 8);
          result = swift_unknownObjectRelease_n();
          v206 = ((-15 << ((4 * v212 + 8) & 0x3C)) - 1) & v212 | (unint64_t)(v213 << ((4 * v212 + 8) & 0x3C));
        }
        else
        {
          v206 = 0;
        }
        v192 = 0;
        v368 = v332;
LABEL_240:
        if (v338 != v337)
        {
          if (v368 != *(_QWORD *)(v21 + 88))
          {
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
            goto LABEL_382;
          }
          v346 = v368;
          v324 = v192;
          v325 = v206;
          if (v192)
          {
            v214 = &v192[24 * ((v206 >> ((4 * v192[18] + 8) & 0x3C)) & 0xF)];
            v215 = *((_QWORD *)v214 + 4);
            v216 = *((_QWORD *)v214 + 5);
            swift_bridgeObjectRetain();
            v330 = v216;
            swift_bridgeObjectRetain();
          }
          else
          {
            v217 = *(_QWORD *)(v21 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v206, v217);
            v330 = v218;
            v215 = v219;
            swift_unknownObjectRelease();
          }
          result = swift_bridgeObjectRetain();
          v220 = 0;
          v221 = v327;
          v360 = v215;
          v347 = (_QWORD *)v193;
          while (1)
          {
            v223 = v220 + 1;
            if (__OFADD__(v220, 1))
            {
              __break(1u);
LABEL_366:
              __break(1u);
              goto LABEL_367;
            }
            v224 = *(v221 - 1);
            v225 = *v221;
            if (v203[2])
            {
              swift_bridgeObjectRetain_n();
              v226 = specialized __RawDictionaryStorage.find<A>(_:)(v224, v225);
              if ((v227 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue(v203[7] + 72 * v226, (uint64_t)&v383);
              }
              else
              {
                v387 = 0;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }
              swift_bridgeObjectRelease();
              v215 = v360;
              if (!*(_QWORD *)(v360 + 16))
              {
LABEL_255:
                v382 = 0;
                v380 = 0u;
                v381 = 0u;
                v378 = 0u;
                v379 = 0u;
                goto LABEL_262;
              }
            }
            else
            {
              v387 = 0;
              v385 = 0u;
              v386 = 0u;
              v383 = 0u;
              v384 = 0u;
              swift_bridgeObjectRetain();
              if (!*(_QWORD *)(v215 + 16))
                goto LABEL_255;
            }
            swift_bridgeObjectRetain();
            v228 = specialized __RawDictionaryStorage.find<A>(_:)(v224, v225);
            if ((v229 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v215 + 56) + 72 * v228, (uint64_t)&v378);
            }
            else
            {
              v382 = 0;
              v380 = 0u;
              v381 = 0u;
              v378 = 0u;
              v379 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_262:
            swift_bridgeObjectRelease();
            v192 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v383, (uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v378, (uint64_t)v359, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v371)
            {
              if (v377)
                goto LABEL_279;
              outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v378, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              result = outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_249;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v368, (uint64_t)v366, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v377)
              goto LABEL_278;
            v230 = *((_OWORD *)v359 + 3);
            v363 = *((_OWORD *)v359 + 2);
            v364 = v230;
            v365 = *((_QWORD *)v359 + 8);
            v231 = *((_OWORD *)v359 + 1);
            v361 = *(_OWORD *)v359;
            v362 = v231;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v366, (uint64_t)v415);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v361, (uint64_t)v414);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v415, (uint64_t)&v407, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v414, (uint64_t)v358, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v408)
            {
              if (!v410)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
LABEL_247:
                v222 = 0;
                goto LABEL_248;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v411);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v358, (uint64_t)v406);
              v232 = v412;
              v351 = v413;
              v350 = __swift_project_boxed_opaque_existential_1(v411, v412);
              v356 = (__int128 *)&v309;
              v233 = *(_QWORD *)(v232 - 8);
              MEMORY[0x1E0C80A78](v350);
              v235 = (char *)&v309 - ((v234 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v406, (uint64_t)v405);
              v236 = type metadata accessor for Optional();
              v355 = &v309;
              v237 = *(_QWORD *)(v236 - 8);
              MEMORY[0x1E0C80A78](v236);
              v239 = (char *)&v309 - v238;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v240 = swift_dynamicCast();
              v241 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v233 + 56);
              if (v240)
              {
                v241(v239, 0, 1, v232);
                (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v235, v239, v232);
                v222 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v233 + 8))(v235, v232);
              }
              else
              {
                v241(v239, 1, 1, v232);
                (*(void (**)(char *, uint64_t))(v237 + 8))(v239, v236);
                v222 = 0;
              }
              v193 = (unint64_t)v347;
              v203 = v353;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v406);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v411);
              v200 = v354;
            }
            else
            {
              if (v410)
              {
                outlined destroy of Any?((uint64_t)v358, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_247;
              }
              v222 = 1;
            }
LABEL_248:
            outlined destroy of Any?((uint64_t)v414, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v415, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v361);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
            outlined destroy of Any?((uint64_t)&v368, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v378, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v222 & 1) == 0)
              goto LABEL_280;
LABEL_249:
            v221 += 2;
            ++v220;
            v215 = v360;
            if (v223 == v200)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v21 = v349;
              v192 = *(_BYTE **)(v349 + 64);
              v197 = *(_QWORD *)(v349 + 88);
              v193 = v325;
              v341 = v326;
              v196 = v346;
              v368 = v346;
              v369 = v325;
              v163 = (uint64_t)v324;
              v370 = (unint64_t)v324;
              v34 = __OFADD__(v338++, 1);
              v150 = v357;
              if (!v34)
                goto LABEL_218;
              __break(1u);
LABEL_278:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v366);
LABEL_279:
              outlined destroy of Any?((uint64_t)&v368, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v378, (uint64_t *)v192);
              outlined destroy of Any?((uint64_t)&v383, (uint64_t *)v192);
LABEL_280:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v21 = v349;
              v150 = v357;
              goto LABEL_281;
            }
          }
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
LABEL_281:
        if (v332 != *(_QWORD *)(v21 + 88))
          goto LABEL_391;
        if (v340)
        {
          v242 = *(_QWORD *)(v340 + 24 * ((v193 >> ((4 * *(_BYTE *)(v340 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v243 = *(_QWORD *)(v21 + 64);
          swift_unknownObjectRetain();
          v242 = specialized Rope._Node.subscript.getter(v193, v243);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v244 = &v341[v242];
        if (__OFADD__(v341, v242))
          goto LABEL_392;
        v245 = v336;
        v246 = v336[1];
        v415[0] = *v336;
        v415[1] = v246;
        v415[2] = v336[2];
        BigString.utf8.getter();
        result = v310;
        if (__OFSUB__(v244, (unint64_t)v310 >> 11))
        {
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
          goto LABEL_395;
        }
        v247 = BigString.UTF8View.index(_:offsetBy:)();
        v249 = v248;
        v251 = v250;
        v253 = v252;
        result = outlined release of Locale((uint64_t)v405);
        if (v331 >= v247 >> 10)
          v254 = v247;
        else
          v254 = v322;
        if (v331 >= v247 >> 10)
          v255 = v249;
        else
          v255 = v321;
        if (v331 >= v247 >> 10)
          v256 = v251;
        else
          v256 = v320;
        if (v331 >= v247 >> 10)
          v257 = v253;
        else
          v257 = v319;
        v258 = *v245;
        v259 = v245[1];
        v414[2] = v245[2];
        v414[1] = v259;
        v414[0] = v258;
        v260 = v334;
        if (v254 >> 10 < v334)
          goto LABEL_394;
        *(_QWORD *)&v378 = v352;
        *((_QWORD *)&v378 + 1) = v345;
        *(_QWORD *)&v379 = v344;
        *((_QWORD *)&v379 + 1) = v343;
        *(_QWORD *)&v380 = v254;
        *((_QWORD *)&v380 + 1) = v255;
        *(_QWORD *)&v381 = v256;
        *((_QWORD *)&v381 + 1) = v257;
        v261 = *(_QWORD *)(v150 + 16);
        if (!v261 || v334 == v254 >> 10)
        {
          v360 = v255;
        }
        else
        {
          v262 = v255;
          swift_bridgeObjectRetain();
          outlined retain of Locale((uint64_t)v414);
          v263 = 40;
          v264 = v261;
          while (*(_QWORD *)(v150 + v263))
          {
            swift_bridgeObjectRelease();
            v263 += 16;
            if (!--v264)
            {
              swift_bridgeObjectRelease();
              goto LABEL_310;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          BigString.utf8.getter();
          BigString.UTF8View.subscript.getter();
          outlined release of Locale((uint64_t)v406);
          v366[0] = v352;
          v366[1] = v345;
          v366[2] = v344;
          v366[3] = v343;
          v366[4] = v352;
          v366[5] = v345;
          v366[6] = v344;
          v366[7] = v343;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2, v366, &v368);
          result = outlined release of Locale((uint64_t)&v407);
          if (v375 != 2)
          {
            v254 = v372;
            if (v260 > v372 >> 10)
              goto LABEL_418;
            v262 = v373;
            v256 = v374;
            v257 = v375;
          }
LABEL_310:
          *(_QWORD *)&v361 = v352;
          *((_QWORD *)&v361 + 1) = v345;
          *(_QWORD *)&v362 = v344;
          *((_QWORD *)&v362 + 1) = v343;
          *(_QWORD *)&v363 = v254;
          *((_QWORD *)&v363 + 1) = v262;
          *(_QWORD *)&v364 = v256;
          *((_QWORD *)&v364 + 1) = v257;
          v265 = *(_QWORD *)(v150 + 16);
          v360 = v262;
          if (v265)
          {
            v266 = 40;
            while (!*(_QWORD *)(v150 + v266))
            {
              v266 += 16;
              if (!--v265)
                goto LABEL_314;
            }
            *(_QWORD *)&v383 = MEMORY[0x1E0DEE9D8];
            swift_bridgeObjectRetain();
            v293 = (unint64_t *)(v150 + 40);
            do
            {
              v298 = *v293;
              if (*v293)
              {
                v299 = *(v293 - 1);
                if ((v298 & 0x2000000000000000) != 0 ? HIBYTE(v298) & 0xF : v299 & 0xFFFFFFFFFFFFLL)
                {
                  if ((v298 & 0x1000000000000000) != 0)
                  {
                    v294 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                  }
                  else
                  {
                    if ((v298 & 0x2000000000000000) != 0)
                    {
                      v368 = *(v293 - 1);
                      v369 = v298 & 0xFFFFFFFFFFFFFFLL;
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      if ((v299 & 0x1000000000000000) == 0)
                        _StringObject.sharedUTF8.getter();
                      swift_bridgeObjectRetain();
                    }
                    v294 = _decodeScalar(_:startingAt:)();
                    swift_bridgeObjectRelease();
                  }
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  v295 = *(_QWORD *)(v383 + 16);
                  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v295);
                  v296 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v295, v294);
                  destructiveProjectEnumData for PredicateCodableError(v296, v297);
                }
              }
              v293 += 2;
              --v261;
            }
            while (v261);
            swift_bridgeObjectRelease();
            v301 = v383;
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)v411);
            v302 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v301);
            v304 = v303;
            v306 = v305;
            v308 = v307;
            swift_bridgeObjectRelease();
            outlined release of Locale((uint64_t)&v368);
            outlined release of Locale((uint64_t)v414);
            result = outlined release of AttributedString.Runs((uint64_t)v434);
            if (v308 != 2)
            {
              if (v334 > v302 >> 10)
              {
LABEL_419:
                __break(1u);
                goto LABEL_420;
              }
              v254 = v302;
              v360 = v304;
              v256 = v306;
              v257 = v308;
            }
LABEL_316:
            if (v342 == *(_QWORD *)(v349 + 88))
            {
              if (v314)
              {
                v267 = *(_QWORD *)(v314 + 24 * ((v335 >> ((4 * *(_BYTE *)(v314 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v268 = *(_QWORD *)(v349 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v335, v268);
                v267 = v269;
                swift_unknownObjectRelease();
              }
              v270 = (*(uint64_t (**)(_QWORD, _QWORD))(v339[5] + 24))(v339[2], v339[5]);
              if (*(_QWORD *)(v267 + 16)
                && (v272 = specialized __RawDictionaryStorage.find<A>(_:)(v270, v271), (v273 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v267 + 56) + 72 * v272, (uint64_t)&v383);
              }
              else
              {
                v387 = 0;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v383, (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                v275 = v316;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v275, 0, 1, AssociatedTypeWitness);
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v276 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v276 - 8) + 56))(v316, 1, 1, v276);
              }
              v277 = (*(uint64_t (**)(_QWORD, _QWORD))(v339[6] + 24))(v339[3], v339[6]);
              if (*(_QWORD *)(v267 + 16)
                && (v279 = specialized __RawDictionaryStorage.find<A>(_:)(v277, v278), (v280 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v267 + 56) + 72 * v279, (uint64_t)&v383);
              }
              else
              {
                v387 = 0;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v383, (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v281 = swift_getAssociatedTypeWitness();
                v282 = v317;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v281 - 8) + 56))(v282, 0, 1, v281);
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v283 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v283 - 8) + 56))(v317, 1, 1, v283);
              }
              v284 = (*(uint64_t (**)(_QWORD, _QWORD))(v339[7] + 24))(v339[4], v339[7]);
              if (*(_QWORD *)(v267 + 16)
                && (v286 = specialized __RawDictionaryStorage.find<A>(_:)(v284, v285), (v287 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v267 + 56) + 72 * v286, (uint64_t)&v383);
              }
              else
              {
                v387 = 0;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v383, (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v288 = swift_getAssociatedTypeWitness();
                v289 = v318;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v288 - 8) + 56))(v289, 0, 1, v288);
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v383, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v290 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v290 - 8) + 56))(v318, 1, 1, v290);
              }
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v291 = v329;
              if (v254 >> 10 >= v328 >> 10)
              {
                v292 = v315;
                *v315 = v328;
                v292[1] = v333;
                v292[2] = v291;
                v292[3] = (unint64_t)v323;
                v292[4] = v254;
                v292[5] = v360;
                v292[6] = v256;
                v292[7] = v257;
                return result;
              }
LABEL_396:
              __break(1u);
LABEL_397:
              __break(1u);
LABEL_398:
              __break(1u);
LABEL_399:
              __break(1u);
LABEL_400:
              __break(1u);
              goto LABEL_401;
            }
LABEL_395:
            __break(1u);
            goto LABEL_396;
          }
LABEL_314:
          outlined release of Locale((uint64_t)v414);
        }
        result = outlined release of AttributedString.Runs((uint64_t)v434);
        goto LABEL_316;
      }
LABEL_169:
      swift_unknownObjectRetain();
      v164 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v346, v162, v163, v147, v148);
      result = swift_unknownObjectRelease_n();
      goto LABEL_210;
    }
LABEL_142:
    outlined release of Locale((uint64_t)v417);
LABEL_143:
    v323 = (uint64_t *)v53;
    v328 = v52;
    result = outlined release of AttributedString.Runs((uint64_t)v434);
    goto LABEL_144;
  }
  BigString.utf8.getter();
  v359 = (_BYTE *)v127;
  v139 = BigString.UTF8View.index(before:)();
  v355 = v141;
  v356 = v140;
  v143 = v142;
  outlined release of Locale((uint64_t)&v391);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  result = outlined release of Locale((uint64_t)&v392);
  if (v138 < v139 >> 10)
  {
LABEL_420:
    __break(1u);
    goto LABEL_421;
  }
  v418[0] = v139;
  v418[1] = v356;
  v418[2] = v355;
  v418[3] = v143;
  v418[4] = v134;
  v418[5] = v133;
  v127 = (uint64_t)v359;
  v418[6] = v359;
  v418[7] = v129;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1, v418, &v368);
  result = outlined release of Locale((uint64_t)&v393);
  v21 = v349;
  v52 = v328;
  v144 = v333;
  if (v371 == 2)
    goto LABEL_138;
  v52 = v368;
  if (v360 >= v368 >> 10)
  {
    v144 = v369;
    v329 = v370;
    v53 = v371;
    goto LABEL_138;
  }
LABEL_422:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice3.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(_QWORD *a1, unint64_t *a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  _QWORD *v6;
  int *TupleTypeMetadata;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v6 = malloc(0x60uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  v6[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[8] = TupleTypeMetadata;
  v8 = *((_QWORD *)TupleTypeMetadata - 1);
  v6[9] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v6[10] = v9;
  v10 = AttributedString.Runs.AttributesSlice3.subscript.read(v6 + 4, a2, a3);
  v12 = v11;
  v14 = v13;
  v6[11] = v10;
  v16 = *v15;
  v17 = (_OWORD *)v15[1];
  v18 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, v12, v18);
  v19 = &v9[TupleTypeMetadata[12]];
  v20 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, v14, v20);
  v21 = &v9[TupleTypeMetadata[16]];
  v22 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v16, v22);
  v23 = &v9[TupleTypeMetadata[20]];
  v24 = v17[1];
  v25 = v17[2];
  v26 = v17[3];
  *(_OWORD *)v23 = *v17;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v25;
  *((_OWORD *)v23 + 3) = v26;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *a1;
  v4 = *a1 + 32;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 72) + 8))(*(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 64));
  v5 = *(void **)(v3 + 80);
  (*(void (**)(uint64_t, uint64_t))(v3 + 88))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice3.subscript.read(_QWORD *a1, unint64_t *a2, _QWORD *a3))(uint64_t a1)
{
  _QWORD *v6;
  int *TupleTypeMetadata;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;

  v6 = malloc(0x48uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  v6[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[6] = TupleTypeMetadata;
  v8 = *((_QWORD *)TupleTypeMetadata - 1);
  v6[7] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v6[8] = v9;
  v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  v12 = (unint64_t *)&v9[TupleTypeMetadata[20]];
  AttributedString.Runs.AttributesSlice3.subscript.getter((uint64_t)v9, v10, v11, v12, a2, a3);
  v6[4] = v11;
  v6[5] = v12;
  return AttributedString.Runs.AttributesSlice3.subscript.read;
}

void AttributedString.Runs.AttributesSlice3.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 48));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>, a3);
  JUMPOUT(0x186DA4550);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice3.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice3.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>, a1);
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  _OWORD v22[12];
  uint64_t v23;

  v12 = *a1;
  v13 = *a2;
  v14 = *a3;
  v15 = *(_OWORD *)(v7 + 176);
  v22[10] = *(_OWORD *)(v7 + 160);
  v22[11] = v15;
  v23 = *(_QWORD *)(v7 + 192);
  v16 = *(_OWORD *)(v7 + 112);
  v22[6] = *(_OWORD *)(v7 + 96);
  v22[7] = v16;
  v17 = *(_OWORD *)(v7 + 144);
  v22[8] = *(_OWORD *)(v7 + 128);
  v22[9] = v17;
  v18 = *(_OWORD *)(v7 + 48);
  v22[2] = *(_OWORD *)(v7 + 32);
  v22[3] = v18;
  v19 = *(_OWORD *)(v7 + 80);
  v22[4] = *(_OWORD *)(v7 + 64);
  v22[5] = v19;
  v20 = *(_OWORD *)(v7 + 16);
  v22[0] = *(_OWORD *)v7;
  v22[1] = v20;
  outlined retain of AttributedString.Runs((uint64_t)v22);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice3.init(runs:)(v7, *(_QWORD *)(v12 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v13 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v14 + *MEMORY[0x1E0DEE2A8] + 8), a4, a5, a6, a7).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice4.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 result;
  uint64_t v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_182065BC0;
  *(_QWORD *)(v17 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a2, a5);
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  *(_QWORD *)(v17 + 56) = v19;
  *(_QWORD *)(v17 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a4, a7);
  *(_QWORD *)(v17 + 72) = v20;
  *(_QWORD *)(v17 + 80) = (*(uint64_t (**)(void))(a9 + 24))();
  *(_QWORD *)(v17 + 88) = v21;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v39, a2, a5);
  v22 = v39[0];
  v23 = v39[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v38, a3, a6);
  v24 = v38[0];
  v25 = v38[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a7 + 32))(v37, a4, a7);
  v26 = v37[0];
  v27 = v37[1];
  (*(void (**)(uint64_t *__return_ptr))(a9 + 32))(v36);
  v28 = specialized RangeReplaceableCollection.init(_contents:_:_:_:)(v22, v23, v24, v25, v26, v27, v36[0], v36[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v26, v27);
  outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
  outlined consume of AttributedString.AttributeRunBoundaries?(v22, v23);
  v29 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v29;
  v30 = *(_QWORD *)(a1 + 192);
  v31 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v31;
  v32 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v32;
  v33 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v33;
  v34 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v34;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(_QWORD *)(a8 + 192) = v30;
  *(_QWORD *)(a8 + 200) = v17;
  *(_QWORD *)(a8 + 208) = v28;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice4.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, _QWORD *a7)
{
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  __int128 *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  char v71;
  char v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  char v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int v102;
  void (*v103)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v104;
  __int128 *v105;
  __int128 v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  __int128 *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 *v150;
  unint64_t v151;
  char v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  __int128 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  unint64_t *v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  int v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _BYTE *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  unint64_t v204;
  _QWORD *v205;
  char v206;
  unint64_t v207;
  int v208;
  char v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  char *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t v229;
  char v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  int v241;
  void (*v242)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v243;
  uint64_t v244;
  char *v245;
  __int128 *v246;
  __int128 v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  __int128 v259;
  __int128 v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  uint64_t AssociatedTypeWitness;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  _QWORD v319[2];
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t *v323;
  uint64_t v324;
  unint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  _BYTE *v334;
  char *v335;
  uint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  __int128 *v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  char *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  _QWORD *v362;
  unint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  _QWORD *v366;
  __int128 *v367;
  uint64_t v368;
  __int128 *v369;
  _BYTE *v370;
  unint64_t v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  _QWORD v377[9];
  _BYTE v378[40];
  unint64_t v379;
  uint64_t v380;
  _BYTE *v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  _BYTE v387[24];
  uint64_t v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  uint64_t v408;
  uint64_t v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  uint64_t v415;
  _BYTE v416[48];
  _BYTE v417[48];
  __int128 v418;
  uint64_t v419;
  _BYTE v420[24];
  uint64_t v421;
  _QWORD v422[3];
  uint64_t v423;
  _QWORD *v424;
  _OWORD v425[3];
  _OWORD v426[6];
  _QWORD v427[8];
  _OWORD v428[3];
  _QWORD v429[8];
  _QWORD v430[3];
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  _OWORD v445[4];
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  unint64_t v454;

  v8 = *a6;
  v9 = a6[1];
  v356 = a6[2];
  v357 = v9;
  v10 = a6[3];
  v354 = a7;
  v355 = v10;
  v11 = *v7;
  v12 = v7[1];
  v13 = v7[2];
  v445[3] = v7[3];
  v445[2] = v13;
  v445[0] = v11;
  v445[1] = v12;
  v14 = v7[4];
  v15 = v7[5];
  v16 = v7[6];
  v449 = v7[7];
  v448 = v16;
  v446 = v14;
  v447 = v15;
  v17 = v7[8];
  v18 = v7[9];
  v19 = v7[10];
  v20 = v7[11];
  v454 = *((_QWORD *)v7 + 24);
  v453 = v20;
  v452 = v19;
  v450 = v17;
  v363 = v8;
  v21 = v8 >> 10;
  v451 = v18;
  if (v21 < *((_QWORD *)&v17 + 1) >> 10)
    goto LABEL_393;
  v340 = *((_QWORD *)&v452 + 1) >> 10;
  if (*((_QWORD *)&v452 + 1) >> 10 < v21)
    goto LABEL_393;
  v22 = *((_QWORD *)v7 + 25);
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
    goto LABEL_396;
  }
  v24 = *(_QWORD *)&v445[0];
  v25 = *(_QWORD *)(*(_QWORD *)&v445[0] + 64);
  v26 = *(_QWORD *)(*(_QWORD *)&v445[0] + 80);
  if (v25)
    v27 = *(_QWORD *)(*(_QWORD *)&v445[0] + 80);
  else
    v27 = 0;
  v369 = (__int128 *)(v363 >> 11);
  if (v27 < (uint64_t)(v363 >> 11))
    goto LABEL_395;
  v343 = v21;
  v368 = *((_QWORD *)v7 + 26);
  v341 = *((_QWORD *)&v451 + 1);
  v348 = v451;
  v339 = v452;
  v331 = *((_QWORD *)&v453 + 1);
  v332 = v453;
  v329 = a4;
  v330 = v454;
  v28 = *(_QWORD *)(*(_QWORD *)&v445[0] + 72);
  v353 = *(_QWORD *)(*(_QWORD *)&v445[0] + 88);
  v350 = (char *)*((_QWORD *)&v17 + 1);
  v351 = v22;
  v364 = v23;
  v325 = a5;
  v326 = result;
  v327 = a2;
  v328 = a3;
  v333 = *((_QWORD *)&v452 + 1);
  v349 = *((_QWORD *)&v17 + 1) >> 10;
  if (v25 && (uint64_t)v369 < v26 && *(_WORD *)(v25 + 16))
  {
    v371 = v28;
    v29 = *(unsigned __int8 *)(v25 + 18);
    if (*(_BYTE *)(v25 + 18))
    {
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)v445);
      v30 = v369;
      v31 = v25;
      while (1)
      {
        v34 = *(unsigned __int16 *)(v31 + 16);
        if (!*(_WORD *)(v31 + 16))
          goto LABEL_14;
        v35 = *(_QWORD *)(v31 + 40);
        v36 = __OFSUB__(v30, v35);
        v37 = (__int128 *)((char *)v30 - v35);
        if (v36)
          goto LABEL_385;
        if (__OFADD__(v37, 1))
          goto LABEL_386;
        if ((uint64_t)v37 + 1 < 1)
        {
          v34 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v34 == 1)
          break;
        v38 = (uint64_t *)(v31 + 64);
        v39 = 1;
        while (1)
        {
          v40 = *v38;
          v38 += 3;
          v30 = (__int128 *)((char *)v37 - v40);
          if (__OFSUB__(v37, v40))
            goto LABEL_378;
          if (__OFADD__(v30, 1))
          {
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
LABEL_382:
            __break(1u);
            goto LABEL_383;
          }
          if ((uint64_t)v30 + 1 < 1)
            break;
          ++v39;
          v37 = v30;
          if (v34 == v39)
            goto LABEL_14;
        }
        v34 = v39;
        v30 = v37;
LABEL_15:
        v32 = (4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C;
        v29 = ((-15 << v32) - 1) & v29 | (v34 << v32);
        v33 = *(_QWORD *)(v31 + 24 + 24 * v34);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v31 = v33;
        if (!*(_BYTE *)(v33 + 18))
          goto LABEL_32;
      }
      v30 = v37;
LABEL_14:
      if (!v30)
        goto LABEL_15;
LABEL_383:
      __break(1u);
LABEL_384:
      __break(1u);
LABEL_385:
      __break(1u);
LABEL_386:
      __break(1u);
LABEL_387:
      __break(1u);
LABEL_388:
      __break(1u);
LABEL_389:
      __break(1u);
LABEL_390:
      __break(1u);
LABEL_391:
      __break(1u);
      goto LABEL_392;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v445);
    v30 = v369;
    v33 = v25;
LABEL_32:
    v41 = *(unsigned __int16 *)(v33 + 16);
    if (*(_WORD *)(v33 + 16))
    {
      v42 = *(_QWORD *)(v33 + 24);
      v36 = __OFSUB__(v30, v42);
      v43 = (__int128 *)((char *)v30 - v42);
      v22 = v351;
      v23 = v364;
      if (v36)
      {
LABEL_426:
        __break(1u);
        goto LABEL_427;
      }
      if (__OFADD__(v43, 1))
      {
LABEL_427:
        __break(1u);
        goto LABEL_428;
      }
      if ((uint64_t)v43 + 1 < 1)
      {
        v41 = 0;
      }
      else
      {
        if ((_DWORD)v41 == 1)
        {
          v30 = v43;
          goto LABEL_45;
        }
        v44 = (uint64_t *)(v33 + 48);
        v45 = 1;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v30 = (__int128 *)((char *)v43 - v46);
          if (__OFSUB__(v43, v46))
            goto LABEL_409;
          if (__OFADD__(v30, 1))
            goto LABEL_410;
          if ((uint64_t)v30 + 1 < 1)
            break;
          ++v45;
          v43 = v30;
          if (v41 == v45)
            goto LABEL_45;
        }
        v41 = v45;
        v30 = v43;
      }
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v344 = v29 & 0xFFFFFFFFFFFFF0FFLL | (v41 << 8);
      v28 = v371;
      v345 = v33;
      goto LABEL_30;
    }
    v22 = v351;
    v23 = v364;
LABEL_45:
    if (v30)
    {
LABEL_424:
      __break(1u);
      goto LABEL_425;
    }
    goto LABEL_46;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v445);
  v344 = specialized Rope._endPath.getter(v25);
  result = swift_unknownObjectRelease();
  v30 = 0;
  v345 = 0;
  if (v25)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v366 = (_QWORD *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v353, v344, v345, v25, v28);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v366 = 0;
LABEL_48:
  v361 = (_QWORD *)((char *)v369 - (char *)v30);
  if (__OFSUB__(v369, v30))
  {
LABEL_396:
    __break(1u);
    goto LABEL_397;
  }
  v47 = *(_OWORD *)(v24 + 32);
  v442 = *(_OWORD *)(v24 + 16);
  v443 = v47;
  v444 = *(_OWORD *)(v24 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v30))
  {
LABEL_397:
    __break(1u);
    goto LABEL_398;
  }
  v346 = (__int128 *)(v24 + 16);
  v48 = BigString.UTF8View.index(_:offsetBy:)();
  v336 = v49;
  v337 = v48;
  v334 = v51;
  v335 = v50;
  result = outlined release of Locale((uint64_t)&v399);
  v52 = v363;
  v338 = v357;
  v342 = v356;
  v53 = v355;
  v347 = *((_QWORD *)&v446 + 1);
  v359 = v24;
  if (v366 == *((_QWORD **)&v446 + 1))
    goto LABEL_147;
  if (v353 != *(_QWORD *)(v24 + 88))
  {
LABEL_414:
    __break(1u);
LABEL_415:
    __break(1u);
    goto LABEL_416;
  }
  if (v345)
  {
    v54 = v345 + 24 * ((v344 >> ((4 * *(_BYTE *)(v345 + 18) + 8) & 0x3C)) & 0xF);
    v56 = *(_QWORD *)(v54 + 32);
    v55 = *(_QWORD *)(v54 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v57 = *(_QWORD *)(v24 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v344, v57);
    v56 = v58;
    v55 = v59;
    result = swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v445[0] + 1) >= (uint64_t)v366)
  {
    swift_bridgeObjectRelease();
    goto LABEL_114;
  }
  v320 = *((_QWORD *)&v445[0] + 1);
  v321 = v55;
  v370 = v387;
  v367 = (__int128 *)v420;
  v323 = (uint64_t *)(v22 + 40);
  v60 = v344;
  v61 = v345;
  v360 = v56;
LABEL_57:
  v62 = *(_QWORD *)(v24 + 64);
  v63 = *(_QWORD *)(v24 + 88);
  v379 = v353;
  v380 = v60;
  v381 = (_BYTE *)v61;
  if (v353 != v63)
    goto LABEL_417;
  if (v62)
  {
    v64 = *(unsigned __int8 *)(v62 + 18);
    v65 = v60;
    result = swift_unknownObjectRetain();
    v60 = v65;
    if (v65 <= v64)
      goto LABEL_418;
  }
  else if (!v60)
  {
    goto LABEL_418;
  }
  if (!v61 || (v66 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C, ((v60 >> v66) & 0xF) == 0))
  {
    v68 = *(unsigned __int8 *)(v62 + 18);
    v69 = (4 * v68 + 8) & 0x3C;
    v70 = (v60 >> v69) & 0xF;
    *(_QWORD *)&v418 = v70;
    if (v68)
    {
      swift_unknownObjectRetain();
      v71 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v62 + 16, v62 + 24, (uint64_t *)&v418, (uint64_t)&v379, v68);
      result = swift_unknownObjectRelease();
      if ((v71 & 1) == 0)
        goto LABEL_423;
      v24 = v359;
      if (v379 != v353)
        goto LABEL_419;
      v61 = (uint64_t)v381;
      v67 = v380;
      v23 = v364;
      if (v381)
        goto LABEL_69;
    }
    else
    {
      if (!v70)
        goto LABEL_423;
      v67 = ((v70 - 1) << v69) | ((-15 << v69) - 1) & v60;
      v380 = v67;
      v381 = (_BYTE *)v62;
      v61 = v62;
      if (v62)
        goto LABEL_69;
    }
    swift_unknownObjectRetain();
    v342 = v67;
    v73 = specialized Rope._Node.subscript.getter(v67, v62);
    swift_unknownObjectRelease();
    v324 = 0;
    v74 = 1;
    goto LABEL_73;
  }
  v67 = ((((v60 >> v66) & 0xF) - 1) << v66) | ((-15 << v66) - 1) & v60;
  v380 = v67;
LABEL_69:
  v72 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
  v342 = v67;
  v324 = v61;
  v73 = *(_QWORD *)(v61 + 24 * ((v67 >> v72) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v74 = 0;
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v361, v73))
    goto LABEL_420;
  if (v353 != *(_QWORD *)(v24 + 88))
    goto LABEL_421;
  v322 = (_QWORD *)((char *)v361 - v73);
  if ((v74 & 1) != 0)
  {
    v75 = *(_QWORD *)(v24 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v342, v75);
    v338 = v76;
    v78 = v77;
    swift_unknownObjectRelease();
  }
  else
  {
    v79 = v324 + 24 * ((v342 >> ((4 * *(_BYTE *)(v324 + 18) + 8) & 0x3C)) & 0xF);
    v78 = *(_QWORD *)(v79 + 32);
    v80 = *(_QWORD *)(v79 + 40);
    swift_bridgeObjectRetain();
    v338 = v80;
    swift_bridgeObjectRetain();
  }
  v366 = (_QWORD *)((char *)v366 - 1);
  result = swift_bridgeObjectRetain();
  v81 = 0;
  v82 = v323;
  v83 = v360;
  v371 = v78;
  while (1)
  {
    v85 = v81 + 1;
    if (__OFADD__(v81, 1))
      goto LABEL_382;
    v86 = *(v82 - 1);
    v87 = *v82;
    if (*(_QWORD *)(v83 + 16))
    {
      swift_bridgeObjectRetain_n();
      v88 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v87);
      if ((v89 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v83 + 56) + 72 * v88, (uint64_t)&v410);
      }
      else
      {
        v414 = 0;
        v413 = 0u;
        v412 = 0u;
        v411 = 0u;
        v410 = 0u;
      }
      swift_bridgeObjectRelease();
      v78 = v371;
      if (!*(_QWORD *)(v371 + 16))
      {
LABEL_88:
        v408 = 0;
        v407 = 0u;
        v406 = 0u;
        v405 = 0u;
        v404 = 0u;
        goto LABEL_95;
      }
    }
    else
    {
      v414 = 0;
      v413 = 0u;
      v412 = 0u;
      v411 = 0u;
      v410 = 0u;
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(v78 + 16))
        goto LABEL_88;
    }
    swift_bridgeObjectRetain();
    v90 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v87);
    if ((v91 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v78 + 56) + 72 * v90, (uint64_t)&v404);
    }
    else
    {
      v408 = 0;
      v407 = 0u;
      v406 = 0u;
      v405 = 0u;
      v404 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v410, (uint64_t)&v379, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v404, (uint64_t)v370, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v382)
    {
      if (v388)
        goto LABEL_112;
      outlined destroy of Any?((uint64_t)&v379, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v410, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_82;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v379, (uint64_t)&v394, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v388)
      break;
    v92 = *((_OWORD *)v370 + 3);
    v391 = *((_OWORD *)v370 + 2);
    v392 = v92;
    v393 = *((_QWORD *)v370 + 8);
    v93 = *((_OWORD *)v370 + 1);
    v389 = *(_OWORD *)v370;
    v390 = v93;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v394, (uint64_t)v377);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v389, (uint64_t)&v372);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v377, (uint64_t)&v418, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v372, (uint64_t)v367, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v419)
    {
      if (!v421)
      {
        v84 = 1;
        goto LABEL_81;
      }
      outlined destroy of Any?((uint64_t)v367, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_80:
      v84 = 0;
      goto LABEL_81;
    }
    if (!v421)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v418);
      goto LABEL_80;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v418, (uint64_t)v430);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v367, (uint64_t)v429);
    v94 = v431;
    v358 = v432;
    v352 = __swift_project_boxed_opaque_existential_1(v430, v431);
    v365 = v319;
    v95 = *(_QWORD *)(v94 - 8);
    MEMORY[0x1E0C80A78](v352);
    v97 = (char *)v319 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v429, (uint64_t)v427);
    v98 = type metadata accessor for Optional();
    v362 = v319;
    v99 = *(_QWORD *)(v98 - 8);
    MEMORY[0x1E0C80A78](v98);
    v101 = (char *)v319 - v100;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v102 = swift_dynamicCast();
    v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56);
    if (v102)
    {
      v103(v101, 0, 1, v94);
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v97, v101, v94);
      v84 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
    }
    else
    {
      v103(v101, 1, 1, v94);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
      v84 = 0;
    }
    v23 = v364;
    v83 = v360;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v429);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v430);
    v24 = v359;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v372, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v377, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v389);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
    outlined destroy of Any?((uint64_t)&v379, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?((uint64_t)&v410, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v84 & 1) == 0)
      goto LABEL_113;
LABEL_82:
    v82 += 2;
    ++v81;
    v78 = v371;
    if (v85 == v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v104 = v322;
      v361 = v322;
      v60 = v342;
      v61 = v324;
      if (v320 >= (uint64_t)v366)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v361 = v104;
        goto LABEL_115;
      }
      goto LABEL_57;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
LABEL_112:
  outlined destroy of Any?((uint64_t)&v379, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v410, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_113:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_114:
  swift_bridgeObjectRelease();
LABEL_115:
  v105 = v346;
  v106 = v346[1];
  v439 = *v346;
  v440 = v106;
  v441 = v346[2];
  BigString.utf8.getter();
  result = v337;
  if (__OFSUB__(v361, v337 >> 11))
    goto LABEL_415;
  v107 = BigString.UTF8View.index(_:offsetBy:)();
  v109 = v108;
  v111 = v110;
  v113 = v112;
  outlined release of Locale((uint64_t)&v400);
  if (v349 >= v107 >> 10)
    v114 = v350;
  else
    v114 = (char *)v107;
  if (v349 >= v107 >> 10)
    v115 = v348;
  else
    v115 = v109;
  if (v349 >= v107 >> 10)
    v116 = v341;
  else
    v116 = v111;
  if (v349 >= v107 >> 10)
    v117 = v339;
  else
    v117 = v113;
  v118 = v105[1];
  v436 = *v105;
  v437 = v118;
  v438 = v105[2];
  BigString.unicodeScalars.getter();
  v52 = (unint64_t)v114;
  v119 = BigString.UnicodeScalarView.index(after:)();
  v121 = v120;
  v123 = v122;
  v125 = v124;
  result = outlined release of Locale((uint64_t)&v401);
  v126 = *v105;
  v127 = v105[1];
  v428[2] = v105[2];
  v428[1] = v127;
  v428[0] = v126;
  v128 = v119 >> 10;
  if (v119 >> 10 < v52 >> 10)
  {
LABEL_416:
    __break(1u);
LABEL_417:
    __break(1u);
LABEL_418:
    __break(1u);
LABEL_419:
    __break(1u);
LABEL_420:
    __break(1u);
LABEL_421:
    __break(1u);
    goto LABEL_422;
  }
  v430[0] = v52;
  v338 = v115;
  v430[1] = v115;
  v342 = v116;
  v430[2] = v116;
  v431 = v117;
  v432 = v119;
  v129 = v121;
  v433 = v121;
  v371 = v123;
  v434 = v123;
  v435 = v125;
  v130 = *(_QWORD *)(v368 + 16);
  v131 = v117;
  if (!v130 || v52 >> 10 == v128)
  {
    v53 = v117;
    v23 = v364;
    v24 = v359;
    goto LABEL_147;
  }
  v370 = (_BYTE *)v125;
  v132 = v119;
  v337 = v52;
  outlined retain of Locale((uint64_t)v428);
  swift_bridgeObjectRetain();
  v133 = 40;
  v134 = v130;
  v135 = v129;
  while (*(_QWORD *)(v368 + v133))
  {
    swift_bridgeObjectRelease();
    v133 += 16;
    if (!--v134)
    {
      swift_bridgeObjectRelease();
      v23 = v364;
      v52 = v337;
      v136 = v342;
      v53 = v131;
      v137 = v371;
      v24 = v359;
      goto LABEL_142;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v138 = BigString.startIndex.getter();
  v53 = v131;
  v24 = v359;
  if (v128 <= v138 >> 10)
  {
    v23 = v364;
    v52 = v337;
    v136 = v342;
    v137 = v371;
LABEL_142:
    v427[0] = v52;
    v427[1] = v338;
    v342 = v136;
    v427[2] = v136;
    v427[3] = v53;
    v427[4] = v132;
    v427[5] = v135;
    v427[6] = v137;
    v427[7] = v370;
    v144 = *(_QWORD *)(v368 + 16);
    if (v144)
    {
      v145 = 40;
      while (!*(_QWORD *)(v368 + v145))
      {
        v145 += 16;
        if (!--v144)
          goto LABEL_146;
      }
      v371 = v128;
      v337 = v52;
      v167 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v168 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v169 = *v167;
        if (*v167)
        {
          v170 = *(v167 - 1);
          if ((v169 & 0x2000000000000000) != 0 ? HIBYTE(v169) & 0xF : v170 & 0xFFFFFFFFFFFFLL)
          {
            if ((v169 & 0x1000000000000000) != 0)
            {
              v172 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v169 & 0x2000000000000000) != 0)
              {
                v379 = *(v167 - 1);
                v380 = v169 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v170 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
              }
              v172 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v168 + 2) + 1, 1, v168);
            v174 = *((_QWORD *)v168 + 2);
            v173 = *((_QWORD *)v168 + 3);
            if (v174 >= v173 >> 1)
              v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v173 > 1), v174 + 1, 1, v168);
            *((_QWORD *)v168 + 2) = v174 + 1;
            *(_DWORD *)&v168[4 * v174 + 32] = v172;
          }
        }
        v167 += 2;
        --v130;
      }
      while (v130);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v409);
      v175 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v168);
      v177 = v176;
      v179 = v178;
      v181 = v180;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v410);
      outlined release of Locale((uint64_t)v428);
      result = outlined release of AttributedString.Runs((uint64_t)v445);
      if (v181 != 2)
      {
        if (v371 < v175 >> 10)
        {
LABEL_433:
          __break(1u);
          goto LABEL_434;
        }
        v337 = v175;
        v338 = v177;
        v342 = v179;
        v53 = v181;
      }
LABEL_148:
      if (v343 >= v340)
      {
LABEL_398:
        __break(1u);
        goto LABEL_399;
      }
      v146 = *(_QWORD *)(v24 + 64);
      v147 = *(_QWORD *)(v24 + 72);
      v148 = *(_QWORD *)(v24 + 80);
      v358 = *(_QWORD *)(v24 + 88);
      v324 = v53;
      v371 = v147;
      if (v146)
      {
        if (v148 < (uint64_t)v369)
        {
LABEL_413:
          __break(1u);
          goto LABEL_414;
        }
        if (*(_WORD *)(v146 + 16) && (uint64_t)v369 < v148)
        {
          v149 = *(unsigned __int8 *)(v146 + 18);
          if (*(_BYTE *)(v146 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v445);
            result = swift_unknownObjectRetain();
            v150 = v369;
            v151 = v146;
            while (1)
            {
              v154 = *(unsigned __int16 *)(v151 + 16);
              if (!*(_WORD *)(v151 + 16))
                goto LABEL_156;
              v155 = *(_QWORD *)(v151 + 40);
              v36 = __OFSUB__(v150, v155);
              v156 = (__int128 *)((char *)v150 - v155);
              if (v36)
                goto LABEL_387;
              if (__OFADD__(v156, 1))
                goto LABEL_388;
              if ((uint64_t)v156 + 1 < 1)
              {
                v154 = 0;
              }
              else
              {
                if ((_DWORD)v154 == 1)
                {
                  v150 = v156;
LABEL_156:
                  if (v150)
                    goto LABEL_384;
                  goto LABEL_157;
                }
                v157 = (uint64_t *)(v151 + 64);
                v158 = 1;
                while (1)
                {
                  v159 = *v157;
                  v157 += 3;
                  v150 = (__int128 *)((char *)v156 - v159);
                  if (__OFSUB__(v156, v159))
                    goto LABEL_380;
                  if (__OFADD__(v150, 1))
                    goto LABEL_381;
                  if ((uint64_t)v150 + 1 < 1)
                    break;
                  ++v158;
                  v156 = v150;
                  if (v154 == v158)
                    goto LABEL_156;
                }
                v154 = v158;
                v150 = v156;
              }
LABEL_157:
              v152 = (4 * *(_BYTE *)(v151 + 18) + 8) & 0x3C;
              v149 = ((-15 << v152) - 1) & v149 | (v154 << v152);
              v153 = *(_QWORD *)(v151 + 24 + 24 * v154);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v151 = v153;
              if (!*(_BYTE *)(v153 + 18))
                goto LABEL_175;
            }
          }
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v445);
          result = swift_unknownObjectRetain();
          v150 = v369;
          v153 = v146;
LABEL_175:
          v164 = *(unsigned __int16 *)(v153 + 16);
          v352 = (_QWORD *)v153;
          if ((_DWORD)v164)
          {
            v165 = *(_QWORD *)(v153 + 24);
            v36 = __OFSUB__(v150, v165);
            v166 = (__int128 *)((char *)v150 - v165);
            v23 = v364;
            if (v36)
            {
LABEL_428:
              __break(1u);
LABEL_429:
              __break(1u);
LABEL_430:
              __break(1u);
              goto LABEL_431;
            }
            if (__OFADD__(v166, 1))
              goto LABEL_429;
            if ((uint64_t)v166 + 1 < 1)
            {
              v164 = 0;
            }
            else
            {
              if ((_DWORD)v164 == 1)
              {
                v150 = v166;
                goto LABEL_211;
              }
              v182 = v352 + 6;
              v183 = 1;
              while (1)
              {
                v184 = *v182;
                v182 += 3;
                v150 = (__int128 *)((char *)v166 - v184);
                if (__OFSUB__(v166, v184))
                  goto LABEL_411;
                if (__OFADD__(v150, 1))
                  goto LABEL_412;
                if ((uint64_t)v150 + 1 < 1)
                  break;
                ++v183;
                v166 = v150;
                if (v164 == v183)
                  goto LABEL_211;
              }
              v164 = v183;
              v150 = v166;
            }
LABEL_212:
            swift_unknownObjectRelease();
            v185 = v352;
            swift_unknownObjectRelease();
            v186 = v149 & 0xFFFFFFFFFFFFF0FFLL;
            v161 = (uint64_t)v185;
            v160 = v186 | (v164 << 8);
            v162 = v346;
            goto LABEL_173;
          }
          v23 = v364;
LABEL_211:
          if (v150)
          {
LABEL_425:
            __break(1u);
            goto LABEL_426;
          }
          goto LABEL_212;
        }
      }
      else if (v363 >= 0x800)
      {
LABEL_422:
        __break(1u);
LABEL_423:
        __break(1u);
        goto LABEL_424;
      }
      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v445);
      swift_unknownObjectRetain();
      v160 = specialized Rope._endPath.getter(v146);
      result = swift_unknownObjectRelease();
      v161 = 0;
      v150 = 0;
      v162 = v346;
      if (!v146)
      {
        v163 = 0;
LABEL_214:
        v350 = (char *)((char *)v369 - (char *)v150);
        if (__OFSUB__(v369, v150))
        {
LABEL_399:
          __break(1u);
          goto LABEL_400;
        }
        v187 = v162[1];
        v426[3] = *v162;
        v426[4] = v187;
        v426[5] = v162[2];
        result = BigString.utf8.getter();
        if (__OFSUB__(0, v150))
        {
LABEL_400:
          __break(1u);
          goto LABEL_401;
        }
        v188 = BigString.UTF8View.index(_:offsetBy:)();
        v190 = v189;
        v321 = v192;
        v322 = v191;
        result = outlined release of Locale((uint64_t)&v415);
        if (v163 >= v347)
        {
LABEL_401:
          __break(1u);
          goto LABEL_402;
        }
        if (v358 != *(_QWORD *)(v24 + 88))
        {
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
          goto LABEL_405;
        }
        v319[1] = v190;
        v320 = v188;
        v193 = *(_BYTE **)(v24 + 64);
        if (v161)
        {
          v194 = v160;
          v195 = v161 + 24 * ((v160 >> ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) & 0xF);
          v196 = *(uint64_t **)(v195 + 40);
          v365 = *(_QWORD **)(v195 + 32);
          swift_bridgeObjectRetain();
          v323 = v196;
          result = swift_bridgeObjectRetain();
          v197 = v358;
          v198 = v358;
        }
        else
        {
          swift_unknownObjectRetain();
          v194 = v160;
          specialized Rope._Node.subscript.getter(v160, (uint64_t)v193);
          v365 = v199;
          v323 = v200;
          result = swift_unknownObjectRelease();
          v193 = *(_BYTE **)(v24 + 64);
          v198 = *(_QWORD *)(v24 + 88);
          v197 = v358;
        }
        v349 = v163 + 1;
        v379 = v197;
        v380 = v194;
        v369 = (__int128 *)v420;
        v370 = v387;
        v336 = (uint64_t *)(v351 + 40);
        v381 = (_BYTE *)v161;
LABEL_222:
        if (v197 != v198)
          goto LABEL_389;
        v341 = v198;
        v352 = (_QWORD *)v161;
        if (v161)
        {
          v201 = *(_QWORD *)(v161 + 24 * ((v194 >> ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v201 = specialized Rope._Node.subscript.getter(v194, (uint64_t)v193);
        }
        v202 = v368;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v203 = &v350[v201];
        if (__OFADD__(v350, v201))
          goto LABEL_390;
        if (v193)
        {
          v204 = ((-15 << ((4 * v193[18] + 8) & 0x3C)) - 1) & (unint64_t)v193[18] | ((unint64_t)*((unsigned __int16 *)v193 + 8) << ((4 * v193[18] + 8) & 0x3C));
          result = swift_unknownObjectRetain();
        }
        else
        {
          v204 = 0;
        }
        v205 = v365;
        if (v194 >= v204)
          goto LABEL_391;
        if (v352)
        {
          v206 = (4 * *((_BYTE *)v352 + 18) + 8) & 0x3C;
          v207 = ((v194 >> v206) & 0xF) + 1;
          if (v207 < *((unsigned __int16 *)v352 + 8))
          {
            v348 = (v207 << v206) | ((-15 << v206) - 1) & v194;
            result = swift_unknownObjectRelease_n();
LABEL_237:
            v193 = v381;
            goto LABEL_245;
          }
        }
        v208 = v193[18];
        v209 = (4 * v208 + 8) & 0x3C;
        v210 = (v194 >> v209) & 0xF;
        *(_QWORD *)&v418 = v210;
        if (v208)
        {
          swift_unknownObjectRetain();
          v211 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v193 + 24), (uint64_t *)&v418, (uint64_t)&v379, (uint64_t)v193, v208);
          result = swift_unknownObjectRelease();
          if ((v211 & 1) != 0)
          {
            result = swift_unknownObjectRelease_n();
            v348 = v380;
            v205 = v365;
            goto LABEL_237;
          }
        }
        else
        {
          v212 = v210 + 1;
          if (v210 + 1 < (unint64_t)*((unsigned __int16 *)v193 + 8))
          {
            result = swift_unknownObjectRelease_n();
            v348 = (v212 << v209) | ((-15 << v209) - 1) & v194;
LABEL_244:
            v205 = v365;
LABEL_245:
            if (v349 != v347)
            {
              if (v379 != *(_QWORD *)(v24 + 88))
              {
LABEL_392:
                __break(1u);
LABEL_393:
                __break(1u);
                goto LABEL_394;
              }
              v358 = v379;
              v334 = v193;
              v335 = v203;
              if (v193)
              {
                v215 = &v193[24 * ((v348 >> ((4 * v193[18] + 8) & 0x3C)) & 0xF)];
                v216 = *((_QWORD *)v215 + 4);
                v217 = *((_QWORD *)v215 + 5);
                swift_bridgeObjectRetain();
                v339 = v217;
                swift_bridgeObjectRetain();
              }
              else
              {
                v218 = *(_QWORD *)(v24 + 64);
                swift_unknownObjectRetain();
                v205 = v365;
                specialized Rope._Node.subscript.getter(v348, v218);
                v339 = v219;
                v216 = v220;
                swift_unknownObjectRelease();
              }
              result = swift_bridgeObjectRetain();
              v221 = 0;
              v222 = v336;
              v371 = v216;
              v360 = v194;
              while (1)
              {
                v224 = v221 + 1;
                if (__OFADD__(v221, 1))
                {
                  __break(1u);
LABEL_378:
                  __break(1u);
                  goto LABEL_379;
                }
                v226 = *(v222 - 1);
                v225 = *v222;
                if (v205[2])
                {
                  swift_bridgeObjectRetain_n();
                  v227 = specialized __RawDictionaryStorage.find<A>(_:)(v226, v225);
                  if ((v228 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(v205[7] + 72 * v227, (uint64_t)&v394);
                  }
                  else
                  {
                    v398 = 0;
                    v396 = 0u;
                    v397 = 0u;
                    v394 = 0u;
                    v395 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  v216 = v371;
                  if (!*(_QWORD *)(v371 + 16))
                  {
LABEL_260:
                    v393 = 0;
                    v391 = 0u;
                    v392 = 0u;
                    v389 = 0u;
                    v390 = 0u;
                    goto LABEL_267;
                  }
                }
                else
                {
                  v398 = 0;
                  v396 = 0u;
                  v397 = 0u;
                  v394 = 0u;
                  v395 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(_QWORD *)(v216 + 16))
                    goto LABEL_260;
                }
                swift_bridgeObjectRetain();
                v229 = specialized __RawDictionaryStorage.find<A>(_:)(v226, v225);
                if ((v230 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v216 + 56) + 72 * v229, (uint64_t)&v389);
                }
                else
                {
                  v393 = 0;
                  v391 = 0u;
                  v392 = 0u;
                  v389 = 0u;
                  v390 = 0u;
                }
                swift_bridgeObjectRelease();
LABEL_267:
                swift_bridgeObjectRelease();
                v193 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v394, (uint64_t)&v379, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v389, (uint64_t)v370, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v382)
                {
                  if (v388)
                    goto LABEL_284;
                  outlined destroy of Any?((uint64_t)&v379, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  result = outlined destroy of Any?((uint64_t)&v394, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_254;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v379, (uint64_t)v377, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v388)
                  goto LABEL_283;
                v231 = *((_OWORD *)v370 + 3);
                v374 = *((_OWORD *)v370 + 2);
                v375 = v231;
                v376 = *((_QWORD *)v370 + 8);
                v232 = *((_OWORD *)v370 + 1);
                v372 = *(_OWORD *)v370;
                v373 = v232;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v377, (uint64_t)v426);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v372, (uint64_t)v425);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v426, (uint64_t)&v418, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v425, (uint64_t)v369, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v419)
                {
                  if (!v421)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v418);
LABEL_252:
                    v223 = 0;
                    goto LABEL_253;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v418, (uint64_t)v422);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v369, (uint64_t)v417);
                  v233 = v423;
                  v362 = v424;
                  v361 = __swift_project_boxed_opaque_existential_1(v422, v423);
                  v367 = (__int128 *)v319;
                  v234 = *(_QWORD *)(v233 - 8);
                  MEMORY[0x1E0C80A78](v361);
                  v236 = (char *)v319 - ((v235 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v417, (uint64_t)v416);
                  v237 = type metadata accessor for Optional();
                  v366 = v319;
                  v238 = *(_QWORD *)(v237 - 8);
                  MEMORY[0x1E0C80A78](v237);
                  v240 = (char *)v319 - v239;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  v241 = swift_dynamicCast();
                  v242 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v234 + 56);
                  if (v241)
                  {
                    v242(v240, 0, 1, v233);
                    (*(void (**)(char *, char *, uint64_t))(v234 + 32))(v236, v240, v233);
                    v223 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v234 + 8))(v236, v233);
                  }
                  else
                  {
                    v242(v240, 1, 1, v233);
                    (*(void (**)(char *, uint64_t))(v238 + 8))(v240, v237);
                    v223 = 0;
                  }
                  v23 = v364;
                  v194 = v360;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v417);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v422);
                  v205 = v365;
                }
                else
                {
                  if (v421)
                  {
                    outlined destroy of Any?((uint64_t)v369, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_252;
                  }
                  v223 = 1;
                }
LABEL_253:
                outlined destroy of Any?((uint64_t)v425, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v426, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v372);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v377);
                outlined destroy of Any?((uint64_t)&v379, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                result = outlined destroy of Any?((uint64_t)&v394, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v223 & 1) == 0)
                  goto LABEL_285;
LABEL_254:
                v222 += 2;
                ++v221;
                v216 = v371;
                if (v224 == v23)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  v197 = v358;
                  v24 = v359;
                  v193 = *(_BYTE **)(v359 + 64);
                  v198 = *(_QWORD *)(v359 + 88);
                  v379 = v358;
                  v194 = v348;
                  v380 = v348;
                  v161 = (uint64_t)v334;
                  v381 = v334;
                  v36 = __OFADD__(v349++, 1);
                  v350 = v335;
                  if (!v36)
                    goto LABEL_222;
                  __break(1u);
LABEL_283:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v377);
LABEL_284:
                  outlined destroy of Any?((uint64_t)&v379, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v389, (uint64_t *)v193);
                  outlined destroy of Any?((uint64_t)&v394, (uint64_t *)v193);
LABEL_285:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  v24 = v359;
                  v202 = v368;
                  goto LABEL_286;
                }
              }
            }
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
LABEL_286:
            if (v341 != *(_QWORD *)(v24 + 88))
              goto LABEL_403;
            if (v352)
            {
              v243 = v352[3 * ((v194 >> ((4 * *((_BYTE *)v352 + 18) + 8) & 0x3C)) & 0xF) + 3];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v244 = *(_QWORD *)(v24 + 64);
              swift_unknownObjectRetain();
              v243 = specialized Rope._Node.subscript.getter(v194, v244);
              swift_unknownObjectRelease();
            }
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v245 = &v350[v243];
            if (__OFADD__(v350, v243))
              goto LABEL_404;
            v246 = v346;
            v247 = v346[1];
            v426[0] = *v346;
            v426[1] = v247;
            v426[2] = v346[2];
            BigString.utf8.getter();
            result = v320;
            if (__OFSUB__(v245, (unint64_t)v320 >> 11))
            {
LABEL_405:
              __break(1u);
LABEL_406:
              __break(1u);
              goto LABEL_407;
            }
            v248 = BigString.UTF8View.index(_:offsetBy:)();
            v250 = v249;
            v252 = v251;
            v254 = v253;
            result = outlined release of Locale((uint64_t)v416);
            if (v340 >= v248 >> 10)
              v255 = v248;
            else
              v255 = v333;
            if (v340 >= v248 >> 10)
              v256 = v250;
            else
              v256 = v332;
            if (v340 >= v248 >> 10)
              v257 = v252;
            else
              v257 = v331;
            if (v340 >= v248 >> 10)
              v258 = v254;
            else
              v258 = v330;
            v259 = *v246;
            v260 = v246[1];
            v425[2] = v246[2];
            v425[1] = v260;
            v425[0] = v259;
            v261 = v343;
            if (v255 >> 10 < v343)
              goto LABEL_406;
            *(_QWORD *)&v389 = v363;
            *((_QWORD *)&v389 + 1) = v357;
            *(_QWORD *)&v390 = v356;
            *((_QWORD *)&v390 + 1) = v355;
            *(_QWORD *)&v391 = v255;
            *((_QWORD *)&v391 + 1) = v256;
            *(_QWORD *)&v392 = v257;
            *((_QWORD *)&v392 + 1) = v258;
            v262 = *(_QWORD *)(v202 + 16);
            if (!v262 || v343 == v255 >> 10)
            {
              v371 = v256;
            }
            else
            {
              v263 = v256;
              swift_bridgeObjectRetain();
              outlined retain of Locale((uint64_t)v425);
              v264 = 40;
              v265 = v262;
              while (*(_QWORD *)(v202 + v264))
              {
                swift_bridgeObjectRelease();
                v264 += 16;
                if (!--v265)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_315;
                }
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              BigString.utf8.getter();
              BigString.UTF8View.subscript.getter();
              outlined release of Locale((uint64_t)v417);
              v377[0] = v363;
              v377[1] = v357;
              v377[2] = v356;
              v377[3] = v355;
              v377[4] = v363;
              v377[5] = v357;
              v377[6] = v356;
              v377[7] = v355;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2, v377, &v379);
              result = outlined release of Locale((uint64_t)&v418);
              if (v386 != 2)
              {
                v255 = v383;
                if (v261 > v383 >> 10)
                  goto LABEL_430;
                v263 = v384;
                v257 = v385;
                v258 = v386;
              }
LABEL_315:
              *(_QWORD *)&v372 = v363;
              *((_QWORD *)&v372 + 1) = v357;
              *(_QWORD *)&v373 = v356;
              *((_QWORD *)&v373 + 1) = v355;
              *(_QWORD *)&v374 = v255;
              *((_QWORD *)&v374 + 1) = v263;
              *(_QWORD *)&v375 = v257;
              *((_QWORD *)&v375 + 1) = v258;
              v266 = *(_QWORD *)(v202 + 16);
              v371 = v263;
              if (v266)
              {
                v267 = 40;
                while (!*(_QWORD *)(v202 + v267))
                {
                  v267 += 16;
                  if (!--v266)
                    goto LABEL_319;
                }
                *(_QWORD *)&v394 = MEMORY[0x1E0DEE9D8];
                swift_bridgeObjectRetain();
                v303 = (unint64_t *)(v202 + 40);
                do
                {
                  v308 = *v303;
                  if (*v303)
                  {
                    v309 = *(v303 - 1);
                    if ((v308 & 0x2000000000000000) != 0 ? HIBYTE(v308) & 0xF : v309 & 0xFFFFFFFFFFFFLL)
                    {
                      if ((v308 & 0x1000000000000000) != 0)
                      {
                        v304 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                      }
                      else
                      {
                        if ((v308 & 0x2000000000000000) != 0)
                        {
                          v379 = *(v303 - 1);
                          v380 = v308 & 0xFFFFFFFFFFFFFFLL;
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          if ((v309 & 0x1000000000000000) == 0)
                            _StringObject.sharedUTF8.getter();
                          swift_bridgeObjectRetain();
                        }
                        v304 = _decodeScalar(_:startingAt:)();
                        swift_bridgeObjectRelease();
                      }
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      v305 = *(_QWORD *)(v394 + 16);
                      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v305);
                      v306 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v305, v304);
                      destructiveProjectEnumData for PredicateCodableError(v306, v307);
                    }
                  }
                  v303 += 2;
                  --v262;
                }
                while (v262);
                swift_bridgeObjectRelease();
                v311 = v394;
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)v422);
                v312 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v311);
                v314 = v313;
                v316 = v315;
                v318 = v317;
                swift_bridgeObjectRelease();
                outlined release of Locale((uint64_t)&v379);
                outlined release of Locale((uint64_t)v425);
                result = outlined release of AttributedString.Runs((uint64_t)v445);
                v268 = v345;
                if (v318 != 2)
                {
                  if (v343 > v312 >> 10)
                  {
LABEL_431:
                    __break(1u);
                    goto LABEL_432;
                  }
                  v255 = v312;
                  v371 = v314;
                  v257 = v316;
                  v258 = v318;
                }
LABEL_321:
                if (v353 == *(_QWORD *)(v359 + 88))
                {
                  if (v268)
                  {
                    v269 = *(_QWORD *)(v268 + 24 * ((v344 >> ((4 * *(_BYTE *)(v268 + 18) + 8) & 0x3C)) & 0xF) + 32);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    v270 = *(_QWORD *)(v359 + 64);
                    swift_unknownObjectRetain();
                    specialized Rope._Node.subscript.getter(v344, v270);
                    v269 = v271;
                    swift_unknownObjectRelease();
                  }
                  v272 = (*(uint64_t (**)(_QWORD, _QWORD))(v354[6] + 24))(v354[2], v354[6]);
                  if (*(_QWORD *)(v269 + 16)
                    && (v274 = specialized __RawDictionaryStorage.find<A>(_:)(v272, v273), (v275 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v269 + 56) + 72 * v274, (uint64_t)&v394);
                  }
                  else
                  {
                    v398 = 0;
                    v396 = 0u;
                    v397 = 0u;
                    v394 = 0u;
                    v395 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v394, (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                    v277 = v326;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                              + 56))(v277, 0, 1, AssociatedTypeWitness);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v394, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v278 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v278 - 8) + 56))(v326, 1, 1, v278);
                  }
                  v279 = (*(uint64_t (**)(_QWORD, _QWORD))(v354[7] + 24))(v354[3], v354[7]);
                  if (*(_QWORD *)(v269 + 16)
                    && (v281 = specialized __RawDictionaryStorage.find<A>(_:)(v279, v280), (v282 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v269 + 56) + 72 * v281, (uint64_t)&v394);
                  }
                  else
                  {
                    v398 = 0;
                    v396 = 0u;
                    v397 = 0u;
                    v394 = 0u;
                    v395 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v394, (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v283 = swift_getAssociatedTypeWitness();
                    v284 = v327;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v283 - 8) + 56))(v284, 0, 1, v283);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v394, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v285 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v285 - 8) + 56))(v327, 1, 1, v285);
                  }
                  v286 = (*(uint64_t (**)(_QWORD, _QWORD))(v354[8] + 24))(v354[4], v354[8]);
                  if (*(_QWORD *)(v269 + 16)
                    && (v288 = specialized __RawDictionaryStorage.find<A>(_:)(v286, v287), (v289 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v269 + 56) + 72 * v288, (uint64_t)&v394);
                  }
                  else
                  {
                    v398 = 0;
                    v396 = 0u;
                    v397 = 0u;
                    v394 = 0u;
                    v395 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v394, (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v290 = swift_getAssociatedTypeWitness();
                    v291 = v328;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v290 - 8) + 56))(v291, 0, 1, v290);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v394, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v292 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v292 - 8) + 56))(v328, 1, 1, v292);
                  }
                  v293 = (*(uint64_t (**)(_QWORD, _QWORD))(v354[9] + 24))(v354[5], v354[9]);
                  if (*(_QWORD *)(v269 + 16)
                    && (v295 = specialized __RawDictionaryStorage.find<A>(_:)(v293, v294), (v296 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v269 + 56) + 72 * v295, (uint64_t)&v394);
                  }
                  else
                  {
                    v398 = 0;
                    v396 = 0u;
                    v397 = 0u;
                    v394 = 0u;
                    v395 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v394, (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v297 = swift_getAssociatedTypeWitness();
                    v298 = v329;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v297 - 8) + 56))(v298, 0, 1, v297);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v394, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v299 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v299 - 8) + 56))(v329, 1, 1, v299);
                  }
                  v300 = v324;
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  if (v255 >> 10 >= v337 >> 10)
                  {
                    v301 = v325;
                    *v325 = v337;
                    v302 = v342;
                    v301[1] = v338;
                    v301[2] = v302;
                    v301[3] = v300;
                    v301[4] = v255;
                    v301[5] = v371;
                    v301[6] = v257;
                    v301[7] = v258;
                    return result;
                  }
LABEL_408:
                  __break(1u);
LABEL_409:
                  __break(1u);
LABEL_410:
                  __break(1u);
LABEL_411:
                  __break(1u);
LABEL_412:
                  __break(1u);
                  goto LABEL_413;
                }
LABEL_407:
                __break(1u);
                goto LABEL_408;
              }
LABEL_319:
              outlined release of Locale((uint64_t)v425);
            }
            result = outlined release of AttributedString.Runs((uint64_t)v445);
            v268 = v345;
            goto LABEL_321;
          }
        }
        if (v193)
        {
          v213 = v193[18];
          v214 = *((unsigned __int16 *)v193 + 8);
          result = swift_unknownObjectRelease_n();
          v348 = ((-15 << ((4 * v213 + 8) & 0x3C)) - 1) & v213 | (unint64_t)(v214 << ((4 * v213 + 8) & 0x3C));
        }
        else
        {
          v348 = 0;
        }
        v193 = 0;
        v379 = v341;
        goto LABEL_244;
      }
LABEL_173:
      swift_unknownObjectRetain();
      v163 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v358, v160, v161, v146, v371);
      result = swift_unknownObjectRelease_n();
      goto LABEL_214;
    }
LABEL_146:
    outlined release of Locale((uint64_t)v428);
LABEL_147:
    v337 = v52;
    result = outlined release of AttributedString.Runs((uint64_t)v445);
    goto LABEL_148;
  }
  BigString.utf8.getter();
  v139 = (uint64_t)v370;
  v137 = v371;
  v140 = BigString.UTF8View.index(before:)();
  v366 = v142;
  v367 = v141;
  v365 = v143;
  outlined release of Locale((uint64_t)&v402);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  result = outlined release of Locale((uint64_t)&v403);
  if (v128 < v140 >> 10)
  {
LABEL_432:
    __break(1u);
    goto LABEL_433;
  }
  v429[0] = v140;
  v429[1] = v367;
  v429[2] = v366;
  v429[3] = v365;
  v429[4] = v132;
  v429[5] = v135;
  v429[6] = v137;
  v429[7] = v139;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1, v429, &v379);
  result = outlined release of Locale((uint64_t)&v404);
  v24 = v359;
  v23 = v364;
  v52 = v337;
  v136 = v342;
  if (v382 == 2)
    goto LABEL_142;
  v52 = v379;
  if (v128 >= v379 >> 10)
  {
    v338 = v380;
    v136 = (unint64_t)v381;
    v53 = v382;
    goto LABEL_142;
  }
LABEL_434:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice4.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(_QWORD *a1, unint64_t *a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  _QWORD *v6;
  int *TupleTypeMetadata;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v6 = malloc(0x68uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  v6[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[9] = TupleTypeMetadata;
  v8 = *((_QWORD *)TupleTypeMetadata - 1);
  v6[10] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v6[11] = v9;
  v10 = AttributedString.Runs.AttributesSlice4.subscript.read(v6 + 5, a2, a3);
  v12 = v11;
  v14 = v13;
  v6[12] = v10;
  v17 = *v15;
  v16 = v15[1];
  v18 = (_OWORD *)v15[2];
  v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v9, v12, v19);
  v20 = &v9[TupleTypeMetadata[12]];
  v21 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v14, v21);
  v22 = &v9[TupleTypeMetadata[16]];
  v23 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, v17, v23);
  v24 = &v9[TupleTypeMetadata[20]];
  v25 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v16, v25);
  v26 = &v9[TupleTypeMetadata[24]];
  v27 = v18[1];
  v28 = v18[2];
  v29 = v18[3];
  *(_OWORD *)v26 = *v18;
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v28;
  *((_OWORD *)v26 + 3) = v29;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *a1;
  v4 = *a1 + 40;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 80) + 8))(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*a1 + 72));
  v5 = *(void **)(v3 + 88);
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice4.subscript.read(_QWORD *a1, unint64_t *a2, _QWORD *a3))(uint64_t a1)
{
  _QWORD *v6;
  int *TupleTypeMetadata;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  v6[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[8] = TupleTypeMetadata;
  v8 = *((_QWORD *)TupleTypeMetadata - 1);
  v6[9] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v6[10] = v9;
  v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  v12 = (uint64_t)&v9[TupleTypeMetadata[20]];
  v13 = (unint64_t *)&v9[TupleTypeMetadata[24]];
  AttributedString.Runs.AttributesSlice4.subscript.getter((uint64_t)v9, v10, v11, v12, v13, a2, a3);
  v6[5] = v11;
  v6[6] = v12;
  v6[7] = v13;
  return AttributedString.Runs.AttributesSlice4.subscript.read;
}

void AttributedString.Runs.AttributesSlice4.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 80);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 72) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 64));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>, a3);
  JUMPOUT(0x186DA4550);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice4.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice4.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>, a1);
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  _OWORD v25[12];
  uint64_t v26;

  v9 = v8;
  v15 = *a1;
  v16 = *a2;
  v17 = *a3;
  v18 = *(_OWORD *)(v9 + 176);
  v25[10] = *(_OWORD *)(v9 + 160);
  v25[11] = v18;
  v26 = *(_QWORD *)(v9 + 192);
  v19 = *(_OWORD *)(v9 + 112);
  v25[6] = *(_OWORD *)(v9 + 96);
  v25[7] = v19;
  v20 = *(_OWORD *)(v9 + 144);
  v25[8] = *(_OWORD *)(v9 + 128);
  v25[9] = v20;
  v21 = *(_OWORD *)(v9 + 48);
  v25[2] = *(_OWORD *)(v9 + 32);
  v25[3] = v21;
  v22 = *(_OWORD *)(v9 + 80);
  v25[4] = *(_OWORD *)(v9 + 64);
  v25[5] = v22;
  v23 = *(_OWORD *)(v9 + 16);
  v25[0] = *(_OWORD *)v9;
  v25[1] = v23;
  outlined retain of AttributedString.Runs((uint64_t)v25);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice4.init(runs:)(v9, *(_QWORD *)(v15 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v16 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v17 + *MEMORY[0x1E0DEE2A8] + 8), a4, a5, a6, a8, a7).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice5.init(runs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __n128 result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[3];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_182065BC0;
  *(_QWORD *)(v18 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a2, a6);
  *(_QWORD *)(v18 + 40) = v19;
  *(_QWORD *)(v18 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a3, a7);
  *(_QWORD *)(v18 + 56) = v20;
  *(_QWORD *)(v18 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a4, a9);
  *(_QWORD *)(v18 + 72) = v21;
  *(_QWORD *)(v18 + 80) = (*(uint64_t (**)(uint64_t))(a10 + 24))(a5);
  *(_QWORD *)(v18 + 88) = v22;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v45, a2, a6);
  v37 = v45[1];
  v38 = v45[0];
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(a7 + 32))(v44, a3);
  v23 = v44[0];
  v34 = v44[0];
  v36 = v44[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a9 + 32))(v43, a4, a9);
  v24 = v43[0];
  v35 = v43[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(a10 + 32))(v42, a5);
  v26 = v42[0];
  v25 = v42[1];
  (*(void (**)(uint64_t *__return_ptr))(a11 + 32))(v41);
  v40 = specialized RangeReplaceableCollection.init(_contents:_:_:_:_:)(v38, v37, v23, v36, v24, v35, v26, v25, v41[0], v41[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v26, v25);
  outlined consume of AttributedString.AttributeRunBoundaries?(v24, v35);
  outlined consume of AttributedString.AttributeRunBoundaries?(v34, v36);
  outlined consume of AttributedString.AttributeRunBoundaries?(v38, v37);
  v27 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v27;
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v29;
  v30 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v30;
  v31 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v31;
  v32 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v32;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(_QWORD *)(a8 + 192) = v28;
  *(_QWORD *)(a8 + 200) = v18;
  *(_QWORD *)(a8 + 208) = v40;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice5.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, _QWORD *a8)
{
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  __int128 *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int v104;
  void (*v105)(char *, uint64_t, uint64_t, uint64_t);
  char *v106;
  __int128 *v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 *v159;
  unint64_t v160;
  unint64_t *v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  _BYTE *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  char v205;
  unint64_t v206;
  int v207;
  char v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  unint64_t v231;
  char v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  int v243;
  void (*v244)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v245;
  uint64_t v246;
  char *v247;
  __int128 *v248;
  __int128 v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  __int128 v261;
  __int128 v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  uint64_t AssociatedTypeWitness;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t *v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  unint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  _BYTE *v343;
  uint64_t *v344;
  uint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  __int128 *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  _BYTE *v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  char *v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t *v377;
  __int128 *v378;
  uint64_t v379;
  __int128 *v380;
  unint64_t v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  uint64_t v386;
  _QWORD v387[9];
  _BYTE v388[40];
  unint64_t v389;
  uint64_t v390;
  _BYTE *v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  _BYTE v397[24];
  uint64_t v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  uint64_t v425;
  _BYTE v426[48];
  _BYTE v427[48];
  __int128 v428;
  uint64_t v429;
  _BYTE v430[24];
  uint64_t v431;
  _QWORD v432[3];
  uint64_t v433;
  char *v434;
  _OWORD v435[3];
  _OWORD v436[6];
  _QWORD v437[8];
  _OWORD v438[3];
  _QWORD v439[8];
  _QWORD v440[3];
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  _OWORD v455[4];
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  unint64_t v464;

  v369 = a8;
  v9 = *a7;
  v10 = a7[1];
  v365 = a7[2];
  v366 = v10;
  v364 = a7[3];
  v11 = *v8;
  v12 = v8[1];
  v13 = v8[2];
  v455[3] = v8[3];
  v455[2] = v13;
  v455[0] = v11;
  v455[1] = v12;
  v14 = v8[4];
  v15 = v8[5];
  v16 = v8[6];
  v459 = v8[7];
  v458 = v16;
  v456 = v14;
  v457 = v15;
  v17 = v8[8];
  v18 = v8[9];
  v19 = v8[10];
  v20 = v8[11];
  v464 = *((_QWORD *)v8 + 24);
  v463 = v20;
  v462 = v19;
  v460 = v17;
  v373 = v9;
  v21 = v9 >> 10;
  v461 = v18;
  if (v21 < *((_QWORD *)&v17 + 1) >> 10)
    goto LABEL_401;
  v350 = *((_QWORD *)&v462 + 1) >> 10;
  if (*((_QWORD *)&v462 + 1) >> 10 < v21)
    goto LABEL_401;
  v370 = *((_QWORD *)v8 + 25);
  v22 = *(_QWORD *)(v370 + 16);
  if (!v22)
  {
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }
  v23 = *(_QWORD *)&v455[0];
  v24 = *(_QWORD *)(*(_QWORD *)&v455[0] + 64);
  v25 = *(_QWORD *)(*(_QWORD *)&v455[0] + 80);
  if (v24)
    v26 = *(_QWORD *)(*(_QWORD *)&v455[0] + 80);
  else
    v26 = 0;
  v380 = (__int128 *)(v373 >> 11);
  if (v26 < (uint64_t)(v373 >> 11))
    goto LABEL_403;
  v352 = v21;
  v379 = *((_QWORD *)v8 + 26);
  v357 = *((_QWORD *)&v461 + 1);
  v358 = v461;
  v349 = v462;
  v340 = *((_QWORD *)&v463 + 1);
  v341 = v463;
  v338 = a5;
  v339 = v464;
  v27 = *(_QWORD *)(*(_QWORD *)&v455[0] + 72);
  v362 = *(_QWORD *)(*(_QWORD *)&v455[0] + 88);
  v367 = *(_QWORD *)&v455[0];
  v375 = v22;
  v333 = a6;
  v334 = result;
  v336 = a3;
  v337 = a4;
  v335 = a2;
  v342 = *((_QWORD *)&v462 + 1);
  v359 = *((_QWORD *)&v17 + 1) >> 10;
  v360 = *((_QWORD *)&v17 + 1);
  if (v24 && (uint64_t)v380 < v25 && *(_WORD *)(v24 + 16))
  {
    v28 = *(unsigned __int8 *)(v24 + 18);
    if (*(_BYTE *)(v24 + 18))
    {
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)v455);
      v29 = v380;
      v30 = v24;
      while (1)
      {
        v33 = *(unsigned __int16 *)(v30 + 16);
        if (!*(_WORD *)(v30 + 16))
          goto LABEL_14;
        v34 = *(_QWORD *)(v30 + 40);
        v35 = __OFSUB__(v29, v34);
        v36 = (__int128 *)((char *)v29 - v34);
        if (v35)
          goto LABEL_393;
        if (__OFADD__(v36, 1))
          goto LABEL_394;
        if ((uint64_t)v36 + 1 < 1)
        {
          v33 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v33 == 1)
          break;
        v37 = (uint64_t *)(v30 + 64);
        v38 = 1;
        while (1)
        {
          v39 = *v37;
          v37 += 3;
          v29 = (__int128 *)((char *)v36 - v39);
          if (__OFSUB__(v36, v39))
            goto LABEL_386;
          if (__OFADD__(v29, 1))
          {
LABEL_387:
            __break(1u);
LABEL_388:
            __break(1u);
LABEL_389:
            __break(1u);
LABEL_390:
            __break(1u);
            goto LABEL_391;
          }
          if ((uint64_t)v29 + 1 < 1)
            break;
          ++v38;
          v36 = v29;
          if (v33 == v38)
            goto LABEL_14;
        }
        v33 = v38;
        v29 = v36;
LABEL_15:
        v31 = (4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C;
        v28 = ((-15 << v31) - 1) & v28 | (v33 << v31);
        v32 = *(_QWORD *)(v30 + 24 + 24 * v33);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v30 = v32;
        if (!*(_BYTE *)(v32 + 18))
          goto LABEL_32;
      }
      v29 = v36;
LABEL_14:
      if (!v29)
        goto LABEL_15;
LABEL_391:
      __break(1u);
LABEL_392:
      __break(1u);
LABEL_393:
      __break(1u);
LABEL_394:
      __break(1u);
LABEL_395:
      __break(1u);
LABEL_396:
      __break(1u);
LABEL_397:
      __break(1u);
LABEL_398:
      __break(1u);
LABEL_399:
      __break(1u);
      goto LABEL_400;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v455);
    v29 = v380;
    v32 = v24;
LABEL_32:
    v40 = *(unsigned __int16 *)(v32 + 16);
    if (*(_WORD *)(v32 + 16))
    {
      v41 = *(_QWORD *)(v32 + 24);
      v35 = __OFSUB__(v29, v41);
      v42 = (__int128 *)((char *)v29 - v41);
      v23 = v367;
      if (v35)
      {
LABEL_434:
        __break(1u);
        goto LABEL_435;
      }
      if (__OFADD__(v42, 1))
      {
LABEL_435:
        __break(1u);
        goto LABEL_436;
      }
      if ((uint64_t)v42 + 1 < 1)
      {
        v40 = 0;
      }
      else
      {
        if ((_DWORD)v40 == 1)
        {
          v29 = v42;
          goto LABEL_45;
        }
        v43 = (uint64_t *)(v32 + 48);
        v44 = 1;
        while (1)
        {
          v45 = *v43;
          v43 += 3;
          v29 = (__int128 *)((char *)v42 - v45);
          if (__OFSUB__(v42, v45))
            goto LABEL_417;
          if (__OFADD__(v29, 1))
            goto LABEL_418;
          if ((uint64_t)v29 + 1 < 1)
            break;
          ++v44;
          v42 = v29;
          if (v40 == v44)
            goto LABEL_45;
        }
        v40 = v44;
        v29 = v42;
      }
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v46 = v32;
      v353 = v28 & 0xFFFFFFFFFFFFF0FFLL | (v40 << 8);
      v22 = v375;
      v354 = v46;
      goto LABEL_30;
    }
    v23 = v367;
LABEL_45:
    if (v29)
    {
LABEL_432:
      __break(1u);
      goto LABEL_433;
    }
    goto LABEL_46;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v455);
  v353 = specialized Rope._endPath.getter(v24);
  result = swift_unknownObjectRelease();
  v29 = 0;
  v354 = 0;
  if (v24)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v377 = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v362, v353, v354, v24, v27);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v377 = 0;
LABEL_48:
  v372 = (char *)((char *)v380 - (char *)v29);
  if (__OFSUB__(v380, v29))
  {
LABEL_404:
    __break(1u);
    goto LABEL_405;
  }
  v47 = *(_OWORD *)(v23 + 32);
  v452 = *(_OWORD *)(v23 + 16);
  v453 = v47;
  v454 = *(_OWORD *)(v23 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v29))
  {
LABEL_405:
    __break(1u);
    goto LABEL_406;
  }
  v355 = (__int128 *)(v23 + 16);
  v48 = BigString.UTF8View.index(_:offsetBy:)();
  v50 = v49;
  v345 = v52;
  v346 = v51;
  result = outlined release of Locale((uint64_t)&v409);
  v53 = v373;
  v351 = v366;
  v347 = v364;
  v348 = v365;
  v356 = *((_QWORD *)&v456 + 1);
  if (v377 == *((uint64_t **)&v456 + 1))
    goto LABEL_147;
  if (v362 != *(_QWORD *)(v23 + 88))
  {
LABEL_422:
    __break(1u);
LABEL_423:
    __break(1u);
    goto LABEL_424;
  }
  if (v354)
  {
    v54 = v354 + 24 * ((v353 >> ((4 * *(_BYTE *)(v354 + 18) + 8) & 0x3C)) & 0xF);
    v55 = *(_QWORD **)(v54 + 32);
    v56 = *(_QWORD *)(v54 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v57 = *(_QWORD *)(v23 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v353, v57);
    v55 = v58;
    v56 = v59;
    result = swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v455[0] + 1) >= (uint64_t)v377)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_111;
  }
  v329 = *((_QWORD *)&v455[0] + 1);
  v330 = v56;
  v368 = v397;
  v378 = (__int128 *)v430;
  v343 = (_BYTE *)v48;
  v344 = (uint64_t *)(v370 + 40);
  v60 = v353;
  v61 = v354;
  v332 = v50;
  v371 = v55;
LABEL_57:
  v62 = *(_QWORD *)(v23 + 64);
  v63 = *(_QWORD *)(v23 + 88);
  v389 = v362;
  v390 = v60;
  v391 = (_BYTE *)v61;
  if (v362 != v63)
    goto LABEL_425;
  if (v62)
  {
    v64 = *(unsigned __int8 *)(v62 + 18);
    v65 = v60;
    v66 = v61;
    result = swift_unknownObjectRetain();
    v61 = v66;
    v60 = v65;
    if (v65 <= v64)
      goto LABEL_426;
  }
  else if (!v60)
  {
    goto LABEL_426;
  }
  if (!v61 || (v67 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C, ((v60 >> v67) & 0xF) == 0))
  {
    v69 = *(unsigned __int8 *)(v62 + 18);
    v70 = (4 * v69 + 8) & 0x3C;
    v71 = (v60 >> v70) & 0xF;
    *(_QWORD *)&v428 = v71;
    if (v69)
    {
      swift_unknownObjectRetain();
      v72 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v62 + 16, v62 + 24, (uint64_t *)&v428, (uint64_t)&v389, v69);
      result = swift_unknownObjectRelease();
      if ((v72 & 1) == 0)
        goto LABEL_431;
      if (v389 != v362)
        goto LABEL_427;
      v61 = (uint64_t)v391;
      v68 = v390;
      v22 = v375;
      if (v391)
        goto LABEL_69;
    }
    else
    {
      if (!v71)
        goto LABEL_431;
      v68 = ((v71 - 1) << v70) | ((-15 << v70) - 1) & v60;
      v390 = v68;
      v391 = (_BYTE *)v62;
      v61 = v62;
      if (v62)
        goto LABEL_69;
    }
    swift_unknownObjectRetain();
    v351 = v68;
    v74 = specialized Rope._Node.subscript.getter(v68, v62);
    swift_unknownObjectRelease();
    v347 = 0;
    v75 = 1;
    goto LABEL_73;
  }
  v68 = ((((v60 >> v67) & 0xF) - 1) << v67) | ((-15 << v67) - 1) & v60;
  v390 = v68;
LABEL_69:
  v73 = (4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C;
  v351 = v68;
  v347 = v61;
  v74 = *(_QWORD *)(v61 + 24 * ((v68 >> v73) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75 = 0;
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v372, v74))
    goto LABEL_428;
  if (v362 != *(_QWORD *)(v23 + 88))
    goto LABEL_429;
  v331 = &v372[-v74];
  if ((v75 & 1) != 0)
  {
    v76 = *(_QWORD *)(v23 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v351, v76);
    v348 = v77;
    v79 = v78;
    swift_unknownObjectRelease();
  }
  else
  {
    v80 = v347 + 24 * ((v351 >> ((4 * *(_BYTE *)(v347 + 18) + 8) & 0x3C)) & 0xF);
    v79 = *(_QWORD *)(v80 + 32);
    v81 = *(_QWORD *)(v80 + 40);
    swift_bridgeObjectRetain();
    v348 = v81;
    swift_bridgeObjectRetain();
  }
  v82 = v371;
  v83 = (uint64_t)v368;
  v377 = (uint64_t *)((char *)v377 - 1);
  result = swift_bridgeObjectRetain();
  v84 = 0;
  v85 = v344;
  v381 = v79;
  while (1)
  {
    v87 = v84 + 1;
    if (__OFADD__(v84, 1))
      goto LABEL_390;
    v89 = *(v85 - 1);
    v88 = *v85;
    if (v82[2])
    {
      swift_bridgeObjectRetain_n();
      v90 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v88);
      if ((v91 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(v82[7] + 72 * v90, (uint64_t)&v420);
      }
      else
      {
        v424 = 0;
        v423 = 0u;
        v422 = 0u;
        v421 = 0u;
        v420 = 0u;
      }
      swift_bridgeObjectRelease();
      v79 = v381;
      if (!*(_QWORD *)(v381 + 16))
      {
LABEL_88:
        v418 = 0;
        v417 = 0u;
        v416 = 0u;
        v415 = 0u;
        v414 = 0u;
        goto LABEL_95;
      }
    }
    else
    {
      v424 = 0;
      v423 = 0u;
      v422 = 0u;
      v421 = 0u;
      v420 = 0u;
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(v79 + 16))
        goto LABEL_88;
    }
    swift_bridgeObjectRetain();
    v92 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v88);
    if ((v93 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v79 + 56) + 72 * v92, (uint64_t)&v414);
    }
    else
    {
      v418 = 0;
      v417 = 0u;
      v416 = 0u;
      v415 = 0u;
      v414 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v420, (uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v414, v83, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v392)
    {
      if (v398)
        goto LABEL_113;
      outlined destroy of Any?((uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v414, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v420, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_82;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v389, (uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v398)
      break;
    v94 = *(_OWORD *)(v83 + 48);
    v401 = *(_OWORD *)(v83 + 32);
    v402 = v94;
    v403 = *(_QWORD *)(v83 + 64);
    v95 = *(_OWORD *)(v83 + 16);
    v399 = *(_OWORD *)v83;
    v400 = v95;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v404, (uint64_t)v387);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v399, (uint64_t)&v382);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v387, (uint64_t)&v428, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v382, (uint64_t)v378, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v429)
    {
      if (!v431)
      {
        v86 = 1;
        goto LABEL_81;
      }
      outlined destroy of Any?((uint64_t)v378, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_80:
      v86 = 0;
      goto LABEL_81;
    }
    if (!v431)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v428);
      goto LABEL_80;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v428, (uint64_t)v440);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v378, (uint64_t)v439);
    v96 = v441;
    v363 = v442;
    v361 = __swift_project_boxed_opaque_existential_1(v440, v441);
    v376 = &v328;
    v97 = *(_QWORD *)(v96 - 8);
    MEMORY[0x1E0C80A78](v361);
    v99 = (char *)&v328 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v439, (uint64_t)v437);
    v100 = type metadata accessor for Optional();
    v374 = &v328;
    v101 = *(_QWORD *)(v100 - 8);
    MEMORY[0x1E0C80A78](v100);
    v103 = (char *)&v328 - v102;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v104 = swift_dynamicCast();
    v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    if (v104)
    {
      v105(v103, 0, 1, v96);
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v99, v103, v96);
      v86 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
    }
    else
    {
      v105(v103, 1, 1, v96);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
      v86 = 0;
    }
    v22 = v375;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v439);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v440);
    v82 = v371;
    v83 = (uint64_t)v368;
LABEL_81:
    outlined destroy of Any?((uint64_t)&v382, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v387, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v399);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
    outlined destroy of Any?((uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v414, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?((uint64_t)&v420, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v86 & 1) == 0)
      goto LABEL_114;
LABEL_82:
    v85 += 2;
    ++v84;
    v79 = v381;
    if (v87 == v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v106 = v331;
      v372 = v331;
      v23 = v367;
      v48 = (unint64_t)v343;
      v60 = v351;
      v61 = v347;
      if (v329 >= (uint64_t)v377)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v372 = v106;
LABEL_111:
        v107 = v355;
        goto LABEL_115;
      }
      goto LABEL_57;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
LABEL_113:
  outlined destroy of Any?((uint64_t)&v389, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v414, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v420, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v107 = v355;
  v48 = (unint64_t)v343;
LABEL_115:
  v108 = v107[1];
  v449 = *v107;
  v450 = v108;
  v451 = v107[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(v372, v48 >> 11))
    goto LABEL_423;
  v109 = BigString.UTF8View.index(_:offsetBy:)();
  v111 = v110;
  v113 = v112;
  v115 = v114;
  outlined release of Locale((uint64_t)&v410);
  if (v359 >= v109 >> 10)
    v116 = v360;
  else
    v116 = v109;
  if (v359 >= v109 >> 10)
    v117 = v358;
  else
    v117 = v111;
  if (v359 >= v109 >> 10)
    v118 = v357;
  else
    v118 = v113;
  if (v359 >= v109 >> 10)
    v119 = v349;
  else
    v119 = v115;
  v120 = v107[1];
  v446 = *v107;
  v447 = v120;
  v448 = v107[2];
  BigString.unicodeScalars.getter();
  v53 = v116;
  v121 = BigString.UnicodeScalarView.index(after:)();
  v123 = v122;
  v125 = v124;
  v127 = v126;
  result = outlined release of Locale((uint64_t)&v411);
  v128 = *v107;
  v129 = v107[1];
  v438[2] = v107[2];
  v438[1] = v129;
  v438[0] = v128;
  v130 = v121 >> 10;
  if (v121 >> 10 < v53 >> 10)
  {
LABEL_424:
    __break(1u);
LABEL_425:
    __break(1u);
LABEL_426:
    __break(1u);
LABEL_427:
    __break(1u);
LABEL_428:
    __break(1u);
LABEL_429:
    __break(1u);
    goto LABEL_430;
  }
  v440[0] = v53;
  v351 = v117;
  v440[1] = v117;
  v347 = v119;
  v348 = v118;
  v440[2] = v118;
  v441 = v119;
  v442 = v121;
  v443 = v123;
  v444 = v125;
  v445 = v127;
  v131 = *(_QWORD *)(v379 + 16);
  if (!v131)
  {
    v22 = v375;
    v23 = v367;
    goto LABEL_147;
  }
  v22 = v375;
  v23 = v367;
  if (v53 >> 10 == v130)
  {
LABEL_147:
    v346 = v53;
    result = outlined release of AttributedString.Runs((uint64_t)v455);
    goto LABEL_148;
  }
  v346 = v53;
  outlined retain of Locale((uint64_t)v438);
  swift_bridgeObjectRetain();
  v132 = 40;
  v133 = v131;
  while (*(_QWORD *)(v379 + v132))
  {
    swift_bridgeObjectRelease();
    v132 += 16;
    if (!--v133)
    {
      swift_bridgeObjectRelease();
      goto LABEL_140;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v130 <= (unint64_t)BigString.startIndex.getter() >> 10)
  {
LABEL_140:
    v23 = v367;
    v53 = v346;
    v139 = v351;
LABEL_141:
    v437[0] = v53;
    v351 = v139;
    v437[1] = v139;
    v437[2] = v348;
    v437[3] = v347;
    v437[4] = v121;
    v437[5] = v123;
    v437[6] = v125;
    v437[7] = v127;
    v140 = *(_QWORD *)(v379 + 16);
    if (v140)
    {
      v141 = 40;
      while (!*(_QWORD *)(v379 + v141))
      {
        v141 += 16;
        if (!--v140)
          goto LABEL_145;
      }
      v160 = v121 >> 10;
      v346 = v53;
      v161 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v162 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v163 = *v161;
        if (*v161)
        {
          v164 = *(v161 - 1);
          if ((v163 & 0x2000000000000000) != 0 ? HIBYTE(v163) & 0xF : v164 & 0xFFFFFFFFFFFFLL)
          {
            if ((v163 & 0x1000000000000000) != 0)
            {
              v166 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v163 & 0x2000000000000000) != 0)
              {
                v389 = *(v161 - 1);
                v390 = v163 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v164 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
              }
              v166 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v162 + 2) + 1, 1, v162);
            v168 = *((_QWORD *)v162 + 2);
            v167 = *((_QWORD *)v162 + 3);
            if (v168 >= v167 >> 1)
              v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v167 > 1), v168 + 1, 1, v162);
            *((_QWORD *)v162 + 2) = v168 + 1;
            *(_DWORD *)&v162[4 * v168 + 32] = v166;
          }
        }
        v161 += 2;
        --v131;
      }
      while (v131);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v419);
      v169 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v162);
      v171 = v170;
      v173 = v172;
      v175 = v174;
      swift_bridgeObjectRelease();
      outlined release of Locale((uint64_t)&v420);
      outlined release of Locale((uint64_t)v438);
      result = outlined release of AttributedString.Runs((uint64_t)v455);
      if (v175 != 2)
      {
        if (v160 < v169 >> 10)
        {
LABEL_441:
          __break(1u);
          goto LABEL_442;
        }
        v346 = v169;
        v347 = v175;
        v351 = v171;
        v348 = v173;
      }
LABEL_148:
      if (v352 >= v350)
      {
LABEL_406:
        __break(1u);
LABEL_407:
        __break(1u);
        goto LABEL_408;
      }
      v142 = *(_QWORD *)(v23 + 64);
      v143 = *(_QWORD *)(v23 + 72);
      v144 = *(_QWORD *)(v23 + 80);
      v368 = *(_BYTE **)(v23 + 88);
      v381 = v143;
      if (v142)
      {
        if (v144 < (uint64_t)v380)
        {
LABEL_421:
          __break(1u);
          goto LABEL_422;
        }
        if (*(_WORD *)(v142 + 16) && (uint64_t)v380 < v144)
        {
          v145 = *(unsigned __int8 *)(v142 + 18);
          if (*(_BYTE *)(v142 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs((uint64_t)v455);
            result = swift_unknownObjectRetain();
            v146 = v380;
            v147 = v142;
            while (1)
            {
              v150 = *(unsigned __int16 *)(v147 + 16);
              if (!*(_WORD *)(v147 + 16))
                goto LABEL_156;
              v151 = *(_QWORD *)(v147 + 40);
              v35 = __OFSUB__(v146, v151);
              v152 = (__int128 *)((char *)v146 - v151);
              if (v35)
                goto LABEL_395;
              if (__OFADD__(v152, 1))
                goto LABEL_396;
              if ((uint64_t)v152 + 1 < 1)
              {
                v150 = 0;
              }
              else
              {
                if ((_DWORD)v150 == 1)
                {
                  v146 = v152;
LABEL_156:
                  if (v146)
                    goto LABEL_392;
                  goto LABEL_157;
                }
                v153 = (uint64_t *)(v147 + 64);
                v154 = 1;
                while (1)
                {
                  v155 = *v153;
                  v153 += 3;
                  v146 = (__int128 *)((char *)v152 - v155);
                  if (__OFSUB__(v152, v155))
                    goto LABEL_388;
                  if (__OFADD__(v146, 1))
                    goto LABEL_389;
                  if ((uint64_t)v146 + 1 < 1)
                    break;
                  ++v154;
                  v152 = v146;
                  if (v150 == v154)
                    goto LABEL_156;
                }
                v150 = v154;
                v146 = v152;
              }
LABEL_157:
              v148 = (4 * *(_BYTE *)(v147 + 18) + 8) & 0x3C;
              v145 = ((-15 << v148) - 1) & v145 | (v150 << v148);
              v149 = *(_QWORD *)(v147 + 24 + 24 * v150);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v147 = v149;
              if (!*(_BYTE *)(v149 + 18))
                goto LABEL_174;
            }
          }
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs((uint64_t)v455);
          result = swift_unknownObjectRetain();
          v146 = v380;
          v149 = v142;
LABEL_174:
          v157 = *(unsigned __int16 *)(v149 + 16);
          if (*(_WORD *)(v149 + 16))
          {
            v158 = *(_QWORD *)(v149 + 24);
            v35 = __OFSUB__(v146, v158);
            v159 = (__int128 *)((char *)v146 - v158);
            v23 = v367;
            if (v35)
            {
LABEL_436:
              __break(1u);
LABEL_437:
              __break(1u);
LABEL_438:
              __break(1u);
              goto LABEL_439;
            }
            if (__OFADD__(v159, 1))
              goto LABEL_437;
            if ((uint64_t)v159 + 1 < 1)
            {
              v157 = 0;
            }
            else
            {
              if ((_DWORD)v157 == 1)
              {
                v146 = v159;
                goto LABEL_210;
              }
              v176 = (uint64_t *)(v149 + 48);
              v177 = 1;
              while (1)
              {
                v178 = *v176;
                v176 += 3;
                v146 = (__int128 *)((char *)v159 - v178);
                if (__OFSUB__(v159, v178))
                  goto LABEL_419;
                if (__OFADD__(v146, 1))
                  goto LABEL_420;
                if ((uint64_t)v146 + 1 < 1)
                  break;
                ++v177;
                v159 = v146;
                if (v157 == v177)
                  goto LABEL_210;
              }
              v157 = v177;
              v146 = v159;
            }
LABEL_211:
            swift_unknownObjectRelease();
            result = swift_unknownObjectRelease();
            v156 = v145 & 0xFFFFFFFFFFFFF0FFLL | (v157 << 8);
LABEL_212:
            v179 = v149;
            v180 = v355;
            if (v142)
            {
              swift_unknownObjectRetain();
              v181 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v368, v156, v149, v142, v381);
              result = swift_unknownObjectRelease_n();
            }
            else
            {
              v181 = 0;
            }
            v361 = (_QWORD *)((char *)v380 - (char *)v146);
            if (__OFSUB__(v380, v146))
              goto LABEL_407;
            v182 = v180[1];
            v436[3] = *v180;
            v436[4] = v182;
            v436[5] = v180[2];
            result = BigString.utf8.getter();
            if (__OFSUB__(0, v146))
            {
LABEL_408:
              __break(1u);
              goto LABEL_409;
            }
            v183 = BigString.UTF8View.index(_:offsetBy:)();
            v185 = v184;
            v330 = v187;
            v331 = v186;
            result = outlined release of Locale((uint64_t)&v425);
            if (v181 >= v356)
            {
LABEL_409:
              __break(1u);
              goto LABEL_410;
            }
            if (v368 != *(_BYTE **)(v23 + 88))
            {
LABEL_410:
              __break(1u);
LABEL_411:
              __break(1u);
LABEL_412:
              __break(1u);
              goto LABEL_413;
            }
            v381 = v181;
            v363 = v156;
            v328 = v185;
            v329 = v183;
            v188 = *(_BYTE **)(v23 + 64);
            if (v179)
            {
              v189 = v363;
              v190 = v179 + 24 * ((v363 >> ((4 * *(_BYTE *)(v179 + 18) + 8) & 0x3C)) & 0xF);
              v191 = v22;
              v192 = *(_QWORD *)(v190 + 40);
              v193 = (_BYTE *)v179;
              v194 = *(uint64_t **)(v190 + 32);
              swift_bridgeObjectRetain();
              v332 = v192;
              v22 = v191;
              result = swift_bridgeObjectRetain();
              v195 = (uint64_t)v368;
              v196 = (uint64_t)v368;
            }
            else
            {
              v193 = 0;
              swift_unknownObjectRetain();
              v189 = v363;
              specialized Rope._Node.subscript.getter(v363, (uint64_t)v188);
              v194 = v197;
              v332 = v198;
              result = swift_unknownObjectRelease();
              v188 = *(_BYTE **)(v23 + 64);
              v196 = *(_QWORD *)(v23 + 88);
              v195 = (uint64_t)v368;
            }
            v358 = v381 + 1;
            v376 = (uint64_t *)v397;
            v389 = v195;
            v390 = v189;
            v380 = (__int128 *)v430;
            v345 = (uint64_t *)(v370 + 40);
            v391 = v193;
            v374 = v194;
LABEL_223:
            if (v195 != v196)
              goto LABEL_397;
            v360 = (unint64_t)v193;
            if (v193)
            {
              v199 = v363;
              v200 = *(_QWORD *)&v193[24 * ((v363 >> ((4 * v193[18] + 8) & 0x3C)) & 0xF) + 24];
              swift_unknownObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              swift_unknownObjectRetain();
              v199 = v363;
              v200 = specialized Rope._Node.subscript.getter(v363, (uint64_t)v188);
            }
            v201 = v379;
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if (__OFADD__(v361, v200))
              goto LABEL_398;
            v344 = (_QWORD *)((char *)v361 + v200);
            if (v188)
            {
              v202 = ((-15 << ((4 * v188[18] + 8) & 0x3C)) - 1) & (unint64_t)v188[18] | ((unint64_t)*((unsigned __int16 *)v188 + 8) << ((4 * v188[18] + 8) & 0x3C));
              result = swift_unknownObjectRetain();
            }
            else
            {
              v202 = 0;
            }
            v203 = v374;
            v204 = (uint64_t)v376;
            if (v199 >= v202)
              goto LABEL_399;
            v359 = v196;
            if (v360)
            {
              v205 = (4 * *(_BYTE *)(v360 + 18) + 8) & 0x3C;
              v206 = ((v199 >> v205) & 0xF) + 1;
              if (v206 < *(unsigned __int16 *)(v360 + 16))
              {
                v357 = (v206 << v205) | ((-15 << v205) - 1) & v199;
                result = swift_unknownObjectRelease_n();
LABEL_238:
                v188 = v391;
                goto LABEL_246;
              }
            }
            v207 = v188[18];
            v208 = (4 * v207 + 8) & 0x3C;
            v209 = (v199 >> v208) & 0xF;
            *(_QWORD *)&v428 = v209;
            if (v207)
            {
              swift_unknownObjectRetain();
              v204 = (uint64_t)v376;
              v210 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v188 + 24), (uint64_t *)&v428, (uint64_t)&v389, (uint64_t)v188, v207);
              result = swift_unknownObjectRelease();
              v196 = v359;
              if ((v210 & 1) != 0)
              {
                result = swift_unknownObjectRelease_n();
                v357 = v390;
                goto LABEL_238;
              }
            }
            else
            {
              v211 = v209 + 1;
              if (v209 + 1 < (unint64_t)*((unsigned __int16 *)v188 + 8))
              {
                result = swift_unknownObjectRelease_n();
                v357 = (v211 << v208) | ((-15 << v208) - 1) & v199;
                v196 = v359;
                goto LABEL_246;
              }
              v196 = v359;
            }
            if (v188)
            {
              v212 = v188[18];
              v213 = *((unsigned __int16 *)v188 + 8);
              result = swift_unknownObjectRelease_n();
              v214 = (4 * v212 + 8) & 0x3C;
              v215 = ((-15 << v214) - 1) & v212;
              v216 = v213 << v214;
              v196 = v359;
              v357 = v215 | v216;
            }
            else
            {
              v357 = 0;
            }
            v188 = 0;
            v389 = v196;
LABEL_246:
            if (v358 != v356)
            {
              if (v389 != *(_QWORD *)(v23 + 88))
              {
LABEL_400:
                __break(1u);
LABEL_401:
                __break(1u);
                goto LABEL_402;
              }
              v368 = (_BYTE *)v389;
              v343 = v188;
              if (v188)
              {
                v217 = &v188[24 * ((v357 >> ((4 * v188[18] + 8) & 0x3C)) & 0xF)];
                v218 = *((_QWORD *)v217 + 4);
                v219 = *((_QWORD *)v217 + 5);
                swift_bridgeObjectRetain();
                v349 = v219;
                swift_bridgeObjectRetain();
              }
              else
              {
                v220 = *(_QWORD *)(v23 + 64);
                swift_unknownObjectRetain();
                v204 = (uint64_t)v376;
                specialized Rope._Node.subscript.getter(v357, v220);
                v349 = v221;
                v218 = v222;
                swift_unknownObjectRelease();
              }
              result = swift_bridgeObjectRetain();
              v223 = 0;
              v224 = v345;
              v381 = v218;
              while (1)
              {
                v226 = v223 + 1;
                if (__OFADD__(v223, 1))
                {
                  __break(1u);
LABEL_386:
                  __break(1u);
                  goto LABEL_387;
                }
                v228 = *(v224 - 1);
                v227 = *v224;
                if (v203[2])
                {
                  swift_bridgeObjectRetain_n();
                  v229 = specialized __RawDictionaryStorage.find<A>(_:)(v228, v227);
                  if ((v230 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(v203[7] + 72 * v229, (uint64_t)&v404);
                  }
                  else
                  {
                    v408 = 0;
                    v406 = 0u;
                    v407 = 0u;
                    v404 = 0u;
                    v405 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  v218 = v381;
                  if (!*(_QWORD *)(v381 + 16))
                  {
LABEL_261:
                    v403 = 0;
                    v401 = 0u;
                    v402 = 0u;
                    v399 = 0u;
                    v400 = 0u;
                    goto LABEL_268;
                  }
                }
                else
                {
                  v408 = 0;
                  v406 = 0u;
                  v407 = 0u;
                  v404 = 0u;
                  v405 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(_QWORD *)(v218 + 16))
                    goto LABEL_261;
                }
                swift_bridgeObjectRetain();
                v231 = specialized __RawDictionaryStorage.find<A>(_:)(v228, v227);
                if ((v232 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v218 + 56) + 72 * v231, (uint64_t)&v399);
                }
                else
                {
                  v403 = 0;
                  v401 = 0u;
                  v402 = 0u;
                  v399 = 0u;
                  v400 = 0u;
                }
                swift_bridgeObjectRelease();
LABEL_268:
                swift_bridgeObjectRelease();
                v188 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v404, (uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v399, v204, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v392)
                {
                  if (v398)
                    goto LABEL_285;
                  outlined destroy of Any?((uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  result = outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_255;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v389, (uint64_t)v387, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v398)
                  goto LABEL_284;
                v233 = *(_OWORD *)(v204 + 48);
                v384 = *(_OWORD *)(v204 + 32);
                v385 = v233;
                v386 = *(_QWORD *)(v204 + 64);
                v234 = *(_OWORD *)(v204 + 16);
                v382 = *(_OWORD *)v204;
                v383 = v234;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v387, (uint64_t)v436);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v382, (uint64_t)v435);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v436, (uint64_t)&v428, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v435, (uint64_t)v380, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v429)
                {
                  if (!v431)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v428);
LABEL_253:
                    v225 = 0;
                    goto LABEL_254;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v428, (uint64_t)v432);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v380, (uint64_t)v427);
                  v235 = v433;
                  v372 = v434;
                  v371 = __swift_project_boxed_opaque_existential_1(v432, v433);
                  v378 = (__int128 *)&v328;
                  v236 = *(_QWORD *)(v235 - 8);
                  MEMORY[0x1E0C80A78](v371);
                  v238 = (char *)&v328 - ((v237 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v427, (uint64_t)v426);
                  v239 = type metadata accessor for Optional();
                  v377 = &v328;
                  v240 = *(_QWORD *)(v239 - 8);
                  MEMORY[0x1E0C80A78](v239);
                  v242 = (char *)&v328 - v241;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  v243 = swift_dynamicCast();
                  v244 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v236 + 56);
                  if (v243)
                  {
                    v244(v242, 0, 1, v235);
                    (*(void (**)(char *, char *, uint64_t))(v236 + 32))(v238, v242, v235);
                    v225 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v236 + 8))(v238, v235);
                  }
                  else
                  {
                    v244(v242, 1, 1, v235);
                    (*(void (**)(char *, uint64_t))(v240 + 8))(v242, v239);
                    v225 = 0;
                  }
                  v22 = v375;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v427);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v432);
                  v203 = v374;
                  v204 = (uint64_t)v376;
                }
                else
                {
                  if (v431)
                  {
                    outlined destroy of Any?((uint64_t)v380, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_253;
                  }
                  v225 = 1;
                }
LABEL_254:
                outlined destroy of Any?((uint64_t)v435, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v436, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v382);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v387);
                outlined destroy of Any?((uint64_t)&v389, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v399, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                result = outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v225 & 1) == 0)
                  goto LABEL_286;
LABEL_255:
                v224 += 2;
                ++v223;
                v218 = v381;
                if (v226 == v22)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  v23 = v367;
                  v195 = (uint64_t)v368;
                  v188 = *(_BYTE **)(v367 + 64);
                  v196 = *(_QWORD *)(v367 + 88);
                  v361 = v344;
                  v389 = (unint64_t)v368;
                  v390 = v357;
                  v193 = v343;
                  v363 = v357;
                  v391 = v343;
                  v35 = __OFADD__(v358++, 1);
                  if (!v35)
                    goto LABEL_223;
                  __break(1u);
LABEL_284:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v387);
LABEL_285:
                  outlined destroy of Any?((uint64_t)&v389, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v399, (uint64_t *)v188);
                  outlined destroy of Any?((uint64_t)&v404, (uint64_t *)v188);
LABEL_286:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  v23 = v367;
                  v201 = v379;
                  v199 = v363;
                  v196 = v359;
                  goto LABEL_287;
                }
              }
            }
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
LABEL_287:
            if (v196 != *(_QWORD *)(v23 + 88))
              goto LABEL_411;
            if (v360)
            {
              v245 = *(_QWORD *)(v360 + 24 * ((v199 >> ((4 * *(_BYTE *)(v360 + 18) + 8) & 0x3C)) & 0xF) + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v246 = *(_QWORD *)(v23 + 64);
              swift_unknownObjectRetain();
              v245 = specialized Rope._Node.subscript.getter(v199, v246);
              swift_unknownObjectRelease();
            }
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v247 = (char *)v361 + v245;
            if (__OFADD__(v361, v245))
              goto LABEL_412;
            v248 = v355;
            v249 = v355[1];
            v436[0] = *v355;
            v436[1] = v249;
            v436[2] = v355[2];
            BigString.utf8.getter();
            result = v329;
            if (__OFSUB__(v247, (unint64_t)v329 >> 11))
            {
LABEL_413:
              __break(1u);
LABEL_414:
              __break(1u);
              goto LABEL_415;
            }
            v250 = BigString.UTF8View.index(_:offsetBy:)();
            v252 = v251;
            v254 = v253;
            v256 = v255;
            result = outlined release of Locale((uint64_t)v426);
            if (v350 >= v250 >> 10)
              v257 = v250;
            else
              v257 = v342;
            if (v350 >= v250 >> 10)
              v258 = v252;
            else
              v258 = v341;
            if (v350 >= v250 >> 10)
              v259 = v254;
            else
              v259 = v340;
            if (v350 >= v250 >> 10)
              v260 = v256;
            else
              v260 = v339;
            v261 = *v248;
            v262 = v248[1];
            v435[2] = v248[2];
            v435[1] = v262;
            v435[0] = v261;
            v263 = v352;
            if (v257 >> 10 < v352)
              goto LABEL_414;
            *(_QWORD *)&v399 = v373;
            *((_QWORD *)&v399 + 1) = v366;
            *(_QWORD *)&v400 = v365;
            *((_QWORD *)&v400 + 1) = v364;
            *(_QWORD *)&v401 = v257;
            *((_QWORD *)&v401 + 1) = v258;
            *(_QWORD *)&v402 = v259;
            *((_QWORD *)&v402 + 1) = v260;
            v264 = *(_QWORD *)(v201 + 16);
            if (!v264 || v352 == v257 >> 10)
            {
              v381 = v258;
            }
            else
            {
              v265 = v258;
              swift_bridgeObjectRetain();
              outlined retain of Locale((uint64_t)v435);
              v266 = 40;
              v267 = v264;
              while (*(_QWORD *)(v201 + v266))
              {
                swift_bridgeObjectRelease();
                v266 += 16;
                if (!--v267)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_316;
                }
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              BigString.utf8.getter();
              BigString.UTF8View.subscript.getter();
              outlined release of Locale((uint64_t)v427);
              v387[0] = v373;
              v387[1] = v366;
              v387[2] = v365;
              v387[3] = v364;
              v387[4] = v373;
              v387[5] = v366;
              v387[6] = v365;
              v387[7] = v364;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2, v387, &v389);
              result = outlined release of Locale((uint64_t)&v428);
              if (v396 != 2)
              {
                v257 = v393;
                if (v263 > v393 >> 10)
                  goto LABEL_438;
                v265 = v394;
                v259 = v395;
                v260 = v396;
              }
LABEL_316:
              *(_QWORD *)&v382 = v373;
              *((_QWORD *)&v382 + 1) = v366;
              *(_QWORD *)&v383 = v365;
              *((_QWORD *)&v383 + 1) = v364;
              *(_QWORD *)&v384 = v257;
              *((_QWORD *)&v384 + 1) = v265;
              *(_QWORD *)&v385 = v259;
              *((_QWORD *)&v385 + 1) = v260;
              v268 = *(_QWORD *)(v201 + 16);
              v381 = v265;
              if (v268)
              {
                v269 = 40;
                while (!*(_QWORD *)(v201 + v269))
                {
                  v269 += 16;
                  if (!--v268)
                    goto LABEL_320;
                }
                *(_QWORD *)&v404 = MEMORY[0x1E0DEE9D8];
                swift_bridgeObjectRetain();
                v312 = (unint64_t *)(v201 + 40);
                do
                {
                  v317 = *v312;
                  if (*v312)
                  {
                    v318 = *(v312 - 1);
                    if ((v317 & 0x2000000000000000) != 0 ? HIBYTE(v317) & 0xF : v318 & 0xFFFFFFFFFFFFLL)
                    {
                      if ((v317 & 0x1000000000000000) != 0)
                      {
                        v313 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                      }
                      else
                      {
                        if ((v317 & 0x2000000000000000) != 0)
                        {
                          v389 = *(v312 - 1);
                          v390 = v317 & 0xFFFFFFFFFFFFFFLL;
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          if ((v318 & 0x1000000000000000) == 0)
                            _StringObject.sharedUTF8.getter();
                          swift_bridgeObjectRetain();
                        }
                        v313 = _decodeScalar(_:startingAt:)();
                        swift_bridgeObjectRelease();
                      }
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      v314 = *(_QWORD *)(v404 + 16);
                      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v314);
                      v315 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v314, v313);
                      destructiveProjectEnumData for PredicateCodableError(v315, v316);
                    }
                  }
                  v312 += 2;
                  --v264;
                }
                while (v264);
                swift_bridgeObjectRelease();
                v320 = v404;
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)v432);
                v321 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v320);
                v323 = v322;
                v325 = v324;
                v327 = v326;
                swift_bridgeObjectRelease();
                outlined release of Locale((uint64_t)&v389);
                outlined release of Locale((uint64_t)v435);
                result = outlined release of AttributedString.Runs((uint64_t)v455);
                v270 = v354;
                if (v327 != 2)
                {
                  if (v352 > v321 >> 10)
                  {
LABEL_439:
                    __break(1u);
                    goto LABEL_440;
                  }
                  v257 = v321;
                  v381 = v323;
                  v259 = v325;
                  v260 = v327;
                }
LABEL_322:
                if (v362 == *(_QWORD *)(v367 + 88))
                {
                  if (v270)
                  {
                    v271 = *(_QWORD *)(v270 + 24 * ((v353 >> ((4 * *(_BYTE *)(v270 + 18) + 8) & 0x3C)) & 0xF) + 32);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    v272 = *(_QWORD *)(v367 + 64);
                    swift_unknownObjectRetain();
                    specialized Rope._Node.subscript.getter(v353, v272);
                    v271 = v273;
                    swift_unknownObjectRelease();
                  }
                  v274 = (*(uint64_t (**)(_QWORD, _QWORD))(v369[7] + 24))(v369[2], v369[7]);
                  if (*(_QWORD *)(v271 + 16)
                    && (v276 = specialized __RawDictionaryStorage.find<A>(_:)(v274, v275), (v277 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v271 + 56) + 72 * v276, (uint64_t)&v404);
                  }
                  else
                  {
                    v408 = 0;
                    v406 = 0u;
                    v407 = 0u;
                    v404 = 0u;
                    v405 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v404, (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                    v279 = v334;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                              + 56))(v279, 0, 1, AssociatedTypeWitness);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v280 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v280 - 8) + 56))(v334, 1, 1, v280);
                  }
                  v281 = (*(uint64_t (**)(_QWORD, _QWORD))(v369[8] + 24))(v369[3], v369[8]);
                  if (*(_QWORD *)(v271 + 16)
                    && (v283 = specialized __RawDictionaryStorage.find<A>(_:)(v281, v282), (v284 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v271 + 56) + 72 * v283, (uint64_t)&v404);
                  }
                  else
                  {
                    v408 = 0;
                    v406 = 0u;
                    v407 = 0u;
                    v404 = 0u;
                    v405 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v404, (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v285 = swift_getAssociatedTypeWitness();
                    v286 = v335;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v285 - 8) + 56))(v286, 0, 1, v285);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v287 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v287 - 8) + 56))(v335, 1, 1, v287);
                  }
                  v288 = (*(uint64_t (**)(_QWORD, _QWORD))(v369[9] + 24))(v369[4], v369[9]);
                  if (*(_QWORD *)(v271 + 16)
                    && (v290 = specialized __RawDictionaryStorage.find<A>(_:)(v288, v289), (v291 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v271 + 56) + 72 * v290, (uint64_t)&v404);
                  }
                  else
                  {
                    v408 = 0;
                    v406 = 0u;
                    v407 = 0u;
                    v404 = 0u;
                    v405 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v404, (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v292 = swift_getAssociatedTypeWitness();
                    v293 = v336;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v292 - 8) + 56))(v293, 0, 1, v292);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v294 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v294 - 8) + 56))(v336, 1, 1, v294);
                  }
                  v295 = (*(uint64_t (**)(_QWORD, _QWORD))(v369[10] + 24))(v369[5], v369[10]);
                  if (*(_QWORD *)(v271 + 16)
                    && (v297 = specialized __RawDictionaryStorage.find<A>(_:)(v295, v296), (v298 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v271 + 56) + 72 * v297, (uint64_t)&v404);
                  }
                  else
                  {
                    v408 = 0;
                    v406 = 0u;
                    v407 = 0u;
                    v404 = 0u;
                    v405 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v404, (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v299 = swift_getAssociatedTypeWitness();
                    v300 = v337;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v299 - 8) + 56))(v300, 0, 1, v299);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v301 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v301 - 8) + 56))(v337, 1, 1, v301);
                  }
                  v302 = (*(uint64_t (**)(_QWORD, _QWORD))(v369[11] + 24))(v369[6], v369[11]);
                  if (*(_QWORD *)(v271 + 16)
                    && (v304 = specialized __RawDictionaryStorage.find<A>(_:)(v302, v303), (v305 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v271 + 56) + 72 * v304, (uint64_t)&v404);
                  }
                  else
                  {
                    v408 = 0;
                    v406 = 0u;
                    v407 = 0u;
                    v404 = 0u;
                    v405 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v404, (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v306 = swift_getAssociatedTypeWitness();
                    v307 = v338;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v306 - 8) + 56))(v307, 0, 1, v306);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v404, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v308 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v308 - 8) + 56))(v338, 1, 1, v308);
                  }
                  swift_bridgeObjectRelease();
                  result = swift_bridgeObjectRelease();
                  v309 = v347;
                  v310 = v348;
                  if (v257 >> 10 >= v346 >> 10)
                  {
                    v311 = v333;
                    *v333 = v346;
                    v311[1] = v351;
                    v311[2] = v310;
                    v311[3] = v309;
                    v311[4] = v257;
                    v311[5] = v381;
                    v311[6] = v259;
                    v311[7] = v260;
                    return result;
                  }
LABEL_416:
                  __break(1u);
LABEL_417:
                  __break(1u);
LABEL_418:
                  __break(1u);
LABEL_419:
                  __break(1u);
LABEL_420:
                  __break(1u);
                  goto LABEL_421;
                }
LABEL_415:
                __break(1u);
                goto LABEL_416;
              }
LABEL_320:
              outlined release of Locale((uint64_t)v435);
            }
            result = outlined release of AttributedString.Runs((uint64_t)v455);
            v270 = v354;
            goto LABEL_322;
          }
          v23 = v367;
LABEL_210:
          if (v146)
          {
LABEL_433:
            __break(1u);
            goto LABEL_434;
          }
          goto LABEL_211;
        }
      }
      else if (v373 >= 0x800)
      {
LABEL_430:
        __break(1u);
LABEL_431:
        __break(1u);
        goto LABEL_432;
      }
      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v455);
      swift_unknownObjectRetain();
      v156 = specialized Rope._endPath.getter(v142);
      result = swift_unknownObjectRelease();
      v149 = 0;
      v146 = 0;
      goto LABEL_212;
    }
LABEL_145:
    outlined release of Locale((uint64_t)v438);
    goto LABEL_147;
  }
  BigString.utf8.getter();
  v134 = BigString.UTF8View.index(before:)();
  v381 = v135;
  v378 = v136;
  v138 = v137;
  outlined release of Locale((uint64_t)&v412);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  result = outlined release of Locale((uint64_t)&v413);
  if (v130 < v134 >> 10)
  {
LABEL_440:
    __break(1u);
    goto LABEL_441;
  }
  v439[0] = v134;
  v439[1] = v381;
  v439[2] = v378;
  v439[3] = v138;
  v439[4] = v121;
  v439[5] = v123;
  v439[6] = v125;
  v439[7] = v127;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1, v439, &v389);
  result = outlined release of Locale((uint64_t)&v414);
  v23 = v367;
  v53 = v346;
  v139 = v351;
  v22 = v375;
  if (v392 == 2)
    goto LABEL_141;
  v53 = v389;
  if (v130 >= v389 >> 10)
  {
    v139 = v390;
    v347 = v392;
    v348 = (unint64_t)v391;
    goto LABEL_141;
  }
LABEL_442:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice5.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(_QWORD *a1, unint64_t *a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  _QWORD *v6;
  int *TupleTypeMetadata;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;

  v6 = malloc(0x70uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[4] = type metadata accessor for Optional();
  v6[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[10] = TupleTypeMetadata;
  v8 = *((_QWORD *)TupleTypeMetadata - 1);
  v6[11] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v6[12] = v9;
  v10 = AttributedString.Runs.AttributesSlice5.subscript.read(v6 + 6, a2, a3);
  v12 = v11;
  v14 = v13;
  v6[13] = v10;
  v17 = *v15;
  v16 = v15[1];
  v18 = (_OWORD *)v15[3];
  v33 = v15[2];
  v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v9, v12, v19);
  v20 = &v9[TupleTypeMetadata[12]];
  v21 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v14, v21);
  v22 = &v9[TupleTypeMetadata[16]];
  v23 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, v17, v23);
  v24 = &v9[TupleTypeMetadata[20]];
  v25 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v16, v25);
  v26 = &v9[TupleTypeMetadata[24]];
  v27 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, v33, v27);
  v28 = &v9[TupleTypeMetadata[28]];
  v29 = v18[1];
  v30 = v18[2];
  v31 = v18[3];
  *(_OWORD *)v28 = *v18;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v30;
  *((_OWORD *)v28 + 3) = v31;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *a1;
  v4 = *a1 + 48;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 88) + 8))(*(_QWORD *)(*a1 + 96), *(_QWORD *)(*a1 + 80));
  v5 = *(void **)(v3 + 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 104))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice5.subscript.read(_QWORD *a1, unint64_t *a2, _QWORD *a3))(uint64_t a1)
{
  _QWORD *v6;
  int *TupleTypeMetadata;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;

  v6 = malloc(0x68uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[4] = type metadata accessor for Optional();
  v6[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[10] = TupleTypeMetadata;
  v8 = *((_QWORD *)TupleTypeMetadata - 1);
  v6[11] = v8;
  v9 = (char *)malloc(*(_QWORD *)(v8 + 64));
  v6[12] = v9;
  v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  v12 = (uint64_t)&v9[TupleTypeMetadata[20]];
  v13 = (uint64_t)&v9[TupleTypeMetadata[24]];
  v14 = (unint64_t *)&v9[TupleTypeMetadata[28]];
  AttributedString.Runs.AttributesSlice5.subscript.getter((uint64_t)v9, v10, v11, v12, v13, v14, a2, a3);
  v6[6] = v11;
  v6[7] = v12;
  v6 += 6;
  v6[2] = v13;
  v6[3] = v14;
  return AttributedString.Runs.AttributesSlice5.subscript.read;
}

void AttributedString.Runs.AttributesSlice5.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 96);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>, a3);
  JUMPOUT(0x186DA4550);
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, a3, (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice5.index(after:));
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>(_OWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr))
{
  double result;
  __int128 v6;
  _OWORD v7[2];

  a4(v7);
  result = *(double *)v7;
  v6 = v7[1];
  *a1 = v7[0];
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(a1, a2, (void (*)(void))AttributedString.Runs.AttributesSlice5.makeIterator());
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[13];
  uint64_t v12;

  a3();
  v4 = *(_OWORD *)(v3 + 176);
  v11[10] = *(_OWORD *)(v3 + 160);
  v11[11] = v4;
  v11[12] = *(_OWORD *)(v3 + 192);
  v12 = *(_QWORD *)(v3 + 208);
  v5 = *(_OWORD *)(v3 + 112);
  v11[6] = *(_OWORD *)(v3 + 96);
  v11[7] = v5;
  v6 = *(_OWORD *)(v3 + 144);
  v11[8] = *(_OWORD *)(v3 + 128);
  v11[9] = v6;
  v7 = *(_OWORD *)(v3 + 48);
  v11[2] = *(_OWORD *)(v3 + 32);
  v11[3] = v7;
  v8 = *(_OWORD *)(v3 + 80);
  v11[4] = *(_OWORD *)(v3 + 64);
  v11[5] = v8;
  v9 = *(_OWORD *)(v3 + 16);
  v11[0] = *(_OWORD *)v3;
  v11[1] = v9;
  return outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v11);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>, a1);
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  _OWORD v26[12];
  uint64_t v27;

  v13 = *a1;
  v14 = *a2;
  v15 = *a3;
  v16 = *a4;
  v17 = *(_OWORD *)(v10 + 176);
  v26[10] = *(_OWORD *)(v10 + 160);
  v26[11] = v17;
  v27 = *(_QWORD *)(v10 + 192);
  v18 = *(_OWORD *)(v10 + 112);
  v26[6] = *(_OWORD *)(v10 + 96);
  v26[7] = v18;
  v19 = *(_OWORD *)(v10 + 144);
  v26[8] = *(_OWORD *)(v10 + 128);
  v26[9] = v19;
  v20 = *(_OWORD *)(v10 + 48);
  v26[2] = *(_OWORD *)(v10 + 32);
  v26[3] = v20;
  v21 = *(_OWORD *)(v10 + 80);
  v26[4] = *(_OWORD *)(v10 + 64);
  v26[5] = v21;
  v22 = *(_OWORD *)(v10 + 16);
  v26[0] = *(_OWORD *)v10;
  v26[1] = v22;
  outlined retain of AttributedString.Runs((uint64_t)v26);
  *(_QWORD *)&result = AttributedString.Runs.AttributesSlice5.init(runs:)(v10, *(_QWORD *)(v13 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v14 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v15 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(v16 + *MEMORY[0x1E0DEE2A8] + 8), a5, a6, a8, a7, a9, a10).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.NSAttributesSlice.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 136);
  v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void AttributedString.Runs.NSAttributesSlice.Iterator.next()(_OWORD *a1@<X8>)
{
  __int128 *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  __int128 v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  char v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int v131;
  void (*v132)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  __int128 *v147;
  unint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD v159[3];
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  __int128 *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _QWORD *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int64_t v188;
  unint64_t v189;
  __int128 v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  __int128 *v194;
  __int128 v195;
  unint64_t v196;
  uint64_t v197;
  _BYTE v198[40];
  _QWORD v199[3];
  uint64_t v200;
  int64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  _BYTE v206[40];
  _BYTE v207[40];
  _OWORD v208[4];
  uint64_t v209;
  _BYTE v210[80];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  _QWORD *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  __int128 *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  _OWORD v250[2];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;

  v2 = *((_QWORD *)v1 + 26);
  v3 = v2 >> 10;
  v185 = *((_QWORD *)v1 + 21);
  if (v2 >> 10 == v185 >> 10)
  {
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    return;
  }
  v4 = *(_QWORD **)v1;
  v5 = *(__int128 *)((char *)v1 + 24);
  v239 = *(__int128 *)((char *)v1 + 8);
  v240 = v5;
  v6 = *(__int128 *)((char *)v1 + 56);
  v241 = *(__int128 *)((char *)v1 + 40);
  v242 = v6;
  if (v3 >= v185 >> 10)
    goto LABEL_209;
  v196 = *((_QWORD *)v1 + 17);
  if (v3 < v196 >> 10)
    goto LABEL_209;
  v7 = v4[8];
  v8 = v4[10];
  v9 = v2 >> 11;
  if (v7)
    v10 = v4[10];
  else
    v10 = 0;
  if (v10 < v9)
    goto LABEL_210;
  v190 = *(__int128 *)((char *)v1 + 72);
  v11 = *(__int128 *)((char *)v1 + 88);
  v12 = *(__int128 *)((char *)v1 + 104);
  v13 = *(__int128 *)((char *)v1 + 120);
  v14 = *((_QWORD *)v1 + 18);
  v188 = v2 >> 11;
  v189 = v14;
  *(_QWORD *)&v195 = *((_QWORD *)v1 + 19);
  v194 = (__int128 *)*((_QWORD *)v1 + 20);
  v179 = *((_QWORD *)v1 + 22);
  v178 = *((_QWORD *)v1 + 23);
  v15 = *((_QWORD *)v1 + 24);
  v176 = v1;
  v177 = v15;
  v16 = *((_QWORD *)v1 + 27);
  v192 = *((_QWORD *)v1 + 28);
  v191 = (_QWORD *)*((_QWORD *)v1 + 29);
  v17 = v4[9];
  v18 = v4[11];
  v184 = v4;
  v164 = 0;
  v165 = a1;
  v166 = v185 >> 10;
  v167 = v2 >> 10;
  v186 = v16;
  v187 = v196 >> 10;
  v182 = v12;
  v183 = v11;
  v181 = v13;
  v193 = v18;
  if (!v7 || v9 >= v8 || !*(_WORD *)(v7 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v30 = specialized Rope._endPath.getter(v7);
    swift_unknownObjectRelease();
    v31 = v17;
    v22 = 0;
    v9 = 0;
    v32 = 0;
    if (!v7)
      goto LABEL_32;
    goto LABEL_31;
  }
  v180 = v17;
  v19 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v20 = v7;
    while (1)
    {
      v23 = *(unsigned __int16 *)(v20 + 16);
      if (!*(_WORD *)(v20 + 16))
        break;
      v24 = *(_QWORD *)(v20 + 40);
      v25 = __OFSUB__(v9, v24);
      v26 = v9 - v24;
      if (v25)
        goto LABEL_201;
      if (__OFADD__(v26, 1))
        goto LABEL_202;
      if (v26 + 1 < 1)
      {
        v23 = 0;
        goto LABEL_16;
      }
      if ((_DWORD)v23 == 1)
      {
        v9 = v26;
        break;
      }
      v27 = (uint64_t *)(v20 + 64);
      v28 = 1;
      while (1)
      {
        v29 = *v27;
        v27 += 3;
        v9 = v26 - v29;
        if (__OFSUB__(v26, v29))
          goto LABEL_195;
        if (__OFADD__(v9, 1))
        {
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
          goto LABEL_199;
        }
        if (v9 + 1 < 1)
          break;
        ++v28;
        v26 = v9;
        if (v23 == v28)
          goto LABEL_15;
      }
      v23 = v28;
      v9 = v26;
LABEL_16:
      v21 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
      v19 = ((-15 << v21) - 1) & v19 | (v23 << v21);
      v22 = *(_QWORD *)(v20 + 24 + 24 * v23);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v20 = v22;
      if (!*(_BYTE *)(v22 + 18))
        goto LABEL_73;
    }
LABEL_15:
    if (!v9)
      goto LABEL_16;
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
    goto LABEL_211;
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  v22 = v7;
LABEL_73:
  v67 = *(unsigned __int16 *)(v22 + 16);
  if (!*(_WORD *)(v22 + 16))
    goto LABEL_95;
  v68 = *(_QWORD *)(v22 + 24);
  v25 = __OFSUB__(v9, v68);
  v69 = v9 - v68;
  if (v25)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  if (__OFADD__(v69, 1))
  {
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }
  if (v69 + 1 < 1)
  {
    v67 = 0;
  }
  else
  {
    if ((_DWORD)v67 == 1)
    {
      v9 = v69;
LABEL_95:
      if (v9)
      {
LABEL_236:
        __break(1u);
        goto LABEL_237;
      }
      goto LABEL_96;
    }
    v73 = (uint64_t *)(v22 + 48);
    v74 = 1;
    while (1)
    {
      v75 = *v73;
      v73 += 3;
      v9 = v69 - v75;
      if (__OFSUB__(v69, v75))
        goto LABEL_226;
      if (__OFADD__(v9, 1))
        goto LABEL_227;
      if (v9 + 1 < 1)
        break;
      ++v74;
      v69 = v9;
      if (v67 == v74)
        goto LABEL_95;
    }
    v67 = v74;
    v9 = v69;
  }
LABEL_96:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v30 = v19 & 0xFFFFFFFFFFFFF0FFLL | (v67 << 8);
  v31 = v180;
LABEL_31:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v193, v30, v22, v7, v31);
  swift_unknownObjectRelease_n();
  v32 = v9;
LABEL_32:
  v33 = v184;
  v34 = *((_OWORD *)v184 + 2);
  v264 = *((_OWORD *)v184 + 1);
  v265 = v34;
  v266 = *((_OWORD *)v184 + 3);
  BigString.utf8.getter();
  if (__OFSUB__(0, v32))
  {
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }
  v35 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v243);
  if (v193 != v184[11])
  {
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
  if (v22)
  {
    v36 = (_QWORD *)(v22 + 24 * ((v30 >> ((4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C)) & 0xF));
    v37 = v36[3];
    v38 = v36[4];
    v39 = v36[5];
    swift_retain();
    v162 = v38;
    swift_bridgeObjectRetain();
    v163 = v39;
    swift_bridgeObjectRetain();
  }
  else
  {
    v40 = v184[8];
    swift_retain();
    swift_unknownObjectRetain();
    v33 = v184;
    v37 = specialized Rope._Node.subscript.getter(v30, v40);
    v162 = v41;
    v163 = v42;
    swift_unknownObjectRelease();
  }
  if (v187 >= v35 >> 10)
    v43 = v196;
  else
    v43 = v35;
  if (__OFADD__(v37, v35 >> 11))
    goto LABEL_213;
  if ((uint64_t)(v185 >> 11) >= (uint64_t)(v37 + (v35 >> 11)))
    v44 = v37 + (v35 >> 11);
  else
    v44 = v185 >> 11;
  v45 = *((_OWORD *)v33 + 2);
  v261 = *((_OWORD *)v33 + 1);
  v262 = v45;
  v175 = (__int128 *)(v33 + 2);
  v263 = *((_OWORD *)v33 + 3);
  BigString.utf8.getter();
  if (__OFSUB__(v44, v43 >> 11))
    goto LABEL_214;
  v46 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)&v244);
  swift_release();
  if (v46 >> 10 < v43 >> 10)
  {
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }
  v187 = v2;
  v222 = v239;
  v223 = v240;
  v224 = v241;
  v47 = *((_QWORD *)v176 + 25);
  v225 = v242;
  v226 = v190;
  v227 = v183;
  v228 = v182;
  v229 = v181;
  v221 = v33;
  v230 = v196;
  v231 = v189;
  v232 = v195;
  v233 = v194;
  v234 = v185;
  v235 = v179;
  v236 = v178;
  v237 = v177;
  v238 = v47;
  *(_QWORD *)&v183 = v47;
  v193 = *(_QWORD *)(v47 + 16);
  if (!v193)
  {
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }
  v48 = v33[8];
  v49 = v33[9];
  v51 = v33[10];
  v50 = v33[11];
  if (!v48)
  {
    v52 = v188;
    if (v187 >= 0x800)
    {
LABEL_231:
      __break(1u);
      goto LABEL_232;
    }
    goto LABEL_70;
  }
  v52 = v188;
  if (v51 < v188)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }
  if (!*(_WORD *)(v48 + 16) || v188 >= v51)
  {
LABEL_70:
    swift_unknownObjectRetain_n();
    swift_retain();
    outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v221);
    v189 = specialized Rope._endPath.getter(v48);
    swift_unknownObjectRelease();
    v64 = 0;
    v54 = 0;
    if (!v48)
    {
      v65 = v50;
      v66 = 0;
LABEL_105:
      *(_QWORD *)&v182 = v52 - v54;
      if (__OFSUB__(v52, v54))
      {
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }
      v79 = v175[1];
      v258 = *v175;
      v259 = v79;
      v260 = v175[2];
      BigString.utf8.getter();
      if (__OFSUB__(0, v54))
      {
LABEL_218:
        __break(1u);
        goto LABEL_219;
      }
      v161 = BigString.UTF8View.index(_:offsetBy:)();
      v81 = v80;
      v159[1] = v83;
      v159[2] = v82;
      outlined release of Locale((uint64_t)&v245);
      v172 = v190;
      if (v66 >= (uint64_t)v190)
      {
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      if (v65 != v33[11])
      {
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      v159[0] = v81;
      v84 = v33[8];
      if (v64)
      {
        v85 = v189;
        v86 = v64 + 24 * ((v189 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF);
        v87 = *(_QWORD *)(v86 + 40);
        *(_QWORD *)&v195 = *(_QWORD *)(v86 + 32);
        swift_bridgeObjectRetain();
        v160 = v87;
        swift_bridgeObjectRetain();
        v88 = v65;
      }
      else
      {
        swift_unknownObjectRetain();
        v85 = v189;
        specialized Rope._Node.subscript.getter(v189, v84);
        *(_QWORD *)&v195 = v89;
        v160 = v90;
        swift_unknownObjectRelease();
        v84 = v33[8];
        v88 = v33[11];
      }
      *(_QWORD *)&v181 = v66 + 1;
      v196 = (unint64_t)v250 + 8;
      *(_QWORD *)&v246 = v65;
      *((_QWORD *)&v246 + 1) = v85;
      v194 = (__int128 *)((char *)&v204 + 8);
      *(_QWORD *)&v247 = v64;
      v171 = (uint64_t *)(v183 + 40);
LABEL_113:
      if (v65 != v88)
        goto LABEL_205;
      v180 = v88;
      if (v64)
      {
        v91 = *(_QWORD *)(v64 + 24 * ((v85 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v91 = specialized Rope._Node.subscript.getter(v85, v84);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__((_QWORD)v182, v91))
        goto LABEL_206;
      v170 = v182 + v91;
      if (!v84)
        goto LABEL_207;
      v92 = ((-15 << ((4 * *(_BYTE *)(v84 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v84 + 18) | ((unint64_t)*(unsigned __int16 *)(v84 + 16) << ((4 * *(_BYTE *)(v84 + 18) + 8) & 0x3C));
      swift_unknownObjectRetain();
      if (v85 >= v92)
        goto LABEL_207;
      if (v64)
      {
        v93 = (4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C;
        v94 = ((v85 >> v93) & 0xF) + 1;
        if (v94 < *(unsigned __int16 *)(v64 + 16))
        {
          v95 = (v94 << v93) | ((-15 << v93) - 1) & v85;
          swift_unknownObjectRelease_n();
LABEL_128:
          v100 = v247;
LABEL_129:
          v101 = v195;
LABEL_133:
          if ((_QWORD)v181 == v172)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_174:
            if (v180 == v33[11])
            {
              if (v64)
              {
                v133 = *(_QWORD *)(v64 + 24 * ((v85 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v134 = v33[8];
                swift_unknownObjectRetain();
                v133 = specialized Rope._Node.subscript.getter(v85, v134);
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v135 = v182 + v133;
              if (!__OFADD__((_QWORD)v182, v133))
              {
                v136 = v175[1];
                v202 = *v175;
                v137 = v175[2];
                v203 = v136;
                v204 = v137;
                BigString.utf8.getter();
                if (!__OFSUB__(v135, v161 >> 11))
                {
                  v138 = BigString.UTF8View.index(_:offsetBy:)();
                  v140 = v139;
                  v142 = v141;
                  v144 = v143;
                  outlined release of Locale((uint64_t)&v216);
                  swift_release();
                  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)&v221);
                  if (v166 >= v138 >> 10)
                    v145 = v138;
                  else
                    v145 = v185;
                  if (v166 >= v138 >> 10)
                    v146 = v140;
                  else
                    v146 = v179;
                  if (v166 < v138 >> 10)
                  {
                    v142 = v178;
                    v144 = v177;
                  }
                  if (v145 >> 10 >= v167)
                  {
                    v147 = v176;
                    v148 = *((_QWORD *)v176 + 26);
                    if (v145 >> 10 >= v148 >> 10)
                    {
                      v196 = *((_QWORD *)v176 + 29);
                      v195 = *(__int128 *)((char *)v176 + 216);
                      *((_QWORD *)v176 + 26) = v145;
                      *((_QWORD *)v147 + 27) = v146;
                      *((_QWORD *)v147 + 28) = v142;
                      *((_QWORD *)v147 + 29) = v144;
                      v149 = v147[11];
                      v255 = v147[10];
                      v256 = v149;
                      v257 = v147[12];
                      v150 = v147[7];
                      v251 = v147[6];
                      v252 = v150;
                      v151 = v147[9];
                      v253 = v147[8];
                      v254 = v151;
                      v152 = v147[3];
                      v248 = v147[2];
                      v249 = v152;
                      v153 = v147[5];
                      v250[0] = v147[4];
                      v250[1] = v153;
                      v154 = v147[1];
                      v246 = *v147;
                      v247 = v154;
                      outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v246);
                      outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v246);
                      v155 = swift_bridgeObjectRetain();
                      v156 = specialized _NativeDictionary.filter(_:)(v155, (uint64_t)&v246);
                      swift_release();
                      swift_bridgeObjectRelease_n();
                      outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)&v246);
                      v157 = v165;
                      v158 = v163;
                      *v165 = v156;
                      v157[1] = v158;
                      v157[2] = v148;
                      *(_OWORD *)(v157 + 3) = v195;
                      v157[5] = v196;
                      v157[6] = v145;
                      v157[7] = v146;
                      v157[8] = v142;
                      v157[9] = v144;
                      return;
                    }
                    goto LABEL_225;
                  }
LABEL_224:
                  __break(1u);
LABEL_225:
                  __break(1u);
LABEL_226:
                  __break(1u);
LABEL_227:
                  __break(1u);
LABEL_228:
                  __break(1u);
LABEL_229:
                  __break(1u);
                  goto LABEL_230;
                }
LABEL_223:
                __break(1u);
                goto LABEL_224;
              }
LABEL_222:
              __break(1u);
              goto LABEL_223;
            }
LABEL_221:
            __break(1u);
            goto LABEL_222;
          }
          if ((_QWORD)v246 != v33[11])
            goto LABEL_208;
          v173 = v246;
          v168 = v100;
          v169 = v95;
          if (v100)
          {
            v105 = v100 + 24 * ((v95 >> ((4 * *(_BYTE *)(v100 + 18) + 8) & 0x3C)) & 0xF);
            v107 = *(_QWORD *)(v105 + 32);
            v106 = *(_QWORD *)(v105 + 40);
            swift_bridgeObjectRetain();
            v174 = v106;
            swift_bridgeObjectRetain();
          }
          else
          {
            v108 = v33[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v95, v108);
            v107 = v109;
            v174 = v110;
            v101 = v195;
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRetain();
          v111 = 0;
          v112 = v171;
          v192 = v107;
          v186 = v64;
          v189 = v85;
          while (1)
          {
            v114 = v111 + 1;
            if (__OFADD__(v111, 1))
            {
              __break(1u);
LABEL_195:
              __break(1u);
              goto LABEL_196;
            }
            v115 = *(v112 - 1);
            v116 = *v112;
            if (*(_QWORD *)(v101 + 16))
            {
              swift_bridgeObjectRetain_n();
              v117 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v116);
              if ((v118 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v101 + 56) + 72 * v117, (uint64_t)&v216);
              }
              else
              {
                v220 = 0;
                v218 = 0u;
                v219 = 0u;
                v216 = 0u;
                v217 = 0u;
              }
              swift_bridgeObjectRelease();
              if (!*(_QWORD *)(v107 + 16))
              {
LABEL_148:
                v215 = 0;
                v213 = 0u;
                v214 = 0u;
                v211 = 0u;
                v212 = 0u;
                goto LABEL_155;
              }
            }
            else
            {
              v220 = 0;
              v218 = 0u;
              v219 = 0u;
              v216 = 0u;
              v217 = 0u;
              swift_bridgeObjectRetain();
              if (!*(_QWORD *)(v107 + 16))
                goto LABEL_148;
            }
            swift_bridgeObjectRetain();
            v119 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v116);
            if ((v120 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v107 + 56) + 72 * v119, (uint64_t)&v211);
            }
            else
            {
              v215 = 0;
              v213 = 0u;
              v214 = 0u;
              v211 = 0u;
              v212 = 0u;
            }
            swift_bridgeObjectRelease();
            v101 = v195;
LABEL_155:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v216, (uint64_t)&v246, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v211, v196, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((_QWORD *)&v247 + 1))
            {
              if ((_QWORD)v251)
                goto LABEL_172;
              outlined destroy of Any?((uint64_t)&v246, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v211, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v216, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_142;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v246, (uint64_t)v210, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!(_QWORD)v251)
              goto LABEL_171;
            v121 = *(_OWORD *)(v196 + 48);
            v208[2] = *(_OWORD *)(v196 + 32);
            v208[3] = v121;
            v209 = *(_QWORD *)(v196 + 64);
            v122 = *(_OWORD *)(v196 + 16);
            v208[0] = *(_OWORD *)v196;
            v208[1] = v122;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v210, (uint64_t)v207);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v208, (uint64_t)v206);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v207, (uint64_t)&v202, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v206, (uint64_t)v194, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (*((_QWORD *)&v203 + 1))
            {
              if (!v205)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
LABEL_140:
                v113 = 0;
                goto LABEL_141;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v202, (uint64_t)v199);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v194, (uint64_t)v198);
              v123 = v200;
              v188 = v201;
              v187 = (unint64_t)__swift_project_boxed_opaque_existential_1(v199, v200);
              v191 = v159;
              v124 = *(_QWORD *)(v123 - 8);
              MEMORY[0x1E0C80A78](v187);
              v126 = (char *)v159 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v198, (uint64_t)&v197);
              v127 = type metadata accessor for Optional();
              *(_QWORD *)&v190 = v159;
              v128 = *(_QWORD *)(v127 - 8);
              MEMORY[0x1E0C80A78](v127);
              v130 = (char *)v159 - v129;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v131 = swift_dynamicCast();
              v132 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56);
              if (v131)
              {
                v132(v130, 0, 1, v123);
                (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v126, v130, v123);
                v113 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v123);
              }
              else
              {
                v132(v130, 1, 1, v123);
                (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v127);
                v113 = 0;
              }
              v64 = v186;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v199);
              v85 = v189;
              v101 = v195;
            }
            else
            {
              if (v205)
              {
                outlined destroy of Any?((uint64_t)v194, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_140;
              }
              v113 = 1;
            }
LABEL_141:
            outlined destroy of Any?((uint64_t)v206, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v207, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v208);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v210);
            outlined destroy of Any?((uint64_t)&v246, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v211, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v216, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            v107 = v192;
            if ((v113 & 1) == 0)
              goto LABEL_173;
LABEL_142:
            v112 += 2;
            ++v111;
            if (v114 == v193)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v33 = v184;
              v84 = v184[8];
              v88 = v184[11];
              v85 = v169;
              *(_QWORD *)&v182 = v170;
              v65 = v173;
              *(_QWORD *)&v246 = v173;
              *((_QWORD *)&v246 + 1) = v169;
              v64 = v168;
              *(_QWORD *)&v247 = v168;
              v25 = __OFADD__((_QWORD)v181, 1);
              *(_QWORD *)&v181 = v181 + 1;
              if (!v25)
                goto LABEL_113;
              __break(1u);
LABEL_171:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v210);
LABEL_172:
              outlined destroy of Any?((uint64_t)&v246, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v211, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v216, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_173:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v33 = v184;
              goto LABEL_174;
            }
          }
        }
      }
      v96 = *(unsigned __int8 *)(v84 + 18);
      v97 = (4 * v96 + 8) & 0x3C;
      v98 = (v85 >> v97) & 0xF;
      *(_QWORD *)&v202 = v98;
      if (v96)
      {
        swift_unknownObjectRetain();
        v99 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v84 + 24, (uint64_t *)&v202, (uint64_t)&v246, v84, v96);
        swift_unknownObjectRelease();
        if ((v99 & 1) != 0)
        {
          swift_unknownObjectRelease_n();
          v95 = *((_QWORD *)&v246 + 1);
          goto LABEL_128;
        }
      }
      else
      {
        v102 = v98 + 1;
        if (v98 + 1 < (unint64_t)*(unsigned __int16 *)(v84 + 16))
        {
          swift_unknownObjectRelease_n();
          v95 = (v102 << v97) | ((-15 << v97) - 1) & v85;
          v100 = v84;
          goto LABEL_129;
        }
      }
      v103 = *(unsigned __int8 *)(v84 + 18);
      v104 = *(unsigned __int16 *)(v84 + 16);
      swift_unknownObjectRelease_n();
      v95 = ((-15 << ((4 * v103 + 8) & 0x3C)) - 1) & v103 | (unint64_t)(v104 << ((4 * v103 + 8) & 0x3C));
      v101 = v195;
      v100 = 0;
      *(_QWORD *)&v246 = v180;
      goto LABEL_133;
    }
LABEL_71:
    swift_unknownObjectRetain();
    v65 = v50;
    v66 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v50, v189, v64, v48, v49);
    swift_unknownObjectRelease_n();
    goto LABEL_105;
  }
  v173 = v33[11];
  v53 = *(unsigned __int8 *)(v48 + 18);
  if (*(_BYTE *)(v48 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v221);
    v54 = v188;
    v55 = v48;
    while (1)
    {
      v58 = *(unsigned __int16 *)(v55 + 16);
      if (!*(_WORD *)(v55 + 16))
        goto LABEL_54;
      v59 = *(_QWORD *)(v55 + 40);
      v25 = __OFSUB__(v54, v59);
      v60 = v54 - v59;
      if (v25)
        goto LABEL_203;
      if (__OFADD__(v60, 1))
        goto LABEL_204;
      if (v60 + 1 < 1)
      {
        v58 = 0;
      }
      else
      {
        if ((_DWORD)v58 == 1)
        {
          v54 = v60;
LABEL_54:
          if (v54)
            goto LABEL_200;
          goto LABEL_55;
        }
        v61 = (uint64_t *)(v55 + 64);
        v62 = 1;
        while (1)
        {
          v63 = *v61;
          v61 += 3;
          v54 = v60 - v63;
          if (__OFSUB__(v60, v63))
            goto LABEL_197;
          if (__OFADD__(v54, 1))
            goto LABEL_198;
          if (v54 + 1 < 1)
            break;
          ++v62;
          v60 = v54;
          if (v58 == v62)
            goto LABEL_54;
        }
        v58 = v62;
        v54 = v60;
      }
LABEL_55:
      v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
      v53 = ((-15 << v56) - 1) & v53 | (v58 << v56);
      v57 = *(_QWORD *)(v55 + 24 + 24 * v58);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v55 = v57;
      if (!*(_BYTE *)(v57 + 18))
        goto LABEL_80;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)&v221);
  v54 = v188;
  v57 = v48;
LABEL_80:
  v70 = *(unsigned __int16 *)(v57 + 16);
  v64 = v57;
  if (*(_WORD *)(v57 + 16))
  {
    v71 = *(_QWORD *)(v57 + 24);
    v25 = __OFSUB__(v54, v71);
    v72 = v54 - v71;
    v33 = v184;
    if (v25)
    {
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    if (__OFADD__(v72, 1))
    {
LABEL_235:
      __break(1u);
      goto LABEL_236;
    }
    if (v72 + 1 < 1)
    {
      v70 = 0;
LABEL_103:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v189 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v70 << 8);
      v50 = v173;
      v52 = v188;
      goto LABEL_71;
    }
    if ((_DWORD)v70 != 1)
    {
      v76 = (uint64_t *)(v57 + 48);
      v77 = 1;
      while (1)
      {
        v78 = *v76;
        v76 += 3;
        v54 = v72 - v78;
        if (__OFSUB__(v72, v78))
          goto LABEL_228;
        if (__OFADD__(v54, 1))
          goto LABEL_229;
        if (v54 + 1 < 1)
          break;
        ++v77;
        v72 = v54;
        if (v70 == v77)
          goto LABEL_102;
      }
      v70 = v77;
      v54 = v72;
      goto LABEL_103;
    }
    v54 = v72;
  }
  else
  {
    v33 = v184;
  }
LABEL_102:
  if (!v54)
    goto LABEL_103;
LABEL_237:
  __break(1u);
}

__n128 AttributedString.Runs.NSAttributesSlice.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 168);
  v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.index(after:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  int v95;
  void (*v96)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  __int128 *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE v152[40];
  _QWORD v153[3];
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[40];
  _BYTE v161[40];
  _OWORD v162[4];
  uint64_t v163;
  _BYTE v164[72];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  _OWORD v180[6];
  _OWORD v181[4];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;

  v3 = *a1;
  v5 = (__int128 *)a1[2];
  result = a1[3];
  v6 = *(_OWORD *)(v2 + 176);
  v188 = *(_OWORD *)(v2 + 160);
  v189 = v6;
  v190 = *(_QWORD *)(v2 + 192);
  v7 = *(_OWORD *)(v2 + 112);
  v184 = *(_OWORD *)(v2 + 96);
  v185 = v7;
  v8 = *(_OWORD *)(v2 + 144);
  v186 = *(_OWORD *)(v2 + 128);
  v187 = v8;
  v9 = *(_OWORD *)(v2 + 48);
  v181[2] = *(_OWORD *)(v2 + 32);
  v181[3] = v9;
  v10 = *(_OWORD *)(v2 + 80);
  v182 = *(_OWORD *)(v2 + 64);
  v183 = v10;
  v11 = *(_OWORD *)(v2 + 16);
  v181[0] = *(_OWORD *)v2;
  v181[1] = v11;
  if (v3 >> 10 < *((_QWORD *)&v186 + 1) >> 10 || v3 >> 10 >= *((_QWORD *)&v188 + 1) >> 10)
    goto LABEL_147;
  v140 = *(_QWORD *)(v2 + 200);
  v12 = *(_QWORD *)(v140 + 16);
  if (!v12)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  v13 = *(_QWORD *)(*(_QWORD *)&v181[0] + 64);
  v14 = *(_QWORD *)(*(_QWORD *)&v181[0] + 80);
  v15 = (uint64_t *)(v3 >> 11);
  if (v13)
    v16 = *(_QWORD *)(*(_QWORD *)&v181[0] + 80);
  else
    v16 = 0;
  if (v16 < (uint64_t)v15)
    goto LABEL_149;
  v17 = *(_QWORD *)(*(_QWORD *)&v181[0] + 72);
  v141 = *(_QWORD *)(*(_QWORD *)&v181[0] + 88);
  v139 = *(_QWORD *)&v181[0];
  v144 = v12;
  v124 = a2;
  v125 = *((_QWORD *)&v188 + 1);
  v126 = *((_QWORD *)&v188 + 1) >> 10;
  v127 = v3 >> 10;
  v123 = v189;
  v122 = v190;
  v149 = (uint64_t *)result;
  v150 = v17;
  if (v13 && (uint64_t)v15 < v14 && *(_WORD *)(v13 + 16))
  {
    v147 = (uint64_t *)v3;
    v148 = v5;
    v18 = *(unsigned __int8 *)(v13 + 18);
    v146 = v15;
    if (v18)
    {
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)v181);
      v19 = (char *)v15;
      v20 = v13;
      while (1)
      {
        v23 = *(unsigned __int16 *)(v20 + 16);
        if (!*(_WORD *)(v20 + 16))
          break;
        v24 = *(_QWORD *)(v20 + 40);
        v25 = __OFSUB__(v19, v24);
        v26 = &v19[-v24];
        if (v25)
          goto LABEL_141;
        if (__OFADD__(v26, 1))
          goto LABEL_142;
        if ((uint64_t)(v26 + 1) < 1)
        {
          v23 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v23 == 1)
        {
          v19 = v26;
          break;
        }
        v27 = (uint64_t *)(v20 + 64);
        v28 = 1;
        while (1)
        {
          v29 = *v27;
          v27 += 3;
          v19 = &v26[-v29];
          if (__OFSUB__(v26, v29))
            goto LABEL_138;
          if (__OFADD__(v19, 1))
          {
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }
          if ((uint64_t)(v19 + 1) < 1)
            break;
          ++v28;
          v26 = v19;
          if (v23 == v28)
            goto LABEL_14;
        }
        v23 = v28;
        v19 = v26;
LABEL_15:
        v21 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
        v18 = ((-15 << v21) - 1) & v18 | (v23 << v21);
        v22 = *(_QWORD *)(v20 + 24 + 24 * v23);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v20 = v22;
        if (!*(_BYTE *)(v22 + 18))
          goto LABEL_32;
      }
LABEL_14:
      if (!v19)
        goto LABEL_15;
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v181);
    v19 = (char *)v15;
    v22 = v13;
LABEL_32:
    v32 = *(unsigned __int16 *)(v22 + 16);
    v31 = v22;
    if (!*(_WORD *)(v22 + 16))
      goto LABEL_45;
    v33 = *(_QWORD *)(v22 + 24);
    v25 = __OFSUB__(v19, v33);
    v34 = &v19[-v33];
    if (v25)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if (__OFADD__(v34, 1))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((uint64_t)(v34 + 1) < 1)
    {
      v32 = 0;
    }
    else
    {
      if ((_DWORD)v32 == 1)
      {
        v19 = v34;
LABEL_45:
        if (v19)
        {
LABEL_162:
          __break(1u);
          return result;
        }
        goto LABEL_46;
      }
      v35 = (uint64_t *)(v22 + 48);
      v36 = 1;
      while (1)
      {
        v37 = *v35;
        v35 += 3;
        v19 = &v34[-v37];
        if (__OFSUB__(v34, v37))
          goto LABEL_158;
        if (__OFADD__(v19, 1))
          goto LABEL_159;
        if ((uint64_t)(v19 + 1) < 1)
          break;
        ++v36;
        v34 = v19;
        if (v32 == v36)
          goto LABEL_45;
      }
      v32 = v36;
      v19 = v34;
    }
LABEL_46:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v30 = v18 & 0xFFFFFFFFFFFFF0FFLL | (v32 << 8);
    v15 = v146;
    goto LABEL_30;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v181);
  v30 = specialized Rope._endPath.getter(v13);
  result = swift_unknownObjectRelease();
  v31 = 0;
  v19 = 0;
  if (v13)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v150 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v141, v30, v31, v13, v150);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v150 = 0;
LABEL_48:
  v138 = (char *)((char *)v15 - v19);
  if (__OFSUB__(v15, v19))
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v38 = *(_OWORD *)(v139 + 32);
  v180[3] = *(_OWORD *)(v139 + 16);
  v180[4] = v38;
  v180[5] = *(_OWORD *)(v139 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v19))
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  v39 = BigString.UTF8View.index(_:offsetBy:)();
  v41 = v40;
  v43 = v42;
  v45 = v44;
  result = outlined release of Locale((uint64_t)v180);
  v134 = *((_QWORD *)&v182 + 1);
  if (v150 >= *((uint64_t *)&v182 + 1))
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  v117 = v45;
  v118 = v43;
  v119 = v41;
  v121 = v39;
  v46 = v139;
  v47 = v141;
  if (v141 != *(_QWORD *)(v139 + 88))
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v48 = *(uint64_t **)(v139 + 64);
  if (v31)
  {
    v147 = *(uint64_t **)(v139 + 72);
    v49 = v31 + 24 * ((v30 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF);
    v50 = *(_QWORD *)(v49 + 32);
    v51 = *(_QWORD *)(v49 + 40);
    swift_bridgeObjectRetain();
    v120 = v51;
    result = swift_bridgeObjectRetain();
    v52 = v141;
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v30, (uint64_t)v48);
    v50 = v53;
    v120 = v54;
    result = swift_unknownObjectRelease();
    v48 = *(uint64_t **)(v139 + 64);
    v147 = *(uint64_t **)(v139 + 72);
    v52 = *(_QWORD *)(v139 + 88);
  }
  v116 = (__int128 *)(v139 + 16);
  v136 = v150 + 1;
  *(_QWORD *)&v165 = v141;
  *((_QWORD *)&v165 + 1) = v30;
  v148 = (__int128 *)&v158;
  v149 = &v168;
  *(_QWORD *)&v166 = v31;
  v133 = (uint64_t *)(v140 + 40);
  v145 = v50;
LABEL_56:
  if (v47 != v52)
    goto LABEL_143;
  v137 = v31;
  if (v31)
  {
    v55 = *(_QWORD *)(v31 + 24 * ((v30 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v55 = specialized Rope._Node.subscript.getter(v30, (uint64_t)v48);
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v138, v55))
    goto LABEL_144;
  v130 = &v138[v55];
  if (v48)
  {
    v56 = ((-15 << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v48 + 18) | ((unint64_t)*((unsigned __int16 *)v48 + 8) << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
  }
  else
  {
    v56 = 0;
  }
  v58 = v144;
  v57 = v145;
  if (v30 >= v56)
    goto LABEL_145;
  if (v137)
  {
    v59 = (4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C;
    v60 = ((v30 >> v59) & 0xF) + 1;
    if (v60 < *(unsigned __int16 *)(v137 + 16))
    {
      v61 = (v60 << v59) | ((-15 << v59) - 1) & v30;
      result = swift_unknownObjectRelease_n();
LABEL_71:
      v48 = (uint64_t *)v166;
      goto LABEL_79;
    }
  }
  v62 = *((unsigned __int8 *)v48 + 18);
  v63 = (4 * v62 + 8) & 0x3C;
  v64 = (v30 >> v63) & 0xF;
  *(_QWORD *)&v156 = v64;
  if (v62)
  {
    swift_unknownObjectRetain();
    v65 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v48 + 3), (uint64_t *)&v156, (uint64_t)&v165, (uint64_t)v48, v62);
    result = swift_unknownObjectRelease();
    if ((v65 & 1) != 0)
    {
      result = swift_unknownObjectRelease_n();
      v61 = *((_QWORD *)&v165 + 1);
      v57 = v145;
      goto LABEL_71;
    }
    goto LABEL_74;
  }
  v66 = v64 + 1;
  if (v64 + 1 >= (unint64_t)*((unsigned __int16 *)v48 + 8))
  {
LABEL_74:
    if (v48)
    {
      v67 = *((unsigned __int8 *)v48 + 18);
      v68 = *((unsigned __int16 *)v48 + 8);
      result = swift_unknownObjectRelease_n();
      v61 = ((-15 << ((4 * v67 + 8) & 0x3C)) - 1) & v67 | (unint64_t)(v68 << ((4 * v67 + 8) & 0x3C));
    }
    else
    {
      v61 = 0;
    }
    v48 = 0;
    *(_QWORD *)&v165 = v52;
    goto LABEL_78;
  }
  result = swift_unknownObjectRelease_n();
  v61 = (v66 << v63) | ((-15 << v63) - 1) & v30;
LABEL_78:
  v57 = v145;
LABEL_79:
  if (v136 != v134)
  {
    if ((_QWORD)v165 != *(_QWORD *)(v46 + 88))
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v131 = v52;
    v132 = v30;
    v141 = v165;
    v128 = (uint64_t)v48;
    v129 = v61;
    if (v48)
    {
      v69 = (char *)&v48[3 * ((v61 >> ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) & 0xF)];
      v70 = *((_QWORD *)v69 + 4);
      v71 = *((_QWORD *)v69 + 5);
      swift_bridgeObjectRetain();
      v135 = v71;
      swift_bridgeObjectRetain();
    }
    else
    {
      v72 = *(_QWORD *)(v46 + 64);
      swift_unknownObjectRetain();
      v57 = v145;
      specialized Rope._Node.subscript.getter(v61, v72);
      v135 = v73;
      v70 = v74;
      swift_unknownObjectRelease();
    }
    result = swift_bridgeObjectRetain();
    v75 = 0;
    v76 = v133;
    v150 = v70;
    while (1)
    {
      v78 = v75 + 1;
      if (__OFADD__(v75, 1))
      {
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
      v80 = *(v76 - 1);
      v79 = *v76;
      if (*(_QWORD *)(v57 + 16))
      {
        swift_bridgeObjectRetain_n();
        v81 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v79);
        if ((v82 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v57 + 56) + 72 * v81, (uint64_t)&v175);
        }
        else
        {
          v179 = 0;
          v177 = 0u;
          v178 = 0u;
          v175 = 0u;
          v176 = 0u;
        }
        swift_bridgeObjectRelease();
        v70 = v150;
        if (!*(_QWORD *)(v150 + 16))
        {
LABEL_94:
          v174 = 0;
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          goto LABEL_101;
        }
      }
      else
      {
        v179 = 0;
        v177 = 0u;
        v178 = 0u;
        v175 = 0u;
        v176 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v70 + 16))
          goto LABEL_94;
      }
      swift_bridgeObjectRetain();
      v83 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v79);
      if ((v84 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v70 + 56) + 72 * v83, (uint64_t)&v170);
      }
      else
      {
        v174 = 0;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v48 = (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v175, (uint64_t)&v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v170, (uint64_t)v149, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((_QWORD *)&v166 + 1))
      {
        if (v169)
          goto LABEL_118;
        outlined destroy of Any?((uint64_t)&v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v170, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = outlined destroy of Any?((uint64_t)&v175, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v165, (uint64_t)v164, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v169)
        goto LABEL_117;
      v85 = *((_OWORD *)v149 + 3);
      v162[2] = *((_OWORD *)v149 + 2);
      v162[3] = v85;
      v163 = v149[8];
      v86 = *((_OWORD *)v149 + 1);
      v162[0] = *(_OWORD *)v149;
      v162[1] = v86;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v164, (uint64_t)v161);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v162, (uint64_t)v160);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v161, (uint64_t)&v156, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v160, (uint64_t)v148, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v157)
      {
        if (!v159)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
LABEL_86:
          v77 = 0;
          goto LABEL_87;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v156, (uint64_t)v153);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v148, (uint64_t)v152);
        v87 = v154;
        v143 = v155;
        v142 = __swift_project_boxed_opaque_existential_1(v153, v154);
        v147 = &v115;
        v88 = *(_QWORD *)(v87 - 8);
        MEMORY[0x1E0C80A78](v142);
        v90 = (char *)&v115 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v152, (uint64_t)&v151);
        v91 = type metadata accessor for Optional();
        v146 = &v115;
        v92 = *(_QWORD *)(v91 - 8);
        MEMORY[0x1E0C80A78](v91);
        v94 = (char *)&v115 - v93;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v95 = swift_dynamicCast();
        v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56);
        if (v95)
        {
          v96(v94, 0, 1, v87);
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v90, v94, v87);
          v77 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v87);
        }
        else
        {
          v96(v94, 1, 1, v87);
          (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
          v77 = 0;
        }
        v58 = v144;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
        v57 = v145;
      }
      else
      {
        if (v159)
        {
          outlined destroy of Any?((uint64_t)v148, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }
        v77 = 1;
      }
LABEL_87:
      outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v161, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v162);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
      outlined destroy of Any?((uint64_t)&v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v170, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v175, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v77 & 1) == 0)
        goto LABEL_119;
LABEL_88:
      v76 += 2;
      ++v75;
      v70 = v150;
      if (v78 == v58)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v46 = v139;
        v48 = *(uint64_t **)(v139 + 64);
        v147 = *(uint64_t **)(v139 + 72);
        v52 = *(_QWORD *)(v139 + 88);
        v30 = v129;
        v138 = v130;
        v47 = v141;
        *(_QWORD *)&v165 = v141;
        *((_QWORD *)&v165 + 1) = v129;
        v31 = v128;
        *(_QWORD *)&v166 = v128;
        v25 = __OFADD__(v136++, 1);
        if (!v25)
          goto LABEL_56;
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
LABEL_118:
        outlined destroy of Any?((uint64_t)&v165, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v170, v48);
        outlined destroy of Any?((uint64_t)&v175, v48);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v46 = v139;
        v52 = v131;
        v30 = v132;
        goto LABEL_120;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_120:
  if (v52 != *(_QWORD *)(v46 + 88))
    goto LABEL_154;
  if (v137)
  {
    v97 = *(_QWORD *)(v137 + 24 * ((v30 >> ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v98 = *(_QWORD *)(v46 + 64);
    swift_unknownObjectRetain();
    v97 = specialized Rope._Node.subscript.getter(v30, v98);
    swift_unknownObjectRelease();
  }
  v99 = v121;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v100 = &v138[v97];
  if (__OFADD__(v138, v97))
    goto LABEL_155;
  v101 = v116[1];
  v165 = *v116;
  v166 = v101;
  v167 = v116[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(v100, v99 >> 11))
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  v102 = BigString.UTF8View.index(_:offsetBy:)();
  v104 = v103;
  v106 = v105;
  v108 = v107;
  outlined release of Locale((uint64_t)&v156);
  result = outlined release of AttributedString.Runs((uint64_t)v181);
  v109 = v125;
  if (v126 >= v102 >> 10)
    v109 = v102;
  if (v127 > v109 >> 10)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  v110 = v126 >= v102 >> 10;
  v111 = v122;
  v112 = v123;
  if (v126 >= v102 >> 10)
  {
    v111 = v108;
    v112 = v104;
  }
  v113 = v124;
  *v124 = v109;
  v113[1] = v112;
  v114 = *((_QWORD *)&v123 + 1);
  if (v110)
    v114 = v106;
  v113[2] = v114;
  v113[3] = v111;
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.makeIterator()@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[48];
  __int128 v30;
  __int128 v31;

  v2 = v1[9];
  v3 = v1[11];
  *(_OWORD *)&v29[32] = v1[10];
  v30 = v3;
  v4 = v1[11];
  v31 = v1[12];
  v5 = v1[5];
  v6 = v1[7];
  v27 = v1[6];
  v7 = v27;
  v28 = v6;
  v8 = v1[7];
  v9 = v1[9];
  *(_OWORD *)v29 = v1[8];
  v10 = *(_OWORD *)v29;
  *(_OWORD *)&v29[16] = v9;
  v11 = v1[1];
  v12 = v1[3];
  v23 = v1[2];
  v13 = v23;
  v24 = v12;
  v14 = v1[3];
  v15 = v1[5];
  v25 = v1[4];
  v16 = v25;
  v26 = v15;
  v17 = v1[1];
  v22[0] = *v1;
  v18 = v22[0];
  v22[1] = v17;
  a1[10] = *(_OWORD *)&v29[32];
  a1[11] = v4;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  v19 = v1[12];
  *a1 = v18;
  a1[1] = v11;
  v20 = *(_OWORD *)&v29[8];
  a1[12] = v19;
  a1[13] = v20;
  a1[14] = *(_OWORD *)&v29[24];
  return outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v22);
}

unint64_t *AttributedString.Runs.NSAttributesSlice.index(before:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  BOOL v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD v105[2];
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  __int128 *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[40];
  _QWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE v145[40];
  _BYTE v146[40];
  _OWORD v147[4];
  uint64_t v148;
  _BYTE v149[72];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _OWORD v165[8];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;

  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  v7 = result[3];
  v8 = *(_OWORD *)(v2 + 176);
  v168 = *(_OWORD *)(v2 + 160);
  v169 = v8;
  v170 = *(_QWORD *)(v2 + 192);
  v9 = *(_OWORD *)(v2 + 112);
  v165[6] = *(_OWORD *)(v2 + 96);
  v165[7] = v9;
  v10 = *(_OWORD *)(v2 + 144);
  v166 = *(_OWORD *)(v2 + 128);
  v167 = v10;
  v11 = *(_OWORD *)(v2 + 48);
  v165[2] = *(_OWORD *)(v2 + 32);
  v165[3] = v11;
  v12 = *(_OWORD *)(v2 + 80);
  v165[4] = *(_OWORD *)(v2 + 64);
  v165[5] = v12;
  v13 = *(_OWORD *)(v2 + 16);
  v165[0] = *(_OWORD *)v2;
  v165[1] = v13;
  if (*((_QWORD *)&v166 + 1) >> 10 >= v4 >> 10 || *((_QWORD *)&v168 + 1) >> 10 < v4 >> 10)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v123 = *(_QWORD *)(v2 + 200);
  v14 = *(_QWORD *)(v123 + 16);
  if (!v14)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v15 = *(_QWORD *)&v165[0];
  v16 = *(_QWORD *)(*(_QWORD *)&v165[0] + 64);
  v17 = *(_QWORD *)(*(_QWORD *)&v165[0] + 80);
  if (v16)
    v18 = *(_QWORD *)(*(_QWORD *)&v165[0] + 80);
  else
    v18 = 0;
  if (v4 < 0x800)
    goto LABEL_131;
  v19 = (v4 >> 11) - 1;
  if (v18 < v19)
    goto LABEL_131;
  v113 = v167;
  v114 = v4 >> 10;
  v112 = v168;
  v20 = *(_QWORD *)(*(_QWORD *)&v165[0] + 72);
  v21 = *(_QWORD *)(*(_QWORD *)&v165[0] + 88);
  v129 = v14;
  v124 = v21;
  v119 = v5;
  v120 = v4;
  v117 = v7;
  v118 = v6;
  v115 = *((_QWORD *)&v166 + 1);
  v116 = *((_QWORD *)&v166 + 1) >> 10;
  v121 = v4 >> 11;
  v135 = v20;
  if (v16 && (uint64_t)(v4 >> 11) <= v17 && *(_WORD *)(v16 + 16))
  {
    v110 = a2;
    v111 = *(_QWORD *)&v165[0];
    v22 = *(unsigned __int8 *)(v16 + 18);
    if (*(_BYTE *)(v16 + 18))
    {
      swift_unknownObjectRetain_n();
      result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v165);
      v23 = v19;
      v24 = v16;
      while (1)
      {
        v27 = *(unsigned __int16 *)(v24 + 16);
        if (!*(_WORD *)(v24 + 16))
          break;
        v28 = *(_QWORD *)(v24 + 40);
        v29 = __OFSUB__(v23, v28);
        v30 = v23 - v28;
        if (v29)
          goto LABEL_127;
        if (__OFADD__(v30, 1))
          goto LABEL_128;
        if (v30 + 1 < 1)
        {
          v27 = 0;
          goto LABEL_16;
        }
        if ((_DWORD)v27 == 1)
        {
          v23 = v30;
          break;
        }
        v31 = (uint64_t *)(v24 + 64);
        v32 = 1;
        while (1)
        {
          v33 = *v31;
          v31 += 3;
          v23 = v30 - v33;
          if (__OFSUB__(v30, v33))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          if (__OFADD__(v23, 1))
            goto LABEL_124;
          if (v23 + 1 < 1)
            break;
          ++v32;
          v30 = v23;
          if (v27 == v32)
            goto LABEL_15;
        }
        v27 = v32;
        v23 = v30;
LABEL_16:
        v25 = (4 * *(_BYTE *)(v24 + 18) + 8) & 0x3C;
        v22 = ((-15 << v25) - 1) & v22 | (v27 << v25);
        v26 = *(_QWORD *)(v24 + 24 + 24 * v27);
        swift_unknownObjectRetain();
        result = (unint64_t *)swift_unknownObjectRelease();
        v24 = v26;
        if (!*(_BYTE *)(v26 + 18))
          goto LABEL_33;
      }
LABEL_15:
      if (!v23)
        goto LABEL_16;
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    swift_unknownObjectRetain_n();
    result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v165);
    v23 = v19;
    v26 = v16;
LABEL_33:
    v134 = (uint64_t *)v19;
    v35 = *(unsigned __int16 *)(v26 + 16);
    if (*(_WORD *)(v26 + 16))
    {
      v36 = *(_QWORD *)(v26 + 24);
      v29 = __OFSUB__(v23, v36);
      v37 = v23 - v36;
      a2 = v110;
      v15 = v111;
      if (v29)
      {
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      if (__OFADD__(v37, 1))
      {
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }
      v34 = v26;
      if (v37 + 1 < 1)
      {
        v35 = 0;
      }
      else
      {
        if ((_DWORD)v35 == 1)
        {
          v23 = v37;
          goto LABEL_46;
        }
        v38 = (uint64_t *)(v26 + 48);
        v39 = 1;
        while (1)
        {
          v40 = *v38;
          v38 += 3;
          v23 = v37 - v40;
          if (__OFSUB__(v37, v40))
            goto LABEL_136;
          if (__OFADD__(v23, 1))
            goto LABEL_137;
          if (v23 + 1 < 1)
            break;
          ++v39;
          v37 = v23;
          if (v35 == v39)
            goto LABEL_46;
        }
        v35 = v39;
        v23 = v37;
      }
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v132 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
      v21 = v124;
      v19 = (uint64_t)v134;
      goto LABEL_31;
    }
    v34 = v26;
    a2 = v110;
    v15 = v111;
LABEL_46:
    if (v23)
    {
LABEL_146:
      __break(1u);
      return result;
    }
    goto LABEL_47;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v165);
  v132 = specialized Rope._endPath.getter(v16);
  result = (unint64_t *)swift_unknownObjectRelease();
  v34 = 0;
  v23 = 0;
  if (v16)
  {
LABEL_31:
    swift_unknownObjectRetain();
    v128 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v21, v132, v34, v16, v135);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  v128 = 0;
LABEL_49:
  v122 = v19 - v23;
  if (__OFSUB__(v19, v23))
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  if (v21 != *(_QWORD *)(v15 + 88))
  {
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  if (v34)
  {
    v41 = v34;
    v42 = v34 + 24 * ((v132 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF);
    v43 = *(_QWORD *)(v42 + 32);
    v44 = *(_QWORD *)(v42 + 40);
    swift_bridgeObjectRetain();
    result = (unint64_t *)swift_bridgeObjectRetain();
  }
  else
  {
    v45 = *(_QWORD *)(v15 + 64);
    swift_unknownObjectRetain();
    v41 = 0;
    specialized Rope._Node.subscript.getter(v132, v45);
    v43 = v46;
    v44 = v47;
    result = (unint64_t *)swift_unknownObjectRelease();
  }
  v48 = v129;
  if (*((uint64_t *)&v165[0] + 1) < v128)
  {
    v105[0] = *((_QWORD *)&v165[0] + 1);
    v105[1] = v44;
    v110 = a2;
    v111 = v15;
    v133 = (__int128 *)&v143;
    v134 = &v153;
    v107 = (uint64_t *)(v123 + 40);
    v127 = v43;
LABEL_56:
    v49 = *(_QWORD *)(v15 + 64);
    v50 = *(_QWORD *)(v15 + 88);
    *(_QWORD *)&v150 = v124;
    v51 = v132;
    *((_QWORD *)&v150 + 1) = v132;
    *(_QWORD *)&v151 = v41;
    if (v124 != v50)
    {
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    if (v49)
    {
      v52 = *(unsigned __int8 *)(v49 + 18);
      result = (unint64_t *)swift_unknownObjectRetain();
      v51 = v132;
      if (v132 <= v52)
        goto LABEL_139;
    }
    else if (!v132)
    {
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if (v41)
    {
      v53 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      if (((v51 >> v53) & 0xF) != 0)
      {
        v54 = ((((v51 >> v53) & 0xF) - 1) << v53) | ((-15 << v53) - 1) & v51;
        *((_QWORD *)&v150 + 1) = v54;
LABEL_68:
        v59 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
        v132 = v54;
        v108 = v41;
        v60 = *(_QWORD *)(v41 + 24 * ((v54 >> v59) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v61 = 0;
LABEL_72:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v122, v60))
        {
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (v124 != *(_QWORD *)(v15 + 88))
        {
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        v106 = v122 - v60;
        if ((v61 & 1) != 0)
        {
          v62 = *(_QWORD *)(v15 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v132, v62);
          v109 = v63;
          v65 = v64;
          swift_unknownObjectRelease();
        }
        else
        {
          v66 = v108 + 24 * ((v132 >> ((4 * *(_BYTE *)(v108 + 18) + 8) & 0x3C)) & 0xF);
          v65 = *(_QWORD *)(v66 + 32);
          v67 = *(_QWORD *)(v66 + 40);
          swift_bridgeObjectRetain();
          v109 = v67;
          swift_bridgeObjectRetain();
        }
        v68 = v127;
        --v128;
        result = (unint64_t *)swift_bridgeObjectRetain();
        v69 = 0;
        v70 = v107;
        v135 = v65;
        while (1)
        {
          v72 = v69 + 1;
          if (__OFADD__(v69, 1))
            goto LABEL_125;
          v73 = *(v70 - 1);
          v74 = *v70;
          if (*(_QWORD *)(v68 + 16))
          {
            swift_bridgeObjectRetain_n();
            v75 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
            if ((v76 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v68 + 56) + 72 * v75, (uint64_t)&v160);
            }
            else
            {
              v164 = 0;
              v162 = 0u;
              v163 = 0u;
              v160 = 0u;
              v161 = 0u;
            }
            swift_bridgeObjectRelease();
            v65 = v135;
            if (!*(_QWORD *)(v135 + 16))
            {
LABEL_87:
              v159 = 0;
              v157 = 0u;
              v158 = 0u;
              v155 = 0u;
              v156 = 0u;
              goto LABEL_94;
            }
          }
          else
          {
            v164 = 0;
            v162 = 0u;
            v163 = 0u;
            v160 = 0u;
            v161 = 0u;
            swift_bridgeObjectRetain();
            if (!*(_QWORD *)(v65 + 16))
              goto LABEL_87;
          }
          swift_bridgeObjectRetain();
          v77 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
          if ((v78 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v65 + 56) + 72 * v77, (uint64_t)&v155);
          }
          else
          {
            v159 = 0;
            v157 = 0u;
            v158 = 0u;
            v155 = 0u;
            v156 = 0u;
          }
          swift_bridgeObjectRelease();
LABEL_94:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v160, (uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v155, (uint64_t)v134, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!*((_QWORD *)&v151 + 1))
          {
            if (v154)
              goto LABEL_111;
            outlined destroy of Any?((uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v155, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = (unint64_t *)outlined destroy of Any?((uint64_t)&v160, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_81;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v150, (uint64_t)v149, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v154)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
LABEL_111:
            outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v155, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v160, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_112:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v110;
            v15 = v111;
            goto LABEL_113;
          }
          v79 = *((_OWORD *)v134 + 3);
          v147[2] = *((_OWORD *)v134 + 2);
          v147[3] = v79;
          v148 = v134[8];
          v80 = *((_OWORD *)v134 + 1);
          v147[0] = *(_OWORD *)v134;
          v147[1] = v80;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v149, (uint64_t)v146);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v147, (uint64_t)v145);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v146, (uint64_t)&v141, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v145, (uint64_t)v133, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v142)
          {
            if (!v144)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v141);
LABEL_79:
              v71 = 0;
              goto LABEL_80;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v141, (uint64_t)v138);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v133, (uint64_t)v137);
            v81 = v139;
            v126 = v140;
            v125 = __swift_project_boxed_opaque_existential_1(v138, v139);
            v131 = v105;
            v82 = *(_QWORD *)(v81 - 8);
            MEMORY[0x1E0C80A78](v125);
            v84 = (char *)v105 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v137, (uint64_t)&v136);
            v85 = type metadata accessor for Optional();
            v130 = v105;
            v86 = *(_QWORD *)(v85 - 8);
            MEMORY[0x1E0C80A78](v85);
            v88 = (char *)v105 - v87;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            v89 = swift_dynamicCast();
            v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
            if (v89)
            {
              v90(v88, 0, 1, v81);
              (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v84, v88, v81);
              v71 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
            }
            else
            {
              v90(v88, 1, 1, v81);
              (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v85);
              v71 = 0;
            }
            v48 = v129;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
            v68 = v127;
          }
          else
          {
            if (v144)
            {
              outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_79;
            }
            v71 = 1;
          }
LABEL_80:
          outlined destroy of Any?((uint64_t)v145, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v146, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
          outlined destroy of Any?((uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v155, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          result = (unint64_t *)outlined destroy of Any?((uint64_t)&v160, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v71 & 1) == 0)
            goto LABEL_112;
LABEL_81:
          v70 += 2;
          ++v69;
          v65 = v135;
          if (v72 == v48)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = (unint64_t *)swift_bridgeObjectRelease();
            v91 = v106;
            v122 = v106;
            v15 = v111;
            v41 = v108;
            if (v105[0] < v128)
              goto LABEL_56;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v122 = v91;
            a2 = v110;
            goto LABEL_113;
          }
        }
      }
    }
    v55 = *(unsigned __int8 *)(v49 + 18);
    v56 = (4 * v55 + 8) & 0x3C;
    v57 = (v51 >> v56) & 0xF;
    *(_QWORD *)&v141 = v57;
    if (v55)
    {
      swift_unknownObjectRetain();
      v58 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v49 + 16, v49 + 24, (uint64_t *)&v141, (uint64_t)&v150, v55);
      result = (unint64_t *)swift_unknownObjectRelease();
      if ((v58 & 1) != 0)
      {
        if ((_QWORD)v150 != v124)
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v41 = v151;
        v54 = *((_QWORD *)&v150 + 1);
        if ((_QWORD)v151)
          goto LABEL_68;
        goto LABEL_71;
      }
    }
    else if (v57)
    {
      v54 = ((v57 - 1) << v56) | ((-15 << v56) - 1) & v51;
      *((_QWORD *)&v150 + 1) = v54;
      *(_QWORD *)&v151 = v49;
      v41 = v49;
      if (v49)
        goto LABEL_68;
LABEL_71:
      swift_unknownObjectRetain();
      v132 = v54;
      v60 = specialized Rope._Node.subscript.getter(v54, v49);
      swift_unknownObjectRelease();
      v108 = 0;
      v61 = 1;
      goto LABEL_72;
    }
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_113:
  v92 = *(_OWORD *)(v15 + 32);
  v150 = *(_OWORD *)(v15 + 16);
  v151 = v92;
  v152 = *(_OWORD *)(v15 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v122, v121))
    goto LABEL_134;
  v93 = BigString.UTF8View.index(_:offsetBy:)();
  v95 = v94;
  v97 = v96;
  v99 = v98;
  outlined release of Locale((uint64_t)&v141);
  result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v165);
  v100 = v115;
  if (v116 < v93 >> 10)
    v100 = v93;
  if (v114 < v100 >> 10)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v101 = v116 >= v93 >> 10;
  v102 = v112;
  v103 = v113;
  if (v116 < v93 >> 10)
  {
    v102 = v99;
    v103 = v95;
  }
  *a2 = v100;
  a2[1] = v103;
  v104 = *((_QWORD *)&v113 + 1);
  if (!v101)
    v104 = v97;
  a2[2] = v104;
  a2[3] = v102;
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.subscript.getter(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  __int128 *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  uint64_t *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  char *v102;
  _OWORD *v103;
  __int128 v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  char *v108;
  char *v109;
  _QWORD *v110;
  unint64_t v111;
  __int128 v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 *v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 *v132;
  __int128 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  unint64_t v156;
  unint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  char v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  unint64_t v185;
  char v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  int v197;
  void (*v198)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v199;
  uint64_t v200;
  __int128 *v201;
  char *v202;
  __int128 v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t *v222;
  char *v223;
  unint64_t v224;
  _QWORD v225[2];
  char *v226;
  char *v227;
  uint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  char *v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t *v241;
  _QWORD *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  char *v246;
  uint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  _OWORD *v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  char *v267;
  unint64_t v268;
  __int128 *v269;
  __int128 *v270;
  _BYTE *v271;
  _BYTE *v272;
  uint64_t v273;
  _BYTE v274[40];
  _QWORD v275[3];
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  _BYTE v280[24];
  uint64_t v281;
  _BYTE v282[40];
  _BYTE v283[40];
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  _BYTE v289[80];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  _BYTE v293[24];
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE v307[48];
  _BYTE v308[48];
  _OWORD v309[2];
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  _OWORD v324[3];
  _OWORD v325[6];
  uint64_t v326;
  _OWORD v327[4];
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;

  v4 = v3[9];
  v5 = v3[11];
  v318 = v3[10];
  v319 = v5;
  v6 = v3[11];
  v320 = v3[12];
  v7 = v3[5];
  v8 = v3[7];
  v314 = v3[6];
  v315 = v8;
  v9 = v3[7];
  v10 = v3[9];
  v316 = v3[8];
  v317 = v10;
  v11 = v3[1];
  v12 = v3[3];
  v310 = v3[2];
  v311 = v12;
  v13 = v3[3];
  v14 = v3[5];
  v312 = v3[4];
  v313 = v14;
  v15 = v3[1];
  v309[0] = *v3;
  v309[1] = v15;
  v333 = v4;
  v334 = v318;
  v335 = v6;
  v329 = v7;
  v330 = v314;
  v331 = v9;
  v332 = v316;
  v327[1] = v11;
  v327[2] = v310;
  v327[3] = v13;
  v328 = v312;
  v16 = *a3;
  v17 = (uint64_t *)a3[1];
  v18 = (char *)a3[2];
  v19 = (_QWORD *)a3[3];
  v336 = *((_QWORD *)v3 + 24);
  v327[0] = v309[0];
  v261 = *((_QWORD *)&v320 + 1);
  v326 = *((_QWORD *)&v320 + 1);
  if (v16 >> 10 < *((_QWORD *)&v316 + 1) >> 10)
    goto LABEL_279;
  v257 = *((_QWORD *)&v334 + 1) >> 10;
  if (*((_QWORD *)&v334 + 1) >> 10 < v16 >> 10)
    goto LABEL_279;
  v20 = *(_QWORD *)(v261 + 16);
  if (!v20)
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
  v21 = *(_QWORD *)&v327[0];
  v22 = *(_QWORD *)(*(_QWORD *)&v327[0] + 64);
  v23 = *(_QWORD *)(*(_QWORD *)&v327[0] + 80);
  if (v22)
    v24 = *(_QWORD *)(*(_QWORD *)&v327[0] + 80);
  else
    v24 = 0;
  v270 = (__int128 *)(v16 >> 11);
  if (v24 < (uint64_t)(v16 >> 11))
    goto LABEL_281;
  v25 = *(_QWORD *)(*(_QWORD *)&v327[0] + 72);
  v259 = *(_QWORD *)(*(_QWORD *)&v327[0] + 88);
  v260 = *(_QWORD *)&v327[0];
  v248 = *((_QWORD *)&v316 + 1) >> 10;
  v249 = v16 >> 10;
  v265 = v20;
  v266 = v19;
  v263 = v17;
  v267 = v18;
  v268 = v16;
  v241 = a2;
  v242 = (_QWORD *)result;
  v239 = *((_QWORD *)&v335 + 1);
  v240 = v335;
  v238 = v336;
  v243 = *((_QWORD *)&v334 + 1);
  v254 = *((_QWORD *)&v316 + 1);
  v246 = (char *)*((_QWORD *)&v333 + 1);
  v247 = (uint64_t *)v333;
  v245 = v334;
  if (v22 && (uint64_t)v270 < v23 && *(_WORD *)(v22 + 16))
  {
    v26 = *(unsigned __int8 *)(v22 + 18);
    if (*(_BYTE *)(v22 + 18))
    {
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)v327);
      v27 = v270;
      v28 = v22;
      while (1)
      {
        v31 = *(unsigned __int16 *)(v28 + 16);
        if (!*(_WORD *)(v28 + 16))
          break;
        v32 = *(_QWORD *)(v28 + 40);
        v33 = __OFSUB__(v27, v32);
        v34 = (__int128 *)((char *)v27 - v32);
        if (v33)
          goto LABEL_271;
        if (__OFADD__(v34, 1))
          goto LABEL_272;
        if ((uint64_t)v34 + 1 < 1)
        {
          v31 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v31 == 1)
        {
          v27 = v34;
          break;
        }
        v35 = (uint64_t *)(v28 + 64);
        v36 = 1;
        while (1)
        {
          v37 = *v35;
          v35 += 3;
          v27 = (__int128 *)((char *)v34 - v37);
          if (__OFSUB__(v34, v37))
            goto LABEL_264;
          if (__OFADD__(v27, 1))
          {
LABEL_265:
            __break(1u);
LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
            goto LABEL_269;
          }
          if ((uint64_t)v27 + 1 < 1)
            break;
          ++v36;
          v34 = v27;
          if (v31 == v36)
            goto LABEL_14;
        }
        v31 = v36;
        v27 = v34;
LABEL_15:
        v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
        v26 = ((-15 << v29) - 1) & v26 | (v31 << v29);
        v30 = *(_QWORD *)(v28 + 24 + 24 * v31);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v28 = v30;
        if (!*(_BYTE *)(v30 + 18))
          goto LABEL_32;
      }
LABEL_14:
      if (!v27)
        goto LABEL_15;
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
      goto LABEL_278;
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)v327);
    v27 = v270;
    v30 = v22;
LABEL_32:
    v38 = *(unsigned __int16 *)(v30 + 16);
    if (*(_WORD *)(v30 + 16))
    {
      v39 = *(_QWORD *)(v30 + 24);
      v33 = __OFSUB__(v27, v39);
      v40 = (__int128 *)((char *)v27 - v39);
      v21 = v260;
      if (v33)
      {
LABEL_310:
        __break(1u);
        goto LABEL_311;
      }
      if (__OFADD__(v40, 1))
      {
LABEL_311:
        __break(1u);
        goto LABEL_312;
      }
      if ((uint64_t)v40 + 1 < 1)
      {
        v38 = 0;
      }
      else
      {
        if ((_DWORD)v38 == 1)
        {
          v27 = v40;
          goto LABEL_45;
        }
        v41 = (uint64_t *)(v30 + 48);
        v42 = 1;
        while (1)
        {
          v43 = *v41;
          v41 += 3;
          v27 = (__int128 *)((char *)v40 - v43);
          if (__OFSUB__(v40, v43))
            goto LABEL_295;
          if (__OFADD__(v27, 1))
            goto LABEL_296;
          if ((uint64_t)v27 + 1 < 1)
            break;
          ++v42;
          v40 = v27;
          if (v38 == v42)
            goto LABEL_45;
        }
        v38 = v42;
        v27 = v40;
      }
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v250 = v26 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
      v20 = v265;
      v251 = v30;
      goto LABEL_30;
    }
    v21 = v260;
LABEL_45:
    if (v27)
    {
LABEL_312:
      __break(1u);
      goto LABEL_313;
    }
    goto LABEL_46;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v327);
  v250 = specialized Rope._endPath.getter(v22);
  result = swift_unknownObjectRelease();
  v27 = 0;
  v251 = 0;
  if (v22)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v264 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v259, v250, v251, v22, v25);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v264 = 0;
LABEL_48:
  v44 = (char *)((char *)v270 - (char *)v27);
  if (__OFSUB__(v270, v27))
  {
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }
  v45 = *(_OWORD *)(v21 + 32);
  v325[3] = *(_OWORD *)(v21 + 16);
  v325[4] = v45;
  v325[5] = *(_OWORD *)(v21 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v27))
  {
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }
  v252 = (_OWORD *)(v21 + 16);
  v244 = BigString.UTF8View.index(_:offsetBy:)();
  v235 = v47;
  v236 = v46;
  v234 = v48;
  result = outlined release of Locale((uint64_t)&v305);
  v253 = *((_QWORD *)&v328 + 1);
  if (v264 == *((_QWORD *)&v328 + 1))
  {
    result = outlined release of AttributedString.Runs((uint64_t)v327);
    v236 = v268;
    v237 = 0;
    v234 = v267;
    v235 = v263;
    v49 = v266;
    goto LABEL_123;
  }
  if (v259 != *(_QWORD *)(v21 + 88))
    goto LABEL_300;
  v232 = *((_QWORD *)&v327[0] + 1);
  if (v251)
  {
    v50 = v251 + 24 * ((v250 >> ((4 * *(_BYTE *)(v251 + 18) + 8) & 0x3C)) & 0xF);
    v52 = *(_QWORD **)(v50 + 32);
    v51 = *(_QWORD *)(v50 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v53 = *(_QWORD *)(v21 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v250, v53);
    v52 = v54;
    v51 = v55;
    result = swift_unknownObjectRelease();
  }
  if (v232 >= v264)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v237 = 0;
    goto LABEL_115;
  }
  v225[1] = v51;
  v237 = 0;
  v271 = v293;
  v269 = (__int128 *)v280;
  v228 = (uint64_t *)(v261 + 40);
  v56 = v250;
  v57 = v251;
  v233 = v52;
LABEL_58:
  v59 = *(_QWORD *)(v21 + 64);
  v58 = *(_QWORD *)(v21 + 72);
  v60 = *(_QWORD *)(v21 + 88);
  *(_QWORD *)&v290 = v259;
  *((_QWORD *)&v290 + 1) = v56;
  *(_QWORD *)&v291 = v57;
  if (v259 != v60)
    goto LABEL_303;
  v272 = (_BYTE *)v58;
  if (v59)
  {
    v61 = *(unsigned __int8 *)(v59 + 18);
    v62 = v56;
    v63 = v44;
    v64 = v57;
    result = swift_unknownObjectRetain();
    v57 = v64;
    v44 = v63;
    v56 = v62;
    if (v62 <= v61)
      goto LABEL_304;
  }
  else if (!v56)
  {
    goto LABEL_304;
  }
  if (!v57 || (v65 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C, ((v56 >> v65) & 0xF) == 0))
  {
    v67 = *(unsigned __int8 *)(v59 + 18);
    v68 = (4 * v67 + 8) & 0x3C;
    v69 = (v56 >> v68) & 0xF;
    *(_QWORD *)&v278 = v69;
    if (v67)
    {
      swift_unknownObjectRetain();
      v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v59 + 16, v59 + 24, (uint64_t *)&v278, (uint64_t)&v290, v67);
      result = swift_unknownObjectRelease();
      if ((v70 & 1) == 0)
        goto LABEL_309;
      if ((_QWORD)v290 != v259)
        goto LABEL_307;
      v57 = v291;
      v66 = *((_QWORD *)&v290 + 1);
      v20 = v265;
      if ((_QWORD)v291)
        goto LABEL_70;
    }
    else
    {
      if (!v69)
        goto LABEL_309;
      v66 = ((v69 - 1) << v68) | ((-15 << v68) - 1) & v56;
      *((_QWORD *)&v290 + 1) = v66;
      *(_QWORD *)&v291 = v59;
      v57 = v59;
      v20 = v265;
      if (v59)
        goto LABEL_70;
    }
    swift_unknownObjectRetain();
    v231 = v66;
    v72 = specialized Rope._Node.subscript.getter(v66, v59);
    swift_unknownObjectRelease();
    v229 = 0;
    v73 = 1;
    goto LABEL_74;
  }
  v66 = ((((v56 >> v65) & 0xF) - 1) << v65) | ((-15 << v65) - 1) & v56;
  *((_QWORD *)&v290 + 1) = v66;
LABEL_70:
  v71 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
  v231 = v66;
  v229 = v57;
  v72 = *(_QWORD *)(v57 + 24 * ((v66 >> v71) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = 0;
LABEL_74:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v44, v72))
    goto LABEL_305;
  if (v259 != *(_QWORD *)(v21 + 88))
    goto LABEL_306;
  v226 = &v44[-v72];
  v227 = v44;
  if ((v73 & 1) != 0)
  {
    v74 = *(_QWORD *)(v21 + 64);
    swift_unknownObjectRetain();
    v20 = v265;
    specialized Rope._Node.subscript.getter(v231, v74);
    v230 = v75;
    v77 = v76;
    swift_unknownObjectRelease();
  }
  else
  {
    v78 = v229 + 24 * ((v231 >> ((4 * *(_BYTE *)(v229 + 18) + 8) & 0x3C)) & 0xF);
    v77 = *(_QWORD *)(v78 + 32);
    v79 = *(_QWORD *)(v78 + 40);
    swift_bridgeObjectRetain();
    v230 = v79;
    swift_bridgeObjectRetain();
  }
  --v264;
  result = swift_bridgeObjectRetain();
  v80 = 0;
  v81 = v228;
  v272 = (_BYTE *)v77;
  while (1)
  {
    v83 = v80 + 1;
    if (__OFADD__(v80, 1))
      goto LABEL_268;
    v85 = *(v81 - 1);
    v84 = *v81;
    if (v52[2])
    {
      swift_bridgeObjectRetain_n();
      v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
      if ((v87 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(v52[7] + 72 * v86, (uint64_t)&v300);
      }
      else
      {
        v304 = 0;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
      }
      swift_bridgeObjectRelease();
      v77 = (uint64_t)v272;
      if (!*((_QWORD *)v272 + 2))
      {
LABEL_89:
        v299 = 0;
        v297 = 0u;
        v298 = 0u;
        v295 = 0u;
        v296 = 0u;
        goto LABEL_96;
      }
    }
    else
    {
      v304 = 0;
      v302 = 0u;
      v303 = 0u;
      v300 = 0u;
      v301 = 0u;
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(v77 + 16))
        goto LABEL_89;
    }
    swift_bridgeObjectRetain();
    v88 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
    if ((v89 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v77 + 56) + 72 * v88, (uint64_t)&v295);
    }
    else
    {
      v299 = 0;
      v297 = 0u;
      v298 = 0u;
      v295 = 0u;
      v296 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_96:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v300, (uint64_t)&v290, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v295, (uint64_t)v271, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((_QWORD *)&v291 + 1))
    {
      if (v294)
        goto LABEL_113;
      outlined destroy of Any?((uint64_t)&v290, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_83;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v290, (uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v294)
      break;
    v90 = *((_OWORD *)v271 + 3);
    v286 = *((_OWORD *)v271 + 2);
    v287 = v90;
    v288 = *((_QWORD *)v271 + 8);
    v91 = *((_OWORD *)v271 + 1);
    v284 = *(_OWORD *)v271;
    v285 = v91;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v289, (uint64_t)v325);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v284, (uint64_t)v324);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v325, (uint64_t)&v278, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v324, (uint64_t)v269, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v279)
    {
      if (!v281)
      {
        v82 = 1;
        goto LABEL_82;
      }
      outlined destroy of Any?((uint64_t)v269, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_81:
      v82 = 0;
      goto LABEL_82;
    }
    if (!v281)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v278);
      goto LABEL_81;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v278, (uint64_t)&v321);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v269, (uint64_t)v308);
    v92 = *((_QWORD *)&v322 + 1);
    v256 = v323;
    v255 = __swift_project_boxed_opaque_existential_1(&v321, *((uint64_t *)&v322 + 1));
    v262 = v225;
    v93 = *(_QWORD *)(v92 - 8);
    MEMORY[0x1E0C80A78](v255);
    v95 = (char *)v225 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v308, (uint64_t)v307);
    v96 = type metadata accessor for Optional();
    v258 = (char *)v225;
    v97 = *(_QWORD *)(v96 - 8);
    MEMORY[0x1E0C80A78](v96);
    v99 = (char *)v225 - v98;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v100 = swift_dynamicCast();
    v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
    if (v100)
    {
      v101(v99, 0, 1, v92);
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v95, v99, v92);
      v82 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v92);
    }
    else
    {
      v101(v99, 1, 1, v92);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
      v82 = 0;
    }
    v20 = v265;
    v52 = v233;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v308);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
LABEL_82:
    outlined destroy of Any?((uint64_t)v324, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v325, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v284);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
    outlined destroy of Any?((uint64_t)&v290, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    result = outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v82 & 1) == 0)
      goto LABEL_114;
LABEL_83:
    v81 += 2;
    ++v80;
    v77 = (uint64_t)v272;
    if (v83 == v20)
    {
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v102 = v226;
      v44 = v226;
      v56 = v231;
      v21 = v260;
      v57 = v229;
      if (v232 >= v264)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = v102;
        goto LABEL_115;
      }
      goto LABEL_58;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
LABEL_113:
  outlined destroy of Any?((uint64_t)&v290, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_114:
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v260;
  v44 = v227;
LABEL_115:
  v103 = v252;
  v104 = v252[1];
  v325[0] = *v252;
  v325[1] = v104;
  v325[2] = v252[2];
  BigString.utf8.getter();
  result = v244;
  if (__OFSUB__(v44, v244 >> 11))
    goto LABEL_301;
  v105 = BigString.UTF8View.index(_:offsetBy:)();
  v107 = v106;
  v109 = v108;
  v49 = v110;
  outlined release of Locale((uint64_t)&v306);
  if (v248 >= v105 >> 10)
    v111 = v254;
  else
    v111 = v105;
  if (v248 >= v105 >> 10)
  {
    v107 = v247;
    v109 = v246;
    v49 = (_QWORD *)v245;
  }
  v112 = v103[1];
  v324[0] = *v103;
  v324[1] = v112;
  v324[2] = v103[2];
  BigString.unicodeScalars.getter();
  v113 = BigString.UnicodeScalarView.index(after:)();
  outlined release of Locale((uint64_t)v307);
  result = outlined release of AttributedString.Runs((uint64_t)v327);
  v236 = v111;
  if (v113 >> 10 < v111 >> 10)
  {
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
    goto LABEL_308;
  }
  v234 = v109;
  v235 = v107;
LABEL_123:
  if (v249 >= v257)
    goto LABEL_284;
  v114 = *(_QWORD *)(v21 + 64);
  v115 = *(_QWORD *)(v21 + 72);
  v116 = *(_QWORD *)(v21 + 80);
  v262 = *(_QWORD **)(v21 + 88);
  v233 = v49;
  if (!v114)
  {
    if (v268 >= 0x800)
    {
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
      goto LABEL_310;
    }
LABEL_147:
    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v327);
    swift_unknownObjectRetain();
    v129 = specialized Rope._endPath.getter(v114);
    result = swift_unknownObjectRelease();
    v269 = 0;
    v118 = 0;
    goto LABEL_164;
  }
  if (v116 < (uint64_t)v270)
  {
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
    goto LABEL_302;
  }
  if (!*(_WORD *)(v114 + 16) || (uint64_t)v270 >= v116)
    goto LABEL_147;
  v117 = *(unsigned __int8 *)(v114 + 18);
  if (*(_BYTE *)(v114 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v327);
    result = swift_unknownObjectRetain();
    v118 = v270;
    v119 = v114;
    while (1)
    {
      v123 = *(unsigned __int16 *)(v119 + 16);
      if (!*(_WORD *)(v119 + 16))
        goto LABEL_131;
      v124 = *(_QWORD *)(v119 + 40);
      v33 = __OFSUB__(v118, v124);
      v125 = (__int128 *)((char *)v118 - v124);
      if (v33)
        goto LABEL_273;
      if (__OFADD__(v125, 1))
        goto LABEL_274;
      if ((uint64_t)v125 + 1 < 1)
      {
        v123 = 0;
      }
      else
      {
        if ((_DWORD)v123 == 1)
        {
          v118 = v125;
LABEL_131:
          if (v118)
            goto LABEL_270;
          goto LABEL_132;
        }
        v126 = (uint64_t *)(v119 + 64);
        v127 = 1;
        while (1)
        {
          v128 = *v126;
          v126 += 3;
          v118 = (__int128 *)((char *)v125 - v128);
          if (__OFSUB__(v125, v128))
            goto LABEL_266;
          if (__OFADD__(v118, 1))
            goto LABEL_267;
          if ((uint64_t)v118 + 1 < 1)
            break;
          ++v127;
          v125 = v118;
          if (v123 == v127)
            goto LABEL_131;
        }
        v123 = v127;
        v118 = v125;
      }
LABEL_132:
      v120 = (4 * *(_BYTE *)(v119 + 18) + 8) & 0x3C;
      v117 = ((-15 << v120) - 1) & v117 | (v123 << v120);
      v121 = *(_QWORD *)(v119 + 24 + 24 * v123);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v122 = *(unsigned __int8 *)(v121 + 18);
      v269 = (__int128 *)v121;
      v119 = v121;
      if (!v122)
        goto LABEL_149;
    }
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v327);
  result = swift_unknownObjectRetain();
  v118 = v270;
  v269 = (__int128 *)v114;
LABEL_149:
  v130 = *((unsigned __int16 *)v269 + 8);
  if (!*((_WORD *)v269 + 8))
  {
    v21 = v260;
    goto LABEL_162;
  }
  v131 = *((_QWORD *)v269 + 3);
  v33 = __OFSUB__(v118, v131);
  v132 = (__int128 *)((char *)v118 - v131);
  v21 = v260;
  if (v33)
  {
LABEL_313:
    __break(1u);
    goto LABEL_314;
  }
  if (__OFADD__(v132, 1))
  {
LABEL_314:
    __break(1u);
    goto LABEL_315;
  }
  if ((uint64_t)v132 + 1 < 1)
  {
    v130 = 0;
  }
  else if ((_DWORD)v130 == 1)
  {
    v118 = v132;
LABEL_162:
    if (v118)
    {
LABEL_315:
      __break(1u);
      return result;
    }
  }
  else
  {
    v133 = v269 + 3;
    v134 = 1;
    while (1)
    {
      v135 = *(_QWORD *)v133;
      v133 = (__int128 *)((char *)v133 + 24);
      v118 = (__int128 *)((char *)v132 - v135);
      if (__OFSUB__(v132, v135))
        goto LABEL_297;
      if (__OFADD__(v118, 1))
        goto LABEL_298;
      if ((uint64_t)v118 + 1 < 1)
        break;
      ++v134;
      v132 = v118;
      if (v130 == v134)
        goto LABEL_162;
    }
    v130 = v134;
    v118 = v132;
  }
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  v129 = v117 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
LABEL_164:
  v136 = v265;
  if (v114)
  {
    swift_unknownObjectRetain();
    v137 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v262, v129, (uint64_t)v269, v114, v115);
    result = swift_unknownObjectRelease_n();
  }
  else
  {
    v137 = 0;
  }
  v258 = (char *)((char *)v270 - (char *)v118);
  if (__OFSUB__(v270, v118))
    goto LABEL_285;
  v138 = v252[1];
  v321 = *v252;
  v322 = v138;
  v323 = v252[2];
  result = BigString.utf8.getter();
  if (__OFSUB__(0, v118))
  {
LABEL_286:
    __break(1u);
    goto LABEL_287;
  }
  v139 = BigString.UTF8View.index(_:offsetBy:)();
  v141 = v140;
  v230 = v143;
  v231 = v142;
  result = outlined release of Locale((uint64_t)v308);
  if (v137 >= v253)
  {
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  if (v262 != *(_QWORD **)(v21 + 88))
  {
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  v228 = v141;
  v229 = v139;
  v144 = *(_QWORD *)(v21 + 64);
  if (v269)
  {
    v145 = v129;
    v146 = (char *)v269 + 24 * ((v129 >> ((4 * *((_BYTE *)v269 + 18) + 8) & 0x3C)) & 0xF);
    v147 = *((_QWORD *)v146 + 5);
    v271 = (_BYTE *)*((_QWORD *)v146 + 4);
    swift_bridgeObjectRetain();
    v232 = v147;
    result = swift_bridgeObjectRetain();
    v148 = (uint64_t)v262;
    v149 = (uint64_t)v262;
  }
  else
  {
    swift_unknownObjectRetain();
    v145 = v129;
    specialized Rope._Node.subscript.getter(v129, v144);
    v271 = (_BYTE *)v150;
    v232 = v151;
    result = swift_unknownObjectRelease();
    v144 = *(_QWORD *)(v21 + 64);
    v149 = *(_QWORD *)(v21 + 88);
    v148 = (uint64_t)v262;
  }
  v254 = v137 + 1;
  v272 = v293;
  *(_QWORD *)&v290 = v148;
  *((_QWORD *)&v290 + 1) = v145;
  v270 = (__int128 *)v280;
  v247 = (uint64_t *)(v261 + 40);
  *(_QWORD *)&v291 = v269;
  while (2)
  {
    if (v148 != v149)
      goto LABEL_275;
    v256 = v145;
    if (v269)
    {
      v152 = *((_QWORD *)v269 + 3 * ((v145 >> ((4 * *((_BYTE *)v269 + 18) + 8) & 0x3C)) & 0xF) + 3);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v152 = specialized Rope._Node.subscript.getter(v145, v144);
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (__OFADD__(v258, v152))
      goto LABEL_276;
    v246 = &v258[v152];
    if (v144)
    {
      v153 = ((-15 << ((4 * *(_BYTE *)(v144 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v144 + 18) | ((unint64_t)*(unsigned __int16 *)(v144 + 16) << ((4 * *(_BYTE *)(v144 + 18) + 8) & 0x3C));
      result = swift_unknownObjectRetain();
    }
    else
    {
      v153 = 0;
    }
    v154 = v256;
    if (v256 >= v153)
      goto LABEL_277;
    v255 = (_QWORD *)v149;
    if (v269)
    {
      v155 = (4 * *((_BYTE *)v269 + 18) + 8) & 0x3C;
      v156 = ((v256 >> v155) & 0xF) + 1;
      if (v156 < *((unsigned __int16 *)v269 + 8))
      {
        v157 = (v156 << v155) | ((-15 << v155) - 1) & v256;
        result = swift_unknownObjectRelease_n();
        goto LABEL_190;
      }
    }
    v158 = *(unsigned __int8 *)(v144 + 18);
    v159 = (4 * v158 + 8) & 0x3C;
    v160 = (v256 >> v159) & 0xF;
    *(_QWORD *)&v278 = v160;
    if (!v158)
    {
      v164 = v160 + 1;
      if (v160 + 1 < (unint64_t)*(unsigned __int16 *)(v144 + 16))
      {
        result = swift_unknownObjectRelease_n();
        v157 = (v164 << v159) | ((-15 << v159) - 1) & v154;
        v162 = v144;
        v163 = (uint64_t)v271;
        v149 = (uint64_t)v255;
        goto LABEL_198;
      }
      v149 = (uint64_t)v255;
      goto LABEL_194;
    }
    swift_unknownObjectRetain();
    v161 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v144 + 24, (uint64_t *)&v278, (uint64_t)&v290, v144, v158);
    result = swift_unknownObjectRelease();
    v149 = (uint64_t)v255;
    if ((v161 & 1) == 0)
    {
LABEL_194:
      if (v144)
      {
        v165 = *(unsigned __int8 *)(v144 + 18);
        v166 = *(unsigned __int16 *)(v144 + 16);
        result = swift_unknownObjectRelease_n();
        v167 = (4 * v165 + 8) & 0x3C;
        v168 = ((-15 << v167) - 1) & v165;
        v169 = v166 << v167;
        v149 = (uint64_t)v255;
        v157 = v168 | v169;
      }
      else
      {
        v157 = 0;
      }
      v163 = (uint64_t)v271;
      v162 = 0;
      *(_QWORD *)&v290 = v149;
      goto LABEL_198;
    }
    result = swift_unknownObjectRelease_n();
    v157 = *((_QWORD *)&v290 + 1);
LABEL_190:
    v162 = v291;
    v163 = (uint64_t)v271;
LABEL_198:
    if (v254 != v253)
    {
      if ((_QWORD)v290 != *(_QWORD *)(v21 + 88))
      {
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
        goto LABEL_280;
      }
      v262 = (_QWORD *)v290;
      v244 = v162;
      v245 = v157;
      if (v162)
      {
        v170 = v162 + 24 * ((v157 >> ((4 * *(_BYTE *)(v162 + 18) + 8) & 0x3C)) & 0xF);
        v172 = *(_QWORD *)(v170 + 32);
        v171 = *(_QWORD *)(v170 + 40);
        swift_bridgeObjectRetain();
        v248 = v171;
        swift_bridgeObjectRetain();
      }
      else
      {
        v173 = *(_QWORD *)(v21 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v157, v173);
        v172 = v174;
        v248 = v175;
        v163 = (uint64_t)v271;
        swift_unknownObjectRelease();
      }
      result = swift_bridgeObjectRetain();
      v176 = 0;
      v177 = v247;
      v268 = v172;
LABEL_208:
      v180 = v176 + 1;
      if (__OFADD__(v176, 1))
      {
        __break(1u);
LABEL_264:
        __break(1u);
        goto LABEL_265;
      }
      v182 = *(v177 - 1);
      v181 = *v177;
      if (*(_QWORD *)(v163 + 16))
      {
        swift_bridgeObjectRetain_n();
        v183 = specialized __RawDictionaryStorage.find<A>(_:)(v182, v181);
        if ((v184 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v163 + 56) + 72 * v183, (uint64_t)&v300);
        }
        else
        {
          v304 = 0;
          v302 = 0u;
          v303 = 0u;
          v300 = 0u;
          v301 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v172 + 16))
        {
LABEL_216:
          swift_bridgeObjectRetain();
          v185 = specialized __RawDictionaryStorage.find<A>(_:)(v182, v181);
          if ((v186 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v172 + 56) + 72 * v185, (uint64_t)&v295);
          }
          else
          {
            v299 = 0;
            v297 = 0u;
            v298 = 0u;
            v295 = 0u;
            v296 = 0u;
          }
          swift_bridgeObjectRelease();
          v163 = (uint64_t)v271;
LABEL_220:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v300, (uint64_t)&v290, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v295, (uint64_t)v272, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (*((_QWORD *)&v291 + 1))
          {
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v290, (uint64_t)v289, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v294)
              goto LABEL_236;
            v187 = *((_OWORD *)v272 + 3);
            v286 = *((_OWORD *)v272 + 2);
            v287 = v187;
            v288 = *((_QWORD *)v272 + 8);
            v188 = *((_OWORD *)v272 + 1);
            v284 = *(_OWORD *)v272;
            v285 = v188;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v289, (uint64_t)v283);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v284, (uint64_t)v282);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v283, (uint64_t)&v278, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v282, (uint64_t)v270, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v279)
            {
              if (v281)
              {
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v278, (uint64_t)v275);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v270, (uint64_t)v274);
                v189 = v276;
                v264 = v277;
                v263 = __swift_project_boxed_opaque_existential_1(v275, v276);
                v267 = (char *)v225;
                v190 = *(_QWORD *)(v189 - 8);
                MEMORY[0x1E0C80A78](v263);
                v192 = (char *)v225 - ((v191 + 15) & 0xFFFFFFFFFFFFFFF0);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v274, (uint64_t)&v273);
                v193 = type metadata accessor for Optional();
                v266 = v225;
                v194 = *(_QWORD *)(v193 - 8);
                MEMORY[0x1E0C80A78](v193);
                v196 = (char *)v225 - v195;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v197 = swift_dynamicCast();
                v198 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56);
                if (v197)
                {
                  v198(v196, 0, 1, v189);
                  (*(void (**)(char *, char *, uint64_t))(v190 + 32))(v192, v196, v189);
                  v179 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(char *, uint64_t))(v190 + 8))(v192, v189);
                }
                else
                {
                  v198(v196, 1, 1, v189);
                  (*(void (**)(char *, uint64_t))(v194 + 8))(v196, v193);
                  v179 = 0;
                }
                v178 = v265;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v274);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v275);
                v163 = (uint64_t)v271;
                goto LABEL_206;
              }
              v178 = v136;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v278);
LABEL_205:
              v179 = 0;
            }
            else
            {
              v178 = v136;
              if (v281)
              {
                outlined destroy of Any?((uint64_t)v270, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_205;
              }
              v179 = 1;
            }
LABEL_206:
            outlined destroy of Any?((uint64_t)v282, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v283, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v284);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
            outlined destroy of Any?((uint64_t)&v290, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            v136 = v178;
            v172 = v268;
            if ((v179 & 1) == 0)
              goto LABEL_238;
          }
          else
          {
            if (v294)
              goto LABEL_237;
            outlined destroy of Any?((uint64_t)&v290, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          }
          v177 += 2;
          ++v176;
          if (v180 == v136)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v21 = v260;
            v144 = *(_QWORD *)(v260 + 64);
            v149 = *(_QWORD *)(v260 + 88);
            v145 = v245;
            v258 = v246;
            v148 = (uint64_t)v262;
            *(_QWORD *)&v290 = v262;
            *((_QWORD *)&v290 + 1) = v245;
            v269 = (__int128 *)v244;
            *(_QWORD *)&v291 = v244;
            v33 = __OFADD__(v254++, 1);
            if (!v33)
              continue;
            __break(1u);
LABEL_236:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v289);
LABEL_237:
            outlined destroy of Any?((uint64_t)&v290, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v295, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v300, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_238:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v326);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v21 = v260;
            v149 = (uint64_t)v255;
            v154 = v256;
            goto LABEL_239;
          }
          goto LABEL_208;
        }
      }
      else
      {
        v304 = 0;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        swift_bridgeObjectRetain();
        if (*(_QWORD *)(v172 + 16))
          goto LABEL_216;
      }
      v299 = 0;
      v297 = 0u;
      v298 = 0u;
      v295 = 0u;
      v296 = 0u;
      goto LABEL_220;
    }
    break;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_239:
  if (v149 != *(_QWORD *)(v21 + 88))
    goto LABEL_289;
  if (v269)
  {
    v199 = *((_QWORD *)v269 + 3 * ((v154 >> ((4 * *((_BYTE *)v269 + 18) + 8) & 0x3C)) & 0xF) + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v200 = *(_QWORD *)(v21 + 64);
    swift_unknownObjectRetain();
    v199 = specialized Rope._Node.subscript.getter(v154, v200);
    swift_unknownObjectRelease();
  }
  v201 = v252;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v202 = &v258[v199];
  if (__OFADD__(v258, v199))
    goto LABEL_290;
  v203 = v201[1];
  v290 = *v201;
  v291 = v203;
  v292 = v201[2];
  BigString.utf8.getter();
  result = v229;
  if (__OFSUB__(v202, v229 >> 11))
  {
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }
  v204 = BigString.UTF8View.index(_:offsetBy:)();
  v206 = v205;
  v208 = v207;
  v210 = v209;
  outlined release of Locale((uint64_t)&v278);
  result = outlined release of AttributedString.Runs((uint64_t)v327);
  v211 = v204 >> 10;
  if (v257 >= v204 >> 10)
    v212 = v204;
  else
    v212 = v243;
  if (v212 >> 10 < v249)
    goto LABEL_292;
  if (v259 != *(_QWORD *)(v260 + 88))
  {
LABEL_293:
    __break(1u);
    goto LABEL_294;
  }
  if (v251)
  {
    v213 = *(_QWORD *)(v251 + 24 * ((v250 >> ((4 * *(_BYTE *)(v251 + 18) + 8) & 0x3C)) & 0xF) + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v214 = *(_QWORD *)(v260 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v250, v214);
    v213 = v215;
    swift_unknownObjectRelease();
  }
  outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v309);
  v216 = swift_bridgeObjectRetain();
  v217 = specialized _NativeDictionary.filter(_:)(v216, (uint64_t)v309);
  result = swift_bridgeObjectRelease_n();
  v218 = v242;
  *v242 = v217;
  v218[1] = v213;
  if (v212 >> 10 < v236 >> 10)
  {
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
    goto LABEL_299;
  }
  v219 = v257 >= v211;
  v220 = v238;
  v221 = v239;
  if (v257 >= v211)
  {
    v220 = v210;
    v221 = v208;
  }
  v222 = v241;
  *v241 = v236;
  v223 = v234;
  v222[1] = (unint64_t)v235;
  v222[2] = (unint64_t)v223;
  v224 = v240;
  if (v219)
    v224 = v206;
  v222[3] = (unint64_t)v233;
  v222[4] = v212;
  v222[5] = v224;
  v222[6] = v221;
  v222[7] = v220;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(a1, a2, a3, (void (*)(_OWORD *, uint64_t, _QWORD))AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:));
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.NSAttributesSlice(unint64_t *result)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int v85;
  void (*v86)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  __int128 *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[40];
  _QWORD v136[3];
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE v143[40];
  _BYTE v144[40];
  _OWORD v145[4];
  uint64_t v146;
  _BYTE v147[72];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  _OWORD v163[8];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;

  v2 = *(_OWORD *)(v1 + 176);
  v166 = *(_OWORD *)(v1 + 160);
  v167 = v2;
  v168 = *(_QWORD *)(v1 + 192);
  v3 = *(_OWORD *)(v1 + 112);
  v163[6] = *(_OWORD *)(v1 + 96);
  v163[7] = v3;
  v4 = *(_OWORD *)(v1 + 144);
  v164 = *(_OWORD *)(v1 + 128);
  v165 = v4;
  v5 = *(_OWORD *)(v1 + 48);
  v163[2] = *(_OWORD *)(v1 + 32);
  v163[3] = v5;
  v6 = *(_OWORD *)(v1 + 80);
  v163[4] = *(_OWORD *)(v1 + 64);
  v163[5] = v6;
  v7 = *(_OWORD *)(v1 + 16);
  v8 = *result;
  v9 = *result >> 10;
  v163[0] = *(_OWORD *)v1;
  v163[1] = v7;
  if (*((_QWORD *)&v164 + 1) >> 10 >= v9 || *((_QWORD *)&v166 + 1) >> 10 < v9)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v123 = *(_QWORD *)(v1 + 200);
  v10 = *(_QWORD *)(v123 + 16);
  if (!v10)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v11 = *(_QWORD *)&v163[0];
  v12 = *(_QWORD *)(*(_QWORD *)&v163[0] + 64);
  v13 = *(_QWORD *)(*(_QWORD *)&v163[0] + 80);
  if (v12)
    v14 = *(_QWORD *)(*(_QWORD *)&v163[0] + 80);
  else
    v14 = 0;
  if (v8 < 0x800)
    goto LABEL_131;
  v15 = (v8 >> 11) - 1;
  if (v14 < v15)
    goto LABEL_131;
  v114 = result[1];
  v115 = v8;
  v113 = result[2];
  v16 = result[3];
  v111 = result;
  v112 = v16;
  v110 = v165;
  v109 = v166;
  v17 = *(_QWORD *)(*(_QWORD *)&v163[0] + 72);
  v130 = *(_QWORD *)(*(_QWORD *)&v163[0] + 88);
  v127 = v10;
  v117 = *((_QWORD *)&v164 + 1);
  v118 = *((_QWORD *)&v164 + 1) >> 10;
  v116 = v9;
  v119 = v8 >> 11;
  v133 = v17;
  if (v12 && (uint64_t)(v8 >> 11) <= v13 && *(_WORD *)(v12 + 16))
  {
    v108 = *(_QWORD *)&v163[0];
    v18 = *(unsigned __int8 *)(v12 + 18);
    if (*(_BYTE *)(v12 + 18))
    {
      swift_unknownObjectRetain_n();
      result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v163);
      v19 = v15;
      v20 = v12;
      while (1)
      {
        v23 = *(unsigned __int16 *)(v20 + 16);
        if (!*(_WORD *)(v20 + 16))
          break;
        v24 = *(_QWORD *)(v20 + 40);
        v25 = __OFSUB__(v19, v24);
        v26 = v19 - v24;
        if (v25)
          goto LABEL_127;
        if (__OFADD__(v26, 1))
          goto LABEL_128;
        if (v26 + 1 <= 0)
        {
          v23 = 0;
          goto LABEL_16;
        }
        if ((_DWORD)v23 == 1)
        {
          v19 = v26;
          break;
        }
        v27 = (uint64_t *)(v20 + 64);
        v28 = 1;
        while (1)
        {
          v29 = *v27;
          v27 += 3;
          v19 = v26 - v29;
          if (__OFSUB__(v26, v29))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          if (__OFADD__(v19, 1))
            goto LABEL_124;
          if (v19 + 1 < 1)
            break;
          ++v28;
          v26 = v19;
          if (v23 == v28)
            goto LABEL_15;
        }
        v23 = v28;
        v19 = v26;
LABEL_16:
        v21 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
        v18 = ((-15 << v21) - 1) & v18 | (v23 << v21);
        v22 = *(_QWORD *)(v20 + 24 + 24 * v23);
        swift_unknownObjectRetain();
        result = (unint64_t *)swift_unknownObjectRelease();
        v20 = v22;
        if (!*(_BYTE *)(v22 + 18))
          goto LABEL_33;
      }
LABEL_15:
      if (!v19)
        goto LABEL_16;
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    swift_unknownObjectRetain_n();
    result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v163);
    v19 = v15;
    v22 = v12;
LABEL_33:
    v132 = (uint64_t *)v15;
    v33 = *(unsigned __int16 *)(v22 + 16);
    if (*(_WORD *)(v22 + 16))
    {
      v34 = *(_QWORD *)(v22 + 24);
      v25 = __OFSUB__(v19, v34);
      v35 = v19 - v34;
      v11 = v108;
      v10 = v127;
      if (v25)
      {
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      if (__OFADD__(v35, 1))
      {
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }
      v31 = v22;
      if (v35 + 1 <= 0)
      {
        v33 = 0;
      }
      else
      {
        if ((_DWORD)v33 == 1)
        {
          v19 = v35;
          goto LABEL_46;
        }
        v36 = (uint64_t *)(v22 + 48);
        v37 = 1;
        while (1)
        {
          v38 = *v36;
          v36 += 3;
          v19 = v35 - v38;
          if (__OFSUB__(v35, v38))
            goto LABEL_136;
          if (__OFADD__(v19, 1))
            goto LABEL_137;
          if (v19 + 1 < 1)
            break;
          ++v37;
          v35 = v19;
          if (v33 == v37)
            goto LABEL_46;
        }
        v33 = v37;
        v19 = v35;
      }
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v30 = v18 & 0xFFFFFFFFFFFFF0FFLL | (v33 << 8);
      v15 = (uint64_t)v132;
      goto LABEL_31;
    }
    v31 = v22;
    v11 = v108;
    v10 = v127;
LABEL_46:
    if (v19)
    {
LABEL_146:
      __break(1u);
      return result;
    }
    goto LABEL_47;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v163);
  v30 = specialized Rope._endPath.getter(v12);
  result = (unint64_t *)swift_unknownObjectRelease();
  v31 = 0;
  v19 = 0;
  if (v12)
  {
LABEL_31:
    swift_unknownObjectRetain();
    v32 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v130, v30, v31, v12, v133);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  v32 = 0;
LABEL_49:
  v122 = v15 - v19;
  if (__OFSUB__(v15, v19))
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  if (v130 != *(_QWORD *)(v11 + 88))
  {
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  v39 = v31;
  v126 = v30;
  if (v31)
  {
    v40 = v31 + 24 * ((v30 >> ((4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C)) & 0xF);
    v42 = *(_QWORD *)(v40 + 32);
    v41 = *(_QWORD *)(v40 + 40);
    swift_bridgeObjectRetain();
    result = (unint64_t *)swift_bridgeObjectRetain();
  }
  else
  {
    v43 = *(_QWORD *)(v11 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v30, v43);
    v42 = v44;
    v41 = v45;
    result = (unint64_t *)swift_unknownObjectRelease();
  }
  if (*((uint64_t *)&v163[0] + 1) < v32)
  {
    v131 = (__int128 *)&v141;
    v132 = &v151;
    v104 = v41;
    v105 = (uint64_t *)(v123 + 40);
    v108 = v11;
    v121 = v42;
    v102 = *((_QWORD *)&v163[0] + 1);
LABEL_56:
    v120 = v32;
    v46 = *(_QWORD *)(v11 + 64);
    v47 = *(_QWORD *)(v11 + 88);
    *(_QWORD *)&v148 = v130;
    v48 = v126;
    *((_QWORD *)&v148 + 1) = v126;
    *(_QWORD *)&v149 = v39;
    if (v130 != v47)
    {
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    if (v46)
    {
      v49 = *(unsigned __int8 *)(v46 + 18);
      result = (unint64_t *)swift_unknownObjectRetain();
      v48 = v126;
      if (v126 <= v49)
        goto LABEL_139;
    }
    else if (!v126)
    {
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if (v39)
    {
      v50 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C;
      if (((v48 >> v50) & 0xF) != 0)
      {
        v51 = ((((v48 >> v50) & 0xF) - 1) << v50) | ((-15 << v50) - 1) & v48;
        *((_QWORD *)&v148 + 1) = v51;
LABEL_68:
        v56 = (4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C;
        v126 = v51;
        v106 = v39;
        v57 = *(_QWORD *)(v39 + 24 * ((v51 >> v56) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v58 = 0;
LABEL_72:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v122, v57))
        {
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (v130 != *(_QWORD *)(v11 + 88))
        {
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        v103 = v122 - v57;
        if ((v58 & 1) != 0)
        {
          v59 = *(_QWORD *)(v11 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v126, v59);
          v107 = v60;
          v62 = v61;
          swift_unknownObjectRelease();
        }
        else
        {
          v63 = v106 + 24 * ((v126 >> ((4 * *(_BYTE *)(v106 + 18) + 8) & 0x3C)) & 0xF);
          v62 = *(_QWORD *)(v63 + 32);
          v64 = *(_QWORD *)(v63 + 40);
          swift_bridgeObjectRetain();
          v107 = v64;
          swift_bridgeObjectRetain();
        }
        --v120;
        result = (unint64_t *)swift_bridgeObjectRetain();
        v65 = 0;
        v66 = v105;
        v133 = v62;
        while (1)
        {
          v68 = v65 + 1;
          if (__OFADD__(v65, 1))
            goto LABEL_125;
          v69 = *(v66 - 1);
          v70 = *v66;
          if (*(_QWORD *)(v42 + 16))
          {
            swift_bridgeObjectRetain_n();
            v71 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v70);
            if ((v72 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v42 + 56) + 72 * v71, (uint64_t)&v158);
            }
            else
            {
              v162 = 0;
              v160 = 0u;
              v161 = 0u;
              v158 = 0u;
              v159 = 0u;
            }
            swift_bridgeObjectRelease();
            v62 = v133;
            if (!*(_QWORD *)(v133 + 16))
            {
LABEL_87:
              v157 = 0;
              v155 = 0u;
              v156 = 0u;
              v153 = 0u;
              v154 = 0u;
              goto LABEL_94;
            }
          }
          else
          {
            v162 = 0;
            v160 = 0u;
            v161 = 0u;
            v158 = 0u;
            v159 = 0u;
            swift_bridgeObjectRetain();
            if (!*(_QWORD *)(v62 + 16))
              goto LABEL_87;
          }
          swift_bridgeObjectRetain();
          v73 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v70);
          if ((v74 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v62 + 56) + 72 * v73, (uint64_t)&v153);
          }
          else
          {
            v157 = 0;
            v155 = 0u;
            v156 = 0u;
            v153 = 0u;
            v154 = 0u;
          }
          swift_bridgeObjectRelease();
LABEL_94:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v158, (uint64_t)&v148, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v153, (uint64_t)v132, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!*((_QWORD *)&v149 + 1))
          {
            if (v152)
              goto LABEL_111;
            outlined destroy of Any?((uint64_t)&v148, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v153, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = (unint64_t *)outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_81;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v148, (uint64_t)v147, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v152)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
LABEL_111:
            outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v153, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_112:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v11 = v108;
            goto LABEL_113;
          }
          v75 = *((_OWORD *)v132 + 3);
          v145[2] = *((_OWORD *)v132 + 2);
          v145[3] = v75;
          v146 = v132[8];
          v76 = *((_OWORD *)v132 + 1);
          v145[0] = *(_OWORD *)v132;
          v145[1] = v76;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v147, (uint64_t)v144);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v145, (uint64_t)v143);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v144, (uint64_t)&v139, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v143, (uint64_t)v131, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v140)
          {
            if (!v142)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
LABEL_79:
              v67 = 0;
              goto LABEL_80;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v139, (uint64_t)v136);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v131, (uint64_t)v135);
            v77 = v137;
            v125 = v138;
            v124 = __swift_project_boxed_opaque_existential_1(v136, v137);
            v129 = &v102;
            v78 = *(_QWORD *)(v77 - 8);
            MEMORY[0x1E0C80A78](v124);
            v80 = (char *)&v102 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v135, (uint64_t)&v134);
            v81 = type metadata accessor for Optional();
            v128 = &v102;
            v82 = *(_QWORD *)(v81 - 8);
            MEMORY[0x1E0C80A78](v81);
            v84 = (char *)&v102 - v83;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            v85 = swift_dynamicCast();
            v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
            if (v85)
            {
              v86(v84, 0, 1, v77);
              (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v80, v84, v77);
              v67 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v77);
            }
            else
            {
              v86(v84, 1, 1, v77);
              (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
              v67 = 0;
            }
            v42 = v121;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v135);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
            v10 = v127;
          }
          else
          {
            if (v142)
            {
              outlined destroy of Any?((uint64_t)v131, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_79;
            }
            v67 = 1;
          }
LABEL_80:
          outlined destroy of Any?((uint64_t)v143, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v144, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v145);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
          outlined destroy of Any?((uint64_t)&v148, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v153, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          result = (unint64_t *)outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v67 & 1) == 0)
            goto LABEL_112;
LABEL_81:
          v66 += 2;
          ++v65;
          v62 = v133;
          if (v68 == v10)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = (unint64_t *)swift_bridgeObjectRelease();
            v122 = v103;
            v32 = v120;
            v11 = v108;
            v39 = v106;
            if (v102 < v120)
              goto LABEL_56;
            v87 = v103;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v122 = v87;
            goto LABEL_113;
          }
        }
      }
    }
    v52 = *(unsigned __int8 *)(v46 + 18);
    v53 = (4 * v52 + 8) & 0x3C;
    v54 = (v48 >> v53) & 0xF;
    *(_QWORD *)&v139 = v54;
    if (v52)
    {
      swift_unknownObjectRetain();
      v55 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v46 + 16, v46 + 24, (uint64_t *)&v139, (uint64_t)&v148, v52);
      result = (unint64_t *)swift_unknownObjectRelease();
      if ((v55 & 1) != 0)
      {
        if ((_QWORD)v148 != v130)
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v39 = v149;
        v51 = *((_QWORD *)&v148 + 1);
        v10 = v127;
        if ((_QWORD)v149)
          goto LABEL_68;
        goto LABEL_71;
      }
    }
    else if (v54)
    {
      v51 = ((v54 - 1) << v53) | ((-15 << v53) - 1) & v48;
      *((_QWORD *)&v148 + 1) = v51;
      *(_QWORD *)&v149 = v46;
      v39 = v46;
      if (v46)
        goto LABEL_68;
LABEL_71:
      swift_unknownObjectRetain();
      v126 = v51;
      v57 = specialized Rope._Node.subscript.getter(v51, v46);
      swift_unknownObjectRelease();
      v106 = 0;
      v58 = 1;
      goto LABEL_72;
    }
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_113:
  v88 = *(_OWORD *)(v11 + 32);
  v148 = *(_OWORD *)(v11 + 16);
  v149 = v88;
  v150 = *(_OWORD *)(v11 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v122, v119))
    goto LABEL_134;
  v89 = BigString.UTF8View.index(_:offsetBy:)();
  v91 = v90;
  v93 = v92;
  v95 = v94;
  outlined release of Locale((uint64_t)&v139);
  result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v163);
  v96 = v117;
  if (v118 < v89 >> 10)
    v96 = v89;
  if (v116 < v96 >> 10)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v97 = v118 >= v89 >> 10;
  v98 = v109;
  v99 = v110;
  if (v118 < v89 >> 10)
  {
    v98 = v95;
    v99 = v91;
  }
  v100 = v111;
  *v111 = v96;
  v100[1] = v99;
  v101 = *((_QWORD *)&v110 + 1);
  if (!v97)
    v101 = v93;
  v100[2] = v101;
  v100[3] = v98;
  return result;
}

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.Runs.NSAttributesSlice@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 136);
  v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.Runs.NSAttributesSlice@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 168);
  v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice(unint64_t **a1, unint64_t *a2))(void **a1)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = (unint64_t *)malloc(0xB0uLL);
  *a1 = v4;
  AttributedString.Runs.NSAttributesSlice.subscript.getter((uint64_t)v4, v4 + 2, a2);
  v5 = *v4;
  v4[10] = *v4;
  v6 = v4[1];
  v4[20] = v5;
  v4[21] = v6;
  v4[11] = v6;
  v7 = *((_OWORD *)v4 + 2);
  v8 = *((_OWORD *)v4 + 3);
  *((_OWORD *)v4 + 6) = *((_OWORD *)v4 + 1);
  *((_OWORD *)v4 + 7) = v7;
  v9 = *((_OWORD *)v4 + 4);
  *((_OWORD *)v4 + 8) = v8;
  *((_OWORD *)v4 + 9) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

__int128 *protocol witness for Collection.subscript.getter in conformance AttributedString.Runs.NSAttributesSlice@<X0>(__int128 *result@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = *result;
  v4 = result[1];
  v5 = result[2];
  v6 = result[3];
  v7 = v2[11];
  v22 = v2[10];
  v23 = v7;
  v24 = v2[12];
  v8 = v2[7];
  v19[6] = v2[6];
  v19[7] = v8;
  v9 = v2[9];
  v20 = v2[8];
  v21 = v9;
  v10 = v2[3];
  v19[2] = v2[2];
  v19[3] = v10;
  v11 = v2[5];
  v19[4] = v2[4];
  v19[5] = v11;
  v12 = v2[1];
  v19[0] = *v2;
  v19[1] = v12;
  if (*((_QWORD *)&v22 + 1) >> 10 < *((_QWORD *)&v20 + 1) >> 10)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*((_QWORD *)&v20 + 1) >> 10 > (unint64_t)v3 >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*((_QWORD *)&v22 + 1) >> 10 >= (unint64_t)v5 >> 10)
  {
    v13 = v2[11];
    a2[14] = v2[10];
    a2[15] = v13;
    a2[16] = v2[12];
    v14 = v2[7];
    a2[10] = v2[6];
    a2[11] = v14;
    v15 = v2[9];
    a2[12] = v2[8];
    a2[13] = v15;
    v16 = v2[3];
    a2[6] = v2[2];
    a2[7] = v16;
    v17 = v2[5];
    a2[8] = v2[4];
    a2[9] = v17;
    v18 = v2[1];
    a2[4] = *v2;
    a2[5] = v18;
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
    return (__int128 *)outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v19);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.Runs.NSAttributesSlice@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[80];

  v2 = v1[9];
  v3 = v1[11];
  *(_OWORD *)&v30[32] = v1[10];
  *(_OWORD *)&v30[48] = v3;
  v4 = v1[11];
  *(_OWORD *)&v30[64] = v1[12];
  v5 = v1[5];
  v6 = v1[7];
  v28 = v1[6];
  v7 = v28;
  v29 = v6;
  v8 = v1[7];
  v9 = v1[9];
  *(_OWORD *)v30 = v1[8];
  v10 = *(_OWORD *)v30;
  *(_OWORD *)&v30[16] = v9;
  v11 = v1[1];
  v12 = v1[3];
  v24 = v1[2];
  v13 = v24;
  v25 = v12;
  v14 = v1[3];
  v15 = v1[5];
  v26 = v1[4];
  v16 = v26;
  v27 = v15;
  v17 = v1[1];
  v23[0] = *v1;
  v18 = v23[0];
  v23[1] = v17;
  a1[10] = *(_OWORD *)&v30[32];
  a1[11] = v4;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  v19 = v1[12];
  *a1 = v18;
  a1[1] = v11;
  v20 = *(_OWORD *)&v30[8];
  a1[12] = v19;
  a1[13] = v20;
  v21 = *(_OWORD *)&v30[40];
  a1[14] = *(_OWORD *)&v30[24];
  a1[15] = v21;
  a1[16] = *(_OWORD *)&v30[56];
  return outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v23);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString.Runs.NSAttributesSlice()
{
  uint64_t v0;

  return (*(_QWORD *)(v0 + 168) ^ *(_QWORD *)(v0 + 136)) < 0x400uLL;
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  return specialized BidirectionalCollection.index(_:offsetBy:)(*a1, a1[1], a1[2], a1[3], a2, a3);
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  return specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a1[1], a1[2], a1[3], a2, *a3, a4);
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.Runs.NSAttributesSlice(uint64_t a1, unint64_t *a2)
{
  return specialized BidirectionalCollection._distance(from:to:)(*(_QWORD *)a1, *(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *a2);
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString.Runs.NSAttributesSlice(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(a1, a2, a3, (void (*)(_OWORD *, uint64_t, _QWORD))AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice(_OWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, _QWORD))
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v21[14];
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v6 = *(_OWORD *)(v4 + 144);
  v7 = *(_OWORD *)(v4 + 176);
  v32 = *(_OWORD *)(v4 + 160);
  v33 = v7;
  v8 = *(_OWORD *)(v4 + 80);
  v9 = *(_OWORD *)(v4 + 112);
  v28 = *(_OWORD *)(v4 + 96);
  v29 = v9;
  v10 = *(_OWORD *)(v4 + 112);
  v11 = *(_OWORD *)(v4 + 144);
  v30 = *(_OWORD *)(v4 + 128);
  v31 = v11;
  v12 = *(_OWORD *)(v4 + 16);
  v13 = *(_OWORD *)(v4 + 48);
  v24 = *(_OWORD *)(v4 + 32);
  v25 = v13;
  v14 = *(_OWORD *)(v4 + 48);
  v15 = *(_OWORD *)(v4 + 80);
  v26 = *(_OWORD *)(v4 + 64);
  v27 = v15;
  v16 = *(_OWORD *)(v4 + 16);
  v23[0] = *(_OWORD *)v4;
  v23[1] = v16;
  v17 = *(_OWORD *)(v4 + 176);
  v21[12] = v32;
  v21[13] = v17;
  v21[8] = v28;
  v21[9] = v10;
  v21[10] = v30;
  v21[11] = v6;
  v21[4] = v24;
  v21[5] = v14;
  v21[6] = v26;
  v21[7] = v8;
  v18 = *(_QWORD *)(v4 + 200);
  v34 = *(_QWORD *)(v4 + 192);
  v22 = *(_QWORD *)(v4 + 192);
  v21[2] = v23[0];
  v21[3] = v12;
  v19 = a1[1];
  v21[0] = *a1;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  a4(v21, v18, MEMORY[0x1E0DEE9D8]);
  return outlined release of AttributedString.Runs((uint64_t)v23);
}

unint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.NSAttributesSlice(unint64_t *result)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  __int128 *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD v120[3];
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __int128 v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  __int128 *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE v155[40];
  _QWORD v156[3];
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE v163[40];
  _BYTE v164[40];
  _OWORD v165[4];
  uint64_t v166;
  _BYTE v167[72];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  _OWORD v183[6];
  _OWORD v184[4];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  unint64_t v193;

  v2 = *(_OWORD *)(v1 + 176);
  v191 = *(_OWORD *)(v1 + 160);
  v192 = v2;
  v193 = *(_QWORD *)(v1 + 192);
  v3 = *(_OWORD *)(v1 + 112);
  v187 = *(_OWORD *)(v1 + 96);
  v188 = v3;
  v4 = *(_OWORD *)(v1 + 144);
  v189 = *(_OWORD *)(v1 + 128);
  v190 = v4;
  v5 = *(_OWORD *)(v1 + 48);
  v184[2] = *(_OWORD *)(v1 + 32);
  v184[3] = v5;
  v6 = *(_OWORD *)(v1 + 80);
  v185 = *(_OWORD *)(v1 + 64);
  v186 = v6;
  v7 = *(_OWORD *)(v1 + 16);
  v8 = *result;
  v9 = *result >> 10;
  v184[0] = *(_OWORD *)v1;
  v184[1] = v7;
  if (v9 < *((_QWORD *)&v189 + 1) >> 10 || v9 >= *((_QWORD *)&v191 + 1) >> 10)
    goto LABEL_147;
  v10 = *(_QWORD *)(v1 + 200);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  v12 = *(_QWORD *)&v184[0];
  v13 = *(_QWORD *)(*(_QWORD *)&v184[0] + 64);
  v14 = *(_QWORD *)(*(_QWORD *)&v184[0] + 80);
  v15 = v8 >> 11;
  if (v13)
    v16 = *(_QWORD *)(*(_QWORD *)&v184[0] + 80);
  else
    v16 = 0;
  if (v16 < v15)
    goto LABEL_149;
  v18 = (_QWORD *)result[1];
  v17 = (__int128 *)result[2];
  v19 = (_QWORD *)result[3];
  v20 = *(_QWORD *)(*(_QWORD *)&v184[0] + 72);
  v21 = *(_QWORD *)(*(_QWORD *)&v184[0] + 88);
  v143 = *(_QWORD *)&v184[0];
  v144 = v21;
  v147 = v11;
  v127 = result;
  v128 = *((_QWORD *)&v191 + 1);
  v129 = *((_QWORD *)&v191 + 1) >> 10;
  v130 = v9;
  v126 = v192;
  v125 = v193;
  v138 = v10;
  v150 = v19;
  v151 = v17;
  v152 = (uint64_t *)(v8 >> 11);
  v153 = v20;
  if (v13 && v15 < v14 && *(_WORD *)(v13 + 16))
  {
    v149 = v18;
    v22 = *(unsigned __int8 *)(v13 + 18);
    if (*(_BYTE *)(v13 + 18))
    {
      swift_unknownObjectRetain_n();
      result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
      v23 = v13;
      while (1)
      {
        v26 = *(unsigned __int16 *)(v23 + 16);
        if (!*(_WORD *)(v23 + 16))
          break;
        v27 = *(_QWORD *)(v23 + 40);
        v28 = __OFSUB__(v15, v27);
        v29 = v15 - v27;
        if (v28)
          goto LABEL_141;
        if (__OFADD__(v29, 1))
          goto LABEL_142;
        if (v29 + 1 <= 0)
        {
          v26 = 0;
          goto LABEL_15;
        }
        if ((_DWORD)v26 == 1)
        {
          v15 = v29;
          break;
        }
        v30 = (uint64_t *)(v23 + 64);
        v31 = 1;
        while (1)
        {
          v32 = *v30;
          v30 += 3;
          v15 = v29 - v32;
          if (__OFSUB__(v29, v32))
            goto LABEL_138;
          if (__OFADD__(v15, 1))
          {
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }
          if (v15 + 1 < 1)
            break;
          ++v31;
          v29 = v15;
          if (v26 == v31)
            goto LABEL_14;
        }
        v26 = v31;
        v15 = v29;
LABEL_15:
        v24 = (4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C;
        v22 = ((-15 << v24) - 1) & v22 | (v26 << v24);
        v25 = *(_QWORD *)(v23 + 24 + 24 * v26);
        swift_unknownObjectRetain();
        result = (unint64_t *)swift_unknownObjectRelease();
        v23 = v25;
        if (!*(_BYTE *)(v25 + 18))
          goto LABEL_32;
      }
LABEL_14:
      if (!v15)
        goto LABEL_15;
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    swift_unknownObjectRetain_n();
    result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
    v25 = v13;
LABEL_32:
    v35 = *(unsigned __int16 *)(v25 + 16);
    v34 = v25;
    if (!*(_WORD *)(v25 + 16))
      goto LABEL_45;
    v36 = *(_QWORD *)(v25 + 24);
    v28 = __OFSUB__(v15, v36);
    v37 = v15 - v36;
    if (v28)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if (__OFADD__(v37, 1))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if (v37 + 1 <= 0)
    {
      v35 = 0;
    }
    else
    {
      if ((_DWORD)v35 == 1)
      {
        v15 = v37;
LABEL_45:
        if (v15)
        {
LABEL_162:
          __break(1u);
          return result;
        }
        goto LABEL_46;
      }
      v38 = (uint64_t *)(v25 + 48);
      v39 = 1;
      while (1)
      {
        v40 = *v38;
        v38 += 3;
        v15 = v37 - v40;
        if (__OFSUB__(v37, v40))
          goto LABEL_158;
        if (__OFADD__(v15, 1))
          goto LABEL_159;
        if (v15 + 1 < 1)
          break;
        ++v39;
        v37 = v15;
        if (v35 == v39)
          goto LABEL_45;
      }
      v35 = v39;
      v15 = v37;
    }
LABEL_46:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v33 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
    v12 = v143;
    goto LABEL_30;
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v184);
  v33 = specialized Rope._endPath.getter(v13);
  result = (unint64_t *)swift_unknownObjectRelease();
  v34 = 0;
  v15 = 0;
  if (v13)
  {
LABEL_30:
    swift_unknownObjectRetain();
    v153 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v144, v33, v34, v13, v153);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
  v153 = 0;
LABEL_48:
  v142 = (char *)v152 - v15;
  if (__OFSUB__(v152, v15))
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v41 = *(_OWORD *)(v12 + 32);
  v183[3] = *(_OWORD *)(v12 + 16);
  v183[4] = v41;
  v183[5] = *(_OWORD *)(v12 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0, v15))
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  v42 = BigString.UTF8View.index(_:offsetBy:)();
  v44 = v43;
  v46 = v45;
  v122 = v47;
  result = (unint64_t *)outlined release of Locale((uint64_t)v183);
  v135 = *((_QWORD *)&v185 + 1);
  if (v153 >= *((uint64_t *)&v185 + 1))
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  if (v144 != *(_QWORD *)(v12 + 88))
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v120[1] = v46;
  v120[2] = v44;
  v124 = v42;
  v48 = *(uint64_t **)(v12 + 64);
  if (v34)
  {
    v49 = v34 + 24 * ((v33 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF);
    v50 = *(_QWORD *)(v49 + 32);
    v51 = *(_QWORD *)(v49 + 40);
    swift_bridgeObjectRetain();
    v123 = v51;
    result = (unint64_t *)swift_bridgeObjectRetain();
    v52 = v144;
    v53 = v144;
    v54 = v138;
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v33, (uint64_t)v48);
    v50 = v55;
    v123 = v56;
    result = (unint64_t *)swift_unknownObjectRelease();
    v48 = *(uint64_t **)(v12 + 64);
    v53 = *(_QWORD *)(v12 + 88);
    v54 = v138;
    v52 = v144;
  }
  v121 = (__int128 *)(v12 + 16);
  v140 = v153 + 1;
  *(_QWORD *)&v168 = v52;
  *((_QWORD *)&v168 + 1) = v33;
  v151 = (__int128 *)&v161;
  v152 = &v171;
  *(_QWORD *)&v169 = v34;
  v134 = (uint64_t *)(v54 + 40);
  v148 = v50;
LABEL_56:
  if (v52 != v53)
    goto LABEL_143;
  v137 = v53;
  v141 = v34;
  if (v34)
  {
    v57 = *(_QWORD *)(v34 + 24 * ((v33 >> ((4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v57 = specialized Rope._Node.subscript.getter(v33, (uint64_t)v48);
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  v58 = &v142[v57];
  if (__OFADD__(v142, v57))
    goto LABEL_144;
  if (v48)
  {
    v59 = ((-15 << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v48 + 18) | ((unint64_t)*((unsigned __int16 *)v48 + 8) << ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C));
    result = (unint64_t *)swift_unknownObjectRetain();
  }
  else
  {
    v59 = 0;
  }
  v60 = v147;
  if (v33 >= v59)
    goto LABEL_145;
  if (v141)
  {
    v61 = (4 * *(_BYTE *)(v141 + 18) + 8) & 0x3C;
    v62 = ((v33 >> v61) & 0xF) + 1;
    if (v62 < *(unsigned __int16 *)(v141 + 16))
    {
      v139 = (v62 << v61) | ((-15 << v61) - 1) & v33;
      result = (unint64_t *)swift_unknownObjectRelease_n();
LABEL_71:
      v48 = (uint64_t *)v169;
      goto LABEL_79;
    }
  }
  v63 = *((unsigned __int8 *)v48 + 18);
  v64 = (4 * v63 + 8) & 0x3C;
  v65 = (v33 >> v64) & 0xF;
  *(_QWORD *)&v159 = v65;
  if (v63)
  {
    swift_unknownObjectRetain();
    v66 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v48 + 3), (uint64_t *)&v159, (uint64_t)&v168, (uint64_t)v48, v63);
    result = (unint64_t *)swift_unknownObjectRelease();
    v12 = v143;
    if ((v66 & 1) != 0)
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v139 = *((_QWORD *)&v168 + 1);
      goto LABEL_71;
    }
  }
  else
  {
    v67 = v65 + 1;
    if (v65 + 1 < (unint64_t)*((unsigned __int16 *)v48 + 8))
    {
      result = (unint64_t *)swift_unknownObjectRelease_n();
      v139 = (v67 << v64) | ((-15 << v64) - 1) & v33;
      v12 = v143;
      goto LABEL_79;
    }
    v12 = v143;
  }
  if (v48)
  {
    v68 = *((unsigned __int8 *)v48 + 18);
    v69 = *((unsigned __int16 *)v48 + 8);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    v70 = (4 * v68 + 8) & 0x3C;
    v71 = ((-15 << v70) - 1) & v68;
    v72 = v69 << v70;
    v12 = v143;
    v139 = v71 | v72;
  }
  else
  {
    v139 = 0;
  }
  v48 = 0;
  *(_QWORD *)&v168 = v137;
LABEL_79:
  v73 = v148;
  if (v140 != v135)
  {
    if ((_QWORD)v168 != *(_QWORD *)(v12 + 88))
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v144 = v168;
    v132 = v58;
    v133 = v33;
    v131 = (uint64_t)v48;
    if (v48)
    {
      v74 = (char *)&v48[3 * ((v139 >> ((4 * *((_BYTE *)v48 + 18) + 8) & 0x3C)) & 0xF)];
      v75 = *((_QWORD *)v74 + 4);
      v76 = *((_QWORD *)v74 + 5);
      swift_bridgeObjectRetain();
      v136 = v76;
      swift_bridgeObjectRetain();
    }
    else
    {
      v77 = *(_QWORD *)(v12 + 64);
      swift_unknownObjectRetain();
      v73 = v148;
      specialized Rope._Node.subscript.getter(v139, v77);
      v136 = v78;
      v75 = v79;
      swift_unknownObjectRelease();
    }
    result = (unint64_t *)swift_bridgeObjectRetain();
    v80 = 0;
    v81 = v134;
    v153 = v75;
    while (1)
    {
      v83 = v80 + 1;
      if (__OFADD__(v80, 1))
      {
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
      v85 = *(v81 - 1);
      v84 = *v81;
      if (*(_QWORD *)(v73 + 16))
      {
        swift_bridgeObjectRetain_n();
        v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
        if ((v87 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v73 + 56) + 72 * v86, (uint64_t)&v178);
        }
        else
        {
          v182 = 0;
          v180 = 0u;
          v181 = 0u;
          v178 = 0u;
          v179 = 0u;
        }
        swift_bridgeObjectRelease();
        v75 = v153;
        if (!*(_QWORD *)(v153 + 16))
        {
LABEL_94:
          v177 = 0;
          v175 = 0u;
          v176 = 0u;
          v173 = 0u;
          v174 = 0u;
          goto LABEL_101;
        }
      }
      else
      {
        v182 = 0;
        v180 = 0u;
        v181 = 0u;
        v178 = 0u;
        v179 = 0u;
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v75 + 16))
          goto LABEL_94;
      }
      swift_bridgeObjectRetain();
      v88 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
      if ((v89 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v75 + 56) + 72 * v88, (uint64_t)&v173);
      }
      else
      {
        v177 = 0;
        v175 = 0u;
        v176 = 0u;
        v173 = 0u;
        v174 = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRelease();
      v48 = (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v178, (uint64_t)&v168, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v173, (uint64_t)v152, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((_QWORD *)&v169 + 1))
      {
        if (v172)
          goto LABEL_118;
        outlined destroy of Any?((uint64_t)&v168, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v173, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = (unint64_t *)outlined destroy of Any?((uint64_t)&v178, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_88;
      }
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v168, (uint64_t)v167, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v172)
        goto LABEL_117;
      v90 = *((_OWORD *)v152 + 3);
      v165[2] = *((_OWORD *)v152 + 2);
      v165[3] = v90;
      v166 = v152[8];
      v91 = *((_OWORD *)v152 + 1);
      v165[0] = *(_OWORD *)v152;
      v165[1] = v91;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v167, (uint64_t)v164);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v165, (uint64_t)v163);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v164, (uint64_t)&v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v163, (uint64_t)v151, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v160)
      {
        if (!v162)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v159);
LABEL_86:
          v82 = 0;
          goto LABEL_87;
        }
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v159, (uint64_t)v156);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v151, (uint64_t)v155);
        v92 = v157;
        v146 = v158;
        v145 = __swift_project_boxed_opaque_existential_1(v156, v157);
        v150 = v120;
        v93 = *(_QWORD *)(v92 - 8);
        MEMORY[0x1E0C80A78](v145);
        v95 = (char *)v120 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v155, (uint64_t)&v154);
        v96 = type metadata accessor for Optional();
        v149 = v120;
        v97 = *(_QWORD *)(v96 - 8);
        MEMORY[0x1E0C80A78](v96);
        v99 = (char *)v120 - v98;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v100 = swift_dynamicCast();
        v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
        if (v100)
        {
          v101(v99, 0, 1, v92);
          (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v95, v99, v92);
          v82 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v92);
        }
        else
        {
          v101(v99, 1, 1, v92);
          (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
          v82 = 0;
        }
        v60 = v147;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
        v73 = v148;
      }
      else
      {
        if (v162)
        {
          outlined destroy of Any?((uint64_t)v151, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_86;
        }
        v82 = 1;
      }
LABEL_87:
      outlined destroy of Any?((uint64_t)v163, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v164, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v165);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v167);
      outlined destroy of Any?((uint64_t)&v168, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v173, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = (unint64_t *)outlined destroy of Any?((uint64_t)&v178, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v82 & 1) == 0)
        goto LABEL_119;
LABEL_88:
      v81 += 2;
      ++v80;
      v75 = v153;
      if (v83 == v60)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        v12 = v143;
        v52 = v144;
        v48 = *(uint64_t **)(v143 + 64);
        v53 = *(_QWORD *)(v143 + 88);
        v142 = v132;
        *(_QWORD *)&v168 = v144;
        v33 = v139;
        *((_QWORD *)&v168 + 1) = v139;
        v34 = v131;
        *(_QWORD *)&v169 = v131;
        v28 = __OFADD__(v140++, 1);
        if (!v28)
          goto LABEL_56;
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v167);
LABEL_118:
        outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v173, v48);
        outlined destroy of Any?((uint64_t)&v178, v48);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (unint64_t *)swift_bridgeObjectRelease();
        v12 = v143;
        v33 = v133;
        goto LABEL_120;
      }
    }
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_120:
  v102 = v124;
  if (v137 != *(_QWORD *)(v12 + 88))
    goto LABEL_154;
  if (v141)
  {
    v103 = *(_QWORD *)(v141 + 24 * ((v33 >> ((4 * *(_BYTE *)(v141 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v104 = *(_QWORD *)(v12 + 64);
    swift_unknownObjectRetain();
    v103 = specialized Rope._Node.subscript.getter(v33, v104);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  v105 = &v142[v103];
  if (__OFADD__(v142, v103))
    goto LABEL_155;
  v106 = v121[1];
  v168 = *v121;
  v169 = v106;
  v170 = v121[2];
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v105, v102 >> 11))
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  v107 = BigString.UTF8View.index(_:offsetBy:)();
  v109 = v108;
  v111 = v110;
  v113 = v112;
  outlined release of Locale((uint64_t)&v159);
  result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v184);
  v114 = v128;
  if (v129 >= v107 >> 10)
    v114 = v107;
  if (v130 > v114 >> 10)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  v115 = v129 >= v107 >> 10;
  v116 = v125;
  v117 = v126;
  if (v129 >= v107 >> 10)
  {
    v116 = v113;
    v117 = v109;
  }
  v118 = v127;
  *v127 = v114;
  v118[1] = v117;
  v119 = *((_QWORD *)&v126 + 1);
  if (v115)
    v119 = v111;
  v118[2] = v119;
  v118[3] = v116;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.NSAttributesSlice@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v2 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v2;
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 144);
  v8 = *(_QWORD *)(v1 + 152);
  v9 = *(_QWORD *)(v1 + 192);
  v10 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = v8;
  result = *(__n128 *)(v1 + 160);
  v12 = *(_OWORD *)(v1 + 176);
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v12;
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 200) = v10;
  *(_QWORD *)(a1 + 208) = v6;
  *(_QWORD *)(a1 + 216) = v7;
  *(_QWORD *)(a1 + 224) = v8;
  *(_QWORD *)(a1 + 232) = result.n128_u64[0];
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AttributedString.Runs.NSAttributesSlice()
{
  uint64_t v0;

  return specialized BidirectionalCollection._distance(from:to:)(*(_QWORD *)(v0 + 136), *(_QWORD **)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.NSAttributesSlice()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[13];

  v1 = v0[11];
  v9[10] = v0[10];
  v9[11] = v1;
  v9[12] = v0[12];
  v2 = v0[7];
  v9[6] = v0[6];
  v9[7] = v2;
  v3 = v0[9];
  v9[8] = v0[8];
  v9[9] = v3;
  v4 = v0[3];
  v9[2] = v0[2];
  v9[3] = v4;
  v5 = v0[5];
  v9[4] = v0[4];
  v9[5] = v5;
  v6 = v0[1];
  v9[0] = *v0;
  v9[1] = v6;
  v7 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v9);
  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)v9);
  return v7;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 v9;
  int64_t v10;
  uint64_t v12;
  void **v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  uint64_t v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v4 = v2[11];
  v38 = v2[10];
  v39 = v4;
  v40 = *((_QWORD *)v2 + 24);
  v5 = v2[7];
  v34 = v2[6];
  v35 = v5;
  v6 = v2[9];
  v36 = v2[8];
  v37 = v6;
  v7 = v2[3];
  v30 = v2[2];
  v31 = v7;
  v8 = v2[5];
  v32 = v2[4];
  v33 = v8;
  v9 = (__n128)v2[1];
  v28 = *v2;
  v29 = v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    outlined retain of AttributedString.Runs((uint64_t)&v28);
    v27 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v12 = v27;
    v13 = (void **)(a1 + 32);
    do
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v13);
      v16 = v15;
      v18 = *(_QWORD *)(v27 + 16);
      v17 = *(_QWORD *)(v27 + 24);
      if (v18 >= v17 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      *(_QWORD *)(v27 + 16) = v18 + 1;
      v19 = v27 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v16;
      ++v13;
      --v10;
    }
    while (v10);
  }
  else
  {
    outlined retain of AttributedString.Runs((uint64_t)&v28);
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v20 = v39;
  *(_OWORD *)(a2 + 160) = v38;
  *(_OWORD *)(a2 + 176) = v20;
  v21 = v40;
  v22 = v35;
  *(_OWORD *)(a2 + 96) = v34;
  *(_OWORD *)(a2 + 112) = v22;
  v23 = v37;
  *(_OWORD *)(a2 + 128) = v36;
  *(_OWORD *)(a2 + 144) = v23;
  v24 = v31;
  *(_OWORD *)(a2 + 32) = v30;
  *(_OWORD *)(a2 + 48) = v24;
  v25 = v33;
  *(_OWORD *)(a2 + 64) = v32;
  *(_OWORD *)(a2 + 80) = v25;
  result = v29;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 192) = v21;
  *(_QWORD *)(a2 + 200) = v12;
  return result;
}

BOOL specialized Collection<>._containsScalarConstraint.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BOOL8 result;
  BOOL v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = v1 - 1;
  v3 = (uint64_t *)(a1 + 40);
  do
  {
    v4 = *v3;
    v3 += 2;
    result = v4 != 0;
    if (v4)
      v6 = 1;
    else
      v6 = v2 == 0;
    --v2;
  }
  while (!v6);
  return result;
}

uint64_t specialized Rope.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t specialized Rope.formIndex(before:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_QWORD *)result != a5)
    goto LABEL_10;
  v6 = result;
  v7 = *(_QWORD *)(result + 8);
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 18) < v7)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (!v7)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
LABEL_4:
  v8 = *(_QWORD *)(result + 16);
  if (!v8 || (result = specialized closure #1 in Rope.formIndex(before:)(v8 + 16, result), (result & 1) == 0))
  {
    swift_unknownObjectRetain();
    v9 = specialized Rope._Node.formPredecessor(of:)(v6, a2);
    result = swift_unknownObjectRelease();
    if ((v9 & 1) == 0)
      goto LABEL_11;
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AnyHashable));
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t specialized Rope._Node.formPredecessor(of:)(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a2 + 18);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (4 * v4 + 8) & 0x3C;
  v7 = (v5 >> v6) & 0xF;
  v10 = v7;
  if (v4)
  {
    swift_unknownObjectRetain();
    v8 = specialized closure #1 in Rope._Node.formPredecessor(of:)(a2 + 16, a2 + 24, &v10, a1, v4);
    swift_unknownObjectRelease();
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 8) = ((v7 - 1) << v6) | ((-15 << v6) - 1) & v5;
    *(_QWORD *)(a1 + 16) = a2;
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t specialized closure #1 in Rope._Node.formPredecessor(of:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v9 = *a3;
  if (*a3 < *(unsigned __int16 *)result)
  {
    v10 = (uint64_t *)(a2 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    swift_unknownObjectRetain();
    LOBYTE(v12) = specialized Rope._Node.formPredecessor(of:)(a4, v11, v12, v13);
    result = swift_unknownObjectRelease();
    if ((v12 & 1) != 0)
      return 1;
    v9 = *a3;
  }
  v14 = v9 - 1;
  if (v9 < 1)
    return 0;
  *a3 = v14;
  v15 = *(_QWORD *)(a4 + 8) & ((-15 << ((4 * a5 + 8) & 0x3C)) - 1) | (v14 << ((4 * a5 + 8) & 0x3C));
  *(_QWORD *)(a4 + 8) = v15;
  v16 = *(_QWORD *)(a2 + 24 * *a3);
  if (*(_WORD *)(v16 + 16))
  {
    v17 = *(unsigned __int16 *)(v16 + 16) - 1;
    v18 = *(unsigned __int8 *)(v16 + 18);
    *(_QWORD *)(a4 + 8) = ((-15 << ((4 * v18 + 8) & 0x3C)) - 1) & v15 | (v17 << ((4 * v18 + 8) & 0x3C));
    if (v18)
    {
      swift_unknownObjectRetain();
      v19 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v16 + 24, v17, (uint64_t *)(a4 + 8));
      swift_unknownObjectRelease();
      v16 = v19;
    }
    *(_QWORD *)(a4 + 16) = v16;
    return 1;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  char v3;
  size_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  unint64_t v78;
  int64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  Swift::Int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  _QWORD v92[2];
  int64_t v93;
  unint64_t *v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  _QWORD *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;

  v99 = a2;
  v2 = isStackAllocationSafe;
  v111 = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v93 = (unint64_t)((1 << v3) + 63) >> 6;
  v4 = 8 * v93;
  v100 = (_QWORD *)isStackAllocationSafe;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v94 = (unint64_t *)swift_slowAlloc();
      bzero(v94, v4);
      v97 = 0;
      v26 = 0;
      v27 = *(_QWORD *)(v2 + 64);
      v95 = v2 + 64;
      v28 = 1 << *(_BYTE *)(v2 + 32);
      if (v28 < 64)
        v29 = ~(-1 << v28);
      else
        v29 = -1;
      v30 = v29 & v27;
      v96 = (unint64_t)(v28 + 63) >> 6;
      v98 = &v102;
      while (1)
      {
        if (v30)
        {
          v31 = __clz(__rbit64(v30));
          v30 &= v30 - 1;
          v32 = v31 | (v26 << 6);
          v12 = v100;
        }
        else
        {
          v33 = v26 + 1;
          if (__OFADD__(v26, 1))
            goto LABEL_159;
          v12 = v100;
          if (v33 >= v96)
            goto LABEL_86;
          v34 = *(_QWORD *)(v95 + 8 * v33);
          ++v26;
          if (!v34)
          {
            v26 = v33 + 1;
            if (v33 + 1 >= v96)
              goto LABEL_86;
            v34 = *(_QWORD *)(v95 + 8 * v26);
            if (!v34)
            {
              v26 = v33 + 2;
              if (v33 + 2 >= v96)
                goto LABEL_86;
              v34 = *(_QWORD *)(v95 + 8 * v26);
              if (!v34)
              {
                v35 = v33 + 3;
                if (v35 >= v96)
                  goto LABEL_86;
                v34 = *(_QWORD *)(v95 + 8 * v35);
                if (!v34)
                {
                  while (1)
                  {
                    v26 = v35 + 1;
                    if (__OFADD__(v35, 1))
                      goto LABEL_162;
                    if (v26 >= v96)
                      break;
                    v34 = *(_QWORD *)(v95 + 8 * v26);
                    ++v35;
                    if (v34)
                      goto LABEL_66;
                  }
LABEL_86:
                  if (!v97)
                  {
                    v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
                    goto LABEL_152;
                  }
                  if (v97 == v12[2])
                  {
                    swift_retain();
                    goto LABEL_152;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  v68 = static _DictionaryStorage.allocate(capacity:)();
                  v69 = 0;
                  v70 = *v94;
                  v71 = v68 + 64;
                  while (1)
                  {
                    if (v70)
                    {
                      v75 = __clz(__rbit64(v70));
                      v70 &= v70 - 1;
                      v76 = v75 | (v69 << 6);
                    }
                    else
                    {
                      v77 = v69 + 1;
                      if (__OFADD__(v69, 1))
                        goto LABEL_163;
                      if (v77 >= v93)
                        goto LABEL_151;
                      v78 = v94[v77];
                      ++v69;
                      if (!v78)
                      {
                        v69 = v77 + 1;
                        if (v77 + 1 >= v93)
                          goto LABEL_151;
                        v78 = v94[v69];
                        if (!v78)
                        {
                          v69 = v77 + 2;
                          if (v77 + 2 >= v93)
                            goto LABEL_151;
                          v78 = v94[v69];
                          if (!v78)
                          {
                            v69 = v77 + 3;
                            if (v77 + 3 >= v93)
                              goto LABEL_151;
                            v78 = v94[v69];
                            if (!v78)
                            {
                              v79 = v77 + 4;
                              if (v79 >= v93)
                                goto LABEL_151;
                              v78 = v94[v79];
                              if (!v78)
                              {
                                while (1)
                                {
                                  v69 = v79 + 1;
                                  if (__OFADD__(v79, 1))
                                    goto LABEL_165;
                                  if (v69 >= v93)
                                    break;
                                  v78 = v94[v69];
                                  ++v79;
                                  if (v78)
                                    goto LABEL_141;
                                }
LABEL_151:
                                v12 = (_QWORD *)v68;
LABEL_152:
                                MEMORY[0x186DA9E78](v94, -1, -1);
                                goto LABEL_153;
                              }
                              v69 = v79;
                            }
                          }
                        }
                      }
LABEL_141:
                      v70 = (v78 - 1) & v78;
                      v76 = __clz(__rbit64(v78)) + (v69 << 6);
                    }
                    v80 = (uint64_t *)(v12[6] + 16 * v76);
                    v82 = *v80;
                    v81 = v80[1];
                    outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v76, (uint64_t)&v101);
                    v108 = v103;
                    v109 = v104;
                    v110 = v105;
                    v106 = v101;
                    v107 = v102;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    v83 = Hasher._finalize()();
                    v84 = -1 << *(_BYTE *)(v68 + 32);
                    v85 = v83 & ~v84;
                    v86 = v85 >> 6;
                    if (((-1 << v85) & ~*(_QWORD *)(v71 + 8 * (v85 >> 6))) != 0)
                    {
                      v72 = __clz(__rbit64((-1 << v85) & ~*(_QWORD *)(v71 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      v87 = 0;
                      v88 = (unint64_t)(63 - v84) >> 6;
                      do
                      {
                        if (++v86 == v88 && (v87 & 1) != 0)
                          goto LABEL_158;
                        v89 = v86 == v88;
                        if (v86 == v88)
                          v86 = 0;
                        v87 |= v89;
                        v90 = *(_QWORD *)(v71 + 8 * v86);
                      }
                      while (v90 == -1);
                      v72 = __clz(__rbit64(~v90)) + (v86 << 6);
                    }
                    *(_QWORD *)(v71 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
                    v73 = (_QWORD *)(*(_QWORD *)(v68 + 48) + 16 * v72);
                    *v73 = v82;
                    v73[1] = v81;
                    v74 = *(_QWORD *)(v68 + 56) + 72 * v72;
                    *(_OWORD *)(v74 + 16) = v107;
                    *(_OWORD *)(v74 + 32) = v108;
                    *(_OWORD *)(v74 + 48) = v109;
                    *(_QWORD *)(v74 + 64) = v110;
                    *(_OWORD *)v74 = v106;
                    ++*(_QWORD *)(v68 + 16);
                    if (!--v97)
                      goto LABEL_151;
                  }
                }
                v26 = v35;
              }
            }
          }
LABEL_66:
          v30 = (v34 - 1) & v34;
          v32 = __clz(__rbit64(v34)) + (v26 << 6);
        }
        v36 = (uint64_t *)(v12[6] + 16 * v32);
        v38 = *v36;
        v37 = v36[1];
        outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v32, (uint64_t)&v106);
        *(_QWORD *)&v101 = v38;
        *((_QWORD *)&v101 + 1) = v37;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)v98);
        v39 = *(_QWORD **)(v99 + 200);
        v40 = (_QWORD *)v39[2];
        if (!v40)
          goto LABEL_50;
        v41 = v39[4] == v38 && v39[5] == v37;
        if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_83:
          swift_bridgeObjectRetain_n();
          outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v94 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
          v25 = __OFADD__(v97++, 1);
          if (v25)
          {
            __break(1u);
            goto LABEL_86;
          }
        }
        else
        {
          if (v40 != (_QWORD *)1)
          {
            v42 = v39 + 7;
            v43 = 1;
            do
            {
              v12 = (_QWORD *)(v43 + 1);
              if (__OFADD__(v43, 1))
                goto LABEL_155;
              v44 = *(v42 - 1) == v38 && *v42 == v37;
              if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_83;
              v42 += 2;
              ++v43;
            }
            while (v12 != v40);
          }
LABEL_50:
          swift_bridgeObjectRetain_n();
          outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  v92[0] = v92;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v94 = (_QWORD *)((char *)v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v94, v4);
  v97 = 0;
  v5 = 0;
  v6 = *(_QWORD *)(v2 + 64);
  v95 = v2 + 64;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v96 = (unint64_t)(v7 + 63) >> 6;
  v98 = &v102;
  do
  {
    while (1)
    {
      if (v9)
      {
        v10 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v11 = v10 | (v5 << 6);
        v12 = v100;
      }
      else
      {
        v13 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_157;
        v12 = v100;
        if (v13 >= v96)
          goto LABEL_42;
        v14 = *(_QWORD *)(v95 + 8 * v13);
        ++v5;
        if (!v14)
        {
          v5 = v13 + 1;
          if (v13 + 1 >= v96)
            goto LABEL_42;
          v14 = *(_QWORD *)(v95 + 8 * v5);
          if (!v14)
          {
            v5 = v13 + 2;
            if (v13 + 2 >= v96)
              goto LABEL_42;
            v14 = *(_QWORD *)(v95 + 8 * v5);
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v96)
                goto LABEL_42;
              v14 = *(_QWORD *)(v95 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v5 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v5 >= v96)
                    goto LABEL_42;
                  v14 = *(_QWORD *)(v95 + 8 * v5);
                  ++v15;
                  if (v14)
                    goto LABEL_22;
                }
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
                goto LABEL_164;
              }
              v5 = v15;
            }
          }
        }
LABEL_22:
        v9 = (v14 - 1) & v14;
        v11 = __clz(__rbit64(v14)) + (v5 << 6);
      }
      v16 = (uint64_t *)(v12[6] + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v11, (uint64_t)&v106);
      *(_QWORD *)&v101 = v18;
      *((_QWORD *)&v101 + 1) = v17;
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)v98);
      v19 = *(_QWORD **)(v99 + 200);
      v20 = (_QWORD *)v19[2];
      if (!v20)
        goto LABEL_6;
      v21 = v19[4] == v18 && v19[5] == v17;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      if (v20 != (_QWORD *)1)
      {
        v22 = v19 + 7;
        v23 = 1;
        while (1)
        {
          v12 = (_QWORD *)(v23 + 1);
          if (__OFADD__(v23, 1))
            break;
          v24 = *(v22 - 1) == v18 && *v22 == v17;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_39;
          v22 += 2;
          ++v23;
          if (v12 == v20)
            goto LABEL_6;
        }
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
LABEL_6:
      swift_bridgeObjectRetain_n();
      outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
      swift_bridgeObjectRelease();
    }
LABEL_39:
    swift_bridgeObjectRetain_n();
    outlined destroy of Any?((uint64_t)&v101, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v106);
    swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v94 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v25 = __OFADD__(v97++, 1);
  }
  while (!v25);
  __break(1u);
LABEL_42:
  if (v97)
  {
    if (v97 != v12[2])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      v45 = static _DictionaryStorage.allocate(capacity:)();
      v46 = 0;
      v47 = *v94;
      v48 = v45 + 64;
      while (1)
      {
        if (v47)
        {
          v52 = __clz(__rbit64(v47));
          v47 &= v47 - 1;
          v53 = v52 | (v46 << 6);
        }
        else
        {
          v54 = v46 + 1;
          if (__OFADD__(v46, 1))
            goto LABEL_161;
          if (v54 >= v93)
          {
LABEL_119:
            v12 = (_QWORD *)v45;
            goto LABEL_153;
          }
          v55 = v94[v54];
          ++v46;
          if (!v55)
          {
            v46 = v54 + 1;
            if (v54 + 1 >= v93)
              goto LABEL_119;
            v55 = v94[v46];
            if (!v55)
            {
              v46 = v54 + 2;
              if (v54 + 2 >= v93)
                goto LABEL_119;
              v55 = v94[v46];
              if (!v55)
              {
                v46 = v54 + 3;
                if (v54 + 3 >= v93)
                  goto LABEL_119;
                v55 = v94[v46];
                if (!v55)
                {
                  v56 = v54 + 4;
                  if (v56 >= v93)
                    goto LABEL_119;
                  v55 = v94[v56];
                  if (!v55)
                  {
                    while (1)
                    {
                      v46 = v56 + 1;
                      if (__OFADD__(v56, 1))
                        break;
                      if (v46 >= v93)
                        goto LABEL_119;
                      v55 = v94[v46];
                      ++v56;
                      if (v55)
                        goto LABEL_109;
                    }
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
                  }
                  v46 = v56;
                }
              }
            }
          }
LABEL_109:
          v47 = (v55 - 1) & v55;
          v53 = __clz(__rbit64(v55)) + (v46 << 6);
        }
        v57 = (uint64_t *)(v12[6] + 16 * v53);
        v59 = *v57;
        v58 = v57[1];
        outlined init with copy of AttributedString._AttributeValue(v12[7] + 72 * v53, (uint64_t)&v101);
        v108 = v103;
        v109 = v104;
        v110 = v105;
        v106 = v101;
        v107 = v102;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v60 = Hasher._finalize()();
        v61 = -1 << *(_BYTE *)(v45 + 32);
        v62 = v60 & ~v61;
        v63 = v62 >> 6;
        if (((-1 << v62) & ~*(_QWORD *)(v48 + 8 * (v62 >> 6))) != 0)
        {
          v49 = __clz(__rbit64((-1 << v62) & ~*(_QWORD *)(v48 + 8 * (v62 >> 6)))) | v62 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v64 = 0;
          v65 = (unint64_t)(63 - v61) >> 6;
          do
          {
            if (++v63 == v65 && (v64 & 1) != 0)
              goto LABEL_156;
            v66 = v63 == v65;
            if (v63 == v65)
              v63 = 0;
            v64 |= v66;
            v67 = *(_QWORD *)(v48 + 8 * v63);
          }
          while (v67 == -1);
          v49 = __clz(__rbit64(~v67)) + (v63 << 6);
        }
        *(_QWORD *)(v48 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
        v50 = (_QWORD *)(*(_QWORD *)(v45 + 48) + 16 * v49);
        *v50 = v59;
        v50[1] = v58;
        v51 = *(_QWORD *)(v45 + 56) + 72 * v49;
        *(_OWORD *)(v51 + 16) = v107;
        *(_OWORD *)(v51 + 32) = v108;
        *(_OWORD *)(v51 + 48) = v109;
        *(_QWORD *)(v51 + 64) = v110;
        *(_OWORD *)v51 = v106;
        ++*(_QWORD *)(v45 + 16);
        if (!--v97)
          goto LABEL_119;
      }
    }
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
LABEL_153:
  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator(v99);
  return v12;
}

{
  _QWORD *v2;
  char v3;
  size_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  Swift::Int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  _QWORD *v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  Swift::Int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  _QWORD v110[3];
  int64_t v111;
  _QWORD *v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v118 = a2;
  v2 = (_QWORD *)isStackAllocationSafe;
  v124 = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v111 = (unint64_t)((1 << v3) + 63) >> 6;
  v4 = 8 * v111;
  v119 = isStackAllocationSafe;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v113 = (unint64_t *)swift_slowAlloc();
      bzero(v113, v4);
      v26 = 0;
      v27 = v2[8];
      v114 = 0;
      v115 = (uint64_t)(v2 + 8);
      v28 = 1 << *((_BYTE *)v2 + 32);
      if (v28 < 64)
        v29 = ~(-1 << v28);
      else
        v29 = -1;
      v30 = v29 & v27;
      v116 = (unint64_t)(v28 + 63) >> 6;
      while (1)
      {
        if (v30)
        {
          v120 = (v30 - 1) & v30;
          v121 = v26;
          v31 = __clz(__rbit64(v30)) | (v26 << 6);
        }
        else
        {
          v32 = v26 + 1;
          if (__OFADD__(v26, 1))
            goto LABEL_134;
          if (v32 >= v116)
            goto LABEL_60;
          v33 = *(_QWORD *)(v115 + 8 * v32);
          v34 = v26 + 1;
          if (!v33)
          {
            v34 = v26 + 2;
            if (v26 + 2 >= v116)
              goto LABEL_60;
            v33 = *(_QWORD *)(v115 + 8 * v34);
            if (!v33)
            {
              v34 = v26 + 3;
              if (v26 + 3 >= v116)
                goto LABEL_60;
              v33 = *(_QWORD *)(v115 + 8 * v34);
              if (!v33)
              {
                v34 = v26 + 4;
                if (v26 + 4 >= v116)
                  goto LABEL_60;
                v33 = *(_QWORD *)(v115 + 8 * v34);
                if (!v33)
                {
                  v35 = v26 + 5;
                  if (v26 + 5 >= v116)
                    goto LABEL_60;
                  v33 = *(_QWORD *)(v115 + 8 * v35);
                  if (!v33)
                  {
                    while (1)
                    {
                      v34 = v35 + 1;
                      if (__OFADD__(v35, 1))
                        goto LABEL_140;
                      if (v34 >= v116)
                        break;
                      v33 = *(_QWORD *)(v115 + 8 * v34);
                      ++v35;
                      if (v33)
                        goto LABEL_56;
                    }
LABEL_60:
                    if (!v114)
                    {
                      v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
                      goto LABEL_130;
                    }
                    if (v114 == v2[2])
                    {
                      swift_retain();
                      goto LABEL_130;
                    }
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
                    v77 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
                    v78 = 0;
                    v79 = *v113;
                    v80 = v114;
                    v81 = v77 + 8;
                    v112 = v77;
                    while (1)
                    {
                      v114 = v80;
                      if (v79)
                      {
                        v120 = (v79 - 1) & v79;
                        v121 = v78;
                        v86 = __clz(__rbit64(v79)) | (v78 << 6);
                      }
                      else
                      {
                        v87 = v78 + 1;
                        if (__OFADD__(v78, 1))
                          goto LABEL_139;
                        if (v87 >= v111)
                          goto LABEL_129;
                        v88 = v113[v87];
                        v89 = v78 + 1;
                        if (!v88)
                        {
                          v89 = v78 + 2;
                          if (v78 + 2 >= v111)
                            goto LABEL_129;
                          v88 = v113[v89];
                          if (!v88)
                          {
                            v89 = v78 + 3;
                            if (v78 + 3 >= v111)
                              goto LABEL_129;
                            v88 = v113[v89];
                            if (!v88)
                            {
                              v89 = v78 + 4;
                              if (v78 + 4 >= v111)
                                goto LABEL_129;
                              v88 = v113[v89];
                              if (!v88)
                              {
                                v89 = v78 + 5;
                                if (v78 + 5 >= v111)
                                  goto LABEL_129;
                                v88 = v113[v89];
                                if (!v88)
                                {
                                  v90 = v78 + 6;
                                  if (v78 + 6 >= v111)
                                    goto LABEL_129;
                                  v88 = v113[v90];
                                  if (!v88)
                                  {
                                    while (1)
                                    {
                                      v89 = v90 + 1;
                                      if (__OFADD__(v90, 1))
                                        goto LABEL_142;
                                      if (v89 >= v111)
                                        break;
                                      v88 = v113[v89];
                                      ++v90;
                                      if (v88)
                                        goto LABEL_119;
                                    }
LABEL_129:
                                    v2 = v77;
LABEL_130:
                                    MEMORY[0x186DA9E78](v113, -1, -1);
                                    return v2;
                                  }
                                  v89 = v78 + 6;
                                }
                              }
                            }
                          }
                        }
LABEL_119:
                        v120 = (v88 - 1) & v88;
                        v121 = v89;
                        v86 = __clz(__rbit64(v88)) + (v89 << 6);
                      }
                      v91 = (uint64_t *)(v2[6] + 16 * v86);
                      v93 = *v91;
                      v92 = v91[1];
                      v94 = v2[7] + 48 * v86;
                      v96 = *(_QWORD *)v94;
                      v95 = *(_QWORD *)(v94 + 8);
                      v98 = *(_QWORD *)(v94 + 16);
                      v97 = *(_QWORD *)(v94 + 24);
                      v99 = *(_QWORD *)(v94 + 32);
                      v100 = *(unsigned __int8 *)(v94 + 40);
                      Hasher.init(_seed:)();
                      swift_bridgeObjectRetain();
                      v115 = v96;
                      v116 = v98;
                      v118 = v95;
                      LODWORD(v117) = v100;
                      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v96, v95, v98, v97, v99, v100);
                      String.hash(into:)();
                      v101 = Hasher._finalize()();
                      v77 = v112;
                      v102 = -1 << *((_BYTE *)v112 + 32);
                      v103 = v101 & ~v102;
                      v104 = v103 >> 6;
                      if (((-1 << v103) & ~v81[v103 >> 6]) != 0)
                      {
                        v82 = __clz(__rbit64((-1 << v103) & ~v81[v103 >> 6])) | v103 & 0x7FFFFFFFFFFFFFC0;
                      }
                      else
                      {
                        v105 = 0;
                        v106 = (unint64_t)(63 - v102) >> 6;
                        do
                        {
                          if (++v104 == v106 && (v105 & 1) != 0)
                            goto LABEL_133;
                          v107 = v104 == v106;
                          if (v104 == v106)
                            v104 = 0;
                          v105 |= v107;
                          v108 = v81[v104];
                        }
                        while (v108 == -1);
                        v82 = __clz(__rbit64(~v108)) + (v104 << 6);
                      }
                      *(_QWORD *)((char *)v81 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v82;
                      v83 = (_QWORD *)(v77[6] + 16 * v82);
                      *v83 = v93;
                      v83[1] = v92;
                      v84 = v77[7] + 48 * v82;
                      v85 = v118;
                      v2 = (_QWORD *)v119;
                      *(_QWORD *)v84 = v115;
                      *(_QWORD *)(v84 + 8) = v85;
                      *(_QWORD *)(v84 + 16) = v116;
                      *(_QWORD *)(v84 + 24) = v97;
                      *(_QWORD *)(v84 + 32) = v99;
                      *(_BYTE *)(v84 + 40) = v117;
                      ++v77[2];
                      v80 = v114 - 1;
                      v79 = v120;
                      v78 = v121;
                      if (v114 == 1)
                        goto LABEL_129;
                    }
                  }
                  v34 = v26 + 5;
                }
              }
            }
          }
LABEL_56:
          v120 = (v33 - 1) & v33;
          v121 = v34;
          v31 = __clz(__rbit64(v33)) + (v34 << 6);
        }
        v36 = v2[7];
        v117 = v31;
        v37 = v36 + 48 * v31;
        v38 = *(_QWORD *)v37;
        v39 = *(_QWORD *)(v37 + 8);
        v40 = *(_QWORD *)(v37 + 16);
        v41 = *(_QWORD *)(v37 + 24);
        v42 = *(_QWORD *)(v37 + 32);
        v43 = *(_BYTE *)(v37 + 40);
        v123 = v118;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, v43);
        type metadata accessor for AnyKeyPath();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
        swift_dynamicCast();
        if ((v43 & 1) != 0)
        {
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 1);
          swift_bridgeObjectRelease();
          v2 = (_QWORD *)v119;
          v30 = v120;
          v26 = v121;
LABEL_38:
          *(unint64_t *)((char *)v113 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v117;
          v10 = __OFADD__(v114++, 1);
          if (v10)
            goto LABEL_138;
        }
        else
        {
          outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_retain();
          v44 = MEMORY[0x186DA51E0](v38, v122);
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v38, v39, v40, v41, v42, 0);
          swift_bridgeObjectRelease();
          v2 = (_QWORD *)v119;
          v30 = v120;
          v26 = v121;
          if ((v44 & 1) == 0)
            goto LABEL_38;
        }
      }
    }
  }
  v110[1] = v110;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v113 = (_QWORD *)((char *)v110 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v113, v4);
  v5 = 0;
  v6 = v2[8];
  v114 = 0;
  v115 = (uint64_t)(v2 + 8);
  v7 = 1 << *((_BYTE *)v2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v116 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v120 = (v9 - 1) & v9;
    v121 = v5;
    v11 = __clz(__rbit64(v9)) | (v5 << 6);
LABEL_26:
    v16 = v2[7];
    v117 = v11;
    v17 = v16 + 48 * v11;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_QWORD *)(v17 + 32);
    v23 = *(_BYTE *)(v17 + 40);
    v123 = v118;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, v23);
    type metadata accessor for AnyKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
    swift_dynamicCast();
    v24 = v122;
    if ((v23 & 1) != 0)
    {
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 1);
      swift_bridgeObjectRelease();
      v2 = (_QWORD *)v119;
      v9 = v120;
      v5 = v121;
LABEL_7:
      *(unint64_t *)((char *)v113 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v117;
      v10 = __OFADD__(v114++, 1);
      if (v10)
        goto LABEL_135;
    }
    else
    {
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_retain();
      v25 = MEMORY[0x186DA51E0](v18, v24);
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v18, v19, v20, v21, v22, 0);
      swift_bridgeObjectRelease();
      v2 = (_QWORD *)v119;
      v9 = v120;
      v5 = v121;
      if ((v25 & 1) == 0)
        goto LABEL_7;
    }
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
    goto LABEL_132;
  if (v12 >= v116)
    goto LABEL_29;
  v13 = *(_QWORD *)(v115 + 8 * v12);
  v14 = v5 + 1;
  if (v13)
    goto LABEL_25;
  v14 = v5 + 2;
  if (v5 + 2 >= v116)
    goto LABEL_29;
  v13 = *(_QWORD *)(v115 + 8 * v14);
  if (v13)
    goto LABEL_25;
  v14 = v5 + 3;
  if (v5 + 3 >= v116)
    goto LABEL_29;
  v13 = *(_QWORD *)(v115 + 8 * v14);
  if (v13)
    goto LABEL_25;
  v14 = v5 + 4;
  if (v5 + 4 >= v116)
    goto LABEL_29;
  v13 = *(_QWORD *)(v115 + 8 * v14);
  if (v13)
  {
LABEL_25:
    v120 = (v13 - 1) & v13;
    v121 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    goto LABEL_26;
  }
  v15 = v5 + 5;
  if (v5 + 5 >= v116)
    goto LABEL_29;
  v13 = *(_QWORD *)(v115 + 8 * v15);
  if (v13)
  {
    v14 = v5 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_137;
    if (v14 >= v116)
      break;
    v13 = *(_QWORD *)(v115 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_25;
  }
LABEL_29:
  if (!v114)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (v114 != v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
    v45 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v46 = 0;
    v47 = *v113;
    v48 = v114;
    v49 = v45 + 8;
    v112 = v45;
    while (1)
    {
      v114 = v48;
      if (v47)
      {
        v120 = (v47 - 1) & v47;
        v121 = v46;
        v54 = __clz(__rbit64(v47)) | (v46 << 6);
      }
      else
      {
        v55 = v46 + 1;
        if (__OFADD__(v46, 1))
          goto LABEL_136;
        if (v55 >= v111)
          return v45;
        v56 = v113[v55];
        v57 = v46 + 1;
        if (!v56)
        {
          v57 = v46 + 2;
          if (v46 + 2 >= v111)
            return v45;
          v56 = v113[v57];
          if (!v56)
          {
            v57 = v46 + 3;
            if (v46 + 3 >= v111)
              return v45;
            v56 = v113[v57];
            if (!v56)
            {
              v57 = v46 + 4;
              if (v46 + 4 >= v111)
                return v45;
              v56 = v113[v57];
              if (!v56)
              {
                v57 = v46 + 5;
                if (v46 + 5 >= v111)
                  return v45;
                v56 = v113[v57];
                if (!v56)
                {
                  v58 = v46 + 6;
                  if (v46 + 6 >= v111)
                    return v45;
                  v56 = v113[v58];
                  if (!v56)
                  {
                    while (1)
                    {
                      v57 = v58 + 1;
                      if (__OFADD__(v58, 1))
                        break;
                      if (v57 >= v111)
                        return v45;
                      v56 = v113[v57];
                      ++v58;
                      if (v56)
                        goto LABEL_85;
                    }
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
                  }
                  v57 = v46 + 6;
                }
              }
            }
          }
        }
LABEL_85:
        v120 = (v56 - 1) & v56;
        v121 = v57;
        v54 = __clz(__rbit64(v56)) + (v57 << 6);
      }
      v59 = (uint64_t *)(v2[6] + 16 * v54);
      v61 = *v59;
      v60 = v59[1];
      v62 = v2[7] + 48 * v54;
      v63 = *(_QWORD *)v62;
      v64 = *(_QWORD *)(v62 + 8);
      v65 = *(_QWORD *)(v62 + 16);
      v66 = *(_QWORD *)(v62 + 24);
      v67 = *(_QWORD *)(v62 + 32);
      v68 = *(unsigned __int8 *)(v62 + 40);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      v115 = v63;
      v116 = v64;
      v118 = v67;
      LODWORD(v117) = v68;
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v63, v64, v65, v66, v67, v68);
      String.hash(into:)();
      v69 = Hasher._finalize()();
      v45 = v112;
      v70 = -1 << *((_BYTE *)v112 + 32);
      v71 = v69 & ~v70;
      v72 = v71 >> 6;
      if (((-1 << v71) & ~v49[v71 >> 6]) != 0)
      {
        v50 = __clz(__rbit64((-1 << v71) & ~v49[v71 >> 6])) | v71 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_65;
      }
      v73 = 0;
      v74 = (unint64_t)(63 - v70) >> 6;
      do
      {
        if (++v72 == v74 && (v73 & 1) != 0)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v75 = v72 == v74;
        if (v72 == v74)
          v72 = 0;
        v73 |= v75;
        v76 = v49[v72];
      }
      while (v76 == -1);
      v50 = __clz(__rbit64(~v76)) + (v72 << 6);
LABEL_65:
      *(_QWORD *)((char *)v49 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
      v51 = (_QWORD *)(v45[6] + 16 * v50);
      *v51 = v61;
      v51[1] = v60;
      v52 = v45[7] + 48 * v50;
      v53 = v116;
      *(_QWORD *)v52 = v115;
      *(_QWORD *)(v52 + 8) = v53;
      *(_QWORD *)(v52 + 16) = v65;
      *(_QWORD *)(v52 + 24) = v66;
      v2 = (_QWORD *)v119;
      *(_QWORD *)(v52 + 32) = v118;
      *(_BYTE *)(v52 + 40) = v117;
      ++v45[2];
      v48 = v114 - 1;
      v47 = v120;
      v46 = v121;
      if (v114 == 1)
        return v45;
    }
  }
  swift_retain();
  return v2;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.formSuccessor(of:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = (uint64_t *)(a1 + 24 * *a2);
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  swift_unknownObjectRetain();
  LOBYTE(v12) = specialized Rope._Node.formSuccessor(of:)(a3, v11, v12, v13);
  result = swift_unknownObjectRelease();
  if ((v12 & 1) != 0)
    return 1;
  v15 = *a2 + 1;
  if (__OFADD__(*a2, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *a2 = v15;
  if (v15 >= *(unsigned __int16 *)(a4 + 16))
    return 0;
  if (v15 < 0)
    goto LABEL_12;
  v16 = *(_QWORD *)(a3 + 8) & ((-15 << ((4 * a5 + 8) & 0x3C)) - 1) | (v15 << ((4 * a5 + 8) & 0x3C));
  *(_QWORD *)(a3 + 8) = v16;
  v17 = *(_QWORD *)(a1 + 24 * *a2);
  v18 = *(unsigned __int8 *)(v17 + 18);
  if ((((v18 + 1) >> 8) & 1) != 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v19 = ((-256 << (4 * ((v18 + 1) & 0xFu))) | 0xFF) & v16;
  *(_QWORD *)(a3 + 8) = v19;
  if (v18)
  {
    v20 = (v19 >> ((4 * v18 + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    v21 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v17 + 24, v20, v19);
    swift_unknownObjectRelease();
    v17 = v21;
  }
  *(_QWORD *)(a3 + 16) = v17;
  return 1;
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice1<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice1<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice1<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice1<A>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs.AttributesSlice1<A>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs.AttributesSlice1<A>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice1<A>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice2<A, B>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice2<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice2<A, B>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice2<A, B>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice3<A, B, C>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice4<A, B, C, D>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>);
  return MEMORY[0x186DA9D64](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
  JUMPOUT(0x186DA9D64);
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice, &type metadata for AttributedString.Runs.NSAttributesSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice, &type metadata for AttributedString.Runs.NSAttributesSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice, &type metadata for AttributedString.Runs.NSAttributesSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs.NSAttributesSlice>, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.Runs.NSAttributesSlice> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs.NSAttributesSlice>, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice();
    result = MEMORY[0x186DA9D64](a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs.NSAttributesSlice>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.Runs.NSAttributesSlice> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs.NSAttributesSlice>, MEMORY[0x1E0DEDE48]);
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice.Iterator, &type metadata for AttributedString.Runs.NSAttributesSlice.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator);
  }
  return result;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttributedString.Runs.AttributesSlice1);
}

__n128 __swift_memcpy248_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttributedString.Runs.AttributesSlice1.Iterator);
}

void type metadata accessor for AttributedString.Runs.AttributesSlice2()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for AttributedString.Runs.AttributesSlice2.Iterator()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for AttributedString.Runs.AttributesSlice3()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for AttributedString.Runs.AttributesSlice3.Iterator()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice4()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for AttributedString.Runs.AttributesSlice4()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for AttributedString.Runs.AttributesSlice4.Iterator()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice5()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeWithCopy for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v3 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v8 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AttributedString.Runs.AttributesSlice5()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice5.Iterator()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for AttributedString.Runs.AttributesSlice1()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v3 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v3;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v8 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = v10;
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 248))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 248) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 248) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AttributedString.Runs.AttributesSlice5.Iterator()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t initializeWithCopy for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v8 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v5 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.NSAttributesSlice()
{
  return &type metadata for AttributedString.Runs.NSAttributesSlice;
}

uint64_t destroy for AttributedString.Runs.NSAttributesSlice.Iterator()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v3 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v8 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v5 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.NSAttributesSlice.Iterator()
{
  return &type metadata for AttributedString.Runs.NSAttributesSlice.Iterator;
}

_QWORD *specialized RangeReplaceableCollection.init(_contents:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v9 = a2 != 1;
  v10 = 1;
  if (a2 != 1)
    v10 = 2;
  if (a4 != 1)
    v9 = v10;
  if (a6 == 1)
    v11 = v9;
  else
    v11 = v9 + 1;
  if (!v11)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a5, a6);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0, MEMORY[0x1E0DEE9D8]);
  v16 = v15;
  if (a2 == 1)
  {
    if (a4 == 1)
      goto LABEL_11;
  }
  else
  {
    v17 = v15[2];
    v18 = v15[3];
    swift_bridgeObjectRetain();
    if (v17 >= v18 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v17 + 1, 1, v16);
    v16[2] = v17 + 1;
    v19 = &v16[2 * v17];
    v19[4] = a1;
    v19[5] = a2;
    if (a4 == 1)
    {
LABEL_11:
      if (a6 == 1)
        return v16;
      goto LABEL_20;
    }
  }
  v20 = v16[2];
  v21 = v16[3];
  swift_bridgeObjectRetain();
  if (v20 >= v21 >> 1)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v20 + 1, 1, v16);
  v16[2] = v20 + 1;
  v22 = &v16[2 * v20];
  v22[4] = a3;
  v22[5] = a4;
  if (a6 != 1)
  {
LABEL_20:
    v24 = v16[2];
    v23 = v16[3];
    if (v24 >= v23 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v16);
    v16[2] = v24 + 1;
    v25 = &v16[2 * v24];
    v25[4] = a5;
    v25[5] = a6;
  }
  return v16;
}

_QWORD *specialized RangeReplaceableCollection.init(_contents:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;

  v11 = a2 != 1;
  v12 = 1;
  if (a2 != 1)
    v12 = 2;
  if (a4 != 1)
    v11 = v12;
  if (a6 != 1)
    ++v11;
  if (a8 == 1)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (!v13)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a7, a8);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0, MEMORY[0x1E0DEE9D8]);
  v19 = v18;
  if (a2 == 1)
  {
    if (a4 == 1)
      goto LABEL_13;
  }
  else
  {
    v21 = v18[2];
    v20 = v18[3];
    swift_bridgeObjectRetain();
    if (v21 >= v20 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
    v19[2] = v21 + 1;
    v22 = &v19[2 * v21];
    v22[4] = a1;
    v22[5] = a2;
    if (a4 == 1)
    {
LABEL_13:
      if (a6 == 1)
        goto LABEL_14;
      goto LABEL_23;
    }
  }
  v24 = v19[2];
  v23 = v19[3];
  swift_bridgeObjectRetain();
  if (v24 >= v23 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v19);
  v19[2] = v24 + 1;
  v25 = &v19[2 * v24];
  v25[4] = a3;
  v25[5] = a4;
  if (a6 == 1)
  {
LABEL_14:
    if (a8 == 1)
      return v19;
    goto LABEL_26;
  }
LABEL_23:
  v27 = v19[2];
  v26 = v19[3];
  swift_bridgeObjectRetain();
  if (v27 >= v26 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v19);
  v19[2] = v27 + 1;
  v28 = &v19[2 * v27];
  v28[4] = a5;
  v28[5] = a6;
  if (a8 != 1)
  {
LABEL_26:
    v30 = v19[2];
    v29 = v19[3];
    if (v30 >= v29 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v19);
    v19[2] = v30 + 1;
    v31 = &v19[2 * v30];
    v31[4] = a7;
    v31[5] = a8;
  }
  return v19;
}

_QWORD *specialized RangeReplaceableCollection.init(_contents:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;

  v11 = a9;
  v12 = a2 != 1;
  v13 = 1;
  if (a2 != 1)
    v13 = 2;
  if (a4 != 1)
    v12 = v13;
  if (a6 != 1)
    ++v12;
  if (a8 != 1)
    ++v12;
  if (a10 == 1)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (!v14)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a9, a10);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0, MEMORY[0x1E0DEE9D8]);
  v20 = v19;
  if (a2 == 1)
  {
    if (a4 == 1)
      goto LABEL_15;
  }
  else
  {
    v21 = v19[2];
    v22 = v19[3];
    swift_bridgeObjectRetain();
    if (v21 >= v22 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v21 + 1, 1, v20);
    v20[2] = v21 + 1;
    v23 = &v20[2 * v21];
    v23[4] = a1;
    v23[5] = a2;
    v11 = a9;
    if (a4 == 1)
    {
LABEL_15:
      if (a6 == 1)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
  v24 = v20[2];
  v25 = v20[3];
  swift_bridgeObjectRetain();
  if (v24 >= v25 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v24 + 1, 1, v20);
  v20[2] = v24 + 1;
  v26 = &v20[2 * v24];
  v26[4] = a3;
  v26[5] = a4;
  if (a6 == 1)
  {
LABEL_16:
    if (a8 == 1)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_26:
  v27 = v20[2];
  v28 = v20[3];
  swift_bridgeObjectRetain();
  if (v27 >= v28 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v27 + 1, 1, v20);
  v20[2] = v27 + 1;
  v29 = &v20[2 * v27];
  v29[4] = a5;
  v29[5] = a6;
  if (a8 == 1)
  {
LABEL_17:
    if (a10 == 1)
      return v20;
    goto LABEL_32;
  }
LABEL_29:
  v30 = v20[2];
  v31 = v20[3];
  swift_bridgeObjectRetain();
  if (v30 >= v31 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v30 + 1, 1, v20);
  v20[2] = v30 + 1;
  v32 = &v20[2 * v30];
  v32[4] = a7;
  v32[5] = a8;
  if (a10 != 1)
  {
LABEL_32:
    v34 = v20[2];
    v33 = v20[3];
    if (v34 >= v33 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v20);
    v20[2] = v34 + 1;
    v35 = &v20[2 * v34];
    v35[4] = v11;
    v35[5] = a10;
  }
  return v20;
}

double NSOperationQueue.SchedulerTimeType.date.getter@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double NSOperationQueue.SchedulerTimeType.date.setter(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t (*NSOperationQueue.SchedulerTimeType.date.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double NSOperationQueue.SchedulerTimeType.init(_:)@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double NSOperationQueue.SchedulerTimeType.distance(to:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 - *v2;
  *a2 = result;
  return result;
}

void NSOperationQueue.SchedulerTimeType.Stride.init(floatLiteral:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double NSOperationQueue.SchedulerTimeType.advanced(by:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 + *v2;
  *a2 = result;
  return result;
}

double NSOperationQueue.SchedulerTimeType.Stride.timeInterval.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double NSOperationQueue.SchedulerTimeType.Stride.magnitude.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void NSOperationQueue.SchedulerTimeType.Stride.magnitude.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*NSOperationQueue.SchedulerTimeType.Stride.magnitude.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a1, a2, v7);
  v10 = Double.init<A>(exactly:)((uint64_t)v9, a2);
  v12 = v11;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  if ((v12 & 1) != 0)
    v14 = 0;
  else
    v14 = v10;
  *(_QWORD *)a3 = v14;
  *(_BYTE *)(a3 + 8) = v12 & 1;
  return result;
}

BOOL static NSOperationQueue.SchedulerTimeType.Stride.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static NSOperationQueue.SchedulerTimeType.Stride.* infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 - *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.*= infix(_:_:)(double *a1, double *a2)
{
  double result;

  result = *a2 * *a1;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.+= infix(_:_:)(double *a1, double *a2)
{
  double result;

  result = *a2 + *a1;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.-= infix(_:_:)(double *a1, double *a2)
{
  double result;

  result = *a1 - *a2;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.seconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1;
  *a2 = (double)a1;
  return result;
}

void static NSOperationQueue.SchedulerTimeType.Stride.seconds(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double static NSOperationQueue.SchedulerTimeType.Stride.milliseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.microseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.nanoseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

BOOL static NSOperationQueue.SchedulerTimeType.Stride.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F35428);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F35428);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F35428);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F35428);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSOperationQueue.SchedulerTimeType.Stride@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NSOperationQueue.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSOperationQueue.SchedulerTimeType.Stride(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void NSOperationQueue.SchedulerTimeType.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NSOperationQueue.SchedulerTimeType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys, &unk_1E0F35398);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys, &unk_1E0F35398);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys, &unk_1E0F35398);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys, &unk_1E0F35398);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }
  return result;
}

Swift::Int NSOperationQueue.SchedulerTimeType.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NSOperationQueue.SchedulerTimeType.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSOperationQueue.SchedulerTimeType.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSOperationQueue.SchedulerTimeType@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NSOperationQueue.SchedulerTimeType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSOperationQueue.SchedulerTimeType(_QWORD *a1)
{
  return NSOperationQueue.SchedulerTimeType.encode(to:)(a1);
}

uint64_t NSOperationQueue.DelayReadyOperation.CancellationContext.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x186DA9E78](*(_QWORD *)(v0 + 16), -1, -1);
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

void NSOperationQueue.DelayReadyOperation.CancellationContext.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  objc_super v7;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1);
  v2 = MEMORY[0x186DA9F5C](v0 + 24);
  if (v2)
  {
    v3 = (char *)v2;
    swift_unknownObjectWeakAssign();
    os_unfair_lock_unlock(v1);
    v4 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
    v5 = *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
    v6 = *(void **)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue];
    *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0;

    *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0;
    swift_release();
    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for NSOperationQueue.DelayReadyOperation();
    objc_msgSendSuper2(&v7, sel_cancel);

  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

void protocol witness for Cancellable.cancel() in conformance NSOperationQueue.DelayReadyOperation.CancellationContext()
{
  NSOperationQueue.DelayReadyOperation.CancellationContext.cancel()();
}

uint64_t one-time initialization function for readySchedulingQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v6);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v8[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static NSOperationQueue.DelayReadyOperation.readySchedulingQueue = result;
  return result;
}

uint64_t NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v20 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v18 = *(_QWORD *)(v7 - 8);
  v19 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime();
  v16 = *(_QWORD *)(v10 - 8);
  v17 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x186DA42E0](a1, a2);
  if (one-time initialization token for readySchedulingQueue != -1)
    swift_once();
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6_1;
  v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x186DA4ED4](v12, v9, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v17);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(uint64_t a1)
{
  uint64_t result;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  result = MEMORY[0x186DA9F5C](a1 + 16);
  if (result)
  {
    v2 = (void *)result;
    swift_getKeyPath();
    v3 = v2;
    _bridgeKeyPathToString(_:)();
    v4 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_willChangeValueForKey_, v4);

    swift_unknownObjectRelease();
    swift_release();
    *((_BYTE *)v3
    + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter) = 1;
    swift_getKeyPath();
    v5 = v3;
    _bridgeKeyPathToString(_:)();
    v6 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_didChangeValueForKey_, v6);

    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

void NSOperationQueue.DelayReadyOperation.main()()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  void (*v8)(uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  objc_class *v17;
  _BYTE *v18;
  void (**v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void (*v26)(char *, uint64_t);
  id v27;
  void *v28;
  _QWORD v29[2];
  os_unfair_lock_t v30;
  Class v31;
  objc_super v32;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = type metadata accessor for DispatchTime();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)(v0
                + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action);
  v8 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action);
  if (v8)
  {
    v9 = (void (*)(uint64_t))v7[1];
    *v7 = 0;
    v7[1] = 0;
    v10 = static DispatchTime.now()();
    v8(v10);
    v11 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
    v12 = *(void **)(v0
                   + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue);
    if (v12)
    {
      v31 = ObjectType;
      v13 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
      v14 = *(_QWORD *)(v1
                      + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context);
      if (v14)
      {
        *(_QWORD *)(v1
                  + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue) = 0;
        *(_QWORD *)(v1 + v13) = 0;
        v30 = *(os_unfair_lock_t *)(v14 + 16);
        os_unfair_lock_lock(v30);
        v29[1] = v14 + 24;
        v15 = (void *)MEMORY[0x186DA9F5C]();

        if (v15)
        {
          v16 = *(double *)(v1
                          + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval);
          v17 = v31;
          v18 = objc_allocWithZone(v31);
          v19 = (void (**)(uint64_t))&v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
          v20 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
          v21 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
          *v19 = v8;
          v19[1] = v9;
          v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
          *(_QWORD *)&v18[v20] = v12;
          *(double *)&v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = v16;
          *(_QWORD *)&v18[v21] = v14;
          v22 = v12;
          swift_retain();
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          v32.receiver = v18;
          v32.super_class = v17;
          v23 = objc_msgSendSuper2(&v32, sel_init);
          swift_unknownObjectWeakAssign();
          v24 = v22;
          objc_msgSend(v22, sel_addOperation_, v23);
          os_unfair_lock_unlock(v30);
          v25 = v23;
          NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v6, v16);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          swift_release();

          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        }
        else
        {
          os_unfair_lock_unlock(v30);
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          swift_release();

        }
        return;
      }
      v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      v27 = v12;
      v26(v6, v3);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
    }
    v28 = *(void **)(v1 + v11);
    *(_QWORD *)(v1 + v11) = 0;

    *(_QWORD *)(v1
              + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context) = 0;
    swift_release();
  }
}

id NSOperationQueue.DelayReadyOperation.isReady.getter()
{
  unsigned __int8 *v0;
  id result;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  result = objc_msgSendSuper2(&v2, sel_isReady);
  if ((_DWORD)result)
    return (id)v0[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter];
  return result;
}

id key path getter for NSOperationQueue.DelayReadyOperation.isReady : NSOperationQueue.DelayReadyOperation@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  id result;
  char v5;
  objc_super v6;

  v3 = *a1;
  v6.receiver = *a1;
  v6.super_class = (Class)type metadata accessor for NSOperationQueue.DelayReadyOperation();
  result = objc_msgSendSuper2(&v6, sel_isReady);
  if ((_DWORD)result)
    v5 = v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter];
  else
    v5 = 0;
  *a2 = v5;
  return result;
}

id protocol witness for Cancellable.cancel() in conformance NSOperationQueue.DelayReadyOperation(objc_class *a1)
{
  void **v1;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  objc_super v8;

  v3 = (char *)*v1;
  v4 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  v5 = *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  v6 = *(void **)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue];
  *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0;

  *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0;
  swift_release();
  v8.receiver = v3;
  v8.super_class = a1;
  return -[objc_class cancel](&v8, sel_cancel);
}

void NSOperationQueue.schedule(options:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v10[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v10[5] = v6;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v10[3] = &block_descriptor_9;
  v7 = _Block_copy(v10);
  v8 = (void *)objc_opt_self();
  swift_retain();
  v9 = objc_msgSend(v8, sel_blockOperationWithBlock_, v7);
  _Block_release(v7);
  swift_release();
  objc_msgSend(v3, sel_addOperation_, v9);

}

uint64_t sub_181BD4B50()
{
  swift_release();
  return swift_deallocObject();
}

void NSOperationQueue.schedule(after:tolerance:options:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  id v9;
  uint64_t v10;

  v6 = v5;
  v10 = *a1;
  objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  v9 = specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(a4, a5, (double *)&v10);
  swift_release();
  objc_msgSend(v6, sel_addOperation_, v9);

}

uint64_t type metadata accessor for NSOperationQueue.DelayReadyOperation()
{
  return objc_opt_self();
}

void NSOperationQueue.schedule(after:interval:tolerance:options:_:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *a1;
  v10 = *a2;
  type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext();
  v11 = swift_allocObject();
  v12 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v11 + 16) = v12;
  swift_unknownObjectWeakInit();
  *v12 = 0;
  v18 = v10;
  v19 = v9;
  objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  swift_retain();
  v13 = v5;
  v14 = specialized NSOperationQueue.DelayReadyOperation.init(repeating:after:queue:interval:context:)(a3, a4, (double *)&v19, v5, &v18, v11);
  swift_release();

  swift_release();
  objc_msgSend(v13, sel_addOperation_, v14, v18, v19);
  v19 = v11;
  v15 = type metadata accessor for AnyCancellable();
  swift_allocObject();
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSOperationQueue.DelayReadyOperation.CancellationContext and conformance NSOperationQueue.DelayReadyOperation.CancellationContext, (uint64_t (*)(uint64_t))type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext, (uint64_t)&protocol conformance descriptor for NSOperationQueue.DelayReadyOperation.CancellationContext);
  swift_retain();
  v16 = AnyCancellable.init<A>(_:)();
  v17 = MEMORY[0x1E0C95DF8];
  a5[3] = v15;
  a5[4] = v17;
  swift_release();

  *a5 = v16;
}

double NSOperationQueue.now.getter@<D0>(double *a1@<X8>)
{
  double result;
  timespec __tp;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void NSOperationQueue.minimumTolerance.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for Scheduler.schedule(options:_:) in conformance NSOperationQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v6 = *v3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v11[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v11[3] = &block_descriptor_13_1;
  v8 = _Block_copy(v11);
  v9 = (void *)objc_opt_self();
  swift_retain();
  v10 = objc_msgSend(v9, sel_blockOperationWithBlock_, v8);
  _Block_release(v8);
  swift_release();
  objc_msgSend(v6, sel_addOperation_, v10);

}

void protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance NSOperationQueue(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v5;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;

  v8 = *v5;
  v11 = *a1;
  v9 = objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  v10 = specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(a4, a5, (double *)&v11);
  swift_release();
  objc_msgSend(v8, sel_addOperation_, v10);

}

void protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance NSOperationQueue(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  NSOperationQueue.schedule(after:interval:tolerance:options:_:)(a1, a2, a3, a4, a5);
}

id specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(uint64_t a1, uint64_t a2, double *a3)
{
  _BYTE *v3;
  objc_class *ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  _QWORD *v13;
  id v14;
  id v15;
  double v16;
  uint64_t v18;
  timespec __tp;
  objc_super v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = type metadata accessor for DispatchTime();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a3;
  v13 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0;
  *v13 = a1;
  v13[1] = a2;
  v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = 0;
  v20.receiver = v3;
  v20.super_class = ObjectType;
  swift_retain();
  v14 = objc_msgSendSuper2(&v20, sel_init);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  v15 = v14;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  v16 = v12 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
  static DispatchTime.now()();
  NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v11, v16);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v15;
}

uint64_t type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext()
{
  return objc_opt_self();
}

id specialized NSOperationQueue.DelayReadyOperation.init(repeating:after:queue:interval:context:)(uint64_t a1, uint64_t a2, double *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  _BYTE *v6;
  _BYTE *v7;
  objc_class *ObjectType;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  double v26;
  uint64_t v28;
  timespec __tp;
  objc_super v30;
  uint64_t v31;

  v7 = v6;
  v31 = *MEMORY[0x1E0C80C00];
  ObjectType = (objc_class *)swift_getObjectType();
  v28 = type metadata accessor for DispatchTime();
  v15 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a3;
  v19 = *a5;
  v20 = &v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  v21 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
  v22 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
  *v20 = a1;
  v20[1] = a2;
  v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
  *(_QWORD *)&v7[v21] = a4;
  *(_QWORD *)&v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = v19;
  *(_QWORD *)&v7[v22] = a6;
  v30.receiver = v7;
  v30.super_class = ObjectType;
  swift_retain();
  v23 = a4;
  swift_retain();
  v24 = objc_msgSendSuper2(&v30, sel_init);
  swift_unknownObjectWeakAssign();
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  v25 = v24;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  v26 = v18 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
  static DispatchTime.now()();
  NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v17, v26);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v28);
  return v25;
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride, &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride, &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride, &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride, &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride, &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride, &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride, &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType, &type metadata for NSOperationQueue.SchedulerTimeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType, &type metadata for NSOperationQueue.SchedulerTimeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSOperationQueue.SchedulerTimeType, &type metadata for NSOperationQueue.SchedulerTimeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerTimeType()
{
  return &type metadata for NSOperationQueue.SchedulerTimeType;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerOptions()
{
  return &type metadata for NSOperationQueue.SchedulerOptions;
}

void *type metadata accessor for NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  return &unk_1E0F35398;
}

uint64_t storeEnumTagSinglePayload for NSOperationQueue.SchedulerTimeType.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181BD5698 + 4 * asc_1820E8670[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181BD56B8 + 4 * byte_1820E8675[v4]))();
}

_BYTE *sub_181BD5698(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181BD56B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181BD56C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181BD56C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181BD56D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181BD56D8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_1E0F35428;
}

uint64_t sub_181BD58A4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)()
{
  uint64_t v0;

  return closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(v0);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

double Date.init<A>(_:strategy:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  double result;
  double v12;

  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  if (!v5)
  {
    result = v12;
    *a5 = v12;
  }
  return result;
}

double Date.init<A, B>(_:strategy:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  double *v19;
  _QWORD v20[2];
  double v21;

  v19 = a6;
  v12 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  v20[0] = String.init<A>(_:)();
  v20[1] = v16;
  (*(void (**)(double *__return_ptr, _QWORD *, uint64_t, uint64_t))(a5 + 48))(&v21, v20, a3, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    result = v21;
    *v19 = v21;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BufferView(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for BufferView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void base witness table accessor for BidirectionalCollection in BufferView<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in BufferView<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t specialized BufferView.withUnsafeRawPointer<A>(_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 <= 2 || (result = strncmp(a1, "NaN", 3uLL), (_DWORD)result))
  {
    v10 = StaticString.description.getter();
    v12 = v11;
    v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3, a5, a6);
    v15 = v14;
    v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v18 = v10;
    *(_QWORD *)(v18 + 8) = v12;
    *(_QWORD *)(v18 + 16) = v13;
    *(_QWORD *)(v18 + 24) = v15;
    *(_QWORD *)(v18 + 32) = v17;
    *(_QWORD *)(v18 + 40) = 0;
    *(_BYTE *)(v18 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized BufferView.withUnsafePointer<A>(_:)(const char *a1, size_t a2)
{
  return _stringshims_strncasecmp_l(a1, "0x", a2, 0);
}

uint64_t BufferView.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;

  result = a1(a2, a3);
  if (!v5)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, 0, 1, a4);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance BufferView<A>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  BufferView.makeIterator()();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance BufferView<A>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for BufferView<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance BufferView<A>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  v4 = MEMORY[0x186DA9D64](&protocol conformance descriptor for BufferView<A>, a1);
  return specialized Collection._copyToContiguousArray()(v6, a1, v4);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance BufferView<A>(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x186DA49E8](a1, a2);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance BufferView<A>@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return BufferView.withContiguousStorageIfAvailable<A>(_:)(a1, *v3, v3[1], a2, a3);
}

uint64_t UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)@<X0>(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  void *v14;
  size_t v15;
  void *v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  if ((v6 & (unint64_t)(v6 + 1)) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = isStackAllocationSafe;
  if (v6 > 0xF
    || *(uint64_t *)(v5 + 72) >= 1025
    && (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), !(_DWORD)isStackAllocationSafe))
  {
    v14 = (void *)swift_slowAlloc();
    v15 = *(_QWORD *)(v5 + 64);
    if ((v15 & 0x8000000000000000) == 0)
    {
      v16 = v14;
      memcpy(v14, (const void *)(a2 + v9), v15);
      (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))(a4, v16, a3);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v11 = (char *)&v17 - v10;
  v12 = *(_QWORD *)(v5 + 64);
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    JUMPOUT(0x186DA9E78);
  }
  memcpy((char *)&v17 - v10, (const void *)(a2 + v9), v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 16))(a4, v11, a3);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance BufferView<A>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) - 8) + 72) * v2[1];
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance BufferView<A>(uint64_t *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  void (*result)(_QWORD *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v15;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  *a1 = v6;
  a1[1] = v7;
  result = (void (*)(_QWORD *))malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)result;
  v9 = *(_QWORD *)(v7 + 72);
  if (!v9)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = *a2;
  v11 = *a2 - *v3;
  if (v11 == 0x8000000000000000 && v9 == -1)
    goto LABEL_20;
  if (v11 / v9 < 0)
    goto LABEL_18;
  v13 = *v3 + v9 * v3[1] - v10;
  if (v9 == -1 && v13 == 0x8000000000000000)
    goto LABEL_21;
  if (v13 / v9 < 1)
    goto LABEL_19;
  v15 = *(_DWORD *)(v7 + 80);
  if ((v15 & 0x10000) == 0)
  {
    UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v10, v6, (uint64_t)result);
    return AttributedString.Runs.AttributesSlice1.subscript.read;
  }
  if ((v15 & v10) == 0)
  {
    (*(void (**)(void (*)(_QWORD *), uint64_t, uint64_t))(v7 + 16))(result, *a2, v6);
    return AttributedString.Runs.AttributesSlice1.subscript.read;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance BufferView<A>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = *result;
  v7 = *result - *v3;
  if (v7 == 0x8000000000000000 && v5 == -1)
    goto LABEL_20;
  if (v7 / v5 < 0)
    goto LABEL_17;
  v9 = result[1];
  if (v9 - v6 == 0x8000000000000000 && v5 == -1)
    goto LABEL_21;
  v10 = (v9 - v6) / v5;
  if (v10 < 0)
    goto LABEL_18;
  v11 = *v3 + v5 * v3[1] - v9;
  if (v5 == -1 && v11 == 0x8000000000000000)
    goto LABEL_22;
  if (v11 / v5 < 0)
    goto LABEL_19;
  v12 = *(_DWORD *)(v4 + 80);
  if ((v12 & 0x10000) == 0 || (v12 & (v9 | v6)) == 0)
  {
    *a3 = v6;
    a3[1] = v10;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

double protocol witness for Collection.indices.getter in conformance BufferView<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;

  v5 = type metadata accessor for BufferViewIndex(0, *(_QWORD *)(a1 + 16), a2, a3);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for BufferViewIndex<A>, v5);
  Range.init(uncheckedBounds:)();
  result = *(double *)&v7;
  *a4 = v7;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance BufferView<A>()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

_QWORD *protocol witness for Collection.index(after:) in conformance BufferView<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *result + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance BufferView<A>(_QWORD *result, uint64_t a2)
{
  *result += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance BufferView<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *result - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance BufferView<A>(_QWORD *result, uint64_t a2)
{
  *result -= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance BufferView<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = *result + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * a2;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for BufferView<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

_QWORD *protocol witness for Collection.distance(from:to:) in conformance BufferView<A>(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72);
  if (v3)
  {
    v4 = *a2 - *result;
    if (v4 != 0x8000000000000000 || v3 != -1)
      return (_QWORD *)(v4 / v3);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void base witness table accessor for Collection in BufferView<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

void base witness table accessor for Sequence in BufferView<A>()
{
  JUMPOUT(0x186DA9D64);
}

void associated type witness table accessor for Collection.Index : Comparable in BufferView<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[2];

  v7[0] = MEMORY[0x186DA9D64](&protocol conformance descriptor for BufferViewIndex<A>, *(_QWORD *)(a1 + 16));
  v7[1] = lazy protocol witness table accessor for type Int and conformance Int();
  return MEMORY[0x186DA9D64](a4, a1, v7);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BufferView<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v22 - v17;
  v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = type metadata accessor for Range();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - v9;
  v11 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v7, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

id _FileManagerImpl.createSymbolicLink(at:withDestinationURL:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  Swift::String v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t *v39;
  _OWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v64;
  char v65;
  _BYTE *v66;
  Swift::String v67;
  id object;
  unint64_t v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  _QWORD *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _OWORD *v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  _OWORD *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  Swift::String v131;
  unint64_t v132;
  unint64_t v133;
  Swift::String v134;
  unint64_t v135;
  id v136;
  void *v137;
  unint64_t v138;
  void *v139;
  id v140;
  char v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  Swift::String v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  id v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  id v159;
  void *v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  void *v165;
  Swift::String v166;
  Swift::String v167;
  Swift::String v168;
  id v169;
  void *v170;
  unint64_t v171;
  uint64_t v172;
  id v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 v181;
  id result;
  _QWORD *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  _OWORD *v197;
  _OWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  _OWORD *v202;
  _OWORD *v203;
  uint64_t v204;
  uint64_t *v205;
  _OWORD *v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  void *v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  uint64_t v224;
  id v225;
  id v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v231;
  uint64_t v232;
  id v233;
  uint64_t v234;
  uint64_t v235;
  id v236;
  id v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  _OWORD *v247;
  _OWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  _OWORD *v252;
  _OWORD *v253;
  uint64_t v254;
  uint64_t *v255;
  _OWORD *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  void *v262;
  uint64_t v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  char v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  id v273;
  uint64_t v274;
  id v275;
  id v276;
  id v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v282;
  id v283;
  _BYTE v284[16];
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  _BYTE *v291;
  id v292;
  uint64_t v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _BYTE v300[32];
  Swift::String v301;
  _QWORD v302[4];
  _OWORD v303[2];
  Swift::String v304;
  _QWORD v305[6];

  v3 = v2;
  v305[5] = *MEMORY[0x1E0C80C00];
  v4 = *(void **)a1;
  v5 = *(id *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 16);
  countAndFlagsBits = *a2;
  v7 = a2[1];
  v9 = a2[2];
  swift_retain();
  v10 = v4;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v304._countAndFlagsBits = (uint64_t)v10;
    v304._object = v5;
    v305[0] = v6;
    URL.scheme.getter();
    if (v11)
    {
      v294 = v9;
      v288 = v3;
      v12 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        v9 = v294;
        goto LABEL_10;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      v9 = v294;
      if ((v14 & 1) != 0)
      {
LABEL_10:
        v304._countAndFlagsBits = countAndFlagsBits;
        v304._object = (void *)v7;
        v305[0] = v9;
        URL.scheme.getter();
        v16 = v15;
        swift_bridgeObjectRelease();
        v292 = (id)countAndFlagsBits;
        if (v16)
        {
          swift_retain();
          v17 = (id)countAndFlagsBits;
          swift_retain();
          if (!_foundation_swift_url_feature_enabled())
            goto LABEL_55;
          v304._countAndFlagsBits = (uint64_t)v17;
          v304._object = (void *)v7;
          v305[0] = v9;
          URL.scheme.getter();
          if (!v18)
          {
            swift_release();
            swift_release();

            goto LABEL_67;
          }
          countAndFlagsBits = v18;
          v19 = String.lowercased()();
          swift_bridgeObjectRelease();
          if (v19._countAndFlagsBits == 1701603686 && v19._object == (void *)0xE400000000000000)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
          }
          else
          {
            v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            if ((v65 & 1) == 0)
              goto LABEL_67;
          }
        }
LABEL_59:
        v66 = v10;
        swift_retain();
        swift_retain();
        v291 = v66;
        if (_foundation_swift_url_feature_enabled())
        {
          v304._countAndFlagsBits = (uint64_t)v66;
          v304._object = v5;
          v305[0] = v6;
          v289 = v66;
          swift_retain();
          swift_retain();
          v67 = URL.path(percentEncoded:)(1);
          countAndFlagsBits = v67._countAndFlagsBits;
          object = v67._object;
          v304 = v67;
          swift_bridgeObjectRetain();
          if (String.count.getter() <= 1)
            goto LABEL_106;
          v69 = (unint64_t)v67._object;
          if ((specialized BidirectionalCollection.last.getter(v67._countAndFlagsBits, (unint64_t)v67._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            v69 = (unint64_t)v304._object;
            countAndFlagsBits = v304._countAndFlagsBits;
          }
          goto LABEL_107;
        }
        v70 = objc_msgSend(v66, sel__parameterString);
        if (v70)
        {
          v71 = v70;
          v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
          v74 = v73;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (v75 = objc_msgSend(v66, sel_path)) != 0)
          {
            v76 = v75;
            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            v79 = v78;

            v304._countAndFlagsBits = (uint64_t)v77;
            v304._object = v79;
            swift_bridgeObjectRetain();
            v80._countAndFlagsBits = 59;
            v80._object = (void *)0xE100000000000000;
            String.append(_:)(v80);
            v66 = v291;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v81._countAndFlagsBits = (uint64_t)v72;
            v81._object = v74;
            String.append(_:)(v81);
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
          }
          else
          {
            v304._countAndFlagsBits = 59;
            v304._object = (void *)0xE100000000000000;
            v134._countAndFlagsBits = (uint64_t)v72;
            v134._object = v74;
            String.append(_:)(v134);
            swift_release();
            swift_release();

          }
          swift_bridgeObjectRelease();
          v133 = (unint64_t)v304._object;
          v135 = v304._countAndFlagsBits;
        }
        else
        {
          v136 = objc_msgSend(v66, sel_path);
          if (v136)
          {
            v137 = v136;
            v135 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
            v133 = v138;
            swift_release();
            swift_release();

          }
          else
          {
            swift_release();
            swift_release();

            v135 = 0;
            v133 = 0xE000000000000000;
          }
        }
        goto LABEL_122;
      }
    }
    else
    {
      swift_release();
      swift_release();

    }
  }
  else
  {
    v288 = v3;
    v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  v20 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v298 = MEMORY[0x1E0DEE9E0];
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v23 = v22;
  v302[0] = v6;
  lazy protocol witness table accessor for type URL and conformance URL();
  v24 = v10;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v21, v23);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v27 = v26;
  v304._countAndFlagsBits = (uint64_t)v24;
  v304._object = v5;
  v305[0] = v6;
  v301 = URL.path(percentEncoded:)(0);
  countAndFlagsBits = (uint64_t)&v301;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v25, v27);
  v28 = v298;
  if (*(_QWORD *)(v298 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v20 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v29 = *(_QWORD *)(v298 + 64);
  v291 = (_BYTE *)(v298 + 64);
  v30 = -1;
  v31 = -1 << *(_BYTE *)(v298 + 32);
  v288 = ~v31;
  if (-v31 < 64)
    v30 = ~(-1 << -(char)v31);
  v32 = v30 & v29;
  v290 = (unint64_t)(63 - v31) >> 6;
  v6 = v305;
  v10 = v300;
  v17 = v302;
  v289 = (char *)(v20 + 8);
  swift_bridgeObjectRetain();
  v293 = 0;
  v292 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (1)
  {
    if (v32)
    {
      v294 = (v32 - 1) & v32;
      v41 = __clz(__rbit64(v32)) | (v293 << 6);
      goto LABEL_45;
    }
    v42 = v293 + 1;
    if (__OFADD__(v293, 1))
      goto LABEL_245;
    if (v42 >= v290)
      break;
    v43 = *(_QWORD *)&v291[8 * v42];
    v44 = v293 + 1;
    if (!v43)
    {
      v44 = v293 + 2;
      if (v293 + 2 >= v290)
        break;
      v43 = *(_QWORD *)&v291[8 * v44];
      if (!v43)
      {
        v44 = v293 + 3;
        if (v293 + 3 >= v290)
          break;
        v43 = *(_QWORD *)&v291[8 * v44];
        if (!v43)
        {
          v44 = v293 + 4;
          if (v293 + 4 >= v290)
            break;
          v43 = *(_QWORD *)&v291[8 * v44];
          if (!v43)
          {
            v44 = v293 + 5;
            if (v293 + 5 >= v290)
              break;
            v43 = *(_QWORD *)&v291[8 * v44];
            if (!v43)
            {
              v44 = v293 + 6;
              if (v293 + 6 >= v290)
                break;
              v43 = *(_QWORD *)&v291[8 * v44];
              if (!v43)
              {
                v45 = v293 + 7;
                if (v293 + 7 >= v290)
                  break;
                v43 = *(_QWORD *)&v291[8 * v45];
                if (!v43)
                {
                  while (1)
                  {
                    v44 = v45 + 1;
                    if (__OFADD__(v45, 1))
                      goto LABEL_255;
                    if (v44 >= v290)
                      goto LABEL_49;
                    v43 = *(_QWORD *)&v291[8 * v44];
                    ++v45;
                    if (v43)
                      goto LABEL_44;
                  }
                }
                v44 = v293 + 7;
              }
            }
          }
        }
      }
    }
LABEL_44:
    v294 = (v43 - 1) & v43;
    v41 = __clz(__rbit64(v43)) + (v44 << 6);
    v293 = v44;
LABEL_45:
    v46 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * v41);
    v48 = *v46;
    v47 = v46[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v28 + 56) + 40 * v41, (uint64_t)v6);
    v304._countAndFlagsBits = v48;
    v304._object = (void *)v47;
    v49 = *((_OWORD *)v6 + 1);
    v295 = *(_OWORD *)v6;
    v296 = v49;
    v297 = v6[4];
    v298 = v48;
    v299 = v47;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    countAndFlagsBits = v47;
    outlined init with take of Any(v10, v17);
    outlined init with take of Any(v17, v303);
    outlined init with take of Any(v303, &v301);
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47);
    v51 = v50;
    if ((v52 & 1) != 0)
    {
      v33 = v20[6];
      v34 = v6;
      v35 = v20;
      v36 = v17;
      v37 = v10;
      v38 = v28;
      v39 = (uint64_t *)(v33 + 16 * v50);
      swift_bridgeObjectRelease();
      *v39 = v48;
      v39[1] = countAndFlagsBits;
      v28 = v38;
      v10 = v37;
      v17 = v36;
      v20 = v35;
      v6 = v34;
      v40 = (_OWORD *)(v20[7] + 32 * v51);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      outlined init with take of Any(&v301, v40);
    }
    else
    {
      if (v20[2] >= v20[3])
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
        goto LABEL_256;
      }
      *(_QWORD *)&v289[(v50 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v50;
      v53 = (uint64_t *)(v20[6] + 16 * v50);
      *v53 = v48;
      v53[1] = countAndFlagsBits;
      outlined init with take of Any(&v301, (_OWORD *)(v20[7] + 32 * v50));
      v54 = v20[2];
      v55 = __OFADD__(v54, 1);
      v56 = v54 + 1;
      if (v55)
        goto LABEL_244;
      v20[2] = v56;
    }
    v32 = v294;
  }
LABEL_49:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v57 = objc_allocWithZone((Class)NSError);
  v58 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, 262, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v5 = objc_msgSend(v59, sel_domain);
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v61;

  if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v62)
    goto LABEL_237;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return (id)swift_willThrow();
  __break(1u);
LABEL_55:
  v64 = objc_msgSend(v17, sel_isFileURL);
  swift_release();
  swift_release();

  if ((v64 & 1) != 0)
    goto LABEL_59;
LABEL_67:
  v82 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v298 = MEMORY[0x1E0DEE9E0];
  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v85 = v84;
  v301._countAndFlagsBits = (uint64_t)v17;
  v301._object = (void *)v7;
  v302[0] = v9;
  lazy protocol witness table accessor for type URL and conformance URL();
  v86 = v17;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v83, v85);
  v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v89 = v88;
  v304._countAndFlagsBits = (uint64_t)v86;
  v304._object = (void *)v7;
  v305[0] = v9;
  v301 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v87, v89);
  v90 = v298;
  if (*(_QWORD *)(v298 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v82 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v91 = *(_QWORD *)(v298 + 64);
  v291 = (_BYTE *)(v298 + 64);
  v92 = -1;
  v93 = -1 << *(_BYTE *)(v298 + 32);
  v288 = ~v93;
  if (-v93 < 64)
    v92 = ~(-1 << -(char)v93);
  v94 = v92 & v91;
  v290 = (unint64_t)(63 - v93) >> 6;
  v6 = v305;
  v95 = v300;
  v96 = v302;
  v289 = (char *)(v82 + 8);
  swift_bridgeObjectRetain();
  v293 = 0;
  v292 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (2)
  {
    if (v94)
    {
      v294 = (v94 - 1) & v94;
      v105 = __clz(__rbit64(v94)) | (v293 << 6);
LABEL_96:
      v110 = (uint64_t *)(*(_QWORD *)(v90 + 48) + 16 * v105);
      v112 = *v110;
      v111 = v110[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v90 + 56) + 40 * v105, (uint64_t)v6);
      v304._countAndFlagsBits = v112;
      v304._object = (void *)v111;
      v113 = *((_OWORD *)v6 + 1);
      v295 = *(_OWORD *)v6;
      v296 = v113;
      v297 = v6[4];
      v298 = v112;
      v299 = v111;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      countAndFlagsBits = v111;
      outlined init with take of Any(v95, v96);
      outlined init with take of Any(v96, v303);
      outlined init with take of Any(v303, &v301);
      v114 = specialized __RawDictionaryStorage.find<A>(_:)(v112, v111);
      v115 = v114;
      if ((v116 & 1) != 0)
      {
        v97 = v82[6];
        v98 = v6;
        v99 = v82;
        v100 = v96;
        v101 = v95;
        v102 = v90;
        v103 = (uint64_t *)(v97 + 16 * v114);
        swift_bridgeObjectRelease();
        *v103 = v112;
        v103[1] = countAndFlagsBits;
        v90 = v102;
        v95 = v101;
        v96 = v100;
        v82 = v99;
        v6 = v98;
        v104 = (_OWORD *)(v82[7] + 32 * v115);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
        outlined init with take of Any(&v301, v104);
      }
      else
      {
        if (v82[2] >= v82[3])
          goto LABEL_246;
        *(_QWORD *)&v289[(v114 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v114;
        v117 = (uint64_t *)(v82[6] + 16 * v114);
        *v117 = v112;
        v117[1] = countAndFlagsBits;
        outlined init with take of Any(&v301, (_OWORD *)(v82[7] + 32 * v114));
        v118 = v82[2];
        v55 = __OFADD__(v118, 1);
        v119 = v118 + 1;
        if (v55)
          goto LABEL_247;
        v82[2] = v119;
      }
      v94 = v294;
      continue;
    }
    break;
  }
  v106 = v293 + 1;
  if (__OFADD__(v293, 1))
    goto LABEL_250;
  if (v106 < v290)
  {
    v107 = *(_QWORD *)&v291[8 * v106];
    v108 = v293 + 1;
    if (!v107)
    {
      v108 = v293 + 2;
      if (v293 + 2 >= v290)
        goto LABEL_100;
      v107 = *(_QWORD *)&v291[8 * v108];
      if (!v107)
      {
        v108 = v293 + 3;
        if (v293 + 3 >= v290)
          goto LABEL_100;
        v107 = *(_QWORD *)&v291[8 * v108];
        if (!v107)
        {
          v108 = v293 + 4;
          if (v293 + 4 >= v290)
            goto LABEL_100;
          v107 = *(_QWORD *)&v291[8 * v108];
          if (!v107)
          {
            v108 = v293 + 5;
            if (v293 + 5 >= v290)
              goto LABEL_100;
            v107 = *(_QWORD *)&v291[8 * v108];
            if (!v107)
            {
              v108 = v293 + 6;
              if (v293 + 6 >= v290)
                goto LABEL_100;
              v107 = *(_QWORD *)&v291[8 * v108];
              if (!v107)
              {
                v109 = v293 + 7;
                if (v293 + 7 >= v290)
                  goto LABEL_100;
                v107 = *(_QWORD *)&v291[8 * v109];
                if (!v107)
                {
                  while (1)
                  {
                    v108 = v109 + 1;
                    if (__OFADD__(v109, 1))
                      break;
                    if (v108 >= v290)
                      goto LABEL_100;
                    v107 = *(_QWORD *)&v291[8 * v108];
                    ++v109;
                    if (v107)
                      goto LABEL_95;
                  }
LABEL_256:
                  __break(1u);
                  goto LABEL_257;
                }
                v108 = v293 + 7;
              }
            }
          }
        }
      }
    }
LABEL_95:
    v294 = (v107 - 1) & v107;
    v105 = __clz(__rbit64(v107)) + (v108 << 6);
    v293 = v108;
    goto LABEL_96;
  }
LABEL_100:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v120 = objc_allocWithZone((Class)NSError);
  v121 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  object = objc_msgSend(v120, sel_initWithDomain_code_userInfo_, v121, 518, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v5 = objc_msgSend(object, sel_domain);
  v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v123;

  if (v122 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v124)
    goto LABEL_237;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return (id)swift_willThrow();
  __break(1u);
LABEL_106:
  v69 = (unint64_t)object;
LABEL_107:
  v301._countAndFlagsBits = Set.init(minimumCapacity:)();
  v126 = specialized Set._Variant.insert(_:)(&v298, 0x2FuLL);
  v127 = v301._countAndFlagsBits;
  v128 = HIBYTE(v69) & 0xF;
  if ((v69 & 0x2000000000000000) == 0)
    v128 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v128)
  {
    swift_bridgeObjectRelease();
    v290 = 0;
    v133 = 0xE000000000000000;
    v66 = v291;
    v139 = v289;
    goto LABEL_119;
  }
  v294 = v9;
  v301._countAndFlagsBits = countAndFlagsBits;
  v301._object = (void *)v69;
  MEMORY[0x1E0C80A78](v126);
  v285 = (uint64_t)&v301;
  v286 = v127;
  swift_bridgeObjectRetain();
  v129 = v288;
  v290 = (uint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v284, countAndFlagsBits, v69);
  v288 = v129;
  if (v130 == 1)
  {
    v131 = v301;
    swift_bridgeObjectRetain();
    v290 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v131._countAndFlagsBits, (unint64_t)v131._object, v127);
    v133 = v132;
    swift_bridgeObjectRelease();
  }
  else
  {
    v133 = v130;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v294;
  v66 = v291;
  v139 = v289;
  if (v133)
  {
LABEL_119:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v135 = v290;
  }
  else
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v135 = 0;
    v133 = 0xE000000000000000;
  }
  swift_release();
  swift_release();

LABEL_122:
  swift_retain();
  v140 = v292;
  swift_retain();
  v141 = _foundation_swift_url_feature_enabled();
  v289 = (char *)v133;
  v292 = v140;
  if ((v141 & 1) != 0)
  {
    v290 = v135;
    v304._countAndFlagsBits = (uint64_t)v140;
    v304._object = (void *)v7;
    v305[0] = v9;
    v287 = (uint64_t)v140;
    swift_retain();
    swift_retain();
    v142 = URL.path(percentEncoded:)(1);
    v304 = v142;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v142._countAndFlagsBits, (unint64_t)v142._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v301._countAndFlagsBits = Set.init(minimumCapacity:)();
    v143 = specialized Set._Variant.insert(_:)(&v298, 0x2FuLL);
    v144 = v301._countAndFlagsBits;
    v145 = v304;
    v146 = ((unint64_t)v304._object >> 56) & 0xF;
    if (((uint64_t)v304._object & 0x2000000000000000) == 0)
      v146 = v304._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v146)
    {
      swift_bridgeObjectRelease();
      v151 = 0;
      v153 = 0xE000000000000000;
      goto LABEL_142;
    }
    v294 = v9;
    v301 = v304;
    MEMORY[0x1E0C80A78](v143);
    v285 = (uint64_t)&v301;
    v286 = v144;
    swift_bridgeObjectRetain();
    v147 = v288;
    v148 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v284, v145._countAndFlagsBits, (unint64_t)v145._object);
    v288 = v147;
    if (v149 == 1)
    {
      v150 = v301;
      swift_bridgeObjectRetain();
      v151 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v150._countAndFlagsBits, (unint64_t)v150._object, v144);
      v153 = v152;
      swift_bridgeObjectRelease();
    }
    else
    {
      v151 = (unint64_t)v148;
      v153 = v149;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v294;
    if (v153)
    {
LABEL_142:
      swift_release();
      swift_release();
      v172 = v7;
      v173 = (id)v287;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
      v172 = v7;
      v173 = (id)v287;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v151 = 0;
      v153 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    v174 = (unint64_t)v289;
    v135 = v290;
    v7 = v172;
    v66 = v291;
  }
  else
  {
    v154 = objc_msgSend(v140, sel__parameterString);
    if (v154)
    {
      v155 = v154;
      v290 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
      v156 = v140;
      v158 = v157;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v159 = objc_msgSend(v156, sel_path)) != 0)
      {
        v160 = v159;
        v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
        v294 = v9;
        v162 = (uint64_t)v161;
        v163 = v135;
        v165 = v164;

        v304._countAndFlagsBits = v162;
        v304._object = v165;
        swift_bridgeObjectRetain();
        v166._countAndFlagsBits = 59;
        v166._object = (void *)0xE100000000000000;
        String.append(_:)(v166);
        v135 = v163;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v167._countAndFlagsBits = v290;
        v167._object = v158;
        String.append(_:)(v167);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        v9 = v294;
        v66 = v291;
      }
      else
      {
        v304._countAndFlagsBits = 59;
        v304._object = (void *)0xE100000000000000;
        v168._countAndFlagsBits = v290;
        v168._object = v158;
        String.append(_:)(v168);
        swift_release();
        swift_release();

      }
      swift_bridgeObjectRelease();
      v153 = (unint64_t)v304._object;
      v151 = v304._countAndFlagsBits;
    }
    else
    {
      v169 = objc_msgSend(v140, sel_path);
      if (v169)
      {
        v170 = v169;
        v151 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v169);
        v153 = v171;
        swift_release();
        swift_release();

      }
      else
      {
        swift_release();
        swift_release();

        v151 = 0;
        v153 = 0xE000000000000000;
      }
    }
    v174 = (unint64_t)v289;
  }
  v175 = HIBYTE(v174) & 0xF;
  if ((v174 & 0x2000000000000000) == 0)
    v175 = v135 & 0xFFFFFFFFFFFFLL;
  if (!v175)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v183 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v298 = MEMORY[0x1E0DEE9E0];
    v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v186 = v185;
    v301._countAndFlagsBits = (uint64_t)v66;
    v301._object = v5;
    v302[0] = v6;
    lazy protocol witness table accessor for type URL and conformance URL();
    v187 = v66;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v184, v186);
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v190 = v189;
    v304._countAndFlagsBits = (uint64_t)v187;
    v304._object = v5;
    v305[0] = v6;
    v301 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v188, v190);
    v191 = v298;
    if (*(_QWORD *)(v298 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v183 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v192 = *(_QWORD *)(v191 + 64);
    v290 = v191 + 64;
    v193 = -1;
    v194 = -1 << *(_BYTE *)(v191 + 32);
    v287 = ~v194;
    if (-v194 < 64)
      v193 = ~(-1 << -(char)v194);
    v195 = v193 & v192;
    v291 = (_BYTE *)((unint64_t)(63 - v194) >> 6);
    v196 = v305;
    v197 = v300;
    v198 = v302;
    v289 = (char *)(v183 + 8);
    swift_bridgeObjectRetain();
    v293 = 0;
    v292 = (id)(MEMORY[0x1E0DEE9B8] + 8);
    while (1)
    {
      if (v195)
      {
        v294 = (v195 - 1) & v195;
        v207 = __clz(__rbit64(v195)) | (v293 << 6);
      }
      else
      {
        v208 = v293 + 1;
        if (__OFADD__(v293, 1))
          goto LABEL_251;
        if (v208 >= (uint64_t)v291)
        {
LABEL_191:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v223 = objc_allocWithZone((Class)NSError);
          v224 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v225 = objc_msgSend(v223, sel_initWithDomain_code_userInfo_, v224, 4, _NativeDictionary.bridged()(), v287);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v226 = objc_msgSend(v225, sel_domain);
          v227 = static String._unconditionallyBridgeFromObjectiveC(_:)(v226);
          v9 = v228;

          if (v227 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v9 != v229)
          {
            v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v7 & 1) != 0)
              return (id)swift_willThrow();
            __break(1u);
            goto LABEL_197;
          }
LABEL_237:
          swift_bridgeObjectRelease_n();
          return (id)swift_willThrow();
        }
        v209 = *(_QWORD *)(v290 + 8 * v208);
        if (!v209)
        {
          v210 = v293 + 2;
          if (v293 + 2 >= (uint64_t)v291)
            goto LABEL_191;
          v209 = *(_QWORD *)(v290 + 8 * v210);
          if (!v209)
          {
            v210 = v293 + 3;
            if (v293 + 3 >= (uint64_t)v291)
              goto LABEL_191;
            v209 = *(_QWORD *)(v290 + 8 * v210);
            if (!v209)
            {
              v210 = v293 + 4;
              if (v293 + 4 >= (uint64_t)v291)
                goto LABEL_191;
              v209 = *(_QWORD *)(v290 + 8 * v210);
              if (!v209)
              {
                v210 = v293 + 5;
                if (v293 + 5 >= (uint64_t)v291)
                  goto LABEL_191;
                v209 = *(_QWORD *)(v290 + 8 * v210);
                if (!v209)
                {
                  v210 = v293 + 6;
                  if (v293 + 6 >= (uint64_t)v291)
                    goto LABEL_191;
                  v209 = *(_QWORD *)(v290 + 8 * v210);
                  if (!v209)
                  {
                    v210 = v293 + 7;
                    if (v293 + 7 >= (uint64_t)v291)
                      goto LABEL_191;
                    v209 = *(_QWORD *)(v290 + 8 * v210);
                    if (!v209)
                    {
                      while (1)
                      {
                        v208 = v210 + 1;
                        if (__OFADD__(v210, 1))
                          break;
                        if (v208 >= (uint64_t)v291)
                          goto LABEL_191;
                        v209 = *(_QWORD *)(v290 + 8 * v208);
                        ++v210;
                        if (v209)
                          goto LABEL_182;
                      }
LABEL_257:
                      __break(1u);
LABEL_258:
                      swift_once();
LABEL_242:
                      v283 = (id)_nilObjCError;
                      return (id)swift_willThrow();
                    }
                  }
                }
              }
            }
          }
          v208 = v210;
        }
LABEL_182:
        v294 = (v209 - 1) & v209;
        v207 = __clz(__rbit64(v209)) + (v208 << 6);
        v293 = v208;
      }
      v211 = (uint64_t *)(*(_QWORD *)(v191 + 48) + 16 * v207);
      v213 = *v211;
      v212 = (void *)v211[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v191 + 56) + 40 * v207, (uint64_t)v196);
      v304._countAndFlagsBits = v213;
      v304._object = v212;
      v214 = *((_OWORD *)v196 + 1);
      v295 = *(_OWORD *)v196;
      v296 = v214;
      v297 = v196[4];
      v298 = v213;
      v299 = (uint64_t)v212;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v215 = v298;
      v216 = v299;
      outlined init with take of Any(v197, v198);
      outlined init with take of Any(v198, v303);
      outlined init with take of Any(v303, &v301);
      v217 = specialized __RawDictionaryStorage.find<A>(_:)(v215, v216);
      v218 = v217;
      if ((v219 & 1) != 0)
      {
        v199 = v183[6];
        v200 = v196;
        v201 = v183;
        v202 = v198;
        v203 = v197;
        v204 = v191;
        v205 = (uint64_t *)(v199 + 16 * v217);
        swift_bridgeObjectRelease();
        *v205 = v215;
        v205[1] = v216;
        v191 = v204;
        v197 = v203;
        v198 = v202;
        v183 = v201;
        v196 = v200;
        v206 = (_OWORD *)(v183[7] + 32 * v218);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v206);
        outlined init with take of Any(&v301, v206);
      }
      else
      {
        if (v183[2] >= v183[3])
          goto LABEL_248;
        *(_QWORD *)&v289[(v217 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v217;
        v220 = (uint64_t *)(v183[6] + 16 * v217);
        *v220 = v215;
        v220[1] = v216;
        outlined init with take of Any(&v301, (_OWORD *)(v183[7] + 32 * v217));
        v221 = v183[2];
        v55 = __OFADD__(v221, 1);
        v222 = v221 + 1;
        if (v55)
          goto LABEL_249;
        v183[2] = v222;
      }
      v195 = v294;
    }
  }
  v176 = HIBYTE(v153) & 0xF;
  if ((v153 & 0x2000000000000000) == 0)
    v176 = v151 & 0xFFFFFFFFFFFFLL;
  if (v176)
  {
    v177 = MEMORY[0x186DA9F5C](v293);
    if (!v177)
    {
      LODWORD(v286) = 0;
      v285 = 48;
      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v178 = (void *)v177;
    v179 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v180 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v304._countAndFlagsBits = 0;
    v181 = objc_msgSend(v178, sel_createSymbolicLinkAtPath_withDestinationPath_error_, v179, v180, &v304);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v181 & 1) != 0)
      return (id)v304._countAndFlagsBits;
    if (v304._countAndFlagsBits)
    {
      (id)v304._countAndFlagsBits;
      return (id)swift_willThrow();
    }
    if (one-time initialization token for _nilObjCError != -1)
      goto LABEL_258;
    goto LABEL_242;
  }
LABEL_197:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v231 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v298 = MEMORY[0x1E0DEE9E0];
  v232 = v9;
  v233 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v235 = v234;
  v236 = v292;
  v301._countAndFlagsBits = (uint64_t)v292;
  v301._object = (void *)v7;
  v302[0] = v232;
  lazy protocol witness table accessor for type URL and conformance URL();
  v237 = v236;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v233, v235);
  v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v240 = v239;
  v304._countAndFlagsBits = (uint64_t)v237;
  v304._object = (void *)v7;
  v305[0] = v232;
  v301 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v304, (uint64_t)v238, v240);
  v241 = v298;
  if (*(_QWORD *)(v298 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v231 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v242 = *(_QWORD *)(v241 + 64);
  v291 = (_BYTE *)(v241 + 64);
  v243 = -1;
  v244 = -1 << *(_BYTE *)(v241 + 32);
  v287 = ~v244;
  if (-v244 < 64)
    v243 = ~(-1 << -(char)v244);
  v245 = v243 & v242;
  v290 = (unint64_t)(63 - v244) >> 6;
  v246 = v305;
  v247 = v300;
  v248 = v302;
  v289 = (char *)(v231 + 8);
  swift_bridgeObjectRetain();
  v293 = 0;
  v292 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (2)
  {
    if (v245)
    {
      v294 = (v245 - 1) & v245;
      v257 = __clz(__rbit64(v245)) | (v293 << 6);
LABEL_223:
      v261 = (uint64_t *)(*(_QWORD *)(v241 + 48) + 16 * v257);
      v263 = *v261;
      v262 = (void *)v261[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v241 + 56) + 40 * v257, (uint64_t)v246);
      v304._countAndFlagsBits = v263;
      v304._object = v262;
      v264 = *((_OWORD *)v246 + 1);
      v295 = *(_OWORD *)v246;
      v296 = v264;
      v297 = v246[4];
      v298 = v263;
      v299 = (uint64_t)v262;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v265 = v298;
      v266 = v299;
      outlined init with take of Any(v247, v248);
      outlined init with take of Any(v248, v303);
      outlined init with take of Any(v303, &v301);
      v267 = specialized __RawDictionaryStorage.find<A>(_:)(v265, v266);
      v268 = v267;
      if ((v269 & 1) != 0)
      {
        v249 = v231[6];
        v250 = v246;
        v251 = v231;
        v252 = v248;
        v253 = v247;
        v254 = v241;
        v255 = (uint64_t *)(v249 + 16 * v267);
        swift_bridgeObjectRelease();
        *v255 = v265;
        v255[1] = v266;
        v241 = v254;
        v247 = v253;
        v248 = v252;
        v231 = v251;
        v246 = v250;
        v256 = (_OWORD *)(v231[7] + 32 * v268);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v256);
        outlined init with take of Any(&v301, v256);
      }
      else
      {
        if (v231[2] >= v231[3])
          goto LABEL_252;
        *(_QWORD *)&v289[(v267 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v267;
        v270 = (uint64_t *)(v231[6] + 16 * v267);
        *v270 = v265;
        v270[1] = v266;
        outlined init with take of Any(&v301, (_OWORD *)(v231[7] + 32 * v267));
        v271 = v231[2];
        v55 = __OFADD__(v271, 1);
        v272 = v271 + 1;
        if (v55)
          goto LABEL_253;
        v231[2] = v272;
      }
      v245 = v294;
      continue;
    }
    break;
  }
  v258 = v293 + 1;
  if (__OFADD__(v293, 1))
    goto LABEL_254;
  if (v258 >= v290)
    goto LABEL_231;
  v259 = *(_QWORD *)&v291[8 * v258];
  if (v259)
  {
LABEL_222:
    v294 = (v259 - 1) & v259;
    v257 = __clz(__rbit64(v259)) + (v258 << 6);
    v293 = v258;
    goto LABEL_223;
  }
  v260 = v293 + 2;
  if (v293 + 2 >= v290)
    goto LABEL_231;
  v259 = *(_QWORD *)&v291[8 * v260];
  if (v259)
    goto LABEL_221;
  v260 = v293 + 3;
  if (v293 + 3 >= v290)
    goto LABEL_231;
  v259 = *(_QWORD *)&v291[8 * v260];
  if (v259)
    goto LABEL_221;
  v260 = v293 + 4;
  if (v293 + 4 >= v290)
    goto LABEL_231;
  v259 = *(_QWORD *)&v291[8 * v260];
  if (v259)
    goto LABEL_221;
  v260 = v293 + 5;
  if (v293 + 5 >= v290)
    goto LABEL_231;
  v259 = *(_QWORD *)&v291[8 * v260];
  if (v259)
    goto LABEL_221;
  v260 = v293 + 6;
  if (v293 + 6 >= v290)
    goto LABEL_231;
  v259 = *(_QWORD *)&v291[8 * v260];
  if (v259)
    goto LABEL_221;
  v260 = v293 + 7;
  if (v293 + 7 >= v290)
    goto LABEL_231;
  v259 = *(_QWORD *)&v291[8 * v260];
  if (v259)
  {
LABEL_221:
    v258 = v260;
    goto LABEL_222;
  }
  while (1)
  {
    v258 = v260 + 1;
    if (__OFADD__(v260, 1))
      __break(1u);
    if (v258 >= v290)
      break;
    v259 = *(_QWORD *)&v291[8 * v258];
    ++v260;
    if (v259)
      goto LABEL_222;
  }
LABEL_231:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v273 = objc_allocWithZone((Class)NSError);
  v274 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v275 = objc_msgSend(v273, sel_initWithDomain_code_userInfo_, v274, 4, _NativeDictionary.bridged()(), v287);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v276 = objc_msgSend(v275, sel_domain);
  v277 = static String._unconditionallyBridgeFromObjectiveC(_:)(v276);
  v279 = v278;

  if (v277 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v279 == v280)
    goto LABEL_237;
  v282 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v282 & 1) == 0)
  {
    __break(1u);
    goto LABEL_237;
  }
  return (id)swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _FileManagerImpl.linkItem(atPath:toPath:)(Swift::String atPath, Swift::String toPath)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[8];
  char v12;
  uint64_t v13;

  v3 = v2;
  object = toPath._object;
  countAndFlagsBits = toPath._countAndFlagsBits;
  v6 = atPath._object;
  v7 = atPath._countAndFlagsBits;
  v8 = MEMORY[0x186DA9F5C](v3);
  if (v8)
  {
    v12 = 0;
    v13 = v8;
    MEMORY[0x1E0C80A78](v8);
    v11[2] = v7;
    v11[3] = v6;
    v11[4] = countAndFlagsBits;
    v11[5] = object;
    v11[6] = v9;
    v11[7] = &v12;
    v10 = v9;
    specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v11, v7, (unint64_t)v6);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

id _FileManagerImpl.linkItem(at:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;
  unsigned __int8 v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t *v37;
  _OWORD *v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  int64_t v60;
  uint64_t v61;
  unsigned __int8 v63;
  char v64;
  _QWORD *v65;
  Swift::String v66;
  uint64_t countAndFlagsBits;
  unint64_t object;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t *v88;
  _OWORD *v89;
  unint64_t v90;
  int64_t v91;
  unint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  id v108;
  id v109;
  int64_t v110;
  uint64_t v111;
  id v113;
  void *v114;
  id v115;
  void *v116;
  void *v117;
  id v118;
  void *v119;
  id v120;
  void *v121;
  void *v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  Swift::Int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  Swift::String v135;
  unint64_t v136;
  id v137;
  void *v138;
  void *v139;
  unint64_t v140;
  id v141;
  _BYTE *v142;
  char v143;
  Swift::String v144;
  uint64_t v145;
  uint64_t v146;
  Swift::String v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  Swift::String v151;
  unint64_t v152;
  unint64_t v153;
  id v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  id v159;
  void *v160;
  id v161;
  uint64_t v162;
  void *v163;
  void *v164;
  Swift::String v165;
  Swift::String v166;
  Swift::String v167;
  void *v168;
  id v169;
  void *v170;
  unint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  id result;
  _QWORD *v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  _OWORD *v195;
  _OWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  _OWORD *v200;
  _OWORD *v201;
  uint64_t v202;
  uint64_t *v203;
  _OWORD *v204;
  unint64_t v205;
  int64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  void *v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  id v221;
  uint64_t v222;
  id v223;
  id v224;
  id v225;
  int64_t v226;
  uint64_t v227;
  _QWORD *v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  id v234;
  id v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  _OWORD *v244;
  _OWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  _OWORD *v249;
  _OWORD *v250;
  uint64_t v251;
  uint64_t *v252;
  _OWORD *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  void *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  id v270;
  uint64_t v271;
  id v272;
  id v273;
  id v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v279;
  id v280;
  _BYTE v281[16];
  uint64_t v282;
  uint64_t v283;
  _BYTE *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  int64_t v288;
  uint64_t v289;
  id v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE v298[32];
  Swift::String v299;
  _QWORD v300[4];
  _OWORD v301[2];
  Swift::String v302;
  _QWORD v303[6];

  v3 = v2;
  v303[5] = *MEMORY[0x1E0C80C00];
  v4 = *(void **)a1;
  v5 = *(id *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 16);
  v8 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  swift_retain();
  v10 = v4;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v302._countAndFlagsBits = (uint64_t)v10;
    v302._object = v5;
    v303[0] = v6;
    URL.scheme.getter();
    if (v11)
    {
      v291 = v7;
      v286 = v3;
      v12 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        v7 = v291;
        goto LABEL_10;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      v7 = v291;
      if ((v14 & 1) != 0)
      {
LABEL_10:
        swift_retain();
        v15 = v8;
        swift_retain();
        if (!_foundation_swift_url_feature_enabled())
          goto LABEL_54;
        v302._countAndFlagsBits = (uint64_t)v15;
        v302._object = (void *)v7;
        v303[0] = v9;
        URL.scheme.getter();
        if (!v16)
        {
          swift_release();
          swift_release();

          goto LABEL_62;
        }
        v291 = (uint64_t)v5;
        v17 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v17._countAndFlagsBits == 1701603686 && v17._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          v5 = (id)v291;
        }
        else
        {
          v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          v5 = (id)v291;
          if ((v64 & 1) == 0)
            goto LABEL_62;
        }
LABEL_58:
        v65 = v10;
        swift_retain();
        swift_retain();
        v290 = v65;
        if (!_foundation_swift_url_feature_enabled())
          goto LABEL_101;
        v302._countAndFlagsBits = (uint64_t)v65;
        v302._object = v5;
        v303[0] = v6;
        v287 = v65;
        swift_retain();
        swift_retain();
        v66 = URL.path(percentEncoded:)(1);
        countAndFlagsBits = v66._countAndFlagsBits;
        v302 = v66;
        swift_bridgeObjectRetain();
        if (String.count.getter() <= 1)
        {
          object = (unint64_t)v66._object;
        }
        else
        {
          object = (unint64_t)v66._object;
          if ((specialized BidirectionalCollection.last.getter(v66._countAndFlagsBits, (unint64_t)v66._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            object = (unint64_t)v302._object;
            countAndFlagsBits = v302._countAndFlagsBits;
          }
        }
        v289 = (uint64_t)v15;
        v299._countAndFlagsBits = Set.init(minimumCapacity:)();
        v125 = specialized Set._Variant.insert(_:)(&v296, 0x2FuLL);
        v126 = v299._countAndFlagsBits;
        v127 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000) == 0)
          v127 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (v127)
        {
          v288 = v9;
          v299._countAndFlagsBits = countAndFlagsBits;
          v299._object = (void *)object;
          MEMORY[0x1E0C80A78](v125);
          v282 = (uint64_t)&v299;
          v283 = v126;
          swift_bridgeObjectRetain();
          v128 = v286;
          v291 = (uint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v281, countAndFlagsBits, object);
          v286 = v128;
          if (v129 == 1)
          {
            v131 = (unint64_t)v299._object;
            v130 = v299._countAndFlagsBits;
            swift_bridgeObjectRetain();
            v291 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v130, v131, v126);
            v133 = v132;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v134 = v133;
          }
          else
          {
            v134 = v129;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          v9 = v288;
          if (!v134)
          {
            swift_release();
            swift_release();
            v141 = v287;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v136 = 0;
            v134 = 0xE000000000000000;
            goto LABEL_120;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v291 = 0;
          v134 = 0xE000000000000000;
        }
        swift_release();
        swift_release();
        v141 = v287;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v136 = v291;
LABEL_120:
        swift_release();
        swift_release();

        v15 = (_BYTE *)v289;
        goto LABEL_121;
      }
    }
    else
    {
      swift_release();
      swift_release();

    }
  }
  else
  {
    v286 = v3;
    v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v296 = MEMORY[0x1E0DEE9E0];
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v21 = v20;
  v300[0] = v6;
  lazy protocol witness table accessor for type URL and conformance URL();
  v22 = v10;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v19, v21);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v25 = v24;
  v302._countAndFlagsBits = (uint64_t)v22;
  v302._object = v5;
  v303[0] = v6;
  v299 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v23, v25);
  v26 = v296;
  if (*(_QWORD *)(v296 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v18 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v27 = *(_QWORD *)(v296 + 64);
  v289 = v296 + 64;
  v28 = -1;
  v29 = -1 << *(_BYTE *)(v296 + 32);
  v286 = ~v29;
  if (-v29 < 64)
    v28 = ~(-1 << -(char)v29);
  v30 = v28 & v27;
  v288 = (unint64_t)(63 - v29) >> 6;
  v6 = v303;
  v15 = v298;
  v10 = v300;
  v287 = (char *)(v18 + 8);
  swift_bridgeObjectRetain();
  v291 = 0;
  v290 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (1)
  {
    if (v30)
    {
      v292 = (v30 - 1) & v30;
      v39 = __clz(__rbit64(v30)) | (v291 << 6);
      goto LABEL_44;
    }
    v40 = v291 + 1;
    if (__OFADD__(v291, 1))
      goto LABEL_244;
    if (v40 >= v288)
      break;
    v41 = *(_QWORD *)(v289 + 8 * v40);
    v42 = v291 + 1;
    if (!v41)
    {
      v42 = v291 + 2;
      if (v291 + 2 >= v288)
        break;
      v41 = *(_QWORD *)(v289 + 8 * v42);
      if (!v41)
      {
        v42 = v291 + 3;
        if (v291 + 3 >= v288)
          break;
        v41 = *(_QWORD *)(v289 + 8 * v42);
        if (!v41)
        {
          v42 = v291 + 4;
          if (v291 + 4 >= v288)
            break;
          v41 = *(_QWORD *)(v289 + 8 * v42);
          if (!v41)
          {
            v42 = v291 + 5;
            if (v291 + 5 >= v288)
              break;
            v41 = *(_QWORD *)(v289 + 8 * v42);
            if (!v41)
            {
              v42 = v291 + 6;
              if (v291 + 6 >= v288)
                break;
              v41 = *(_QWORD *)(v289 + 8 * v42);
              if (!v41)
              {
                v43 = v291 + 7;
                if (v291 + 7 >= v288)
                  break;
                v41 = *(_QWORD *)(v289 + 8 * v43);
                if (!v41)
                {
                  while (1)
                  {
                    v42 = v43 + 1;
                    if (__OFADD__(v43, 1))
                      goto LABEL_254;
                    if (v42 >= v288)
                      goto LABEL_48;
                    v41 = *(_QWORD *)(v289 + 8 * v42);
                    ++v43;
                    if (v41)
                      goto LABEL_43;
                  }
                }
                v42 = v291 + 7;
              }
            }
          }
        }
      }
    }
LABEL_43:
    v292 = (v41 - 1) & v41;
    v39 = __clz(__rbit64(v41)) + (v42 << 6);
    v291 = v42;
LABEL_44:
    v44 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * v39);
    v46 = *v44;
    v45 = v44[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v26 + 56) + 40 * v39, (uint64_t)v6);
    v302._countAndFlagsBits = v46;
    v302._object = (void *)v45;
    v47 = *((_OWORD *)v6 + 1);
    v293 = *(_OWORD *)v6;
    v294 = v47;
    v295 = v6[4];
    v296 = v46;
    v297 = v45;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v48 = v45;
    outlined init with take of Any(v15, v10);
    outlined init with take of Any(v10, v301);
    outlined init with take of Any(v301, &v299);
    v49 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v45);
    v50 = v49;
    if ((v51 & 1) != 0)
    {
      v31 = v18[6];
      v32 = v6;
      v33 = v18;
      v34 = v10;
      v35 = v15;
      v36 = v26;
      v37 = (uint64_t *)(v31 + 16 * v49);
      swift_bridgeObjectRelease();
      *v37 = v46;
      v37[1] = v48;
      v26 = v36;
      v15 = v35;
      v10 = v34;
      v18 = v33;
      v6 = v32;
      v38 = (_OWORD *)(v18[7] + 32 * v50);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      outlined init with take of Any(&v299, v38);
    }
    else
    {
      if (v18[2] >= v18[3])
      {
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
        goto LABEL_255;
      }
      *(_QWORD *)&v287[(v49 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v49;
      v52 = (uint64_t *)(v18[6] + 16 * v49);
      *v52 = v46;
      v52[1] = v48;
      outlined init with take of Any(&v299, (_OWORD *)(v18[7] + 32 * v49));
      v53 = v18[2];
      v54 = __OFADD__(v53, 1);
      v55 = v53 + 1;
      if (v54)
        goto LABEL_243;
      v18[2] = v55;
    }
    v30 = v292;
  }
LABEL_48:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v56 = objc_allocWithZone((Class)NSError);
  v57 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v58 = objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, 262, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v5 = objc_msgSend(v58, sel_domain);
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v60;

  if (v59 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v61)
    goto LABEL_236;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return (id)swift_willThrow();
  __break(1u);
LABEL_54:
  v63 = objc_msgSend(v15, sel_isFileURL);
  swift_release();
  swift_release();

  if ((v63 & 1) != 0)
    goto LABEL_58;
LABEL_62:
  v69 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v296 = MEMORY[0x1E0DEE9E0];
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v72 = v71;
  v299._countAndFlagsBits = (uint64_t)v15;
  v299._object = (void *)v7;
  v300[0] = v9;
  lazy protocol witness table accessor for type URL and conformance URL();
  v73 = v15;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v70, v72);
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v76 = v75;
  v302._countAndFlagsBits = (uint64_t)v73;
  v302._object = (void *)v7;
  v303[0] = v9;
  v299 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v74, v76);
  v77 = v296;
  if (*(_QWORD *)(v296 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v69 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v78 = *(_QWORD *)(v296 + 64);
  v289 = v296 + 64;
  v79 = -1;
  v80 = -1 << *(_BYTE *)(v296 + 32);
  v286 = ~v80;
  if (-v80 < 64)
    v79 = ~(-1 << -(char)v80);
  v81 = v79 & v78;
  v288 = (unint64_t)(63 - v80) >> 6;
  v6 = v303;
  v15 = v298;
  v65 = v300;
  v287 = (char *)(v69 + 8);
  swift_bridgeObjectRetain();
  v291 = 0;
  v290 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (2)
  {
    if (v81)
    {
      v292 = (v81 - 1) & v81;
      v90 = __clz(__rbit64(v81)) | (v291 << 6);
LABEL_91:
      v95 = (uint64_t *)(*(_QWORD *)(v77 + 48) + 16 * v90);
      v97 = *v95;
      v96 = v95[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v77 + 56) + 40 * v90, (uint64_t)v6);
      v302._countAndFlagsBits = v97;
      v302._object = (void *)v96;
      v98 = *((_OWORD *)v6 + 1);
      v293 = *(_OWORD *)v6;
      v294 = v98;
      v295 = v6[4];
      v296 = v97;
      v297 = v96;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v99 = v96;
      outlined init with take of Any(v15, v65);
      outlined init with take of Any(v65, v301);
      outlined init with take of Any(v301, &v299);
      v100 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v96);
      v101 = v100;
      if ((v102 & 1) != 0)
      {
        v82 = v69[6];
        v83 = v6;
        v84 = v69;
        v85 = v65;
        v86 = v15;
        v87 = v77;
        v88 = (uint64_t *)(v82 + 16 * v100);
        swift_bridgeObjectRelease();
        *v88 = v97;
        v88[1] = v99;
        v77 = v87;
        v15 = v86;
        v65 = v85;
        v69 = v84;
        v6 = v83;
        v89 = (_OWORD *)(v69[7] + 32 * v101);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
        outlined init with take of Any(&v299, v89);
      }
      else
      {
        if (v69[2] >= v69[3])
          goto LABEL_245;
        *(_QWORD *)&v287[(v100 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v100;
        v103 = (uint64_t *)(v69[6] + 16 * v100);
        *v103 = v97;
        v103[1] = v99;
        outlined init with take of Any(&v299, (_OWORD *)(v69[7] + 32 * v100));
        v104 = v69[2];
        v54 = __OFADD__(v104, 1);
        v105 = v104 + 1;
        if (v54)
          goto LABEL_246;
        v69[2] = v105;
      }
      v81 = v292;
      continue;
    }
    break;
  }
  v91 = v291 + 1;
  if (__OFADD__(v291, 1))
    goto LABEL_247;
  if (v91 < v288)
  {
    v92 = *(_QWORD *)(v289 + 8 * v91);
    v93 = v291 + 1;
    if (!v92)
    {
      v93 = v291 + 2;
      if (v291 + 2 >= v288)
        goto LABEL_95;
      v92 = *(_QWORD *)(v289 + 8 * v93);
      if (!v92)
      {
        v93 = v291 + 3;
        if (v291 + 3 >= v288)
          goto LABEL_95;
        v92 = *(_QWORD *)(v289 + 8 * v93);
        if (!v92)
        {
          v93 = v291 + 4;
          if (v291 + 4 >= v288)
            goto LABEL_95;
          v92 = *(_QWORD *)(v289 + 8 * v93);
          if (!v92)
          {
            v93 = v291 + 5;
            if (v291 + 5 >= v288)
              goto LABEL_95;
            v92 = *(_QWORD *)(v289 + 8 * v93);
            if (!v92)
            {
              v93 = v291 + 6;
              if (v291 + 6 >= v288)
                goto LABEL_95;
              v92 = *(_QWORD *)(v289 + 8 * v93);
              if (!v92)
              {
                v94 = v291 + 7;
                if (v291 + 7 >= v288)
                  goto LABEL_95;
                v92 = *(_QWORD *)(v289 + 8 * v94);
                if (!v92)
                {
                  while (1)
                  {
                    v93 = v94 + 1;
                    if (__OFADD__(v94, 1))
                      break;
                    if (v93 >= v288)
                      goto LABEL_95;
                    v92 = *(_QWORD *)(v289 + 8 * v93);
                    ++v94;
                    if (v92)
                      goto LABEL_90;
                  }
LABEL_255:
                  __break(1u);
                  goto LABEL_256;
                }
                v93 = v291 + 7;
              }
            }
          }
        }
      }
    }
LABEL_90:
    v292 = (v92 - 1) & v92;
    v90 = __clz(__rbit64(v92)) + (v93 << 6);
    v291 = v93;
    goto LABEL_91;
  }
LABEL_95:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v106 = objc_allocWithZone((Class)NSError);
  v107 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v108 = objc_msgSend(v106, sel_initWithDomain_code_userInfo_, v107, 518, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v5 = objc_msgSend(v108, sel_domain);
  v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v110;

  if (v109 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v111)
    goto LABEL_236;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return (id)swift_willThrow();
  __break(1u);
LABEL_101:
  v113 = objc_msgSend(v65, sel__parameterString);
  if (v113)
  {
    v114 = v113;
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
    v117 = v116;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v118 = objc_msgSend(v65, sel_path)) != 0)
    {
      v119 = v118;
      v291 = (uint64_t)v115;
      v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
      v122 = v121;

      v302._countAndFlagsBits = (uint64_t)v120;
      v302._object = v122;
      swift_bridgeObjectRetain();
      v123._countAndFlagsBits = 59;
      v123._object = (void *)0xE100000000000000;
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v124._countAndFlagsBits = v291;
      v124._object = v117;
      String.append(_:)(v124);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v302._countAndFlagsBits = 59;
      v302._object = (void *)0xE100000000000000;
      v135._countAndFlagsBits = (uint64_t)v115;
      v135._object = v117;
      String.append(_:)(v135);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v134 = (unint64_t)v302._object;
    v136 = v302._countAndFlagsBits;
  }
  else
  {
    v137 = objc_msgSend(v65, sel_path);
    v138 = v65;
    if (v137)
    {
      v139 = v137;
      v136 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
      v134 = v140;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v136 = 0;
      v134 = 0xE000000000000000;
    }
  }
LABEL_121:
  v142 = v15;
  swift_retain();
  swift_retain();
  v143 = _foundation_swift_url_feature_enabled();
  v285 = (uint64_t)v142;
  if ((v143 & 1) != 0)
  {
    v291 = v136;
    v287 = (char *)v134;
    v302._countAndFlagsBits = (uint64_t)v142;
    v302._object = (void *)v7;
    v303[0] = v9;
    v284 = v142;
    swift_retain();
    swift_retain();
    v144 = URL.path(percentEncoded:)(1);
    v302 = v144;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v144._countAndFlagsBits, (unint64_t)v144._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v299._countAndFlagsBits = Set.init(minimumCapacity:)();
    v145 = specialized Set._Variant.insert(_:)(&v296, 0x2FuLL);
    v146 = v299._countAndFlagsBits;
    v147 = v302;
    v148 = ((unint64_t)v302._object >> 56) & 0xF;
    if (((uint64_t)v302._object & 0x2000000000000000) == 0)
      v148 = v302._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v148)
    {
      swift_bridgeObjectRelease();
      v289 = 0;
      v153 = 0xE000000000000000;
      v134 = (unint64_t)v287;
      v168 = v284;
      goto LABEL_141;
    }
    v288 = v9;
    v299 = v302;
    MEMORY[0x1E0C80A78](v145);
    v282 = (uint64_t)&v299;
    v283 = v146;
    swift_bridgeObjectRetain();
    v149 = v286;
    v289 = (uint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v281, v147._countAndFlagsBits, (unint64_t)v147._object);
    v286 = v149;
    if (v150 == 1)
    {
      v151 = v299;
      swift_bridgeObjectRetain();
      v289 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v151._countAndFlagsBits, (unint64_t)v151._object, v146);
      v153 = v152;
      swift_bridgeObjectRelease();
    }
    else
    {
      v153 = v150;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v288;
    v168 = v284;
    v134 = (unint64_t)v287;
    if (v153)
    {
LABEL_141:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v289 = 0;
      v153 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    v172 = v290;
    v136 = v291;
  }
  else
  {
    v154 = objc_msgSend(v142, sel__parameterString);
    if (v154)
    {
      v155 = v154;
      v289 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
      v156 = v142;
      v158 = v157;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v159 = objc_msgSend(v156, sel_path)) != 0)
      {
        v160 = v159;
        v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
        v291 = v136;
        v162 = (uint64_t)v161;
        v287 = (char *)v134;
        v164 = v163;

        v302._countAndFlagsBits = v162;
        v302._object = v164;
        swift_bridgeObjectRetain();
        v165._countAndFlagsBits = 59;
        v165._object = (void *)0xE100000000000000;
        String.append(_:)(v165);
        v134 = (unint64_t)v287;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v166._countAndFlagsBits = v289;
        v166._object = v158;
        String.append(_:)(v166);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        v136 = v291;
      }
      else
      {
        v302._countAndFlagsBits = 59;
        v302._object = (void *)0xE100000000000000;
        v167._countAndFlagsBits = v289;
        v167._object = v158;
        String.append(_:)(v167);
        swift_release();
        swift_release();

      }
      swift_bridgeObjectRelease();
      v153 = (unint64_t)v302._object;
      v289 = v302._countAndFlagsBits;
    }
    else
    {
      v169 = objc_msgSend(v142, sel_path);
      if (v169)
      {
        v170 = v169;
        v289 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v169);
        v153 = v171;
        swift_release();
        swift_release();

      }
      else
      {
        swift_release();
        swift_release();

        v289 = 0;
        v153 = 0xE000000000000000;
      }
    }
    v172 = v290;
  }
  v173 = HIBYTE(v134) & 0xF;
  if ((v134 & 0x2000000000000000) == 0)
    v173 = v136 & 0xFFFFFFFFFFFFLL;
  if (!v173)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v181 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v296 = MEMORY[0x1E0DEE9E0];
    v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v184 = v183;
    v299._countAndFlagsBits = (uint64_t)v172;
    v299._object = v5;
    v300[0] = v6;
    lazy protocol witness table accessor for type URL and conformance URL();
    v185 = v172;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v182, v184);
    v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v188 = v187;
    v302._countAndFlagsBits = (uint64_t)v185;
    v302._object = v5;
    v303[0] = v6;
    v299 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v186, v188);
    v189 = v296;
    if (*(_QWORD *)(v296 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v181 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v190 = *(_QWORD *)(v189 + 64);
    v289 = v189 + 64;
    v191 = -1;
    v192 = -1 << *(_BYTE *)(v189 + 32);
    v285 = ~v192;
    if (-v192 < 64)
      v191 = ~(-1 << -(char)v192);
    v193 = v191 & v190;
    v288 = (unint64_t)(63 - v192) >> 6;
    v194 = v303;
    v195 = v298;
    v196 = v300;
    v287 = (char *)(v181 + 8);
    swift_bridgeObjectRetain();
    v291 = 0;
    v290 = (id)(MEMORY[0x1E0DEE9B8] + 8);
    while (1)
    {
      if (v193)
      {
        v292 = (v193 - 1) & v193;
        v205 = __clz(__rbit64(v193)) | (v291 << 6);
      }
      else
      {
        v206 = v291 + 1;
        if (__OFADD__(v291, 1))
          goto LABEL_250;
        if (v206 >= v288)
        {
LABEL_190:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v221 = objc_allocWithZone((Class)NSError);
          v222 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v223 = objc_msgSend(v221, sel_initWithDomain_code_userInfo_, v222, 4, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v224 = objc_msgSend(v223, sel_domain);
          v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v224);
          v9 = v226;

          if (v225 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v9 != v227)
          {
            v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v7 & 1) != 0)
              return (id)swift_willThrow();
            __break(1u);
            goto LABEL_196;
          }
LABEL_236:
          swift_bridgeObjectRelease_n();
          return (id)swift_willThrow();
        }
        v207 = *(_QWORD *)(v289 + 8 * v206);
        if (!v207)
        {
          v208 = v291 + 2;
          if (v291 + 2 >= v288)
            goto LABEL_190;
          v207 = *(_QWORD *)(v289 + 8 * v208);
          if (!v207)
          {
            v208 = v291 + 3;
            if (v291 + 3 >= v288)
              goto LABEL_190;
            v207 = *(_QWORD *)(v289 + 8 * v208);
            if (!v207)
            {
              v208 = v291 + 4;
              if (v291 + 4 >= v288)
                goto LABEL_190;
              v207 = *(_QWORD *)(v289 + 8 * v208);
              if (!v207)
              {
                v208 = v291 + 5;
                if (v291 + 5 >= v288)
                  goto LABEL_190;
                v207 = *(_QWORD *)(v289 + 8 * v208);
                if (!v207)
                {
                  v208 = v291 + 6;
                  if (v291 + 6 >= v288)
                    goto LABEL_190;
                  v207 = *(_QWORD *)(v289 + 8 * v208);
                  if (!v207)
                  {
                    v208 = v291 + 7;
                    if (v291 + 7 >= v288)
                      goto LABEL_190;
                    v207 = *(_QWORD *)(v289 + 8 * v208);
                    if (!v207)
                    {
                      while (1)
                      {
                        v206 = v208 + 1;
                        if (__OFADD__(v208, 1))
                          break;
                        if (v206 >= v288)
                          goto LABEL_190;
                        v207 = *(_QWORD *)(v289 + 8 * v206);
                        ++v208;
                        if (v207)
                          goto LABEL_181;
                      }
LABEL_256:
                      __break(1u);
LABEL_257:
                      swift_once();
LABEL_241:
                      v280 = (id)_nilObjCError;
                      return (id)swift_willThrow();
                    }
                  }
                }
              }
            }
          }
          v206 = v208;
        }
LABEL_181:
        v292 = (v207 - 1) & v207;
        v205 = __clz(__rbit64(v207)) + (v206 << 6);
        v291 = v206;
      }
      v209 = (uint64_t *)(*(_QWORD *)(v189 + 48) + 16 * v205);
      v211 = *v209;
      v210 = (void *)v209[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v189 + 56) + 40 * v205, (uint64_t)v194);
      v302._countAndFlagsBits = v211;
      v302._object = v210;
      v212 = *((_OWORD *)v194 + 1);
      v293 = *(_OWORD *)v194;
      v294 = v212;
      v295 = v194[4];
      v296 = v211;
      v297 = (uint64_t)v210;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v213 = v296;
      v214 = v297;
      outlined init with take of Any(v195, v196);
      outlined init with take of Any(v196, v301);
      outlined init with take of Any(v301, &v299);
      v215 = specialized __RawDictionaryStorage.find<A>(_:)(v213, v214);
      v216 = v215;
      if ((v217 & 1) != 0)
      {
        v197 = v181[6];
        v198 = v194;
        v199 = v181;
        v200 = v196;
        v201 = v195;
        v202 = v189;
        v203 = (uint64_t *)(v197 + 16 * v215);
        swift_bridgeObjectRelease();
        *v203 = v213;
        v203[1] = v214;
        v189 = v202;
        v195 = v201;
        v196 = v200;
        v181 = v199;
        v194 = v198;
        v204 = (_OWORD *)(v181[7] + 32 * v216);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v204);
        outlined init with take of Any(&v299, v204);
      }
      else
      {
        if (v181[2] >= v181[3])
          goto LABEL_248;
        *(_QWORD *)&v287[(v215 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v215;
        v218 = (uint64_t *)(v181[6] + 16 * v215);
        *v218 = v213;
        v218[1] = v214;
        outlined init with take of Any(&v299, (_OWORD *)(v181[7] + 32 * v215));
        v219 = v181[2];
        v54 = __OFADD__(v219, 1);
        v220 = v219 + 1;
        if (v54)
          goto LABEL_249;
        v181[2] = v220;
      }
      v193 = v292;
    }
  }
  v174 = HIBYTE(v153) & 0xF;
  if ((v153 & 0x2000000000000000) == 0)
    v174 = v289 & 0xFFFFFFFFFFFFLL;
  if (v174)
  {
    v175 = MEMORY[0x186DA9F5C](v292);
    if (!v175)
    {
      LODWORD(v283) = 0;
      v282 = 48;
      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v176 = (void *)v175;
    v177 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v178 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v302._countAndFlagsBits = 0;
    v179 = objc_msgSend(v176, sel_linkItemAtPath_toPath_error_, v177, v178, &v302);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v179 & 1) != 0)
      return (id)v302._countAndFlagsBits;
    if (v302._countAndFlagsBits)
    {
      (id)v302._countAndFlagsBits;
      return (id)swift_willThrow();
    }
    if (one-time initialization token for _nilObjCError != -1)
      goto LABEL_257;
    goto LABEL_241;
  }
LABEL_196:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v229 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v296 = MEMORY[0x1E0DEE9E0];
  v230 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v232 = v231;
  v233 = (void *)v285;
  v299._countAndFlagsBits = v285;
  v299._object = (void *)v7;
  v300[0] = v9;
  lazy protocol witness table accessor for type URL and conformance URL();
  v234 = v233;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v230, v232);
  v235 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v237 = v236;
  v302._countAndFlagsBits = (uint64_t)v234;
  v302._object = (void *)v7;
  v303[0] = v9;
  v299 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v302, (uint64_t)v235, v237);
  v238 = v296;
  if (*(_QWORD *)(v296 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v229 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v239 = *(_QWORD *)(v238 + 64);
  v288 = v238 + 64;
  v240 = -1;
  v241 = -1 << *(_BYTE *)(v238 + 32);
  v285 = ~v241;
  if (-v241 < 64)
    v240 = ~(-1 << -(char)v241);
  v242 = v240 & v239;
  v289 = (unint64_t)(63 - v241) >> 6;
  v243 = v303;
  v244 = v298;
  v245 = v300;
  v287 = (char *)(v229 + 8);
  swift_bridgeObjectRetain();
  v291 = 0;
  v290 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (2)
  {
    if (v242)
    {
      v292 = (v242 - 1) & v242;
      v254 = __clz(__rbit64(v242)) | (v291 << 6);
LABEL_222:
      v258 = (uint64_t *)(*(_QWORD *)(v238 + 48) + 16 * v254);
      v260 = *v258;
      v259 = (void *)v258[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v238 + 56) + 40 * v254, (uint64_t)v243);
      v302._countAndFlagsBits = v260;
      v302._object = v259;
      v261 = *((_OWORD *)v243 + 1);
      v293 = *(_OWORD *)v243;
      v294 = v261;
      v295 = v243[4];
      v296 = v260;
      v297 = (uint64_t)v259;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v262 = v296;
      v263 = v297;
      outlined init with take of Any(v244, v245);
      outlined init with take of Any(v245, v301);
      outlined init with take of Any(v301, &v299);
      v264 = specialized __RawDictionaryStorage.find<A>(_:)(v262, v263);
      v265 = v264;
      if ((v266 & 1) != 0)
      {
        v246 = v229[6];
        v247 = v243;
        v248 = v229;
        v249 = v245;
        v250 = v244;
        v251 = v238;
        v252 = (uint64_t *)(v246 + 16 * v264);
        swift_bridgeObjectRelease();
        *v252 = v262;
        v252[1] = v263;
        v238 = v251;
        v244 = v250;
        v245 = v249;
        v229 = v248;
        v243 = v247;
        v253 = (_OWORD *)(v229[7] + 32 * v265);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v253);
        outlined init with take of Any(&v299, v253);
      }
      else
      {
        if (v229[2] >= v229[3])
          goto LABEL_251;
        *(_QWORD *)&v287[(v264 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v264;
        v267 = (uint64_t *)(v229[6] + 16 * v264);
        *v267 = v262;
        v267[1] = v263;
        outlined init with take of Any(&v299, (_OWORD *)(v229[7] + 32 * v264));
        v268 = v229[2];
        v54 = __OFADD__(v268, 1);
        v269 = v268 + 1;
        if (v54)
          goto LABEL_252;
        v229[2] = v269;
      }
      v242 = v292;
      continue;
    }
    break;
  }
  v255 = v291 + 1;
  if (__OFADD__(v291, 1))
    goto LABEL_253;
  if (v255 >= v289)
    goto LABEL_230;
  v256 = *(_QWORD *)(v288 + 8 * v255);
  if (v256)
  {
LABEL_221:
    v292 = (v256 - 1) & v256;
    v254 = __clz(__rbit64(v256)) + (v255 << 6);
    v291 = v255;
    goto LABEL_222;
  }
  v257 = v291 + 2;
  if (v291 + 2 >= v289)
    goto LABEL_230;
  v256 = *(_QWORD *)(v288 + 8 * v257);
  if (v256)
    goto LABEL_220;
  v257 = v291 + 3;
  if (v291 + 3 >= v289)
    goto LABEL_230;
  v256 = *(_QWORD *)(v288 + 8 * v257);
  if (v256)
    goto LABEL_220;
  v257 = v291 + 4;
  if (v291 + 4 >= v289)
    goto LABEL_230;
  v256 = *(_QWORD *)(v288 + 8 * v257);
  if (v256)
    goto LABEL_220;
  v257 = v291 + 5;
  if (v291 + 5 >= v289)
    goto LABEL_230;
  v256 = *(_QWORD *)(v288 + 8 * v257);
  if (v256)
    goto LABEL_220;
  v257 = v291 + 6;
  if (v291 + 6 >= v289)
    goto LABEL_230;
  v256 = *(_QWORD *)(v288 + 8 * v257);
  if (v256)
    goto LABEL_220;
  v257 = v291 + 7;
  if (v291 + 7 >= v289)
    goto LABEL_230;
  v256 = *(_QWORD *)(v288 + 8 * v257);
  if (v256)
  {
LABEL_220:
    v255 = v257;
    goto LABEL_221;
  }
  while (1)
  {
    v255 = v257 + 1;
    if (__OFADD__(v257, 1))
      __break(1u);
    if (v255 >= v289)
      break;
    v256 = *(_QWORD *)(v288 + 8 * v255);
    ++v257;
    if (v256)
      goto LABEL_221;
  }
LABEL_230:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v270 = objc_allocWithZone((Class)NSError);
  v271 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v272 = objc_msgSend(v270, sel_initWithDomain_code_userInfo_, v271, 4, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v273 = objc_msgSend(v272, sel_domain);
  v274 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
  v276 = v275;

  if (v274 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v276 == v277)
    goto LABEL_236;
  v279 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v279 & 1) == 0)
  {
    __break(1u);
    goto LABEL_236;
  }
  return (id)swift_willThrow();
}

void closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 *v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _OWORD *v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v60;
  _QWORD v61[7];
  uint64_t v62;
  _QWORD *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t i;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  _OWORD v75[2];
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a1)
  {
    v11 = MEMORY[0x186DA9F5C](a4);
    if (!v11)
      goto LABEL_53;
    v12 = (void *)v11;
    MEMORY[0x1E0C80A78](v11);
    v61[2] = a5;
    v61[3] = a6;
    v61[4] = a1;
    v61[5] = a2;
    v61[6] = a3;
    specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(a5, a6, (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:), (uint64_t)v61);

    return;
  }
  *(_QWORD *)&v68 = MEMORY[0x1E0DEE9E0];
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v15 = v14;
  v73 = a2;
  *(_QWORD *)&v74 = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v13, v15);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v18 = v17;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v73);
  if (v73)
  {
    v71 = v73;
    v72 = v74;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v76 = 0u;
    v77 = 0u;
    v78 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v16, v18);
  v19 = v68;
  if (*(_QWORD *)(v68 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v20 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v21 = *(_QWORD *)(v68 + 64);
  v65 = v68 + 64;
  v22 = -1;
  v23 = -1 << *(_BYTE *)(v68 + 32);
  v62 = ~v23;
  if (-v23 < 64)
    v22 = ~(-1 << -(char)v23);
  v24 = v22 & v21;
  v64 = (unint64_t)(63 - v23) >> 6;
  v25 = &v77;
  v26 = (__int128 *)((char *)&v72 + 8);
  v27 = (__int128 *)((char *)&v74 + 8);
  v63 = v20 + 8;
  swift_bridgeObjectRetain();
  i = 0;
  v66 = MEMORY[0x1E0DEE9B8] + 8;
  if (v24)
    goto LABEL_15;
LABEL_16:
  v35 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_51;
  if (v35 >= v64)
    goto LABEL_41;
  v36 = *(_QWORD *)(v65 + 8 * v35);
  v37 = i + 1;
  if (!v36)
  {
    v37 = i + 2;
    if (i + 2 >= v64)
      goto LABEL_41;
    v36 = *(_QWORD *)(v65 + 8 * v37);
    if (!v36)
    {
      v37 = i + 3;
      if (i + 3 >= v64)
        goto LABEL_41;
      v36 = *(_QWORD *)(v65 + 8 * v37);
      if (!v36)
      {
        v37 = i + 4;
        if (i + 4 >= v64)
          goto LABEL_41;
        v36 = *(_QWORD *)(v65 + 8 * v37);
        if (!v36)
        {
          v37 = i + 5;
          if (i + 5 >= v64)
            goto LABEL_41;
          v36 = *(_QWORD *)(v65 + 8 * v37);
          if (!v36)
          {
            v37 = i + 6;
            if (i + 6 >= v64)
              goto LABEL_41;
            v36 = *(_QWORD *)(v65 + 8 * v37);
            if (!v36)
            {
              v38 = i + 7;
              if (i + 7 < v64)
              {
                v36 = *(_QWORD *)(v65 + 8 * v38);
                if (v36)
                {
                  v37 = i + 7;
                  goto LABEL_35;
                }
                while (1)
                {
                  v37 = v38 + 1;
                  if (__OFADD__(v38, 1))
                    goto LABEL_52;
                  if (v37 >= v64)
                    break;
                  v36 = *(_QWORD *)(v65 + 8 * v37);
                  ++v38;
                  if (v36)
                    goto LABEL_35;
                }
              }
LABEL_41:
              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
              swift_bridgeObjectRelease();
              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
              v51 = objc_allocWithZone((Class)NSError);
              v52 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v53 = objc_msgSend(v51, sel_initWithDomain_code_userInfo_, v52, 256, _NativeDictionary.bridged()(), v62);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v54 = objc_msgSend(v53, sel_domain);
              v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
              v57 = v56;

              if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                || v57 != v58)
              {
                v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v60 & 1) != 0)
                {
LABEL_48:
                  swift_willThrow();
                  return;
                }
                __break(1u);
              }
              swift_bridgeObjectRelease_n();
              goto LABEL_48;
            }
          }
        }
      }
    }
  }
LABEL_35:
  v79 = (v36 - 1) & v36;
  v34 = __clz(__rbit64(v36)) + (v37 << 6);
  for (i = v37; ; v34 = __clz(__rbit64(v24)) | (i << 6))
  {
    v39 = (uint64_t *)(*(_QWORD *)(v19 + 48) + 16 * v34);
    v41 = *v39;
    v40 = v39[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v19 + 56) + 40 * v34, (uint64_t)v25);
    *(_QWORD *)&v76 = v41;
    *((_QWORD *)&v76 + 1) = v40;
    v42 = v25[1];
    v68 = *v25;
    v69 = v42;
    v70 = *((_QWORD *)v25 + 4);
    v71 = v41;
    *(_QWORD *)&v72 = v40;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v43 = v41;
    outlined init with take of Any(v26, v27);
    outlined init with take of Any(v27, v75);
    outlined init with take of Any(v75, &v73);
    v44 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
    v45 = v44;
    if ((v46 & 1) != 0)
    {
      v28 = v25;
      v29 = v27;
      v30 = v26;
      v31 = v19;
      v32 = (uint64_t *)(v20[6] + 16 * v44);
      swift_bridgeObjectRelease();
      *v32 = v43;
      v32[1] = v40;
      v19 = v31;
      v26 = v30;
      v27 = v29;
      v25 = v28;
      v33 = (_OWORD *)(v20[7] + 32 * v45);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      outlined init with take of Any(&v73, v33);
      v24 = v79;
      if (!v79)
        goto LABEL_16;
      goto LABEL_15;
    }
    if (v20[2] >= v20[3])
      break;
    *(_QWORD *)((char *)v63 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
    v47 = (uint64_t *)(v20[6] + 16 * v44);
    *v47 = v43;
    v47[1] = v40;
    outlined init with take of Any(&v73, (_OWORD *)(v20[7] + 32 * v44));
    v48 = v20[2];
    v49 = __OFADD__(v48, 1);
    v50 = v48 + 1;
    if (v49)
      goto LABEL_50;
    v20[2] = v50;
    v24 = v79;
    if (!v79)
      goto LABEL_16;
LABEL_15:
    v79 = (v24 - 1) & v24;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(const char *a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  _OWORD *v44;
  __int128 *v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  _OWORD *v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 *v81;
  _OWORD *v82;
  _OWORD *v83;
  __int128 *v84;
  _OWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v112;
  char v113;
  Swift::String v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t j;
  int64_t i;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[4];
  __int128 v126;
  _QWORD v127[4];
  _OWORD v128[2];
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  if (!a1)
  {
    v123 = MEMORY[0x1E0DEE9E0];
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v20 = v19;
    *(_QWORD *)&v126 = a2;
    *((_QWORD *)&v126 + 1) = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v129, (uint64_t)v18, v20);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v23 = v22;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v126);
    if ((_QWORD)v126)
    {
      v125[0] = v127[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v129 = 0u;
      v130 = 0u;
      v131 = 0;
    }
    v9 = (uint64_t)&v129;
    specialized Dictionary.subscript.setter((uint64_t)&v129, (uint64_t)v21, v23);
    v76 = v123;
    if (*(_QWORD *)(v123 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v77 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v77 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v119 = v123 + 64;
    v78 = -1;
    v79 = -1 << *(_BYTE *)(v123 + 32);
    if (-v79 < 64)
      v78 = ~(-1 << -(char)v79);
    v80 = v78 & *(_QWORD *)(v123 + 64);
    v81 = &v130;
    v82 = v125;
    v83 = v127;
    v117 = (unint64_t)(63 - v79) >> 6;
    swift_bridgeObjectRetain();
    i = 0;
    if (v80)
      goto LABEL_64;
LABEL_65:
    v90 = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_111;
    if (v90 < v117)
    {
      v91 = *(_QWORD *)(v119 + 8 * v90);
      v92 = i + 1;
      if (v91)
        goto LABEL_84;
      v92 = i + 2;
      if (i + 2 < v117)
      {
        v91 = *(_QWORD *)(v119 + 8 * v92);
        if (v91)
          goto LABEL_84;
        v92 = i + 3;
        if (i + 3 < v117)
        {
          v91 = *(_QWORD *)(v119 + 8 * v92);
          if (v91)
            goto LABEL_84;
          v92 = i + 4;
          if (i + 4 < v117)
          {
            v91 = *(_QWORD *)(v119 + 8 * v92);
            if (v91)
              goto LABEL_84;
            v92 = i + 5;
            if (i + 5 < v117)
            {
              v91 = *(_QWORD *)(v119 + 8 * v92);
              if (v91)
                goto LABEL_84;
              v92 = i + 6;
              if (i + 6 < v117)
              {
                v91 = *(_QWORD *)(v119 + 8 * v92);
                if (v91)
                  goto LABEL_84;
                v93 = i + 7;
                if (i + 7 < v117)
                {
                  v91 = *(_QWORD *)(v119 + 8 * v93);
                  if (!v91)
                  {
                    while (1)
                    {
                      v92 = v93 + 1;
                      if (__OFADD__(v93, 1))
                        goto LABEL_113;
                      if (v92 >= v117)
                        goto LABEL_90;
                      v91 = *(_QWORD *)(v119 + 8 * v92);
                      ++v93;
                      if (v91)
                        goto LABEL_84;
                    }
                  }
                  v92 = i + 7;
LABEL_84:
                  v132 = (v91 - 1) & v91;
                  v89 = __clz(__rbit64(v91)) + (v92 << 6);
                  for (i = v92; ; v89 = __clz(__rbit64(v80)) | (i << 6))
                  {
                    v94 = (uint64_t *)(*(_QWORD *)(v76 + 48) + 16 * v89);
                    v95 = *v94;
                    v9 = v94[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v76 + 56) + 40 * v89, (uint64_t)v81);
                    *(_QWORD *)&v129 = v95;
                    *((_QWORD *)&v129 + 1) = v9;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v96 = v95;
                    outlined init with take of Any(v82, v83);
                    outlined init with take of Any(v83, v128);
                    outlined init with take of Any(v128, &v126);
                    v97 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v9);
                    v98 = v97;
                    if ((v99 & 1) != 0)
                    {
                      v84 = v81;
                      v85 = v83;
                      v86 = v82;
                      v87 = v76;
                      v88 = (uint64_t *)(v77[6] + 16 * v97);
                      swift_bridgeObjectRelease();
                      *v88 = v96;
                      v88[1] = v9;
                      v76 = v87;
                      v82 = v86;
                      v83 = v85;
                      v81 = v84;
                      v9 = v77[7] + 32 * v98;
                      __swift_destroy_boxed_opaque_existential_1(v9);
                      outlined init with take of Any(&v126, (_OWORD *)v9);
                      v80 = v132;
                      if (!v132)
                        goto LABEL_65;
                    }
                    else
                    {
                      if (v77[2] >= v77[3])
                        goto LABEL_108;
                      *(_QWORD *)((char *)v77 + ((v97 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v97;
                      v100 = (uint64_t *)(v77[6] + 16 * v97);
                      *v100 = v96;
                      v100[1] = v9;
                      outlined init with take of Any(&v126, (_OWORD *)(v77[7] + 32 * v97));
                      v101 = v77[2];
                      v64 = __OFADD__(v101, 1);
                      v102 = v101 + 1;
                      if (v64)
                      {
LABEL_109:
                        __break(1u);
                        goto LABEL_110;
                      }
                      v77[2] = v102;
                      v80 = v132;
                      if (!v132)
                        goto LABEL_65;
                    }
LABEL_64:
                    v132 = (v80 - 1) & v80;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_90:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v103 = objc_allocWithZone((Class)NSError);
    v104 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v105 = objc_msgSend(v103, sel_initWithDomain_code_userInfo_, v104, 256, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v106 = objc_msgSend(v105, sel_domain);
    v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
    v109 = v108;

    if (v107 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v109 == v110)
      goto LABEL_96;
    v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v112 & 1) == 0)
    {
      __break(1u);
      goto LABEL_96;
    }
    return swift_willThrow();
  }
  result = symlink(a1, a4);
  if (!(_DWORD)result)
    return result;
  LODWORD(v9) = MEMORY[0x186DA4118]();
  v122 = MEMORY[0x1E0DEE9E0];
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v12 = v11;
  *(_QWORD *)&v126 = a5;
  *((_QWORD *)&v126 + 1) = a6;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v129, (uint64_t)v10, v12);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v15 = v14;
  URL.init(_fileManagerFailableFileURLWithPath:)(a5, a6, (uint64_t)&v126);
  if ((_QWORD)v126)
  {
    v125[0] = v127[0];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v129 = 0u;
    v130 = 0u;
    v131 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v129, (uint64_t)v13, v15);
  swift_bridgeObjectRetain();
  if ((_DWORD)v9 == 102)
  {
LABEL_9:
    v24 = 512;
  }
  else
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
    {
LABEL_115:
      *(_QWORD *)&v129 = 0;
      *((_QWORD *)&v129 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v129 = 0xD000000000000014;
      *((_QWORD *)&v129 + 1) = 0x8000000182306980;
      LODWORD(v126) = v9;
      v114._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v114);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181BDC8D0);
    }
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v29 = v28;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v30 = (int)POSIXErrorCode.rawValue.getter();
    v31 = objc_allocWithZone((Class)NSError);
    v32 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v33 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, v30, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v34 = objc_msgSend(v33, sel_domain);
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v37 == v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v113 & 1) == 0)
      {
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
    }
    *(_QWORD *)&v126 = v33;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v129, (uint64_t)v27, v29);
    v24 = 4;
    switch((int)v9)
    {
      case 1:
      case 13:
        v24 = 513;
        break;
      case 2:
        break;
      case 17:
        v24 = 516;
        break;
      case 28:
      case 69:
        v24 = 640;
        break;
      case 30:
        v24 = 642;
        break;
      case 63:
        v24 = 514;
        break;
      default:
        goto LABEL_9;
    }
  }
  v25 = v122;
  v115 = v24;
  if (*(_QWORD *)(v122 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v26 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v26 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v118 = v122 + 64;
  v39 = -1;
  v40 = -1 << *(_BYTE *)(v122 + 32);
  if (-v40 < 64)
    v39 = ~(-1 << -(char)v40);
  v41 = v39 & *(_QWORD *)(v122 + 64);
  v42 = &v130;
  v43 = v125;
  v44 = v127;
  v116 = (unint64_t)(63 - v40) >> 6;
  swift_bridgeObjectRetain();
  j = 0;
  if (v41)
    goto LABEL_22;
LABEL_23:
  v52 = j + 1;
  if (__OFADD__(j, 1))
  {
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  if (v52 < v116)
  {
    v53 = *(_QWORD *)(v118 + 8 * v52);
    v54 = j + 1;
    if (v53)
      goto LABEL_42;
    v54 = j + 2;
    if (j + 2 < v116)
    {
      v53 = *(_QWORD *)(v118 + 8 * v54);
      if (v53)
        goto LABEL_42;
      v54 = j + 3;
      if (j + 3 < v116)
      {
        v53 = *(_QWORD *)(v118 + 8 * v54);
        if (v53)
          goto LABEL_42;
        v54 = j + 4;
        if (j + 4 < v116)
        {
          v53 = *(_QWORD *)(v118 + 8 * v54);
          if (v53)
            goto LABEL_42;
          v54 = j + 5;
          if (j + 5 < v116)
          {
            v53 = *(_QWORD *)(v118 + 8 * v54);
            if (v53)
              goto LABEL_42;
            v54 = j + 6;
            if (j + 6 < v116)
            {
              v53 = *(_QWORD *)(v118 + 8 * v54);
              if (!v53)
              {
                v55 = j + 7;
                if (j + 7 < v116)
                {
                  v53 = *(_QWORD *)(v118 + 8 * v55);
                  if (v53)
                  {
                    v54 = j + 7;
                    goto LABEL_42;
                  }
                  while (1)
                  {
                    v54 = v55 + 1;
                    if (__OFADD__(v55, 1))
                      goto LABEL_112;
                    if (v54 >= v116)
                      goto LABEL_48;
                    v53 = *(_QWORD *)(v118 + 8 * v54);
                    ++v55;
                    if (v53)
                      goto LABEL_42;
                  }
                }
                goto LABEL_48;
              }
LABEL_42:
              v132 = (v53 - 1) & v53;
              v51 = __clz(__rbit64(v53)) + (v54 << 6);
              for (j = v54; ; v51 = __clz(__rbit64(v41)) | (j << 6))
              {
                v56 = (uint64_t *)(*(_QWORD *)(v25 + 48) + 16 * v51);
                v58 = *v56;
                v57 = v56[1];
                outlined init with copy of AnyHashable(*(_QWORD *)(v25 + 56) + 40 * v51, (uint64_t)v42);
                *(_QWORD *)&v129 = v58;
                *((_QWORD *)&v129 + 1) = v57;
                v124 = v57;
                swift_bridgeObjectRetain();
                swift_dynamicCast();
                v59 = v58;
                outlined init with take of Any(v43, v44);
                outlined init with take of Any(v44, v128);
                outlined init with take of Any(v128, &v126);
                v60 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v124);
                v9 = v60;
                if ((v61 & 1) != 0)
                {
                  v45 = v42;
                  v46 = v44;
                  v47 = v43;
                  v48 = v25;
                  v49 = (uint64_t *)(v26[6] + 16 * v60);
                  swift_bridgeObjectRelease();
                  *v49 = v59;
                  v49[1] = v124;
                  v25 = v48;
                  v43 = v47;
                  v44 = v46;
                  v42 = v45;
                  v50 = (_OWORD *)(v26[7] + 32 * v9);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
                  outlined init with take of Any(&v126, v50);
                  v41 = v132;
                  if (!v132)
                    goto LABEL_23;
                }
                else
                {
                  if (v26[2] >= v26[3])
                  {
                    __break(1u);
LABEL_107:
                    __break(1u);
LABEL_108:
                    __break(1u);
                    goto LABEL_109;
                  }
                  *(_QWORD *)((char *)v26 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v60;
                  v62 = (uint64_t *)(v26[6] + 16 * v60);
                  *v62 = v59;
                  v62[1] = v124;
                  outlined init with take of Any(&v126, (_OWORD *)(v26[7] + 32 * v60));
                  v63 = v26[2];
                  v64 = __OFADD__(v63, 1);
                  v65 = v63 + 1;
                  if (v64)
                    goto LABEL_107;
                  v26[2] = v65;
                  v41 = v132;
                  if (!v132)
                    goto LABEL_23;
                }
LABEL_22:
                v132 = (v41 - 1) & v41;
              }
            }
          }
        }
      }
    }
  }
LABEL_48:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v66 = objc_allocWithZone((Class)NSError);
  v67 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, v115, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v69 = objc_msgSend(v68, sel_domain);
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  v72 = v71;

  if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v72 == v73)
    goto LABEL_54;
  v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v75 & 1) == 0)
  {
    __break(1u);
LABEL_54:
    swift_bridgeObjectRelease();
LABEL_96:
    swift_bridgeObjectRelease_n();
  }
  return swift_willThrow();
}

uint64_t closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t isStackAllocationSafe;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 *v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD *v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v59;
  uint64_t v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  _OWORD v77[2];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    outlined init with copy of _FileManagerImpl(a4, (uint64_t)&v78);
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
    {
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      closure #1 in closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)(&v62, a1, a2, a3, (uint64_t)&v78, &v75);
      if (v5)
      {
        swift_willThrow();
      }
      else
      {
        v61 = v76;
        *a5 = v75;
        a5[1] = v61;
      }
    }
    else
    {
      v17 = (char *)swift_slowAlloc();
      closure #1 in closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)(v17, a1, a2, a3, (uint64_t)&v78, a5);
      MEMORY[0x186DA9E78](v17, -1, -1);
    }
    return outlined destroy of _FileManagerImpl((uint64_t)&v78);
  }
  *(_QWORD *)&v70 = MEMORY[0x1E0DEE9E0];
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v13 = v12;
  v75 = a2;
  *(_QWORD *)&v76 = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v78, (uint64_t)v11, v13);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v16 = v15;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v75);
  if (v75)
  {
    v73 = v75;
    v74 = v76;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v78 = 0u;
    v79 = 0u;
    v80 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v78, (uint64_t)v14, v16);
  v18 = v70;
  if (*(_QWORD *)(v70 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v19 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v20 = *(_QWORD *)(v70 + 64);
  v65 = v70 + 64;
  v21 = -1;
  v22 = -1 << *(_BYTE *)(v70 + 32);
  v63 = ~v22;
  if (-v22 < 64)
    v21 = ~(-1 << -(char)v22);
  v23 = v21 & v20;
  v66 = (unint64_t)(63 - v22) >> 6;
  v24 = &v79;
  v25 = (__int128 *)((char *)&v74 + 8);
  v26 = (__int128 *)((char *)&v76 + 8);
  v64 = v19 + 8;
  swift_bridgeObjectRetain();
  v68 = 0;
  v67 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v23)
    {
      v69 = (v23 - 1) & v23;
      v33 = __clz(__rbit64(v23)) | (v68 << 6);
      goto LABEL_39;
    }
    v34 = v68 + 1;
    if (__OFADD__(v68, 1))
      goto LABEL_55;
    if (v34 >= v66)
      break;
    v35 = *(_QWORD *)(v65 + 8 * v34);
    v36 = v68 + 1;
    if (!v35)
    {
      v36 = v68 + 2;
      if (v68 + 2 >= v66)
        break;
      v35 = *(_QWORD *)(v65 + 8 * v36);
      if (!v35)
      {
        v36 = v68 + 3;
        if (v68 + 3 >= v66)
          break;
        v35 = *(_QWORD *)(v65 + 8 * v36);
        if (!v35)
        {
          v36 = v68 + 4;
          if (v68 + 4 >= v66)
            break;
          v35 = *(_QWORD *)(v65 + 8 * v36);
          if (!v35)
          {
            v36 = v68 + 5;
            if (v68 + 5 >= v66)
              break;
            v35 = *(_QWORD *)(v65 + 8 * v36);
            if (!v35)
            {
              v36 = v68 + 6;
              if (v68 + 6 >= v66)
                break;
              v35 = *(_QWORD *)(v65 + 8 * v36);
              if (!v35)
              {
                v37 = v68 + 7;
                if (v68 + 7 >= v66)
                  break;
                v35 = *(_QWORD *)(v65 + 8 * v37);
                if (!v35)
                {
                  while (1)
                  {
                    v36 = v37 + 1;
                    if (__OFADD__(v37, 1))
                      goto LABEL_56;
                    if (v36 >= v66)
                      goto LABEL_43;
                    v35 = *(_QWORD *)(v65 + 8 * v36);
                    ++v37;
                    if (v35)
                      goto LABEL_38;
                  }
                }
                v36 = v68 + 7;
              }
            }
          }
        }
      }
    }
LABEL_38:
    v69 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v36 << 6);
    v68 = v36;
LABEL_39:
    v38 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 16 * v33);
    v40 = *v38;
    v39 = v38[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v18 + 56) + 40 * v33, (uint64_t)v24);
    *(_QWORD *)&v78 = v40;
    *((_QWORD *)&v78 + 1) = v39;
    v41 = v24[1];
    v70 = *v24;
    v71 = v41;
    v72 = *((_QWORD *)v24 + 4);
    v73 = v40;
    *(_QWORD *)&v74 = v39;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v42 = v40;
    outlined init with take of Any(v25, v26);
    outlined init with take of Any(v26, v77);
    outlined init with take of Any(v77, &v75);
    v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v39);
    v44 = v43;
    if ((v45 & 1) != 0)
    {
      v27 = v24;
      v28 = v26;
      v29 = v25;
      v30 = v18;
      v31 = (uint64_t *)(v19[6] + 16 * v43);
      swift_bridgeObjectRelease();
      *v31 = v42;
      v31[1] = v39;
      v18 = v30;
      v25 = v29;
      v26 = v28;
      v24 = v27;
      v32 = (_OWORD *)(v19[7] + 32 * v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      outlined init with take of Any(&v75, v32);
    }
    else
    {
      if (v19[2] >= v19[3])
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
      }
      *(_QWORD *)((char *)v64 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
      v46 = (uint64_t *)(v19[6] + 16 * v43);
      *v46 = v42;
      v46[1] = v39;
      outlined init with take of Any(&v75, (_OWORD *)(v19[7] + 32 * v43));
      v47 = v19[2];
      v48 = __OFADD__(v47, 1);
      v49 = v47 + 1;
      if (v48)
        goto LABEL_54;
      v19[2] = v49;
    }
    v23 = v69;
  }
LABEL_43:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v50 = objc_allocWithZone((Class)NSError);
  v51 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v52 = objc_msgSend(v50, sel_initWithDomain_code_userInfo_, v51, 256, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v53 = objc_msgSend(v52, sel_domain);
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v56 == v57)
  {
LABEL_49:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
      __break(1u);
      goto LABEL_49;
    }
  }
  return swift_willThrow();
}

void closure #1 in closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)(char *a1@<X0>, char *a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  ssize_t v11;
  ssize_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 *v45;
  uint64_t *v46;
  uint64_t *v47;
  __int128 *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  _OWORD *v53;
  unint64_t i;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v79;
  Swift::String v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _OWORD v91[2];
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;

  if (!a1)
    goto LABEL_67;
  v11 = readlink(a2, a1, 0x402uLL);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = v11;
    v13 = (void *)MEMORY[0x186DA9F5C](a5);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, sel_stringWithFileSystemRepresentation_length_, a1, v12);

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      *a6 = v16;
      a6[1] = v18;
      return;
    }
LABEL_70:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181BDDAA4);
  }
  v19 = MEMORY[0x186DA4118]();
  v86 = MEMORY[0x1E0DEE9E0];
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v22 = v21;
  *(_QWORD *)&v89 = a3;
  *((_QWORD *)&v89 + 1) = a4;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v92, (uint64_t)v20, v22);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v25 = v24;
  URL.init(_fileManagerFailableFileURLWithPath:)(a3, a4, (uint64_t)&v89);
  if ((_QWORD)v89)
  {
    v88 = v90;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v92 = 0u;
    v93 = 0u;
    v94 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v92, (uint64_t)v23, v25);
  v95 = v86;
  swift_bridgeObjectRetain();
  if (v19 == 102)
  {
LABEL_9:
    v26 = 256;
  }
  else
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
    {
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v92 = 0xD000000000000014;
      *((_QWORD *)&v92 + 1) = 0x8000000182306980;
      LODWORD(v89) = v19;
      v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v80);
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v29 = v28;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v30 = (int)POSIXErrorCode.rawValue.getter();
    v31 = objc_allocWithZone((Class)NSError);
    v32 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v33 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, v30, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v34 = objc_msgSend(v33, sel_domain);
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v37 == v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_70;
      }
    }
    *(_QWORD *)&v89 = v33;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v92, (uint64_t)v27, v29);
    v26 = 263;
    switch(v19)
    {
      case 1:
      case 13:
        v26 = 257;
        break;
      case 2:
        v26 = 260;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_9;
      case 27:
        break;
      default:
        if (v19 != 63)
          goto LABEL_9;
        v26 = 258;
        break;
    }
  }
  v81 = v26;
  v40 = v95;
  if (*(_QWORD *)(v95 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v41 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v41 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v83 = v40 + 64;
  v42 = -1;
  v43 = -1 << *(_BYTE *)(v40 + 32);
  if (-v43 < 64)
    v42 = ~(-1 << -(char)v43);
  v44 = v42 & *(_QWORD *)(v40 + 64);
  v45 = &v93;
  v46 = &v88;
  v47 = &v90;
  v82 = (unint64_t)(63 - v43) >> 6;
  swift_bridgeObjectRetain();
  v84 = 0;
  if (v44)
    goto LABEL_28;
LABEL_29:
  v55 = v84 + 1;
  if (__OFADD__(v84, 1))
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v55 < v82)
  {
    v56 = *(_QWORD *)(v83 + 8 * v55);
    v57 = v84 + 1;
    if (v56)
      goto LABEL_48;
    v57 = v84 + 2;
    if (v84 + 2 >= v82)
      goto LABEL_54;
    v56 = *(_QWORD *)(v83 + 8 * v57);
    if (v56)
      goto LABEL_48;
    v57 = v84 + 3;
    if (v84 + 3 >= v82)
      goto LABEL_54;
    v56 = *(_QWORD *)(v83 + 8 * v57);
    if (v56)
      goto LABEL_48;
    v57 = v84 + 4;
    if (v84 + 4 >= v82)
      goto LABEL_54;
    v56 = *(_QWORD *)(v83 + 8 * v57);
    if (v56)
      goto LABEL_48;
    v57 = v84 + 5;
    if (v84 + 5 >= v82)
      goto LABEL_54;
    v56 = *(_QWORD *)(v83 + 8 * v57);
    if (v56)
      goto LABEL_48;
    v57 = v84 + 6;
    if (v84 + 6 >= v82)
      goto LABEL_54;
    v56 = *(_QWORD *)(v83 + 8 * v57);
    if (v56)
    {
LABEL_48:
      v84 = v57;
      v85 = (v56 - 1) & v56;
      for (i = __clz(__rbit64(v56)) + (v57 << 6); ; i = __clz(__rbit64(v44)) | (v84 << 6))
      {
        v59 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * i);
        v61 = *v59;
        v60 = v59[1];
        outlined init with copy of AnyHashable(*(_QWORD *)(v40 + 56) + 40 * i, (uint64_t)v45);
        *(_QWORD *)&v92 = v61;
        *((_QWORD *)&v92 + 1) = v60;
        v87 = v60;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v62 = v61;
        outlined init with take of Any(v46, v47);
        outlined init with take of Any(v47, v91);
        outlined init with take of Any(v91, &v89);
        v63 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v87);
        v64 = v63;
        if ((v65 & 1) != 0)
        {
          v48 = v45;
          v49 = v47;
          v50 = v46;
          v51 = v40;
          v52 = (uint64_t *)(v41[6] + 16 * v63);
          swift_bridgeObjectRelease();
          *v52 = v62;
          v52[1] = v87;
          v40 = v51;
          v46 = v50;
          v47 = v49;
          v45 = v48;
          v53 = (_OWORD *)(v41[7] + 32 * v64);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
          outlined init with take of Any(&v89, v53);
          v44 = v85;
          if (!v85)
            goto LABEL_29;
        }
        else
        {
          if (v41[2] >= v41[3])
          {
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          *(_QWORD *)((char *)v41 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v63;
          v66 = (uint64_t *)(v41[6] + 16 * v63);
          *v66 = v62;
          v66[1] = v87;
          outlined init with take of Any(&v89, (_OWORD *)(v41[7] + 32 * v63));
          v67 = v41[2];
          v68 = __OFADD__(v67, 1);
          v69 = v67 + 1;
          if (v68)
            goto LABEL_63;
          v41[2] = v69;
          v44 = v85;
          if (!v85)
            goto LABEL_29;
        }
LABEL_28:
        v85 = (v44 - 1) & v44;
      }
    }
    v58 = v84 + 7;
    if (v84 + 7 < v82)
    {
      v56 = *(_QWORD *)(v83 + 8 * v58);
      if (v56)
      {
        v57 = v84 + 7;
        goto LABEL_48;
      }
      while (1)
      {
        v57 = v58 + 1;
        if (__OFADD__(v58, 1))
          goto LABEL_65;
        if (v57 >= v82)
          break;
        v56 = *(_QWORD *)(v83 + 8 * v57);
        ++v58;
        if (v56)
          goto LABEL_48;
      }
    }
  }
LABEL_54:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v70 = objc_allocWithZone((Class)NSError);
  v71 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v72 = objc_msgSend(v70, sel_initWithDomain_code_userInfo_, v71, v81, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v73 = objc_msgSend(v72, sel_domain);
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
  v76 = v75;

  if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v76 == v77)
    goto LABEL_60;
  v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v79 & 1) == 0)
  {
    __break(1u);
LABEL_60:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();
}

uint64_t partial apply for closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(const char *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  char v6;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
  if (v2 == 14)
  {
    v3 = 1;
  }
  else if (Usage.rawValue.getter(v2) == 0x6469766F72507361 && v4 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    v3 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v3 = v6 ^ 1;
  }
  return v3 & 1;
}

uint64_t Measurement<>.FormatStyle.skeletonForBaseUnit(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  void *v5;
  uint64_t v6;
  void *ObjCClassFromMetadata;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  id v20;

  v3 = v2;
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  swift_getObjectType();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v8 = v5;
  v9 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  v19[0] = v8;
  v19[1] = v6;
  type metadata accessor for Measurement(0, *(_QWORD *)(a2 + 16), v10, v11);
  Measurement<>.converted(to:)(v9, (double *)&v20);

  v12 = v20;
  v13 = NSDimension.skeleton.getter();
  v15 = v14;

  if (v15)
  {
    LOBYTE(v20) = *v3;
    v16 = *(int *)(a2 + 32);
    LOBYTE(v19[0]) = v3[*(int *)(a2 + 36)];
    v17 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v13, v15, (unsigned __int8 *)&v20, (unsigned __int8 *)v19, (uint64_t)&v3[v16]);

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v17;
}

uint64_t static Measurement<>.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  __int128 *v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  __int128 v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  __int128 *v55;
  __int128 v56;
  __int128 v57;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (__int128 *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v52 - v15;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v52 - v20;
  if (*a1 != *a2)
    goto LABEL_13;
  v55 = (__int128 *)v19;
  v22 = a3;
  v23 = *(_OWORD *)(a1 + 8);
  v56 = *(_OWORD *)(v18 + 8);
  v57 = v23;
  v24 = v18;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v57, (uint64_t)&v56) & 1) == 0)
    goto LABEL_13;
  v27 = type metadata accessor for Measurement<>.FormatStyle(0, v22, v25, v26);
  v28 = *(int *)(v27 + 32);
  v53 = a1;
  v29 = (uint64_t)&a1[v28];
  v30 = (int *)v27;
  outlined init with copy of FloatingPointFormatStyle<Double>?(v29, (uint64_t)v21);
  v31 = v30[8];
  v54 = v24;
  outlined init with copy of FloatingPointFormatStyle<Double>?(v24 + v31, (uint64_t)v16);
  v32 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v21, (uint64_t)v12);
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v16, v32);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v33((uint64_t)v12, 1, v6) != 1)
  {
    v39 = v55;
    outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v12, (uint64_t)v55);
    if (v33(v32, 1, v6) != 1)
    {
      outlined init with take of LocalePreferences?(v32, (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      v44 = *v39;
      v56 = *v9;
      v57 = v44;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v57, (uint64_t)&v56) & 1) != 0)
      {
        specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)v39 + *(int *)(v6 + 36), (uint64_t)v9 + *(int *)(v6 + 36));
        v46 = v45;
        outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        outlined destroy of Any?((uint64_t)v39, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        if ((v46 & 1) == 0)
          goto LABEL_13;
        goto LABEL_6;
      }
      outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v39, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      v41 = (uint64_t)v12;
      v40 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?;
LABEL_12:
      outlined destroy of Any?(v41, v40);
      goto LABEL_13;
    }
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?((uint64_t)v39, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
LABEL_11:
    v40 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
    v41 = (uint64_t)v12;
    goto LABEL_12;
  }
  outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if (v33(v32, 1, v6) != 1)
    goto LABEL_11;
  outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
LABEL_6:
  v34 = v30[9];
  v36 = v53;
  v35 = v54;
  v37 = v53[v34];
  v38 = *(unsigned __int8 *)(v54 + v34);
  if (v37 == 14)
  {
    if (v38 == 14)
      goto LABEL_24;
  }
  else if (v38 != 14)
  {
    v47 = Usage.rawValue.getter(v37);
    v49 = v48;
    if (v47 == Usage.rawValue.getter(v38) && v49 == v50)
    {
      swift_bridgeObjectRelease_n();
      v35 = v54;
    }
    else
    {
      v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = 0;
      v35 = v54;
      if ((v51 & 1) == 0)
        return v42 & 1;
    }
LABEL_24:
    v42 = v36[v30[10]] ^ *(_BYTE *)(v35 + v30[10]) ^ 1;
    return v42 & 1;
  }
LABEL_13:
  v42 = 0;
  return v42 & 1;
}

unint64_t Measurement<>.FormatStyle.UnitWidth.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 3)
    return 3;
  return result;
}

uint64_t Measurement<>.FormatStyle.UnitWidth.Option.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option, a3);
  return == infix<A>(_:_:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = Measurement<>.FormatStyle.UnitWidth.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.Option@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = Measurement<>.FormatStyle.UnitWidth.Option.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option);
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option);
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.Option(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option);
  return RawRepresentable<>._rawHashValue(seed:)();
}

BOOL static Measurement<>.FormatStyle.UnitWidth.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Measurement<>.FormatStyle.UnitWidth.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Measurement<>.FormatStyle.UnitWidth.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.FormatStyle.UnitWidth.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v16 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys(255, v16, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v17 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - v8;
  v10 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = v10;
  v13 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option(0, v16, v11, v12);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option, v13);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v9, v7);
}

Swift::Int Measurement<>.FormatStyle.UnitWidth.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Measurement<>.FormatStyle.UnitWidth.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v17;
  uint64_t v18;
  char v19;

  v17 = a5;
  v18 = a2;
  v7 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.CodingKeys, v7);
  v8 = type metadata accessor for KeyedDecodingContainer();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    v14 = v17;
    v15 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option(0, v18, v12, v13);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option, v15);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *v14 = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle.UnitWidth@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return Measurement<>.FormatStyle.UnitWidth.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle.UnitWidth(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement<>.FormatStyle.UnitWidth.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.UnitWidth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))Measurement<>.FormatStyle.UnitWidth.hash(into:));
}

void Measurement<>.FormatStyle.width.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Measurement<>.FormatStyle.width.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.width.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.numberFormatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of FloatingPointFormatStyle<Double>?(v2 + *(int *)(a1 + 32), a2);
}

uint64_t Measurement<>.FormatStyle.numberFormatStyle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of FloatingPointFormatStyle<Double>?(a1, v2 + *(int *)(a2 + 32));
}

uint64_t (*Measurement<>.FormatStyle.numberFormatStyle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.usage.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 36));
  return result;
}

_BYTE *Measurement<>.FormatStyle.usage.setter(_BYTE *result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.usage.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Measurement<>.FormatStyle.init(width:locale:usage:numberFormatStyle:)@<X0>(char *a1@<X0>, _OWORD *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v9;
  char v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a1;
  v10 = *a3;
  v11 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, a5, (uint64_t)a3, a4);
  v12 = a6 + v11[8];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v11[9];
  *(_BYTE *)(a6 + v11[10]) = 0;
  *(_BYTE *)a6 = v9;
  *(_OWORD *)(a6 + 8) = *a2;
  *(_BYTE *)(a6 + v14) = v10;
  return outlined assign with take of FloatingPointFormatStyle<Double>?(a4, v12);
}

uint64_t Measurement<>.FormatStyle.formatAsDescription(_:)(void **a1, uint64_t a2)
{
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  v3 = *a1;
  LOBYTE(v20) = *v2;
  v4 = *(int *)(a2 + 32);
  v22 = v2[*(int *)(a2 + 36)];
  v5 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(0, 0, (unsigned __int8 *)&v20, &v22, (uint64_t)&v2[v4]);
  v7 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v5, v6);
  v9 = v8;
  swift_bridgeObjectRelease();
  if (!v9)
  {
    v7 = Double.description.getter();
    v9 = v10;
  }
  v20 = v7;
  v21 = v9;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12 = v20;
  v13 = v21;
  v14 = objc_msgSend(v3, sel_symbol);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v20 = v12;
  v21 = v13;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = (uint64_t)v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

void Measurement<>.FormatStyle.hash(into:)(uint64_t a1, int *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  Swift::UInt8 v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  int *v15;
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  int v59;
  uint64_t v60;
  void *v61;
  id v62;
  void *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  _BYTE v69[144];
  char v70[8];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  char *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char v86;
  char v87;
  _QWORD v88[18];
  _BYTE v89[144];
  _BYTE v90[152];

  v3 = v2;
  v67 = a2;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v68 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v2);
  v10 = *((_QWORD *)v2 + 2);
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) != 0)
  {
    v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    v16 = v66;
    v15 = v67;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v14(v88, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)v89, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v89, (uint64_t)v90, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v90) == 1)
  {
    v13 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v89, (uint64_t)v70, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v70[0] == 2)
  {
    v17 = 0;
  }
  else
  {
    v17 = v70[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  v18 = v71;
  v64 = v6;
  if (!v71)
  {
    Hasher._combine(_:)(0);
    v23 = v70;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v89, (uint64_t)v69, &demangling cache variable for type metadata for LocalePreferences?);
    v23 = v69;
LABEL_20:
    outlined retain of LocalePreferences(v23);
    if (!v72)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v72)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v73)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v73)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v21 = v74;
    if (!v74)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
    v22 = v75;
    if (!v75)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v21 = v74;
  if (v74)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v22 = v75;
  if (!v75)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v22);
  swift_bridgeObjectRelease();
LABEL_25:
  v24 = v77;
  v26 = v78;
  v25 = v79;
  v27 = v80;
  v61 = v80;
  v62 = v76;
  if (v76)
  {
    v65 = v9;
    v28 = v76;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    v60 = v29;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v24;
    v31 = v26;
    v32 = v25;
    v33 = v27;
    v34 = v28;
    v9 = v65;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v35 = v27;
    v36 = v24;
    v37 = v26;
    v38 = v25;
  }
  v65 = v25;
  v39 = v9;
  if (v24)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v40 = v24;
    v41 = v24;
    v42 = v26;
    v43 = v41;
    _CFObject.hash(into:)();

    v26 = v42;
    v63 = v42;
    if (v42)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v44 = v26;
      _CFObject.hash(into:)();

      goto LABEL_33;
    }
  }
  else
  {
    v40 = 0;
    Hasher._combine(_:)(0);
    v63 = v26;
    if (v26)
      goto LABEL_30;
  }
  Hasher._combine(_:)(0);
LABEL_33:
  v45 = v65;
  v46 = v40;
  v9 = v39;
  v47 = v61;
  if (v65)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v48 = v45;
    _CFObject.hash(into:)();

    if (v47)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v49 = v47;
      _CFObject.hash(into:)();

      goto LABEL_38;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v47)
      goto LABEL_35;
  }
  Hasher._combine(_:)(0);
  v49 = 0;
LABEL_38:
  v50 = v65;
  v51 = v63;

  v52 = v81;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v52);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = v64;
  v53 = v82;
  if (!v82)
  {
    Hasher._combine(_:)(0);
    if (v83)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v53);
  swift_bridgeObjectRelease();
  if (!v83)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  v16 = v66;
  v15 = v67;
  if (v84 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v84 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v85 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v55 = v85 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v55);
  }
  if (v86 == 2)
  {
    v56 = 0;
  }
  else
  {
    v56 = v86 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v56);
  if (v87 == 2)
  {
    v57 = 0;
  }
  else
  {
    v58 = v87 & 1;
    Hasher._combine(_:)(1u);
    v57 = v58;
  }
  Hasher._combine(_:)(v57);
  outlined retain of LocalePreferences?((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)&v3[v15[8]], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v9, 1, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  v59 = v3[v15[9]];
  if (v59 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v59);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v3[v15[10]]);
}

uint64_t Measurement<>.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874646977 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000182308F00
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6567617375 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x635373656469685FLL && a2 == 0xEF656D614E656C61)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t Measurement<>.FormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BDF7BC + 4 * byte_1820E901E[a1]))(0x6874646977, 0xE500000000000000);
}

uint64_t sub_181BDF7BC()
{
  return 0x656C61636F6CLL;
}

unint64_t sub_181BDF7D0()
{
  return 0xD000000000000011;
}

uint64_t sub_181BDF7EC()
{
  return 0x6567617375;
}

uint64_t sub_181BDF7FC()
{
  return 0x635373656469685FLL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.FormatStyle.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  FloatingPointParseStrategy.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return Measurement<>.FormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Measurement<>.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Measurement<A><>.FormatStyle.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized Measurement<>.FormatStyle.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.FormatStyle.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;

  v23 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Measurement<>.FormatStyle.CodingKeys(255, v5, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v22 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = v5;
  v12 = v24;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v26) = *(_BYTE *)v12;
  v27 = 0;
  v15 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth(0, v11, v13, v14);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth, v15);
  v16 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v16)
  {
    v17 = v23;
    v26 = *(_OWORD *)(v12 + 8);
    v27 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v26) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>(&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v26) = *(_BYTE *)(v12 + *(int *)(v17 + 36));
    v27 = 3;
    v20 = type metadata accessor for MeasurementFormatUnitUsage(0, v11, v18, v19);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>, v20);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Measurement<>.FormatStyle.hashValue.getter(int *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  Swift::UInt8 v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  Swift::UInt8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  void *v57;
  void *v58;
  char *v59;
  int *v60;
  id v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[144];
  char v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  char v84;
  _QWORD v85[18];
  _BYTE v86[144];
  _BYTE v87[144];
  _BYTE v88[80];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v65 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v64 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v1);
  v9 = *((_QWORD *)v1 + 2);
  ObjectType = swift_getObjectType();
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 48);
  swift_unknownObjectRetain();
  if ((v11(ObjectType, v9) & 1) != 0)
  {
    v12 = 1;
LABEL_5:
    Hasher._combine(_:)(v12);
    swift_unknownObjectRelease();
    v14 = v65;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(ObjectType, v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 464);
  swift_unknownObjectRetain();
  v13(v85, ObjectType, v9);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v87, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v87) == 1)
  {
    v12 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v67[0] == 2)
  {
    v15 = 0;
  }
  else
  {
    v15 = v67[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v15);
  v16 = v68;
  v62 = v4;
  if (!v68)
  {
    Hasher._combine(_:)(0);
    v21 = v67;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v16 + 16));
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
    v21 = v66;
LABEL_20:
    outlined retain of LocalePreferences(v21);
    if (!v69)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v18 = v16 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v18 += 16;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  if (!v69)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v70)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v70)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v19 = v71;
    if (!v71)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v88, v19);
    swift_bridgeObjectRelease();
    v20 = v72;
    if (!v72)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v19 = v71;
  if (v71)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v20 = v72;
  if (!v72)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v88, v20);
  swift_bridgeObjectRelease();
LABEL_25:
  v22 = v74;
  v23 = v75;
  v24 = v76;
  v25 = v77;
  v60 = a1;
  v61 = v73;
  v58 = v77;
  v59 = v8;
  v57 = v75;
  if (v73)
  {
    v26 = v74;
    v27 = v75;
    v28 = v73;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v26;
    v30 = v27;
    v22 = v26;
    v31 = v24;
    v32 = v25;
    v33 = v28;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v34 = v25;
    v35 = v22;
    v36 = v23;
    v37 = v24;
  }
  v63 = v24;
  if (v22)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v22;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v39 = v57;
  v8 = v59;
  a1 = v60;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v40 = v39;
    _CFObject.hash(into:)();

    v41 = v63;
    if (v63)
      goto LABEL_33;
LABEL_36:
    Hasher._combine(_:)(0);
    v43 = v58;
    if (v58)
      goto LABEL_34;
    goto LABEL_37;
  }
  Hasher._combine(_:)(0);
  v41 = v63;
  if (!v63)
    goto LABEL_36;
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v42 = v41;
  _CFObject.hash(into:)();

  v43 = v58;
  if (v58)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v43;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v44 = 0;
LABEL_38:
  v45 = v63;

  v46 = v78;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v88, v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v4 = v62;
  v14 = v65;
  v47 = v79;
  if (!v79)
  {
    Hasher._combine(_:)(0);
    if (v80)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v88, v47);
  swift_bridgeObjectRelease();
  if (!v80)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v81 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = v81 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v82 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v49 = v82 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v83 == 2)
  {
    v50 = 0;
  }
  else
  {
    v50 = v83 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v50);
  if (v84 == 2)
  {
    v51 = 0;
  }
  else
  {
    v52 = v84 & 1;
    Hasher._combine(_:)(1u);
    v51 = v52;
  }
  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?((uint64_t)v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)&v2[a1[8]], (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v64;
    outlined init with take of LocalePreferences?((uint64_t)v8, v64, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)((uint64_t)v88);
    outlined destroy of Any?(v53, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  v54 = v2[a1[9]];
  if (v54 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v54);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v2[a1[10]]);
  return Hasher._finalize()();
}

uint64_t Measurement<>.FormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char v56;

  v45 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v5);
  v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Measurement<>.FormatStyle.CodingKeys(255, a2, v7, v8);
  v53 = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.CodingKeys, v9);
  v50 = type metadata accessor for KeyedDecodingContainer();
  v47 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v11 = (char *)&v41 - v10;
  v49 = a2;
  v14 = type metadata accessor for Measurement<>.FormatStyle(0, a2, v12, v13);
  v44 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v41 - v15;
  v18 = (char *)&v41 + *(int *)(v17 + 32) - v15;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v52 = v18;
  v20(v18, 1, 1, v19);
  v46 = *(int *)(v14 + 36);
  v16[v46] = 14;
  v21 = *(int *)(v14 + 40);
  v16[v21] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v51 = v11;
  v22 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v25 = a1;
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of Any?((uint64_t)v52, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }
  else
  {
    v53 = v14;
    v54 = v19;
    v43 = v21;
    v27 = v47;
    v26 = (uint64_t)v48;
    v28 = (uint64_t)v25;
    v29 = v49;
    v30 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth(0, v49, v23, v24);
    v56 = 0;
    MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth, v30);
    v31 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *v16 = v55;
    v56 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v42 = v16;
    *(_OWORD *)(v16 + 8) = v55;
    LOBYTE(v55) = 2;
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>(&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointFormatStyle<Double>?(v26, (uint64_t)v52);
    v34 = type metadata accessor for MeasurementFormatUnitUsage(0, v29, v32, v33);
    v56 = 3;
    MEMORY[0x186DA9D64](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>, v34);
    v35 = v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v36 = v42;
    v42[v46] = v55;
    LOBYTE(v55) = 4;
    v37 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v31);
    v38 = v44;
    v36[v43] = v37 & 1;
    v39 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v45, v36, v53);
    __swift_destroy_boxed_opaque_existential_1(v28);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v36, v39);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Measurement<>.FormatStyle.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement<>.FormatStyle.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle(uint64_t a1, int *a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  Measurement<>.FormatStyle.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  return static Measurement<>.FormatStyle.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle)
                                     + 40));
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.hidesScaleName.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle)
              + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  return Measurement<>.FormatStyle<>.hidesScaleName.modify;
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

uint64_t Measurement<>.FormatStyle<>.init(width:locale:usage:hidesScaleName:numberFormatStyle:)@<X0>(char *a1@<X0>, _OWORD *a2@<X1>, char *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10;
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v10 = *a1;
  v11 = *a3;
  v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  v13 = a6 + v12[8];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v12[9];
  v16 = v12[10];
  *(_BYTE *)(a6 + v16) = 0;
  *(_BYTE *)a6 = v10;
  *(_OWORD *)(a6 + 8) = *a2;
  *(_BYTE *)(a6 + v15) = v11;
  result = outlined assign with take of FloatingPointFormatStyle<Double>?(a5, v13);
  *(_BYTE *)(a6 + v16) = a4;
  return result;
}

void Measurement<>.FormatStyle<>.ByteCount.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Measurement<>.FormatStyle<>.ByteCount.style.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.style.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Measurement<>.FormatStyle<>.ByteCount.allowedUnits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *Measurement<>.FormatStyle<>.ByteCount.allowedUnits.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.allowedUnits.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle<>.ByteCount.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 17);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle<>.ByteCount.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __n128 result;

  v6 = *a2;
  *(_BYTE *)a6 = *a1;
  *(_QWORD *)(a6 + 8) = v6;
  *(_BYTE *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 17) = a4;
  result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.format(_:)(double *a1)
{
  char *v1;
  double v2;
  double v3;
  char v4;
  double v5;
  char v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  double v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  _OWORD *v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v2 = *a1;
  v3 = a1[1];
  v4 = *v1;
  v5 = *((double *)v1 + 1);
  v6 = v1[16];
  v7 = v1[17];
  v8 = (void *)objc_opt_self();
  v26 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  v9 = objc_msgSend(v8, sel_bytes);
  specialized Measurement<>.converted(to:)(&v27, v9, *(_QWORD *)&v2, v3);

  v10 = v27;
  v11 = v28;
  LOBYTE(v27) = v4;
  v28 = v5;
  LOBYTE(v29) = v6;
  BYTE1(v29) = v7;
  v30 = v26;
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)((uint64_t *)&v36, v11);
  swift_unknownObjectRelease_n();

  v12 = v36;
  v13 = v36[2];
  v37 = v36[1];
  v38 = v13;
  v39 = v36[3];
  *(double *)&v14 = COERCE_DOUBLE(BigString.startIndex.getter());
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = BigString.endIndex.getter();
  v27 = v12;
  v28 = *(double *)&v14;
  v29 = v16;
  *(_QWORD *)&v30 = v18;
  *((_QWORD *)&v30 + 1) = v20;
  v31 = v21;
  v32 = v22;
  v33 = v23;
  v34 = v24;
  v35 = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  return String.init<A>(_:)();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[152];

  v3 = *((_QWORD *)v1 + 1);
  v4 = v1[16];
  v5 = v1[17];
  v6 = *((_QWORD *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v62, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      v11 = 0;
    }
    else
    {
      v11 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v11);
    v12 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v47)
            goto LABEL_14;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          v15 = v48;
          if (!v48)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v15 = v48;
        if (!v48)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v16 = v49;
          if (!v49)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }
LABEL_23:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_24:
          v19 = v50;
          v18 = v51;
          v21 = v52;
          v20 = v53;
          v22 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v23 = v18;
            v24 = v21;
            v25 = v20;
            v26 = v22;
            v27 = v19;
            _CFObject.hash(into:)();
            if (v18)
              goto LABEL_26;
          }
          else
          {
            Hasher._combine(_:)(0);
            v32 = v22;
            v33 = v18;
            v34 = v21;
            v35 = v20;
            if (v18)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v28 = v18;
              _CFObject.hash(into:)();

              if (v21)
                goto LABEL_27;
              goto LABEL_32;
            }
          }
          Hasher._combine(_:)(0);
          if (v21)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v29 = v21;
            _CFObject.hash(into:)();

            if (v20)
              goto LABEL_28;
            goto LABEL_33;
          }
LABEL_32:
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v30 = v20;
            _CFObject.hash(into:)();

            if (v22)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v31 = v22;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }
LABEL_34:
            Hasher._combine(_:)(0);
            v31 = 0;
LABEL_35:

            v36 = v55;
            if (v36)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v36);
              swift_bridgeObjectRelease();
              v37 = v56;
              if (v56)
                goto LABEL_37;
            }
            else
            {
              Hasher._combine(_:)(0);
              v37 = v56;
              if (v56)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v37);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v39);
                  }
                  if (v60 == 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v40);
                  if (v61 == 2)
                  {
                    v41 = 0;
                  }
                  else
                  {
                    v42 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    v41 = v42;
                  }
                  Hasher._combine(_:)(v41);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_41:
                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }
            Hasher._combine(_:)(0);
            if (v57)
              goto LABEL_38;
            goto LABEL_41;
          }
LABEL_33:
          Hasher._combine(_:)(0);
          if (v22)
            goto LABEL_29;
          goto LABEL_34;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        v16 = v49;
        if (!v49)
          goto LABEL_16;
        goto LABEL_23;
      }
      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
      v17 = v43;
    }
    else
    {
      Hasher._combine(_:)(0);
      v17 = v44;
    }
    outlined retain of LocalePreferences(v17);
    if (!v46)
      goto LABEL_13;
    goto LABEL_20;
  }
  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BE1570 + 4 * byte_1820E9023[*v0]))(0x656C797473, 0xE500000000000000);
}

uint64_t sub_181BE1570()
{
  return 0x556465776F6C6C61;
}

uint64_t sub_181BE1590()
{
  return 0x754F736C6C657073;
}

unint64_t sub_181BE15B4()
{
  return 0xD000000000000017;
}

uint64_t sub_181BE15D0()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Measurement<>.FormatStyle<>.ByteCount.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  char v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys>);
  v13 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v12 = *((_QWORD *)v1 + 1);
  v16 = v1[16];
  v11 = v1[17];
  v10 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v6;
  v17 = 0;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  v7 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v7)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v5, v3);
  v9 = v13;
  *(_QWORD *)&v15 = v12;
  v17 = 1;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v15) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v15) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  v15 = v10;
  v17 = 4;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v5, v3);
}

Swift::Int Measurement<>.FormatStyle<>.ByteCount.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
    v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v48;
    if (!v48)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    v15 = v49;
    if (!v49)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v48;
  if (v48)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  v18 = v50;
  v17 = v51;
  v20 = v52;
  v19 = v53;
  v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v17;
    v23 = v20;
    v24 = v19;
    v25 = v21;
    v26 = v18;
    _CFObject.hash(into:)();
    if (v17)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v21;
    v32 = v17;
    v33 = v20;
    v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v27 = v17;
      _CFObject.hash(into:)();

      if (v20)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v28 = v20;
    _CFObject.hash(into:)();

    if (v19)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v30 = 0;
LABEL_36:

  v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    v36 = v56;
    if (v56)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v36 = v56;
  if (!v56)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    v39 = 0;
  }
  else
  {
    v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    v40 = 0;
  }
  else
  {
    v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  int v22;
  char v23;

  v18 = a2;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys>);
  v4 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v20 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v8 = v4;
    v9 = v18;
    v23 = 0;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
    v10 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v21;
    v23 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v21;
    LOBYTE(v21) = 2;
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v21) = 3;
    v22 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v10);
    v15 = v21;
    v16 = v22 & 1;
    *(_BYTE *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v13 & 1;
    *(_BYTE *)(v9 + 17) = v16;
    *(_OWORD *)(v9 + 24) = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.FormatStyle<>.ByteCount@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = Measurement<>.FormatStyle<>.ByteCount.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle<>.ByteCount@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Measurement<>.FormatStyle<>.ByteCount.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle<>.ByteCount(_QWORD *a1)
{
  return Measurement<>.FormatStyle<>.ByteCount.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle<>.ByteCount()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _QWORD v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44)
      goto LABEL_14;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_19;
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v46;
    if (!v46)
      goto LABEL_16;
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    v15 = v47;
    if (!v47)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v46;
  if (v46)
    goto LABEL_22;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  v17 = v48;
  v16 = v49;
  v19 = v50;
  v18 = v51;
  v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
    if (v16)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v16;
    v32 = v19;
    v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v26 = v16;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_28;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_33;
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_35:

  v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    v35 = v54;
    if (v54)
      goto LABEL_37;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v35 = v54;
  if (!v54)
    goto LABEL_40;
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Usage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = Usage.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == Usage.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Usage@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Usage.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Usage@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Usage.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Usage()
{
  lazy protocol witness table accessor for type Usage and conformance Usage();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Usage()
{
  lazy protocol witness table accessor for type Usage and conformance Usage();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Usage()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Usage()
{
  unsigned __int8 *v0;

  Usage.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Usage()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t MeasurementFormatUnitUsage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6567617375 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys()
{
  return 0x6567617375;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MeasurementFormatUnitUsage<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = MeasurementFormatUnitUsage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t MeasurementFormatUnitUsage.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  char v13;

  v6 = type metadata accessor for MeasurementFormatUnitUsage.CodingKeys(255, *(_QWORD *)(a2 + 16), a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v12 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - v8;
  v10 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v10;
  lazy protocol witness table accessor for type Usage and conformance Usage();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v7);
}

Swift::Int MeasurementFormatUnitUsage.hashValue.getter()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t MeasurementFormatUnitUsage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v14;
  _BYTE *v15;
  char v16;

  v15 = a5;
  v7 = type metadata accessor for MeasurementFormatUnitUsage.CodingKeys(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>.CodingKeys, v7);
  v8 = type metadata accessor for KeyedDecodingContainer();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    v12 = v15;
    lazy protocol witness table accessor for type Usage and conformance Usage();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *v12 = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MeasurementFormatUnitUsage<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return MeasurementFormatUnitUsage.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MeasurementFormatUnitUsage<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MeasurementFormatUnitUsage.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MeasurementFormatUnitUsage<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))MeasurementFormatUnitUsage.hash(into:));
}

void static MeasurementFormatUnitUsage<>.road.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static MeasurementFormatUnitUsage<>.personHeight.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static MeasurementFormatUnitUsage<>.focalLength.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static MeasurementFormatUnitUsage<>.snowfall.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static MeasurementFormatUnitUsage<>.food.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static MeasurementFormatUnitUsage<>.personWeight.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static MeasurementFormatUnitUsage<>.liquid.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t outlined init with copy of FloatingPointFormatStyle<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v3;
  BOOL v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;

  v3 = 0;
  v4 = *a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
  if (v4 && ((a1[16] ^ a2[16]) & 1) == 0 && ((a1[17] ^ a2[17]) & 1) == 0)
  {
    v5 = *(_OWORD *)(a1 + 24);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = v5;
    v3 = specialized static Locale.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  }
  return v3 & 1;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.UnitWidth.CodingKeys);
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.UnitWidth.Option);
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.CodingKeys);
}

uint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Style, &type metadata for ByteCountFormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Style, &type metadata for ByteCountFormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Style, &type metadata for ByteCountFormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Style, &type metadata for ByteCountFormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Units, &type metadata for ByteCountFormatStyle.Units);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Units, &type metadata for ByteCountFormatStyle.Units);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Units, &type metadata for ByteCountFormatStyle.Units);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Units, &type metadata for ByteCountFormatStyle.Units);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Units, &type metadata for ByteCountFormatStyle.Units);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Units, &type metadata for ByteCountFormatStyle.Units);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }
  return result;
}

uint64_t type metadata accessor for MeasurementFormatUnitUsage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeasurementFormatUnitUsage.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type Usage and conformance Usage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.FormatStyle<>.ByteCount(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
  a1[2] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
  result = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
  a1[3] = result;
  return result;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle<>.ByteCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle<>.ByteCount);
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle<>.ByteCount()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
}

uint64_t sub_181BE3628@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 40));
  return result;
}

uint64_t sub_181BE3660(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *(_BYTE *)(a2 + *(int *)(result + 40)) = v3;
  return result;
}

uint64_t sub_181BE3694()
{
  return 0;
}

_QWORD *initializeBufferWithCopyOfBuffer for Measurement<>.FormatStyle(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *__dst;
  int *v31;
  uint64_t v32;
  _OWORD *v33;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v7 = a3[8];
    v8 = (_OWORD *)(a1 + v7);
    v9 = (_OWORD *)((char *)a2 + v7);
    swift_unknownObjectRetain();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v32 = v11;
      v33 = v8;
      *v8 = *v9;
      v14 = *(int *)(v10 + 36);
      v15 = (char *)v8 + v14;
      v16 = (char *)v9 + v14;
      v15[8] = v16[8];
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_OWORD *)(v15 + 57) = *(_OWORD *)(v16 + 57);
      v17 = *((_OWORD *)v16 + 3);
      v18 = *((_OWORD *)v16 + 1);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v17;
      *((_OWORD *)v15 + 1) = v18;
      v15[73] = v16[73];
      v15[76] = v16[76];
      *((_WORD *)v15 + 37) = *((_WORD *)v16 + 37);
      v15[77] = v16[77];
      v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v19 = v31[9];
      __dst = &v15[v19];
      v20 = &v16[v19];
      v21 = type metadata accessor for FloatingPointRoundingRule();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_unknownObjectRetain();
      if (v23(v20, 1, v21))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      v25 = v31[10];
      v26 = &v15[v25];
      v27 = &v16[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v15[v31[11]] = v16[v31[11]];
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v10);
    }
    v28 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v28) = *((_BYTE *)a2 + v28);
  }
  return v4;
}

uint64_t assignWithCopy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  char *__dst;
  uint64_t v56;
  int *v57;
  int *v58;
  int *v59;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[8];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    v59 = a3;
    v29 = v9[1];
    *v8 = *v9;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v8[1] = v29;
    v30 = *(int *)(v10 + 36);
    v31 = (char *)v8 + v30;
    v32 = (char *)v9 + v30;
    LOBYTE(v30) = *((_BYTE *)v9 + v30 + 8);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v30;
    v33 = *((_OWORD *)v32 + 1);
    v34 = *((_OWORD *)v32 + 2);
    v35 = *((_OWORD *)v32 + 3);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(v32 + 57);
    *((_OWORD *)v31 + 2) = v34;
    *((_OWORD *)v31 + 3) = v35;
    *((_OWORD *)v31 + 1) = v33;
    v31[73] = v32[73];
    LOWORD(v30) = *((_WORD *)v32 + 37);
    v31[76] = v32[76];
    *((_WORD *)v31 + 37) = v30;
    v31[77] = v32[77];
    v57 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v36 = v57[9];
    v37 = &v31[v36];
    v38 = &v32[v36];
    v39 = type metadata accessor for FloatingPointRoundingRule();
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v37, 1, v39);
    v43 = v41(v38, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
LABEL_16:
        a3 = v59;
        v49 = v57[10];
        v50 = &v31[v49];
        v51 = &v32[v49];
        v52 = *(_QWORD *)v51;
        v50[8] = v51[8];
        *(_QWORD *)v50 = v52;
        v31[v57[11]] = v32[v57[11]];
        goto LABEL_17;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
    }
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_17;
  }
  v58 = a3;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v15 = *(int *)(v10 + 36);
  v16 = (char *)v8 + v15;
  v17 = (char *)v9 + v15;
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  v19 = *((_OWORD *)v17 + 1);
  v20 = *((_OWORD *)v17 + 2);
  v21 = *((_OWORD *)v17 + 3);
  *(_OWORD *)(v16 + 57) = *(_OWORD *)(v17 + 57);
  *((_OWORD *)v16 + 2) = v20;
  *((_OWORD *)v16 + 3) = v21;
  *((_OWORD *)v16 + 1) = v19;
  v16[73] = v17[73];
  LOWORD(v18) = *((_WORD *)v17 + 37);
  v16[76] = v17[76];
  *((_WORD *)v16 + 37) = v18;
  v16[77] = v17[77];
  v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v23 = *(int *)(v22 + 36);
  __dst = &v16[v23];
  v56 = v22;
  v24 = &v17[v23];
  v25 = type metadata accessor for FloatingPointRoundingRule();
  v54 = *(_QWORD *)(v25 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
  swift_unknownObjectRetain();
  if (v26(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v24, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v25);
  }
  a3 = v58;
  v44 = *(int *)(v56 + 40);
  v45 = &v16[v44];
  v46 = &v17[v44];
  v47 = *(_QWORD *)v46;
  v45[8] = v46[8];
  *(_QWORD *)v45 = v47;
  v16[*(int *)(v56 + 44)] = v17[*(int *)(v56 + 44)];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_17:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int *v27;
  uint64_t v28;
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[8];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v28 = v10;
    *v7 = *v8;
    v12 = *(int *)(v9 + 36);
    v13 = (char *)v7 + v12;
    v14 = (char *)v8 + v12;
    v13[8] = v14[8];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
    v15 = *((_OWORD *)v14 + 3);
    v16 = *((_OWORD *)v14 + 1);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v15;
    *((_OWORD *)v13 + 1) = v16;
    v13[73] = v14[73];
    LOWORD(v12) = *((_WORD *)v14 + 37);
    v13[76] = v14[76];
    *((_WORD *)v13 + 37) = v12;
    v13[77] = v14[77];
    v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v17 = v27[9];
    __dst = &v13[v17];
    v18 = &v14[v17];
    v19 = type metadata accessor for FloatingPointRoundingRule();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    v22 = v27[10];
    v23 = &v13[v22];
    v24 = &v14[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v13[v27[11]] = v14[v27[11]];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v7, 0, 1, v9);
  }
  v25 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t assignWithTake for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  char *__dst;
  int *__dsta;
  int *v52;
  int *v53;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[8];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    v53 = a3;
    v27 = v9[1];
    *v8 = *v9;
    swift_unknownObjectRelease();
    v8[1] = v27;
    v28 = *(int *)(v10 + 36);
    v29 = (char *)v8 + v28;
    v30 = (char *)v9 + v28;
    *(_QWORD *)v29 = *(_QWORD *)((char *)v9 + v28);
    v29[8] = *((_BYTE *)v9 + v28 + 8);
    v31 = *(_OWORD *)((char *)v9 + v28 + 32);
    *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v9 + v28 + 16);
    *((_OWORD *)v29 + 2) = v31;
    *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v9 + v28 + 48);
    *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v9 + v28 + 57);
    v29[73] = *((_BYTE *)v9 + v28 + 73);
    v29[76] = *((_BYTE *)v9 + v28 + 76);
    *((_WORD *)v29 + 37) = *(_WORD *)((char *)v9 + v28 + 74);
    v29[77] = *((_BYTE *)v9 + v28 + 77);
    __dsta = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v32 = __dsta[9];
    v33 = &v29[v32];
    v34 = &v30[v32];
    v35 = type metadata accessor for FloatingPointRoundingRule();
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_16:
        a3 = v53;
        v44 = __dsta[10];
        v45 = &v29[v44];
        v46 = &v30[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v45[8] = v46[8];
        v29[__dsta[11]] = v30[__dsta[11]];
        goto LABEL_17;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    }
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_17;
  }
  v52 = a3;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v15 = *(int *)(v10 + 36);
  v16 = (char *)v8 + v15;
  v17 = (char *)v9 + v15;
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_OWORD *)(v16 + 57) = *(_OWORD *)(v17 + 57);
  v18 = *((_OWORD *)v17 + 3);
  v19 = *((_OWORD *)v17 + 1);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  *((_OWORD *)v16 + 1) = v19;
  v16[73] = v17[73];
  LOWORD(v15) = *((_WORD *)v17 + 37);
  v16[76] = v17[76];
  *((_WORD *)v16 + 37) = v15;
  v16[77] = v17[77];
  v20 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v21 = *(int *)(v20 + 36);
  v49 = v20;
  __dst = &v16[v21];
  v22 = &v17[v21];
  v23 = type metadata accessor for FloatingPointRoundingRule();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(__dst, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
  }
  v40 = *(int *)(v49 + 40);
  v41 = &v16[v40];
  v42 = &v17[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  v16[*(int *)(v49 + 44)] = v17[*(int *)(v49 + 44)];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  a3 = v52;
LABEL_17:
  v47 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v47) = *(_BYTE *)(a2 + v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.FormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BE4298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181BE4324(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MeasurementFormatUnitUsage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_181BE43EC + 4 * byte_1820E9057[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_181BE4420 + 4 * byte_1820E9052[v4]))();
}

uint64_t sub_181BE4420(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE4428(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BE4430);
  return result;
}

uint64_t sub_181BE443C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BE4444);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_181BE4448(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE4450(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Usage()
{
  return &type metadata for Usage;
}

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle<>.ByteCount.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181BE44C0 + 4 * byte_1820E9061[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181BE44F4 + 4 * byte_1820E905C[v4]))();
}

uint64_t sub_181BE44F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE44FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BE4504);
  return result;
}

uint64_t sub_181BE4510(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BE4518);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181BE451C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BE4524(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for MeasurementFormatUnitUsage.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181BE4570 + 4 * byte_1820E9070[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181BE4590 + 4 * byte_1820E9075[v4]))();
}

_BYTE *sub_181BE4570(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181BE4590(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181BE4598(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181BE45A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181BE45A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181BE45B0(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
}

void base witness table accessor for Equatable in MeasurementFormatUnitUsage<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in MeasurementFormatUnitUsage<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in MeasurementFormatUnitUsage<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

unint64_t specialized Usage.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Usage.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

uint64_t specialized Measurement<>.FormatStyle.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t specialized Measurement<>.FormatStyle<>.ByteCount.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x556465776F6C6C61 && a2 == 0xEC0000007374696ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754F736C6C657073 && a2 == 0xED00006F72655A74
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000182308F20
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t one-time initialization function for logHandle()
{
  uint64_t result;

  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  result = OS_os_log.init(subsystem:category:)();
  logHandle = result;
  return result;
}

void NSURLSessionWebSocketTask.send(_:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v7;
  void *v8;
  _QWORD aBlock[7];

  v4 = v3;
  aBlock[6] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16) != 1)
    __asm { BR              X10 }
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C92CF0]), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_10;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_sendMessage_completionHandler_, v7, v8);
  _Block_release(v8);

}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void NSURLSessionWebSocketTask.receive(completionHandler:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v7[4] = partial apply for closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:);
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSURLSessionWebSocketMessage?, @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_10;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_receiveMessageWithCompletionHandler_, v6);
  _Block_release(v6);
}

void closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)(void *a1, id a2, void (*a3)(id *))
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  __int16 v20;

  if (!a1)
  {
    if (a2)
    {
      v18 = a2;
      v19 = 0;
      v20 = 256;
      v12 = a2;
      a3(&v18);

      return;
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    v5 = a1;
    v6 = objc_msgSend(v5, sel_type);
    if (v6 == (id)1)
    {
      v7 = objc_msgSend(v5, sel_string);
      if (v7)
      {
        v8 = v7;
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v11 = v10;

        v18 = v9;
        v19 = v11;
        v20 = 1;
        a3(&v18);
        swift_bridgeObjectRelease();

        return;
      }
      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if (!v6)
    {
      v13 = objc_msgSend(v5, sel_data);
      if (v13)
      {
        v14 = v13;
        v15 = specialized Data.init(referencing:)(v14);
        v17 = v16;

        v18 = v15;
        v19 = v17;
        v20 = 0;
        a3(&v18);

        outlined consume of Data._Representation((uint64_t)v15, v17);
        return;
      }
      goto LABEL_12;
    }
  }
LABEL_13:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSURLSessionWebSocketMessage?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

id NSURLSessionTaskTransactionMetrics.localPort.getter()
{
  return NSURLSessionTaskTransactionMetrics.localPort.getter((SEL *)&selRef_localPort);
}

id NSURLSessionTaskTransactionMetrics.remotePort.getter()
{
  return NSURLSessionTaskTransactionMetrics.localPort.getter((SEL *)&selRef_remotePort);
}

id NSURLSessionTaskTransactionMetrics.localPort.getter(SEL *a1)
{
  void *v1;
  id result;
  void *v3;
  id v4;
  id v5;
  char v6;

  result = objc_msgSend(v1, *a1);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, sel_integerValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v4);
    v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
      return v4;
    else
      return 0;
  }
  return result;
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter()
{
  return NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter((SEL *)&selRef_negotiatedTLSProtocolVersion);
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSCipherSuite.getter()
{
  return NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter((SEL *)&selRef_negotiatedTLSCipherSuite);
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter(SEL *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  char v6;
  char v7;

  v2 = objc_msgSend(v1, *a1);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v4);
    v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
      LODWORD(v2) = (_DWORD)v4;
    else
      LODWORD(v2) = 0;
    v7 = v6 ^ 1;
  }
  else
  {
    v7 = 1;
  }
  return v2 & 0xFFFEFFFF | ((v7 & 1) << 16);
}

uint64_t closure #1 in URLSessionAsyncBytesDelegate.data()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;

  v6 = a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state;
  outlined destroy of URLSessionAsyncBytesDelegate.State(a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a1, v7);
  type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  swift_storeEnumTagMultiPayload();
  v8 = *(os_unfair_lock_s **)(a2
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  v9 = swift_release();
  return a3(v9);
}

uint64_t NSURLSession.data(from:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 104) = a2;
  *(_QWORD *)(v3 + 112) = v2;
  *(_QWORD *)(v3 + 120) = *(_QWORD *)a1;
  *(_OWORD *)(v3 + 128) = *(_OWORD *)(a1 + 8);
  return swift_task_switch();
}

uint64_t NSURLSession.data(from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;
  __int128 v8;

  v8 = *(_OWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  v7 = *(_OWORD *)(v0 + 112);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v3 = swift_initStackObject();
  *(_QWORD *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(inited + 16) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 48) = v1;
  *(_QWORD *)(v4 + 56) = inited;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v5 = v0;
  v5[1] = NSURLSession.data(from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.data(from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v6 = *(_OWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 56) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v4 = v0;
  v4[1] = closure #1 in NSURLSession.data(from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  _BYTE v24[16];
  _QWORD aBlock[6];

  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](v12);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v13 + 16))(&v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v12, v15);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v13 + 32))(v17 + v16, &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_131;
  v18 = _Block_copy(aBlock);
  v19 = a3;
  swift_release();
  v20 = objc_msgSend(a2, sel__dataTaskWithURL_delegate_completionHandler_, v19, a6, v18);
  _Block_release(v18);

  objc_msgSend(v20, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v20, sel_resume);
  v21 = *(os_unfair_lock_s **)(a7 + 16);
  v22 = v21 + 4;
  v23 = v21 + 8;
  os_unfair_lock_lock(v21 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v22, v20, (char *)aBlock);
  os_unfair_lock_unlock(v23);
  if ((aBlock[0] & 1) == 0)
    objc_msgSend(v20, sel_cancel);

}

uint64_t NSURLSession.upload(for:fromFile:delegate:)(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 104) = a3;
  *(_QWORD *)(v4 + 112) = v3;
  v5 = *a2;
  *(_QWORD *)(v4 + 120) = *a1;
  *(_QWORD *)(v4 + 128) = v5;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 1);
  return swift_task_switch();
}

uint64_t NSURLSession.upload(for:fromFile:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 144);
  v9 = *(_OWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  v8 = *(_OWORD *)(v0 + 112);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 152) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v4 = swift_initStackObject();
  *(_QWORD *)(v0 + 160) = v4;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(inited + 16) = v4;
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 48) = v1;
  *(_QWORD *)(v5 + 56) = v2;
  *(_QWORD *)(v5 + 64) = inited;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v6 = v0;
  v6[1] = NSURLSession.upload(for:fromFile:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.upload(for:fromFile:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 72);
  v5 = *(_OWORD *)(v0 + 40);
  v6 = *(_OWORD *)(v0 + 56);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 48) = v6;
  *(_QWORD *)(v2 + 64) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v3 = v0;
  v3[1] = closure #1 in NSURLSession.upload(for:fromFile:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[7];

  v26 = a8;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1E0C80A78](v13).n128_f64[0]);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  v16 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_122;
  v19 = _Block_copy(aBlock);
  v20 = a4;
  swift_release();
  v21 = objc_msgSend(a2, sel__uploadTaskWithRequest_fromFile_delegate_completionHandler_, v16, v20, a7, v19);
  _Block_release(v19);

  objc_msgSend(v21, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v21, sel_resume);
  v22 = *(os_unfair_lock_s **)(v26 + 16);
  v23 = v22 + 4;
  v24 = v22 + 8;
  os_unfair_lock_lock(v22 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v23, v21, (char *)aBlock);
  os_unfair_lock_unlock(v24);
  if ((aBlock[0] & 1) == 0)
    objc_msgSend(v21, sel_cancel);

}

uint64_t NSURLSession.upload(for:from:delegate:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[17] = *a1;
  return swift_task_switch();
}

uint64_t NSURLSession.upload(for:from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 120);
  v8 = *(_OWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  v7 = *(_OWORD *)(v0 + 128);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v3 = swift_initStackObject();
  *(_QWORD *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(inited + 16) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 48) = v1;
  *(_QWORD *)(v4 + 56) = inited;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v5 = v0;
  v5[1] = NSURLSession.upload(for:from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.upload(for:from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v6 = *(_OWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 56) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v4 = v0;
  v4[1] = closure #1 in NSURLSession.upload(for:from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1E0C80A78](v7).n128_f64[0]);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __asm { BR              X10 }
}

void sub_181BE65B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;

  *(_QWORD *)(v7 - 136) = v6;
  *(_WORD *)(v7 - 128) = v0;
  *(_BYTE *)(v7 - 126) = BYTE2(v0);
  *(_BYTE *)(v7 - 125) = BYTE3(v0);
  *(_BYTE *)(v7 - 124) = BYTE4(v0);
  *(_BYTE *)(v7 - 123) = BYTE5(v0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v7 - 136, BYTE6(v0));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v1, v2);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v4, v2);
  *(_QWORD *)(v7 - 104) = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  *(_QWORD *)(v7 - 96) = v10;
  *(_QWORD *)(v7 - 136) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v7 - 128) = 1107296256;
  *(_QWORD *)(v7 - 120) = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  *(_QWORD *)(v7 - 112) = &block_descriptor_113;
  v11 = _Block_copy((const void *)(v7 - 136));
  swift_release();
  v12 = objc_msgSend(*(id *)(v7 - 176), sel__uploadTaskWithRequest_fromData_delegate_completionHandler_, v3, v8, *(_QWORD *)(v7 - 168), v11);
  _Block_release(v11);

  objc_msgSend(v12, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v12, sel_resume);
  v13 = *(os_unfair_lock_s **)(*(_QWORD *)(v7 - 160) + 16);
  v14 = v13 + 4;
  v15 = v13 + 8;
  os_unfair_lock_lock(v13 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v14, v12, (char *)(v7 - 136));
  os_unfair_lock_unlock(v15);
  if ((*(_BYTE *)(v7 - 136) & 1) == 0)
    objc_msgSend(v12, sel_cancel);

}

uint64_t NSURLSession.download(for:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[14] = a1;
  v4[15] = a3;
  v5 = *a2;
  v4[16] = v3;
  v4[17] = v5;
  return swift_task_switch();
}

uint64_t NSURLSession.download(for:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  v7 = *(_OWORD *)(v0 + 128);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v3 = swift_initStackObject();
  *(_QWORD *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(inited + 16) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = inited;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *v5 = v0;
  v5[1] = NSURLSession.download(for:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.download(for:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *v4 = v0;
  v4[1] = closure #1 in NSURLSession.download(for:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  _QWORD aBlock[7];

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1E0C80A78](v10).n128_f64[0]);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  v13 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_104;
  v16 = _Block_copy(aBlock);
  swift_release();
  v17 = objc_msgSend(a2, sel__downloadTaskWithRequest_delegate_completionHandler_, v13, a4, v16);
  _Block_release(v16);

  objc_msgSend(v17, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v17, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v17, sel_resume);
  v18 = *(os_unfair_lock_s **)(a5 + 16);
  v19 = v18 + 4;
  v20 = v18 + 8;
  os_unfair_lock_lock(v18 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v19, v17, (char *)aBlock);
  os_unfair_lock_unlock(v20);
  if ((aBlock[0] & 1) == 0)
    objc_msgSend(v17, sel_cancel);

}

void *thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v6)(void **, void *, void *);
  id v8;
  id v9;
  id v10;
  void *v12;
  __int128 v13;

  v6 = *(void (**)(void **, void *, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v8 = a2;
    URL.init(reference:)(v8, &v12);

  }
  else
  {
    v12 = 0;
    v13 = 0uLL;
    swift_retain();
  }
  v9 = a3;
  v10 = a4;
  v6(&v12, a3, a4);

  swift_release();
  return outlined consume of URL?(v12);
}

uint64_t NSURLSession.download(from:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 112) = a1;
  *(_QWORD *)(v4 + 120) = a3;
  v5 = *a2;
  *(_QWORD *)(v4 + 128) = v3;
  *(_QWORD *)(v4 + 136) = v5;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 1);
  return swift_task_switch();
}

uint64_t NSURLSession.download(from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;
  __int128 v8;

  v8 = *(_OWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  v7 = *(_OWORD *)(v0 + 128);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 160) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v3 = swift_initStackObject();
  *(_QWORD *)(v0 + 168) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(inited + 16) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 48) = v1;
  *(_QWORD *)(v4 + 56) = inited;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *v5 = v0;
  v5[1] = NSURLSession.download(from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.download(from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v6 = *(_OWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 56) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *v4 = v0;
  v4[1] = closure #1 in NSURLSession.upload(for:from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

void closure #1 in closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  _BYTE v24[16];
  _QWORD aBlock[6];

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](v12);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v13 + 16))(&v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v12, v15);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v13 + 32))(v17 + v16, &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_95;
  v18 = _Block_copy(aBlock);
  v19 = a3;
  swift_release();
  v20 = objc_msgSend(a2, sel__downloadTaskWithURL_delegate_completionHandler_, v19, a6, v18);
  _Block_release(v18);

  objc_msgSend(v20, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v20, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v20, sel_resume);
  v21 = *(os_unfair_lock_s **)(a7 + 16);
  v22 = v21 + 4;
  v23 = v21 + 8;
  os_unfair_lock_lock(v21 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v22, v20, (char *)aBlock);
  os_unfair_lock_unlock(v23);
  if ((aBlock[0] & 1) == 0)
    objc_msgSend(v20, sel_cancel);

}

uint64_t NSURLSession.download(resumeFrom:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return swift_task_switch();
}

uint64_t NSURLSession.download(resumeFrom:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v8 = *(_OWORD *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 152) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v4 = swift_initStackObject();
  *(_QWORD *)(v0 + 160) = v4;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(inited + 16) = v4;
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  *(_QWORD *)(v5 + 16) = v1;
  *(_OWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = inited;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *v6 = v0;
  v6[1] = NSURLSession.download(resumeFrom:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.download(resumeFrom:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 24);
  v6 = *(_OWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = v5;
  *(_OWORD *)(v2 + 32) = v6;
  *(_QWORD *)(v2 + 48) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *v3 = v0;
  v3[1] = closure #1 in NSURLSession.download(resumeFrom:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  MEMORY[0x1E0C80A78](v5);
  __asm { BR              X10 }
}

void sub_181BE77A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;

  *(_QWORD *)(v6 - 136) = v4;
  *(_WORD *)(v6 - 128) = v5;
  *(_BYTE *)(v6 - 126) = BYTE2(v5);
  *(_BYTE *)(v6 - 125) = BYTE3(v5);
  *(_BYTE *)(v6 - 124) = BYTE4(v5);
  *(_BYTE *)(v6 - 123) = BYTE5(v5);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v6 - 136, BYTE6(v5));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v3, v1);
  v8 = (*(unsigned __int8 *)(v0 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 32))(v9 + v8, v2, v1);
  *(_QWORD *)(v6 - 104) = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  *(_QWORD *)(v6 - 96) = v9;
  *(_QWORD *)(v6 - 136) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v6 - 128) = 1107296256;
  *(_QWORD *)(v6 - 120) = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  *(_QWORD *)(v6 - 112) = &block_descriptor_86;
  v10 = _Block_copy((const void *)(v6 - 136));
  swift_release();
  v11 = objc_msgSend(*(id *)(v6 - 168), sel__downloadTaskWithResumeData_delegate_completionHandler_, v7, *(_QWORD *)(v6 - 160), v10);
  _Block_release(v10);

  objc_msgSend(v11, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v11, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v11, sel_resume);
  v12 = *(os_unfair_lock_s **)(*(_QWORD *)(v6 - 152) + 16);
  v13 = v12 + 4;
  v14 = v12 + 8;
  os_unfair_lock_lock(v12 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v13, v11, (char *)(v6 - 136));
  os_unfair_lock_unlock(v14);
  if ((*(_BYTE *)(v6 - 136) & 1) == 0)
    objc_msgSend(v11, sel_cancel);

}

uint64_t closure #1 in closure #1 in closure #1 in NSURLSession.download(for:delegate:)(uint64_t *a1, void *a2, id a3)
{
  id v3;
  uint64_t result;
  id v6;

  if (a3)
  {
    v3 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  result = *a1;
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  outlined copy of URL?(result);
  v6 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t NSURLSession.AsyncBytes._Storage.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_cancel);

  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance();
}

id NSURLSession.AsyncBytes.task.getter()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 16);
}

uint64_t NSURLSession.AsyncBytes.Iterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NSURLSession.AsyncBytes.Iterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*NSURLSession.AsyncBytes.Iterator.buffer.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v3[9] = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

void closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  char *v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 24);
  v3 = *(os_unfair_lock_s **)(v2
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State(v2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state, v1);
  v4 = (char *)sub_181BE7E48 + 4 * byte_1820E9B80[swift_getEnumCaseMultiPayload()];
  __asm { BR              X11 }
}

uint64_t sub_181BE7E48()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_181BE7EAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (uint64_t *)v0[10];
  v3 = *v2;
  v4 = v2[1];
  v0[11] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v0[12] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v4;
  v6 = (_QWORD *)swift_task_alloc();
  v0[13] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  *v6 = v0;
  v6[1] = closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_181BE7F50()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v3 = **(void ***)(v1 + 80);
  if (v3)
  {
    v4 = v3;
    outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v2);
    *v2 = 0;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    os_unfair_lock_unlock(v0);
    swift_release();
    swift_willThrow();

  }
  else
  {
    swift_retain();
    os_unfair_lock_unlock(v0);
    swift_release();
    v5 = *(_QWORD **)(v1 + 48);
    *(_QWORD *)(*(_QWORD *)(v1 + 64) + 16) = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8);
    *v5 = 0;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;

  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 60 != 15)
  {
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
    *(_QWORD *)(v0 + 24) = v1;
    __asm { BR              X10 }
  }
  v2 = *(_QWORD **)(v0 + 48);
  *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 8);
  *v2 = 0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NSURLSession.AsyncBytes.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v5;
    *v5 = v0;
    v5[1] = NSURLSession.AsyncBytes.Iterator.next();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
}

uint64_t NSURLSession.AsyncBytes.Iterator.next()(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 0x1FF);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char v3;
  _BYTE *v4;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(char **)(v1 + 8);
  if (v2 == *(char **)(v1 + 16))
  {
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v6;
    *v6 = v0;
    v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    v4 = *(_BYTE **)(v0 + 16);
    *v4 = v3;
    v4[1] = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    v6 = *(_BYTE **)(v4 + 16);
    *v6 = a1;
    v6[1] = HIBYTE(a1) & 1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu);
  v7 = (_QWORD *)swift_task_alloc();
  v4[4] = v7;
  *v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

uint64_t _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    **(_QWORD **)(v4 + 24) = v1;
  }
  else
  {
    v6 = *(_BYTE **)(v4 + 16);
    *v6 = a1;
    v6[1] = HIBYTE(a1) & 1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t NSURLSession.AsyncBytes.makeAsyncIterator()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  swift_retain();
  v3 = swift_dynamicCastClassUnconditional();
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = &async function pointer to partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(_QWORD *)(v3 + 24) = v1;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v4);
  swift_release();
  return v2;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSURLSession.AsyncBytes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *v1;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  swift_retain();
  v5 = swift_dynamicCastClassUnconditional();
  v6 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = &closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(_QWORD *)(v5 + 24) = v3;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v6);
  result = swift_release();
  *a1 = v4;
  a1[1] = v4 + 33;
  a1[2] = v4 + 33;
  return result;
}

uint64_t NSURLSession.bytes(for:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[12] = a1;
  v4[13] = a3;
  v5 = *a2;
  v4[14] = v3;
  v4[15] = v5;
  return swift_task_switch();
}

uint64_t NSURLSession.bytes(for:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  v7 = *(_OWORD *)(v0 + 112);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 128) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v3 = swift_initStackObject();
  *(_QWORD *)(v0 + 136) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(inited + 16) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = inited;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
  *v5 = v0;
  v5[1] = NSURLSession.bytes(for:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(v0 + 96);
  swift_release();
  v2 = *(_QWORD *)(v0 + 88);
  *v1 = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.bytes(for:delegate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[11];
  v2 = v0[12];
  v3 = (void *)v0[9];
  objc_msgSend(*(id *)(v0[10] + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  v4 = (void *)v0[6];
  v5 = objc_msgSend(v3, sel__dataTaskWithRequest_delegate_, v4, v1);
  v0[13] = v5;

  v6 = swift_task_alloc();
  v0[14] = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = (_QWORD *)swift_task_alloc();
  v0[15] = v7;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLResponse);
  *v7 = v0;
  v7[1] = closure #1 in NSURLSession.bytes(for:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id closure #1 in NSURLSession.bytes(for:delegate:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  uint64_t *v5;

  v1 = *(void **)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 56);
  type metadata accessor for NSURLSession.AsyncBytes._Storage();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = xmmword_1820E9CE0;
  *(_QWORD *)(v3 + 16) = v1;
  result = objc_msgSend(v1, sel__internalDelegate);
  if (result)
  {
    v5 = *(uint64_t **)(v0 + 64);

    type metadata accessor for URLSessionAsyncBytesDelegate(0);
    *(_QWORD *)(v3 + 24) = swift_dynamicCastClassUnconditional();
    *v5 = v3;
    v5[1] = v2;
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSURLSession.bytes(from:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 96) = a1;
  *(_QWORD *)(v4 + 104) = a3;
  v5 = *a2;
  *(_QWORD *)(v4 + 112) = v3;
  *(_QWORD *)(v4 + 120) = v5;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 1);
  return swift_task_switch();
}

uint64_t NSURLSession.bytes(from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;
  __int128 v8;

  v8 = *(_OWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  v7 = *(_OWORD *)(v0 + 112);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v3 = swift_initStackObject();
  *(_QWORD *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(inited + 16) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 48) = v1;
  *(_QWORD *)(v4 + 56) = inited;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
  *v5 = v0;
  v5[1] = NSURLSession.bytes(from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(v0 + 96);
  swift_release();
  v2 = *(_QWORD *)(v0 + 88);
  *v1 = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.bytes(from:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.bytes(from:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = objc_msgSend(*(id *)(v0 + 32), sel__dataTaskWithURL_delegate_, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  *(_QWORD *)(v0 + 64) = v2;
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLResponse);
  *v4 = v0;
  v4[1] = closure #1 in NSURLSession.bytes(from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id closure #1 in NSURLSession.bytes(from:delegate:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  uint64_t *v5;

  v1 = *(void **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 16);
  type metadata accessor for NSURLSession.AsyncBytes._Storage();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = xmmword_1820E9CE0;
  *(_QWORD *)(v3 + 16) = v1;
  result = objc_msgSend(v1, sel__internalDelegate);
  if (result)
  {
    v5 = *(uint64_t **)(v0 + 24);

    type metadata accessor for URLSessionAsyncBytesDelegate(0);
    *(_QWORD *)(v3 + 24) = swift_dynamicCastClassUnconditional();
    *v5 = v3;
    v5[1] = v2;
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t, __n128);
  objc_class *v12;
  char *v13;
  uint64_t v14;
  id v15;
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  char v20;
  objc_super v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v11(v10, a1, v6, v8);
  v12 = (objc_class *)type metadata accessor for URLSessionAsyncBytesDelegate(0);
  v13 = (char *)objc_allocWithZone(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock] = v14;
  ((void (*)(char *, char *, uint64_t))v11)(&v13[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state], v10, v6);
  type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  swift_storeEnumTagMultiPayload();
  v21.receiver = v13;
  v21.super_class = v12;
  v15 = objc_msgSendSuper2(&v21, sel_init);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  objc_msgSend(a2, sel_set_internalDelegate_, v15);

  objc_msgSend(a2, sel_resume);
  v16 = *(os_unfair_lock_s **)(a3 + 16);
  v17 = v16 + 4;
  v18 = v16 + 8;
  os_unfair_lock_lock(v16 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v17, a2, &v20);
  os_unfair_lock_unlock(v18);
  if ((v20 & 1) == 0)
    objc_msgSend(a2, sel_cancel);
}

void closure #2 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  *(_BYTE *)(v1 + 16) = 1;
  v2 = *(id *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  objc_msgSend(v2, sel_cancel);

}

uint64_t outlined copy of NSURLSessionWebSocketTask.Message(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return outlined copy of Data._Representation(a1, a2);
}

uint64_t outlined consume of NSURLSessionWebSocketTask.Message(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return outlined consume of Data._Representation(a1, a2);
}

void partial apply for closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)(void *a1, void *a2)
{
  uint64_t v2;

  closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)(a1, a2, *(void (**)(id *))(v2 + 16));
}

uint64_t sub_181BE91DC()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in NSURLSession.data(for:delegate:)()
{
  uint64_t v0;

  closure #2 in NSURLSession.data(for:delegate:)(v0);
}

uint64_t partial apply for closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;

  v9 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;

  v8 = *(_OWORD *)(v1 + 48);
  v9 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v9;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;

  v9 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v6 + 40) = v4;
  *(_QWORD *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;

  v9 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;

  v7 = *(_OWORD *)(v1 + 32);
  v8 = *(_OWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  v4[3] = a1;
  v4[4] = v1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v6 + 88) = v4;
  *(_QWORD *)(v6 + 96) = v5;
  *(_OWORD *)(v6 + 72) = v7;
  *(_QWORD *)(v6 + 64) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.bytes(from:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v6 + 48) = v4;
  *(_QWORD *)(v6 + 56) = v5;
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 24) = a1;
  return swift_task_switch();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in NSURLSession.AsyncBytes.Iterator()
{
  return MEMORY[0x1E0DEDB38];
}

unint64_t lazy protocol witness table accessor for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator;
  if (!lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSURLSession.AsyncBytes.Iterator, &type metadata for NSURLSession.AsyncBytes.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator);
  }
  return result;
}

uint64_t destroy for NSURLSessionWebSocketTask.Message(uint64_t a1)
{
  return outlined consume of NSURLSessionWebSocketTask.Message(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of NSURLSessionWebSocketTask.Message(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of NSURLSessionWebSocketTask.Message(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of NSURLSessionWebSocketTask.Message(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of NSURLSessionWebSocketTask.Message(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NSURLSessionWebSocketTask.Message()
{
  return &type metadata for NSURLSessionWebSocketTask.Message;
}

uint64_t ObjC metadata update function for URLSessionAsyncBytesDelegate()
{
  return type metadata accessor for URLSessionAsyncBytesDelegate(0);
}

uint64_t type metadata accessor for URLSessionAsyncBytesDelegate(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for URLSessionAsyncBytesDelegate);
}

uint64_t type metadata completion function for URLSessionAsyncBytesDelegate()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URLSessionAsyncBytesDelegate.State(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for URLSessionAsyncBytesDelegate.State(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for URLSessionAsyncBytesDelegate.State);
}

ValueMetadata *type metadata accessor for NSURLSession.AsyncBytes()
{
  return &type metadata for NSURLSession.AsyncBytes;
}

uint64_t type metadata accessor for NSURLSession.AsyncBytes._Storage()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSession.AsyncBytes.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NSURLSession.AsyncBytes.Iterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for NSURLSession.AsyncBytes.Iterator(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSURLSession.AsyncBytes.Iterator(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSURLSession.AsyncBytes.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSURLSession.AsyncBytes.Iterator()
{
  return &type metadata for NSURLSession.AsyncBytes.Iterator;
}

uint64_t initializeBufferWithCopyOfBuffer for URLSessionAsyncBytesDelegate.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_181BE9AB8 + 4 * byte_1820E9B84[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void destroy for URLSessionAsyncBytesDelegate.State(id *a1)
{
  uint64_t *v2;
  uint64_t v3;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v2 = &demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>;
      goto LABEL_4;
    case 1u:
      v2 = &demangling cache variable for type metadata for CheckedContinuation<Data?, Error>;
LABEL_4:
      v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:

      break;
    default:
      return;
  }
}

void initializeWithCopy for URLSessionAsyncBytesDelegate.State()
{
  char *v0;

  v0 = (char *)sub_181BE9C6C + 4 * byte_1820E9B8C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181BE9C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for URLSessionAsyncBytesDelegate.State(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of URLSessionAsyncBytesDelegate.State(result);
    v2 = (char *)&loc_181BE9D78 + 4 * byte_1820E9B90[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t outlined destroy of URLSessionAsyncBytesDelegate.State(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for URLSessionAsyncBytesDelegate.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for URLSessionAsyncBytesDelegate.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for URLSessionAsyncBytesDelegate.State()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CheckedContinuation<NSURLResponse, Error>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CheckedContinuation<Data?, Error>();
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for CheckedContinuation<NSURLResponse, Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>)
  {
    type metadata accessor for NSMorphologyPronoun(255, &lazy cache variable for type metadata for NSURLResponse);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    v0 = type metadata accessor for CheckedContinuation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  }
}

void type metadata accessor for CheckedContinuation<Data?, Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<Data?, Error>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    v0 = type metadata accessor for CheckedContinuation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<Data?, Error>);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for NSURLSession.CancelState.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSURLSession.CancelState.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void specialized URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:)(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  char *v11;
  _QWORD v12[4];

  v12[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  v12[2] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v12 - v8;
  *(_QWORD *)(swift_allocObject() + 16) = a3;
  v10 = *(os_unfair_lock_s **)(a2
                             + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  _Block_copy(a3);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State(a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state, (uint64_t)v9);
  v11 = (char *)sub_181BEA440 + 4 * byte_1820E9B94[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181BEA440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v8 = *(_QWORD *)(v7 - 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v3, v1, v2);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURLSessionResponseDisposition) -> ();
  *(_QWORD *)(v9 + 24) = v0;
  *v5 = partial apply for closure #1 in URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:);
  v5[1] = (uint64_t (*)())v9;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  outlined assign with take of URLSessionAsyncBytesDelegate.State((uint64_t)v5, v6);
  swift_retain();
  os_unfair_lock_unlock(v4);
  swift_release();
  v10 = *(void **)(v7 - 104);
  *(_QWORD *)(v7 - 88) = v10;
  v11 = v10;
  CheckedContinuation.resume(returning:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v2);
  return swift_release();
}

void specialized URLSessionAsyncBytesDelegate.urlSession(_:dataTask:_didReceive:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  char *v18;
  _QWORD v19[14];

  v19[4] = a2;
  v19[5] = a3;
  v19[8] = a1;
  v7 = type metadata accessor for Logger();
  v19[2] = *(_QWORD *)(v7 - 8);
  v19[3] = v7;
  MEMORY[0x1E0C80A78](v7);
  v19[1] = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  v19[6] = *(_QWORD *)(v9 - 8);
  v19[7] = v9;
  MEMORY[0x1E0C80A78](v9);
  v19[9] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v19 - v14;
  v16 = swift_allocObject();
  v19[10] = a5;
  v19[11] = v16;
  *(_QWORD *)(v16 + 16) = a5;
  v17 = *(os_unfair_lock_s **)(a4
                             + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  _Block_copy(a5);
  swift_retain();
  os_unfair_lock_lock(v17 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State(a4 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state, (uint64_t)v15);
  v18 = (char *)&loc_181BEA714 + *((int *)qword_181BEACB0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_181BEA724()
{
  uint64_t v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v3 - 144);
  v4 = *(_QWORD *)(v3 - 136);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 32))(*(_QWORD *)(v3 - 120), v0, v4);
  outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v1);
  *v1 = 0;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  os_unfair_lock_unlock(v2);
  swift_release();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain"));
  v6 = objc_allocWithZone((Class)NSError);
  v7 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v7, -1, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v9 = objc_msgSend(v8, sel_domain);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain")) && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x181BEACACLL);
    }
  }
  *(_QWORD *)(v3 - 96) = v8;
  v15 = *(_QWORD *)(v3 - 120);
  CheckedContinuation.resume(throwing:)();
  (*(void (**)(void))(*(_QWORD *)(v3 - 112) + 16))();
  objc_msgSend(*(id *)(v3 - 128), sel_cancel);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v4);
  return swift_release();
}

void specialized URLSessionAsyncBytesDelegate.urlSession(_:task:didCompleteWithError:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  char *v8;
  _QWORD v9[4];

  v9[1] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  v9[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(os_unfair_lock_s **)(v1
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State(v1 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state, (uint64_t)v6);
  v8 = (char *)&loc_181BEADF0 + *((int *)qword_181BEB0D8 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_181BEAE00()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;

  v6 = *(_QWORD *)(v5 - 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v4, v1);
  outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v0);
  *v0 = 0;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  os_unfair_lock_unlock(v2);
  swift_release();
  v7 = *(void **)(v5 - 104);
  if (v7)
  {
    v8 = *(id *)(v5 - 104);
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain"));
    v9 = objc_allocWithZone((Class)NSError);
    v10 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, -1, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v11 = objc_msgSend(v8, sel_domain);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain")) && v14 == v15)
    {
      swift_bridgeObjectRelease_n();
      v6 = *(_QWORD *)(v5 - 112);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v5 - 112);
      if ((v16 & 1) == 0)
      {
        __break(1u);
        JUMPOUT(0x181BEB0D8);
      }
    }
  }
  *(_QWORD *)(v5 - 96) = v8;
  v17 = v7;
  CheckedContinuation.resume(throwing:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v3, v1);
}

uint64_t outlined init with copy of URLSessionAsyncBytesDelegate.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_181BEB12C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t outlined assign with take of URLSessionAsyncBytesDelegate.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURLSessionResponseDisposition) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  v4[3] = a1;
  v4[4] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void partial apply for closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(a1, v5, v4);
}

id partial apply for closure #2 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

uint64_t partial apply for closure #1 in URLSessionAsyncBytesDelegate.data()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in URLSessionAsyncBytesDelegate.data()(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_181BEB320()
{
  return objectdestroy_82Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in NSURLSession.download(from:delegate:));
}

uint64_t sub_181BEB33C()
{
  return objectdestroy_82Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t *a1, void *a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  return closure #1 in closure #1 in closure #1 in NSURLSession.download(for:delegate:)(a1, a2, a3);
}

void partial apply for closure #1 in closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NSURLSession.download(for:delegate:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_181BEB3B0()
{
  return objectdestroy_82Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:));
}

uint64_t sub_181BEB3C8()
{
  return objectdestroy_82Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

void partial apply for closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_181BEB3E8()
{
  return objectdestroy_82Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in NSURLSession.data(from:delegate:));
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_181BEB414()
{
  return objectdestroy_82Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

void partial apply for closure #1 in closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NSURLSession.data(for:delegate:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_181BEB42C()
{
  return objectdestroy_82Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

uint64_t objectdestroy_82Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

void AttributedString.AttributeRunBoundaries.hash(into:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int AttributedString.AttributeRunBoundaries.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA2A0]);
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.AttributeRunBoundaries()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA2A0]);
}

unint64_t AttributedString.AttributeRunBoundaries._constrainedScalar.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[1];
  if (v1)
  {
    v2 = *v0;
    swift_bridgeObjectRetain();
    v3 = specialized Collection.first.getter(v2, v1);
    swift_bridgeObjectRelease();
    v4 = HIDWORD(v3) & 1;
    v5 = v3;
  }
  else
  {
    v5 = 0;
    LOBYTE(v4) = 1;
  }
  return v5 | ((unint64_t)v4 << 32);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeInvalidationCondition._Storage(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[72];

  v5 = *v3;
  v6 = v3[1];
  Hasher.init(_seed:)();
  if (v6)
  {
    Hasher._combine(_:)(1uLL);
    a3(v8, v5, v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.AttributeInvalidationCondition._Storage()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeInvalidationCondition._Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[72];

  v6 = *v4;
  v7 = v4[1];
  Hasher.init(_seed:)();
  if (v7)
  {
    Hasher._combine(_:)(1uLL);
    a4(v9, v6, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void static AttributedString.AttributeInvalidationCondition.textChanged.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t static AttributedString.AttributeInvalidationCondition.attributeChanged<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t static AttributedString.AttributeInvalidationCondition.attributeChanged<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(a1 + 24))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

void AttributedString.AttributeInvalidationCondition.hash(into:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static AttributedString.AttributeInvalidationCondition.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

Swift::Int AttributedString.AttributeInvalidationCondition.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeInvalidationCondition()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeInvalidationCondition()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.AttributeInvalidationCondition._Storage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t AttributedStringKey.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void AttributeDynamicLookup.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  AttributeDynamicLookup.subscript.getter();
}

{
  AttributeDynamicLookup.subscript.getter();
}

uint64_t key path getter for ScopedAttributeContainer.subscript<A>(dynamicMember:) : <A><A1>ScopedAttributeContainer<A>AA1@<X0>(_QWORD **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ScopedAttributeContainer.subscript.getter(v5, v4, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for ScopedAttributeContainer.subscript<A>(dynamicMember:) : <A><A1>ScopedAttributeContainer<A>AA1(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - v9;
  v11 = *a3;
  (*(void (**)(char *, uint64_t, __n128))(v12 + 16))((char *)&v15 - v9, a1, v8);
  swift_retain();
  return ScopedAttributeContainer.subscript.setter(v10, v11, v13, v6);
}

void (*ScopedAttributeContainer.subscript.modify(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  v10 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v9[5] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v9[6] = malloc(v13);
  v14 = malloc(v13);
  v9[7] = v14;
  AttributedString._AttributeStorage.subscript.getter(*v4, v10, a4, (uint64_t)v14);
  return ScopedAttributeContainer.subscript.modify;
}

void ScopedAttributeContainer.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = *(char **)(*(_QWORD *)a1 + 48);
  v4 = *(char **)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v5 = v2[4];
    v6 = v2[5];
    v7 = v2[2];
    v8 = (_QWORD *)*v2;
    (*(void (**)(_QWORD, char *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 48), v4, v5);
    swift_retain();
    ScopedAttributeContainer.subscript.setter(v3, v8, v9, v7);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    v10 = v2[2];
    v11 = (_QWORD *)*v2;
    swift_retain();
    ScopedAttributeContainer.subscript.setter(v4, v11, v12, v10);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      if (*a1 != *a2 || v3 != v4)
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      return 1;
    }
    return 0;
  }
  if (v4)
    return 0;
  swift_bridgeObjectRelease_n();
  return 1;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.AttributeRunBoundaries, &type metadata for AttributedString.AttributeRunBoundaries);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.AttributeInvalidationCondition, &type metadata for AttributedString.AttributeInvalidationCondition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition);
  }
  return result;
}

uint64_t sub_181BEBF7C()
{
  return 32;
}

__n128 sub_181BEBF88(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeRunBoundaries()
{
  return &type metadata for AttributedString.AttributeRunBoundaries;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeInvalidationCondition()
{
  return &type metadata for AttributedString.AttributeInvalidationCondition;
}

uint64_t dispatch thunk of static AttributedStringKey.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static AttributedStringKey.runBoundaries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static AttributedStringKey.inheritedByAddedText.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static AttributedStringKey.invalidationConditions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

_QWORD *initializeWithCopy for ScopedAttributeContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ScopedAttributeContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScopedAttributeContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.AttributeRunBoundaries(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AttributedString.AttributeRunBoundaries(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void *type metadata accessor for AttributedString.AttributeInvalidationCondition._Storage()
{
  return &unk_1E0F1D5F0;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.AttributeInvalidationCondition._Storage, &unk_1E0F1D5F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage);
  }
  return result;
}

void specialized Hasher.combine<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;

  if (*(_BYTE *)a1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v4, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v5 = *(unsigned __int8 *)(a1 + 17);
  if ((_DWORD)v5 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  v6 = *(unsigned __int8 *)(a1 + 18);
  if ((_DWORD)v6 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  if (*(_BYTE *)(a1 + 19) != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a1 + 33) & 1) == 0)
      goto LABEL_15;
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(a1 + 33) & 1) != 0)
    goto LABEL_23;
LABEL_15:
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  Hasher._combine(_:)(1u);
  if ((v8 & 1) == 0)
  {
    v9 = 10;
    if (v7 < 10)
      v9 = v7;
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    MEMORY[0x186DA4928](103, 0xE100000000000000, v10);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_25:
  if (*(_BYTE *)(a1 + 34) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v11 = *(unsigned __int8 *)(a1 + 35);
  if ((_DWORD)v11 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  v12 = *(unsigned __int8 *)(a1 + 36);
  if (v12 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(v1, v12);
  }
  v13 = *(unsigned __int8 *)(a1 + 37);
  if (v13 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v13);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(a1 + 38) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(a1 + 39) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v14 = *(unsigned __int8 *)(a1 + 48);
  if (v14 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 40);
    v16 = v14 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(v1, v15, v16);
  }
  v17 = *(unsigned __int8 *)(a1 + 49);
  if (v17 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v17);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t Date.IntervalFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.locale.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.IntervalFormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.timeZone.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.timeZone.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.IntervalFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

int8x8_t Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X8>, int16x8_t a7@<Q0>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint8x8_t v30;
  int8x8_t result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36[8];
  uint64_t v37;
  __int32 v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;

  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  v10 = *a2;
  v11 = *((_BYTE *)a2 + 8);
  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v15 = 3;
  v51 = 3;
  v52 = 0;
  v53 = 50660863;
  v54 = 0;
  v55 = 256;
  v56 = 235472387;
  v57 = 514;
  v58 = 0;
  v59 = 3327;
  if ((v9 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = HIBYTE(v55);
    a7.i64[0] = 0x30005000500FFLL;
    v21 = 1;
    v22 = 12;
    v23 = -1;
    v24 = 2;
    v25 = 14;
    v26 = 6;
    v27 = 9;
    v28 = 3;
    v29 = 2;
    if ((v11 & 1) == 0)
      goto LABEL_3;
LABEL_8:
    v21 = v20 & 1;
    goto LABEL_12;
  }
  v35 = v8;
  v33 = v12;
  v34 = v13;
  v32 = v14;
  Date.FormatStyle.DateFieldCollection.collection(date:)(&v35, (uint64_t)v36);
  v14 = v32;
  v12 = v33;
  v13 = v34;
  v28 = v36[0];
  v18 = v37;
  v30.i32[0] = v38;
  a7 = (int16x8_t)vmovl_u8(v30);
  v17 = v39;
  v16 = v40;
  v20 = v41;
  v15 = v42;
  v26 = v43;
  v27 = v44;
  v25 = v45;
  v24 = v46;
  v29 = v47;
  v19 = v48;
  v23 = v49;
  v21 = v41;
  v22 = v50;
  if ((v11 & 1) != 0)
    goto LABEL_8;
LABEL_3:
  if (v10)
  {
    if (v10 == 3)
    {
      v22 = 0;
    }
    else if (v10 != 2)
    {
      goto LABEL_11;
    }
    v29 = 1;
LABEL_11:
    v25 = 0;
    v24 = 1;
  }
LABEL_12:
  *(_OWORD *)a6 = v12;
  *(_OWORD *)(a6 + 16) = v14;
  *(_OWORD *)(a6 + 32) = v13;
  *(_BYTE *)(a6 + 48) = v28;
  *(_QWORD *)(a6 + 56) = v18;
  result = vmovn_s16(a7);
  *(_DWORD *)(a6 + 64) = result.i32[0];
  *(_QWORD *)(a6 + 72) = v17;
  *(_BYTE *)(a6 + 80) = v16;
  *(_BYTE *)(a6 + 81) = v21;
  *(_BYTE *)(a6 + 82) = v15;
  *(_BYTE *)(a6 + 83) = v26;
  *(_BYTE *)(a6 + 84) = v27;
  *(_BYTE *)(a6 + 85) = v25;
  *(_BYTE *)(a6 + 86) = v24;
  *(_BYTE *)(a6 + 87) = v29;
  *(_QWORD *)(a6 + 88) = v19;
  *(_BYTE *)(a6 + 96) = v23;
  *(_BYTE *)(a6 + 97) = v22;
  return result;
}

uint64_t Date.IntervalFormatStyle.format(_:)(double *a1)
{
  uint64_t v1;
  double v2;
  double v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v29;
  _OWORD v30[3];
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  char v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v2 = a1[1];
  v4 = *(_BYTE *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_BYTE *)(v1 + 80);
  v8 = *(_BYTE *)(v1 + 81);
  v9 = *(_WORD *)(v1 + 86);
  v10 = *(_QWORD *)(v1 + 88);
  v11 = *(_WORD *)(v1 + 96);
  v12 = *(_OWORD *)(v1 + 16);
  v30[0] = *(_OWORD *)v1;
  v30[1] = v12;
  v30[2] = *(_OWORD *)(v1 + 32);
  v31 = v4;
  v32 = v5;
  v33 = *(_DWORD *)(v1 + 64);
  v34 = v6;
  v35 = v7;
  v36 = v8;
  v37 = *(_DWORD *)(v1 + 82);
  v38 = v9;
  v39 = v10;
  v40 = v11;
  if (!specialized static ICUDateIntervalFormatter.formatter(for:)((uint64_t)v30)
    || (v13 = swift_retain_n(),
        MEMORY[0x1E0C80A78](v13),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v29, (uint64_t *)v30),
        v15 = *((_QWORD *)&v30[0] + 1),
        v14 = *(_QWORD *)&v30[0],
        swift_release_n(),
        !v15))
  {
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
    v17 = objc_msgSend(v16, sel_description);

    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    *(_QWORD *)&v30[0] = v18;
    *((_QWORD *)&v30[0] + 1) = v20;
    v21._countAndFlagsBits = 2108704;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
    v23 = objc_msgSend(v22, sel_description);

    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    v27._countAndFlagsBits = (uint64_t)v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    return *(_QWORD *)&v30[0];
  }
  return v14;
}

uint64_t Date.IntervalFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_BYTE *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 72);
  v6 = *(_BYTE *)(v2 + 80);
  v7 = *(_BYTE *)(v2 + 81);
  v8 = *(_WORD *)(v2 + 86);
  v9 = *(_QWORD *)(v2 + 88);
  v10 = *(_WORD *)(v2 + 96);
  v11 = *(_OWORD *)(v2 + 16);
  v12 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 56) = v4;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(_QWORD *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 81) = v7;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v8;
  *(_QWORD *)(a2 + 88) = v9;
  *(_WORD *)(a2 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

void Date.IntervalFormatStyle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _BYTE v56[144];
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _QWORD v75[18];
  _BYTE v76[144];
  _BYTE v77[144];
  _OWORD v78[3];
  __int16 v79;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_OWORD *)(v1 + 64);
  v78[0] = *(_OWORD *)(v1 + 48);
  v78[1] = v6;
  v78[2] = *(_OWORD *)(v1 + 80);
  v79 = *(_WORD *)(v1 + 96);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v3) & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v10(v75, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76);
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v77) == 1)
  {
    v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v57);
  Hasher._combine(_:)(1u);
  if (v57[0] == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v57[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v58;
  v53 = v4;
  if (!v58)
  {
    Hasher._combine(_:)(0);
    v16 = v57;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v56);
    v16 = v56;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    if (!v59)
      goto LABEL_14;
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v60)
      goto LABEL_15;
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 = v61;
    if (!v61)
      goto LABEL_16;
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v60)
    goto LABEL_21;
LABEL_15:
  Hasher._combine(_:)(0);
  v15 = v61;
  if (!v61)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v15);
  swift_bridgeObjectRelease();
LABEL_23:
  v17 = v62;
  v54 = v5;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v19 = v63;
  v18 = v64;
  v20 = v65;
  v21 = v66;
  v22 = v67;
  v50 = v65;
  v51 = v67;
  if (v63)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v18;
    v24 = v20;
    v25 = v21;
    v26 = v21;
    v27 = v22;
    v28 = v19;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v29 = v22;
    v30 = v18;
    v31 = v20;
    v25 = v21;
    v32 = v21;
  }
  v52 = v19;
  v55 = v18;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v18;
    _CFObject.hash(into:)();

    v34 = v50;
    if (v50)
      goto LABEL_31;
  }
  else
  {
    Hasher._combine(_:)(0);
    v34 = v50;
    if (v50)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v35 = v34;
      _CFObject.hash(into:)();

      if (v25)
        goto LABEL_32;
LABEL_36:
      Hasher._combine(_:)(0);
      v37 = v51;
      if (v51)
        goto LABEL_33;
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v25)
    goto LABEL_36;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v36 = v25;
  _CFObject.hash(into:)();

  v37 = v51;
  if (v51)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v37;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v38 = 0;
LABEL_38:

  v39 = v68;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v4 = v53;
  v5 = v54;
  v40 = v69;
  if (!v69)
  {
    Hasher._combine(_:)(0);
    if (v70)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (!v70)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v42 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v73 == 2)
  {
    v43 = 0;
  }
  else
  {
    v43 = v73 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  if (v74 == 2)
  {
    v44 = 0;
  }
  else
  {
    v45 = v74 & 1;
    Hasher._combine(_:)(1u);
    v44 = v45;
  }
  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  v46 = swift_getObjectType();
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 112);
  swift_unknownObjectRetain();
  v47(a1, v46, v4);
  swift_unknownObjectRelease();
  v48 = swift_getObjectType();
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v49(a1, v48, v5);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v78);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.IntervalFormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BED578 + 4 * byte_1820E9F10[*v0]))(0x656C61636F6CLL, 0xE600000000000000);
}

uint64_t sub_181BED578()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181BED590()
{
  return 0x7261646E656C6163;
}

uint64_t sub_181BED5A8()
{
  return 0x736C6F626D7973;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.IntervalFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.IntervalFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.IntervalFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.IntervalFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.IntervalFormatStyle.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint8x8_t v3;
  uint8x8_t v4;
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unsigned __int32 v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned __int32 v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  char v40;

  v5 = v1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.IntervalFormatStyle.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v5[1];
  v23 = v5[2];
  v39 = *((unsigned __int8 *)v5 + 48);
  v26 = *((_QWORD *)v5 + 7);
  v4.i32[0] = *((_DWORD *)v5 + 16);
  v25 = *((_QWORD *)v5 + 9);
  LODWORD(v9) = *((unsigned __int8 *)v5 + 81);
  v18 = *((unsigned __int8 *)v5 + 80);
  v19 = v9;
  v3.i32[0] = *(_DWORD *)((char *)v5 + 82);
  v24 = *((unsigned __int8 *)v5 + 86);
  v20 = *((unsigned __int8 *)v5 + 87);
  v21 = *((_QWORD *)v5 + 11);
  v22 = *((unsigned __int8 *)v5 + 96);
  v11 = *((unsigned __int8 *)v5 + 97);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v28 = *v5;
  v40 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v13 = v25;
    v12 = v26;
    v14 = v39;
    v17 = v11;
    v15 = v24;
    v28 = v27;
    v40 = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v28 = v23;
    v40 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v28) = v14;
    *((_QWORD *)&v28 + 1) = v12;
    v29 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
    v30 = v13;
    v31 = v18;
    v32 = v19;
    v33 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    v34 = v15;
    v35 = v20;
    v36 = v21;
    v37 = v22;
    v38 = v17;
    v40 = 3;
    lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Date.IntervalFormatStyle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[144];
  _BYTE v50[8];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  _QWORD v68[18];
  _BYTE v69[144];
  _BYTE v70[144];
  _BYTE v71[72];
  _OWORD v72[3];
  __int16 v73;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_OWORD *)(v0 + 64);
  v72[0] = *(_OWORD *)(v0 + 48);
  v72[1] = v4;
  v72[2] = *(_OWORD *)(v0 + 80);
  v73 = *(_WORD *)(v0 + 96);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v1) & 1) != 0)
  {
    v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v8(v68, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v50);
  Hasher._combine(_:)(1u);
  if (v50[0] == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = v50[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  v10 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
    v14 = v50;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v49);
    v14 = v49;
LABEL_19:
    outlined retain of LocalePreferences(v14);
    if (!v52)
      goto LABEL_14;
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v53)
      goto LABEL_15;
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 = v54;
    if (!v54)
      goto LABEL_16;
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v53)
    goto LABEL_21;
LABEL_15:
  Hasher._combine(_:)(0);
  v13 = v54;
  if (!v54)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v13);
  swift_bridgeObjectRelease();
LABEL_23:
  v15 = v55;
  v47 = v2;
  v48 = v3;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v17 = v56;
  v16 = v57;
  v19 = v58;
  v18 = v59;
  v20 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v26 = v20;
    v27 = v16;
    v28 = v19;
    v29 = v18;
  }
  v46 = v17;
  if (v16)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v16;
    _CFObject.hash(into:)();

    if (v19)
      goto LABEL_31;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v19)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v31 = v19;
      _CFObject.hash(into:)();

      if (v18)
        goto LABEL_32;
LABEL_36:
      Hasher._combine(_:)(0);
      if (v20)
        goto LABEL_33;
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_36;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v32 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v20;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v33 = 0;
LABEL_38:

  v34 = v61;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v2 = v47;
  v3 = v48;
  v35 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v35);
  swift_bridgeObjectRelease();
  if (!v63)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v66 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v66 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v67 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v67 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  v41 = swift_getObjectType();
  v42 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 112);
  swift_unknownObjectRetain();
  v42(v71, v41, v2);
  swift_unknownObjectRelease();
  v43 = swift_getObjectType();
  v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v44(v71, v43, v3);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v72);
  return Hasher._finalize()();
}

uint64_t Date.IntervalFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  int v21;
  _OWORD *v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  char v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.IntervalFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v39 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v28 = a2;
  v29 = v30;
  v39 = 1;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  v9 = v29;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v26 = v9;
  v27 = v30;
  v39 = 2;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  v10 = v27;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24[1] = v10;
  v25 = v30;
  v39 = 3;
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v30;
  v13 = *((_QWORD *)&v30 + 1);
  v14 = v32;
  v15 = v33;
  v16 = v34;
  v17 = v36;
  v18 = v37;
  v19 = v38;
  v20 = v31;
  v21 = v35;
  v22 = v28;
  v23 = v27;
  *v28 = v29;
  v22[1] = v23;
  v22[2] = v25;
  *((_BYTE *)v22 + 48) = v12;
  *((_QWORD *)v22 + 7) = v13;
  *((_DWORD *)v22 + 16) = v20;
  *((_QWORD *)v22 + 9) = v14;
  *((_BYTE *)v22 + 80) = v15;
  *((_BYTE *)v22 + 81) = v16;
  *(_DWORD *)((char *)v22 + 82) = v21;
  *((_WORD *)v22 + 43) = v17;
  *((_QWORD *)v22 + 11) = v18;
  *((_WORD *)v22 + 48) = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.IntervalFormatStyle@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.IntervalFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.IntervalFormatStyle(_QWORD *a1)
{
  return Date.IntervalFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.IntervalFormatStyle()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  _QWORD v66[18];
  _BYTE v67[144];
  _BYTE v68[144];
  _BYTE v69[72];
  _OWORD v70[3];
  __int16 v71;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_OWORD *)(v0 + 64);
  v70[0] = *(_OWORD *)(v0 + 48);
  v70[1] = v4;
  v70[2] = *(_OWORD *)(v0 + 80);
  v71 = *(_WORD *)(v0 + 96);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v1) & 1) != 0)
  {
    v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v8(v66, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v68) == 1)
  {
    v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)&v48);
  Hasher._combine(_:)(1u);
  if (v48 == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = v48 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  v10 = v49;
  if (!v49)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v48);
    if (!v50)
      goto LABEL_14;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    goto LABEL_18;
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v51)
      goto LABEL_15;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 = v52;
    if (!v52)
      goto LABEL_16;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v51)
    goto LABEL_20;
LABEL_15:
  Hasher._combine(_:)(0);
  v13 = v52;
  if (!v52)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v13);
  swift_bridgeObjectRelease();
LABEL_22:
  v14 = v53;
  v46 = v2;
  v47 = v3;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v16 = v54;
  v15 = v55;
  v18 = v56;
  v17 = v57;
  v19 = v58;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v20 = v15;
    v21 = v18;
    v22 = v17;
    v23 = v19;
    v24 = v16;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v25 = v19;
    v26 = v15;
    v27 = v18;
    v28 = v17;
  }
  v45 = v16;
  if (v15)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v15;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v18)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v30 = v18;
      _CFObject.hash(into:)();

      if (v17)
        goto LABEL_31;
LABEL_35:
      Hasher._combine(_:)(0);
      if (v19)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (!v17)
    goto LABEL_35;
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v31 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v19;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  v32 = 0;
LABEL_37:

  v33 = v59;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v2 = v46;
  v3 = v47;
  v34 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    if (v61)
      goto LABEL_42;
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v34);
  swift_bridgeObjectRelease();
  if (!v61)
    goto LABEL_44;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v64 == 2)
  {
    v37 = 0;
  }
  else
  {
    v37 = v64 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v37);
  if (v65 == 2)
  {
    v38 = 0;
  }
  else
  {
    v39 = v65 & 1;
    Hasher._combine(_:)(1u);
    v38 = v39;
  }
  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  v40 = swift_getObjectType();
  v41 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 112);
  swift_unknownObjectRetain();
  v41(v69, v40, v2);
  swift_unknownObjectRelease();
  v42 = swift_getObjectType();
  v43 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v43(v69, v42, v3);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v70);
  return Hasher._finalize()();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.IntervalFormatStyle@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = Date.IntervalFormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.IntervalFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_BYTE *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 72);
  v6 = *(_BYTE *)(v2 + 80);
  v7 = *(_BYTE *)(v2 + 81);
  v8 = *(_WORD *)(v2 + 86);
  v9 = *(_QWORD *)(v2 + 88);
  v10 = *(_WORD *)(v2 + 96);
  v11 = *(_OWORD *)(v2 + 16);
  v12 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 56) = v4;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(_QWORD *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 81) = v7;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v8;
  *(_QWORD *)(a2 + 88) = v9;
  *(_WORD *)(a2 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.year()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  __int128 v11;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = *(_WORD *)(v1 + 65);
  v4 = *(_BYTE *)(v1 + 67);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 81);
  v8 = *(_WORD *)(v1 + 86);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_WORD *)(v1 + 96);
  v11 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 3;
  *(_WORD *)(a1 + 65) = v3;
  *(_BYTE *)(a1 + 67) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 81) = v7;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  *(_WORD *)(a1 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.month(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  __int128 v14;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_WORD *)(v2 + 64);
  v7 = *(_BYTE *)(v2 + 67);
  v8 = *(_QWORD *)(v2 + 72);
  v9 = *(_BYTE *)(v2 + 80);
  v10 = *(_BYTE *)(v2 + 81);
  v11 = *(_WORD *)(v2 + 86);
  v12 = *(_QWORD *)(v2 + 88);
  v13 = *(_WORD *)(v2 + 96);
  v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_WORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 66) = v3;
  *(_BYTE *)(a2 + 67) = v7;
  *(_QWORD *)(a2 + 72) = v8;
  *(_BYTE *)(a2 + 80) = v9;
  *(_BYTE *)(a2 + 81) = v10;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v11;
  *(_QWORD *)(a2 + 88) = v12;
  *(_WORD *)(a2 + 96) = v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.day()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  __int128 v7;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_WORD *)(v1 + 86);
  v5 = *(_QWORD *)(v1 + 88);
  v6 = *(_WORD *)(v1 + 96);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  *(_WORD *)(a1 + 96) = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.weekday(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 72);
  v7 = *(_BYTE *)(v2 + 80);
  v8 = *(_BYTE *)(v2 + 81);
  v9 = *(_BYTE *)(v2 + 82);
  v10 = *(_QWORD *)(v2 + 88);
  v11 = *(_WORD *)(v2 + 96);
  v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(_QWORD *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 81) = v8;
  *(_BYTE *)(a2 + 82) = v9;
  *(_BYTE *)(a2 + 83) = v3;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(v2 + 84);
  *(_QWORD *)(a2 + 88) = v10;
  *(_WORD *)(a2 + 96) = v11;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.hour(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  __int16 v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  __int128 v14;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 72);
  v7 = *(_BYTE *)(v2 + 80);
  v8 = *(_BYTE *)(v2 + 81);
  v9 = *(_WORD *)(v2 + 82);
  v10 = *(_BYTE *)(v2 + 84);
  v11 = *(_WORD *)(v2 + 86);
  v12 = *(_QWORD *)(v2 + 88);
  v13 = *(_WORD *)(v2 + 96);
  v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(_QWORD *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 81) = v8;
  *(_WORD *)(a2 + 82) = v9;
  *(_BYTE *)(a2 + 84) = v10;
  *(_BYTE *)(a2 + 85) = v3;
  *(_WORD *)(a2 + 86) = v11;
  *(_QWORD *)(a2 + 88) = v12;
  *(_WORD *)(a2 + 96) = v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.minute()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = *(_BYTE *)(v1 + 80);
  v6 = *(_BYTE *)(v1 + 81);
  v7 = *(_BYTE *)(v1 + 87);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_WORD *)(v1 + 96);
  v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 81) = v6;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_BYTE *)(a1 + 86) = 0;
  *(_BYTE *)(a1 + 87) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = v9;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.second()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = *(_BYTE *)(v1 + 80);
  v6 = *(_BYTE *)(v1 + 81);
  v7 = *(_BYTE *)(v1 + 86);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_WORD *)(v1 + 96);
  v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 81) = v6;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = v9;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.timeZone(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 72);
  v7 = *(_BYTE *)(v2 + 80);
  v8 = *(_BYTE *)(v2 + 81);
  v9 = *(_WORD *)(v2 + 86);
  v10 = *(_QWORD *)(v2 + 88);
  v11 = *(_BYTE *)(v2 + 96);
  v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(_QWORD *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 81) = v8;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v9;
  *(_QWORD *)(a2 + 88) = v10;
  *(_BYTE *)(a2 + 96) = v11;
  *(_BYTE *)(a2 + 97) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

int8x8_t static FormatStyle<>.interval.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v19 = 0;
  v20 = 1;
  v17 = 0;
  v18 = 1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v16);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v16;
  v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_QWORD *)&v16 = v4;
  *((_QWORD *)&v16 + 1) = v5;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static CalendarCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)&v15);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static TimeZoneCache.cache + 16;
  v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v8, (uint64_t *)&v14);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  v10 = v14;
  v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *(_QWORD *)&v14 = v10;
  *((_QWORD *)&v14 + 1) = v11;
  return Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)((uint64_t)&v19, &v17, &v16, &v15, &v14, a1, v12);
}

uint64_t Range<>.formatted()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  int16x8_t v9;
  uint64_t v10;
  __int128 v12[3];
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  __int128 v23;
  __int128 v24[2];
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  _OWORD v29[3];
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;

  v1 = *v0;
  v2 = v0[1];
  v27 = 0;
  v28 = 1;
  v25 = 0;
  v26 = 1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v3 = static LocaleCache.cache + 16;
  v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, (uint64_t *)v29);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  *(_QWORD *)&v12[0] = *(_QWORD *)&v29[0];
  *((_QWORD *)&v12[0] + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = static CalendarCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)v29);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v24[0] = v29[0];
  if (one-time initialization token for cache != -1)
    swift_once();
  v7 = static TimeZoneCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v7, (uint64_t *)v29);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  *(_QWORD *)&v23 = *(_QWORD *)&v29[0];
  *((_QWORD *)&v23 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)((uint64_t)&v27, &v25, v12, v24, &v23, (uint64_t)v29, v9);
  v12[0] = v29[0];
  v12[1] = v29[1];
  v12[2] = v29[2];
  v13 = v30;
  v14 = v31;
  v15 = v32;
  v16 = v33;
  v17 = v34;
  v18 = v35;
  v19 = v36;
  v20 = v37;
  v21 = v38;
  v22 = v39;
  *(_QWORD *)&v24[0] = v1;
  *((_QWORD *)&v24[0] + 1) = v2;
  v10 = Date.IntervalFormatStyle.format(_:)((double *)v24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v10;
}

uint64_t Range<>.formatted(date:time:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  int16x8_t v12;
  uint64_t v13;
  __int128 v15[3];
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  __int128 v26;
  __int128 v27[2];
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  _OWORD v32[3];
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;

  v3 = *a2;
  v4 = *v2;
  v5 = v2[1];
  v30 = *a1;
  v31 = 0;
  v28 = v3;
  v29 = 0;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static LocaleCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, (uint64_t *)v32);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  *(_QWORD *)&v15[0] = *(_QWORD *)&v32[0];
  *((_QWORD *)&v15[0] + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static CalendarCache.cache + 16;
  v9 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v8, (uint64_t *)v32);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  v27[0] = v32[0];
  if (one-time initialization token for cache != -1)
    swift_once();
  v10 = static TimeZoneCache.cache + 16;
  v11 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v10, (uint64_t *)v32);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  *(_QWORD *)&v26 = *(_QWORD *)&v32[0];
  *((_QWORD *)&v26 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)((uint64_t)&v30, &v28, v15, v27, &v26, (uint64_t)v32, v12);
  v15[0] = v32[0];
  v15[1] = v32[1];
  v15[2] = v32[2];
  v16 = v33;
  v17 = v34;
  v18 = v35;
  v19 = v36;
  v20 = v37;
  v21 = v38;
  v22 = v39;
  v23 = v40;
  v24 = v41;
  v25 = v42;
  *(_QWORD *)&v27[0] = v4;
  *((_QWORD *)&v27[0] + 1) = v5;
  v13 = Date.IntervalFormatStyle.format(_:)((double *)v27);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

uint64_t Range<>.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  __int128 v5;

  v5 = *v3;
  return (*(uint64_t (**)(__int128 *))(a3 + 48))(&v5);
}

BOOL specialized static Date.IntervalFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  BOOL v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[3];
  __int16 v16;
  _OWORD v17[3];
  __int16 v18;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[5];
  v15[0] = a1[3];
  v15[1] = v3;
  v15[2] = v4;
  v16 = *((_WORD *)a1 + 48);
  v18 = *((_WORD *)a2 + 48);
  v5 = a2[5];
  v17[1] = a2[4];
  v17[2] = v5;
  v9 = a2[2];
  v10 = v2;
  v17[0] = a2[3];
  v6 = *a1;
  v11 = a2[1];
  v12 = a1[1];
  v13 = *a2;
  v14 = v6;
  v7 = (specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0
    && (v13 = v11, v14 = v12, (specialized static TimeZone.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0)
    && (v13 = v9, v14 = v10, (specialized static Calendar.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0)
    && specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)((unsigned __int8 *)v15, (unsigned __int8 *)v17);
  return v7;
}

unint64_t lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys, &unk_1E0F2DE28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys, &unk_1E0F2DE28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys, &unk_1E0F2DE28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys, &unk_1E0F2DE28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateFieldCollection, &type metadata for Date.FormatStyle.DateFieldCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateFieldCollection, &type metadata for Date.FormatStyle.DateFieldCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateFieldCollection, &type metadata for Date.FormatStyle.DateFieldCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.IntervalFormatStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  result = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  a1[3] = result;
  return result;
}

uint64_t destroy for Date.IntervalFormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.IntervalFormatStyle(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *a2;
  v5 = a2[3];
  v4 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  v6 = a2[4];
  v7 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.IntervalFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  v8 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  *(_BYTE *)(a1 + 87) = *(_BYTE *)(a2 + 87);
  v9 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  return a1;
}

__n128 __swift_memcpy98_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Date.IntervalFormatStyle(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(a2 + 82);
  *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 86);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.IntervalFormatStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 98))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.IntervalFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 98) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 98) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.IntervalFormatStyle()
{
  return &type metadata for Date.IntervalFormatStyle;
}

uint64_t storeEnumTagSinglePayload for Date.IntervalFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181BEFECC + 4 * byte_1820E9F19[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181BEFF00 + 4 * byte_1820E9F14[v4]))();
}

uint64_t sub_181BEFF00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BEFF08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BEFF10);
  return result;
}

uint64_t sub_181BEFF1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BEFF24);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181BEFF28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BEFF30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.IntervalFormatStyle.CodingKeys()
{
  return &unk_1E0F2DE28;
}

uint64_t specialized Date.IntervalFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736C6F626D7973 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  char v2;

  if (qword_1820F8B10[a1] == qword_1820F8B10[a2])
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 2577447;
  else
    v3 = 32;
  if (v2)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 2577447;
  else
    v5 = 32;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE100000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0;
  else
    v3 = 45;
  if (v2)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE000000000000000;
  if ((a2 & 1) != 0)
    v5 = 0;
  else
    v5 = 45;
  if ((a2 & 1) != 0)
    v6 = 0xE000000000000000;
  else
    v6 = 0xE100000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0;
  else
    v3 = 58;
  if (v2)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE000000000000000;
  if ((a2 & 1) != 0)
    v5 = 0;
  else
    v5 = 58;
  if ((a2 & 1) != 0)
    v6 = 0xE000000000000000;
  else
    v6 = 0xE100000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 110;
  else
    v3 = 0x7961646B656577;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE100000000000000;
  if ((a2 & 1) != 0)
    v5 = 110;
  else
    v5 = 0x7961646B656577;
  if ((a2 & 1) != 0)
    v6 = 0xE100000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1885431148;
  else
    v3 = 0x68746E6F6DLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1885431148;
  else
    v5 = 0x68746E6F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6C69746E75;
  else
    v2 = 0x746E756F63;
  if ((a2 & 1) != 0)
    v3 = 0x6C69746E75;
  else
    v3 = 0x746E756F63;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 28013;
  else
    v3 = 109;
  if (v2)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE200000000000000;
  if ((a2 & 1) != 0)
    v5 = 28013;
  else
    v5 = 109;
  if ((a2 & 1) != 0)
    v6 = 0xE200000000000000;
  else
    v6 = 0xE100000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 29555;
  else
    v3 = 115;
  if (v2)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE200000000000000;
  if ((a2 & 1) != 0)
    v5 = 29555;
  else
    v5 = 115;
  if ((a2 & 1) != 0)
    v6 = 0xE200000000000000;
  else
    v6 = 0xE100000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  char v2;

  if (qword_1820F8B48[a1] == qword_1820F8B48[a2])
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7475626972747461;
  else
    v3 = 1936618866;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xEE00656C62615465;
  if ((a2 & 1) != 0)
    v5 = 0x7475626972747461;
  else
    v5 = 1936618866;
  if ((a2 & 1) != 0)
    v6 = 0xEE00656C62615465;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x696C61636F4C7369;
    else
      v3 = 0x726564726FLL;
    if (v2 == 1)
      v4 = 0xEB0000000064657ALL;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x696C61636F4C7369;
      else
        v6 = 0x726564726FLL;
      if (v5 == 1)
        v7 = 0xEB0000000064657ALL;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x736E6F6974706FLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x736E6F6974706FLL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x656C61636F6CLL;
    else
      v3 = 0x726564726FLL;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x656C61636F6CLL;
      else
        v6 = 0x726564726FLL;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x736E6F6974706FLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x736E6F6974706FLL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1195853639;
    else
      v3 = 0x4747474747;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1195853639;
      else
        v6 = 0x4747474747;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE100000000000000;
    v3 = 71;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE100000000000000;
  if (v3 != 71)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1431655765;
    else
      v3 = 0x5555555555;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1431655765;
      else
        v6 = 0x5555555555;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE100000000000000;
    v3 = 85;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE100000000000000;
  if (v3 != 85)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 30583;
    else
      v3 = 87;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE100000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 30583;
      else
        v6 = 87;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE100000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE100000000000000;
    v3 = 119;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE100000000000000;
  if (v3 != 119)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 17476;
    else
      v3 = 4473924;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE300000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 17476;
      else
        v6 = 4473924;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE300000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE100000000000000;
    v3 = 68;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE100000000000000;
  if (v3 != 68)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_181BF080C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF08AC + 4 * byte_1820F8156[a2]))(0x7974537374696E75);
}

uint64_t sub_181BF08AC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7974537374696E75 && v1 == 0xEA0000000000656CLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF09EC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF0A88 + 4 * byte_1820F8163[a2]))(0x656E6F5A656D6974);
}

uint64_t sub_181BF0A88(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656E6F5A656D6974 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF0E78(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF0ED8 + 4 * byte_1820F816F[a2]))(20817);
}

uint64_t sub_181BF0ED8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 20817 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF0FB4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF1014 + 4 * byte_1820F8179[a2]))(29041);
}

uint64_t sub_181BF1014(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 29041 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF10F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF1150 + 4 * byte_1820F818D[a2]))(19532);
}

uint64_t sub_181BF1150(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 19532 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF13DC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF1448 + 4 * byte_1820F8198[a2]))(1162167621);
}

uint64_t sub_181BF1448(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1162167621 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF153C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF15A4 + 4 * byte_1820F81A3[a2]))(6513507);
}

uint64_t sub_181BF15A4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6513507 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF1688(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF1724 + 4 * byte_1820F81B1[a2]))(1633771873);
}

uint64_t sub_181BF1724(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1633771873 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF1CF4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF1D5C + 4 * byte_1820F81C2[a2]))(26728);
}

uint64_t sub_181BF1D5C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 26728 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return byte_1820F8B68[a1] == byte_1820F8B68[a2];
}

uint64_t sub_181BF1FAC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF2050 + 4 * byte_1820F81D1[a2]))(0x614E796C696D6166);
}

uint64_t sub_181BF2050(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x614E796C696D6166 && v1 == 0xEA0000000000656DLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF21A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF21F8 + 4 * byte_1820F81DC[a2]))(0x65676175676E616CLL);
}

uint64_t sub_181BF21F8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65676175676E616CLL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_181BF22E4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181BF23F0 + 4 * byte_1820F81E9[a2]))(0x6974616D6D617267);
}

uint64_t sub_181BF23F0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6974616D6D617267 && v1 == 0xEF657361436C6163)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t Calendar.RecurrenceRule.Month.init(_:isLeap:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t Calendar.RecurrenceRule.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Calendar.RecurrenceRule.calendar.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Calendar.RecurrenceRule.matchingPolicy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *Calendar.RecurrenceRule.matchingPolicy.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.matchingPolicy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Calendar.RecurrenceRule.repeatedTimePolicy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *Calendar.RecurrenceRule.repeatedTimePolicy.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.repeatedTimePolicy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Calendar.RecurrenceRule.Frequency.init(rawValue:)@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = 0x5040302010006uLL >> (8 * result);
  if (result >= 7)
    LOBYTE(v2) = 6;
  *a2 = v2;
  return result;
}

uint64_t Calendar.RecurrenceRule.Frequency.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Frequency@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return Calendar.RecurrenceRule.Frequency.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Frequency()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Frequency()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  return RawRepresentable<>.encode(to:)();
}

void Calendar.RecurrenceRule.frequency.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 18);
}

_BYTE *Calendar.RecurrenceRule.frequency.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.frequency.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.interval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Calendar.RecurrenceRule.interval.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.interval.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End._End(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v4 == 1)
      return *(_QWORD *)&v2 == *(_QWORD *)&v3;
    return 0;
  }
  return v4 == 2 && *(_QWORD *)&v3 == 0;
}

uint64_t static Calendar.RecurrenceRule.End.afterOccurrences(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

_QWORD *static Calendar.RecurrenceRule.End.afterDate(_:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void static Calendar.RecurrenceRule.End.never.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

BOOL static Calendar.RecurrenceRule.End.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  if (*(_BYTE *)(a1 + 8) != 1)
    return v4 == 2 && *(_QWORD *)&v3 == 0;
  return v4 == 1 && *(_QWORD *)&v2 == *(_QWORD *)&v3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  if (*(_BYTE *)(a1 + 8) != 1)
    return v4 == 2 && *(_QWORD *)&v3 == 0;
  return v4 == 1 && *(_QWORD *)&v2 == *(_QWORD *)&v3;
}

void Calendar.RecurrenceRule.end.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t Calendar.RecurrenceRule.end.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.end.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t static Calendar.RecurrenceRule.Weekday.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v4 = *a1;
  v5 = *((char *)a1 + 8);
  v6 = *a2;
  v7 = *((char *)a2 + 8);
  if (v5 < 0)
  {
    if (v7 < 0 && v4 == v6)
      return specialized == infix<A>(_:_:)(v5 & 0x7F, v7 & 0x7F);
    return 0;
  }
  if (v7 < 0)
    return 0;
  return specialized == infix<A>(_:_:)(v4, v6);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Weekday(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v4 = *a1;
  v5 = *((char *)a1 + 8);
  v6 = *a2;
  v7 = *((char *)a2 + 8);
  if (v5 < 0)
  {
    if (v7 < 0 && v4 == v6)
      return specialized == infix<A>(_:_:)(v5 & 0x7F, v7 & 0x7F);
    return 0;
  }
  if (v7 < 0)
    return 0;
  return specialized == infix<A>(_:_:)(v4, v6);
}

uint64_t Calendar.RecurrenceRule.Month.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Calendar.RecurrenceRule.Month.index.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.Month.index.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.Month.isLeap.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Calendar.RecurrenceRule.Month.isLeap.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.Month.isLeap.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.Month.init(integerLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t static Calendar.RecurrenceRule.Month.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Month(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t Calendar.RecurrenceRule.seconds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.seconds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.seconds.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.minutes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.minutes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.minutes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.hours.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.hours.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.hours.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.weekdays.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.weekdays.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.weekdays.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.daysOfTheMonth.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.daysOfTheMonth.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.daysOfTheMonth.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.daysOfTheYear.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.daysOfTheYear.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.daysOfTheYear.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.months.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.months.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.months.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.weeks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.weeks.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.weeks.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.setPositions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.setPositions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.setPositions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Calendar.RecurrenceRule.init(calendar:frequency:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weeks:weekdays:hours:minutes:seconds:setPositions:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16)
{
  unsigned __int8 v16;
  unint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  __n128 result;

  v16 = *a2;
  v17 = *(_QWORD *)a4;
  v18 = *(_BYTE *)(a4 + 8);
  v19 = *a5;
  v20 = *a6;
  result = *a1;
  *a9 = *a1;
  a9[1].n128_u8[0] = v19;
  a9[1].n128_u8[1] = v20;
  a9[1].n128_u8[2] = v16;
  a9[1].n128_u64[1] = a3;
  a9[2].n128_u64[0] = v17;
  a9[2].n128_u8[8] = v18;
  a9[3].n128_u64[0] = a15;
  a9[3].n128_u64[1] = a14;
  a9[4].n128_u64[0] = a13;
  a9[4].n128_u64[1] = a12;
  a9[5].n128_u64[0] = a10;
  a9[5].n128_u64[1] = a8;
  a9[6].n128_u64[0] = a7;
  a9[6].n128_u64[1] = a11;
  a9[7].n128_u64[0] = a16;
  return result;
}

uint64_t Calendar.RecurrenceRule.recurrences(of:in:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v4 = *(_BYTE *)(v3 + 16);
  v5 = *(_BYTE *)(v3 + 17);
  v6 = *(_BYTE *)(v3 + 18);
  v7 = *(_BYTE *)(v3 + 40);
  v8 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD *)(v3 + 56);
  v10 = *(_QWORD *)(v3 + 64);
  v11 = *(_QWORD *)(v3 + 72);
  v12 = *(_QWORD *)(v3 + 80);
  v13 = *(_QWORD *)(v3 + 88);
  v15 = *(_QWORD *)(v3 + 96);
  v14 = *(_QWORD *)(v3 + 104);
  v16 = *(_QWORD *)(v3 + 112);
  v18 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v3;
  *(_BYTE *)(a3 + 24) = v4;
  *(_BYTE *)(a3 + 25) = v5;
  *(_BYTE *)(a3 + 26) = v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 24);
  *(_BYTE *)(a3 + 48) = v7;
  *(_QWORD *)(a3 + 56) = v8;
  *(_QWORD *)(a3 + 64) = v9;
  *(_QWORD *)(a3 + 72) = v10;
  *(_QWORD *)(a3 + 80) = v11;
  *(_QWORD *)(a3 + 88) = v12;
  *(_QWORD *)(a3 + 96) = v13;
  *(_QWORD *)(a3 + 104) = v15;
  *(_QWORD *)(a3 + 112) = v14;
  *(_QWORD *)(a3 + 120) = v16;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)a2;
  *(_BYTE *)(a3 + 144) = v18;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.minutely(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  char v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;

  v14 = *a3;
  v15 = *((_BYTE *)a3 + 8);
  v16 = *a4;
  v17 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v16;
  *(_WORD *)(a9 + 17) = v17;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)(a9 + 32) = v14;
  *(_BYTE *)(a9 + 40) = v15;
  *(_QWORD *)(a9 + 48) = a13;
  *(_QWORD *)(a9 + 56) = a12;
  *(_QWORD *)(a9 + 64) = a11;
  *(_QWORD *)(a9 + 72) = a10;
  *(_QWORD *)(a9 + 80) = a8;
  *(_QWORD *)(a9 + 88) = a7;
  v18 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 96) = a6;
  *(_QWORD *)(a9 + 104) = v18;
  *(_QWORD *)(a9 + 112) = a14;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.hourly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v14 = *a3;
  v15 = *((_BYTE *)a3 + 8);
  v16 = *a4;
  v17 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v16;
  *(_BYTE *)(a9 + 17) = v17;
  *(_BYTE *)(a9 + 18) = 1;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)(a9 + 32) = v14;
  *(_BYTE *)(a9 + 40) = v15;
  *(_QWORD *)(a9 + 48) = a13;
  *(_QWORD *)(a9 + 56) = a12;
  *(_QWORD *)(a9 + 64) = a11;
  *(_QWORD *)(a9 + 72) = a10;
  *(_QWORD *)(a9 + 80) = a8;
  *(_QWORD *)(a9 + 88) = a7;
  v18 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 96) = a6;
  *(_QWORD *)(a9 + 104) = v18;
  *(_QWORD *)(a9 + 112) = a14;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.daily(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v13 = *a3;
  v14 = *((_BYTE *)a3 + 8);
  v15 = *a4;
  v16 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v15;
  *(_BYTE *)(a9 + 17) = v16;
  *(_BYTE *)(a9 + 18) = 2;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)(a9 + 32) = v13;
  *(_BYTE *)(a9 + 40) = v14;
  *(_QWORD *)(a9 + 48) = a12;
  *(_QWORD *)(a9 + 56) = a11;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a8;
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 80) = a7;
  *(_QWORD *)(a9 + 88) = v17;
  *(_QWORD *)(a9 + 96) = a6;
  *(_QWORD *)(a9 + 104) = v17;
  *(_QWORD *)(a9 + 112) = a13;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.weekly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v12 = *a3;
  v13 = *((_BYTE *)a3 + 8);
  v14 = *a4;
  v15 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v14;
  *(_BYTE *)(a9 + 17) = v15;
  *(_BYTE *)(a9 + 18) = 3;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)(a9 + 32) = v12;
  *(_BYTE *)(a9 + 40) = v13;
  *(_QWORD *)(a9 + 48) = a11;
  *(_QWORD *)(a9 + 56) = a10;
  *(_QWORD *)(a9 + 64) = a8;
  *(_QWORD *)(a9 + 72) = a7;
  v16 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 80) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 88) = v16;
  *(_QWORD *)(a9 + 96) = a6;
  *(_QWORD *)(a9 + 104) = v16;
  *(_QWORD *)(a9 + 112) = a12;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.monthly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v13 = *a3;
  v14 = *((_BYTE *)a3 + 8);
  v15 = *a4;
  v16 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v15;
  *(_BYTE *)(a9 + 17) = v16;
  *(_BYTE *)(a9 + 18) = 4;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)(a9 + 32) = v13;
  *(_BYTE *)(a9 + 40) = v14;
  *(_QWORD *)(a9 + 48) = a12;
  *(_QWORD *)(a9 + 56) = a11;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a8;
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 80) = a7;
  *(_QWORD *)(a9 + 88) = v17;
  *(_QWORD *)(a9 + 96) = a6;
  *(_QWORD *)(a9 + 104) = v17;
  *(_QWORD *)(a9 + 112) = a13;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.yearly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weeks:weekdays:hours:minutes:seconds:setPositions:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  v15 = *a3;
  v16 = *((_BYTE *)a3 + 8);
  v17 = *a4;
  v18 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v17;
  *(_BYTE *)(a9 + 17) = v18;
  *(_BYTE *)(a9 + 18) = 5;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)(a9 + 32) = v15;
  *(_BYTE *)(a9 + 40) = v16;
  *(_QWORD *)(a9 + 48) = a14;
  *(_QWORD *)(a9 + 56) = a13;
  *(_QWORD *)(a9 + 64) = a12;
  *(_QWORD *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 80) = a8;
  *(_QWORD *)(a9 + 88) = a7;
  *(_QWORD *)(a9 + 96) = a6;
  *(_QWORD *)(a9 + 104) = a10;
  *(_QWORD *)(a9 + 112) = a15;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.End.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x746E756F63;
  if (*v1)
    v2 = 0x6C69746E75;
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C69746E75;
  else
    return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.End.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.End.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.End.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v17 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if ((v15 & 1) != 0)
    {
      v16 = 0;
      v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v11 = v10;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v11 & 1) != 0)
      {
        v9 = 0;
        v12 = 2;
      }
      else
      {
        v12 = 1;
      }
    }
    else
    {
      v9 = v14;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v12 = 0;
    }
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.End.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  _QWORD v9[2];
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.End.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[0] = *(_QWORD *)v1;
  v7 = *(unsigned __int8 *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v7)
  {
    if (v7 == 1)
    {
      v11 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
  }
  else
  {
    v9[1] = v9[0];
    v10 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.End@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.End.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.End(_QWORD *a1)
{
  return Calendar.RecurrenceRule.End.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Weekday.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 110;
  if (!*v1)
    v2 = 0x7961646B656577;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE100000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 110;
  else
    return 0x7961646B656577;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Weekday.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.Weekday.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unsigned __int8 v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.Weekday.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v18 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v19;
    v17 = 1;
    v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v9 | 0x80;
    if ((v13 & 1) != 0)
      v15 = v9;
    else
      v15 = v11;
    if ((v13 & 1) != 0)
      v14 = 0;
    *(_QWORD *)a2 = v15;
    *(_BYTE *)(a2 + 8) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.Weekday.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.Weekday.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((char *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 < 0)
  {
    v15 = 1;
    v9 = v3;
    v10 = v12[1];
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v10)
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v9);
    v14 = v8 & 0x7F;
    v13 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  }
  else
  {
    v17 = v7;
    v16 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
    v9 = v3;
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Weekday@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.Weekday.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Weekday(_QWORD *a1)
{
  return Calendar.RecurrenceRule.Weekday.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Month.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Month.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Month.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  char v6;

  v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  result = swift_bridgeObjectRelease();
  if (v4 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v4)
    v6 = 0;
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1885431148;
  if (!*v1)
    v2 = 0x68746E6F6DLL;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 1885431148;
  else
    return 0x68746E6F6DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.Month.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Month.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.Month.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  _QWORD v13[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.Month.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v13[0]) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v13[0]) = 1;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v10 = 0;
  }
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = v10 & 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.Month.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v10[24];
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.Month.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    v10[0] = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v2)
    {
      v10[0] = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

uint64_t Calendar.RecurrenceRule.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BF42D8 + 4 * byte_1820F81F2[a1]))(0x7261646E656C6163, 0xE800000000000000);
}

uint64_t sub_181BF42D8()
{
  return 0x636E657571657266;
}

uint64_t sub_181BF42F4()
{
  return 0x6C61767265746E69;
}

uint64_t sub_181BF4308()
{
  return 6581861;
}

uint64_t sub_181BF4318()
{
  return 0x676E69686374616DLL;
}

unint64_t sub_181BF433C()
{
  return 0xD000000000000012;
}

uint64_t sub_181BF4358()
{
  return 0x7368746E6F6DLL;
}

uint64_t sub_181BF436C()
{
  return 0x6854664F73796164;
}

uint64_t sub_181BF43A4()
{
  return 0x736B656577;
}

uint64_t sub_181BF43B8()
{
  return 0x737961646B656577;
}

uint64_t sub_181BF43CC()
{
  return 0x7372756F68;
}

uint64_t sub_181BF43E0()
{
  return 0x736574756E696DLL;
}

uint64_t sub_181BF43F8()
{
  return 0x73646E6F636573;
}

uint64_t sub_181BF4410()
{
  return 0x7469736F50746573;
}

uint64_t Calendar.RecurrenceRule.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BF4464 + 4 * byte_1820F8201[a1]))(0x7261646E656C6163, 0xE800000000000000);
}

uint64_t sub_181BF4464()
{
  return 0x636E657571657266;
}

uint64_t sub_181BF4480()
{
  return 0x6C61767265746E69;
}

uint64_t sub_181BF4494()
{
  return 6581861;
}

uint64_t sub_181BF44A4()
{
  return 0x676E69686374616DLL;
}

unint64_t sub_181BF44C8()
{
  return 0xD000000000000012;
}

uint64_t sub_181BF44E4()
{
  return 0x7368746E6F6DLL;
}

uint64_t sub_181BF44F8()
{
  return 0x6854664F73796164;
}

uint64_t sub_181BF4530()
{
  return 0x736B656577;
}

uint64_t sub_181BF4544()
{
  return 0x737961646B656577;
}

uint64_t sub_181BF4558()
{
  return 0x7372756F68;
}

uint64_t sub_181BF456C()
{
  return 0x736574756E696DLL;
}

uint64_t sub_181BF4584()
{
  return 0x73646E6F636573;
}

uint64_t sub_181BF459C()
{
  return 0x7469736F50746573;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Month@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.Month.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Month(_QWORD *a1)
{
  return Calendar.RecurrenceRule.Month.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.CodingKeys()
{
  unsigned __int8 *v0;

  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  unsigned __int8 *v0;

  return Calendar.RecurrenceRule.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Calendar.RecurrenceRule.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  char v45;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v45 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v42 = v43;
  v45 = 1;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10 = v43;
  LOBYTE(v43) = 2;
  v41 = KeyedDecodingContainer.decode(_:forKey:)();
  v45 = 3;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v40 = v43;
  v44 = BYTE8(v43);
  v45 = 4;
  lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v39 = v43;
  v45 = 5;
  lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v37 = v43;
  v38 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month]);
  v45 = 6;
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Month] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month], (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month, MEMORY[0x1E0DEAF40]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v11 = v43;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  v45 = 7;
  v13 = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], MEMORY[0x1E0DEB448], MEMORY[0x1E0DEAF40]);
  v36 = v11;
  swift_bridgeObjectRetain();
  v35 = v13;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v14 = v12;
  v15 = v43;
  v45 = 8;
  swift_bridgeObjectRetain();
  v34 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v31 = a2;
  v16 = v43;
  v45 = 9;
  swift_bridgeObjectRetain();
  v32 = v8;
  v33 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday]);
  v45 = 10;
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Weekday] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday], (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v45 = 13;
  v18 = v43;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v45 = 12;
  v30 = v43;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v29 = 0;
  v45 = 11;
  v28 = v43;
  swift_bridgeObjectRetain();
  v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v33);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if (!v29)
      swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v45 = 14;
    v27 = v43;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v33);
    v35 = v43;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v36;
    swift_bridgeObjectRelease();
    v23 = v31;
    *v31 = v42;
    *((_BYTE *)v23 + 16) = v39;
    *((_BYTE *)v23 + 17) = v37;
    *((_BYTE *)v23 + 18) = v38;
    v24 = v40;
    *((_QWORD *)v23 + 3) = v41;
    *((_QWORD *)v23 + 4) = v24;
    *((_BYTE *)v23 + 40) = v44;
    *((_QWORD *)v23 + 6) = v30;
    *((_QWORD *)v23 + 7) = v20;
    *((_QWORD *)v23 + 8) = v27;
    *((_QWORD *)v23 + 9) = v21;
    *((_QWORD *)v23 + 10) = v16;
    *((_QWORD *)v23 + 11) = v15;
    *((_QWORD *)v23 + 12) = v22;
    *((_QWORD *)v23 + 13) = v17;
    *((_QWORD *)v23 + 14) = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
}

uint64_t Calendar.RecurrenceRule.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  int v36;
  char v37;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *((unsigned __int8 *)v3 + 16);
  v30 = *((unsigned __int8 *)v3 + 17);
  v31 = v9;
  LODWORD(v34) = *((unsigned __int8 *)v3 + 18);
  v10 = *((_QWORD *)v3 + 3);
  v32 = *((_QWORD *)v3 + 4);
  v33 = v10;
  v36 = *((unsigned __int8 *)v3 + 40);
  v11 = *((_QWORD *)v3 + 7);
  v22 = *((_QWORD *)v3 + 6);
  v23 = v11;
  v12 = *((_QWORD *)v3 + 9);
  v24 = *((_QWORD *)v3 + 8);
  v25 = v12;
  v13 = *((_QWORD *)v3 + 11);
  v27 = *((_QWORD *)v3 + 10);
  v28 = v13;
  v29 = *((_QWORD *)v3 + 12);
  v14 = *((_QWORD *)v3 + 14);
  v26 = *((_QWORD *)v3 + 13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = *v3;
  v16 = v5;
  v35 = v15;
  v37 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v32;
  v18 = v36;
  LOBYTE(v35) = (_BYTE)v34;
  v37 = 1;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = 2;
  v34 = v8;
  KeyedEncodingContainer.encode(_:forKey:)();
  *(_QWORD *)&v35 = v17;
  BYTE8(v35) = v18;
  v37 = 3;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = v31;
  v37 = 4;
  lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = v30;
  v37 = 5;
  lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v29;
  v37 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month]);
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Month] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month], (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v28;
  v37 = 7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], MEMORY[0x1E0DEB420], MEMORY[0x1E0DEAF10]);
  v33 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v27;
  v37 = 8;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v26;
  v37 = 9;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v25;
  v37 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday]);
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Weekday] and conformance <A> [A], &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday], (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v24;
  v37 = 11;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v23;
  v37 = 12;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v22;
  v37 = 13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v35 = v14;
  v37 = 14;
  v20 = v33;
  v19 = v34;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v19, v20);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Calendar.RecurrenceRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule(_QWORD *a1)
{
  return Calendar.RecurrenceRule.encode(to:)(a1);
}

BOOL specialized static Calendar.RecurrenceRule.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;

  v2 = *((unsigned __int8 *)a1 + 16);
  v3 = *((unsigned __int8 *)a1 + 17);
  v4 = *((unsigned __int8 *)a1 + 18);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((unsigned __int8 *)a1 + 40);
  v31 = (_QWORD *)*((_QWORD *)a1 + 6);
  v32 = *((double *)a1 + 4);
  v29 = (_QWORD *)*((_QWORD *)a1 + 7);
  v27 = (_QWORD *)*((_QWORD *)a1 + 8);
  v25 = *((_QWORD *)a1 + 9);
  v23 = (_QWORD *)*((_QWORD *)a1 + 10);
  v21 = (_QWORD *)*((_QWORD *)a1 + 11);
  v19 = *((_QWORD *)a1 + 12);
  v17 = (_QWORD *)*((_QWORD *)a1 + 13);
  v15 = (_QWORD *)*((_QWORD *)a1 + 14);
  v7 = *((unsigned __int8 *)a2 + 16);
  v8 = *((unsigned __int8 *)a2 + 17);
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = *((_QWORD *)a2 + 3);
  v33 = *((double *)a2 + 4);
  v11 = *((unsigned __int8 *)a2 + 40);
  v30 = (_QWORD *)*((_QWORD *)a2 + 6);
  v28 = (_QWORD *)*((_QWORD *)a2 + 7);
  v26 = (_QWORD *)*((_QWORD *)a2 + 8);
  v24 = *((_QWORD *)a2 + 9);
  v22 = (_QWORD *)*((_QWORD *)a2 + 10);
  v20 = (_QWORD *)*((_QWORD *)a2 + 11);
  v12 = *a1;
  v18 = *((_QWORD *)a2 + 12);
  v16 = (_QWORD *)*((_QWORD *)a2 + 13);
  v14 = (_QWORD *)*((_QWORD *)a2 + 14);
  v34 = *a2;
  v35 = v12;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v35, (uint64_t)&v34) & 1) == 0
    || v2 != v7
    || ((v3 ^ v8) & 1) != 0
    || v4 != v9
    || v5 != v10)
  {
    return 0;
  }
  if (v6)
  {
    if (v6 == 1)
    {
      if (v11 != 1 || *(_QWORD *)&v32 != *(_QWORD *)&v33)
        return 0;
    }
    else if (v11 != 2 || v33 != 0.0)
    {
      return 0;
    }
  }
  else if (v11 || v32 != v33)
  {
    return 0;
  }
  if (specialized static Array<A>.== infix(_:_:)(v31, v30)
    && specialized static Array<A>.== infix(_:_:)(v29, v28)
    && specialized static Array<A>.== infix(_:_:)(v27, v26)
    && (specialized static Array<A>.== infix(_:_:)(v25, v24) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(v23, v22)
    && specialized static Array<A>.== infix(_:_:)(v21, v20)
    && (specialized static Array<A>.== infix(_:_:)(v19, v18) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(v17, v16))
  {
    return specialized static Array<A>.== infix(_:_:)(v15, v14);
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys, &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys, &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys, &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys, &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys, &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys, &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys, &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys, &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys, &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys, &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys, &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys, &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys, &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys, &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys, &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys, &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Frequency, &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Frequency, &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Frequency, &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Frequency, &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.End, &type metadata for Calendar.RecurrenceRule.End);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.End, &type metadata for Calendar.RecurrenceRule.End);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.MatchingPolicy, &type metadata for Calendar.MatchingPolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.MatchingPolicy, &type metadata for Calendar.MatchingPolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.MatchingPolicy, &type metadata for Calendar.MatchingPolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RepeatedTimePolicy, &type metadata for Calendar.RepeatedTimePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RepeatedTimePolicy, &type metadata for Calendar.RepeatedTimePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RepeatedTimePolicy, &type metadata for Calendar.RepeatedTimePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Month, &type metadata for Calendar.RecurrenceRule.Month);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Month, &type metadata for Calendar.RecurrenceRule.Month);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Weekday, &type metadata for Calendar.RecurrenceRule.Weekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.RecurrenceRule.Weekday, &type metadata for Calendar.RecurrenceRule.Weekday);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    v8 = a2;
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for Calendar.RecurrenceRule()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule()
{
  return &type metadata for Calendar.RecurrenceRule;
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Frequency(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181BF6364 + 4 * byte_1820F8215[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181BF6398 + 4 * byte_1820F8210[v4]))();
}

uint64_t sub_181BF6398(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BF63A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BF63A8);
  return result;
}

uint64_t sub_181BF63B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BF63BCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181BF63C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BF63C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Frequency()
{
  return &type metadata for Calendar.RecurrenceRule.Frequency;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.End()
{
  return &type metadata for Calendar.RecurrenceRule.End;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.Weekday(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1F && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 31);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 2) & 0x1E | (*(unsigned __int8 *)(a1 + 8) >> 7)) ^ 0x1F;
  if (v3 >= 0x1E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Weekday(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1E)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 31;
    if (a3 >= 0x1F)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x1F)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 8 * (((-a2 >> 1) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for Calendar.RecurrenceRule.Weekday(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 7;
}

uint64_t destructiveProjectEnumData for Calendar.RecurrenceRule.Weekday(uint64_t result)
{
  *(_BYTE *)(result + 8) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for Calendar.RecurrenceRule.Weekday(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 7 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Weekday()
{
  return &type metadata for Calendar.RecurrenceRule.Weekday;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.Month(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Month(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Month()
{
  return &type metadata for Calendar.RecurrenceRule.Month;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.DatesByRecurring, &type metadata for Calendar.DatesByRecurring);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.End(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.End(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Calendar.RecurrenceRule.End._End(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for Calendar.RecurrenceRule.End._End(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for Calendar.RecurrenceRule.End._End()
{
  return &unk_1E0F15030;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_181BF677C + 4 * byte_1820F821F[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_181BF67B0 + 4 * byte_1820F821A[v4]))();
}

uint64_t sub_181BF67B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BF67B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BF67C0);
  return result;
}

uint64_t sub_181BF67CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BF67D4);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_181BF67D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BF67E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.CodingKeys;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Month.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.Month.CodingKeys;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Month.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181BF686C + 4 * byte_1820F8229[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181BF68A0 + 4 * byte_1820F8224[v4]))();
}

uint64_t sub_181BF68A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BF68A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BF68B0);
  return result;
}

uint64_t sub_181BF68BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BF68C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181BF68C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BF68D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.End.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.End.CodingKeys;
}

unint64_t specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Calendar.RecurrenceRule.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF)
    return 15;
  else
    return v3;
}

uint64_t protocol witness for TopLevelEncoder.encode<A>(_:) in conformance JSONEncoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 272))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t protocol witness for TopLevelEncoder.encode<A>(_:) in conformance PropertyListEncoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 176))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t protocol witness for TopLevelDecoder.decode<A>(_:from:) in conformance JSONDecoder(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)v4 + 320))(a1, *a2, a2[1], a3, a4);
}

uint64_t protocol witness for TopLevelDecoder.decode<A>(_:from:) in conformance PropertyListDecoder(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)v4 + 152))(a1, *a2, a2[1], a3, a4);
}

void __swiftcall WeekendRange.init(onsetTime:ceaseTime:start:end:)(Foundation::WeekendRange *__return_ptr retstr, Swift::Double_optional onsetTime, Swift::Double_optional ceaseTime, Swift::Int start, Swift::Int end)
{
  Swift::Int v5;
  Swift::Int v6;

  retstr->onsetTime.value = *(Swift::Double *)&onsetTime.is_nil;
  retstr->onsetTime.is_nil = ceaseTime.is_nil;
  *(_QWORD *)&retstr->ceaseTime.value = start;
  retstr->ceaseTime.is_nil = end & 1;
  retstr->start = v5;
  retstr->end = v6;
}

uint64_t Calendar.debugDescription.getter()
{
  return Calendar.description.getter();
}

uint64_t Calendar.minimumDaysInFirstWeek.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(ObjectType, v1);
}

uint64_t Calendar.minimumDaysInFirstWeek.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = v1[1];
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(ObjectType, v3);
  if (result != a1)
  {
    v10[0] = 0;
    v10[1] = 0;
    v9[0] = 0;
    v9[1] = 0;
    v6 = (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 112))(v10, v9, 0, 1, a1, 0, ObjectType, v3);
    v8 = v7;
    result = swift_unknownObjectRelease();
    *v1 = v6;
    v1[1] = v8;
  }
  return result;
}

uint64_t Calendar.maximumRange(of:)(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t ObjectType;
  char v6;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))(&v6, ObjectType, v3);
}

uint64_t Calendar.range(of:in:for:)(char *a1, char *a2, double *a3)
{
  uint64_t v3;
  char v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t ObjectType;
  double v10;
  char v11;
  char v12;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(v3 + 8);
  v12 = *a1;
  v11 = v4;
  if (v5 > 1.59271755e13)
    v5 = 1.59271755e13;
  v7 = fmax(v5, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v10 = v7;
  return (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v6 + 144))(&v12, &v11, &v10, ObjectType, v6);
}

Swift::Int_optional __swiftcall Calendar.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  double *v3;
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t ObjectType;
  Swift::Int v10;
  char v11;
  Swift::Bool v12;
  double v13;
  char v14;
  char v15;
  Swift::Int_optional result;

  v5 = *(_BYTE *)in;
  v6 = *v3;
  v7 = *(_QWORD *)(v4 + 8);
  v15 = *(_BYTE *)of;
  v14 = v5;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  v8 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v13 = v8;
  v10 = (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v7 + 152))(&v15, &v14, &v13, ObjectType, v7);
  v12 = v11 & 1;
  result.value = v10;
  result.is_nil = v12;
  return result;
}

Swift::Bool __swiftcall Calendar.isDateInWeekend(_:)(Foundation::Date a1)
{
  double *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t ObjectType;
  double v8;

  v3 = *v1;
  v4 = *(_QWORD *)(v2 + 8);
  if (*v1 > 1.59271755e13)
    v3 = 1.59271755e13;
  v5 = fmax(v3, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v8 = v5;
  return (*(uint64_t (**)(double *, uint64_t, uint64_t))(v4 + 168))(&v8, ObjectType, v4) & 1;
}

Foundation::DateInterval_optional __swiftcall Calendar.nextWeekend(startingAfter:direction:)(Foundation::Date startingAfter, Foundation::Calendar::SearchDirection direction)
{
  unsigned __int8 *v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  double v9;
  unsigned __int8 v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t ObjectType;
  double v15;
  char v16;
  double v17;
  char v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  void (*v24)(__int128 *__return_ptr, double *, __int128 *, uint64_t, uint64_t);
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  __int128 v31;
  double v32;
  double v33;
  char v34;
  __int128 v35[18];
  double v36;
  double v37;
  char v38;
  double v39;
  uint64_t v40;
  __int16 v41;
  __int128 __dst[18];
  _QWORD __src[37];
  Foundation::DateInterval_optional result;

  v5 = v3;
  v6 = *(uint64_t *)direction;
  v7 = *v2;
  v9 = *v4;
  v8 = *((_QWORD *)v4 + 1);
  *(double *)__src = *v4;
  __src[1] = v8;
  v10 = Calendar.locale.getter(__dst);
  if (!*(_QWORD *)&__dst[0]
    || (v13 = *((_QWORD *)&__dst[0] + 1),
        ObjectType = swift_getObjectType(),
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 336))(__src, ObjectType, v13),
        v10 = swift_unknownObjectRelease(),
        (__src[6] & 1) != 0))
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
LABEL_4:
    *(_BYTE *)(v5 + 16) = 1;
    goto LABEL_34;
  }
  v15 = *(double *)__src;
  v16 = __src[1];
  v17 = *(double *)&__src[2];
  v18 = __src[3];
  v19 = __src[5];
  __dst[0] = 0uLL;
  v35[0] = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)v35, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    __src[4],
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  *(double *)v35 = v9;
  *((_QWORD *)&v35[0] + 1) = v8;
  v37 = *(double *)&v6;
  memcpy(__dst, __src, 0x11AuLL);
  LOBYTE(v36) = 0;
  v41 = v7;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v37, __dst, (char *)&v36, (char *)&v41 + 1, (char *)&v41, (uint64_t)&v39);
  if ((v40 & 1) != 0)
  {
    v10 = outlined release of DateComponents((uint64_t)__src);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 16) = 1;
    goto LABEL_34;
  }
  v20 = v39;
  if ((v16 & 1) == 0)
    v20 = v15 + v39;
  LOBYTE(v39) = 3;
  v21 = 1.59271755e13;
  if (v20 <= 1.59271755e13)
    v21 = v20;
  v22 = fmax(v21, -2.11845067e11);
  v23 = swift_getObjectType();
  *(double *)v35 = v22;
  v24 = *(void (**)(__int128 *__return_ptr, double *, __int128 *, uint64_t, uint64_t))(v8 + 160);
  v24(__dst, &v39, v35, v23, v8);
  if ((__dst[1] & 1) != 0)
    v25 = v20 + -1.0;
  else
    v25 = *(double *)__dst;
  v35[0] = 0uLL;
  v39 = 0.0;
  v40 = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v35, (uint64_t *)&v39, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    v19,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  v39 = v9;
  v40 = v8;
  v36 = v25;
  memcpy(v35, __dst, 0x11AuLL);
  v41 = 0;
  v34 = 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v36, v35, (char *)&v41 + 1, (char *)&v41, &v34, (uint64_t)&v37);
  if ((v38 & 1) != 0)
  {
    outlined release of DateComponents((uint64_t)__dst);
    v10 = outlined release of DateComponents((uint64_t)__src);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 16) = 1;
    goto LABEL_34;
  }
  v26 = v37;
  if ((v18 & 1) != 0 || v17 <= 0.0)
  {
    LOBYTE(v37) = 3;
    if (v26 <= 1.59271755e13)
      v28 = v26;
    else
      v28 = 1.59271755e13;
    v29 = fmax(v28, -2.11845067e11);
    v30 = swift_getObjectType();
    v39 = v29;
    v24(v35, &v37, (__int128 *)&v39, v30, v8);
    v31 = v35[0];
    if ((v35[1] & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)__dst);
      v10 = outlined release of DateComponents((uint64_t)__src);
      *(_OWORD *)v5 = v31;
      goto LABEL_4;
    }
    v32 = *(double *)v35 + *((double *)v35 + 1);
    LOBYTE(v37) = 3;
    if (*(double *)v35 + *((double *)v35 + 1) <= 1.59271755e13)
      v33 = *(double *)v35 + *((double *)v35 + 1);
    else
      v33 = 1.59271755e13;
    v39 = fmax(v33, -2.11845067e11);
    v24(v35, &v37, (__int128 *)&v39, v30, v8);
    outlined release of DateComponents((uint64_t)__dst);
    v10 = outlined release of DateComponents((uint64_t)__src);
    if ((v35[1] & 1) != 0)
      v27 = v32 + -1.0;
    else
      v27 = *(double *)v35;
  }
  else
  {
    outlined release of DateComponents((uint64_t)__dst);
    v10 = outlined release of DateComponents((uint64_t)__src);
    v27 = v17 + v26;
  }
  if (v27 < v25)
  {
    __break(1u);
    JUMPOUT(0x181BF7510);
  }
  v11 = v27 - v25;
  *(double *)v5 = v25;
  *(double *)(v5 + 8) = v11;
  *(_BYTE *)(v5 + 16) = 0;
LABEL_34:
  result.value.duration = v12;
  result.value.start._time = v11;
  result.is_nil = v10;
  return result;
}

Swift::Int Calendar.date(_:matchesComponents:)(double *a1, const void *a2)
{
  uint64_t *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  Swift::UInt v12;
  Swift::Int result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  char v24;
  uint64_t ObjectType;
  void (*v26)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  __int128 v32[18];
  double v33[36];
  _OWORD __src[18];
  _OWORD v35[18];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int16 v69;
  _OWORD __dst[19];

  v3 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  v4 = *v2;
  v5 = v2[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v6 = static _SetStorage.allocate(capacity:)();
  v7 = 0;
  v8 = v6 + 56;
  do
  {
    v12 = outlined read-only object #0 of Calendar.date(_:matchesComponents:)[v7 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v12);
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    v17 = *(_QWORD *)(v8 + 8 * (v15 >> 6));
    v18 = 1 << v15;
    v19 = *(_QWORD *)(v6 + 48);
    if (((1 << v15) & v17) != 0)
    {
      if (*(unsigned __int8 *)(v19 + v15) == (_DWORD)v12)
        goto LABEL_4;
      v20 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v20;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)(v8 + 8 * (v15 >> 6));
        v18 = 1 << v15;
        if ((v17 & (1 << v15)) == 0)
          break;
        if (*(unsigned __int8 *)(v19 + v15) == (_DWORD)v12)
          goto LABEL_4;
      }
    }
    *(_QWORD *)(v8 + 8 * v16) = v18 | v17;
    *(_BYTE *)(v19 + v15) = v12;
    v9 = *(_QWORD *)(v6 + 16);
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_27;
    }
    *(_QWORD *)(v6 + 16) = v11;
LABEL_4:
    ++v7;
  }
  while (v7 != 15);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized _NativeSet.filter(_:)(v6);
  outlined release of DateComponents((uint64_t)__dst);
  *(_QWORD *)&v35[0] = v4;
  *((_QWORD *)&v35[0] + 1) = v5;
  v21 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v21, __src);
  v22 = 1.59271755e13;
  if (v3 <= 1.59271755e13)
    v22 = v3;
  v23 = fmax(v22, -2.11845067e11);
  v33[0] = v23;
  Calendar._dateComponents(_:from:)((uint64_t *)__src, v33, &v36);
  swift_release();
  v24 = BYTE9(__dst[17]);
  if (BYTE9(__dst[17]) == 2)
  {
    result = outlined retain of DateComponents((uint64_t)__dst);
  }
  else
  {
    *(_QWORD *)&__src[0] = 4;
    ObjectType = swift_getObjectType();
    v33[0] = v23;
    v26 = *(void (**)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t))(v5 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v26(v35, __src, v33, ObjectType, v5);
    result = outlined release of DateComponents((uint64_t)v35);
    HIBYTE(v69) = BYTE9(v35[17]);
  }
  v27 = *(_QWORD *)&__dst[10];
  v28 = v54;
  v29 = v55 ^ 1 | BYTE8(__dst[10]);
  if ((v55 & 1) != 0 || (BYTE8(__dst[10]) & 1) != 0)
    goto LABEL_24;
  v30 = v54 - *(_QWORD *)&__dst[10];
  if (!__OFSUB__(v54, *(_QWORD *)&__dst[10]))
  {
    if (v30 < 0)
      v30 = *(_QWORD *)&__dst[10] - v54;
    if ((unint64_t)v30 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)__dst);
      *(_QWORD *)&v35[2] = v38;
      BYTE8(v35[2]) = v39;
      *(_QWORD *)&v35[3] = v40;
      BYTE8(v35[3]) = v41;
      *(_QWORD *)&v35[4] = v42;
      BYTE8(v35[4]) = v43;
      *(_QWORD *)&v35[5] = v44;
      BYTE8(v35[5]) = v45;
      *(_QWORD *)&v35[6] = v46;
      BYTE8(v35[6]) = v47;
      *(_QWORD *)&v35[7] = v48;
      BYTE8(v35[7]) = v49;
      *(_QWORD *)&v35[8] = v50;
      BYTE8(v35[8]) = v51;
      *(_QWORD *)&v35[9] = v52;
      BYTE8(v35[9]) = v53;
      *(_QWORD *)&v35[10] = v28;
      *(_QWORD *)&v35[11] = v56;
      BYTE8(v35[11]) = v57;
      *(_QWORD *)&v35[12] = v58;
      BYTE8(v35[12]) = v59;
      *(_QWORD *)&v35[13] = v60;
      BYTE8(v35[13]) = v61;
      *(_QWORD *)&v35[14] = v62;
      BYTE8(v35[14]) = v63;
      *(_QWORD *)&v35[15] = v64;
      BYTE8(v35[15]) = v65;
      BYTE8(v35[16]) = v67;
      WORD4(v35[17]) = v69;
      *(_QWORD *)&v35[16] = v66;
      *(_QWORD *)&v35[17] = v68;
      v35[0] = v36;
      v35[1] = v37;
      BYTE8(v35[10]) = 0;
      outlined release of DateComponents((uint64_t)v35);
      return 0;
    }
    v28 = 0;
    v27 = 0;
    v29 = 0;
LABEL_24:
    *(_QWORD *)&__src[2] = *(_QWORD *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(_QWORD *)&__src[3] = *(_QWORD *)&__dst[3];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(_QWORD *)&__src[4] = *(_QWORD *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(_QWORD *)&__src[5] = *(_QWORD *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(_QWORD *)&__src[6] = *(_QWORD *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(_QWORD *)&__src[7] = *(_QWORD *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(_QWORD *)&__src[8] = *(_QWORD *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(_QWORD *)&__src[9] = *(_QWORD *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(_QWORD *)&__src[10] = v27;
    BYTE8(__src[10]) = v29;
    *(_QWORD *)&__src[11] = *(_QWORD *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(_QWORD *)&__src[12] = *(_QWORD *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(_QWORD *)&__src[13] = *(_QWORD *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(_QWORD *)&__src[14] = *(_QWORD *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(_QWORD *)&__src[15] = *(_QWORD *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    BYTE8(__src[17]) = BYTE8(__dst[17]);
    *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[16];
    *(_QWORD *)&__src[17] = *(_QWORD *)&__dst[17];
    BYTE9(__src[17]) = v24;
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    memcpy(v33, __src, 0x11AuLL);
    *(_QWORD *)&v35[2] = v38;
    BYTE8(v35[2]) = v39;
    *(_QWORD *)&v35[3] = v40;
    BYTE8(v35[3]) = v41;
    *(_QWORD *)&v35[4] = v42;
    BYTE8(v35[4]) = v43;
    *(_QWORD *)&v35[5] = v44;
    BYTE8(v35[5]) = v45;
    *(_QWORD *)&v35[6] = v46;
    BYTE8(v35[6]) = v47;
    *(_QWORD *)&v35[7] = v48;
    BYTE8(v35[7]) = v49;
    *(_QWORD *)&v35[8] = v50;
    BYTE8(v35[8]) = v51;
    *(_QWORD *)&v35[9] = v52;
    BYTE8(v35[9]) = v53;
    *(_QWORD *)&v35[10] = v28;
    BYTE8(v35[10]) = v55;
    *(_QWORD *)&v35[11] = v56;
    BYTE8(v35[11]) = v57;
    *(_QWORD *)&v35[12] = v58;
    BYTE8(v35[12]) = v59;
    *(_QWORD *)&v35[13] = v60;
    BYTE8(v35[13]) = v61;
    *(_QWORD *)&v35[14] = v62;
    BYTE8(v35[14]) = v63;
    *(_QWORD *)&v35[15] = v64;
    BYTE8(v35[15]) = v65;
    BYTE8(v35[16]) = v67;
    WORD4(v35[17]) = v69;
    *(_QWORD *)&v35[16] = v66;
    *(_QWORD *)&v35[17] = v68;
    v35[0] = v36;
    v35[1] = v37;
    memcpy(v32, v35, 0x11AuLL);
    v31 = specialized static DateComponents.== infix(_:_:)((uint64_t)v33, v32);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v35);
    return v31;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *Calendar._dateComponents(_:from:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t ObjectType;
  uint64_t v12[2];
  double v13;
  _QWORD __src[36];

  v5 = *a1;
  v6 = *a2;
  v8 = *v3;
  v7 = v3[1];
  v12[0] = *a1;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  v9 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v13 = v9;
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v7 + 192))(__src, v12, &v13, ObjectType, v7);
  if ((v5 & 0x4000) != 0)
  {
    __src[0] = v8;
    __src[1] = v7;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (__src[2])
    {
      v12[0] = __src[2];
      v12[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(v12);
    }
  }
  return memcpy(a3, __src, 0x11AuLL);
}

Swift::Bool __swiftcall Calendar.nextWeekend(startingAfter:start:interval:direction:)(Foundation::Date startingAfter, Foundation::Date *start, Swift::Double *interval, Foundation::Calendar::SearchDirection direction)
{
  __int128 *v4;
  _QWORD *v5;
  Foundation::Date v7;
  char v8;
  uint64_t v9;
  Swift::Double time;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = (_QWORD *)direction;
  v7._time = start->_time;
  v12 = *v4;
  time = v7._time;
  Calendar.nextWeekend(startingAfter:direction:)(v7, (Foundation::Calendar::SearchDirection)&time);
  v8 = v15;
  if ((v15 & 1) == 0)
  {
    v9 = v14;
    *(_QWORD *)interval = v13;
    *v5 = v9;
  }
  return v8 ^ 1;
}

uint64_t Calendar.ComponentSet.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (char *)(a1 + 32);
    do
    {
      v6 = *v5++;
      v4 |= qword_1820FA500[v6];
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t Calendar.ComponentSet.count.getter()
{
  int8x8_t *v0;
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8(*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t Calendar.Component.debugDescription.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BF7D9C + 4 * byte_1820F8CD4[*v0]))(6386277, 0xE300000000000000);
}

uint64_t sub_181BF7D9C()
{
  return 1918985593;
}

uint64_t sub_181BF7DAC()
{
  return 0x68746E6F6DLL;
}

uint64_t sub_181BF7DC0()
{
  return 7954788;
}

uint64_t sub_181BF7DCC()
{
  return 1920298856;
}

uint64_t sub_181BF7DDC()
{
  return 0x6574756E696DLL;
}

uint64_t sub_181BF7DF0()
{
  return 0x646E6F636573;
}

uint64_t sub_181BF7E04()
{
  return 0x7961646B656577;
}

uint64_t sub_181BF7E1C()
{
  return 0x4F7961646B656577;
}

uint64_t sub_181BF7E40()
{
  return 0x72657472617571;
}

uint64_t sub_181BF7E58()
{
  return 0x6F4D664F6B656577;
}

uint64_t sub_181BF7F10()
{
  return 0x616559664F796164;
}

BOOL static Calendar.SearchDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Calendar.ComponentSet.highestSetUnit.getter(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;

  v2 = *v1;
  if ((*v1 & 1) != 0)
  {
    *a1 = 0;
  }
  else if ((v2 & 2) != 0)
  {
    *a1 = 1;
  }
  else if ((v2 & 0x40000) != 0)
  {
    *a1 = 17;
  }
  else if ((v2 & 0x200) != 0)
  {
    *a1 = 9;
  }
  else if ((v2 & 4) != 0)
  {
    *a1 = 2;
  }
  else if ((v2 & 8) != 0)
  {
    *a1 = 3;
  }
  else if ((v2 & 0x10) != 0)
  {
    *a1 = 4;
  }
  else if ((v2 & 0x20) != 0)
  {
    *a1 = 5;
  }
  else if ((v2 & 0x40) != 0)
  {
    *a1 = 6;
  }
  else if ((v2 & 0x80) != 0)
  {
    *a1 = 7;
  }
  else if ((v2 & 0x100) != 0)
  {
    *a1 = 8;
  }
  else if ((v2 & 0x400) != 0)
  {
    *a1 = 10;
  }
  else if ((v2 & 0x800) != 0)
  {
    *a1 = 11;
  }
  else if ((v2 & 0x1000) != 0)
  {
    *a1 = 12;
  }
  else if ((v2 & 0x2000) != 0)
  {
    *a1 = 13;
  }
  else
  {
    if ((v2 & 0x10000) != 0)
      v3 = 16;
    else
      v3 = 18;
    *a1 = v3;
  }
}

Foundation::Date_optional __swiftcall Calendar.date(bySetting:value:of:)(Foundation::Calendar::Component bySetting, Swift::Int value, Foundation::Date of)
{
  double *v3;
  uint64_t *v4;
  Swift::UInt v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double __dst[36];
  _BYTE v25[40];
  uint64_t v26[4];
  Foundation::Date_optional result;

  v5 = *(unsigned __int8 *)bySetting;
  v6 = *v3;
  v7 = *v4;
  v8 = v4[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  *(_BYTE *)(swift_allocObject() + 32) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v9 = static _SetStorage.allocate(capacity:)();
  v10 = v9 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  v14 = v13 >> 6;
  v15 = *(_QWORD *)(v9 + 56 + 8 * (v13 >> 6));
  v16 = 1 << v13;
  v17 = *(_QWORD *)(v9 + 48);
  if (((1 << v13) & v15) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v17 + v13) == (_DWORD)v5)
    goto LABEL_12;
  v18 = ~v12;
  v13 = (v13 + 1) & v18;
  v14 = v13 >> 6;
  v15 = *(_QWORD *)(v10 + 8 * (v13 >> 6));
  v16 = 1 << v13;
  if ((v15 & (1 << v13)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v17 + v13) == (_DWORD)v5)
    goto LABEL_12;
  v13 = (v13 + 1) & v18;
  v14 = v13 >> 6;
  v15 = *(_QWORD *)(v10 + 8 * (v13 >> 6));
  v16 = 1 << v13;
  if ((v15 & (1 << v13)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v17 + v13) == (_DWORD)v5)
    goto LABEL_12;
  v13 = (v13 + 1) & v18;
  v14 = v13 >> 6;
  v15 = *(_QWORD *)(v10 + 8 * (v13 >> 6));
  v16 = 1 << v13;
  if ((v15 & (1 << v13)) != 0)
  {
    while (*(unsigned __int8 *)(v17 + v13) != (_DWORD)v5)
    {
      v13 = (v13 + 1) & v18;
      v14 = v13 >> 6;
      v15 = *(_QWORD *)(v10 + 8 * (v13 >> 6));
      v16 = 1 << v13;
      if ((v15 & (1 << v13)) == 0)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    *(_QWORD *)(v10 + 8 * v14) = v16 | v15;
    *(_BYTE *)(v17 + v13) = v5;
    v19 = *(_QWORD *)(v9 + 16);
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
      JUMPOUT(0x181BF8530);
    }
    *(_QWORD *)(v9 + 16) = v21;
  }
LABEL_12:
  swift_setDeallocating();
  swift_deallocClassInstance();
  v26[1] = v7;
  v26[2] = v8;
  v22 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v22, v26);
  v23 = 1.59271755e13;
  if (v6 <= 1.59271755e13)
    v23 = v6;
  __dst[0] = fmax(v23, -2.11845067e11);
  Calendar._dateComponents(_:from:)(v26, __dst, v25);
  swift_release();
  outlined release of DateComponents((uint64_t)v25);
  __asm { BR              X9 }
  return result;
}

uint64_t Calendar.dates(byMatching:startingAt:in:matchingPolicy:repeatedTimePolicy:direction:)@<X0>(void *__src@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  _OWORD *v7;
  uint64_t v15;
  _BYTE __dst[288];
  _BYTE __srca[289];
  char v19;

  memcpy(__dst, __src, 0x11AuLL);
  v15 = *a2;
  LOBYTE(a4) = *a4;
  LOBYTE(a5) = *a5;
  LOBYTE(a6) = *a6;
  v19 = *(_BYTE *)(a3 + 16);
  memcpy(&__srca[7], __src, 0x11AuLL);
  *(_OWORD *)a7 = *v7;
  *(_QWORD *)(a7 + 16) = v15;
  *(_OWORD *)(a7 + 24) = *(_OWORD *)a3;
  *(_BYTE *)(a7 + 40) = v19;
  memcpy((void *)(a7 + 41), __srca, 0x121uLL);
  *(_BYTE *)(a7 + 330) = (_BYTE)a4;
  *(_BYTE *)(a7 + 331) = (_BYTE)a5;
  *(_BYTE *)(a7 + 332) = (_BYTE)a6;
  swift_unknownObjectRetain();
  return outlined retain of DateComponents((uint64_t)__dst);
}

uint64_t static Calendar.Identifier.cldrKeywordKey.getter()
{
  return 24931;
}

void static Calendar.Identifier.legacyKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7261646E656C6163;
  a1[1] = 0xE800000000000000;
}

void Calendar.Identifier.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t Calendar.Identifier.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BF86E8 + 4 * byte_1820F8CF6[a1]))(0x6169726F67657267, 0xE90000000000006ELL);
}

uint64_t sub_181BF86E8()
{
  return 0x7473696864647562;
}

uint64_t sub_181BF8700()
{
  return 0x6573656E696863;
}

uint64_t sub_181BF8718()
{
  return 0x636974706F63;
}

unint64_t sub_181BF872C()
{
  return 0xD000000000000013;
}

uint64_t sub_181BF8764()
{
  return 0x776572626568;
}

uint64_t sub_181BF8778()
{
  return 0x313036386F7369;
}

uint64_t sub_181BF8790()
{
  return 0x6E6169646E69;
}

uint64_t sub_181BF87A4()
{
  return 0x63696D616C7369;
}

uint64_t sub_181BF87BC()
{
  return 0x4363696D616C7369;
}

uint64_t sub_181BF87DC()
{
  return 0x6573656E6170616ALL;
}

uint64_t sub_181BF87F4()
{
  return 0x6E616973726570;
}

uint64_t sub_181BF880C()
{
  return 0x63696C6275706572;
}

uint64_t sub_181BF8830()
{
  return 0x5463696D616C7369;
}

unint64_t sub_181BF8854()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.BuddhistCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.BuddhistCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.ChineseCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.ChineseCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.Identifier.CodingKeys()
{
  unsigned __int8 *v0;

  return Calendar.Identifier.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.Identifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Calendar.Identifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Calendar.Identifier.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.CopticCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.CopticCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.GregorianCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.GregorianCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.HebrewCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.HebrewCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IndianCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IndianCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicCivilCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicCivilCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicTabularCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicTabularCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.Iso8601CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.Iso8601CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.JapaneseCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.JapaneseCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.PersianCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.PersianCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.ComponentSet.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Foundation::Calendar::ComponentSet __swiftcall Calendar.ComponentSet.init(rawValue:)(Foundation::Calendar::ComponentSet rawValue)
{
  Foundation::Calendar::ComponentSet *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t Calendar.ComponentSet.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v3 = 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      goto LABEL_25;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_25;
      v13 = *(_QWORD *)(v5 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_25;
        v13 = *(_QWORD *)(v5 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v9)
            goto LABEL_25;
          v13 = *(_QWORD *)(v5 + 8 * v3);
          if (!v13)
          {
            v3 = v12 + 4;
            if (v12 + 4 >= v9)
              goto LABEL_25;
            v13 = *(_QWORD *)(v5 + 8 * v3);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    v4 |= qword_1820FA500[*(char *)(*(_QWORD *)(result + 48) + v11)];
  }
  v14 = v12 + 5;
  if (v14 >= v9)
  {
LABEL_25:
    result = swift_release();
    *a2 = v4;
    return result;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v9)
      goto LABEL_25;
    v13 = *(_QWORD *)(v5 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

Foundation::Calendar::ComponentSet __swiftcall Calendar.ComponentSet.init(single:)(Foundation::Calendar::Component single)
{
  _QWORD *v1;
  Foundation::Calendar::ComponentSet result;

  *v1 = qword_1820FA500[*(char *)single];
  LOBYTE(result.rawValue) = single;
  return result;
}

void static Calendar.ComponentSet.era.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Calendar.ComponentSet.year.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Calendar.ComponentSet.month.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static Calendar.ComponentSet.day.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static Calendar.ComponentSet.hour.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static Calendar.ComponentSet.minute.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static Calendar.ComponentSet.second.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static Calendar.ComponentSet.weekday.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static Calendar.ComponentSet.weekdayOrdinal.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static Calendar.ComponentSet.quarter.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static Calendar.ComponentSet.weekOfMonth.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static Calendar.ComponentSet.weekOfYear.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static Calendar.ComponentSet.yearForWeekOfYear.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static Calendar.ComponentSet.nanosecond.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static Calendar.ComponentSet.calendar.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static Calendar.ComponentSet.timeZone.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000;
}

void static Calendar.ComponentSet.isLeapMonth.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000;
}

void static Calendar.ComponentSet.dayOfYear.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x40000;
}

uint64_t Calendar.ComponentSet.set.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v3;
  uint64_t v4;

  v1 = *v0;
  v4 = MEMORY[0x1E0DEE9E8];
  if ((v1 & 1) != 0)
  {
    specialized Set._Variant.insert(_:)(&v3, 0);
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }
  specialized Set._Variant.insert(_:)(&v3, 1uLL);
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  specialized Set._Variant.insert(_:)(&v3, 2uLL);
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  specialized Set._Variant.insert(_:)(&v3, 3uLL);
  if ((v1 & 0x10) == 0)
  {
LABEL_6:
    if ((v1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  specialized Set._Variant.insert(_:)(&v3, 4uLL);
  if ((v1 & 0x20) == 0)
  {
LABEL_7:
    if ((v1 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  specialized Set._Variant.insert(_:)(&v3, 5uLL);
  if ((v1 & 0x40) == 0)
  {
LABEL_8:
    if ((v1 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  specialized Set._Variant.insert(_:)(&v3, 6uLL);
  if ((v1 & 0x80) == 0)
  {
LABEL_9:
    if ((v1 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  specialized Set._Variant.insert(_:)(&v3, 7uLL);
  if ((v1 & 0x100) == 0)
  {
LABEL_10:
    if ((v1 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  specialized Set._Variant.insert(_:)(&v3, 8uLL);
  if ((v1 & 0x200) == 0)
  {
LABEL_11:
    if ((v1 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  specialized Set._Variant.insert(_:)(&v3, 9uLL);
  if ((v1 & 0x400) == 0)
  {
LABEL_12:
    if ((v1 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  specialized Set._Variant.insert(_:)(&v3, 0xAuLL);
  if ((v1 & 0x800) == 0)
  {
LABEL_13:
    if ((v1 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  if ((v1 & 0x1000) == 0)
  {
LABEL_14:
    if ((v1 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  specialized Set._Variant.insert(_:)(&v3, 0xCuLL);
  if ((v1 & 0x2000) == 0)
  {
LABEL_15:
    if ((v1 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  specialized Set._Variant.insert(_:)(&v3, 0xDuLL);
  if ((v1 & 0x4000) == 0)
  {
LABEL_16:
    if ((v1 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  specialized Set._Variant.insert(_:)(&v3, 0xEuLL);
  if ((v1 & 0x8000) == 0)
  {
LABEL_17:
    if ((v1 & 0x10000) == 0)
      goto LABEL_18;
LABEL_37:
    specialized Set._Variant.insert(_:)(&v3, 0x10uLL);
    if ((v1 & 0x40000) == 0)
      return v4;
    goto LABEL_19;
  }
LABEL_36:
  specialized Set._Variant.insert(_:)(&v3, 0xFuLL);
  if ((v1 & 0x10000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v1 & 0x40000) != 0)
LABEL_19:
    specialized Set._Variant.insert(_:)(&v3, 0x11uLL);
  return v4;
}

_QWORD *(*Calendar.locale.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[2] = v1;
  Calendar.locale.getter(a1);
  return Calendar.locale.modify;
}

_QWORD *Calendar.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  if ((a2 & 1) == 0)
    return Calendar.locale.setter(v4);
  swift_unknownObjectRetain();
  Calendar.locale.setter(v4);
  return (_QWORD *)swift_unknownObjectRelease();
}

double key path getter for Calendar.timeZone : Calendar@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(__int128 *__return_ptr, uint64_t, uint64_t);
  double result;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v5 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v5(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t (*Calendar.timeZone.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 48))(ObjectType, v2);
  return Calendar.timeZone.modify;
}

uint64_t Calendar.timeZone.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  if ((a2 & 1) == 0)
    return Calendar.timeZone.setter(v4);
  swift_unknownObjectRetain();
  Calendar.timeZone.setter(v4);
  return swift_unknownObjectRelease();
}

uint64_t key path getter for Calendar.firstWeekday : Calendar@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  v6 = v5(ObjectType, v3);
  result = swift_unknownObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t (*Calendar.firstWeekday.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  a1[1] = v1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  *a1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
  return Calendar.firstWeekday.modify;
}

uint64_t Calendar.firstWeekday.modify(uint64_t *a1)
{
  return Calendar.firstWeekday.setter(*a1);
}

uint64_t key path getter for Calendar.minimumDaysInFirstWeek : Calendar@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 72);
  swift_unknownObjectRetain();
  v6 = v5(ObjectType, v3);
  result = swift_unknownObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t (*Calendar.minimumDaysInFirstWeek.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  a1[1] = v1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  *a1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(ObjectType, v3);
  return Calendar.minimumDaysInFirstWeek.modify;
}

uint64_t Calendar.minimumDaysInFirstWeek.modify(uint64_t *a1)
{
  return Calendar.minimumDaysInFirstWeek.setter(*a1);
}

Swift::Bool __swiftcall Calendar.dateInterval(of:start:interval:for:)(Foundation::Calendar::Component of, Foundation::Date *start, Swift::Double *interval, Foundation::Date a4)
{
  double *v4;
  uint64_t v5;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t ObjectType;
  char v12;
  uint64_t v13;
  double v15;
  char v16;
  _QWORD v17[2];
  char v18;

  v8 = *v4;
  v9 = *(_QWORD *)(v5 + 8);
  if (*v4 > 1.59271755e13)
    v8 = 1.59271755e13;
  v16 = *(_BYTE *)of;
  v10 = fmax(v8, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v15 = v10;
  (*(void (**)(_QWORD *__return_ptr, char *, double *, uint64_t, uint64_t))(v9 + 160))(v17, &v16, &v15, ObjectType, v9);
  v12 = v18;
  if ((v18 & 1) == 0)
  {
    v13 = v17[1];
    *(_QWORD *)&start->_time = v17[0];
    *(_QWORD *)interval = v13;
  }
  return v12 ^ 1;
}

uint64_t Calendar.dates(byAdding:value:startingAt:in:wrappingComponents:)@<X0>(_BYTE *a1@<X0>, __int128 a2@<X2:X1>, uint64_t *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  __int128 *v5;
  double v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  double v13;
  double v14;
  __int128 v15;
  _BYTE v16[296];
  char v17;
  _BYTE v18[288];
  uint64_t __src[36];

  v8 = **((double **)&a2 + 1);
  v9 = *a3;
  v10 = a3[1];
  v11 = *((_BYTE *)a3 + 16);
  v15 = *v5;
  LOBYTE(__src[0]) = *a1;
  DateComponents.init(component:value:)((Swift::Int_optional)a2, (unsigned __int8 *)__src, (uint64_t)v16);
  outlined init with take of DateComponents?((uint64_t)v16, (uint64_t)v18);
  outlined init with take of DateComponents?((uint64_t)v18, (uint64_t)__src);
  result = _s10Foundation13URLComponentsV01_B0VSgWOg(__src);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v13 = 1.59271755e13;
    if (v8 <= 1.59271755e13)
      v13 = v8;
    v14 = fmax(v13, -2.11845067e11);
    v17 = v11;
    memcpy(&v16[7], __src, 0x11AuLL);
    *(_OWORD *)a5 = v15;
    *(double *)(a5 + 16) = v14;
    *(_QWORD *)(a5 + 24) = v9;
    *(_QWORD *)(a5 + 32) = v10;
    *(_BYTE *)(a5 + 40) = v17;
    memcpy((void *)(a5 + 41), v16, 0x121uLL);
    *(_BYTE *)(a5 + 330) = a4 & 1;
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t Calendar.dates(byAdding:startingAt:in:wrappingComponents:)@<X0>(void *__src@<X0>, double *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _OWORD *v5;
  double v11;
  double v12;
  _BYTE __srca[289];
  char v15;
  _BYTE __dst[296];

  memcpy(__dst, __src, 0x11AuLL);
  v11 = *a2;
  if (*a2 > 1.59271755e13)
    v11 = 1.59271755e13;
  v12 = fmax(v11, -2.11845067e11);
  v15 = *(_BYTE *)(a3 + 16);
  memcpy(&__srca[7], __src, 0x11AuLL);
  *(_OWORD *)a5 = *v5;
  *(double *)(a5 + 16) = v12;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)a3;
  *(_BYTE *)(a5 + 40) = v15;
  memcpy((void *)(a5 + 41), __srca, 0x121uLL);
  *(_BYTE *)(a5 + 330) = a4;
  swift_unknownObjectRetain();
  return outlined retain of DateComponents((uint64_t)__dst);
}

Swift::Bool __swiftcall Calendar.dateIntervalOfWeekend(containing:start:interval:)(Foundation::Date containing, Foundation::Date *start, Swift::Double *interval)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = v3;
  Calendar.dateIntervalOfWeekend(containing:)(*(Foundation::Date *)&start->_time);
  if ((v9 & 1) == 0)
  {
    *(_QWORD *)interval = v7;
    *v4 = v8;
  }
  return v9 ^ 1;
}

Foundation::DateInterval_optional __swiftcall Calendar.dateIntervalOfWeekend(containing:)(Foundation::Date containing)
{
  double *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  char v16;
  Foundation::DateInterval_optional result;

  v4 = v2;
  v5 = *v1;
  v6 = *v3;
  v7 = v3[1];
  v12 = *v3;
  v13 = v7;
  v11 = v5;
  result = Calendar.nextWeekend(startingAfter:direction:)(containing, (Foundation::Calendar::SearchDirection)&v11);
  if ((v16 & 1) != 0)
  {
    v8 = v15;
    *(double *)v4 = v14;
    *(double *)(v4 + 8) = v8;
LABEL_10:
    *(_BYTE *)(v4 + 16) = 1;
    return result;
  }
  v12 = v6;
  v13 = v7;
  v11 = v14;
  result = Calendar.nextWeekend(startingAfter:direction:)(result.value.start, (Foundation::Calendar::SearchDirection)&v11);
  v9 = v15;
  if ((v16 & 1) != 0)
  {
    *(double *)v4 = v14;
    *(double *)(v4 + 8) = v9;
    *(_BYTE *)(v4 + 16) = 1;
    return result;
  }
  result.value.start._time = v14;
  result.value.duration = v14 + v15;
  if (v5 < v14 || v5 >= result.value.duration)
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    goto LABEL_10;
  }
  *(double *)v4 = v14;
  *(double *)(v4 + 8) = v9;
  *(_BYTE *)(v4 + 16) = 0;
  return result;
}

void Calendar.SearchDirection.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t Calendar.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 120))(a1, ObjectType, v3);
}

Swift::Int Calendar.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 120))(a1, ObjectType, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t Calendar.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  Swift::String v6;
  Swift::String v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  Swift::String v15;
  Swift::String v16;
  uint64_t (*v17)(uint64_t, _QWORD *);
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t (*v21)(uint64_t, _QWORD *);
  uint64_t v22;
  Swift::String v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;

  v1 = *v0;
  v2 = (_QWORD *)v0[1];
  v3 = (void *)0xE000000000000000;
  v27 = 0;
  v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(72);
  ObjectType = swift_getObjectType();
  v5 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))v2[3];
  swift_unknownObjectRetain();
  v5(&v25, ObjectType, v2);
  swift_unknownObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 10272;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v25 = v1;
  v26 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x656C61636F6C2029;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  Calendar.locale.getter(&v25);
  if (v25)
  {
    v8 = v26;
    v9 = swift_getObjectType();
    v10 = ((uint64_t (*)(uint64_t, _QWORD *))v8[8])(v9, v8);
    v3 = v11;
    swift_unknownObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  v12._countAndFlagsBits = v10;
  v12._object = v3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6F7A20656D697420;
  v13._object = (void *)0xEC000000203A656ELL;
  String.append(_:)(v13);
  v14 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))v2[6];
  swift_unknownObjectRetain();
  v14(&v25, ObjectType, v2);
  swift_unknownObjectRelease();
  swift_getObjectType();
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x6557747372696620;
  v16._object = (void *)0xEF203A7961646B65;
  String.append(_:)(v16);
  v17 = (uint64_t (*)(uint64_t, _QWORD *))v2[7];
  swift_unknownObjectRetain();
  v18 = v17(ObjectType, v2);
  swift_unknownObjectRelease();
  v25 = v18;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x8000000182308A00;
  v20._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v20);
  v21 = (uint64_t (*)(uint64_t, _QWORD *))v2[9];
  swift_unknownObjectRetain();
  v22 = v21(ObjectType, v2);
  swift_unknownObjectRelease();
  v25 = v22;
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t Calendar.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, _QWORD *);
  void (*v13)(uint64_t, _QWORD *);
  uint64_t (*v14)(uint64_t, _QWORD *);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v25 = a1;
  v24 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = (_QWORD *)v1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_182065B80;
  *(_OWORD *)(v10 + 32) = xmmword_182069A60;
  *(_QWORD *)(v10 + 72) = &type metadata for Calendar.Identifier;
  ObjectType = swift_getObjectType();
  v12 = (void (*)(uint64_t, _QWORD *))v9[3];
  swift_unknownObjectRetain();
  v12(ObjectType, v9);
  swift_unknownObjectRelease();
  *(_OWORD *)(v10 + 80) = xmmword_182065140;
  *(_QWORD *)(v10 + 120) = ObjectType;
  *(_QWORD *)(v10 + 96) = v8;
  *(_OWORD *)(v10 + 128) = xmmword_182069A70;
  v27 = v8;
  v28 = v9;
  *(_QWORD *)(v10 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  swift_unknownObjectRetain();
  Calendar.locale.getter((_QWORD *)(v10 + 144));
  *(_OWORD *)(v10 + 176) = xmmword_182065150;
  *(_QWORD *)(v10 + 216) = &type metadata for TimeZone;
  v13 = (void (*)(uint64_t, _QWORD *))v9[6];
  swift_unknownObjectRetain();
  v13(ObjectType, v9);
  swift_unknownObjectRelease();
  *(_OWORD *)(v10 + 224) = xmmword_1820FA590;
  v14 = (uint64_t (*)(uint64_t, _QWORD *))v9[7];
  swift_unknownObjectRetain();
  v15 = v14(ObjectType, v9);
  swift_unknownObjectRelease();
  v16 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v10 + 240) = v15;
  *(_QWORD *)(v10 + 264) = v16;
  *(_QWORD *)(v10 + 272) = 0xD000000000000016;
  *(_QWORD *)(v10 + 280) = 0x80000001823084A0;
  v17 = (uint64_t (*)(uint64_t, _QWORD *))v9[9];
  swift_unknownObjectRetain();
  v18 = v17(ObjectType, v9);
  swift_unknownObjectRelease();
  *(_QWORD *)(v10 + 312) = v16;
  *(_QWORD *)(v10 + 288) = v18;
  v27 = v8;
  v28 = v9;
  v26 = v10;
  v19 = *MEMORY[0x1E0DEDFB8];
  v20 = type metadata accessor for Mirror.DisplayStyle();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v7, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v7, 0, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v24);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar()
{
  return Calendar.description.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181BFA1CC + 4 * byte_1820F8D06[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_181BFA1CC()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_181BFA1E0()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181BFA1F8()
{
  return 0x6565577473726966;
}

unint64_t sub_181BFA218()
{
  return 0xD000000000000016;
}

uint64_t sub_181BFA234()
{
  return 0x746E6572727563;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Calendar.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.CodingKeys()
{
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Current()
{
  lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.Current()
{
  lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
  return RawRepresentable<>.encode(to:)();
}

uint64_t Calendar.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.CodingKeys>);
  MEMORY[0x1E0C80A78](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __asm { BR              X10 }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_181BFA4A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_BYTE *)(v6 - 96) = 0;
  v7 = KeyedDecodingContainer.decode(_:forKey:)();
  if (!v2)
  {
    v9 = v7;
    v10 = v8;
    swift_bridgeObjectRetain();
    v11._countAndFlagsBits = v9;
    v11._object = v10;
    Calendar.Identifier.init(identifierString:)(v11);
    v12 = *(unsigned __int8 *)(v6 - 96);
    if (v12 != 16)
    {
      *(_DWORD *)(v6 - 144) = v12;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v6 - 120) = 1;
      lazy protocol witness table accessor for type Locale and conformance Locale();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v18 = *(_QWORD *)(v6 - 96);
      v19 = *(_QWORD *)(v6 - 88);
      *(_BYTE *)(v6 - 120) = 2;
      lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      *(_QWORD *)(v6 - 160) = v19;
      *(_QWORD *)(v6 - 152) = v18;
      v21 = *(_QWORD *)(v6 - 96);
      v20 = *(_QWORD *)(v6 - 88);
      *(_BYTE *)(v6 - 96) = 3;
      v22 = KeyedDecodingContainer.decode(_:forKey:)();
      *(_QWORD *)(v6 - 184) = v20;
      *(_QWORD *)(v6 - 176) = v22;
      *(_QWORD *)(v6 - 168) = v21;
      *(_BYTE *)(v6 - 96) = 4;
      *(_QWORD *)(v6 - 200) = KeyedDecodingContainer.decode(_:forKey:)();
      v23 = *(_QWORD *)(v6 - 168);
      v24 = *(_QWORD *)(v6 - 152);
      if (v24)
      {
        *(_QWORD *)(v6 - 192) = v24;
        v25 = *(_QWORD *)(v6 - 160);
      }
      else
      {
        if (one-time initialization token for cache != -1)
          swift_once();
        *(_QWORD *)(v6 - 96) = static LocaleCache.cache;
        *(_QWORD *)(v6 - 192) = LocaleCache.current.getter();
        v25 = v26;
        v24 = 0;
        v23 = *(_QWORD *)(v6 - 168);
      }
      v27 = one-time initialization token for cache;
      *(_QWORD *)(v6 - 152) = v24;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if (v27 != -1)
        swift_once();
      *(_QWORD *)(v6 - 160) = static CalendarCache.cache;
      *(_BYTE *)(v6 - 97) = *(_DWORD *)(v6 - 144);
      *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 88) = v25;
      v28 = *(_QWORD *)(v6 - 184);
      *(_QWORD *)(v6 - 120) = v23;
      *(_QWORD *)(v6 - 112) = v28;
      *(_QWORD *)(v6 - 136) = 0;
      *(_BYTE *)(v6 - 128) = 1;
      swift_retain();
      v29 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((char *)(v6 - 97), (__int128 *)(v6 - 96), (__int128 *)(v6 - 120), *(_QWORD *)(v6 - 176), 0, *(_QWORD *)(v6 - 200), 0, (uint64_t *)(v6 - 136));
      v31 = v30;
      swift_unknownObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
      *v4 = v29;
      v4[1] = v31;
      JUMPOUT(0x181BFA460);
    }
    *(_QWORD *)(v6 - 144) = type metadata accessor for DecodingError();
    swift_allocError();
    v13 = v0[3];
    *(_QWORD *)(v6 - 160) = v0[4];
    *(_QWORD *)(v6 - 152) = v14;
    __swift_project_boxed_opaque_existential_1(v0, v13);
    MEMORY[0x186DA5FB4](v13, *(_QWORD *)(v6 - 160));
    *(_QWORD *)(v6 - 96) = 0;
    *(_QWORD *)(v6 - 88) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 - 96) = 0xD00000000000001CLL;
    *(_QWORD *)(v6 - 88) = 0x8000000182309460;
    v15._countAndFlagsBits = v9;
    v15._object = v10;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17 = *(_QWORD *)(v6 - 152);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v6 - 144) - 8) + 104))(v17, *MEMORY[0x1E0DEC458]);
    swift_willThrow();
  }
  JUMPOUT(0x181BFA450);
}

void Calendar.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(__int128 *__return_ptr, uint64_t, _QWORD *);
  uint64_t v11;
  void (*v12)(__int128 *__return_ptr, uint64_t, _QWORD *);
  void (*v13)(uint64_t, _QWORD *);
  void (*v14)(uint64_t, _QWORD *);
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = (_QWORD *)v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  ObjectType = swift_getObjectType();
  v10 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v7[3];
  swift_unknownObjectRetain();
  v10(&v26, ObjectType, v7);
  swift_unknownObjectRelease();
  Calendar.Identifier.cfCalendarIdentifier.getter();
  LOBYTE(v26) = 0;
  v11 = v24;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = v4;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v7;
    Calendar.locale.getter(&v26);
    v23 = v26;
    v25 = v26;
    v27 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type Locale? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_unknownObjectRelease();
    v12 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v7[6];
    swift_unknownObjectRetain();
    v12(&v26, ObjectType, v7);
    swift_unknownObjectRelease();
    v23 = v26;
    v25 = v26;
    v27 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_unknownObjectRelease();
    v13 = (void (*)(uint64_t, _QWORD *))v7[7];
    swift_unknownObjectRetain();
    v13(ObjectType, v7);
    swift_unknownObjectRelease();
    LOBYTE(v26) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = (void (*)(uint64_t, _QWORD *))v7[9];
    swift_unknownObjectRetain();
    v14(ObjectType, v7);
    swift_unknownObjectRelease();
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(_QWORD *)&v23 = v6;
    *(_QWORD *)&v26 = v8;
    *((_QWORD *)&v26 + 1) = v7;
    if (one-time initialization token for cache != -1)
      swift_once();
    v15 = static CalendarCache.cache + 16;
    v16 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
    swift_retain_n();
    os_unfair_lock_lock(v16);
    closure #1 in CalendarCache.autoupdatingCurrent.getter(v15, (uint64_t *)&v25);
    os_unfair_lock_unlock(v16);
    swift_release_n();
    v22 = v25;
    LOBYTE(v15) = specialized static Calendar.== infix(_:_:)((uint64_t)&v26, (uint64_t)&v25);
    swift_unknownObjectRelease();
    if ((v15 & 1) != 0)
    {
      LOBYTE(v26) = 2;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
      v17 = v23;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v17, v3);
    }
    else
    {
      *(_QWORD *)&v26 = v8;
      *((_QWORD *)&v26 + 1) = v7;
      v18 = (os_unfair_lock_s *)static CalendarCache.cache;
      swift_retain_n();
      os_unfair_lock_lock(v18 + 15);
      closure #1 in CalendarCache.current.getter((uint64_t *)&v25);
      os_unfair_lock_unlock(v18 + 15);
      swift_release_n();
      v22 = v25;
      v19 = specialized static Calendar.== infix(_:_:)((uint64_t)&v26, (uint64_t)&v25);
      swift_unknownObjectRelease();
      v20 = v24;
      LOBYTE(v26) = (v19 & 1) != 0;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
      v21 = v23;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v3);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar(_QWORD *a1)
{
  return Calendar.init(from:)(a1);
}

void protocol witness for Encodable.encode(to:) in conformance Calendar(_QWORD *a1)
{
  Calendar.encode(to:)(a1);
}

void Calendar.Identifier.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicUmmAlQuraCodingKeys>);
  v69 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  MEMORY[0x1E0C80A78](v3);
  v68 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicTabularCodingKeys>);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  MEMORY[0x1E0C80A78](v5);
  v65 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.RepublicOfChinaCodingKeys>);
  v63 = *(_QWORD *)(v7 - 8);
  v64 = v7;
  MEMORY[0x1E0C80A78](v7);
  v62 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.PersianCodingKeys>);
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  MEMORY[0x1E0C80A78](v9);
  v59 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.JapaneseCodingKeys>);
  v57 = *(_QWORD *)(v11 - 8);
  v58 = v11;
  MEMORY[0x1E0C80A78](v11);
  v56 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicCivilCodingKeys>);
  v54 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  MEMORY[0x1E0C80A78](v13);
  v53 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicCodingKeys>);
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v50 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IndianCodingKeys>);
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v47 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.Iso8601CodingKeys>);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v44 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.HebrewCodingKeys>);
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v41 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.EthiopicAmeteAlemCodingKeys>);
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v38 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.EthiopicAmeteMihretCodingKeys>);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v35 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.CopticCodingKeys>);
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v32 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.ChineseCodingKeys>);
  v30 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v29 = (char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.BuddhistCodingKeys>);
  v27[1] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.GregorianCodingKeys>);
  MEMORY[0x1E0C80A78](v23);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.CodingKeys>);
  v71 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v25 = (char *)v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  v72 = v25;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_181BFB3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 65) = 0;
  lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();
  v4 = *(_QWORD *)(v3 - 112);
  v5 = *(_QWORD *)(v3 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v4, v5);
}

uint64_t Calendar.Identifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  _QWORD v36[3];
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;

  v84 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicUmmAlQuraCodingKeys>);
  v67 = *(_QWORD *)(v3 - 8);
  v68 = v3;
  MEMORY[0x1E0C80A78](v3);
  v80 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicTabularCodingKeys>);
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v79 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.RepublicOfChinaCodingKeys>);
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v78 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.PersianCodingKeys>);
  v61 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v77 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.JapaneseCodingKeys>);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v76 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicCivilCodingKeys>);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v75 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicCodingKeys>);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v74 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IndianCodingKeys>);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v83 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.Iso8601CodingKeys>);
  v49 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v82 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.HebrewCodingKeys>);
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v81 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.EthiopicAmeteAlemCodingKeys>);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v73 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.EthiopicAmeteMihretCodingKeys>);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v72 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.CopticCodingKeys>);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v71 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.ChineseCodingKeys>);
  v41 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v70 = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.BuddhistCodingKeys>);
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v69 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.GregorianCodingKeys>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.CodingKeys>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1[3];
  v85 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v27);
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  v28 = v86;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v28)
  {
    v36[2] = v22;
    v36[0] = v20;
    v36[1] = v19;
    v37 = v24;
    v86 = v23;
    v38 = v26;
    v29 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v29 + 16) == 1)
      __asm { BR              X9 }
    v30 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v32 = &type metadata for Calendar.Identifier;
    v33 = v86;
    v34 = v38;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x1E0DEC450], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v33);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Identifier@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.Identifier.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Calendar.Identifier(_QWORD *a1)
{
  Calendar.Identifier.encode(to:)(a1);
}

uint64_t WeekendRange.onsetTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t WeekendRange.onsetTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t WeekendRange.ceaseTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t WeekendRange.ceaseTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*WeekendRange.ceaseTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t WeekendRange.start.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t WeekendRange.start.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*WeekendRange.start.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t WeekendRange.end.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t WeekendRange.end.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*WeekendRange.end.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void WeekendRange.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  if (*(_BYTE *)(v0 + 8) != 1)
  {
    v6 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v6;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
    if (!v2)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  if (v2)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
LABEL_12:
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int WeekendRange.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v1;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    if (!v4)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  if (v4)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
LABEL_12:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WeekendRange()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v1;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    if (!v4)
      goto LABEL_3;
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  if (v4)
    goto LABEL_11;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
LABEL_12:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Calendar.MatchingPolicy.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v6 = v5;
    if (v5 >= 4)
    {
      v7 = type metadata accessor for DecodingError();
      swift_allocError();
      v9 = v8;
      v10 = a1[3];
      v11 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v10);
      MEMORY[0x186DA5FB4](v10, v11);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC458], v7);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      *a2 = v6;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Calendar.MatchingPolicy.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }
}

uint64_t sub_181BFCA7C()
{
  uint64_t v1[13];

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v1, v1[3]);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.MatchingPolicy@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Calendar.MatchingPolicy.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Calendar.MatchingPolicy(_QWORD *a1)
{
  Calendar.MatchingPolicy.encode(to:)(a1);
}

uint64_t Calendar.RepeatedTimePolicy.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (!v5)
    {
      v6 = 0;
      goto LABEL_8;
    }
    if (v5 == 1)
    {
      v6 = 1;
LABEL_8:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      *a2 = v6;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    v8 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v9;
    v11 = a1[3];
    v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    MEMORY[0x186DA5FB4](v11, v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DEC458], v8);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RepeatedTimePolicy.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RepeatedTimePolicy@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Calendar.RepeatedTimePolicy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RepeatedTimePolicy(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t NSCalendar._toCustomAnyHashable()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  os_unfair_lock_s *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  __int128 v10;

  type metadata accessor for _NSSwiftCalendar();
  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    v3 = (_OWORD *)(v2 + 16);
    v4 = (os_unfair_lock_s *)(v2 + 32);
    v5 = v0;
    os_unfair_lock_lock(v4);
    closure #1 in _NSSwiftCalendar.calendar.getter(v3, &v10);
    os_unfair_lock_unlock(v4);

    v7 = *((_QWORD *)&v10 + 1);
    v6 = v10;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v0;
    v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    v8 = v0;
  }
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSCalendar()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSCalendar._toCustomAnyHashable()();

}

BOOL specialized static WeekendRange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (v2 == v4)
      v6 = *(unsigned __int8 *)(a2 + 24);
    else
      v6 = 0;
    if (v6 != 1)
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      return 0;
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16) || v2 != v4)
      return 0;
  }
  return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
}

unint64_t lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged;
  if (!lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged)
  {
    v1 = type metadata accessor for _CalendarBridged();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _CalendarBridged, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged);
  }
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  char v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  char *v21;
  unint64_t v22;
  uint64_t v23;

  v1 = isStackAllocationSafe;
  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  v22 = (unint64_t)((1 << v2) + 63) >> 6;
  v3 = 8 * v22;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v21 = (char *)swift_slowAlloc();
      bzero(v21, v3);
      v12 = 1 << *(_BYTE *)(v1 + 32);
      if (v12 < 64)
        v13 = ~(-1 << v12);
      else
        v13 = -1;
      v14 = v13 & *(_QWORD *)(v1 + 56);
      if (v14)
      {
        v15 = __clz(__rbit64(v14));
        goto LABEL_42;
      }
      v16 = 1;
      if ((unint64_t)(v12 + 63) >> 6 > 1)
      {
        v17 = *(_QWORD *)(v1 + 64);
        if (v17)
        {
LABEL_41:
          v15 = __clz(__rbit64(v17)) + (v16 << 6);
LABEL_42:
          __asm { BR              X26 }
        }
        v18 = 2;
        if ((unint64_t)(v12 + 63) >> 6 > 2)
        {
          v17 = *(_QWORD *)(v1 + 72);
          if (v17)
            goto LABEL_40;
          v18 = 3;
          if ((unint64_t)(v12 + 63) >> 6 <= 3)
            goto LABEL_47;
          v17 = *(_QWORD *)(v1 + 80);
          if (v17)
            goto LABEL_40;
          v18 = 4;
          if ((unint64_t)(v12 + 63) >> 6 <= 4)
            goto LABEL_47;
          v17 = *(_QWORD *)(v1 + 88);
          if (v17)
          {
LABEL_40:
            v16 = v18;
            goto LABEL_41;
          }
          v18 = 5;
          if ((unint64_t)(v12 + 63) >> 6 > 5)
          {
            v17 = *(_QWORD *)(v1 + 96);
            if (!v17)
            {
              while (1)
              {
                v16 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_50;
                if (v16 >= (uint64_t)((unint64_t)(v12 + 63) >> 6))
                  goto LABEL_47;
                v17 = *(_QWORD *)(v1 + 56 + 8 * v16);
                ++v18;
                if (v17)
                  goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
        }
      }
LABEL_47:
      swift_release();
      v11 = MEMORY[0x1E0DEE9E8];
      MEMORY[0x186DA9E78](v21, -1, -1);
      return v11;
    }
  }
  v20[1] = v20;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v21 = (char *)v20 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0);
  bzero(v21, v3);
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v1 + 56);
  if (v6)
  {
    v7 = __clz(__rbit64(v6));
    goto LABEL_19;
  }
  v8 = 1;
  if ((unint64_t)(v4 + 63) >> 6 > 1)
  {
    v9 = *(_QWORD *)(v1 + 64);
    if (v9)
    {
LABEL_18:
      v7 = __clz(__rbit64(v9)) + (v8 << 6);
LABEL_19:
      __asm { BR              X26 }
    }
    v10 = 2;
    if ((unint64_t)(v4 + 63) >> 6 > 2)
    {
      v9 = *(_QWORD *)(v1 + 72);
      if (v9)
        goto LABEL_17;
      v10 = 3;
      if ((unint64_t)(v4 + 63) >> 6 > 3)
      {
        v9 = *(_QWORD *)(v1 + 80);
        if (v9)
          goto LABEL_17;
        v10 = 4;
        if ((unint64_t)(v4 + 63) >> 6 > 4)
        {
          v9 = *(_QWORD *)(v1 + 88);
          if (!v9)
          {
            v10 = 5;
            if ((unint64_t)(v4 + 63) >> 6 > 5)
            {
              v9 = *(_QWORD *)(v1 + 96);
              if (v9)
                goto LABEL_17;
              while (1)
              {
                v8 = v10 + 1;
                if (__OFADD__(v10, 1))
                  break;
                if (v8 >= (uint64_t)((unint64_t)(v4 + 63) >> 6))
                  goto LABEL_24;
                v9 = *(_QWORD *)(v1 + 56 + 8 * v8);
                ++v10;
                if (v9)
                  goto LABEL_18;
              }
              __break(1u);
              __break(1u);
LABEL_50:
              __break(1u);
              __break(1u);
              __break(1u);
            }
            goto LABEL_24;
          }
LABEL_17:
          v8 = v10;
          goto LABEL_18;
        }
      }
    }
  }
LABEL_24:
  swift_release();
  return MEMORY[0x1E0DEE9E8];
}

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  Swift::UInt v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  Swift::UInt v61;
  Swift::Int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = isStackAllocationSafe;
  v78 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  v74 = (unint64_t)((1 << v2) + 63) >> 6;
  v3 = 8 * v74;
  v76 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v75 = (unint64_t *)swift_slowAlloc();
      bzero(v75, v3);
      v73 = 0;
      v21 = 0;
      v22 = v1 + 56;
      v23 = 1 << *(_BYTE *)(v1 + 32);
      if (v23 < 64)
        v24 = ~(-1 << v23);
      else
        v24 = -1;
      v25 = v24 & *(_QWORD *)(v1 + 56);
      v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v28 = v27 | (v21 << 6);
        }
        else
        {
          v13 = __OFADD__(v21++, 1);
          if (v13)
            goto LABEL_148;
          if (v21 >= v26)
            goto LABEL_72;
          v29 = *(_QWORD *)(v22 + 8 * v21);
          if (!v29)
          {
            v30 = v21 + 1;
            if (v21 + 1 >= v26)
              goto LABEL_72;
            v29 = *(_QWORD *)(v22 + 8 * v30);
            if (!v29)
            {
              v30 = v21 + 2;
              if (v21 + 2 >= v26)
                goto LABEL_72;
              v29 = *(_QWORD *)(v22 + 8 * v30);
              if (!v29)
              {
                v30 = v21 + 3;
                if (v21 + 3 >= v26)
                  goto LABEL_72;
                v29 = *(_QWORD *)(v22 + 8 * v30);
                if (!v29)
                {
                  v30 = v21 + 4;
                  if (v21 + 4 >= v26)
                    goto LABEL_72;
                  v29 = *(_QWORD *)(v22 + 8 * v30);
                  if (!v29)
                  {
                    while (1)
                    {
                      v21 = v30 + 1;
                      if (__OFADD__(v30, 1))
                        goto LABEL_152;
                      if (v21 >= v26)
                        break;
                      v29 = *(_QWORD *)(v22 + 8 * v21);
                      ++v30;
                      if (v29)
                        goto LABEL_58;
                    }
LABEL_72:
                    v34 = v73;
                    if (!v73)
                    {
                      swift_release();
                      v20 = MEMORY[0x1E0DEE9E8];
                      goto LABEL_144;
                    }
                    if (v73 == *(_QWORD *)(v1 + 16))
                    {
                      v20 = v1;
                      goto LABEL_144;
                    }
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>);
                    v20 = static _SetStorage.allocate(capacity:)();
                    v53 = 0;
                    v54 = *v75;
                    v55 = v20 + 56;
                    while (1)
                    {
                      if (v54)
                      {
                        v57 = __clz(__rbit64(v54));
                        v54 &= v54 - 1;
                        v58 = v57 | (v53 << 6);
                      }
                      else
                      {
                        v13 = __OFADD__(v53++, 1);
                        if (v13)
                          goto LABEL_151;
                        if (v53 >= v74)
                          goto LABEL_143;
                        v59 = v75[v53];
                        if (!v59)
                        {
                          v60 = v53 + 1;
                          if (v53 + 1 >= v74)
                            goto LABEL_143;
                          v59 = v75[v60];
                          if (v59)
                            goto LABEL_126;
                          v60 = v53 + 2;
                          if (v53 + 2 >= v74)
                            goto LABEL_143;
                          v59 = v75[v60];
                          if (v59)
                            goto LABEL_126;
                          v60 = v53 + 3;
                          if (v53 + 3 >= v74)
                            goto LABEL_143;
                          v59 = v75[v60];
                          if (v59)
                            goto LABEL_126;
                          v60 = v53 + 4;
                          if (v53 + 4 >= v74)
                            goto LABEL_143;
                          v59 = v75[v60];
                          if (v59)
                          {
LABEL_126:
                            v53 = v60;
                          }
                          else
                          {
                            v70 = v53 + 5;
                            if (v53 + 5 >= v74)
                              goto LABEL_143;
                            v59 = v75[v70];
                            v53 += 5;
                            if (!v59)
                            {
                              while (1)
                              {
                                v53 = v70 + 1;
                                if (__OFADD__(v70, 1))
                                  goto LABEL_155;
                                if (v53 >= v74)
                                  break;
                                v59 = v75[v53];
                                ++v70;
                                if (v59)
                                  goto LABEL_127;
                              }
LABEL_143:
                              swift_release();
LABEL_144:
                              MEMORY[0x186DA9E78](v75, -1, -1);
                              return v20;
                            }
                          }
                        }
LABEL_127:
                        v54 = (v59 - 1) & v59;
                        v58 = __clz(__rbit64(v59)) + (v53 << 6);
                      }
                      v61 = *(unsigned __int8 *)(*(_QWORD *)(v76 + 48) + v58);
                      Hasher.init(_seed:)();
                      Hasher._combine(_:)(v61);
                      v62 = Hasher._finalize()();
                      v63 = -1 << *(_BYTE *)(v20 + 32);
                      v64 = v62 & ~v63;
                      v65 = v64 >> 6;
                      if (((-1 << v64) & ~*(_QWORD *)(v55 + 8 * (v64 >> 6))) != 0)
                      {
                        v56 = __clz(__rbit64((-1 << v64) & ~*(_QWORD *)(v55 + 8 * (v64 >> 6)))) | v64 & 0x7FFFFFFFFFFFFFC0;
                      }
                      else
                      {
                        v66 = 0;
                        v67 = (unint64_t)(63 - v63) >> 6;
                        do
                        {
                          if (++v65 == v67 && (v66 & 1) != 0)
                            goto LABEL_147;
                          v68 = v65 == v67;
                          if (v65 == v67)
                            v65 = 0;
                          v66 |= v68;
                          v69 = *(_QWORD *)(v55 + 8 * v65);
                        }
                        while (v69 == -1);
                        v56 = __clz(__rbit64(~v69)) + (v65 << 6);
                      }
                      *(_QWORD *)(v55 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
                      *(_BYTE *)(*(_QWORD *)(v20 + 48) + v56) = v61;
                      ++*(_QWORD *)(v20 + 16);
                      if (!--v34)
                        goto LABEL_143;
                    }
                  }
                }
              }
            }
            v21 = v30;
          }
LABEL_58:
          v25 = (v29 - 1) & v29;
          v28 = __clz(__rbit64(v29)) + (v21 << 6);
        }
        v31 = *(char *)(*(_QWORD *)(v1 + 48) + v28);
        if (v31 < 5)
        {
          v77 = qword_1820FFE48[v31];
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          static Duration.* infix<A>(_:_:)();
        }
        else
        {
          v32 = v31 - 5;
          if (v32 > 2u)
            goto LABEL_156;
          static Duration.interval(fractionalSecondsLength:)(3 * v32 + 3);
        }
        static Duration.zero.getter();
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v33 = static Duration.zero.getter();
          MEMORY[0x186DA6158](v33);
        }
        v1 = v76;
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          *(unint64_t *)((char *)v75 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          v13 = __OFADD__(v73++, 1);
          if (v13)
          {
            __break(1u);
            goto LABEL_72;
          }
        }
      }
    }
  }
  v72 = (uint64_t)&v72;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v75 = (unint64_t *)((char *)&v72 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v75, v3);
  v73 = 0;
  v4 = 0;
  v5 = v1 + 56;
  v6 = 1 << *(_BYTE *)(v1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v4 << 6);
LABEL_22:
    v16 = *(char *)(*(_QWORD *)(v1 + 48) + v12);
    if (v16 < 5)
    {
      v77 = qword_1820FFE48[v16];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      static Duration.* infix<A>(_:_:)();
    }
    else
    {
      v17 = v16 - 5;
      if (v17 > 2u)
        goto LABEL_154;
      static Duration.interval(fractionalSecondsLength:)(3 * v17 + 3);
    }
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v18 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v18);
    }
    v10 = static Duration.< infix(_:_:)();
    v1 = v76;
    if ((v10 & 1) != 0)
    {
      *(unint64_t *)((char *)v75 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = __OFADD__(v73++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_35;
      }
    }
  }
  v13 = __OFADD__(v4++, 1);
  if (v13)
    goto LABEL_146;
  if (v4 >= v9)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_21:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_22;
  }
  v15 = v4 + 1;
  if (v4 + 1 >= v9)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_20;
  v15 = v4 + 2;
  if (v4 + 2 >= v9)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_20;
  v15 = v4 + 3;
  if (v4 + 3 >= v9)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_20;
  v15 = v4 + 4;
  if (v4 + 4 >= v9)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_20:
    v4 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_150;
    if (v4 >= v9)
      break;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_35:
  v19 = v73;
  if (v73)
  {
    if (v73 != *(_QWORD *)(v1 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>);
      v20 = static _SetStorage.allocate(capacity:)();
      v35 = 0;
      v36 = *v75;
      v37 = v20 + 56;
      while (1)
      {
        if (v36)
        {
          v39 = __clz(__rbit64(v36));
          v36 &= v36 - 1;
          v40 = v39 | (v35 << 6);
        }
        else
        {
          v13 = __OFADD__(v35++, 1);
          if (v13)
            goto LABEL_149;
          if (v35 >= v74)
          {
LABEL_108:
            swift_release();
            return v20;
          }
          v41 = v75[v35];
          if (!v41)
          {
            v42 = v35 + 1;
            if (v35 + 1 >= v74)
              goto LABEL_108;
            v41 = v75[v42];
            if (v41)
              goto LABEL_91;
            v42 = v35 + 2;
            if (v35 + 2 >= v74)
              goto LABEL_108;
            v41 = v75[v42];
            if (v41)
              goto LABEL_91;
            v42 = v35 + 3;
            if (v35 + 3 >= v74)
              goto LABEL_108;
            v41 = v75[v42];
            if (v41)
              goto LABEL_91;
            v42 = v35 + 4;
            if (v35 + 4 >= v74)
              goto LABEL_108;
            v41 = v75[v42];
            if (v41)
            {
LABEL_91:
              v35 = v42;
            }
            else
            {
              v52 = v35 + 5;
              if (v35 + 5 >= v74)
                goto LABEL_108;
              v41 = v75[v52];
              v35 += 5;
              if (!v41)
              {
                while (1)
                {
                  v35 = v52 + 1;
                  if (__OFADD__(v52, 1))
                    break;
                  if (v35 >= v74)
                    goto LABEL_108;
                  v41 = v75[v35];
                  ++v52;
                  if (v41)
                    goto LABEL_92;
                }
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
              }
            }
          }
LABEL_92:
          v36 = (v41 - 1) & v41;
          v40 = __clz(__rbit64(v41)) + (v35 << 6);
        }
        v43 = *(unsigned __int8 *)(*(_QWORD *)(v76 + 48) + v40);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v43);
        v44 = Hasher._finalize()();
        v45 = -1 << *(_BYTE *)(v20 + 32);
        v46 = v44 & ~v45;
        v47 = v46 >> 6;
        if (((-1 << v46) & ~*(_QWORD *)(v37 + 8 * (v46 >> 6))) != 0)
        {
          v38 = __clz(__rbit64((-1 << v46) & ~*(_QWORD *)(v37 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_77;
        }
        v48 = 0;
        v49 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v49 && (v48 & 1) != 0)
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }
          v50 = v47 == v49;
          if (v47 == v49)
            v47 = 0;
          v48 |= v50;
          v51 = *(_QWORD *)(v37 + 8 * v47);
        }
        while (v51 == -1);
        v38 = __clz(__rbit64(~v51)) + (v47 << 6);
LABEL_77:
        *(_QWORD *)(v37 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
        *(_BYTE *)(*(_QWORD *)(v20 + 48) + v38) = v43;
        ++*(_QWORD *)(v20 + 16);
        if (!--v19)
          goto LABEL_108;
      }
    }
    return v1;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
}

unint64_t lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.CodingKeys, &unk_1E0F30668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.CodingKeys, &unk_1E0F30668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.CodingKeys, &unk_1E0F30668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.CodingKeys, &unk_1E0F30668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Current, &unk_1E0F318A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Current, &unk_1E0F318A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Current, &unk_1E0F318A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Current, &unk_1E0F318A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type Locale? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Locale? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    v2 = lazy protocol witness table accessor for type Locale and conformance Locale();
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_1E0F306F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_1E0F306F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_1E0F306F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_1E0F306F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys, &unk_1E0F30928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys, &unk_1E0F30928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys, &unk_1E0F30928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicTabularCodingKeys, &unk_1E0F308E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicTabularCodingKeys, &unk_1E0F308E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicTabularCodingKeys, &unk_1E0F308E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.RepublicOfChinaCodingKeys, &unk_1E0F30908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.RepublicOfChinaCodingKeys, &unk_1E0F30908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.RepublicOfChinaCodingKeys, &unk_1E0F30908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.PersianCodingKeys, &unk_1E0F30848);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.PersianCodingKeys, &unk_1E0F30848);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.PersianCodingKeys, &unk_1E0F30848);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.JapaneseCodingKeys, &unk_1E0F30888);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.JapaneseCodingKeys, &unk_1E0F30888);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.JapaneseCodingKeys, &unk_1E0F30888);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicCivilCodingKeys, &unk_1E0F308C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicCivilCodingKeys, &unk_1E0F308C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicCivilCodingKeys, &unk_1E0F308C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicCodingKeys, &unk_1E0F30808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicCodingKeys, &unk_1E0F30808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IslamicCodingKeys, &unk_1E0F30808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IndianCodingKeys, &unk_1E0F307C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IndianCodingKeys, &unk_1E0F307C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.IndianCodingKeys, &unk_1E0F307C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.Iso8601CodingKeys, &unk_1E0F30828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.Iso8601CodingKeys, &unk_1E0F30828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.Iso8601CodingKeys, &unk_1E0F30828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.HebrewCodingKeys, &unk_1E0F307A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.HebrewCodingKeys, &unk_1E0F307A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.HebrewCodingKeys, &unk_1E0F307A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys, &unk_1E0F30948);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys, &unk_1E0F30948);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys, &unk_1E0F30948);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys, &unk_1E0F30968);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys, &unk_1E0F30968);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys, &unk_1E0F30968);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.CopticCodingKeys, &unk_1E0F30788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.CopticCodingKeys, &unk_1E0F30788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.CopticCodingKeys, &unk_1E0F30788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.ChineseCodingKeys, &unk_1E0F307E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.ChineseCodingKeys, &unk_1E0F307E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.ChineseCodingKeys, &unk_1E0F307E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.BuddhistCodingKeys, &unk_1E0F30868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.BuddhistCodingKeys, &unk_1E0F30868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.BuddhistCodingKeys, &unk_1E0F30868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.GregorianCodingKeys, &unk_1E0F308A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.GregorianCodingKeys, &unk_1E0F308A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier.GregorianCodingKeys, &unk_1E0F308A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }
  return result;
}

uint64_t specialized Calendar.Identifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6169726F67657267 && a2 == 0xE90000000000006ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7473696864647562 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6573656E696863 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x636974706F63 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823094C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823094E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x776572626568 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x313036386F7369 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6169646E69 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x63696D616C7369 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4363696D616C7369 && a2 == 0xEC0000006C697669
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6573656E6170616ALL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6E616973726570 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x63696C6275706572 && a2 == 0xEF616E696843664FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x5463696D616C7369 && a2 == 0xEE0072616C756261
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000182309500)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t specialized Calendar.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6565577473726966 && a2 == 0xEC0000007961646BLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001823084A0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E6572727563 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void specialized static Calendar._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  os_unfair_lock_s *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  __int128 v12;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftCalendar();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    v6 = (_OWORD *)(v5 + 16);
    v7 = (os_unfair_lock_s *)(v5 + 32);
    v8 = a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v12);
    os_unfair_lock_unlock(v7);

    v10 = *((_QWORD *)&v12 + 1);
    v9 = v12;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a1;
    v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    v11 = a1;
  }
  *a2 = v9;
  a2[1] = v10;
}

uint64_t specialized static Calendar._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  os_unfair_lock_s *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  __int128 v13;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftCalendar();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    v6 = (_OWORD *)(v5 + 16);
    v7 = (os_unfair_lock_s *)(v5 + 32);
    v8 = a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v13);
    os_unfair_lock_unlock(v7);

    v10 = *((_QWORD *)&v13 + 1);
    v9 = v13;
  }
  else
  {
    type metadata accessor for _CalendarBridged();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a1;
    v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    v11 = a1;
  }
  *a2 = v9;
  a2[1] = v10;
  return 1;
}

unint64_t lazy protocol witness table accessor for type Calendar.ComponentSet and conformance Calendar.ComponentSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.ComponentSet, &type metadata for Calendar.ComponentSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.ComponentSet, &type metadata for Calendar.ComponentSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.ComponentSet, &type metadata for Calendar.ComponentSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.ComponentSet, &type metadata for Calendar.ComponentSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.SearchDirection and conformance Calendar.SearchDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection;
  if (!lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.SearchDirection, &type metadata for Calendar.SearchDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WeekendRange and conformance WeekendRange()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange;
  if (!lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for WeekendRange, &type metadata for WeekendRange);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Calendar(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[2] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[3] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  result = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[4] = result;
  return result;
}

double sub_181BFEEF0@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  Calendar.locale.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

_QWORD *sub_181BFEF30(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  swift_unknownObjectRetain();
  return Calendar.locale.setter((uint64_t *)&v2);
}

uint64_t sub_181BFEF70(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  swift_unknownObjectRetain();
  return Calendar.timeZone.setter((uint64_t *)&v2);
}

uint64_t sub_181BFEFB0(uint64_t *a1)
{
  return Calendar.firstWeekday.setter(*a1);
}

uint64_t sub_181BFEFD8(uint64_t *a1)
{
  return Calendar.minimumDaysInFirstWeek.setter(*a1);
}

ValueMetadata *type metadata accessor for Calendar.ComponentSet()
{
  return &type metadata for Calendar.ComponentSet;
}

uint64_t storeEnumTagSinglePayload for Calendar.Component(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_181BFF060 + 4 * byte_1820F8D59[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_181BFF094 + 4 * byte_1820F8D54[v4]))();
}

uint64_t sub_181BFF094(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF09C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BFF0A4);
  return result;
}

uint64_t sub_181BFF0B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BFF0B8);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_181BFF0BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF0C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Calendar.SearchDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181BFF120 + 4 * byte_1820F8D63[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181BFF154 + 4 * byte_1820F8D5E[v4]))();
}

uint64_t sub_181BFF154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BFF164);
  return result;
}

uint64_t sub_181BFF170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BFF178);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181BFF17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Calendar.MatchingPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181BFF1DC + 4 * byte_1820F8D6D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181BFF210 + 4 * byte_1820F8D68[v4]))();
}

uint64_t sub_181BFF210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BFF220);
  return result;
}

uint64_t sub_181BFF22C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BFF234);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181BFF238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WeekendRange()
{
  return &type metadata for WeekendRange;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.DatesByAdding, &type metadata for Calendar.DatesByAdding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.DatesByMatching, &type metadata for Calendar.DatesByMatching);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Calendar.Identifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.Identifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_181BFF3C8 + 4 * byte_1820F8D77[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_181BFF3FC + 4 * byte_1820F8D72[v4]))();
}

uint64_t sub_181BFF3FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF404(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BFF40CLL);
  return result;
}

uint64_t sub_181BFF418(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BFF420);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_181BFF424(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF42C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Calendar.Identifier.CodingKeys()
{
  return &unk_1E0F306F8;
}

void *type metadata accessor for Calendar.Identifier.GregorianCodingKeys()
{
  return &unk_1E0F308A8;
}

void *type metadata accessor for Calendar.Identifier.BuddhistCodingKeys()
{
  return &unk_1E0F30868;
}

void *type metadata accessor for Calendar.Identifier.ChineseCodingKeys()
{
  return &unk_1E0F307E8;
}

void *type metadata accessor for Calendar.Identifier.CopticCodingKeys()
{
  return &unk_1E0F30788;
}

void *type metadata accessor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  return &unk_1E0F30968;
}

void *type metadata accessor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  return &unk_1E0F30948;
}

void *type metadata accessor for Calendar.Identifier.HebrewCodingKeys()
{
  return &unk_1E0F307A8;
}

void *type metadata accessor for Calendar.Identifier.Iso8601CodingKeys()
{
  return &unk_1E0F30828;
}

void *type metadata accessor for Calendar.Identifier.IndianCodingKeys()
{
  return &unk_1E0F307C8;
}

void *type metadata accessor for Calendar.Identifier.IslamicCodingKeys()
{
  return &unk_1E0F30808;
}

void *type metadata accessor for Calendar.Identifier.IslamicCivilCodingKeys()
{
  return &unk_1E0F308C8;
}

void *type metadata accessor for Calendar.Identifier.JapaneseCodingKeys()
{
  return &unk_1E0F30888;
}

void *type metadata accessor for Calendar.Identifier.PersianCodingKeys()
{
  return &unk_1E0F30848;
}

void *type metadata accessor for Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  return &unk_1E0F30908;
}

void *type metadata accessor for Calendar.Identifier.IslamicTabularCodingKeys()
{
  return &unk_1E0F308E8;
}

void *type metadata accessor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  return &unk_1E0F30928;
}

uint64_t storeEnumTagSinglePayload for Calendar.Current(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181BFF594 + 4 * byte_1820F8D81[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181BFF5C8 + 4 * byte_1820F8D7C[v4]))();
}

uint64_t sub_181BFF5C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF5D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BFF5D8);
  return result;
}

uint64_t sub_181BFF5E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BFF5ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181BFF5F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF5F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Calendar.Current()
{
  return &unk_1E0F318A0;
}

uint64_t storeEnumTagSinglePayload for Calendar.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181BFF660 + 4 * byte_1820F8D8B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181BFF694 + 4 * byte_1820F8D86[v4]))();
}

uint64_t sub_181BFF694(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF69C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181BFF6A4);
  return result;
}

uint64_t sub_181BFF6B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181BFF6B8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181BFF6BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181BFF6C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Calendar.CodingKeys()
{
  return &unk_1E0F30668;
}

id one-time initialization function for _shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _NSSwiftProcessInfo()), sel_init);
  static _NSSwiftProcessInfo._shared = (uint64_t)result;
  return result;
}

uint64_t one-time initialization function for _globalState()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftProcessInfo.GlobalState>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 1;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 32) = 513;
  *(_DWORD *)(result + 36) = 0;
  *(_BYTE *)(result + 40) = 1;
  static _NSSwiftProcessInfo._globalState = result;
  return result;
}

id _NSSwiftProcessInfo.init()()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftProcessInfo.State>._Buffer);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 76) = 0;
  *(_QWORD *)(v2 + 16) = 1;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 72) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____NSSwiftProcessInfo__state] = v2;
  v3 = one-time initialization token for processInfo;
  v4 = v0;
  if (v3 != -1)
    swift_once();
  *(_QWORD *)&v4[OBJC_IVAR____NSSwiftProcessInfo__processInfo] = static _ProcessInfo.processInfo;
  swift_retain();

  v6.receiver = v4;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for _NSSwiftProcessInfo()
{
  return objc_opt_self();
}

uint64_t specialized _NSSwiftProcessInfo.operatingSystemVersion.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int16 v20;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  _QWORD v29[6];
  _QWORD v30[2];

  String._bridgeToObjectiveCImpl()();
  v0 = (void *)_CFCopySystemVersionDictionaryValue();
  swift_unknownObjectRelease();
  if (v0)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    v3 = v2;

    v30[0] = 46;
    v30[1] = 0xE100000000000000;
    MEMORY[0x1E0C80A78](v4);
    v29[2] = v30;
    swift_bridgeObjectRetain();
    v5 = (_QWORD *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v29, (uint64_t)v1, v3);
    swift_bridgeObjectRelease();
    if (v5[2])
    {
      v6 = v5[4];
      v7 = v5[5];
      if ((v7 ^ (unint64_t)v6) >> 14)
      {
        v9 = v5[6];
        v8 = v5[7];
        v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v5[4], v5[5], v9, v8, 10);
        if ((v11 & 0x100) != 0)
        {
          swift_bridgeObjectRetain();
          v12 = specialized _parseInteger<A, B>(ascii:radix:)(v6, v7, v9, v8, 10);
          v14 = v13;
          swift_bridgeObjectRelease();
          if ((v14 & 1) == 0)
            goto LABEL_8;
        }
        else if ((v11 & 1) == 0)
        {
          v12 = v10;
LABEL_8:
          v15 = v5[2];
          if (v15 >= 2)
          {
            v16 = v5[8];
            v17 = v5[9];
            if ((v17 ^ (unint64_t)v16) >> 14)
            {
              v19 = v5[10];
              v18 = v5[11];
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v5[8], v5[9], v19, v18, 10);
              if ((v20 & 0x100) != 0)
              {
                swift_bridgeObjectRetain();
                specialized _parseInteger<A, B>(ascii:radix:)(v16, v17, v19, v18, 10);
                v23 = v22;
                swift_bridgeObjectRelease();
                if ((v23 & 1) == 0)
                  goto LABEL_17;
              }
              else if ((v20 & 1) == 0)
              {
LABEL_17:
                if (v15 >= 3)
                {
                  if (v5[2] < 3uLL)
                  {
                    __break(1u);
                  }
                  else
                  {
                    v24 = v5[12];
                    v25 = v5[13];
                    v27 = v5[14];
                    v26 = v5[15];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    if ((v25 ^ v24) >> 14)
                    {
                      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v24, v25, v27, v26, 10);
                      if ((v28 & 0x100) != 0)
                        specialized _parseInteger<A, B>(ascii:radix:)(v24, v25, v27, v26, 10);
                    }
                  }
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          return v12;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  return -1;
}

uint64_t specialized _NSSwiftProcessInfo.globallyUniqueString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uuid_t out;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(out, 0, sizeof(out));
  _foundation_uuid_generate_random(out);
  v0 = UUID.uuidString.getter();
  v2 = v1;
  getpid();
  *(_QWORD *)out = mach_absolute_time();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  v3 = String.init<A>(_:radix:uppercase:)();
  v5 = v4;
  v6 = String.count.getter();
  if (__OFSUB__(16, v6))
    __break(1u);
  v7 = MEMORY[0x186DA4928](48, 0xE100000000000000, 16 - v6);
  v9 = v8;
  *(_QWORD *)out = v0;
  *(_QWORD *)&out[8] = v2;
  v10._countAndFlagsBits = 45;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 45;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v7;
  v13._object = v9;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = v3;
  v14._object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return *(_QWORD *)out;
}

uint64_t specialized _NSSwiftProcessInfo.physicalMemory.getter()
{
  __int128 v1;
  size_t v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v2 = 8;
  v1 = xmmword_1820FA5A0;
  if (sysctlbyname((const char *)&v1, v3, &v2, 0, 0))
    return 0;
  else
    return v3[0];
}

uint64_t partial apply for closure #1 in _ProcessInfo.processName.setter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in _ProcessInfo.processName.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

Swift::String __swiftcall Date.RelativeFormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v9;
  Swift::String result;
  timespec v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v4 = *(_WORD *)(v2 + 1);
  v5 = *((_QWORD *)v2 + 5);
  v13 = *v2;
  v14 = v4;
  v6 = *(_OWORD *)(v2 + 24);
  v15 = *(_OWORD *)(v2 + 8);
  v16 = v6;
  v17 = v5;
  v12 = v3;
  v11.tv_sec = 0;
  v11.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v11);
  v9 = Date.RelativeFormatStyle._format(_:refDate:)(COERCE_FOUNDATION_DATE((double)v11.tv_sec + -978307200.0 + (double)v11.tv_nsec * 0.000000001), COERCE_FOUNDATION_DATE((double)v11.tv_nsec * 0.000000001));
  object = v9._object;
  countAndFlagsBits = v9._countAndFlagsBits;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t Date.RelativeFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;

  v3 = *(_WORD *)(v2 + 1);
  v4 = *(_QWORD *)(v2 + 40);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(a2 + 40) = v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
  return RawRepresentable<>.encode(to:)();
}

void static Date.RelativeFormatStyle.UnitsStyle.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.RelativeFormatStyle.UnitsStyle.spellOut.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.RelativeFormatStyle.UnitsStyle.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void Date.RelativeFormatStyle.UnitsStyle.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Date.RelativeFormatStyle.UnitsStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.RelativeFormatStyle.UnitsStyle.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.UnitsStyle.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.RelativeFormatStyle.UnitsStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.UnitsStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.UnitsStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.UnitsStyle@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.RelativeFormatStyle.UnitsStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.UnitsStyle(_QWORD *a1)
{
  return Date.RelativeFormatStyle.UnitsStyle.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.Presentation.Option()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.Presentation.Option()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
  return RawRepresentable<>.encode(to:)();
}

void static Date.RelativeFormatStyle.Presentation.numeric.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.RelativeFormatStyle.Presentation.named.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void Date.RelativeFormatStyle.Presentation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Date.RelativeFormatStyle.Presentation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.RelativeFormatStyle.Presentation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.Presentation.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.RelativeFormatStyle.Presentation.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.Presentation.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.Presentation.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.Presentation@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.RelativeFormatStyle.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.Presentation(_QWORD *a1)
{
  return Date.RelativeFormatStyle.Presentation.encode(to:)(a1);
}

void Date.RelativeFormatStyle.presentation.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Date.RelativeFormatStyle.presentation.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.presentation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.RelativeFormatStyle.unitsStyle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *Date.RelativeFormatStyle.unitsStyle.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.unitsStyle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.RelativeFormatStyle.capitalizationContext.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *Date.RelativeFormatStyle.capitalizationContext.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.capitalizationContext.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Date.RelativeFormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Date.RelativeFormatStyle.calendar.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.allowedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.RelativeFormatStyle.allowedFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.allowedFields.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return Date.RelativeFormatStyle.allowedFields.modify;
}

uint64_t Date.RelativeFormatStyle.allowedFields.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 40) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 40) = v2;
  }
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.RelativeFormatStyle.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Date.RelativeFormatStyle.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.RelativeFormatStyle.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.RelativeFormatStyle.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181C018A0 + 4 * byte_1820FA5D0[*v0]))();
}

void sub_181C018A0(_QWORD *a1@<X8>)
{
  *a1 = 0x7974537374696E75;
  a1[1] = 0xEA0000000000656CLL;
}

void sub_181C018C0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x8000000182304440;
}

void sub_181C018E0(_QWORD *a1@<X8>)
{
  *a1 = 0x656C61636F6CLL;
  a1[1] = 0xE600000000000000;
}

void sub_181C018F8(_QWORD *a1@<X8>)
{
  *a1 = 0x7261646E656C6163;
  a1[1] = 0xE800000000000000;
}

void sub_181C01914(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "allowedFields");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181C01974 + 4 * byte_1820FA5D6[*v0]))(0x61746E6573657270, 0xEC0000006E6F6974);
}

uint64_t sub_181C01974()
{
  return 0x7974537374696E75;
}

unint64_t sub_181C01990()
{
  return 0xD000000000000015;
}

uint64_t sub_181C019AC()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_181C019C0()
{
  return 0x7261646E656C6163;
}

uint64_t sub_181C019D8()
{
  return 0x466465776F6C6C61;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.RelativeFormatStyle.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

__n128 Date.RelativeFormatStyle.init(presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>(char *a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  __n128 result;
  char v22;
  __n128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v23 = *a4;
  v24 = *a3;
  v7 = 7;
  v22 = *a5;
  v8 = *a2;
  v9 = *a1;
  v26 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0);
  v10 = v26;
  v11 = *(_QWORD *)(v26 + 16);
  v12 = &byte_1E0F2E9D0;
  do
  {
    v14 = *v12++;
    v13 = v14;
    v26 = v10;
    v15 = *(_QWORD *)(v10 + 24);
    if (v11 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v11 + 1, 1);
      v10 = v26;
    }
    *(_QWORD *)(v10 + 16) = v11 + 1;
    *(_BYTE *)(v10 + v11++ + 32) = v13;
    --v7;
  }
  while (v7);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  v16 = Set.init(minimumCapacity:)();
  v26 = v16;
  v17 = *(_QWORD *)(v10 + 16);
  if (v17)
  {
    for (i = 0; i != v17; ++i)
    {
      v19 = v10 + i;
      specialized Set._Variant.insert(_:)(&v25, *(unsigned __int8 *)(v19 + 32));
    }
    swift_bridgeObjectRelease();
    v20 = v26;
  }
  else
  {
    v20 = v16;
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)a6 = v9;
  *(_BYTE *)(a6 + 1) = v8;
  *(_BYTE *)(a6 + 2) = v22;
  *(_OWORD *)(a6 + 8) = v24;
  result = v23;
  *(__n128 *)(a6 + 24) = v23;
  *(_QWORD *)(a6 + 40) = v20;
  return result;
}

__n128 Date.RelativeFormatStyle.init(allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, char *a3@<X2>, _OWORD *a4@<X3>, __n128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v7;
  char v8;
  __n128 result;

  v7 = *a3;
  v8 = *a6;
  *(_BYTE *)a7 = *a2;
  *(_BYTE *)(a7 + 1) = v7;
  *(_BYTE *)(a7 + 2) = v8;
  *(_OWORD *)(a7 + 8) = *a4;
  result = *a5;
  *(__n128 *)(a7 + 24) = *a5;
  *(_QWORD *)(a7 + 40) = a1;
  return result;
}

Swift::String __swiftcall Date.RelativeFormatStyle._format(_:refDate:)(Foundation::Date _, Foundation::Date refDate)
{
  double *v2;
  double *v3;
  _OWORD *v4;
  double *v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  __int128 v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  int v17;
  double v18;
  double v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t ObjectType;
  void (*v37)(uint64_t, _QWORD);
  uint64_t v38;
  void *v39;
  Swift::String result;
  _DWORD v41[30];
  uint64_t v42;
  double v43;
  unsigned __int8 v44[4];
  double v45;
  _OWORD v46[18];
  _OWORD v47[18];
  _BYTE v48[48];
  __int128 v49;
  double v50[4];

  v5 = v3;
  v6 = v2;
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v6;
  v12 = *v5;
  v13 = v4[1];
  *(_OWORD *)v48 = *v4;
  *(_OWORD *)&v48[16] = v13;
  *(_OWORD *)&v48[32] = v4[2];
  outlined retain of Date.RelativeFormatStyle((uint64_t)v48);
  if (one-time initialization token for sortedAllowedComponents != -1)
    swift_once();
  v14 = swift_bridgeObjectRetain();
  v15 = specialized _ArrayProtocol.filter(_:)(v14, (uint64_t)v48);
  outlined release of Date.RelativeFormatStyle((uint64_t)v48);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = *(unsigned __int8 *)(v16 + v15 + 31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DED4F0], v7);
    v18 = specialized BinaryFloatingPoint.rounded<A>(increment:rule:)((uint64_t)v10, 1.0, v12 - v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v19 = v11 + v18;
    outlined retain of Date.RelativeFormatStyle((uint64_t)v48);
    v20 = swift_bridgeObjectRetain();
    v21 = specialized _ArrayProtocol.filter(_:)(v20, (uint64_t)v48);
    outlined release of Date.RelativeFormatStyle((uint64_t)v48);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
    v22 = Set.init(minimumCapacity:)();
    *(_QWORD *)&v47[0] = v22;
    v23 = *(_QWORD *)(v21 + 16);
    if (v23)
    {
      for (i = 0; i != v23; ++i)
      {
        v25 = v21 + i;
        specialized Set._Variant.insert(_:)(v46, *(unsigned __int8 *)(v25 + 32));
      }
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)&v47[0];
    }
    else
    {
      v26 = v22;
      swift_bridgeObjectRelease();
    }
    v49 = *(_OWORD *)&v48[24];
    v47[0] = *(_OWORD *)&v48[24];
    v50[0] = v19;
    v45 = v11;
    outlined retain of Locale((uint64_t)&v49);
    Calendar.dateComponents(_:from:to:)(v26, v50, &v45, v46);
    outlined release of Locale((uint64_t)&v49);
    memcpy(v47, v46, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v47);
    v27 = swift_bridgeObjectRetain();
    v28 = specialized Sequence.compactMap<A>(_:)(v27);
    outlined release of DateComponents((uint64_t)v47);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v28 + 16))
    {
      v29 = *(unsigned __int8 *)(v28 + 32);
      v30 = *(_QWORD *)(v28 + 40);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = 0;
      v29 = 18;
    }
    if (v29 == 18)
    {
      v30 = 0;
      v31 = v17;
    }
    else
    {
      v31 = v29;
    }
    if ((v31 - 4) > 2u)
    {
      v44[0] = v31;
      v45 = v11;
      v43 = v19;
      *(_OWORD *)v50 = v49;
      outlined retain of Locale((uint64_t)&v49);
      static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)(v44, &v45, &v43, (uint64_t *)v50, v26, (uint64_t)v46);
    }
    else
    {
      v45 = v19;
      v43 = v11;
      *(_OWORD *)v50 = v49;
      v44[0] = v31;
      outlined retain of Locale((uint64_t)&v49);
      static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)((uint64_t *)&v45, &v43, v50, v26, v44, v46);
    }
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v47);
    outlined release of Locale((uint64_t)&v49);
    v32 = *((_QWORD *)&v46[0] + 1);
    if (LOBYTE(v46[0]) == 18)
      v32 = v30;
    v42 = v32;
    if (LOBYTE(v46[0]) == 18)
      v33 = v31;
    else
      v33 = v46[0];
    v41[29] = v33;
    v34 = v48[1];
    *(_OWORD *)v50 = *(_OWORD *)&v48[8];
    v35 = *(_OWORD *)&v48[8];
    ObjectType = swift_getObjectType();
    v37 = *(void (**)(uint64_t, _QWORD))(*((_QWORD *)&v35 + 1) + 64);
    outlined retain of Locale((uint64_t)v50);
    v37(ObjectType, *((_QWORD *)&v35 + 1));
    outlined release of Locale((uint64_t)v50);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v38 = 0;
  v39 = (void *)0xE000000000000000;
  result._object = v39;
  result._countAndFlagsBits = v38;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys, &unk_1E0F2DF40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys, &unk_1E0F2DF40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys, &unk_1E0F2DF40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys, &unk_1E0F2DF40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option, &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option, &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option, &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option, &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys, &unk_1E0F2E220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys, &unk_1E0F2E220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys, &unk_1E0F2E220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys, &unk_1E0F2E220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option, &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option, &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option, &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option, &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }
  return result;
}

_QWORD *static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)@<X0>(_BYTE *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t ObjectType;
  _QWORD *result;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD __src[18];
  double v21;
  double v22;
  _OWORD __dst[19];

  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  v11 = a4[1];
  v12 = 1.59271755e13;
  if (*a3 <= 1.59271755e13)
    v12 = *a3;
  LOBYTE(v22) = *a1;
  v13 = fmax(v12, -2.11845067e11);
  ObjectType = swift_getObjectType();
  *(double *)__src = v13;
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t))(v11 + 160))(__dst, &v22, __src, ObjectType, v11);
  if ((__dst[1] & 1) == 0)
  {
    v16 = *(double *)__dst;
    if (v9 >= v8)
      v16 = *(double *)__dst + *((double *)__dst + 1) + -1.0;
    *(_QWORD *)&__src[0] = v10;
    *((_QWORD *)&__src[0] + 1) = v11;
    v21 = v8;
    v22 = v16;
    Calendar.dateComponents(_:from:to:)(a5, &v22, &v21, __dst);
    *(_QWORD *)&__src[2] = *(_QWORD *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(_QWORD *)&__src[3] = *(_QWORD *)&__dst[3];
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(_QWORD *)&__src[4] = *(_QWORD *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(_QWORD *)&__src[5] = *(_QWORD *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(_QWORD *)&__src[6] = *(_QWORD *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(_QWORD *)&__src[7] = *(_QWORD *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(_QWORD *)&__src[8] = *(_QWORD *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(_QWORD *)&__src[9] = *(_QWORD *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(_QWORD *)&__src[10] = *(_QWORD *)&__dst[10];
    BYTE8(__src[10]) = BYTE8(__dst[10]);
    *(_QWORD *)&__src[11] = *(_QWORD *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(_QWORD *)&__src[12] = *(_QWORD *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(_QWORD *)&__src[13] = *(_QWORD *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(_QWORD *)&__src[14] = *(_QWORD *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(_QWORD *)&__src[15] = *(_QWORD *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[16];
    *(_QWORD *)&__src[17] = *(_QWORD *)&__dst[17];
    WORD4(__src[17]) = WORD4(__dst[17]);
    memcpy(__dst, __src, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)__src);
    if (one-time initialization token for sortedAllowedComponents != -1)
      swift_once();
    outlined retain of DateComponents((uint64_t)__src);
    v17 = swift_bridgeObjectRetain();
    v18 = specialized Sequence.compactMap<A>(_:)(v17);
    outlined release of DateComponents((uint64_t)__src);
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)__src);
    if (*(_QWORD *)(v18 + 16))
    {
      v19 = *(_QWORD *)(v18 + 40);
      *(_BYTE *)a6 = *(_BYTE *)(v18 + 32);
      *(_QWORD *)(a6 + 8) = v19;
      outlined release of DateComponents((uint64_t)__src);
      return (_QWORD *)swift_bridgeObjectRelease();
    }
    outlined release of DateComponents((uint64_t)__src);
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  *(_OWORD *)a6 = xmmword_1820FAE00;
  return result;
}

uint64_t static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  double v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  char v39;
  double v40;
  char v42;
  double __src[36];
  _QWORD v44[5];
  char v45;
  double v46;
  char v47;
  double v48;
  char v49;
  double v50;
  char v51;
  double v52;
  char v53;
  double v54;
  char v55;
  double v56;
  char v57;
  double v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  double v62;
  char v63;
  double v64;
  char v65;
  double v66;
  char v67;
  double v68;
  char v69;
  double v70;
  char v71;
  double v72;
  char v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  _QWORD __dst[37];

  v6 = *a1;
  v7 = *a2;
  v8 = a3[1];
  v9 = *a5;
  __dst[0] = *a3;
  __dst[1] = v8;
  if (one-time initialization token for sortedAllowedComponents != -1)
    swift_once();
  v10 = static ICURelativeDateFormatter.sortedAllowedComponents;
  v11 = *(_QWORD *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = MEMORY[0x1E0DEE9D8];
    while (2)
    {
      v16 = *(unsigned __int8 *)(v10 + v12 + 32);
      v17 = v16 - 1;
      if ((v16 - 1) > 0xA || ((0x63Fu >> v17) & 1) == 0)
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      switch(v9)
      {
        case 1:
          goto LABEL_23;
        case 2:
          if (((0x1C1u >> v17) & 1) == 0)
            goto LABEL_23;
          goto LABEL_8;
        case 3:
          if (((0x7C3u >> v17) & 1) == 0)
            goto LABEL_23;
          goto LABEL_8;
        case 4:
          if (((0x7C7u >> v17) & 1) == 0)
            goto LABEL_23;
          goto LABEL_8;
        case 5:
          if (((0x7CFu >> v17) & 1) == 0)
            goto LABEL_23;
          goto LABEL_8;
        case 6:
          if (((0x7DFu >> v17) & 1) == 0)
            goto LABEL_23;
          goto LABEL_8;
        case 10:
        case 11:
          if (((0x1C3u >> v17) & 1) == 0)
          {
LABEL_23:
            v76 = v13;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
              v13 = v76;
            }
            v15 = *(_QWORD *)(v13 + 16);
            v14 = *(_QWORD *)(v13 + 24);
            if (v15 >= v14 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
              v13 = v76;
            }
            *(_QWORD *)(v13 + 16) = v15 + 1;
            *(_BYTE *)(v13 + v15 + 32) = v16;
          }
LABEL_8:
          if (v11 != ++v12)
            continue;
          swift_bridgeObjectRelease();
          break;
        default:
          goto LABEL_70;
      }
      break;
    }
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
  }
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v18 = Set.init(minimumCapacity:)();
  v76 = v18;
  v19 = *(_QWORD *)(v13 + 16);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      v21 = v13 + i;
      specialized Set._Variant.insert(_:)(__src, *(unsigned __int8 *)(v21 + 32));
    }
    swift_release();
    v22 = v76;
  }
  else
  {
    v22 = v18;
    swift_release();
  }
  v23 = specialized Set.union<A>(_:)((uint64_t)&outlined read-only object #0 of static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:), v22);
  v76 = v6;
  __src[0] = v7;
  Calendar.dateComponents(_:from:to:)(v23, (double *)&v76, __src, v44);
  swift_bridgeObjectRelease();
  if (v59)
  {
    v40 = v58;
    v42 = 1;
    v39 = v61;
  }
  else
  {
    if ((v61 & 1) != 0)
    {
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    v24 = v60;
    if (v60 < 0)
    {
      v24 = -v60;
      if (__OFSUB__(0, v60))
      {
        __break(1u);
        JUMPOUT(0x181C036BCLL);
      }
    }
    if (v24 >= 500000000)
    {
      v25 = (v60 > 0) | (unint64_t)(v60 >> 63);
      v26 = __OFADD__(*(_QWORD *)&v58, v25);
      *(_QWORD *)&v27 = *(_QWORD *)&v58 + v25;
      if (v26)
      {
        __break(1u);
        JUMPOUT(0x181C036B0);
      }
      v39 = 0;
      v28 = *(_QWORD *)&v27 == 0x7FFFFFFFFFFFFFFFLL;
      if (v27 == NAN)
        v27 = 0.0;
      v40 = v27;
      v58 = v27;
      v42 = v28;
      v59 = v28;
    }
    else
    {
      v40 = v58;
      v39 = 0;
      v42 = 0;
    }
  }
  __src[0] = *(double *)v44;
  __src[1] = *(double *)&v44[1];
  __src[2] = *(double *)&v44[2];
  __src[3] = *(double *)&v44[3];
  __src[4] = *(double *)&v44[4];
  LOBYTE(__src[5]) = v45;
  __src[6] = v46;
  LOBYTE(__src[7]) = v47;
  __src[8] = v48;
  LOBYTE(__src[9]) = v49;
  __src[10] = v50;
  LOBYTE(__src[11]) = v51;
  __src[12] = v52;
  LOBYTE(__src[13]) = v53;
  __src[14] = v54;
  LOBYTE(__src[15]) = v55;
  __src[16] = v56;
  LOBYTE(__src[17]) = v57;
  __src[18] = v40;
  LOBYTE(__src[19]) = v42;
  *(_QWORD *)&__src[20] = v60;
  LOBYTE(__src[21]) = v39;
  __src[22] = v62;
  LOBYTE(__src[23]) = v63;
  __src[24] = v64;
  LOBYTE(__src[25]) = v65;
  __src[26] = v66;
  LOBYTE(__src[27]) = v67;
  __src[28] = v68;
  LOBYTE(__src[29]) = v69;
  __src[30] = v70;
  LOBYTE(__src[31]) = v71;
  LOBYTE(__src[33]) = v73;
  LOWORD(__src[35]) = v75;
  __src[32] = v72;
  __src[34] = v74;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__src);
  v29 = swift_bridgeObjectRetain();
  v30 = specialized Sequence.compactMap<A>(_:)(v29);
  swift_bridgeObjectRelease();
  outlined release of DateComponents((uint64_t)__src);
  if (*(_QWORD *)(v30 + 16))
    v31 = *(_BYTE *)(v30 + 32);
  else
    v31 = 18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v32 = swift_bridgeObjectRetain();
  specialized BidirectionalCollection.last(where:)(v32, a4, v31, (char *)&v76);
  swift_bridgeObjectRelease();
  if (v76 != 18)
  {
    v34 = *(_QWORD *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
    if (!v34)
    {
LABEL_64:
      if ((v39 & 1) == 0)
LABEL_65:
        __asm { BR              X11 }
LABEL_73:
      __break(1u);
      JUMPOUT(0x181C036DCLL);
    }
    v35 = (unsigned __int8 *)(static ICURelativeDateFormatter.sortedAllowedComponents + 32);
    while (2)
    {
      v36 = *v35++;
      v37 = v36 - 1;
      if (((0x63Fu >> (v36 - 1)) & 1) != 0)
      {
        switch((char)v76)
        {
          case 1:
            if (((0x63Eu >> v37) & 1) == 0)
              goto LABEL_51;
            goto LABEL_63;
          case 2:
            if (((0x63Cu >> v37) & 1) != 0)
              goto LABEL_63;
            goto LABEL_51;
          case 3:
            if (((0x38u >> v37) & 1) != 0)
              goto LABEL_63;
            goto LABEL_51;
          case 4:
            if (((0x30u >> v37) & 1) != 0)
              goto LABEL_63;
            goto LABEL_51;
          case 5:
            if (v37 == 5)
              goto LABEL_63;
            goto LABEL_51;
          case 6:
            goto LABEL_51;
          case 10:
          case 11:
            if (((0x3Cu >> v37) & 1) != 0)
            {
LABEL_63:
              switch(v37)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                  goto LABEL_65;
                default:
                  goto LABEL_69;
              }
            }
LABEL_51:
            if (--v34)
              continue;
            goto LABEL_64;
          default:
            goto LABEL_71;
        }
      }
      goto LABEL_69;
    }
  }
  result = outlined release of DateComponents((uint64_t)__src);
  *a6 = xmmword_1820FAE00;
  return result;
}

uint64_t specialized BidirectionalCollection.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  Swift::UInt v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_21:
    result = swift_bridgeObjectRelease();
    v19 = 18;
    goto LABEL_22;
  }
  v7 = a1 + 32;
  v8 = a2 + 56;
  v9 = a3 - 1;
  while (1)
  {
    --v6;
    if (*(_QWORD *)(a2 + 16))
    {
      v11 = *(unsigned __int8 *)(v7 + v6);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v11);
      v12 = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(a2 + 32);
      v14 = v12 & ~v13;
      if (((*(_QWORD *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        v15 = *(_QWORD *)(a2 + 48);
        if (*(unsigned __int8 *)(v15 + v14) != (_DWORD)v11)
        {
          v16 = ~v13;
          do
          {
            v14 = (v14 + 1) & v16;
            if (((*(_QWORD *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
              goto LABEL_6;
          }
          while (*(unsigned __int8 *)(v15 + v14) != (_DWORD)v11);
        }
        v17 = v11 - 1;
        if ((v11 - 1) <= 0xAu && ((0x63Fu >> v17) & 1) != 0)
          break;
      }
    }
LABEL_6:
    if (!v6)
      goto LABEL_21;
  }
  switch(v9)
  {
    case 0:
      v10 = 449;
      goto LABEL_5;
    case 1:
      v10 = 451;
      goto LABEL_5;
    case 2:
      v10 = 1991;
      goto LABEL_5;
    case 3:
      v10 = 1999;
      goto LABEL_5;
    case 4:
      v10 = 2015;
      goto LABEL_5;
    case 9:
    case 10:
      v10 = 1987;
LABEL_5:
      if (((v10 >> v17) & 1) == 0)
        goto LABEL_6;
      goto LABEL_23;
    default:
LABEL_23:
      v19 = *(_BYTE *)(v7 + v6);
      result = swift_bridgeObjectRelease();
      break;
  }
LABEL_22:
  *a4 = v19;
  return result;
}

uint64_t Date.RelativeFormatStyle.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[144];
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  _QWORD v72[18];
  _BYTE v73[144];
  _BYTE v74[152];

  v3 = v1[1];
  v4 = v1[2];
  v5 = *((_QWORD *)v1 + 2);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v9(ObjectType, v5) & 1) != 0)
  {
    v10 = 1;
LABEL_5:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v72, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    v10 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v54);
  Hasher._combine(_:)(1u);
  if (v54[0] == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v54[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
    v17 = v54;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v53);
    v17 = v53;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    if (!v56)
      goto LABEL_14;
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v57)
      goto LABEL_15;
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = v58;
    if (!v58)
      goto LABEL_16;
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57)
    goto LABEL_21;
LABEL_15:
  Hasher._combine(_:)(0);
  v16 = v58;
  if (!v58)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_23:
  v18 = v59;
  v52 = v6;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v19 = v60;
  v20 = v61;
  v21 = v62;
  v22 = v63;
  v23 = v64;
  v50 = v64;
  v49 = v62;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v20;
    v25 = v21;
    v26 = v22;
    v27 = v22;
    v28 = v23;
    v29 = v19;
    _CFObject.hash(into:)();
    v51 = v19;
    if (v20)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v30 = v20;
      _CFObject.hash(into:)();

      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v23;
    v32 = v20;
    v33 = v21;
    v26 = v22;
    v34 = v22;
    v51 = 0;
    if (v20)
      goto LABEL_28;
  }
  Hasher._combine(_:)(0);
LABEL_31:
  if (v49)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v35 = v49;
    _CFObject.hash(into:)();

    if (v26)
      goto LABEL_33;
LABEL_36:
    Hasher._combine(_:)(0);
    v37 = v50;
    if (v50)
      goto LABEL_34;
    goto LABEL_37;
  }
  Hasher._combine(_:)(0);
  if (!v26)
    goto LABEL_36;
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v36 = v26;
  _CFObject.hash(into:)();

  v37 = v50;
  if (v50)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v37;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v38 = 0;
LABEL_38:

  v39 = v65;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = v52;
  v40 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (!v67)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v42 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v70 == 2)
  {
    v43 = 0;
  }
  else
  {
    v43 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  if (v71 == 2)
  {
    v44 = 0;
  }
  else
  {
    v45 = v71 & 1;
    Hasher._combine(_:)(1u);
    v44 = v45;
  }
  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  v46 = swift_getObjectType();
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 120);
  swift_unknownObjectRetain();
  v47(a1, v46, v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v7);
  return swift_bridgeObjectRelease();
}

uint64_t Date.RelativeFormatStyle.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  int v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v19 = v1[1];
  v17 = v1[2];
  v9 = *(_OWORD *)(v1 + 8);
  v14 = *(_OWORD *)(v1 + 24);
  v15 = v9;
  v16 = *((_QWORD *)v1 + 5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  v10 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = v8;
  v20 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = v17;
    v12 = v16;
    LOBYTE(v18) = v19;
    v20 = 1;
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = v11;
    v20 = 2;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = v15;
    v20 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = v14;
    v20 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v18 = v12;
    v20 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x1E0DEB3B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v10);
}

Swift::Int Date.RelativeFormatStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  _BYTE v48[144];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  _QWORD v67[18];
  _BYTE v68[144];
  _BYTE v69[144];
  _BYTE v70[80];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 2);
  v5 = *((_QWORD *)v0 + 4);
  v6 = *((_QWORD *)v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v67, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v69) == 1)
  {
    v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v49);
  Hasher._combine(_:)(1u);
  if (v49[0] == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v49[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v50;
  if (!v50)
  {
    Hasher._combine(_:)(0);
    v16 = v49;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v48);
    v16 = v48;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    if (!v51)
      goto LABEL_14;
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v52)
      goto LABEL_15;
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 = v53;
    if (!v53)
      goto LABEL_16;
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v52)
    goto LABEL_21;
LABEL_15:
  Hasher._combine(_:)(0);
  v15 = v53;
  if (!v53)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v70, v15);
  swift_bridgeObjectRelease();
LABEL_23:
  v17 = v54;
  v47 = v5;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v70, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v18 = v55;
  v19 = v56;
  v21 = v57;
  v20 = v58;
  v22 = v59;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v19;
    v24 = v21;
    v25 = v20;
    v26 = v22;
    v27 = v18;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v28 = v22;
    v29 = v19;
    v30 = v21;
    v31 = v20;
  }
  v46 = v18;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v19;
    _CFObject.hash(into:)();

    if (v21)
      goto LABEL_31;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v21)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v33 = v21;
      _CFObject.hash(into:)();

      if (v20)
        goto LABEL_32;
LABEL_36:
      Hasher._combine(_:)(0);
      if (v22)
        goto LABEL_33;
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v20)
    goto LABEL_36;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v34 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v35 = 0;
LABEL_38:

  v36 = v60;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v70, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v5 = v47;
  v37 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    if (v62)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v70, v37);
  swift_bridgeObjectRelease();
  if (!v62)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v65 == 2)
  {
    v40 = 0;
  }
  else
  {
    v40 = v65 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v66 == 2)
  {
    v41 = 0;
  }
  else
  {
    v42 = v66 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  v43 = swift_getObjectType();
  v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v44(v70, v43, v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v70, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v17;
  v19 = 1;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10 = v17;
  v19 = 2;
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v18 = v17;
  v19 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v15 = v10;
  v16 = v17;
  v19 = 4;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v14 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
  v19 = 5;
  lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x1E0DEB3D8]);
  v13[1] = v14;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v17;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)a2 = v9;
  *(_BYTE *)(a2 + 1) = v15;
  *(_BYTE *)(a2 + 2) = v18;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 40) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle(_QWORD *a1)
{
  return Date.RelativeFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.RelativeFormatStyle()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  _QWORD v65[18];
  _BYTE v66[144];
  _BYTE v67[144];
  _BYTE v68[80];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 2);
  v5 = *((_QWORD *)v0 + 4);
  v6 = *((_QWORD *)v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v65, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)&v47);
  Hasher._combine(_:)(1u);
  if (v47 == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v47 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v47);
    if (!v49)
      goto LABEL_14;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    goto LABEL_18;
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v50)
      goto LABEL_15;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 = v51;
    if (!v51)
      goto LABEL_16;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v50)
    goto LABEL_20;
LABEL_15:
  Hasher._combine(_:)(0);
  v15 = v51;
  if (!v51)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v15);
  swift_bridgeObjectRelease();
LABEL_22:
  v16 = v52;
  v46 = v5;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v17 = v53;
  v18 = v54;
  v20 = v55;
  v19 = v56;
  v21 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v18;
    v23 = v20;
    v24 = v19;
    v25 = v21;
    v26 = v17;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v27 = v21;
    v28 = v18;
    v29 = v20;
    v30 = v19;
  }
  v45 = v17;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v31 = v18;
    _CFObject.hash(into:)();

    if (v20)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v20)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v32 = v20;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_31;
LABEL_35:
      Hasher._combine(_:)(0);
      if (v21)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (!v19)
    goto LABEL_35;
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v33 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v34 = v21;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  v34 = 0;
LABEL_37:

  v35 = v58;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v35);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v5 = v46;
  v36 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    if (v60)
      goto LABEL_42;
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v36);
  swift_bridgeObjectRelease();
  if (!v60)
    goto LABEL_44;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v63 == 2)
  {
    v39 = 0;
  }
  else
  {
    v39 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v64 == 2)
  {
    v40 = 0;
  }
  else
  {
    v41 = v64 & 1;
    Hasher._combine(_:)(1u);
    v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  v42 = swift_getObjectType();
  v43 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v43(v68, v42, v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v68, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.RelativeFormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  uint64_t result;
  Swift::String v4;

  v4 = Date.RelativeFormatStyle.format(_:)(a2);
  result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.RelativeFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;

  v3 = *(_WORD *)(v2 + 1);
  v4 = *(_QWORD *)(v2 + 40);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(a2 + 40) = v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

__n128 static FormatStyle<>.relative(presentation:unitsStyle:)@<Q0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  char v30;
  _OWORD v31[2];

  v4 = *a1;
  v5 = *a2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static LocaleCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, (uint64_t *)v31);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  v8 = *(_QWORD *)&v31[0];
  v9 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v10 = static CalendarCache.cache + 16;
  v11 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v10, (uint64_t *)v31);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  v29 = (__n128)v31[0];
  v12 = 7;
  v27 = v9;
  v28 = v8;
  v13 = v5;
  v14 = v4;
  *(_QWORD *)&v31[0] = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0);
  v15 = *(_QWORD *)&v31[0];
  v16 = *(_QWORD *)(*(_QWORD *)&v31[0] + 16);
  v17 = &byte_1E0F2E9D0;
  do
  {
    v19 = *v17++;
    v18 = v19;
    *(_QWORD *)&v31[0] = v15;
    v20 = *(_QWORD *)(v15 + 24);
    if (v16 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v16 + 1, 1);
      v15 = *(_QWORD *)&v31[0];
    }
    *(_QWORD *)(v15 + 16) = v16 + 1;
    *(_BYTE *)(v15 + v16++ + 32) = v18;
    --v12;
  }
  while (v12);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  v21 = Set.init(minimumCapacity:)();
  *(_QWORD *)&v31[0] = v21;
  v22 = *(_QWORD *)(v15 + 16);
  if (v22)
  {
    for (i = 0; i != v22; ++i)
    {
      v24 = v15 + i;
      specialized Set._Variant.insert(_:)(&v30, *(unsigned __int8 *)(v24 + 32));
    }
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)&v31[0];
  }
  else
  {
    v25 = v21;
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)a3 = v14;
  *(_BYTE *)(a3 + 1) = v13;
  *(_BYTE *)(a3 + 2) = 0;
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 16) = v27;
  result = v29;
  *(__n128 *)(a3 + 24) = v29;
  *(_QWORD *)(a3 + 40) = v25;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field, &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field, &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field, &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field, &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }
  return result;
}

uint64_t specialized static Date.RelativeFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (((*a1 ^ *a2) & 1) != 0)
    return 0;
  if (a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v3 = *((_QWORD *)a1 + 5);
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a1 + 24);
  v4 = *((_QWORD *)a2 + 5);
  v9 = *(_OWORD *)(a1 + 8);
  v8 = *(_OWORD *)(a2 + 8);
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) == 0)
    return 0;
  v9 = v7;
  v8 = v6;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) != 0)
    return specialized static Set.== infix(_:_:)(v3, v4);
  else
    return 0;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys, &unk_1E0F2E190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys, &unk_1E0F2E190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys, &unk_1E0F2E190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys, &unk_1E0F2E190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation, &type metadata for Date.RelativeFormatStyle.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation, &type metadata for Date.RelativeFormatStyle.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.Presentation, &type metadata for Date.RelativeFormatStyle.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle, &type metadata for Date.RelativeFormatStyle.UnitsStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle, &type metadata for Date.RelativeFormatStyle.UnitsStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle, &type metadata for Date.RelativeFormatStyle.UnitsStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.RelativeFormatStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  result = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  a1[3] = result;
  return result;
}

uint64_t sub_181C05E50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_181C05E5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t destroy for Date.RelativeFormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.RelativeFormatStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle()
{
  return &type metadata for Date.RelativeFormatStyle;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle()
{
  return &type metadata for Date.RelativeFormatStyle.UnitsStyle;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.Presentation()
{
  return &type metadata for Date.RelativeFormatStyle.Presentation;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181C0614C + 4 * byte_1820FA5EC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181C06180 + 4 * byte_1820FA5E7[v4]))();
}

uint64_t sub_181C06180(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C06188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C06190);
  return result;
}

uint64_t sub_181C0619C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C061A4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181C061A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C061B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.RelativeFormatStyle.CodingKeys()
{
  return &unk_1E0F2E190;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.Presentation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C06218 + 4 * byte_1820FA5F6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C0624C + 4 * byte_1820FA5F1[v4]))();
}

uint64_t sub_181C0624C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C06254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C0625CLL);
  return result;
}

uint64_t sub_181C06268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C06270);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C06274(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C0627C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.Presentation.Option()
{
  return &type metadata for Date.RelativeFormatStyle.Presentation.Option;
}

void *type metadata accessor for Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  return &unk_1E0F2E220;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.UnitsStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181C062F8 + 4 * byte_1820FA600[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181C0632C + 4 * byte_1820FA5FB[v4]))();
}

uint64_t sub_181C0632C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C06334(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C0633CLL);
  return result;
}

uint64_t sub_181C06348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C06350);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181C06354(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C0635C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle.Option()
{
  return &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.Presentation.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181C063B8 + 4 * byte_1820FA605[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181C063D8 + 4 * byte_1820FA60A[v4]))();
}

_BYTE *sub_181C063B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181C063D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C063E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C063E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C063F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C063F8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  return &unk_1E0F2DF40;
}

unint64_t specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.RelativeFormatStyle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t outlined retain of Date.RelativeFormatStyle(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Date.RelativeFormatStyle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UTF16EndianAdaptor);
}

uint64_t type metadata completion function for UTF16EndianAdaptor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for UTF16EndianAdaptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF16EndianAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      v16 = v15 >= 2;
      v17 = v15 - 2;
      if (!v16)
        v17 = -1;
      if (v17 + 1 >= 2)
        return v17;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181C06BA0 + 4 * byte_1820FAE10[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for UTF16EndianAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for UTF32EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UTF32EndianAdaptor);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UTF16EndianAdaptor<A>()
{
  JUMPOUT(0x186DA9D64);
}

Swift::UInt16_optional __swiftcall UTF16EndianAdaptor.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 v25;
  char v26;

  v2 = v0;
  v3 = *(int *)(v0 + 40);
  if (*(_BYTE *)(v1 + v3) == 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
LABEL_3:
    dispatch thunk of IteratorProtocol.next()();
    if ((v20 & 1) != 0 || (v4 = v19, dispatch thunk of IteratorProtocol.next()(), (v18 & 1) != 0))
    {
      LOWORD(v5) = 0;
      v6 = 1;
      return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
    }
    v6 = 0;
    v9 = v17;
    goto LABEL_17;
  }
  v6 = 1;
  *(_BYTE *)(v1 + v3) = 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v26 & 1) != 0)
  {
LABEL_7:
    LOWORD(v5) = 0;
    return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
  }
  v4 = v25;
  if (v25 >= 0xFEu)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v22 & 1) == 0)
    {
      if (v25 == 255 && v21 == 254)
      {
        v7 = *(int *)(v2 + 36);
        v8 = *(unsigned __int8 *)(v1 + v7);
        if (v8 != 2)
        {
          v6 = 0;
          if ((v8 & 1) != 0)
            LOWORD(v5) = -2;
          else
            LOWORD(v5) = -257;
          return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
        }
        *(_BYTE *)(v1 + v7) = 0;
      }
      else
      {
        if (v25 != 254 || v21 != 255)
        {
          v6 = 0;
          v5 = v25 | (v21 << 8);
          v16 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
          v11 = (v16 & 1) != 0 || v16 == 2;
          LOWORD(v12) = __rev16(v5);
          goto LABEL_21;
        }
        v14 = *(int *)(v2 + 36);
        v15 = *(unsigned __int8 *)(v1 + v14);
        if (v15 != 2)
        {
          v6 = 0;
          if ((v15 & 1) != 0)
            LOWORD(v5) = -257;
          else
            LOWORD(v5) = -2;
          return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
        }
        *(_BYTE *)(v1 + v14) = 1;
      }
      goto LABEL_3;
    }
    goto LABEL_7;
  }
  dispatch thunk of IteratorProtocol.next()();
  if ((v24 & 1) != 0)
    goto LABEL_7;
  v6 = 0;
  v9 = v23;
LABEL_17:
  v10 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  v5 = v4 | (v9 << 8);
  v11 = (v10 & 1) != 0 || v10 == 2;
  v12 = bswap32(v5) >> 16;
LABEL_21:
  if (v11)
    LOWORD(v5) = v12;
  return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance UTF16EndianAdaptor<A>.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(Swift::UInt16_optional *)&result = UTF16EndianAdaptor.Iterator.next()();
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UTF16EndianAdaptor.Iterator, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UTF16EndianAdaptor<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UTF32EndianAdaptor<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t UTF16EndianAdaptor.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _BYTE *v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _BYTE v23[4];
  int v24;
  uint64_t (*v25)(_QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v25 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = &v23[-v9];
  v11 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = &v23[-v17];
  v19 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v11 + 16);
  v19(&v23[-v17], v3, v6, v16);
  v24 = *(unsigned __int8 *)(v3 + *(int *)(a1 + 36));
  v20 = v25(0, v6, v7);
  v21 = *(int *)(v20 + 36);
  *(_BYTE *)(a3 + v21) = 2;
  *(_BYTE *)(a3 + *(int *)(v20 + 40)) = 0;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v19)(v14, v18, v6);
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v18, v6);
  result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v26 + 32))(a3, v10, v27);
  *(_BYTE *)(a3 + v21) = v24;
  return result;
}

Swift::UInt32_optional __swiftcall UTF32EndianAdaptor.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned __int8 v16;
  char v17;

  v2 = v0;
  v3 = *(int *)(v0 + 40);
  if (*(_BYTE *)(v1 + v3) == 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
LABEL_3:
    dispatch thunk of IteratorProtocol.next()();
    if ((v17 & 1) != 0)
    {
      v7 = 0;
      v8 = 1;
      return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
    }
    v4 = v16;
    dispatch thunk of IteratorProtocol.next()();
    v5 = v16;
    dispatch thunk of IteratorProtocol.next()();
    v6 = v16;
    dispatch thunk of IteratorProtocol.next()();
    goto LABEL_19;
  }
  v8 = 1;
  *(_BYTE *)(v1 + v3) = 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v17 & 1) != 0)
  {
LABEL_17:
    v7 = 0;
    return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
  }
  v4 = v16;
  if (v16 == 255 || !v16)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v17 & 1) == 0)
    {
      v5 = v16;
      dispatch thunk of IteratorProtocol.next()();
      v6 = v16;
      dispatch thunk of IteratorProtocol.next()();
      v9 = v16;
      if (v16 != 255 || v16 != 254 || v16)
      {
        v8 = 0;
        goto LABEL_20;
      }
      v10 = *(int *)(v2 + 36);
      v11 = *(unsigned __int8 *)(v1 + v10);
      if (v11 != 2)
      {
        v8 = 0;
        if ((v11 & 1) != 0)
          v7 = -131072;
        else
          v7 = 65279;
        return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
      }
      *(_BYTE *)(v1 + v10) = 0;
      goto LABEL_3;
    }
    goto LABEL_17;
  }
  dispatch thunk of IteratorProtocol.next()();
  if ((v17 & 1) != 0)
    goto LABEL_17;
  v5 = v16;
  dispatch thunk of IteratorProtocol.next()();
  v6 = v16;
  dispatch thunk of IteratorProtocol.next()();
LABEL_19:
  v8 = 0;
  v9 = v16;
LABEL_20:
  v7 = v4 | (v5 << 8) | (v6 << 16) | (v9 << 24);
  v13 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  v14 = (v13 & 1) != 0 || v13 == 2;
  v15 = bswap32(v7);
  if (v14)
    v7 = v15;
  return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance UTF32EndianAdaptor<A>.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(Swift::UInt32_optional *)&result = UTF32EndianAdaptor.Iterator.next()();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF32EndianAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UTF32EndianAdaptor.Iterator, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, uint64_t, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  UTF16EndianAdaptor.makeIterator()(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
}

uint64_t type metadata accessor for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UTF32EndianAdaptor.Iterator);
}

uint64_t type metadata accessor for UTF16EndianAdaptor.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UTF16EndianAdaptor.Iterator);
}

uint64_t type metadata completion function for UTF32EndianAdaptor.Iterator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for UTF32EndianAdaptor.Iterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _BYTE *v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v11 = (char *)a1 + v6;
    *v11 = *((_BYTE *)a2 + v6);
    v11[1] = *((_BYTE *)a2 + v6 + 1);
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for UTF32EndianAdaptor.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithCopy for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF32EndianAdaptor.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v14;
  int v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (a2 <= v6)
    goto LABEL_21;
  v8 = v7 + 2;
  v9 = 8 * (v7 + 2);
  if ((v7 + 2) > 3)
    goto LABEL_7;
  v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v11))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_14;
  }
  else
  {
    if (v11 <= 0xFF)
    {
      if (v11 < 2)
        goto LABEL_21;
LABEL_7:
      v10 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        goto LABEL_21;
LABEL_14:
      v12 = (v10 - 1) << v9;
      if (v8 > 3)
        v12 = 0;
      if ((_DWORD)v7 != -2)
      {
        if (v8 > 3)
          LODWORD(v8) = 4;
        __asm { BR              X12 }
      }
      v15 = v6 + v12;
      return (v15 + 1);
    }
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v14 = *(unsigned __int8 *)(a1 + v7 + 1);
  if (v14 < 2)
    return 0;
  v15 = (v14 + 2147483646) & 0x7FFFFFFF;
  return (v15 + 1);
}

void storeEnumTagSinglePayload for UTF32EndianAdaptor.Iterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 2;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -2)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 2);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t storeEnumTagSinglePayload for Endianness(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C07D88 + 4 * byte_1820FAE31[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C07DBC + 4 * byte_1820FAE2C[v4]))();
}

uint64_t sub_181C07DBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C07DC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C07DCCLL);
  return result;
}

uint64_t sub_181C07DD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C07DE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C07DE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C07DEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Endianness()
{
  return &type metadata for Endianness;
}

unint64_t lazy protocol witness table accessor for type Endianness and conformance Endianness()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Endianness and conformance Endianness;
  if (!lazy protocol witness table cache variable for type Endianness and conformance Endianness)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Endianness, &type metadata for Endianness);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Endianness and conformance Endianness);
  }
  return result;
}

uint64_t type metadata accessor for _PlistDecodingStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistDecodingStorage);
}

_QWORD *initializeBufferWithCopyOfBuffer for _CodingPathNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for _CodingPathNode()
{
  return swift_release();
}

_QWORD *assignWithCopy for _CodingPathNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for _CodingPathNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _CodingPathNode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _CodingPathNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for _CodingPathNode(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *destructiveProjectEnumData for _CodingPathNode(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for _CodingPathNode(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for _CodingPathNode()
{
  return &type metadata for _CodingPathNode;
}

uint64_t BufferReader.lineNumber.getter()
{
  uint64_t *v0;
  _BYTE *v1;
  unint64_t v2;
  uint64_t result;
  BOOL v4;

  v1 = (_BYTE *)v0[2];
  v2 = v0[3];
  result = 1;
  if ((unint64_t)v1 >= v2)
    return result;
  while (*v1 == 13)
  {
    v4 = __OFADD__(result++, 1);
    if (v4)
      goto LABEL_16;
    if ((unint64_t)(v1 + 1) >= v2)
    {
LABEL_3:
      if ((unint64_t)++v1 >= v2)
        return result;
    }
    else
    {
      if (v1[1] == 10)
        ++v1;
      if ((unint64_t)++v1 >= v2)
        return result;
    }
  }
  if (v0[1] < 2)
    goto LABEL_17;
  if (*(_BYTE *)(*v0 + 1) != 10)
    goto LABEL_3;
  v4 = __OFADD__(result++, 1);
  if (!v4)
    goto LABEL_3;
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t static DecodingError._dataCorrupted<A>(_:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v32 = a6;
  v33 = a1;
  v34 = a2;
  v35 = a7;
  v37 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v31 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v21((char *)&v31 - v19, a4, v13, v18);
  ((void (*)(char *, char *, uint64_t))v21)(v16, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, a5) == 1)
  {
    v22 = *(void (**)(char *, uint64_t))(v14 + 8);
    v22(v16, v13);
    _CodingPathNode.path.getter(a3);
    v22(v20, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a5);
    v23 = _CodingPathNode.path.getter(a3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    v25 = v32;
    *(_QWORD *)(inited + 56) = a5;
    *(_QWORD *)(inited + 64) = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, a5);
    v36 = v23;
    specialized Array.append<A>(contentsOf:)(inited);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
  }
  swift_bridgeObjectRetain();
  v27 = v35;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v28 = *MEMORY[0x1E0DEC458];
  v29 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
}

uint64_t UInt8.digitValue.getter(char a1)
{
  if ((a1 - 58) >= 0xF6u)
    return (a1 - 48);
  else
    return 0;
}

uint64_t BufferView<A>._decodeScalar()(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;

  v2 = *a1;
  if ((v2 & 0xC0) == 0x80)
    goto LABEL_2;
  if ((v2 & 0x80) == 0)
  {
    if (a2 >= 1)
      v3 = *a1;
    else
      v3 = 0;
    LOBYTE(v4) = a2 < 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  v7 = (__clz(v2 ^ 0xFF) - 24);
  if (v7 > a2)
  {
LABEL_2:
    v3 = 0;
    LOBYTE(v4) = 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  v3 = 0;
  LOBYTE(v4) = 1;
  switch(v7)
  {
    case 1:
      return v3 | ((unint64_t)v4 << 32);
    case 2:
      v4 = a1[1] & 0xC0;
      v3 = a1[1] & 0x3F | ((v2 & 0x1F) << 6);
      if (v4 != 128)
        v3 = 0;
      LOBYTE(v4) = v4 != 128;
      return v3 | ((unint64_t)v4 << 32);
    case 3:
      v3 = 0;
      v8 = a1[1];
      if ((v8 & 0xC0) == 0x80)
      {
        v9 = a1[2];
        if ((v9 & 0xC0) == 0x80)
        {
          v3 = ((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) | v9 & 0x3F;
          LOBYTE(v4) = (((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) & 0xF800) == 55296;
          if ((((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) & 0xF800) == 0xD800)
            v3 = 0;
        }
      }
      return v3 | ((unint64_t)v4 << 32);
    case 4:
      v3 = 0;
      v10 = a1[1];
      if ((v10 & 0xC0) == 0x80)
      {
        v11 = a1[2];
        if ((v11 & 0xC0) == 0x80)
        {
          v12 = a1[3];
          if ((v12 & 0xC0) == 0x80)
          {
            v13 = (((v2 & 0xF) << 18) | ((v10 & 0x3Fu) << 12)) >> 16;
            v14 = ((v2 & 0xF) << 18) | ((v10 & 0x3F) << 12) | ((v11 & 0x3F) << 6);
            v15 = v14 & 0x3FF800;
            v3 = v14 & 0xFFFFFFC0 | v12 & 0x3F;
            v16 = v15 == 55296 || v13 > 0x10;
            v4 = v16;
            if (v4)
              v3 = 0;
          }
        }
      }
      return v3 | ((unint64_t)v4 << 32);
    default:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t _parseHexIntegerDigits<A>(_:isNegative:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t AssociatedConformanceWitness;
  unsigned __int8 *v27;
  int v28;
  char *v29;
  int v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  int v34;
  int v35;
  char *v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;

  v49 = a3;
  v45 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v48 = (char *)&v43 - v11;
  v12 = *(_QWORD *)(a5 + 8);
  v46 = a5;
  v47 = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v53 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v43 - v19;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v43 - v24;
  if (!a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v53 + 56))(a6, 1, 1, a4, v23);
  v50 = a6;
  v51 = v22;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_1820FB1B0, 1536, AssociatedTypeWitness, AssociatedConformanceWitness);
  v52 = v25;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  if (a2 <= 0)
  {
    v32 = *(void (**)(char *, uint64_t))(v53 + 8);
LABEL_18:
    v32(v52, a4);
    v38 = v53;
    v39 = v50;
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v50, v20, a4);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, a4);
  }
  v27 = v45;
  v44 = (unint64_t)&v45[a2];
  while (1)
  {
    v28 = *v27;
    if ((v28 - 48) <= 9)
    {
      v54 = v28 - 48;
      lazy protocol witness table accessor for type UInt8 and conformance UInt8();
      v29 = v51;
      goto LABEL_10;
    }
    v29 = v51;
    if ((v28 - 65) > 5)
      break;
    v55 = v28 - 55;
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
LABEL_10:
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v30 = dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)();
    v31 = v53;
    v32 = *(void (**)(char *, uint64_t))(v53 + 8);
    v32(v20, a4);
    v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v33(v20, v16, a4);
    if ((v49 & 1) != 0)
      v34 = dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)();
    else
      v34 = dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)();
    v35 = v34;
    v32(v29, a4);
    v32(v20, a4);
    v36 = v48;
    v33(v48, v16, a4);
    v33(v20, v36, a4);
    if (((v30 | v35) & 1) != 0)
    {
      v32(v20, a4);
      v32(v52, a4);
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      return v37(v50, 1, 1, a4);
    }
    if ((unint64_t)++v27 >= v44)
      goto LABEL_18;
  }
  if ((v28 - 97) < 6)
  {
    v56 = v28 - 87;
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    goto LABEL_10;
  }
  v41 = v53;
  v42 = *(void (**)(char *, uint64_t))(v53 + 8);
  v42(v20, a4);
  v42(v52, a4);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
  return v37(v50, 1, 1, a4);
}

uint64_t _parseIntegerDigits<A>(_:isNegative:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t AssociatedConformanceWitness;
  unsigned __int8 *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  int v33;
  int v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  char v50;

  v47 = a3;
  v49 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v46 = (char *)&v39 - v11;
  v45 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14);
  v44 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v39 - v18;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v39 - v23;
  if (!a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(a6, 1, 1, a4, v22);
  v42 = v21;
  v43 = a5;
  v48 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D480, 1280, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  if (a2 <= 0)
  {
    v31 = *(void (**)(char *, uint64_t))(v13 + 8);
LABEL_13:
    v31(v24, a4);
    v37 = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v48, v19, a4);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v37, 0, 1, a4);
  }
  else
  {
    v26 = v49;
    v27 = (unint64_t)&v49[a2];
    v28 = v42;
    v29 = v44;
    while (1)
    {
      v30 = *v26 - 48;
      if (v30 >= 0xA)
      {
        v36 = *(void (**)(char *, uint64_t))(v13 + 8);
        v36(v19, a4);
        v36(v24, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v48, 1, 1, a4);
      }
      v40 = v27;
      v49 = v26;
      v50 = v30;
      lazy protocol witness table accessor for type UInt8 and conformance UInt8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v41 = dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)();
      v31 = *(void (**)(char *, uint64_t))(v13 + 8);
      v31(v19, a4);
      v32 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v32(v19, v29, a4);
      v33 = (v47 & 1) != 0
          ? dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)()
          : dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)();
      v34 = v33;
      v31(v28, a4);
      v31(v19, a4);
      v35 = v46;
      v32(v46, v29, a4);
      v32(v19, v35, a4);
      if (((v41 | v34) & 1) != 0)
        break;
      v26 = v49 + 1;
      v27 = v40;
      if ((unint64_t)(v49 + 1) >= v40)
        goto LABEL_13;
    }
    v31(v19, a4);
    v31(v24, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v48, 1, 1, a4);
  }
}

uint64_t _CodingPathNode.path.getter(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[15];

  v10[14] = *MEMORY[0x1E0C80C00];
  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      v2 = *(_QWORD *)(a1 + 16);
      v1 = *(_QWORD *)(a1 + 24);
      swift_retain();
      v3 = _CodingPathNode.path.getter(v1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v5 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v5;
      *(_QWORD *)(v5 + 16) = v2;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_BYTE *)(v5 + 40) = 2;
      specialized Array.append<A>(contentsOf:)(inited);
      swift_release();
      return v3;
    }
    else
    {
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 56);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1 + 16, (uint64_t)v10);
    swift_retain();
    v6 = _CodingPathNode.path.getter(v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_18205C850;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v10, v8 + 32);
    specialized Array.append<A>(contentsOf:)(v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return v6;
}

uint64_t sub_181C08F44()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t _asciiNumbers.getter()
{
  return 14640;
}

BOOL UInt8.isValidHexDigit.getter(unsigned __int8 a1)
{
  return a1 - 58 > 0xFFFFFFF5 || a1 - 71 > 0xFFFFFFF9 || a1 - 97 < 6;
}

void _CodingKey.stringValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181C08FD8()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return v0;
}

void protocol witness for CodingKey.stringValue.getter in conformance _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  _CodingKey.stringValue.getter(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), a3, *(_BYTE *)(v3 + 24));
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _CodingKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _CodingKey()
{
  uint64_t v0;

  if (*(unsigned __int8 *)(v0 + 24) - 1 < 2)
    return *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 24))
    return *(_QWORD *)(v0 + 16);
  return 0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _CodingKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _CodingKey()
{
  lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CodingKey()
{
  lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  return CodingKey.debugDescription.getter();
}

uint64_t specialized _PlistDecodingStorage.push(container:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isClassOrObjCExistentialType;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, v3, v4);
  type metadata accessor for Array();
  Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v8 = *v2;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v10 = v8 & 0xFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v10 = v8;
  Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(v10 + 16));
  return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t destroy for _CodingKey(uint64_t a1)
{
  return outlined consume of _CodingKey(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _CodingKey(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _CodingKey(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _CodingKey(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _CodingKey(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _CodingKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _CodingKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _CodingKey(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _CodingKey()
{
  return &type metadata for _CodingKey;
}

uint64_t specialized static Date.daysBeforeMonth(_:year:)(char a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = 0;
  v3 = 0;
  switch(a1)
  {
    case 1:
      return v2 | (v3 << 16);
    case 2:
      v3 = 0;
      v2 = 31;
      return v2 | (v3 << 16);
    case 3:
      if (__OFADD__(a2, 1))
      {
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        JUMPOUT(0x181C09998);
      }
      v4 = (a2 + 1) % 400;
      if (v4 < 0)
        v4 = -v4;
      if ((v4 & 3) != 0 || v4 == 100 || v4 == 300 || v4 == 200)
      {
        v3 = 0;
        v2 = 59;
      }
      else
      {
        v3 = 0;
        v2 = 60;
      }
      break;
    case 4:
      if (__OFADD__(a2, 1))
        goto LABEL_105;
      v5 = (a2 + 1) % 400;
      if (v5 < 0)
        v5 = -v5;
      if ((v5 & 3) != 0 || v5 == 100 || v5 == 300 || v5 == 200)
      {
        v3 = 0;
        v2 = 90;
      }
      else
      {
        v3 = 0;
        v2 = 91;
      }
      break;
    case 5:
      if (__OFADD__(a2, 1))
        goto LABEL_106;
      v6 = (a2 + 1) % 400;
      if (v6 < 0)
        v6 = -v6;
      if ((v6 & 3) != 0 || v6 == 100 || v6 == 300 || v6 == 200)
      {
        v3 = 0;
        v2 = 120;
      }
      else
      {
        v3 = 0;
        v2 = 121;
      }
      break;
    case 6:
      if (__OFADD__(a2, 1))
        goto LABEL_107;
      v7 = (a2 + 1) % 400;
      if (v7 < 0)
        v7 = -v7;
      if ((v7 & 3) != 0 || v7 == 100 || v7 == 300 || v7 == 200)
      {
        v3 = 0;
        v2 = 151;
      }
      else
      {
        v3 = 0;
        v2 = 152;
      }
      break;
    case 7:
      if (__OFADD__(a2, 1))
        goto LABEL_108;
      v8 = (a2 + 1) % 400;
      if (v8 < 0)
        v8 = -v8;
      if ((v8 & 3) != 0 || v8 == 100 || v8 == 300 || v8 == 200)
      {
        v3 = 0;
        v2 = 181;
      }
      else
      {
        v3 = 0;
        v2 = 182;
      }
      break;
    case 8:
      if (__OFADD__(a2, 1))
        goto LABEL_109;
      v9 = (a2 + 1) % 400;
      if (v9 < 0)
        v9 = -v9;
      if ((v9 & 3) != 0 || v9 == 100 || v9 == 300 || v9 == 200)
      {
        v3 = 0;
        v2 = 212;
      }
      else
      {
        v3 = 0;
        v2 = 213;
      }
      break;
    case 9:
      if (__OFADD__(a2, 1))
        goto LABEL_110;
      v10 = (a2 + 1) % 400;
      if (v10 < 0)
        v10 = -v10;
      if ((v10 & 3) != 0 || v10 == 100 || v10 == 300 || v10 == 200)
      {
        v3 = 0;
        v2 = 243;
      }
      else
      {
        v3 = 0;
        v2 = 244;
      }
      break;
    case 10:
      if (__OFADD__(a2, 1))
        goto LABEL_111;
      v11 = (a2 + 1) % 400;
      if (v11 < 0)
        v11 = -v11;
      if ((v11 & 3) != 0 || v11 == 100 || v11 == 300 || v11 == 200)
      {
        v3 = 0;
        v2 = 273;
      }
      else
      {
        v3 = 0;
        v2 = 274;
      }
      break;
    case 11:
      if (__OFADD__(a2, 1))
        goto LABEL_112;
      v12 = (a2 + 1) % 400;
      if (v12 < 0)
        v12 = -v12;
      if ((v12 & 3) != 0 || v12 == 100 || v12 == 300 || v12 == 200)
      {
        v3 = 0;
        v2 = 304;
      }
      else
      {
        v3 = 0;
        v2 = 305;
      }
      break;
    case 12:
      if (__OFADD__(a2, 1))
        goto LABEL_113;
      v13 = (a2 + 1) % 400;
      if (v13 < 0)
        v13 = -v13;
      if ((v13 & 3) != 0 || v13 == 100 || v13 == 300 || v13 == 200)
      {
        v3 = 0;
        v2 = 334;
      }
      else
      {
        v3 = 0;
        v2 = 335;
      }
      break;
    case 13:
      if (__OFADD__(a2, 1))
        goto LABEL_114;
      v14 = (a2 + 1) % 400;
      if (v14 < 0)
        v14 = -v14;
      if ((v14 & 3) != 0 || v14 == 100 || v14 == 300 || v14 == 200)
      {
        v3 = 0;
        v2 = 365;
      }
      else
      {
        v3 = 0;
        v2 = 366;
      }
      break;
    default:
      v2 = 0;
      v3 = 1;
      return v2 | (v3 << 16);
  }
  return v2 | (v3 << 16);
}

uint64_t specialized static Date.daysSinceReferenceDate(year:month:day:)(uint64_t result, char a2, char a3)
{
  uint64_t v3;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v3 = result % 400;
  if (__OFSUB__(result, 400 * (result / 400)))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  v5 = (double)(result / 400) * 146097.0;
  if (v3 < 0)
  {
    v10 = v3 + 1;
    while (1)
    {
      v13 = -(v10 % 400) & ((v10 % 400) >> 63);
      if ((v13 & 3) != 0)
      {
        v11 = 0xD00000000000;
      }
      else
      {
        v12 = 365.0;
        if (v13 == 100 || v13 == 300 || v13 == 200)
          goto LABEL_18;
        v11 = 0xE00000000000;
      }
      *(_QWORD *)&v12 = v11 & 0xFFFFFFFFFFFFLL | 0x4076000000000000;
LABEL_18:
      v5 = v5 - v12;
      if (++v10 == 1)
        goto LABEL_24;
    }
  }
  if (v3)
  {
    v6 = 0;
    do
    {
      v9 = ++v6 % 400;
      if (v6 % 400 < 0)
        v9 = -v9;
      if ((v9 & 3) != 0)
      {
        v7 = 0xD00000000000;
      }
      else
      {
        v8 = 365.0;
        if (v9 == 100 || v9 == 300 || v9 == 200)
          goto LABEL_7;
        v7 = 0xE00000000000;
      }
      *(_QWORD *)&v8 = v7 & 0xFFFFFFFFFFFFLL | 0x4076000000000000;
LABEL_7:
      v5 = v5 + v8;
    }
    while (v3 != v6);
  }
LABEL_24:
  result = specialized static Date.daysBeforeMonth(_:year:)(a2, result);
  if ((char)(a3 - 1) != a3 - 1)
    goto LABEL_27;
  return result;
}

id protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance NSString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = NSString.init(stringLiteral:)(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t NSString._toCustomAnyHashable()()
{
  void *v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  return AnyHashable.init<A>(_:)();
}

id NSString.init(format:locale:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  id v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = getVaList(_:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    ObjectType = swift_getObjectType();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 496))(ObjectType, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFormat_locale_arguments_, a1, v7, v5);
  swift_unknownObjectRelease();
  return v8;
}

