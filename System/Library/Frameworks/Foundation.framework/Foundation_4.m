unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  }
  return result;
}

uint64_t outlined release of (String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 208);
  v14 = *(_OWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 224);
  v9 = *(_QWORD *)(a1 + 240);
  v10 = *(_WORD *)(a1 + 248);
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_WORD *)(a1 + 120));
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v15, v2, v3, v4, v5, v6, v7, v8, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33708);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F338B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F338B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F338B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F338B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F33798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F33798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F33798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F33798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys, &unk_1E0F32CF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys, &unk_1E0F32CF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys, &unk_1E0F32CF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys, &unk_1E0F32CF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F32E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F32E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F32E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F32E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F32EA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F32EA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F32EA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F32EA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F32D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F32D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F32D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F32D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33558);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33558);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33558);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys, &unk_1E0F33558);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F335E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F335E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F335E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys, &unk_1E0F335E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F334C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F334C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F334C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys, &unk_1E0F334C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys, &unk_1E0F33948);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys, &unk_1E0F33948);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys, &unk_1E0F33948);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys, &unk_1E0F33948);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys, &unk_1E0F32F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys, &unk_1E0F32F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys, &unk_1E0F32F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys, &unk_1E0F32F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys);
  }
  return result;
}

uint64_t _So9NSDecimala__length_getter(_DWORD *a1)
{
  return (*a1 >> 8) & 0xF;
}

uint64_t _So9NSDecimala__exponent_getter(char *a1)
{
  return *a1;
}

uint64_t _So9NSDecimala__isNegative_getter(_DWORD *a1)
{
  return (*a1 >> 12) & 1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys, &unk_1E0F33678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys, &unk_1E0F33678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys, &unk_1E0F33678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys, &unk_1E0F33678);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys and conformance String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError;
  if (!lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal._CalculationError, &type metadata for NSDecimal._CalculationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError;
  if (!lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal._CalculationError, &type metadata for NSDecimal._CalculationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError);
  }
  return result;
}

uint64_t _So9NSDecimala__isCompact_getter(_DWORD *a1)
{
  return (*a1 >> 13) & 1;
}

uint64_t _So9NSDecimala__reserved_getter(_DWORD *a1)
{
  return *a1 >> 14;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  v4 = *(_WORD *)(result + 120) & 0x107 | 0x4000;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 80) = v1;
  *(_QWORD *)(result + 96) = v2;
  *(_QWORD *)(result + 112) = v3;
  *(_WORD *)(result + 120) = v4;
  return result;
}

uint64_t sub_181A3D0C4()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 <= 0xFD)
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1 & 1);
  return swift_deallocObject();
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type NSAttributedString and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject)
  {
    v1 = type metadata accessor for NSMorphologyPronoun(255, &lazy cache variable for type metadata for NSAttributedString);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEFD08], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject);
  }
  return result;
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(result, a2, a3 & 1);
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup??(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254)
    return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(result, a2, a3);
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(result, a2, a3 & 1);
  return result;
}

uint64_t outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup??(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 254)
    return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(result, a2, a3);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value, &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value);
  }
  return result;
}

uint64_t outlined init with copy of String.LocalizationValue.FormatArgument(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for String.LocalizationValue.FormatArgument(a2, a1);
  return a2;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument(uint64_t a1)
{
  destroy for String.LocalizationValue.FormatArgument(a1);
  return a1;
}

uint64_t partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2[3];
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v2[2] - 8) + 80);
  return closure #1 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)(a1, (uint64_t)v2+ ((((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)+ v4) & ~v4), v3, v2[4], v2[5], a2);
}

uint64_t partial apply for closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = v1[2];
  v3 = v1[3];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, (uint64_t)v1 + v5, (uint64_t)v1 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6), v2, v3, v1[4]);
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = (v3 + *(_QWORD *)(v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + v3);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v5, v1 + ((v5 + *(_QWORD *)(v4 + 64) + v6) & ~v6), v2, v3) & 1;
}

uint64_t destroy for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1)
{
  return outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument._AttributeFixup(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument._AttributeFixup()
{
  return &type metadata for String.LocalizationValue.FormatArgument._AttributeFixup;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys()
{
  return &unk_1E0F33678;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.CodingKeys()
{
  return &unk_1E0F32F38;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.CodingKeys()
{
  return &unk_1E0F33948;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1E0F33438;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_1E0F334C8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_1E0F335E8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_1E0F33558;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1E0F32CF8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_1E0F32D88;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_1E0F32EA8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_1E0F32E18;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181A3D6FC + 4 * byte_1820617E7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181A3D730 + 4 * byte_1820617E2[v4]))();
}

uint64_t sub_181A3D730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A3D738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A3D740);
  return result;
}

uint64_t sub_181A3D74C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A3D754);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181A3D758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A3D760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1E0F33708;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.NumberCodingKeys()
{
  return &unk_1E0F33798;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CurrencyCodingKeys()
{
  return &unk_1E0F338B8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.PercentCodingKeys()
{
  return &unk_1E0F33828;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.CodingKeys()
{
  return &unk_1E0F33328;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_181A3D898 + 4 * byte_1820617F1[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_181A3D8CC + 4 * byte_1820617EC[v4]))();
}

uint64_t sub_181A3D8CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A3D8D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A3D8DCLL);
  return result;
}

uint64_t sub_181A3D8E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A3D8F0);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_181A3D8F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A3D8FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys()
{
  return &unk_1E0F339D8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.LocalizedStringResourceCodingKeys()
{
  return &unk_1E0F343F8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Int32CodingKeys()
{
  return &unk_1E0F33B88;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Int64CodingKeys()
{
  return &unk_1E0F33C18;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Uint32CodingKeys()
{
  return &unk_1E0F33DC8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.Uint64CodingKeys()
{
  return &unk_1E0F33E58;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FloatCodingKeys()
{
  return &unk_1E0F33AF8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.DoubleCodingKeys()
{
  return &unk_1E0F33CA8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.CgfloatCodingKeys()
{
  return &unk_1E0F33EE8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.StringCodingKeys()
{
  return &unk_1E0F33D38;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.DateCodingKeys()
{
  return &unk_1E0F33A68;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys()
{
  return &unk_1E0F34248;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys()
{
  return &unk_1E0F34098;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateIntervalCodingKeys()
{
  return &unk_1E0F34368;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedIntCodingKeys()
{
  return &unk_1E0F34008;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedFloatCodingKeys()
{
  return &unk_1E0F341B8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedDecimalCodingKeys()
{
  return &unk_1E0F342D8;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181A3DA68 + 4 * byte_1820617FB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181A3DA9C + 4 * byte_1820617F6[v4]))();
}

uint64_t sub_181A3DA9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A3DAA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A3DAACLL);
  return result;
}

uint64_t sub_181A3DAB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A3DAC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181A3DAC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A3DACC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.FormattedListCodingKeys()
{
  return &unk_1E0F34128;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage.PlaceholderCodingKeys()
{
  return &unk_1E0F33F78;
}

void destroy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1)
{
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_WORD *)(a1 + 120));
}

uint64_t initializeWithCopy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_WORD *)(a2 + 120);
  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_WORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v27 = *(_QWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 88);
  v29 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 104);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = *(_WORD *)(a2 + 120);
  outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 112);
  v24 = *(_WORD *)(a1 + 120);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = v30;
  *(_QWORD *)(a1 + 112) = v31;
  *(_WORD *)(a1 + 120) = v32;
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, v24);
  return a1;
}

uint64_t assignWithTake for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)(a2 + 112);
  v4 = *(_WORD *)(a2 + 120);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_WORD *)(a1 + 120);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = v3;
  *(_WORD *)(a1 + 120) = v4;
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 122))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 120) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 122) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_WORD *)(a1 + 120) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 122) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(uint64_t result, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;

  v2 = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  v5 = *(_WORD *)(result + 120) & 0x107 | (a2 << 14);
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 80) = v2;
  *(_QWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 112) = v4;
  *(_WORD *)(result + 120) = v5;
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format()
{
  return &type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format;
}

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.AttributedStringCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000017 && a2 == 0x80000001823057C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x3233746E69 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x3436746E69 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x3233746E6975 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x3436746E6975 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74616F6C666763 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x676E69727473 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823057E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xED00006574614464
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000182305800
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xEC000000746E4964
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xEE0074616F6C4664
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000182305820
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x657474616D726F66 && a2 == 0xED00007473694C64
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6C6F686563616C70 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t specialized String.LocalizationValue.FormatArgument.CodableStorage.FormattedDateCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33058);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33058);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33058);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys, &unk_1E0F33058);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys, &unk_1E0F33178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys, &unk_1E0F33178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys, &unk_1E0F33178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys, &unk_1E0F33178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle, &type metadata for Date.RelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle, &type metadata for Date.RelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle, &type metadata for Date.RelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.RelativeFormatStyle, &type metadata for Date.RelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys, &unk_1E0F33208);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys, &unk_1E0F33208);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys, &unk_1E0F33208);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys, &unk_1E0F33208);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle, &type metadata for Date.VerbatimFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle, &type metadata for Date.VerbatimFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle, &type metadata for Date.VerbatimFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle, &type metadata for Date.VerbatimFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle, &type metadata for Date.VerbatimFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle, &type metadata for Date.VerbatimFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle, &type metadata for Date.VerbatimFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys, &unk_1E0F330E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys, &unk_1E0F330E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys, &unk_1E0F330E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys, &unk_1E0F330E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle, &type metadata for Date.ISO8601FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys, &unk_1E0F32FC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys, &unk_1E0F32FC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys, &unk_1E0F32FC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys, &unk_1E0F32FC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys and conformance String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys);
  }
  return result;
}

uint64_t specialized String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D695465746164 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x313036386F7369 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D69746162726576 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181A40C08 + 4 * byte_182061805[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181A40C3C + 4 * byte_182061800[v4]))();
}

uint64_t sub_181A40C3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A40C44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A40C4CLL);
  return result;
}

uint64_t sub_181A40C58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A40C60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181A40C64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A40C6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.CodingKeys()
{
  return &unk_1E0F33058;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.DateTimeCodingKeys()
{
  return &unk_1E0F32FC8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.Iso8601CodingKeys()
{
  return &unk_1E0F330E8;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.VerbatimCodingKeys()
{
  return &unk_1E0F33208;
}

uint64_t getEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181A40D48 + 4 * byte_18206180A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181A40D68 + 4 * byte_18206180F[v4]))();
}

_BYTE *sub_181A40D48(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181A40D68(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A40D70(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A40D78(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A40D80(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A40D88(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.RelativeCodingKeys()
{
  return &unk_1E0F33178;
}

uint64_t DateComponents.calendar.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7[2];

  v2 = *a1;
  v3 = a1[1];
  swift_unknownObjectRelease();
  *v1 = v2;
  v1[1] = v3;
  result = v1[2];
  if (result)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v1[3];
    v7[0] = v1[2];
    v7[1] = v6;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter(v7);
  }
  return result;
}

uint64_t DateComponents.timeZone.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  v3 = a1[1];
  v1[2] = *a1;
  v1[3] = v3;
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  if (v2)
  {
    if (*v1)
    {
      v5[0] = v2;
      v5[1] = v3;
      return Calendar.timeZone.setter(v5);
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t DateComponents.era.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 40) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.nanosecond.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 160) = v3;
  *(_BYTE *)(v2 + 168) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekday.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 176) = v3;
  *(_BYTE *)(v2 + 184) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekdayOrdinal.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 192) = v3;
  *(_BYTE *)(v2 + 200) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.quarter.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 208) = v3;
  *(_BYTE *)(v2 + 216) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekOfMonth.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 240) = v3;
  *(_BYTE *)(v2 + 248) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.weekOfYear.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 256) = v3;
  *(_BYTE *)(v2 + 264) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.yearForWeekOfYear.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 272) = v3;
  *(_BYTE *)(v2 + 280) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.dayOfYear.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 104) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.init(component:value:)@<X0>(Swift::Int_optional _@<0:X1, 8:W2.1>, unsigned __int8 *a2@<X0>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  _BYTE v7[288];
  _OWORD __src[18];
  Swift::Int_optional v9;

  v4 = *a2;
  memset(__src, 0, 40);
  BYTE8(__src[2]) = 1;
  *(_QWORD *)&__src[3] = 0;
  BYTE8(__src[3]) = 1;
  *(_QWORD *)&__src[4] = 0;
  BYTE8(__src[4]) = 1;
  *(_QWORD *)&__src[5] = 0;
  BYTE8(__src[5]) = 1;
  *(_QWORD *)&__src[6] = 0;
  BYTE8(__src[6]) = 1;
  *(_QWORD *)&__src[7] = 0;
  BYTE8(__src[7]) = 1;
  *(_QWORD *)&__src[8] = 0;
  BYTE8(__src[8]) = 1;
  *(_QWORD *)&__src[9] = 0;
  BYTE8(__src[9]) = 1;
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 1;
  *(_QWORD *)&__src[11] = 0;
  BYTE8(__src[11]) = 1;
  *(_QWORD *)&__src[12] = 0;
  BYTE8(__src[12]) = 1;
  *(_QWORD *)&__src[13] = 0;
  BYTE8(__src[13]) = 1;
  *(_QWORD *)&__src[14] = 0;
  BYTE8(__src[14]) = 1;
  *(_QWORD *)&__src[15] = 0;
  BYTE8(__src[15]) = 1;
  *(_QWORD *)&__src[16] = 0;
  BYTE8(__src[16]) = 1;
  WORD4(__src[17]) = 513;
  *(_QWORD *)&__src[17] = 0;
  if ((v4 - 14) > 2)
  {
    v7[0] = v4;
    v9.value = _.value;
    v9.is_nil = 0;
    DateComponents.setValue(_:for:)(v9, (Foundation::Calendar::Component)v7);
    memcpy(v7, __src, 0x11AuLL);
    destructiveProjectEnumData for PredicateCodableError(v7, v5);
  }
  else
  {
    _s10Foundation14DateComponentsVSgWOi0_((uint64_t)v7);
  }
  return outlined init with take of DateComponents?((uint64_t)v7, a3);
}

uint64_t key path setter for DateComponents.calendar : DateComponents(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8[2];

  v3 = *a1;
  v4 = a1[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *a2 = v3;
  a2[1] = v4;
  result = a2[2];
  if (result)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = a2[3];
    v8[0] = a2[2];
    v8[1] = v7;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter(v8);
  }
  return result;
}

uint64_t outlined init with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation14DateComponentsVSgWOi0_(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  result = a1 + 8;
  *(_OWORD *)(result + 256) = 0u;
  return result;
}

uint64_t (*DateComponents.calendar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  swift_unknownObjectRetain();
  return DateComponents.calendar.modify;
}

uint64_t DateComponents.calendar.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[1];
  v2 = (_QWORD *)a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v2 = v4;
    v2[1] = v3;
    if (v2[2])
      v5 = v4 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = v2[3];
      v10 = v2[2];
      v11 = v6;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(&v10);
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    *v2 = v4;
    v2[1] = v3;
    result = v2[2];
    if (result)
      v8 = v4 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v2[3];
      v10 = v2[2];
      v11 = v9;
      swift_unknownObjectRetain();
      return Calendar.timeZone.setter(&v10);
    }
  }
  return result;
}

uint64_t key path setter for DateComponents.timeZone : DateComponents(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v3 = *a1;
  v4 = a1[1];
  a2[2] = *a1;
  a2[3] = v4;
  swift_unknownObjectRetain_n();
  result = swift_unknownObjectRelease();
  if (v3)
  {
    if (*a2)
    {
      v6[0] = v3;
      v6[1] = v4;
      return Calendar.timeZone.setter(v6);
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t (*DateComponents.timeZone.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  return DateComponents.timeZone.modify;
}

uint64_t DateComponents.timeZone.modify(uint64_t *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  v3 = (_QWORD *)a1[2];
  v5 = *a1;
  v3[2] = *a1;
  v3[3] = v4;
  swift_unknownObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v5)
    {
      if (*v3)
      {
        v7 = v5;
        v8 = v4;
        Calendar.timeZone.setter(&v7);
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    return swift_unknownObjectRelease();
  }
  result = swift_unknownObjectRelease();
  if (v5)
  {
    if (!*v3)
      return swift_unknownObjectRelease();
    v7 = v5;
    v8 = v4;
    return Calendar.timeZone.setter(&v7);
  }
  return result;
}

uint64_t *(*DateComponents.era.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.era.modify;
}

uint64_t *DateComponents.era.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v4;
  return result;
}

uint64_t *(*DateComponents.year.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.year.modify;
}

uint64_t *DateComponents.year.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v4;
  return result;
}

uint64_t *(*DateComponents.month.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 64);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.month.modify;
}

uint64_t *DateComponents.month.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 64) = v2;
  *(_BYTE *)(v1 + 72) = v4;
  return result;
}

uint64_t *(*DateComponents.day.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.day.modify;
}

uint64_t *DateComponents.day.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 80) = v2;
  *(_BYTE *)(v1 + 88) = v4;
  return result;
}

uint64_t *(*DateComponents.hour.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 120);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 112);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.hour.modify;
}

uint64_t *DateComponents.hour.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 112) = v2;
  *(_BYTE *)(v1 + 120) = v4;
  return result;
}

uint64_t *(*DateComponents.minute.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 136);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 128);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.minute.modify;
}

uint64_t *DateComponents.minute.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 128) = v2;
  *(_BYTE *)(v1 + 136) = v4;
  return result;
}

uint64_t *(*DateComponents.second.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 152);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 144);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.second.modify;
}

uint64_t *DateComponents.second.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 144) = v2;
  *(_BYTE *)(v1 + 152) = v4;
  return result;
}

uint64_t *(*DateComponents.nanosecond.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 168);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 160);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.nanosecond.modify;
}

uint64_t *DateComponents.nanosecond.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 160) = v2;
  *(_BYTE *)(v1 + 168) = v4;
  return result;
}

uint64_t *(*DateComponents.weekday.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 184);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 176);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekday.modify;
}

uint64_t *DateComponents.weekday.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 176) = v2;
  *(_BYTE *)(v1 + 184) = v4;
  return result;
}

uint64_t *(*DateComponents.weekdayOrdinal.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 200);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 192);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekdayOrdinal.modify;
}

uint64_t *DateComponents.weekdayOrdinal.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 192) = v2;
  *(_BYTE *)(v1 + 200) = v4;
  return result;
}

uint64_t *(*DateComponents.quarter.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 216);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 208);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.quarter.modify;
}

uint64_t *DateComponents.quarter.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 208) = v2;
  *(_BYTE *)(v1 + 216) = v4;
  return result;
}

uint64_t *(*DateComponents.weekOfMonth.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 248);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 240);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekOfMonth.modify;
}

uint64_t *DateComponents.weekOfMonth.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 240) = v2;
  *(_BYTE *)(v1 + 248) = v4;
  return result;
}

uint64_t *(*DateComponents.weekOfYear.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 264);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 256);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.weekOfYear.modify;
}

uint64_t *DateComponents.weekOfYear.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 256) = v2;
  *(_BYTE *)(v1 + 264) = v4;
  return result;
}

uint64_t DateComponents.dayOfYear.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t *(*DateComponents.dayOfYear.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.dayOfYear.modify;
}

uint64_t *DateComponents.dayOfYear.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 96) = v2;
  *(_BYTE *)(v1 + 104) = v4;
  return result;
}

uint64_t DateComponents.week.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 224);
}

uint64_t DateComponents.week.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 224) = v3;
  *(_BYTE *)(v2 + 232) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t *(*DateComponents.week.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 232);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 224);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.week.modify;
}

uint64_t *DateComponents.week.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 224) = v2;
  *(_BYTE *)(v1 + 232) = v4;
  return result;
}

uint64_t *(*DateComponents.yearForWeekOfYear.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 280);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 272);
  *(_BYTE *)(a1 + 8) = v2;
  return DateComponents.yearForWeekOfYear.modify;
}

uint64_t *DateComponents.yearForWeekOfYear.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = result[2];
  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(v1 + 272) = v2;
  *(_BYTE *)(v1 + 280) = v4;
  return result;
}

uint64_t DateComponents.isLeapMonth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 281);
}

uint64_t DateComponents.isLeapMonth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 281) = result;
  return result;
}

_BYTE *(*DateComponents.isLeapMonth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 281);
  return DateComponents.isLeapMonth.modify;
}

_BYTE *DateComponents.isLeapMonth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 281) = result[8];
  return result;
}

Swift::Int_optional __swiftcall DateComponents.value(for:)(Foundation::Calendar::Component a1)
{
  uint64_t v1;
  Swift::Int v2;
  Swift::Bool v3;
  Swift::Int_optional result;

  v2 = ((uint64_t (*)(_QWORD, _QWORD))((char *)sub_181A41F0C + 4 * byte_182064DC2[*(unsigned __int8 *)a1]))(*(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
  result.value = v2;
  result.is_nil = v3;
  return result;
}

uint64_t sub_181A41F0C()
{
  return 0;
}

uint64_t sub_181A41F18()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_181A41F24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_181A41F30()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t sub_181A41F3C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t sub_181A41F48()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t sub_181A41F54()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t sub_181A41F60()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t sub_181A41F6C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t sub_181A41F78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t sub_181A41F84()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t sub_181A41F90()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 256);
}

uint64_t sub_181A41F9C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t sub_181A41FA8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t sub_181A41FB4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t DateComponents.isValidDate.getter()
{
  const void *v0;
  double v1;
  uint64_t v2;
  uint64_t ObjectType;
  void (*v4)(_QWORD *__return_ptr, _OWORD *, uint64_t, uint64_t);
  double v5;
  uint64_t v6;
  void (*v7)(double *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t v9;
  double v10;
  double v11;
  _QWORD v12[36];
  uint64_t v13;
  double v14;
  uint64_t v15;
  _OWORD __src[18];
  _OWORD __dst[18];

  memcpy(__dst, v0, 0x11AuLL);
  v1 = *(double *)__dst;
  if (!*(_QWORD *)&__dst[0])
    return 0;
  v2 = *((_QWORD *)&__dst[0] + 1);
  if ((BYTE8(__dst[10]) & 1) != 0)
    goto LABEL_3;
  if (*(uint64_t *)&__dst[10] > 999999999)
    return 0;
  if ((*(_QWORD *)&__dst[10] & 0x8000000000000000) != 0)
  {
LABEL_3:
    ObjectType = swift_getObjectType();
    memcpy(__src, v0, 0x11AuLL);
    v4 = *(void (**)(_QWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v2 + 176);
    swift_unknownObjectRetain();
    v4(v12, __src, ObjectType, v2);
    if ((v12[1] & 1) == 0)
    {
      v5 = *(double *)v12;
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  *(_QWORD *)&__src[2] = *(_QWORD *)&__dst[2];
  BYTE8(__src[2]) = BYTE8(__dst[2]);
  *(_QWORD *)&__src[3] = *(_QWORD *)&__dst[3];
  BYTE8(__src[3]) = BYTE8(__dst[3]);
  *(_QWORD *)&__src[4] = *(_QWORD *)&__dst[4];
  BYTE8(__src[4]) = BYTE8(__dst[4]);
  *(_QWORD *)&__src[5] = *(_QWORD *)&__dst[5];
  BYTE8(__src[5]) = BYTE8(__dst[5]);
  *(_QWORD *)&__src[6] = *(_QWORD *)&__dst[6];
  BYTE8(__src[6]) = BYTE8(__dst[6]);
  *(_QWORD *)&__src[7] = *(_QWORD *)&__dst[7];
  BYTE8(__src[7]) = BYTE8(__dst[7]);
  *(_QWORD *)&__src[8] = *(_QWORD *)&__dst[8];
  BYTE8(__src[8]) = BYTE8(__dst[8]);
  *(_QWORD *)&__src[9] = *(_QWORD *)&__dst[9];
  BYTE8(__src[9]) = BYTE8(__dst[9]);
  *(_QWORD *)&__src[11] = *(_QWORD *)&__dst[11];
  BYTE8(__src[11]) = BYTE8(__dst[11]);
  *(_QWORD *)&__src[12] = *(_QWORD *)&__dst[12];
  BYTE8(__src[12]) = BYTE8(__dst[12]);
  *(_QWORD *)&__src[13] = *(_QWORD *)&__dst[13];
  BYTE8(__src[13]) = BYTE8(__dst[13]);
  *(_QWORD *)&__src[14] = *(_QWORD *)&__dst[14];
  BYTE8(__src[14]) = BYTE8(__dst[14]);
  *(_QWORD *)&__src[15] = *(_QWORD *)&__dst[15];
  BYTE8(__src[15]) = BYTE8(__dst[15]);
  BYTE8(__src[16]) = BYTE8(__dst[16]);
  WORD4(__src[17]) = WORD4(__dst[17]);
  *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[16];
  *(_QWORD *)&__src[17] = *(_QWORD *)&__dst[17];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
  v6 = swift_getObjectType();
  memcpy(v12, __src, 0x11AuLL);
  v7 = *(void (**)(double *__return_ptr, _QWORD *, uint64_t, uint64_t))(v2 + 176);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  outlined retain of DateComponents((uint64_t)__src);
  v7(&v14, v12, v6, v2);
  outlined release of DateComponents((uint64_t)__src);
  outlined release of DateComponents((uint64_t)__src);
  if ((v15 & 1) != 0)
  {
LABEL_8:
    swift_unknownObjectRelease();
    return 0;
  }
  v5 = v14;
LABEL_11:
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v12[0] = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v14, 0);
  specialized Set._Variant.insert(_:)(&v14, 1uLL);
  specialized Set._Variant.insert(_:)(&v14, 9uLL);
  specialized Set._Variant.insert(_:)(&v14, 2uLL);
  specialized Set._Variant.insert(_:)(&v14, 3uLL);
  specialized Set._Variant.insert(_:)(&v14, 4uLL);
  specialized Set._Variant.insert(_:)(&v14, 5uLL);
  specialized Set._Variant.insert(_:)(&v14, 6uLL);
  specialized Set._Variant.insert(_:)(&v14, 7uLL);
  specialized Set._Variant.insert(_:)(&v14, 8uLL);
  specialized Set._Variant.insert(_:)(&v14, 0xAuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xBuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xCuLL);
  specialized Set._Variant.insert(_:)(&v14, 0x11uLL);
  v14 = v1;
  v15 = v2;
  v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v13);
  v10 = 1.59271755e13;
  if (v5 <= 1.59271755e13)
    v10 = v5;
  v11 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v13, &v11, __src);
  swift_bridgeObjectRelease();
  memcpy(v12, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v12);
  swift_unknownObjectRelease();
  if ((BYTE8(__dst[2]) & 1) == 0 && ((v12[5] & 1) != 0 || *(_QWORD *)&__dst[2] != v12[4])
    || (BYTE8(__dst[3]) & 1) == 0 && ((v12[7] & 1) != 0 || *(_QWORD *)&__dst[3] != v12[6])
    || (BYTE8(__dst[13]) & 1) == 0 && ((v12[27] & 1) != 0 || *(_QWORD *)&__dst[13] != v12[26])
    || (BYTE8(__dst[4]) & 1) == 0 && ((v12[9] & 1) != 0 || *(_QWORD *)&__dst[4] != v12[8])
    || (BYTE8(__dst[5]) & 1) == 0 && ((v12[11] & 1) != 0 || *(_QWORD *)&__dst[5] != v12[10])
    || (BYTE8(__dst[7]) & 1) == 0 && ((v12[15] & 1) != 0 || *(_QWORD *)&__dst[7] != v12[14])
    || (BYTE8(__dst[8]) & 1) == 0 && ((v12[17] & 1) != 0 || *(_QWORD *)&__dst[8] != v12[16])
    || (BYTE8(__dst[9]) & 1) == 0 && ((v12[19] & 1) != 0 || *(_QWORD *)&__dst[9] != v12[18])
    || (BYTE8(__dst[11]) & 1) == 0 && ((v12[23] & 1) != 0 || *(_QWORD *)&__dst[11] != v12[22])
    || (BYTE8(__dst[12]) & 1) == 0 && ((v12[25] & 1) != 0 || *(_QWORD *)&__dst[12] != v12[24])
    || (BYTE8(__dst[15]) & 1) == 0 && ((v12[31] & 1) != 0 || *(_QWORD *)&__dst[15] != v12[30])
    || (BYTE8(__dst[16]) & 1) == 0 && ((v12[33] & 1) != 0 || *(_QWORD *)&__dst[16] != v12[32])
    || (BYTE8(__dst[17]) & 1) == 0 && ((v12[35] & 1) != 0 || *(_QWORD *)&__dst[17] != v12[34]))
  {
    return 0;
  }
  if ((BYTE8(__dst[6]) & 1) != 0)
    return 1;
  else
    return (*(_QWORD *)&__dst[6] == v12[12]) & ~LOBYTE(v12[13]);
}

uint64_t DateComponents.isValidDate(in:)(double *a1)
{
  const void *v1;
  uint64_t v2;
  double v3;
  uint64_t ObjectType;
  double v5;
  uint64_t v6;
  void (*v7)(double *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v9;
  double v10;
  double v11;
  _QWORD v12[36];
  uint64_t v13;
  double v14;
  uint64_t v15;
  _OWORD __src[18];
  _OWORD __dst[18];

  v3 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  memcpy(__dst, v1, 0x11AuLL);
  if ((BYTE8(__dst[10]) & 1) != 0)
    goto LABEL_2;
  if (*(uint64_t *)&__dst[10] > 999999999)
    return 0;
  if ((*(_QWORD *)&__dst[10] & 0x8000000000000000) != 0)
  {
LABEL_2:
    ObjectType = swift_getObjectType();
    memcpy(__src, v1, 0x11AuLL);
    (*(void (**)(_QWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v2 + 176))(v12, __src, ObjectType, v2);
    if ((v12[1] & 1) == 0)
    {
      v5 = *(double *)v12;
      goto LABEL_8;
    }
    return 0;
  }
  *(_QWORD *)&__src[2] = *(_QWORD *)&__dst[2];
  BYTE8(__src[2]) = BYTE8(__dst[2]);
  *(_QWORD *)&__src[3] = *(_QWORD *)&__dst[3];
  BYTE8(__src[3]) = BYTE8(__dst[3]);
  *(_QWORD *)&__src[4] = *(_QWORD *)&__dst[4];
  BYTE8(__src[4]) = BYTE8(__dst[4]);
  *(_QWORD *)&__src[5] = *(_QWORD *)&__dst[5];
  BYTE8(__src[5]) = BYTE8(__dst[5]);
  *(_QWORD *)&__src[6] = *(_QWORD *)&__dst[6];
  BYTE8(__src[6]) = BYTE8(__dst[6]);
  *(_QWORD *)&__src[7] = *(_QWORD *)&__dst[7];
  BYTE8(__src[7]) = BYTE8(__dst[7]);
  *(_QWORD *)&__src[8] = *(_QWORD *)&__dst[8];
  BYTE8(__src[8]) = BYTE8(__dst[8]);
  *(_QWORD *)&__src[9] = *(_QWORD *)&__dst[9];
  BYTE8(__src[9]) = BYTE8(__dst[9]);
  *(_QWORD *)&__src[11] = *(_QWORD *)&__dst[11];
  BYTE8(__src[11]) = BYTE8(__dst[11]);
  *(_QWORD *)&__src[12] = *(_QWORD *)&__dst[12];
  BYTE8(__src[12]) = BYTE8(__dst[12]);
  *(_QWORD *)&__src[13] = *(_QWORD *)&__dst[13];
  BYTE8(__src[13]) = BYTE8(__dst[13]);
  *(_QWORD *)&__src[14] = *(_QWORD *)&__dst[14];
  BYTE8(__src[14]) = BYTE8(__dst[14]);
  *(_QWORD *)&__src[15] = *(_QWORD *)&__dst[15];
  BYTE8(__src[15]) = BYTE8(__dst[15]);
  BYTE8(__src[16]) = BYTE8(__dst[16]);
  WORD4(__src[17]) = WORD4(__dst[17]);
  *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[16];
  *(_QWORD *)&__src[17] = *(_QWORD *)&__dst[17];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
  v6 = swift_getObjectType();
  memcpy(v12, __src, 0x11AuLL);
  v7 = *(void (**)(double *__return_ptr, _QWORD *, uint64_t, uint64_t))(v2 + 176);
  outlined retain of DateComponents((uint64_t)__dst);
  outlined retain of DateComponents((uint64_t)__src);
  v7(&v14, v12, v6, v2);
  outlined release of DateComponents((uint64_t)__src);
  outlined release of DateComponents((uint64_t)__src);
  result = 0;
  if ((v15 & 1) != 0)
    return result;
  v5 = v14;
LABEL_8:
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v12[0] = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v14, 0);
  specialized Set._Variant.insert(_:)(&v14, 1uLL);
  specialized Set._Variant.insert(_:)(&v14, 9uLL);
  specialized Set._Variant.insert(_:)(&v14, 2uLL);
  specialized Set._Variant.insert(_:)(&v14, 3uLL);
  specialized Set._Variant.insert(_:)(&v14, 4uLL);
  specialized Set._Variant.insert(_:)(&v14, 5uLL);
  specialized Set._Variant.insert(_:)(&v14, 6uLL);
  specialized Set._Variant.insert(_:)(&v14, 7uLL);
  specialized Set._Variant.insert(_:)(&v14, 8uLL);
  specialized Set._Variant.insert(_:)(&v14, 0xAuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xBuLL);
  specialized Set._Variant.insert(_:)(&v14, 0xCuLL);
  specialized Set._Variant.insert(_:)(&v14, 0x11uLL);
  v14 = v3;
  v15 = v2;
  v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v13);
  v10 = 1.59271755e13;
  if (v5 <= 1.59271755e13)
    v10 = v5;
  v11 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v13, &v11, __src);
  swift_bridgeObjectRelease();
  memcpy(v12, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v12);
  if ((BYTE8(__dst[2]) & 1) == 0 && ((v12[5] & 1) != 0 || *(_QWORD *)&__dst[2] != v12[4])
    || (BYTE8(__dst[3]) & 1) == 0 && ((v12[7] & 1) != 0 || *(_QWORD *)&__dst[3] != v12[6])
    || (BYTE8(__dst[13]) & 1) == 0 && ((v12[27] & 1) != 0 || *(_QWORD *)&__dst[13] != v12[26])
    || (BYTE8(__dst[4]) & 1) == 0 && ((v12[9] & 1) != 0 || *(_QWORD *)&__dst[4] != v12[8])
    || (BYTE8(__dst[5]) & 1) == 0 && ((v12[11] & 1) != 0 || *(_QWORD *)&__dst[5] != v12[10])
    || (BYTE8(__dst[7]) & 1) == 0 && ((v12[15] & 1) != 0 || *(_QWORD *)&__dst[7] != v12[14])
    || (BYTE8(__dst[8]) & 1) == 0 && ((v12[17] & 1) != 0 || *(_QWORD *)&__dst[8] != v12[16])
    || (BYTE8(__dst[9]) & 1) == 0 && ((v12[19] & 1) != 0 || *(_QWORD *)&__dst[9] != v12[18])
    || (BYTE8(__dst[11]) & 1) == 0 && ((v12[23] & 1) != 0 || *(_QWORD *)&__dst[11] != v12[22])
    || (BYTE8(__dst[12]) & 1) == 0 && ((v12[25] & 1) != 0 || *(_QWORD *)&__dst[12] != v12[24])
    || (BYTE8(__dst[15]) & 1) == 0 && ((v12[31] & 1) != 0 || *(_QWORD *)&__dst[15] != v12[30])
    || (BYTE8(__dst[16]) & 1) == 0 && ((v12[33] & 1) != 0 || *(_QWORD *)&__dst[16] != v12[32])
    || (BYTE8(__dst[17]) & 1) == 0 && ((v12[35] & 1) != 0 || *(_QWORD *)&__dst[17] != v12[34]))
  {
    return 0;
  }
  if ((BYTE8(__dst[6]) & 1) != 0)
    return 1;
  else
    return (*(_QWORD *)&__dst[6] == v12[12]) & ~LOBYTE(v12[13]);
}

uint64_t DateComponents.scaled(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  _BYTE v47[23];
  char v48;
  _BYTE v49[7];
  char v50;
  _BYTE v51[7];
  char v52;
  int v53;
  char v54;
  __int128 v55;
  __int128 v56;
  _QWORD __dst[38];

  v3 = v2;
  memcpy(__dst, v3, 0x11AuLL);
  v55 = *v3;
  v56 = v3[1];
  v54 = __dst[5];
  v53 = HIDWORD(__dst[5]);
  LOBYTE(v53) = BYTE4(__dst[5]);
  v52 = __dst[7];
  *(_DWORD *)&v51[3] = HIDWORD(__dst[7]);
  *(_DWORD *)v51 = *(_DWORD *)((char *)&__dst[7] + 1);
  v50 = __dst[9];
  *(_DWORD *)&v49[3] = HIDWORD(__dst[9]);
  *(_DWORD *)v49 = *(_DWORD *)((char *)&__dst[9] + 1);
  v48 = __dst[11];
  v6 = __dst[14];
  *(_QWORD *)&v47[15] = __dst[13];
  *(_OWORD *)v47 = *(_OWORD *)((char *)&__dst[11] + 1);
  v46 = __dst[15];
  v7 = __dst[16];
  v45 = __dst[17];
  v8 = __dst[18];
  v44 = __dst[19];
  v9 = __dst[20];
  v43 = __dst[21];
  v10 = __dst[26];
  v42 = __dst[27];
  v41 = __dst[29];
  v11 = __dst[30];
  v40 = __dst[31];
  result = __dst[32];
  v39 = __dst[33];
  v13 = __dst[34];
  v14 = __dst[35];
  v38 = BYTE1(__dst[35]);
  if ((__dst[5] & 1) != 0)
  {
    v37 = __dst[4];
    v17 = __dst[6];
    if ((__dst[7] & 1) != 0)
      goto LABEL_6;
  }
  else
  {
    v15 = __dst[4] * a1;
    if ((unsigned __int128)(__dst[4] * (__int128)a1) >> 64 != (__dst[4] * a1) >> 63)
    {
      __break(1u);
      goto LABEL_80;
    }
    v16 = v15 == 0x7FFFFFFFFFFFFFFFLL;
    if (v15 == 0x7FFFFFFFFFFFFFFFLL)
      v15 = 0;
    v37 = v15;
    v54 = v16;
    v17 = __dst[6];
    if ((__dst[7] & 1) != 0)
    {
LABEL_6:
      v18 = __dst[8];
      if ((__dst[9] & 1) != 0)
        goto LABEL_7;
      goto LABEL_24;
    }
  }
  v21 = v17 * a1;
  if ((unsigned __int128)(v17 * (__int128)a1) >> 64 != (v17 * a1) >> 63)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    v17 = 0;
  else
    v17 *= a1;
  v52 = v21 == 0x7FFFFFFFFFFFFFFFLL;
  v18 = __dst[8];
  if ((__dst[9] & 1) != 0)
  {
LABEL_7:
    v19 = __dst[10];
    if ((__dst[11] & 1) != 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_24:
  v22 = v18 * a1;
  if ((unsigned __int128)(v18 * (__int128)a1) >> 64 != (v18 * a1) >> 63)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v22 == 0x7FFFFFFFFFFFFFFFLL)
    v18 = 0;
  else
    v18 *= a1;
  v50 = v22 == 0x7FFFFFFFFFFFFFFFLL;
  v19 = __dst[10];
  if ((__dst[11] & 1) != 0)
  {
LABEL_8:
    if ((__dst[15] & 1) != 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_29:
  v23 = v19 * a1;
  if ((unsigned __int128)(v19 * (__int128)a1) >> 64 != (v19 * a1) >> 63)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v23 == 0x7FFFFFFFFFFFFFFFLL)
    v19 = 0;
  else
    v19 *= a1;
  v48 = v23 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[15] & 1) != 0)
  {
LABEL_9:
    if ((__dst[17] & 1) != 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_34:
  v24 = __dst[14] * a1;
  if ((unsigned __int128)(__dst[14] * (__int128)a1) >> 64 != (__dst[14] * a1) >> 63)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
    v6 = 0;
  else
    v6 = __dst[14] * a1;
  v46 = v24 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[17] & 1) != 0)
  {
LABEL_10:
    if ((__dst[19] & 1) != 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_39:
  v25 = __dst[16] * a1;
  if ((unsigned __int128)(__dst[16] * (__int128)a1) >> 64 != (__dst[16] * a1) >> 63)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v25 == 0x7FFFFFFFFFFFFFFFLL)
    v7 = 0;
  else
    v7 = __dst[16] * a1;
  v45 = v25 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[19] & 1) != 0)
  {
LABEL_11:
    if ((__dst[21] & 1) != 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_44:
  v26 = __dst[18] * a1;
  if ((unsigned __int128)(__dst[18] * (__int128)a1) >> 64 != (__dst[18] * a1) >> 63)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v26 == 0x7FFFFFFFFFFFFFFFLL)
    v8 = 0;
  else
    v8 = __dst[18] * a1;
  v44 = v26 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[21] & 1) != 0)
  {
LABEL_12:
    if ((__dst[27] & 1) != 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_49:
  v27 = __dst[20] * a1;
  if ((unsigned __int128)(__dst[20] * (__int128)a1) >> 64 != (__dst[20] * a1) >> 63)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v27 == 0x7FFFFFFFFFFFFFFFLL)
    v9 = 0;
  else
    v9 = __dst[20] * a1;
  v43 = v27 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[27] & 1) != 0)
  {
LABEL_13:
    v20 = __dst[28];
    if ((__dst[29] & 1) != 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_54:
  v28 = __dst[26] * a1;
  if ((unsigned __int128)(__dst[26] * (__int128)a1) >> 64 != (__dst[26] * a1) >> 63)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v28 == 0x7FFFFFFFFFFFFFFFLL)
    v10 = 0;
  else
    v10 = __dst[26] * a1;
  v42 = v28 == 0x7FFFFFFFFFFFFFFFLL;
  v20 = __dst[28];
  if ((__dst[29] & 1) != 0)
  {
LABEL_14:
    if ((__dst[31] & 1) != 0)
      goto LABEL_15;
    goto LABEL_64;
  }
LABEL_59:
  v29 = v20 * a1;
  if ((unsigned __int128)(v20 * (__int128)a1) >> 64 != (v20 * a1) >> 63)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v29 == 0x7FFFFFFFFFFFFFFFLL)
    v20 = 0;
  else
    v20 *= a1;
  v41 = v29 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[31] & 1) != 0)
  {
LABEL_15:
    if ((__dst[33] & 1) != 0)
      goto LABEL_16;
    goto LABEL_69;
  }
LABEL_64:
  v30 = __dst[30] * a1;
  if ((unsigned __int128)(__dst[30] * (__int128)a1) >> 64 != (__dst[30] * a1) >> 63)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v30 == 0x7FFFFFFFFFFFFFFFLL)
    v11 = 0;
  else
    v11 = __dst[30] * a1;
  v40 = v30 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[33] & 1) != 0)
  {
LABEL_16:
    if ((__dst[35] & 1) != 0)
    {
LABEL_78:
      *(_DWORD *)(a2 + 41) = *(_DWORD *)((char *)&__dst[5] + 1);
      *(_DWORD *)(a2 + 44) = v53;
      *(_DWORD *)(a2 + 57) = *(_DWORD *)v51;
      *(_DWORD *)(a2 + 60) = *(_DWORD *)&v51[3];
      *(_DWORD *)(a2 + 76) = *(_DWORD *)&v49[3];
      *(_DWORD *)(a2 + 73) = *(_DWORD *)v49;
      *(_DWORD *)(a2 + 121) = *(_DWORD *)((char *)&__dst[15] + 1);
      v33 = HIDWORD(__dst[17]);
      *(_DWORD *)(a2 + 124) = HIDWORD(__dst[15]);
      *(_DWORD *)(a2 + 137) = *(_DWORD *)((char *)&__dst[17] + 1);
      *(_DWORD *)(a2 + 140) = v33;
      *(_DWORD *)(a2 + 156) = HIDWORD(__dst[19]);
      *(_DWORD *)(a2 + 153) = *(_DWORD *)((char *)&__dst[19] + 1);
      *(_DWORD *)(a2 + 268) = HIDWORD(__dst[33]);
      *(_DWORD *)(a2 + 265) = *(_DWORD *)((char *)&__dst[33] + 1);
      v34 = HIDWORD(__dst[29]);
      *(_DWORD *)(a2 + 220) = HIDWORD(__dst[27]);
      *(_DWORD *)(a2 + 217) = *(_DWORD *)((char *)&__dst[27] + 1);
      *(_DWORD *)(a2 + 236) = v34;
      *(_DWORD *)(a2 + 233) = *(_DWORD *)((char *)&__dst[29] + 1);
      *(_DWORD *)(a2 + 249) = *(_DWORD *)((char *)&__dst[31] + 1);
      *(_DWORD *)(a2 + 252) = HIDWORD(__dst[31]);
      *(_QWORD *)(a2 + 32) = v37;
      *(_BYTE *)(a2 + 40) = v54;
      *(_QWORD *)(a2 + 48) = v17;
      *(_BYTE *)(a2 + 56) = v52;
      *(_QWORD *)(a2 + 64) = v18;
      *(_BYTE *)(a2 + 72) = v50;
      *(_QWORD *)(a2 + 80) = v19;
      *(_BYTE *)(a2 + 88) = v48;
      *(_QWORD *)(a2 + 104) = *(_QWORD *)&v47[15];
      *(_QWORD *)(a2 + 112) = v6;
      *(_BYTE *)(a2 + 120) = v46;
      *(_QWORD *)(a2 + 128) = v7;
      *(_BYTE *)(a2 + 136) = v45;
      *(_QWORD *)(a2 + 144) = v8;
      *(_BYTE *)(a2 + 152) = v44;
      *(_QWORD *)(a2 + 160) = v9;
      *(_BYTE *)(a2 + 168) = v43;
      v35 = *(_OWORD *)((char *)&__dst[21] + 1);
      v36 = *(_OWORD *)((char *)&__dst[23] + 1);
      *(_QWORD *)(a2 + 200) = __dst[25];
      *(_QWORD *)(a2 + 208) = v10;
      *(_BYTE *)(a2 + 216) = v42;
      *(_QWORD *)(a2 + 224) = v20;
      *(_BYTE *)(a2 + 232) = v41;
      *(_QWORD *)(a2 + 240) = v11;
      *(_BYTE *)(a2 + 248) = v40;
      *(_QWORD *)(a2 + 256) = result;
      *(_BYTE *)(a2 + 264) = v39;
      *(_QWORD *)(a2 + 272) = v13;
      *(_BYTE *)(a2 + 280) = v14;
      *(_BYTE *)(a2 + 281) = v38;
      *(_OWORD *)a2 = v55;
      *(_OWORD *)(a2 + 16) = v56;
      *(_OWORD *)(a2 + 89) = *(_OWORD *)v47;
      *(_OWORD *)(a2 + 185) = v36;
      *(_OWORD *)(a2 + 169) = v35;
      return outlined retain of DateComponents((uint64_t)__dst);
    }
    goto LABEL_74;
  }
LABEL_69:
  v31 = __dst[32] * a1;
  if ((unsigned __int128)(__dst[32] * (__int128)a1) >> 64 != (__dst[32] * a1) >> 63)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v31 == 0x7FFFFFFFFFFFFFFFLL)
    result = 0;
  else
    result = __dst[32] * a1;
  v39 = v31 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[35] & 1) != 0)
    goto LABEL_78;
LABEL_74:
  v32 = __dst[34] * a1;
  if ((unsigned __int128)(__dst[34] * (__int128)a1) >> 64 == (__dst[34] * a1) >> 63)
  {
    v14 = v32 == 0x7FFFFFFFFFFFFFFFLL;
    if (v32 == 0x7FFFFFFFFFFFFFFFLL)
      v13 = 0;
    else
      v13 = __dst[34] * a1;
    goto LABEL_78;
  }
LABEL_91:
  __break(1u);
  return result;
}

void DateComponents.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  Swift::UInt8 v12;
  Swift::UInt v13;
  Swift::UInt v14;
  Swift::UInt v15;
  Swift::UInt v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  Swift::UInt v22;
  Swift::UInt v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::UInt v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 40);
  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD *)(v1 + 48);
  v6 = *(unsigned __int8 *)(v1 + 56);
  v15 = *(_QWORD *)(v1 + 64);
  v16 = *(_QWORD *)(v1 + 80);
  v28 = *(unsigned __int8 *)(v1 + 72);
  v29 = *(unsigned __int8 *)(v1 + 88);
  v27 = *(_QWORD *)(v1 + 96);
  v41 = *(unsigned __int8 *)(v1 + 104);
  v30 = *(unsigned __int8 *)(v1 + 120);
  v17 = *(_QWORD *)(v1 + 112);
  v18 = *(_QWORD *)(v1 + 128);
  v31 = *(unsigned __int8 *)(v1 + 136);
  v19 = *(_QWORD *)(v1 + 144);
  v32 = *(unsigned __int8 *)(v1 + 152);
  v20 = *(_QWORD *)(v1 + 160);
  v33 = *(unsigned __int8 *)(v1 + 168);
  v21 = *(_QWORD *)(v1 + 176);
  v34 = *(unsigned __int8 *)(v1 + 184);
  v22 = *(_QWORD *)(v1 + 192);
  v35 = *(unsigned __int8 *)(v1 + 200);
  v23 = *(_QWORD *)(v1 + 208);
  v36 = *(unsigned __int8 *)(v1 + 216);
  v24 = *(_QWORD *)(v1 + 240);
  v39 = *(unsigned __int8 *)(v1 + 280);
  v37 = *(unsigned __int8 *)(v1 + 248);
  v25 = *(_QWORD *)(v1 + 256);
  v38 = *(unsigned __int8 *)(v1 + 264);
  v26 = *(_QWORD *)(v1 + 272);
  v40 = *(unsigned __int8 *)(v1 + 281);
  if (*(_QWORD *)v1)
  {
    v7 = *(_QWORD *)(v1 + 8);
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 120);
    swift_unknownObjectRetain();
    v9(a1, ObjectType, v7);
    swift_unknownObjectRelease();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v4)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      v10 = swift_getObjectType();
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
      swift_unknownObjectRetain();
      v11(a1, v10, v3);
      swift_unknownObjectRelease();
      if (v5)
        goto LABEL_4;
LABEL_8:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v13);
      if (!v6)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (!v5)
    goto LABEL_8;
LABEL_4:
  Hasher._combine(_:)(0);
  if (!v6)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    goto LABEL_10;
  }
LABEL_9:
  Hasher._combine(_:)(0);
LABEL_10:
  if (v28)
  {
    Hasher._combine(_:)(0);
    if (!v29)
      goto LABEL_12;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v29)
    {
LABEL_12:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v16);
      if (!v30)
        goto LABEL_13;
      goto LABEL_25;
    }
  }
  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v31)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v32)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v33)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_16:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v34)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v35)
      goto LABEL_18;
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v36)
      goto LABEL_19;
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_19:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v37)
      goto LABEL_20;
    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_20:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v38)
      goto LABEL_21;
LABEL_33:
    Hasher._combine(_:)(0);
    if (!v39)
      goto LABEL_22;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (v38)
    goto LABEL_33;
LABEL_21:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v25);
  if (!v39)
  {
LABEL_22:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
LABEL_35:
  if (v40 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v40 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  if (v41)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
}

Swift::Int DateComponents.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t ObjectType;
  void (*v9)(_BYTE *, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt8 v12;
  Swift::UInt v14;
  Swift::UInt v15;
  Swift::UInt v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  Swift::UInt v22;
  Swift::UInt v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::UInt v27;
  Swift::UInt v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _BYTE v42[80];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((unsigned __int8 *)v0 + 40);
  v14 = v0[4];
  v15 = v0[6];
  v6 = *((unsigned __int8 *)v0 + 56);
  v16 = v0[8];
  v17 = v0[10];
  v29 = *((unsigned __int8 *)v0 + 72);
  v30 = *((unsigned __int8 *)v0 + 88);
  v28 = v0[12];
  v7 = *((unsigned __int8 *)v0 + 104);
  v18 = v0[14];
  v19 = v0[16];
  v31 = *((unsigned __int8 *)v0 + 120);
  v32 = *((unsigned __int8 *)v0 + 136);
  v20 = v0[18];
  v21 = v0[20];
  v33 = *((unsigned __int8 *)v0 + 152);
  v34 = *((unsigned __int8 *)v0 + 168);
  v22 = v0[22];
  v23 = v0[24];
  v35 = *((unsigned __int8 *)v0 + 184);
  v36 = *((unsigned __int8 *)v0 + 200);
  v24 = v0[26];
  v25 = v0[30];
  v37 = *((unsigned __int8 *)v0 + 216);
  v38 = *((unsigned __int8 *)v0 + 248);
  v39 = *((unsigned __int8 *)v0 + 264);
  v40 = *((unsigned __int8 *)v0 + 280);
  v26 = v0[32];
  v27 = v0[34];
  v41 = *((unsigned __int8 *)v0 + 281);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    v9 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120);
    swift_unknownObjectRetain();
    v9(v42, ObjectType, v1);
    swift_unknownObjectRelease();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      v10 = swift_getObjectType();
      v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 112);
      swift_unknownObjectRetain();
      v11(v42, v10, v4);
      swift_unknownObjectRelease();
      if (v5)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  Hasher._combine(_:)(0);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(0);
    if (!v6)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v14);
  if (!v6)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v29)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    if (!v30)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v31)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v32)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v33)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_10:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v34)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v35)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v36)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v37)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v38)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v38)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
    if (!v39)
      goto LABEL_16;
LABEL_32:
    Hasher._combine(_:)(0);
    if (!v40)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (v39)
    goto LABEL_32;
LABEL_16:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v26);
  if (!v40)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(0);
LABEL_34:
  if (v41 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v41 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DateComponents()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t ObjectType;
  void (*v9)(_BYTE *, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt8 v12;
  Swift::UInt v14;
  Swift::UInt v15;
  Swift::UInt v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  Swift::UInt v22;
  Swift::UInt v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::UInt v27;
  Swift::UInt v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _BYTE v42[80];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((unsigned __int8 *)v0 + 40);
  v14 = v0[4];
  v15 = v0[6];
  v6 = *((unsigned __int8 *)v0 + 56);
  v16 = v0[8];
  v17 = v0[10];
  v29 = *((unsigned __int8 *)v0 + 72);
  v30 = *((unsigned __int8 *)v0 + 88);
  v28 = v0[12];
  v7 = *((unsigned __int8 *)v0 + 104);
  v18 = v0[14];
  v19 = v0[16];
  v31 = *((unsigned __int8 *)v0 + 120);
  v32 = *((unsigned __int8 *)v0 + 136);
  v20 = v0[18];
  v21 = v0[20];
  v33 = *((unsigned __int8 *)v0 + 152);
  v34 = *((unsigned __int8 *)v0 + 168);
  v22 = v0[22];
  v23 = v0[24];
  v35 = *((unsigned __int8 *)v0 + 184);
  v36 = *((unsigned __int8 *)v0 + 200);
  v24 = v0[26];
  v25 = v0[30];
  v37 = *((unsigned __int8 *)v0 + 216);
  v38 = *((unsigned __int8 *)v0 + 248);
  v39 = *((unsigned __int8 *)v0 + 264);
  v40 = *((unsigned __int8 *)v0 + 280);
  v26 = v0[32];
  v27 = v0[34];
  v41 = *((unsigned __int8 *)v0 + 281);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    v9 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120);
    swift_unknownObjectRetain();
    v9(v42, ObjectType, v1);
    swift_unknownObjectRelease();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      v10 = swift_getObjectType();
      v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 112);
      swift_unknownObjectRetain();
      v11(v42, v10, v4);
      swift_unknownObjectRelease();
      if (v5)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  Hasher._combine(_:)(0);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(0);
    if (!v6)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v14);
  if (!v6)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v29)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    if (!v30)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v31)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v32)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v33)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_10:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v34)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v35)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v36)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v37)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v38)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v38)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
    if (!v39)
      goto LABEL_16;
LABEL_32:
    Hasher._combine(_:)(0);
    if (!v40)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (v39)
    goto LABEL_32;
LABEL_16:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v26);
  if (!v40)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(0);
LABEL_34:
  if (v41 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v41 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  return Hasher._finalize()();
}

uint64_t DateComponents.debugDescription.getter()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  _BYTE v16[32];
  Swift::String v17;
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE v25[296];

  v1 = type metadata accessor for Mirror();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v25, v0, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v25);
  DateComponents.customMirror.getter((uint64_t)v4);
  v5 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v23 = 0;
  v24 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((_QWORD *)&v22 + 1))
  {
    v14[1] = v5;
    do
    {
      v18 = v20;
      v19[0] = v21;
      v19[1] = v22;
      v17._countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      v6 = (void *)*((_QWORD *)&v20 + 1);
      v7 = v20;
      v15 = v20;
      outlined init with copy of Any((uint64_t)v19, (uint64_t)v16);
      if (v6)
      {
        v8 = v6;
      }
      else
      {
        v7 = 0;
        v8 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v9._countAndFlagsBits = v7;
      v9._object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 8250;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      _print_unlocked<A, B>(_:_:)();
      v11._countAndFlagsBits = 32;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v18);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((_QWORD *)&v22 + 1));
    v12 = v23;
  }
  else
  {
    v12 = 0;
  }
  swift_release();
  swift_release();
  outlined release of DateComponents((uint64_t)v25);
  return v12;
}

uint64_t DateComponents.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A43FC0 + 4 * byte_182064DD4[a1]))(0x7261646E656C6163, 0xE800000000000000);
}

uint64_t sub_181A43FC0()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181A43FD4()
{
  return 6386277;
}

uint64_t sub_181A43FE4()
{
  return 1918985593;
}

uint64_t sub_181A43FF4()
{
  return 0x68746E6F6DLL;
}

uint64_t sub_181A44008()
{
  return 7954788;
}

uint64_t sub_181A44018()
{
  return 1920298856;
}

uint64_t sub_181A44028()
{
  return 0x6574756E696DLL;
}

uint64_t sub_181A4403C()
{
  return 0x646E6F636573;
}

uint64_t sub_181A44050()
{
  return 0x6F6365736F6E616ELL;
}

uint64_t sub_181A4406C()
{
  return 0x7961646B656577;
}

uint64_t sub_181A44084()
{
  return 0x4F7961646B656577;
}

uint64_t sub_181A440A8()
{
  return 0x72657472617571;
}

uint64_t sub_181A440C0()
{
  return 0x6F4D664F6B656577;
}

uint64_t sub_181A4412C()
{
  return 0x616559664F796164;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DateComponents.CodingKeys@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized DateComponents.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DateComponents.CodingKeys()
{
  unsigned __int8 *v0;

  return DateComponents.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DateComponents.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized DateComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance DateComponents.CodingKeys@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized DateComponents.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DateComponents.CodingKeys()
{
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DateComponents.CodingKeys()
{
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t DateComponents.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[2];
  __int128 v84;
  _OWORD v85[6];
  uint64_t v86;
  BOOL v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  BOOL v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DateComponents.CodingKeys>);
  v5 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v82 = v5;
    LOBYTE(v84) = 0;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v8 = v85[0];
    LOBYTE(v84) = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v80 = *((_QWORD *)&v8 + 1);
    v81 = v8;
    v9 = v85[0];
    LOBYTE(v85[0]) = 2;
    v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v76 = v11;
    v77 = v10;
    v78 = *((_QWORD *)&v9 + 1);
    v79 = v9;
    LOBYTE(v85[0]) = 3;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v14 = v13;
    v75 = v12;
    LOBYTE(v85[0]) = 4;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v73 = v16;
    v74 = v15;
    LOBYTE(v85[0]) = 5;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v71 = v18;
    v72 = v17;
    LOBYTE(v85[0]) = 6;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v69 = v20;
    v70 = v19;
    LOBYTE(v85[0]) = 7;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v66 = v22;
    v68 = v21;
    LOBYTE(v85[0]) = 8;
    v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v65 = v23;
    LOBYTE(v85[0]) = 9;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v64 = v26;
    v27 = v25;
    LOBYTE(v85[0]) = 10;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v63 = v29;
    v30 = v28;
    LOBYTE(v85[0]) = 11;
    v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v61 = v31;
    LOBYTE(v85[0]) = 12;
    v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v59 = v32;
    LOBYTE(v85[0]) = 13;
    v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v57 = v33;
    LOBYTE(v85[0]) = 14;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v55 = v34;
    LOBYTE(v85[0]) = 15;
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v53 = v35;
    LOBYTE(v85[0]) = 16;
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v100 = 17;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v51 = v36;
    *(_QWORD *)&v84 = v81;
    *((_QWORD *)&v84 + 1) = v80;
    v83[0] = v79;
    v83[1] = v78;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v84, v83, v77, v76 & 1, v75, v14 & 1, v74, v73 & 1, (uint64_t)v85, v72, v71 & 1, v70, v69 & 1, v68, v66 & 1, v67, v65 & 1, v27, v64 & 1,
      v30,
      v63 & 1,
      v62,
      v61 & 1,
      v60,
      v59 & 1,
      v58,
      v57 & 1,
      v56,
      v55 & 1,
      v54,
      v53 & 1);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v7, v119);
    v115 = v85[2];
    v116 = v85[3];
    v117 = v85[4];
    v118 = v85[5];
    v113 = v85[0];
    v114 = v85[1];
    v37 = v86;
    v38 = v87;
    v101 = v88;
    v102 = v89;
    v105 = v92;
    v106 = v93;
    v103 = v90;
    v104 = v91;
    v110 = v97;
    v111 = v98;
    v108 = v95;
    v109 = v96;
    v39 = v99;
    if (v52 != 2)
      v39 = v52;
    v107 = v94;
    if ((v51 & 1) == 0)
    {
      v37 = v50;
      v38 = v50 == 0x7FFFFFFFFFFFFFFFLL;
      if (v50 == 0x7FFFFFFFFFFFFFFFLL)
        v37 = 0;
      v112 = v50 == 0x7FFFFFFFFFFFFFFFLL;
    }
    v40 = v116;
    *(_OWORD *)(a2 + 32) = v115;
    *(_OWORD *)(a2 + 48) = v40;
    v41 = v118;
    *(_OWORD *)(a2 + 64) = v117;
    *(_OWORD *)(a2 + 80) = v41;
    v42 = v114;
    *(_OWORD *)a2 = v113;
    *(_OWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 96) = v37;
    *(_BYTE *)(a2 + 104) = v38;
    v43 = v101;
    v44 = v102;
    v45 = v104;
    *(_OWORD *)(a2 + 137) = v103;
    *(_OWORD *)(a2 + 121) = v44;
    *(_OWORD *)(a2 + 105) = v43;
    v46 = v108;
    *(_OWORD *)(a2 + 201) = v107;
    v47 = v105;
    *(_OWORD *)(a2 + 185) = v106;
    *(_OWORD *)(a2 + 169) = v47;
    *(_OWORD *)(a2 + 153) = v45;
    v48 = v109;
    v49 = v110;
    *(_OWORD *)(a2 + 265) = v111;
    *(_OWORD *)(a2 + 249) = v49;
    *(_OWORD *)(a2 + 233) = v48;
    *(_OWORD *)(a2 + 217) = v46;
    *(_BYTE *)(a2 + 281) = v39;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t DateComponents.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v13[2];
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DateComponents.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v43 = v1[3];
  v44 = v9;
  v10 = v1[4];
  v48 = *((unsigned __int8 *)v1 + 40);
  v41 = v1[6];
  v42 = v10;
  v40 = *((unsigned __int8 *)v1 + 56);
  v39 = v1[8];
  LODWORD(v10) = *((unsigned __int8 *)v1 + 72);
  v36 = v1[10];
  v37 = *((unsigned __int8 *)v1 + 88);
  v38 = v10;
  v14 = v1[12];
  v13[1] = *((unsigned __int8 *)v1 + 104);
  v34 = v1[14];
  v35 = *((unsigned __int8 *)v1 + 120);
  v32 = v1[16];
  v33 = *((unsigned __int8 *)v1 + 136);
  v30 = v1[18];
  v31 = *((unsigned __int8 *)v1 + 152);
  v28 = v1[20];
  v29 = *((unsigned __int8 *)v1 + 168);
  v26 = v1[22];
  v27 = *((unsigned __int8 *)v1 + 184);
  v24 = v1[24];
  v25 = *((unsigned __int8 *)v1 + 200);
  v22 = v1[26];
  v23 = *((unsigned __int8 *)v1 + 216);
  v20 = v1[30];
  v16 = *((unsigned __int8 *)v1 + 280);
  v21 = *((unsigned __int8 *)v1 + 248);
  v18 = v1[32];
  v19 = *((unsigned __int8 *)v1 + 264);
  v17 = v1[34];
  v15 = *((unsigned __int8 *)v1 + 281);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v46 = v8;
  v47 = v7;
  v49 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  v11 = v45;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v46 = v44;
  v47 = v43;
  v49 = 1;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v46) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v45 = v4;
  LOBYTE(v46) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 8;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 9;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 11;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 13;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 14;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 16;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 17;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DateComponents@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DateComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DateComponents(_QWORD *a1)
{
  return DateComponents.encode(to:)(a1);
}

unint64_t static DateComponents._getObjectiveCType()()
{
  return type metadata accessor for NSDateComponents();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance DateComponents(void *a1, uint64_t a2)
{
  static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  return 1;
}

uint64_t NSDateComponents._toCustomAnyHashable()()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t result;
  _BYTE __dst[288];
  _BYTE v5[288];
  uint64_t v6[36];
  __int128 __src[18];

  __src[0] = 0uLL;
  v6[1] = 0;
  v6[0] = 0;
  v1 = v0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v6, 0, 1, 0, 1, 0, 1, (uint64_t)v5, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  destructiveProjectEnumData for PredicateCodableError(v5, v2);
  outlined init with take of DateComponents?((uint64_t)v5, (uint64_t)__dst);
  static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v1, (uint64_t)__dst);
  outlined init with take of DateComponents?((uint64_t)__dst, (uint64_t)v6);
  outlined init with take of DateComponents?((uint64_t)v6, (uint64_t)__src);
  result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {

    memcpy(__dst, __src, 0x11AuLL);
    lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
    return AnyHashable.init<A>(_:)();
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDateComponents()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSDateComponents._toCustomAnyHashable()();

}

uint64_t outlined release of DateComponents(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_1E0F19D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_1E0F19D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_1E0F19D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents.CodingKeys, &unk_1E0F19D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar and conformance Calendar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar, &type metadata for Calendar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

unint64_t type metadata accessor for NSDateComponents()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSDateComponents;
  if (!lazy cache variable for type metadata for NSDateComponents)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDateComponents);
  }
  return result;
}

uint64_t *outlined release of DateComponents?(uint64_t *a1)
{
  outlined consume of DateComponents?(*a1);
  return a1;
}

unint64_t instantiation function for generic protocol witness table for DateComponents(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[2] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[3] = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  result = lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
  a1[4] = result;
  return result;
}

uint64_t sub_181A45400@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_181A45414@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t sub_181A45428@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 40);
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A4543C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 32) = v2;
  *(_BYTE *)(a2 + 40) = v4;
  return result;
}

uint64_t sub_181A45468@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 56);
  *(_QWORD *)a2 = *(_QWORD *)(result + 48);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A4547C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 48) = v2;
  *(_BYTE *)(a2 + 56) = v4;
  return result;
}

uint64_t sub_181A454A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 72);
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A454BC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 64) = v2;
  *(_BYTE *)(a2 + 72) = v4;
  return result;
}

uint64_t sub_181A454E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 88);
  *(_QWORD *)a2 = *(_QWORD *)(result + 80);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A454FC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 80) = v2;
  *(_BYTE *)(a2 + 88) = v4;
  return result;
}

uint64_t sub_181A45528@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 120);
  *(_QWORD *)a2 = *(_QWORD *)(result + 112);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A4553C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 112) = v2;
  *(_BYTE *)(a2 + 120) = v4;
  return result;
}

uint64_t sub_181A45568@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 136);
  *(_QWORD *)a2 = *(_QWORD *)(result + 128);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A4557C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 128) = v2;
  *(_BYTE *)(a2 + 136) = v4;
  return result;
}

uint64_t sub_181A455A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 152);
  *(_QWORD *)a2 = *(_QWORD *)(result + 144);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A455BC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 144) = v2;
  *(_BYTE *)(a2 + 152) = v4;
  return result;
}

uint64_t sub_181A455E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 168);
  *(_QWORD *)a2 = *(_QWORD *)(result + 160);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A455FC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 160) = v2;
  *(_BYTE *)(a2 + 168) = v4;
  return result;
}

uint64_t sub_181A45628@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 184);
  *(_QWORD *)a2 = *(_QWORD *)(result + 176);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A4563C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 176) = v2;
  *(_BYTE *)(a2 + 184) = v4;
  return result;
}

uint64_t sub_181A45668@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 200);
  *(_QWORD *)a2 = *(_QWORD *)(result + 192);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A4567C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 192) = v2;
  *(_BYTE *)(a2 + 200) = v4;
  return result;
}

uint64_t sub_181A456A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 216);
  *(_QWORD *)a2 = *(_QWORD *)(result + 208);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A456BC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 208) = v2;
  *(_BYTE *)(a2 + 216) = v4;
  return result;
}

uint64_t sub_181A456E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 248);
  *(_QWORD *)a2 = *(_QWORD *)(result + 240);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A456FC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 240) = v2;
  *(_BYTE *)(a2 + 248) = v4;
  return result;
}

uint64_t sub_181A45728@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 264);
  *(_QWORD *)a2 = *(_QWORD *)(result + 256);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A45740(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 256) = v2;
  *(_BYTE *)(a2 + 264) = v4;
  return result;
}

uint64_t sub_181A4576C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 104);
  *(_QWORD *)a2 = *(_QWORD *)(result + 96);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A45780(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 96) = v2;
  *(_BYTE *)(a2 + 104) = v4;
  return result;
}

uint64_t sub_181A457AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 232);
  *(_QWORD *)a2 = *(_QWORD *)(result + 224);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A457C0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 224) = v2;
  *(_BYTE *)(a2 + 232) = v4;
  return result;
}

uint64_t sub_181A457EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 280);
  *(_QWORD *)a2 = *(_QWORD *)(result + 272);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t *sub_181A45804(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = *result;
  if (*result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 1;
  else
    v4 = *((_BYTE *)result + 8);
  if (!*((_BYTE *)result + 8))
    v2 = v3;
  *(_QWORD *)(a2 + 272) = v2;
  *(_BYTE *)(a2 + 280) = v4;
  return result;
}

uint64_t sub_181A45830@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 281);
  return result;
}

_BYTE *sub_181A4583C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 281) = *result;
  return result;
}

uint64_t assignWithCopy for DateComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v17;
  v18 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v18;
  v19 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v19;
  v20 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v20;
  v21 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v21;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  return a1;
}

void *__swift_memcpy282_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x11AuLL);
}

uint64_t assignWithTake for DateComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v5 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v5;
  v6 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v6;
  v7 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v7;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DateComponents.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_181A45B54 + 4 * byte_182064DEB[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_181A45B88 + 4 * byte_182064DE6[v4]))();
}

uint64_t sub_181A45B88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A45B90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A45B98);
  return result;
}

uint64_t sub_181A45BA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A45BACLL);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_181A45BB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A45BB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DateComponents.CodingKeys()
{
  return &unk_1E0F19D60;
}

unint64_t specialized DateComponents.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 0x12)
    return 18;
  return result;
}

uint64_t specialized DateComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6386277 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1918985593 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x68746E6F6DLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7954788 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1920298856 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F6365736F6E616ELL && a2 == 0xEA0000000000646ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7961646B656577 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4F7961646B656577 && a2 == 0xEE006C616E696472
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x72657472617571 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6F4D664F6B656577 && a2 == 0xEB0000000068746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6559664F6B656577 && a2 == 0xEA00000000007261
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000182305840
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6F4D7061654C7369 && a2 == 0xEB0000000068746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x616559664F796164 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t XMLPlistTag.tagName.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_181A4641C + 4 * byte_182065250[a1]))("plist", 5);
}

const char *sub_181A4641C()
{
  return "array";
}

const char *sub_181A464A8()
{
  return "integer";
}

uint64_t type metadata accessor for XMLPlistMap()
{
  return objc_opt_self();
}

_QWORD *closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(_QWORD *result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  BOOL v7;

  v6 = result[1];
  v7 = v6 < a5 + a4 || v6 < a5;
  if (!v7 && ((a5 | a4) & 0x8000000000000000) == 0 && v6 > a4)
    return (_QWORD *)a2(*result + a4, a5);
  __break(1u);
  return result;
}

void XMLPlistMap.loadValue(at:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (*(_QWORD *)(v2 + 16) > a1)
    {
      v3 = (char *)&loc_181A4658C
         + dword_181A468C4[specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(*(_QWORD *)(v2 + 32 + 8 * a1))];
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x181A467E4);
}

void sub_181A46814()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A468C4);
}

uint64_t XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  if (result != 2)
    return 0;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = v3 + 32;
  if (*(_QWORD *)(v5 + 8 * a2) != 13)
    return 0;
  if (a2 + 1 >= v4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(v5 + 8 * (a2 + 1)) == 6)
  {
    if (a2 + 2 < v4)
    {
      v6 = *(_QWORD *)(v5 + 8 * (a2 + 2));
      v7 = *(_QWORD *)(v2 + 24);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 40));
      specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v7 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))closure #1 in XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:), v6, 6, &v8);
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 40));
      swift_release();
      return v8;
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t closure #1 in XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  BOOL v3;

  v3 = *(_DWORD *)result == 1428440643 && *(_WORD *)(result + 4) == 17481;
  *a2 = v3;
  return result;
}

Swift::Int __swiftcall XMLPlistMap.offset(after:)(Swift::Int after)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;

  if (after < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (*(_QWORD *)(v2 + 16) > (unint64_t)after)
    {
      v3 = (char *)&loc_181A46A68
         + dword_181A46BFC[specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(*(_QWORD *)(v2 + 32 + 8 * after))];
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x181A46AB8);
}

void sub_181A46ABC()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(68);
  v0._countAndFlagsBits = 0xD000000000000041;
  v0._object = (void *)0x8000000182305D70;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A46BFCLL);
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.ArrayIterator : PlistArrayIterator in XMLPlistMap()
{
  return &protocol witness table for XMLPlistMap.ArrayIterator;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.DictionaryIterator : PlistDictionaryIterator in XMLPlistMap()
{
  return &protocol witness table for XMLPlistMap.DictionaryIterator;
}

void protocol witness for PlistArrayIterator.next() in conformance XMLPlistMap.ArrayIterator(_QWORD *a1@<X8>)
{
  unint64_t *v1;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  XMLPlistMap.loadValue(at:)(*v1);
  v5 = v4;
  if ((~v4 & 0xF000000000000007) != 0)
    *v1 = XMLPlistMap.offset(after:)(v3);
  *a1 = v5;
}

void protocol witness for static PlistDecodingMap.nullValue.getter in conformance XMLPlistMap(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

void protocol witness for PlistDecodingMap.topObject.getter in conformance XMLPlistMap(_QWORD *a1@<X8>)
{
  uint64_t v2;

  XMLPlistMap.loadValue(at:)(0);
  if ((~v2 & 0xF000000000000007) != 0)
    *a1 = v2;
  else
    __break(1u);
}

unint64_t protocol witness for PlistDecodingMap.value(from:) in conformance XMLPlistMap@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return outlined copy of XMLPlistMap.Value(v2);
}

void one-time initialization function for dataDecodeTable()
{
  dataDecodeTable._rawValue = &outlined read-only object #0 of one-time initialization function for dataDecodeTable;
}

uint64_t XMLPlistMap.Value.dataValue<A>(in:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[12];

  v37 = a6;
  v38 = a2;
  v39[11] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v35 - v17;
  if (v18 >> 60 == 3)
  {
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    v24 = *(_QWORD *)(v23 + 24);
    v25 = v24 < v21 + v22 || v24 < v21;
    if (v25 || (v21 | v22) < 0 || v24 <= v22)
      __break(1u);
    v26 = v36;
    closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:)(*(_QWORD *)(v23 + 16) + v22, v21, *(_QWORD *)(v23 + 16), v24, v38, a3, a5, v37, v39);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
    result = swift_release();
    if (!v26)
      return v39[0];
  }
  else
  {
    v36 = v18;
    v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v28((char *)&v35 - v17, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v28)(v15, v20, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, a5) == 1)
    {
      v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v15, v12);
      _CodingPathNode.path.getter(v38);
      v29(v20, v12);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a5);
      v30 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v32 = v37;
      *(_QWORD *)(inited + 56) = a5;
      *(_QWORD *)(inited + 64) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a5);
      v39[0] = v30;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Data, v36, v34);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in XMLPlistMap.Value.dataValue<A>(in:for:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _UNKNOWN **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  if (a2 < 1)
  {
    v16 = MEMORY[0x1E0DEE9D8];
LABEL_55:
    v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
    v61 = &protocol witness table for <A> [A];
    v59 = v16;
    v38 = __swift_project_boxed_opaque_existential_1(&v59, v60);
    v39 = (_BYTE *)(*v38 + 32);
    v40 = &v39[*(_QWORD *)(*v38 + 16)];
    swift_bridgeObjectRetain();
    v41 = specialized Data._Representation.init(_:)(v39, v40);
    v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
    result = swift_bridgeObjectRelease();
    *a9 = v41;
    a9[1] = v43;
  }
  else
  {
    v9 = a2;
    v10 = result;
    v11 = result + a2;
    if (a3 + a4 - (result + a2) >= 0)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v58 = result - a3;
      v16 = MEMORY[0x1E0DEE9D8];
      v56 = result;
      v57 = result + a2;
      while (1)
      {
        v18 = (unsigned __int8 *)(v10 + v12);
        if (v11 < v10 + v12)
          break;
        if (v58 + v12 < 0)
          goto LABEL_58;
        if (v9 < 0)
          goto LABEL_59;
        v19 = *v18;
        if ((_DWORD)v19 == 61)
        {
          v20 = __OFADD__(v15++, 1);
          if (v20)
            goto LABEL_62;
        }
        else
        {
          if ((_DWORD)v19 == 60)
            goto LABEL_55;
          result = isspace(*v18);
          if ((_DWORD)result)
            v15 = 0;
        }
        if (one-time initialization token for dataDecodeTable != -1)
          result = swift_once();
        if (*((_QWORD *)dataDecodeTable._rawValue + 2) <= v19)
        {
          swift_bridgeObjectRelease();
          _StringGuts.grow(_:)(59);
          v44._countAndFlagsBits = 0xD000000000000023;
          v44._object = (void *)0x8000000182305EC0;
          String.append(_:)(v44);
          v62 = a3;
          v63 = a4;
          v64 = v10;
          v65 = v10 + v12;
          v66 = v11;
          v67 = BufferReader.lineNumber.getter();
          v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v45);
          swift_bridgeObjectRelease();
          v46._object = (void *)0x8000000182305EF0;
          v46._countAndFlagsBits = 0xD000000000000014;
          String.append(_:)(v46);
          LOBYTE(v67) = v19;
          lazy protocol witness table accessor for type UInt8 and conformance UInt8();
          v47._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          type metadata accessor for DecodingError();
          swift_allocError();
          static DecodingError._dataCorrupted<A>(_:for:_:)(0, 0xE000000000000000, a5, a6, a7, a8, v48);
          swift_bridgeObjectRelease();
          return swift_willThrow();
        }
        v21 = *((_QWORD *)dataDecodeTable._rawValue + v19 + 4);
        if ((v21 & 0x8000000000000000) == 0)
        {
          v20 = __OFADD__(v13++, 1);
          if (v20)
            goto LABEL_60;
          v20 = __OFADD__(v21, v14 << 6);
          v14 = v21 + (v14 << 6);
          if (v20)
            goto LABEL_61;
          if ((v13 & 3) == 0)
          {
            if (v15)
            {
              if (v15 == 1)
              {
                v31 = *(_QWORD *)(v16 + 16);
                v32 = v31 + 2;
                if (__OFADD__(v31, 2))
                  goto LABEL_65;
                result = swift_isUniquelyReferenced_nonNull_native();
                if (!(_DWORD)result || (v33 = *(_QWORD *)(v16 + 24), v34 = v33 >> 1, (uint64_t)(v33 >> 1) < v32))
                {
                  if (v31 <= v32)
                    v35 = v31 + 2;
                  else
                    v35 = v31;
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v35, 1, (char *)v16);
                  v16 = result;
                  v33 = *(_QWORD *)(result + 24);
                  v34 = v33 >> 1;
                }
                v36 = *(_QWORD *)(v16 + 16);
                v29 = v36 + 1;
                if (v34 <= v36)
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v36 + 1, 1, (char *)v16);
                  v16 = result;
                  v33 = *(_QWORD *)(result + 24);
                  v34 = v33 >> 1;
                }
                *(_QWORD *)(v16 + 16) = v29;
                *(_BYTE *)(v16 + v36 + 32) = BYTE2(v14);
                v30 = v36 + 2;
                if ((uint64_t)v34 < v30)
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v30, 1, (char *)v16);
                  v16 = result;
                }
                v17 = v14 >> 8;
              }
              else
              {
                result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
                  v16 = result;
                }
                v17 = v14 >> 16;
                v29 = *(_QWORD *)(v16 + 16);
                v37 = *(_QWORD *)(v16 + 24);
                v30 = v29 + 1;
                if (v29 >= v37 >> 1)
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v29 + 1, 1, (char *)v16);
                  v16 = result;
                  v17 = v14 >> 16;
                }
              }
            }
            else
            {
              v22 = *(_QWORD *)(v16 + 16);
              v23 = v22 + 3;
              if (__OFADD__(v22, 3))
                goto LABEL_63;
              result = swift_isUniquelyReferenced_nonNull_native();
              if (!(_DWORD)result || (v24 = *(_QWORD *)(v16 + 24), v25 = v24 >> 1, (uint64_t)(v24 >> 1) < v23))
              {
                if (v22 <= v23)
                  v26 = v22 + 3;
                else
                  v26 = v22;
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v26, 1, (char *)v16);
                v16 = result;
                v24 = *(_QWORD *)(result + 24);
                v25 = v24 >> 1;
              }
              v27 = *(_QWORD *)(v16 + 16);
              v28 = v27 + 1;
              if (v25 <= v27)
              {
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v27 + 1, 1, (char *)v16);
                v16 = result;
                v24 = *(_QWORD *)(result + 24);
                v25 = v24 >> 1;
              }
              *(_QWORD *)(v16 + 16) = v28;
              *(_BYTE *)(v16 + v27 + 32) = BYTE2(v14);
              v29 = v27 + 2;
              if (v25 < (uint64_t)(v27 + 2))
              {
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v27 + 2, 1, (char *)v16);
                v16 = result;
                v24 = *(_QWORD *)(result + 24);
                v25 = v24 >> 1;
              }
              *(_QWORD *)(v16 + 16) = v29;
              *(_BYTE *)(v16 + v28 + 32) = BYTE1(v14);
              v30 = v27 + 3;
              if (v25 < (uint64_t)(v27 + 3))
              {
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v27 + 3, 1, (char *)v16);
                v16 = result;
              }
              LOBYTE(v17) = v14;
              v10 = v56;
            }
            *(_QWORD *)(v16 + 16) = v30;
            *(_BYTE *)(v16 + v29 + 32) = v17;
            v11 = v57;
          }
        }
        ++v12;
        --v9;
        if (v11 < v10 + v12 + 1)
          goto LABEL_55;
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
    }
    __break(1u);
LABEL_65:
    __break(1u);
  }
  return result;
}

uint64_t XMLPlistMap.Value.dateValue<A>(in:for:_:)@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a5;
  v38 = a2;
  v35 = a6;
  v40 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v34 - v17;
  if (v18 >> 60 == 4)
  {
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    v24 = *(_QWORD *)(v23 + 24);
    v25 = v24 < v21 + v22 || v24 < v21;
    if (v25 || (v21 | v22) < 0 || v24 <= v22)
      __break(1u);
    closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)((_BYTE *)(*(_QWORD *)(v23 + 16) + v22), v21, *(_QWORD *)(v23 + 16), v24, v38, a3, a4, v37, v35);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
    return swift_release();
  }
  else
  {
    v36 = v18;
    v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v27((char *)&v34 - v17, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v27)(v15, v20, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, a4) == 1)
    {
      v28 = *(void (**)(char *, uint64_t))(v13 + 8);
      v28(v15, v12);
      _CodingPathNode.path.getter((unint64_t)v38);
      v28(v20, v12);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a4);
      v29 = _CodingPathNode.path.getter((unint64_t)v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v31 = v37;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v31;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a4);
      v39 = v29;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a4);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Date, v36, v33);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
}

void closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, os_unfair_lock_s *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  int v21;
  _BYTE *v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  _BOOL4 v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _BYTE *v39;
  _QWORD *v40;
  char v41;
  _BYTE *v42;
  char v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t ObjectType;
  void (*v48)(uint64_t *__return_ptr, __int128 *, uint64_t, unint64_t);
  BOOL v49;
  double v50;
  double v51;
  double v52;
  __int128 v53;
  Swift::String v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  Swift::String v59;
  unsigned int v60;
  Swift::String v61;
  __int128 v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 __dst[18];
  uint64_t v76;
  uint64_t v77;
  _OWORD __src[18];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;

  v86 = (uint64_t *)a8;
  v73 = a6;
  v74 = a7;
  v15 = (_QWORD *)swift_allocObject();
  v18 = v15;
  v15[2] = a3;
  v19 = v15 + 2;
  v20 = (unint64_t)&a1[a2];
  v15[3] = a4;
  v15[4] = a1;
  v15[5] = a1;
  v15[6] = &a1[a2];
  v72 = a9;
  if (a2 >= 1)
  {
    if ((uint64_t)&a1[-a3] >= 0)
    {
      v16 = a3 + a4;
      if ((uint64_t)(a3 + a4 - v20) < 0)
      {
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      v21 = *a1;
      v22 = a1;
      v23 = v21 == 45;
      if (v21 == 45)
      {
        v22 = a1 + 1;
        v15[5] = a1 + 1;
        if ((unint64_t)a2 < 2)
        {
          v16 = 0;
          v24 = 0;
          v23 = 1;
          ++a1;
          goto LABEL_20;
        }
      }
      v24 = 0;
      v16 = (uint64_t)&a1[a2];
      v17 = &a1[a2] - v22;
      v25 = (unint64_t)&v22[-a3];
      a1 = v22;
      while (v20 >= (unint64_t)a1)
      {
        if ((v25 & 0x8000000000000000) != 0)
          goto LABEL_79;
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_80;
        if ((*a1 - 58) >= 0xF6u)
        {
          v26 = *a1 - 48;
          v27 = 10 * v24;
          v28 = (unsigned __int128)(v24 * (__int128)10) >> 64 != (10 * v24) >> 63;
          v24 = 10 * v24 + v26;
          v29 = __OFADD__(v27, v26);
          v15[5] = ++a1;
          v16 = 1;
          if (v28 || v29)
            goto LABEL_20;
          v16 = (uint64_t)(a1 + 1);
          --v17;
          ++v25;
          if (v20 >= (unint64_t)(a1 + 1))
            continue;
        }
        v16 = 0;
        goto LABEL_20;
      }
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
    }
    __break(1u);
    goto LABEL_82;
  }
  v16 = 0;
  v24 = 0;
  v23 = 0;
LABEL_20:
  v17 = (unint64_t)(a1 + 1);
  if (v20 < (unint64_t)(a1 + 1))
    goto LABEL_76;
  if (v20 < (unint64_t)a1)
    goto LABEL_83;
  if ((uint64_t)&a1[-a3] < 0)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if ((uint64_t)(v20 - (_QWORD)a1) < 0)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if ((uint64_t)(a3 + a4 - v20) < 0)
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (*a1 != 45)
    goto LABEL_76;
  v15[5] = v17;
  if ((v16 & 1) != 0)
    goto LABEL_76;
  v30 = v23;
  v31 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v15);
  if ((v32 & 1) != 0)
    goto LABEL_76;
  v17 = v18[5];
  v16 = v17 + 1;
  if (v20 < v17 + 1)
    goto LABEL_76;
  if (v20 < v17)
    goto LABEL_87;
  if ((uint64_t)(v17 - a3) < 0)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if ((uint64_t)(v20 - v17) < 0)
  {
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (*(_BYTE *)v17 != 45)
    goto LABEL_76;
  v33 = (uint64_t)v31;
  v18[5] = v16;
  v34 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v35 & 1) != 0)
    goto LABEL_76;
  v17 = v18[5];
  v16 = v17 + 1;
  if (v20 < v17 + 1)
    goto LABEL_76;
  if (v20 < v17)
    goto LABEL_90;
  if ((uint64_t)(v17 - a3) < 0)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  if ((uint64_t)(v20 - v17) < 0)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    if ((((v16 - a3) | v17) & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_109;
    }
    v57 = *(char *)v16;
    v58 = *(unsigned __int8 *)v16;
    *(_QWORD *)&__src[0] = 0;
    *((_QWORD *)&__src[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v59._countAndFlagsBits = 0xD000000000000021;
    v59._object = (void *)0x8000000182305F40;
    String.append(_:)(v59);
    v60 = ((v58 >> 6) & 0xFFFFC0FF | ((v58 & 0x3F) << 8)) + 33217;
    if (v57 >= 0)
      v60 = v58 + 1;
    *(_QWORD *)&__dst[0] = (v60 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v60) >> 3)) & 7)));
    MEMORY[0x186DA46D0](__dst);
    Character.write<A>(to:)();
    swift_bridgeObjectRelease();
    v61._countAndFlagsBits = 0x656E696C20746120;
    v61._object = (void *)0xE900000000000020;
    String.append(_:)(v61);
    v62 = *((_OWORD *)v19 + 1);
    v83 = *(_OWORD *)v19;
    v84 = v62;
    v85 = v19[4];
    *(_QWORD *)&__dst[0] = BufferReader.lineNumber.getter();
    v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._object = (void *)0x8000000182305F70;
    v64._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v64);
LABEL_77:
    v55 = __src[0];
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v55, *((uint64_t *)&v55 + 1), (unint64_t)a5, v73, v74, (uint64_t)v86, v56);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
    return;
  }
  if (*(_BYTE *)v17 != 84)
    goto LABEL_76;
  v36 = (uint64_t)v34;
  v18[5] = v16;
  v37 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v38 & 1) != 0)
    goto LABEL_76;
  v39 = (_BYTE *)v18[5];
  if (v20 < (unint64_t)(v39 + 1))
    goto LABEL_76;
  if (v20 < (unint64_t)v39)
  {
    __break(1u);
    goto LABEL_99;
  }
  if ((uint64_t)&v39[-a3] < 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  if ((uint64_t)(v20 - (_QWORD)v39) < 0)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  if (*v39 != 58)
    goto LABEL_76;
  v18[5] = v39 + 1;
  v70 = (uint64_t)v37;
  v40 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v41 & 1) != 0)
    goto LABEL_76;
  v42 = (_BYTE *)v18[5];
  if (v20 < (unint64_t)(v42 + 1))
    goto LABEL_76;
  v68 = (uint64_t)v40;
  v69 = v36;
  if (v20 < (unint64_t)v42)
    goto LABEL_101;
  if ((uint64_t)&v42[-a3] < 0)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if ((uint64_t)(v20 - (_QWORD)v42) < 0)
  {
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  if (*v42 != 58)
    goto LABEL_76;
  v18[5] = v42 + 1;
  v67 = read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(v18);
  if ((v43 & 1) != 0)
    goto LABEL_76;
  v44 = (_BYTE *)v18[5];
  v16 = (uint64_t)(v44 + 1);
  v17 = v20 - (_QWORD)(v44 + 1);
  if (v20 < (unint64_t)(v44 + 1))
    goto LABEL_76;
  if (v20 < (unint64_t)v44)
    goto LABEL_104;
  if ((uint64_t)&v44[-a3] < 0)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if ((uint64_t)(v20 - (_QWORD)v44) >= 0)
  {
    if (*v44 == 90)
    {
      v18[5] = v16;
      if (v20 < (unint64_t)(v44 + 2))
      {
        if (one-time initialization token for cache == -1)
          goto LABEL_59;
        goto LABEL_107;
      }
      goto LABEL_93;
    }
LABEL_76:
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(_QWORD *)&__src[0] = 0xD000000000000023;
    *((_QWORD *)&__src[0] + 1) = 0x8000000182305F10;
    v53 = *((_OWORD *)v19 + 1);
    v80 = *(_OWORD *)v19;
    v81 = v53;
    v82 = v19[4];
    *(_QWORD *)&__dst[0] = BufferReader.lineNumber.getter();
    v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
LABEL_106:
  __break(1u);
LABEL_107:
  swift_once();
LABEL_59:
  a5 = (os_unfair_lock_s *)static CalendarCache.cache;
  v45 = static CalendarCache.cache + 16;
  v20 = static CalendarCache.cache + 60;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)v20);
  closure #1 in CalendarCache.fixed(_:)(v45, 7, __src);
  if (!v71)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v20);
    swift_release_n();
    v79 = __src[0];
    if (one-time initialization token for cache != -1)
      swift_once();
    v86 = &v66;
    v20 = static TimeZoneCache.cache;
    v46 = static TimeZoneCache.cache + 16;
    a5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(a5);
    closure #1 in TimeZoneCache.offsetFixed(_:)(v46, 0, __src);
    os_unfair_lock_unlock(a5);
    swift_release_n();
    if (!*(_QWORD *)&__src[0])
      goto LABEL_116;
    __dst[0] = __src[0];
    Calendar.timeZone.setter((uint64_t *)__dst);
    __dst[0] = 0uLL;
    v77 = 0;
    v76 = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, &v76, 0, 1, v24, 0, v33, 0, (uint64_t)__src, v69, 0, v70, 0, v68, 0, (uint64_t)v67, 0, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    v20 = *((_QWORD *)&v79 + 1);
    ObjectType = swift_getObjectType();
    memcpy(__dst, __src, 0x11AuLL);
    v48 = *(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, unint64_t))(v20 + 176);
    swift_unknownObjectRetain();
    v48(&v76, __dst, ObjectType, v20);
    swift_unknownObjectRelease();
    outlined release of DateComponents((uint64_t)__src);
    swift_unknownObjectRelease();
    if ((v77 & 1) == 0)
    {
      v65 = v76;
      swift_release();
      *v72 = v65;
      return;
    }
    if (v30)
    {
      v49 = __OFSUB__(0, v24);
      v24 = -v24;
      if (v49)
      {
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
    }
    if (v33 <= 127)
    {
      if (v69 <= 127)
      {
        if (v70 <= 127)
        {
          if (v33 >= -128 && v69 >= -128 && v70 >= -128 && v68 >= -128)
          {
            if (v68 <= 127)
            {
              if (!__OFSUB__(v24, 2001))
              {
                v50 = (double)(uint64_t)v67;
                specialized static Date.daysSinceReferenceDate(year:month:day:)(v24 - 2001, v33, v69);
                v52 = v51;
                swift_release();
                *(double *)v72 = (double)v70 * 3600.0 + (double)v68 * 60.0 + v50 + v52 * 86400.0;
                return;
              }
              goto LABEL_114;
            }
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
            goto LABEL_115;
          }
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
LABEL_117:
  os_unfair_lock_unlock((os_unfair_lock_t)v20);
  __break(1u);
  os_unfair_lock_unlock(a5);
  __break(1u);
}

_QWORD *read2DigitNumber #1 <A>() in closure #1 in XMLPlistMap.Value.dateValue<A>(in:for:_:)(_QWORD *result)
{
  char *v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  char v7;

  v1 = (char *)result[5];
  v2 = result[6];
  if (v2 < (unint64_t)v1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = result;
  v4 = result[2];
  if ((uint64_t)&v1[-v4] < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((uint64_t)(v2 - (_QWORD)v1) < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((uint64_t)(v4 + result[3] - v2) < 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v5 = v1 + 2;
  if (v2 < (unint64_t)(v1 + 2))
    return 0;
  result = 0;
  v6 = *v1;
  v7 = v1[1];
  v3[5] = v5;
  if ((v6 - 58) >= 0xF6u && (v7 - 58) >= 0xF6u)
    return (_QWORD *)(10 * (v6 - 48) + (v7 - 48));
  return result;
}

unint64_t XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *(unsigned __int8 **)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  if ((unsigned __int8 *)v7 == v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  v9 = result;
  v10 = *(_QWORD *)result;
  v11 = *(_QWORD *)(result + 8);
  v12 = v6 + 1;
  if (v7 < (unint64_t)(v6 + 1))
    goto LABEL_9;
  if ((uint64_t)&v6[-v10] < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (((v7 - (_QWORD)v6) & 0x8000000000000000) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((uint64_t)(v10 + v11 - v7) >= 0)
  {
    v13 = *v6;
    if (v13 == 45)
    {
      v14 = 1;
      goto LABEL_11;
    }
    if (v13 == 43)
    {
      v14 = 0;
LABEL_11:
      *(_QWORD *)(result + 24) = v12;
      specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)((_QWORD *)result);
LABEL_12:
      result = *(_QWORD *)(v9 + 24);
      if (v7 < result)
      {
        __break(1u);
      }
      else if ((uint64_t)(result - v10) >= 0)
      {
        if ((uint64_t)(v7 - result) >= 0)
        {
          if ((uint64_t)(v10 + v11 - v7) >= 0)
          {
            v15 = result + 2;
            v16 = v7 - (result + 2);
            if (v7 < result + 2 || *(_BYTE *)result != 48 || (*(unsigned __int8 *)(result + 1) | 0x20) != 0x78)
              return _parseIntegerDigits<A>(_:isNegative:)((unsigned __int8 *)result, v7 - result, v14, a2, a3, a4);
            *(_QWORD *)(v9 + 24) = v15;
            if ((((v15 - v10) | v16) & 0x8000000000000000) == 0)
              return _parseHexIntegerDigits<A>(_:isNegative:)((unsigned __int8 *)(result + 2), v16, v14, a2, a3, a4);
            goto LABEL_30;
          }
          goto LABEL_26;
        }
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      __break(1u);
      goto LABEL_25;
    }
LABEL_9:
    v14 = 0;
    goto LABEL_12;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  void (*v41)(char *, uint64_t, uint64_t, __n128);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t inited;
  uint64_t v45;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD v60[11];

  v54 = a6;
  v52 = a8;
  v53 = a9;
  v58 = a4;
  v59 = a3;
  v56 = (uint64_t *)a2;
  v57 = a10;
  v60[10] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v51 - v22;
  if (a5 >> 60 == 6)
  {
    v36 = *(_QWORD *)(a5 + 16);
    v35 = *(_QWORD *)(a5 + 24);
    v37 = *(_QWORD *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v37 + 40));
    v38 = *(_QWORD *)(v37 + 24);
    v39 = v38 < v35 + v36 || v38 < v35;
    if (v39 || (v35 | v36) < 0 || v38 <= v36)
      __break(1u);
    closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)((const char *)(*(_QWORD *)(v37 + 16) + v36), v35, *(_QWORD *)(v37 + 16), v38, v59, v58, v54, v53, a7, v52, v57);
    os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 40));
    return swift_release();
  }
  else if (a5 >> 60 == 7)
  {
    v56 = &v51;
    v25 = *(_QWORD *)(a5 + 16);
    v26 = *(_QWORD *)(a5 + 24);
    MEMORY[0x1E0C80A78](v21);
    v51 = (uint64_t)&v51;
    v27 = v57;
    *(&v51 - 6) = a7;
    *(&v51 - 5) = v27;
    v48 = a5;
    v49 = v59;
    v50 = v58;
    v28 = *(_QWORD *)(a1 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
    v29 = v55;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v28 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:), v25, v26, v60);
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    if (v29)
    {

      v30 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      v31 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      MEMORY[0x1E0C80A78](v32);
      v33 = v57;
      *(&v51 - 6) = a7;
      *(&v51 - 5) = v33;
      v48 = a5;
      v49 = v59;
      v50 = v58;
      v34 = *(_QWORD *)(a1 + 24);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v34 + 40));
      specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v34 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:), v30, v31, v60);
      os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 40));
      swift_release();
      lazy protocol witness table accessor for type Int64 and conformance Int64();
    }
    else
    {
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    }
    return dispatch thunk of FloatingPoint.init<A>(_:)();
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
    v41((char *)&v51 - v22, v58, v16, v23);
    ((void (*)(char *, char *, uint64_t))v41)(v19, v24, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1, a7) == 1)
    {
      v42 = *(void (**)(char *, uint64_t))(v17 + 8);
      v42(v19, v16);
      _CodingPathNode.path.getter(v59);
      v42(v24, v16);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, a7);
      v43 = _CodingPathNode.path.getter(v59);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v45 = v57;
      *(_QWORD *)(inited + 56) = a7;
      *(_QWORD *)(inited + 64) = v45;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 16))(boxed_opaque_existential_1, v15, a7);
      v60[0] = v43;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v16);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a7);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)v56, a5, v47);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
}

uint64_t closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v44 = a5;
  v45 = a6;
  v41 = a8;
  v42 = a11;
  v43 = a9;
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v40 - v18;
  v20 = a1 + a2;
  *(_QWORD *)&v48 = a3;
  *((_QWORD *)&v48 + 1) = a4;
  *(_QWORD *)&v49 = a1;
  *((_QWORD *)&v49 + 1) = a1;
  v50 = v20;
  specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)(&v48);
  if (v20 == *((_QWORD *)&v49 + 1))
  {
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v46 = 0xD000000000000024;
    v47 = 0x8000000182305E70;
    v51 = a3;
    v52 = a4;
    v53 = a1;
    v54 = v20;
    v55 = v20;
    v59 = BufferReader.lineNumber.getter();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v37 = v46;
    v36 = v47;
    type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v38;
    v30 = v37;
    v31 = v36;
    v32 = v44;
    v33 = v45;
    v34 = v43;
    goto LABEL_5;
  }
  v22 = v43;
  v21 = v44;
  v23 = v45;
  XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)((unint64_t)&v48, a7, a10, (uint64_t)v19);
  v24 = *(_QWORD *)(a7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, a7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v46 = 0xD000000000000020;
    v47 = 0x8000000182305E40;
    v56 = v48;
    v57 = v49;
    v58 = v50;
    v59 = BufferReader.lineNumber.getter();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v27 = v46;
    v26 = v47;
    type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v28;
    v30 = v27;
    v31 = v26;
    v32 = v21;
    v33 = v23;
    v34 = v22;
LABEL_5:
    static DecodingError._dataCorrupted<A>(_:for:_:)(v30, v31, v32, v33, v34, v42, v29);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v41, v19, a7);
}

uint64_t closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v32;
  const char *v33;
  const char *v34;
  size_t v35;
  int v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v52 = a9;
  v50 = a7;
  v51 = a8;
  v49 = *(_QWORD *)(a12 + 16);
  v48 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8);
  v47 = *(_QWORD *)(v48 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  if (!a2)
  {
    v53 = a5;
    v54 = a6;
    v55 = a3;
    v56 = a3;
    v57 = a3 + a4;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v58 = BufferReader.lineNumber.getter();
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x8000000182305DF0, v50, v51, a11, a13, v30);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v25 = *(unsigned __int8 *)a1;
  v26 = v25 & 0xFFFFFFDF;
  if (a2 != 3 || v26 != 78)
  {
    v32 = v23;
    if (a2 == 9 && v25 == 43)
    {
      v33 = "+infinity";
      v34 = a1;
      v35 = 9;
      goto LABEL_11;
    }
    if (a2 == 4 && v25 == 43)
    {
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        goto LABEL_35;
      }
LABEL_18:
      v27 = v52;
      v28 = v23;
      dispatch thunk of static FloatingPoint.infinity.getter();
      goto LABEL_19;
    }
    v40 = (char *)&v47 - v22;
    if (a2 == 9 && v25 == 45)
    {
      v41 = v24;
      v42 = _stringshims_strncasecmp_l(a1, "-infinity", 9uLL, 0);
      v23 = v32;
      if (v42)
        goto LABEL_35;
    }
    else
    {
      if (a2 != 4 || v25 != 45)
      {
        if (a2 != 8 || v26 != 73)
          goto LABEL_35;
        v33 = "infinity";
        v34 = a1;
        v35 = 8;
LABEL_11:
        v36 = _stringshims_strncasecmp_l(v34, v33, v35, 0);
        v23 = v32;
        if (!v36)
          goto LABEL_18;
LABEL_35:
        v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
        v38 = v52;
        v39 = 1;
        return v37(v38, v39, 1, a10);
      }
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        goto LABEL_35;
      }
      v41 = v24;
    }
    v43 = v23;
    dispatch thunk of static FloatingPoint.infinity.getter();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_1820654E0, 257, AssociatedTypeWitness, AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v45 = v52;
    dispatch thunk of static Numeric.* infix(_:_:)();
    v46 = *(void (**)(char *, uint64_t))(v43 + 8);
    v46(v41, a10);
    v46(v40, a10);
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
    v38 = v45;
    goto LABEL_20;
  }
  if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x61 || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E)
    goto LABEL_35;
  v27 = v52;
  v28 = v23;
  dispatch thunk of static FloatingPoint.nan.getter();
LABEL_19:
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v38 = v27;
LABEL_20:
  v39 = 0;
  return v37(v38, v39, 1, a10);
}

uint64_t static XMLPlistMap.Value.rejectHexadecimalValues<A>(_:fullSource:for:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v12;
  Swift::String v13;
  uint64_t v14;

  if (a2 >= 1)
  {
    v12 = (_BYTE *)result;
    while (2)
    {
      switch(*v12)
      {
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
        case 0x2B:
        case 0x2D:
        case 0x30:
          if ((unint64_t)++v12 < result + a2)
            continue;
          break;
        case 0xB:
        case 0xC:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2C:
        case 0x2E:
        case 0x2F:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3D:
        case 0x3E:
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x4F:
        case 0x50:
        case 0x51:
        case 0x52:
        case 0x53:
        case 0x54:
        case 0x55:
        case 0x56:
        case 0x57:
          return result;
        case 0x58:
          goto LABEL_7;
        default:
          if (*v12 == 120)
          {
LABEL_7:
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            BufferReader.lineNumber.getter();
            v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v13);
            swift_bridgeObjectRelease();
            type metadata accessor for DecodingError();
            swift_allocError();
            static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x8000000182305DF0, a5, a6, a7, a8, v14);
            swift_bridgeObjectRelease();
            result = swift_willThrow();
          }
          break;
      }
      break;
    }
  }
  return result;
}

uint64_t closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  const char *v66;
  char *v67[3];

  v56 = a6;
  v55 = a5;
  v58 = a4;
  v48 = a8;
  v67[1] = *(char **)MEMORY[0x1E0C80C00];
  v52 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v51 = (char *)&v42 - v18;
  v53 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](v19);
  v47 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v20;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v42 - v22;
  v50 = a11;
  v45 = a10;
  v24 = v55;
  v49 = a9;
  v25 = v57;
  v26 = v56;
  result = closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)(a1, a2, (uint64_t)a1, a2, a3, v58, v55, v56, (uint64_t)v16, a7, a9, a10, a11);
  if (!v25)
  {
    v43 = a2;
    v57 = 0;
    v44 = a3;
    v28 = v26;
    v29 = v51;
    v30 = v16;
    v31 = v52;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v30, v52);
    v32 = v53;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v29, 1, a7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v31);
      v33 = v57;
      result = static XMLPlistMap.Value.rejectHexadecimalValues<A>(_:fullSource:for:_:)((uint64_t)a1, v43, v44, v58, v24, v28, v49, v50);
      if (!v33)
      {
        v67[0] = 0;
        if (v46 == 4)
        {
          v34 = a1;
          _stringshims_strtof_l(a1, v67, 0);
          result = dispatch thunk of BinaryFloatingPoint.init(_:)();
        }
        else
        {
          if (v46 != 8)
            __break(1u);
          v34 = a1;
          _stringshims_strtod_l(a1, v67, 0);
          result = dispatch thunk of BinaryFloatingPoint.init(_:)();
        }
        v37 = v49;
        v36 = v50;
        if (v67[0])
        {
          if (&v34[v43] == v67[0])
          {
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 32))(v48, v47, a7);
          }
          else
          {
            v62 = v44;
            v63 = v58;
            v64 = v34;
            v65 = v34;
            v66 = &v34[v43];
            v60 = 0;
            v61 = 0xE000000000000000;
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            v60 = 0xD000000000000026;
            v61 = 0x8000000182305DF0;
            v59 = BufferReader.lineNumber.getter();
            v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v38);
            swift_bridgeObjectRelease();
            v39 = v60;
            v40 = v61;
            type metadata accessor for DecodingError();
            swift_allocError();
            static DecodingError._dataCorrupted<A>(_:for:_:)(v39, v40, v24, v28, v37, v36, v41);
            swift_bridgeObjectRelease();
            swift_willThrow();
            return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v47, a7);
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
    else
    {
      v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      v35(v23, v29, a7);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v48, v23, a7);
    }
  }
  return result;
}

uint64_t XMLPlistMap.Value.debugDataTypeDescription.getter(unint64_t a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A49694 + 4 * byte_1820652B3[a1 >> 60]))(0x676E697274732061, 0xE800000000000000);
}

uint64_t sub_181A49694()
{
  return 0x7961727261206E61;
}

uint64_t sub_181A496A8()
{
  return 0x6F69746369642061;
}

uint64_t sub_181A496C8()
{
  return 0x7620617461642061;
}

uint64_t sub_181A496E8()
{
  return 0x657461642061;
}

uint64_t sub_181A496FC()
{
  return 0x61656C6F6F622061;
}

uint64_t sub_181A49718()
{
  return 0x6E206C6165722061;
}

uint64_t sub_181A4973C()
{
  return 0x6765746E69206E61;
}

uint64_t sub_181A49758@<X0>(uint64_t a1@<X8>)
{
  if (a1 == 0x8000000000000000)
    return 0x76206C6C756E2061;
  else
    return 0xD000000000000016;
}

_QWORD *XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
    v4 = (*(_QWORD *)(*v1 + 16) & 0x7FFLL) == 0;
  else
    v4 = 0;
  if (!v4)
    return result;
  v5 = result[2];
  v6 = result[4];
  if (v6 < v5)
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *result;
  if ((uint64_t)(v5 - *result) < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = v6 - v5;
  if (v8 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((uint64_t)(v7 + result[1] - v6) < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = (double)v8 / (double)(result[3] - v7) * (double)v3;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v10 = (uint64_t)v9;
  v11 = v1[1];
  if (!v11 || (double)v10 / (double)v11 > 1.25)
  {
    result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)result || v10 > v2[3] >> 1)
    {
      if (v3 <= v10)
        v12 = v10;
      else
        v12 = v3;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v12, 0, v2);
      v2 = result;
    }
    *v1 = v2;
    v1[1] = v10;
  }
  return result;
}

int64_t XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(unsigned __int8 a1, _QWORD *a2)
{
  _QWORD **v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v16;

  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a2);
  v4 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  v7 = v6 + 1;
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v7;
  v4[v6 + 4] = a1;
  v8 = v6 + 3;
  if (__OFADD__(v6, 3))
  {
    __break(1u);
  }
  else
  {
    v9 = v4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= v8)
    {
      v11 = v6 + 1;
      goto LABEL_8;
    }
  }
  if (v7 <= v8)
    v16 = v6 + 3;
  else
    v16 = v6 + 1;
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, v16, 1, v4);
  v11 = v4[2];
  v9 = v4[3];
  v10 = v9 >> 1;
LABEL_8:
  v12 = v11 + 1;
  if (v10 <= v11)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v11 + 1, 1, v4);
  v4[2] = v12;
  v4[v11 + 4] = 0;
  v13 = v4[3];
  v14 = v11 + 2;
  if (v14 > (uint64_t)(v13 >> 1))
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14, 1, v4);
  v4[2] = v14;
  v4[v12 + 4] = 0;
  *v2 = v4;
  return v7;
}

_QWORD *XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(unsigned __int8 a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  int64_t v7;
  int64_t v8;
  _QWORD *result;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a2);
  v6 = *(_QWORD **)v2;
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v8 = v7 + 4;
  if (__OFADD__(v7, 4))
  {
    __break(1u);
LABEL_17:
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v7, 1, v6);
    v6 = result;
    v5 = result[3];
    v10 = v5 >> 1;
    goto LABEL_9;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v5 = v6[3], v10 = v5 >> 1, (uint64_t)(v5 >> 1) < v8))
  {
    if (v7 <= v8)
      v11 = v7 + 4;
    else
      v11 = v7;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v6);
    v6 = result;
    v5 = result[3];
    v10 = v5 >> 1;
  }
  v3 = v6[2];
  v7 = v3 + 1;
  if (v10 <= v3)
    goto LABEL_17;
LABEL_9:
  v6[2] = v7;
  v6[v3 + 4] = a1;
  if ((uint64_t)v10 < (uint64_t)(v3 + 2))
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v3 + 2, 1, v6);
    v6 = result;
  }
  v6[2] = v3 + 2;
  v6[v7 + 4] = v8;
  v13 = v6[2];
  v12 = v6[3];
  v14 = v12 >> 1;
  v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v6);
    v6 = result;
    v12 = result[3];
    v14 = v12 >> 1;
  }
  v6[2] = v15;
  v6[v13 + 4] = 0;
  v16 = v13 + 2;
  if (v14 < v16)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v16, 1, v6);
    v6 = result;
  }
  v6[2] = v16;
  v6[v15 + 4] = 10;
  *(_QWORD *)v2 = v6;
  return result;
}

_QWORD *XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  int64_t v11;
  _QWORD *result;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;

  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a4);
  v9 = *(_QWORD **)v4;
  v10 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v11 = v10 + 3;
  if (__OFADD__(v10, 3))
  {
    __break(1u);
LABEL_15:
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v10, 1, v9);
    v9 = result;
    v8 = result[3];
    v13 = v8 >> 1;
    goto LABEL_9;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v8 = v9[3], v13 = v8 >> 1, (uint64_t)(v8 >> 1) < v11))
  {
    if (v10 <= v11)
      v14 = v10 + 3;
    else
      v14 = v10;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v14, 1, v9);
    v9 = result;
    v8 = result[3];
    v13 = v8 >> 1;
  }
  v11 = v9[2];
  v10 = v11 + 1;
  if (v13 <= v11)
    goto LABEL_15;
LABEL_9:
  v9[2] = v10;
  v9[v11 + 4] = a1;
  if ((uint64_t)v13 < v11 + 2)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v11 + 2, 1, v9);
    v9 = result;
  }
  v9[2] = v11 + 2;
  v9[v10 + 4] = a2;
  v16 = v9[2];
  v15 = v9[3];
  if (v16 >= v15 >> 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v9);
    v9 = result;
  }
  v9[2] = v16 + 1;
  v9[v16 + 4] = a3;
  *(_QWORD *)v4 = v9;
  return result;
}

uint64_t XMLPlistScanner.PartialMapData.record(tagType:with:)(unsigned __int8 a1, _QWORD *a2)
{
  _QWORD **v2;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a2);
  v4 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    v4 = (_QWORD *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a1;
  *v2 = v4;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanUpToNextValue(for:)(Foundation::XMLPlistTag a1)
{
  uint64_t *v1;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (unsigned __int8 *)v1[3];
  v4 = v1[4];
  if ((unsigned __int8 *)v4 == v3)
  {
LABEL_17:
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    XMLPlistTag.tagName.getter(a1);
    v15._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v16 = 0xD000000000000020;
    *(_QWORD *)(v16 + 8) = 0x8000000182305A90;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
LABEL_19:
    *(_BYTE *)(v16 + 32) = 0;
LABEL_23:
    swift_willThrow();
LABEL_24:
    LOBYTE(v7) = v11;
  }
  else
  {
    while (1)
    {
      v6 = *v1;
      v5 = v1[1];
      v7 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v3);
      v1[3] = (uint64_t)v7;
      if ((unsigned __int8 *)v4 == v7)
      {
LABEL_18:
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_OWORD *)v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        goto LABEL_19;
      }
      v8 = v7 + 1;
      v9 = *v7;
      v1[3] = (uint64_t)(v7 + 1);
      if (v9 != 60)
      {
        v17 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_QWORD *)v18 = v9;
        *(_QWORD *)(v18 + 8) = v17;
        *(_QWORD *)(v18 + 16) = 0xD00000000000001ALL;
        *(_QWORD *)(v18 + 24) = 0x8000000182305A70;
LABEL_22:
        *(_BYTE *)(v18 + 32) = 3;
        goto LABEL_23;
      }
      if (v4 < (unint64_t)(v7 + 2))
        goto LABEL_18;
      if ((uint64_t)&v8[-v6] < 0)
        break;
      if ((uint64_t)(v4 - (_QWORD)v8) < 0)
        goto LABEL_28;
      if ((uint64_t)(v6 + v5 - v4) < 0)
        goto LABEL_29;
      v10 = *v8;
      if (v10 == 33)
      {
        if (v4 < (unint64_t)(v7 + 4))
          goto LABEL_18;
        v13 = v7[2];
        if (v13 != 45 || (v13 = v7[3], v13 != 45))
        {
          v19 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(_QWORD *)v18 = v13;
          *(_QWORD *)(v18 + 8) = v19;
          *(_OWORD *)(v18 + 16) = xmmword_1820654D0;
          goto LABEL_22;
        }
        v1[3] = (uint64_t)(v7 + 4);
        XMLPlistScanner.skipXMLComment()();
        if (v14)
          goto LABEL_24;
      }
      else
      {
        if (v10 != 63)
        {
          v11 = v10 != 47;
          if (v10 == 47)
            v1[3] = (uint64_t)v7;
          goto LABEL_24;
        }
        XMLPlistScanner.skipXMLProcessingInstruction()();
        if (v12)
          goto LABEL_24;
      }
      v3 = (unsigned __int8 *)v1[3];
      if ((unsigned __int8 *)v4 == v3)
        goto LABEL_17;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  return (char)v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipXMLProcessingInstruction()()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _WORD *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;

  v1 = v0[3];
  v2 = v0[4];
  if (v1 >= v2 - 2)
  {
LABEL_8:
    v0[3] = v1;
    _StringGuts.grow(_:)(57);
    v8._object = (void *)0x80000001823059D0;
    v8._countAndFlagsBits = 0xD000000000000037;
    String.append(_:)(v8);
    BufferReader.lineNumber.getter();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0xE000000000000000;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_BYTE *)(v10 + 32) = 0;
    swift_willThrow();
  }
  else
  {
    v3 = *v0 + v0[1];
    v4 = v2 - v1 - 2;
    v5 = v3 - v1;
    v6 = v1 - *v0;
    v7 = (_WORD *)v0[3];
    while (v3 >= (unint64_t)v7)
    {
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_11;
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_12;
      if (*v7 == 15935)
      {
        v0[3] = v7 + 1;
        return;
      }
      v7 = (_WORD *)((char *)v7 + 1);
      v0[3] = v7;
      --v5;
      ++v6;
      if (!--v4)
        goto LABEL_8;
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipXMLComment()()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::String v7;
  uint64_t v8;

  v1 = v0[3];
  v2 = v0[4] - 3;
  if (v2 < v1)
  {
LABEL_11:
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    BufferReader.lineNumber.getter();
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000025;
    *(_QWORD *)(v8 + 8) = 0x8000000182305960;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 32) = 5;
    swift_willThrow();
  }
  else
  {
    v3 = *v0 + v0[1];
    v4 = v3 - v1;
    v5 = v1 - *v0;
    while (v3 >= v1)
    {
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_14;
      if (v4 < 0)
        goto LABEL_15;
      if (*(_WORD *)v1 == 11565 && *(_BYTE *)(v1 + 2) == 62)
      {
        v0[3] = v1 + 3;
        return;
      }
      ++v1;
      --v4;
      ++v5;
      if (v2 < v1)
        goto LABEL_11;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanAnyValue(for:)(Foundation::XMLPlistTag a1)
{
  Swift::Bool v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = XMLPlistScanner.scanUpToNextValue(for:)(a1);
  if (!v3)
  {
    if (v1)
    {
      XMLPlistScanner.scanXMLElement()();
      if (!v4)
        v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & 1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanXMLElement()()
{
  Foundation::XMLPlistTag v0;
  uint64_t v1;

  v0 = XMLPlistScanner.peekXMLElement()()._0;
  if (!v1)
    __asm { BR              X10 }
}

void sub_181A4A418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((v2 & 0x100) != 0)
  {
    v12 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v3 - 176) = *(_OWORD *)v1;
    *(_OWORD *)(v3 - 160) = v12;
    *(_QWORD *)(v3 - 144) = *(_QWORD *)(v1 + 32);
    v13 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v14 = v2;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 8) = v13;
    *(_BYTE *)(v14 + 32) = 2;
    swift_willThrow();
  }
  else
  {
    v4 = XMLPlistScanner.scanThroughCloseTag(_:)(v2);
    if (!v0)
    {
      v6 = v4;
      v7 = v5;
      v8 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
      v9 = *(_QWORD *)(v1 + 8);
      v10 = v6 - *(_QWORD *)v1;
      v11 = *(_QWORD *)(v1 + 32);
      *(_QWORD *)(v3 - 136) = *(_QWORD *)v1;
      *(_QWORD *)(v3 - 128) = v9;
      *(_OWORD *)(v3 - 120) = *(_OWORD *)(v1 + 16);
      *(_QWORD *)(v3 - 104) = v11;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v8, v7 - v6, v10, (_QWORD *)(v3 - 136));
    }
  }
  JUMPOUT(0x181A4A3DCLL);
}

Swift::tuple_Foundation_XMLPlistTag_isEmpty_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.peekXMLElement()()
{
  uint64_t v0;
  Foundation::XMLPlistTag_optional v1;
  Foundation::XMLPlistTag_optional v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::tuple_Foundation_XMLPlistTag_isEmpty_Bool result;
  __int128 v22;

  v22 = *(_OWORD *)(v0 + 16);
  v1.value = XMLPlistScanner.determineTag()().value;
  if (!v3)
  {
    v4 = 4;
    switch(v1.value)
    {
      case Foundation_XMLPlistTag_dict:
      case Foundation_XMLPlistTag_data:
      case Foundation_XMLPlistTag_date:
      case Foundation_XMLPlistTag_real:
      case Foundation_XMLPlistTag_true:
        goto LABEL_3;
      case Foundation_XMLPlistTag_key:
        v4 = 3;
        goto LABEL_3;
      case Foundation_XMLPlistTag_string:
        v4 = 6;
        goto LABEL_3;
      case Foundation_XMLPlistTag_integer:
        v4 = 7;
        goto LABEL_3;
      case Foundation_XMLPlistTag_unknownDefault:
        v11 = *(unsigned __int8 **)(v0 + 32);
        v12 = (unsigned __int8 *)*((_QWORD *)&v22 + 1);
        while (v12 != v11)
        {
          v13 = *v12++;
          *(_QWORD *)(v0 + 24) = v12;
          if (v13 == 62)
            goto LABEL_22;
        }
        v12 = v11;
LABEL_22:
        if ((unint64_t)v12 < *((_QWORD *)&v22 + 1))
          goto LABEL_34;
        if ((uint64_t)(*((_QWORD *)&v22 + 1) - *(_QWORD *)v0) < 0)
          goto LABEL_35;
        if ((uint64_t)&v12[-*((_QWORD *)&v22 + 1)] < 0)
          goto LABEL_36;
        if ((uint64_t)(*(_QWORD *)v0 + *(_QWORD *)(v0 + 8) - (_QWORD)v12) < 0)
          goto LABEL_37;
        v14 = static String._tryFromUTF8(_:)();
        if (v15)
          v16 = v14;
        else
          v16 = 0x65737261706E753CLL;
        if (v15)
          v17 = v15;
        else
          v17 = (void *)0xED00003E656C6261;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = v16;
        v18._object = v17;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x656E696C206E6F20;
        v19._object = (void *)0xE900000000000020;
        String.append(_:)(v19);
        BufferReader.lineNumber.getter();
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_QWORD *)v9 = 0xD000000000000018;
        *(_QWORD *)(v9 + 8) = 0x8000000182305D20;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 24) = 0;
        v10 = 5;
        goto LABEL_11;
      default:
        v4 = 5;
LABEL_3:
        *(_QWORD *)(v0 + 24) = *((_QWORD *)&v22 + 1) + v4;
        v5 = *(_QWORD *)(v0 + 32);
        break;
    }
    while (1)
    {
      v6 = (unsigned __int8 *)(*((_QWORD *)&v22 + 1) + v4);
      if (*((_QWORD *)&v22 + 1) + v4 == v5)
        break;
      v7 = *v6;
      *(_QWORD *)(v0 + 24) = v6 + 1;
      ++v4;
      if (v7 == 62)
      {
        if (*((_QWORD *)&v22 + 1) + v4 != v5)
        {
          if (*((_QWORD *)&v22 + 1) - *(_QWORD *)v0 + v4 - 2 < 0
            || *(_QWORD *)v0 + *(_QWORD *)(v0 + 8) - *((_QWORD *)&v22 + 1) - v4 + 2 < 1)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            JUMPOUT(0x181A4A9E4);
          }
          goto LABEL_39;
        }
        break;
      }
    }
    v8 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v9 = v8;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    v10 = 1;
LABEL_11:
    *(_BYTE *)(v9 + 32) = v10;
    v1.value = swift_willThrow();
  }
LABEL_39:
  result.isEmpty = v2.value;
  result._0 = v1.value;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanString(asKey:)(Swift::Bool asKey)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned __int8 v19;
  _QWORD *v20;
  _QWORD v21[3];
  char v22;
  unsigned __int8 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;

  v3 = v1;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)&v24 = *(_QWORD *)v3;
  *((_QWORD *)&v24 + 1) = v5;
  v25 = *(_OWORD *)(v3 + 16);
  specialized static XMLPlistScanner.parseString(with:generate:)((uint64_t *)&v24, 0, (uint64_t)v21);
  if (!v2)
  {
    v6 = v21[0];
    v7 = v21[1];
    v8 = v22;
    v9 = v23;
    swift_bridgeObjectRelease();
    v10 = v24;
    v11 = v25;
    *(_OWORD *)v3 = v24;
    *(_OWORD *)(v3 + 16) = v11;
    *(_QWORD *)(v3 + 32) = v26;
    if ((v8 & 1) != 0)
    {
      v12 = (_QWORD *)(v3 + 40);
      XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(&v24);
      v13 = *(_QWORD **)(v3 + 40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      v15 = v13[2];
      v14 = v13[3];
      v16 = v15 + 1;
      if (v15 >= v14 >> 1)
      {
        v27 = v15 + 1;
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
        v16 = v27;
        v13 = v20;
      }
      v13[2] = v16;
      v13[v15 + 4] = 11;
      *v12 = v13;
    }
    else
    {
      if (v9)
        v17 = 13;
      else
        v17 = 1;
      if (v9)
        v18 = 12;
      else
        v18 = 0;
      if (asKey)
        v19 = v17;
      else
        v19 = v18;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v19, v7 - v6, v6 - v10, &v24);
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.checkForCloseTag(_:)(Foundation::XMLPlistTag a1)
{
  _QWORD *v1;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;

  v4 = (unsigned __int8 *)v1[3];
  v3 = v1[4];
  if ((a1 - 2) > 7u)
    v5 = 5;
  else
    v5 = qword_182065490[(char)(a1 - 2)];
  if (v3 < (unint64_t)&v4[v5 + 3])
  {
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_BYTE *)(v6 + 32) = 0;
    goto LABEL_15;
  }
  if (v3 < (unint64_t)v4)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)&v4[-*v1] < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((uint64_t)(v3 - (_QWORD)v4) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((uint64_t)(*v1 + v1[1] - v3) < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v3 < (unint64_t)(v4 + 2))
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x181A4B20CLL);
  }
  v7 = *v4;
  if (v7 == 60)
  {
    v7 = v4[1];
    if (v7 == 47)
      __asm { BR              X13 }
  }
  v8 = BufferReader.lineNumber.getter();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  XMLPlistTag.tagName.getter(a1);
  v9._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(_QWORD *)v10 = v7;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(v10 + 16) = 0xD000000000000020;
  *(_QWORD *)(v10 + 24) = 0x8000000182305A90;
  *(_BYTE *)(v10 + 32) = 3;
LABEL_15:
  swift_willThrow();
}

Foundation::XMLPlistTag_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.determineTag()()
{
  __int128 *v0;
  __int128 v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Foundation::XMLPlistTag_optional result;
  __int128 v12;
  uint64_t v13;

  v1 = v0[1];
  v12 = *v0;
  v13 = *((_QWORD *)v0 + 4);
  if (((*((_QWORD *)&v1 + 1) - *(_QWORD *)v0) & 0x8000000000000000) != 0
    || (v2 = v12 + *((_QWORD *)&v12 + 1), (uint64_t)(v12 + *((_QWORD *)&v12 + 1) - *((_QWORD *)&v1 + 1)) < 1))
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    JUMPOUT(0x181A4B610);
  }
  switch(**((_BYTE **)&v1 + 1))
  {
    case 9:
    case 0xA:
    case 0xD:
    case 0x20:
    case 0x3E:
      v3 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_QWORD *)v4 = v3;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 32) = 1;
      return (Foundation::XMLPlistTag_optional)swift_willThrow();
    case 0x61:
      if (v13 - *((_QWORD *)&v1 + 1) < 5)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_72;
      if (**((_DWORD **)&v1 + 1) != 1634890337 || *(_BYTE *)(*((_QWORD *)&v1 + 1) + 4) != 121)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_array;
      break;
    case 0x64:
      if (v13 - *((_QWORD *)&v1 + 1) < 4)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_73;
      switch(**((_DWORD **)&v1 + 1))
      {
        case 0x74636964:
          result.value = Foundation_XMLPlistTag_dict;
          break;
        case 0x61746164:
          result.value = Foundation_XMLPlistTag_data;
          break;
        case 0x65746164:
          result.value = Foundation_XMLPlistTag_date;
          break;
        default:
LABEL_66:
          result.value = Foundation_XMLPlistTag_unknownDefault;
          break;
      }
      break;
    case 0x66:
      if (v13 - *((_QWORD *)&v1 + 1) < 5)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_74;
      if (**((_DWORD **)&v1 + 1) != 1936482662 || *(_BYTE *)(*((_QWORD *)&v1 + 1) + 4) != 101)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_false;
      break;
    case 0x69:
      if (v13 - *((_QWORD *)&v1 + 1) < 7)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_75;
      if (**((_DWORD **)&v1 + 1) != 1702129257 || *(_DWORD *)(*((_QWORD *)&v1 + 1) + 3) != 1919248229)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_integer;
      break;
    case 0x6B:
      if (v13 - *((_QWORD *)&v1 + 1) < 3)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_76;
      if (**((_WORD **)&v1 + 1) != 25963 || *(_BYTE *)(*((_QWORD *)&v1 + 1) + 2) != 121)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_key;
      break;
    case 0x70:
      if (v13 - *((_QWORD *)&v1 + 1) < 5)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_77;
      if (**((_DWORD **)&v1 + 1) != 1936288880 || *(_BYTE *)(*((_QWORD *)&v1 + 1) + 4) != 116)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_plist;
      break;
    case 0x72:
      if (v13 - *((_QWORD *)&v1 + 1) < 4)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_78;
      if (**((_DWORD **)&v1 + 1) != 1818322290)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_real;
      break;
    case 0x73:
      if (v13 - *((_QWORD *)&v1 + 1) < 6)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_79;
      if (**((_DWORD **)&v1 + 1) != 1769108595 || *(_WORD *)(*((_QWORD *)&v1 + 1) + 4) != 26478)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_string;
      break;
    case 0x74:
      if (v13 - *((_QWORD *)&v1 + 1) < 4)
        goto LABEL_66;
      if (v2 < *((_QWORD *)&v1 + 1))
        goto LABEL_80;
      if (**((_DWORD **)&v1 + 1) != 1702195828)
        goto LABEL_66;
      result.value = Foundation_XMLPlistTag_true;
      break;
    default:
      goto LABEL_66;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanPlist()()
{
  Swift::Bool v0;
  uint64_t v1;
  Foundation::XMLPlistTag v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (!v1)
  {
    if (v0)
    {
      v2 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v3)
        __asm { BR              X10 }
    }
    else
    {
      v4 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 32) = 2;
      swift_willThrow();
    }
  }
}

void sub_181A4B900()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int8 v6;
  Swift::Bool v7;
  uint64_t v8;
  Foundation::XMLPlistTag v9;
  uint64_t v10;

  if ((v1 & 0x100) != 0)
  {
    v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v2 + 368) = *(_OWORD *)v0;
    *(_OWORD *)(v2 + 384) = v5;
    STACK[0x230] = *(_QWORD *)(v0 + 32);
    if (v1 == 3)
      v6 = 13;
    else
      v6 = 12;
    XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v6, 0, 0, &STACK[0x210]);
  }
  else
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (v3)
      goto LABEL_17;
    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
    if (v4)
      goto LABEL_17;
  }
  v7 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (!v8)
  {
    if (!v7)
      JUMPOUT(0x181A4BB7CLL);
    v9 = XMLPlistScanner.peekXMLElement()()._0;
    if (!v10)
      __asm { BR              X10 }
  }
LABEL_17:
  JUMPOUT(0x181A4B8E0);
}

void sub_181A4B938(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int128 v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::Bool v20;
  uint64_t v21;
  Foundation::XMLPlistTag v22;
  uint64_t v23;
  _QWORD *v24;

  if ((v10 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v10), !v13))
  {
    v14 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v10);
    v15 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v11 + 496) = *(_OWORD *)v9;
    *(_OWORD *)(v11 + 512) = v15;
    *(_QWORD *)(v12 - 128) = *(_QWORD *)(v9 + 32);
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)((_QWORD *)(v12 - 160));
    v16 = *(_QWORD **)(v9 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v18 = v16[2];
    v17 = v16[3];
    v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
      v19 = v18 + 1;
      v16 = v24;
    }
    v16[2] = v19;
    v16[v18 + 4] = v14;
    *(_QWORD *)(v9 + 40) = v16;
    v20 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
    if (!v21)
    {
      if (!v20)
        JUMPOUT(0x181A4BB7CLL);
      v22 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v23)
        __asm { BR              X10 }
    }
  }
  JUMPOUT(0x181A4B8E0);
}

void sub_181A4B9FC()
{
  __int16 v0;
  uint64_t v1;

  if ((v0 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v1)
      JUMPOUT(0x181A4BACCLL);
    JUMPOUT(0x181A4B8E0);
  }
  JUMPOUT(0x181A4B89CLL);
}

void sub_181A4BA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;

  if ((v68 & 0x100) != 0)
  {
    v71 = *(_OWORD *)(v67 + 16);
    *(_OWORD *)(v69 + 272) = *(_OWORD *)v67;
    *(_OWORD *)(v69 + 288) = v71;
    a67 = *(_QWORD *)(v67 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a63);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v70)
      JUMPOUT(0x181A4B8E0);
  }
  JUMPOUT(0x181A4BACCLL);
}

void sub_181A4BA24()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  __int128 v3;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x181A4BA34);
  }
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 320) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 336) = v3;
  STACK[0x200] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4BAC8);
}

void sub_181A4BB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,__int128 a54,uint64_t a55)
{
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  _QWORD *v72;

  if ((v57 & 0x100) == 0)
  {
    v60 = XMLPlistScanner.scanThroughCloseTag(_:)(v57);
    if (!v56)
    {
      v62 = v60;
      v63 = v61;
      v64 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v57);
      v65 = v55[1];
      v66 = v62 - *v55;
      v67 = v55[4];
      a52 = *v55;
      a53 = v65;
      a54 = *((_OWORD *)v55 + 1);
      a55 = v67;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v64, v63 - v62, v66, &a52);
      v55[3] = v59;
      _StringGuts.grow(_:)(77);
      v69._countAndFlagsBits = 0xD000000000000027;
      v69._object = (void *)0x8000000182305A10;
      String.append(_:)(v69);
      BufferReader.lineNumber.getter();
      v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      v71._object = (void *)0x8000000182305A40;
      v71._countAndFlagsBits = 0xD000000000000024;
      String.append(_:)(v71);
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *v72 = 0;
      v72[1] = 0xE000000000000000;
      v72[2] = 0;
      v72[3] = 0;
      JUMPOUT(0x181A4B8D4);
    }
    JUMPOUT(0x181A4BB8CLL);
  }
  v68 = *((_OWORD *)v55 + 1);
  *(_OWORD *)(v58 + 144) = *(_OWORD *)v55;
  *(_OWORD *)(v58 + 160) = v68;
  JUMPOUT(0x181A4B9C8);
}

void sub_181A4BB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  unsigned __int8 v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  _QWORD *v56;

  if ((v46 & 0x100) != 0)
  {
    v51 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)(v47 + 96) = *(_OWORD *)v45;
    *(_OWORD *)(v47 + 112) = v51;
    a45 = *(_QWORD *)(v45 + 32);
    if (v46 == 3)
      v52 = 13;
    else
      v52 = 12;
    XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v52, 0, 0, &a41);
  }
  else
  {
    XMLPlistScanner.scanString(asKey:)(v46 == 3);
    if (v49 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v46), v50))
      JUMPOUT(0x181A4B8E0);
  }
  *(_QWORD *)(v45 + 24) = v48;
  _StringGuts.grow(_:)(77);
  v53._countAndFlagsBits = 0xD000000000000027;
  v53._object = (void *)0x8000000182305A10;
  String.append(_:)(v53);
  BufferReader.lineNumber.getter();
  v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._object = (void *)0x8000000182305A40;
  v55._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v55);
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *v56 = 0;
  v56[1] = 0xE000000000000000;
  v56[2] = 0;
  v56[3] = 0;
  JUMPOUT(0x181A4B8D4);
}

void sub_181A4BBCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  __int128 v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  _QWORD *v74;

  if ((v62 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v62), !v65))
  {
    v66 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v62);
    v67 = *(_OWORD *)(v61 + 16);
    *(_OWORD *)(v63 + 224) = *(_OWORD *)v61;
    *(_OWORD *)(v63 + 240) = v67;
    a61 = *(_QWORD *)(v61 + 32);
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(&a57);
    v68 = *(_QWORD **)(v61 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
    v70 = v68[2];
    v69 = v68[3];
    if (v70 >= v69 >> 1)
      v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v69 > 1), v70 + 1, 1, v68);
    v68[2] = v70 + 1;
    v68[v70 + 4] = v66;
    *(_QWORD *)(v61 + 40) = v68;
    *(_QWORD *)(v61 + 24) = v64;
    _StringGuts.grow(_:)(77);
    v71._countAndFlagsBits = 0xD000000000000027;
    v71._object = (void *)0x8000000182305A10;
    String.append(_:)(v71);
    BufferReader.lineNumber.getter();
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73._object = (void *)0x8000000182305A40;
    v73._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v73);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *v74 = 0;
    v74[1] = 0xE000000000000000;
    v74[2] = 0;
    v74[3] = 0;
    JUMPOUT(0x181A4B8D4);
  }
  JUMPOUT(0x181A4BB8CLL);
}

void sub_181A4BC5C()
{
  __int16 v0;
  uint64_t v1;

  if ((v0 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v1)
      JUMPOUT(0x181A4BD2CLL);
    JUMPOUT(0x181A4B8E0);
  }
  JUMPOUT(0x181A4B89CLL);
}

void sub_181A4BC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  __int16 v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;

  if ((v34 & 0x100) != 0)
  {
    v37 = *(_OWORD *)(v33 + 16);
    *v35 = *(_OWORD *)v33;
    v35[1] = v37;
    a33 = *(_QWORD *)(v33 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a29);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v36)
      JUMPOUT(0x181A4B8E0);
  }
  JUMPOUT(0x181A4BD2CLL);
}

void sub_181A4BC84()
{
  _OWORD *v0;
  __int16 v1;
  uint64_t v2;
  __int128 v3;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x181A4BC94);
  }
  v3 = v0[1];
  *(_OWORD *)(v2 + 48) = *v0;
  *(_OWORD *)(v2 + 64) = v3;
  JUMPOUT(0x181A4BD28);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanArray()()
{
  __int128 *v0;
  _QWORD *v1;
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  Swift::Bool v5;
  uint64_t v6;
  Foundation::XMLPlistTag v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  __int128 v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _OWORD v26[2];
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  int64_t v34;

  v1 = v0;
  v2 = *v0;
  v3 = v0[1];
  v33 = *((_QWORD *)v0 + 4);
  v32[1] = v3;
  v32[0] = v2;
  v4 = (_QWORD *)v0 + 5;
  v34 = XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(8u, v32);
  if (v1[4] != v1[3])
  {
    v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_array);
    if (v6)
    {
LABEL_13:
      v18 = v0[1];
      v30[0] = *v0;
      v30[1] = v18;
      v31 = *((_QWORD *)v0 + 4);
      v11 = v30;
      goto LABEL_14;
    }
    if (v5)
    {
      v7 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v8)
        __asm { BR              X9 }
      goto LABEL_13;
    }
  }
  XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_array);
  if (v9)
  {
    v10 = v0[1];
    v28[0] = *v0;
    v28[1] = v10;
    v29 = *((_QWORD *)v0 + 4);
    v11 = v28;
LABEL_14:
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v11);
    v19 = (_QWORD *)*((_QWORD *)v0 + 5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1[5] = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      *v4 = v19;
    }
    v21 = v19[2];
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
    v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, 10);
    destructiveProjectEnumData for PredicateCodableError(v22, v23);
    v13 = (_QWORD *)*v4;
    v24 = specialized Array.count.getter(*v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
    v25 = &v13[v34];
    v25[4] = v24;
    v25[5] = 0;
    goto LABEL_19;
  }
  v12 = v0[1];
  v26[0] = *v0;
  v26[1] = v12;
  v27 = *((_QWORD *)v0 + 4);
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v26);
  v13 = (_QWORD *)*((_QWORD *)v0 + 5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v15 = v13[2];
  v14 = v13[3];
  v16 = v15 + 1;
  if (v15 >= v14 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
  v13[2] = v16;
  v13[v15 + 4] = 10;
  v17 = &v13[v34 + 4];
  *v17 = v16;
  v17[1] = 0;
LABEL_19:
  *v4 = v13;
}

void sub_181A4CE14()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (!v3)
    {
      XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
      if (!v4)
      {
        *(_QWORD *)(v0 + 24) = v2;
        _StringGuts.grow(_:)(77);
        v6._countAndFlagsBits = 0xD000000000000027;
        v6._object = (void *)0x8000000182305A10;
        String.append(_:)(v6);
        JUMPOUT(0x181A4CC7CLL);
      }
      JUMPOUT(0x181A4CB48);
    }
    JUMPOUT(0x181A4C748);
  }
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x210] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x220] = v5;
  STACK[0x230] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4CF44);
}

void sub_181A4CE50()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  __int128 v5;
  Swift::String v6;

  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v3))
  {
    v4 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)&STACK[0x290] = *(_OWORD *)v0;
    *(_OWORD *)&STACK[0x2A0] = v5;
    STACK[0x2B0] = *(_QWORD *)(v0 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v4, &STACK[0x290]);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v6._countAndFlagsBits = 0xD000000000000027;
    v6._object = (void *)0x8000000182305A10;
    String.append(_:)(v6);
    JUMPOUT(0x181A4CC7CLL);
  }
  JUMPOUT(0x181A4CB48);
}

void sub_181A4CED0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v3)
    {
      *(_QWORD *)(v0 + 24) = v2;
      _StringGuts.grow(_:)(77);
      v4._countAndFlagsBits = 0xD000000000000027;
      v4._object = (void *)0x8000000182305A10;
      String.append(_:)(v4);
      JUMPOUT(0x181A4CC7CLL);
    }
    JUMPOUT(0x181A4CB48);
  }
  JUMPOUT(0x181A4C704);
}

void sub_181A4CEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,__int128 a63)
{
  __int128 a64;
  uint64_t a65;
  __int128 *v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  Swift::String v70;

  if ((v66 & 0x100) != 0)
  {
    v69 = v65[1];
    a63 = *v65;
    a64 = v69;
    a65 = *((_QWORD *)v65 + 4);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a63);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v68)
      JUMPOUT(0x181A4CB48);
  }
  *((_QWORD *)v65 + 3) = v67;
  _StringGuts.grow(_:)(77);
  v70._countAndFlagsBits = 0xD000000000000027;
  v70._object = (void *)0x8000000182305A10;
  String.append(_:)(v70);
  JUMPOUT(0x181A4CC7CLL);
}

void sub_181A4CF00()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (!v3)
    {
      *(_QWORD *)(v0 + 24) = v2;
      _StringGuts.grow(_:)(77);
      v4._countAndFlagsBits = 0xD000000000000027;
      v4._object = (void *)0x8000000182305A10;
      String.append(_:)(v4);
      JUMPOUT(0x181A4CC7CLL);
    }
    JUMPOUT(0x181A4CB48);
  }
  STACK[0x200] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4CFA8);
}

void sub_181A4D018()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  Swift::Bool v5;
  uint64_t v6;
  Foundation::XMLPlistTag v7;
  uint64_t v8;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (!v2)
    {
      XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
      if (!v3)
      {
        v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
        if (!v6)
        {
          if (!v5)
            JUMPOUT(0x181A4D250);
          v7 = XMLPlistScanner.peekXMLElement()()._0;
          if (!v8)
            __asm { BR              X10 }
        }
      }
    }
    JUMPOUT(0x181A4C748);
  }
  v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x500] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x510] = v4;
  STACK[0x520] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4D130);
}

void sub_181A4D050()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  unsigned __int8 v3;
  __int128 v4;
  Swift::Bool v5;
  uint64_t v6;
  Foundation::XMLPlistTag v7;
  uint64_t v8;

  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v2))
  {
    v3 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    v4 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)&STACK[0x580] = *(_OWORD *)v0;
    *(_OWORD *)&STACK[0x590] = v4;
    STACK[0x5A0] = *(_QWORD *)(v0 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v3, &STACK[0x580]);
    v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
    if (!v6)
    {
      if (!v5)
        JUMPOUT(0x181A4D250);
      v7 = XMLPlistScanner.peekXMLElement()()._0;
      if (!v8)
        __asm { BR              X10 }
    }
  }
  JUMPOUT(0x181A4C748);
}

void sub_181A4D0BC()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  __int128 v3;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v2)
      JUMPOUT(0x181A4D1A4);
    JUMPOUT(0x181A4C748);
  }
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x2F0] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x300] = v3;
  STACK[0x310] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4C704);
}

void sub_181A4D0D0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  __int128 v3;

  if ((v1 & 0x100) != 0)
  {
    v3 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)&STACK[0x4A0] = *(_OWORD *)v0;
    *(_OWORD *)&STACK[0x4B0] = v3;
    STACK[0x4C0] = *(_QWORD *)(v0 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x4A0]);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v2)
      JUMPOUT(0x181A4C748);
  }
  JUMPOUT(0x181A4D1A4);
}

void sub_181A4D0E4()
{
  uint64_t v0;
  __int16 v1;
  __int128 v2;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x181A4D0F4);
  }
  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&STACK[0x4D0] = *(_OWORD *)v0;
  *(_OWORD *)&STACK[0x4E0] = v2;
  STACK[0x4F0] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4D19CLL);
}

void sub_181A4D1F8()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;

  if ((v3 & 0x100) == 0)
  {
    v4 = XMLPlistScanner.scanThroughCloseTag(_:)(v3);
    if (!v2)
    {
      v6 = v4;
      v7 = v5;
      v8 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v3);
      v9 = v1[1];
      v10 = v6 - *v1;
      v11 = v1[4];
      STACK[0x428] = *v1;
      STACK[0x430] = v9;
      *(_OWORD *)&STACK[0x438] = *((_OWORD *)v1 + 1);
      STACK[0x448] = v11;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v8, v7 - v6, v10, &STACK[0x428]);
      v1[3] = v0;
      _StringGuts.grow(_:)(77);
      v13._countAndFlagsBits = 0xD000000000000027;
      v13._object = (void *)0x8000000182305A10;
      String.append(_:)(v13);
      v14 = v1[2];
      v15 = v1[4];
      *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
      STACK[0x358] = v14;
      STACK[0x360] = v0;
      STACK[0x368] = v15;
      JUMPOUT(0x181A4CC7CLL);
    }
    JUMPOUT(0x181A4CB48);
  }
  v12 = *((_OWORD *)v1 + 1);
  *(_OWORD *)&STACK[0x400] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x410] = v12;
  STACK[0x420] = v1[4];
  JUMPOUT(0x181A4C698);
}

void sub_181A4D258()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;

  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v2 == 3);
    if (!v3)
    {
      XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2);
      if (!v4)
      {
        *(_QWORD *)(v1 + 24) = v0;
        _StringGuts.grow(_:)(77);
        v6._countAndFlagsBits = 0xD000000000000027;
        v6._object = (void *)0x8000000182305A10;
        String.append(_:)(v6);
        v7 = *(_QWORD *)(v1 + 16);
        v8 = *(_QWORD *)(v1 + 32);
        *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
        STACK[0x358] = v7;
        STACK[0x360] = v0;
        STACK[0x368] = v8;
        JUMPOUT(0x181A4CC7CLL);
      }
      JUMPOUT(0x181A4CB48);
    }
    JUMPOUT(0x181A4C748);
  }
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)&STACK[0x3D0] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x3E0] = v5;
  STACK[0x3F0] = *(_QWORD *)(v1 + 32);
  JUMPOUT(0x181A4D368);
}

void sub_181A4D294()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  unsigned __int8 v4;
  __int128 v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;

  if ((v2 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2), !v3))
  {
    v4 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
    v5 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)&STACK[0x450] = *(_OWORD *)v1;
    *(_OWORD *)&STACK[0x460] = v5;
    STACK[0x470] = *(_QWORD *)(v1 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v4, &STACK[0x450]);
    *(_QWORD *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77);
    v6._countAndFlagsBits = 0xD000000000000027;
    v6._object = (void *)0x8000000182305A10;
    String.append(_:)(v6);
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 32);
    *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
    STACK[0x358] = v7;
    STACK[0x360] = v0;
    STACK[0x368] = v8;
    JUMPOUT(0x181A4CC7CLL);
  }
  JUMPOUT(0x181A4CB48);
}

void sub_181A4D2F4()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  __int128 v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;

  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v3)
    {
      *(_QWORD *)(v1 + 24) = v0;
      _StringGuts.grow(_:)(77);
      v5._countAndFlagsBits = 0xD000000000000027;
      v5._object = (void *)0x8000000182305A10;
      String.append(_:)(v5);
      v6 = *(_QWORD *)(v1 + 16);
      v7 = *(_QWORD *)(v1 + 32);
      *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
      STACK[0x358] = v6;
      STACK[0x360] = v0;
      STACK[0x368] = v7;
      JUMPOUT(0x181A4CC7CLL);
    }
    JUMPOUT(0x181A4CB48);
  }
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)&STACK[0x320] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x330] = v4;
  STACK[0x340] = *(_QWORD *)(v1 + 32);
  JUMPOUT(0x181A4C704);
}

void sub_181A4D30C()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  __int128 v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;

  if ((v2 & 0x100) != 0)
  {
    v4 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)&STACK[0x370] = *(_OWORD *)v1;
    *(_OWORD *)&STACK[0x380] = v4;
    STACK[0x390] = *(_QWORD *)(v1 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x370]);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v3)
      JUMPOUT(0x181A4CB48);
  }
  *(_QWORD *)(v1 + 24) = v0;
  _StringGuts.grow(_:)(77);
  v5._countAndFlagsBits = 0xD000000000000027;
  v5._object = (void *)0x8000000182305A10;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
  STACK[0x358] = v6;
  STACK[0x360] = v0;
  STACK[0x368] = v7;
  JUMPOUT(0x181A4CC7CLL);
}

void sub_181A4D324()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  __int128 v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;

  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (!v3)
    {
      *(_QWORD *)(v1 + 24) = v0;
      _StringGuts.grow(_:)(77);
      v5._countAndFlagsBits = 0xD000000000000027;
      v5._object = (void *)0x8000000182305A10;
      String.append(_:)(v5);
      v6 = *(_QWORD *)(v1 + 16);
      v7 = *(_QWORD *)(v1 + 32);
      *(_OWORD *)&STACK[0x348] = *(_OWORD *)v1;
      STACK[0x358] = v6;
      STACK[0x360] = v0;
      STACK[0x368] = v7;
      JUMPOUT(0x181A4CC7CLL);
    }
    JUMPOUT(0x181A4CB48);
  }
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)&STACK[0x3A0] = *(_OWORD *)v1;
  *(_OWORD *)&STACK[0x3B0] = v4;
  STACK[0x3C0] = *(_QWORD *)(v1 + 32);
  JUMPOUT(0x181A4D3CCLL);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanDict()()
{
  __int128 *v0;
  _QWORD *v1;
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  Swift::Bool v5;
  uint64_t v6;
  Foundation::XMLPlistTag v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Bool v11;
  uint64_t v12;
  Foundation::XMLPlistTag v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  Swift::String v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  int64_t v46;

  v1 = v0;
  v2 = *v0;
  v3 = v0[1];
  v45 = *((_QWORD *)v0 + 4);
  v44[1] = v3;
  v44[0] = v2;
  v4 = (_QWORD *)v0 + 5;
  v46 = XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(9u, v44);
  if (v1[4] == v1[3])
    goto LABEL_12;
  v5 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_dict);
  if (v6)
  {
LABEL_15:
    v19 = v0[1];
    v42[0] = *v0;
    v42[1] = v19;
    v43 = *((_QWORD *)v0 + 4);
    v17 = v42;
    goto LABEL_19;
  }
  if (!v5)
  {
LABEL_12:
    XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_dict);
    v16 = v0[1];
    if (v15)
    {
      v33[0] = *v0;
      v33[1] = v16;
      v34 = *((_QWORD *)v0 + 4);
      v17 = v33;
    }
    else
    {
      v31[0] = *v0;
      v31[1] = v16;
      v32 = *((_QWORD *)v0 + 4);
      v17 = v31;
    }
    goto LABEL_19;
  }
  v7 = XMLPlistScanner.peekXMLElement()()._0;
  if (v8)
    goto LABEL_15;
  if (v7 != Foundation_XMLPlistTag_key)
  {
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000028;
    *(_QWORD *)(v18 + 8) = 0x8000000182305AC0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_BYTE *)(v18 + 32) = 5;
    swift_willThrow();
    goto LABEL_15;
  }
  XMLPlistScanner.scanString(asKey:)(1);
  if (v9)
    goto LABEL_15;
  XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_key);
  if (v10)
    goto LABEL_15;
  v11 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_dict);
  if (!v12)
  {
    if (!v11)
    {
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      v20 = v0[1];
      v39 = *v0;
      v40 = v20;
      v41 = *((_QWORD *)v0 + 4);
      BufferReader.lineNumber.getter();
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_QWORD *)v22 = 0xD00000000000002CLL;
      *(_QWORD *)(v22 + 8) = 0x8000000182305AF0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v22 + 24) = 0;
      *(_BYTE *)(v22 + 32) = 5;
      swift_willThrow();
      v23 = v0[1];
      v37[0] = *v0;
      v37[1] = v23;
      v38 = *((_QWORD *)v0 + 4);
      v17 = v37;
      goto LABEL_19;
    }
    v13 = XMLPlistScanner.peekXMLElement()()._0;
    if (!v14)
      __asm { BR              X9 }
  }
  v24 = v0[1];
  v35[0] = *v0;
  v35[1] = v24;
  v36 = *((_QWORD *)v0 + 4);
  v17 = v35;
LABEL_19:
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v17);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v25 = *(_QWORD *)(*((_QWORD *)v0 + 5) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, 10);
  destructiveProjectEnumData for PredicateCodableError(v26, v27);
  v28 = (_QWORD *)*((_QWORD *)v0 + 5);
  v29 = specialized Array.count.getter(v1[5]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
  v30 = &v28[v46];
  v30[4] = v29;
  v30[5] = 0;
  *v4 = v28;
}

void sub_181A4E0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  Swift::String v14;

  if ((v2 & 0x100) == 0)
  {
    v5 = XMLPlistScanner.scanThroughCloseTag(_:)(v2);
    if (!v1)
    {
      v7 = v5;
      v8 = v6;
      v9 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
      v10 = *(_QWORD *)(v0 + 8);
      v11 = v7 - *(_QWORD *)v0;
      v12 = *(_QWORD *)(v0 + 32);
      STACK[0x248] = *(_QWORD *)v0;
      STACK[0x250] = v10;
      *(_OWORD *)&STACK[0x258] = *(_OWORD *)(v0 + 16);
      STACK[0x268] = v12;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v9, v8 - v7, v11, &STACK[0x248]);
      *(_QWORD *)(v0 + 24) = v3;
      _StringGuts.grow(_:)(77);
      v14._countAndFlagsBits = 0xD000000000000027;
      v14._object = (void *)0x8000000182305A10;
      String.append(_:)(v14);
      JUMPOUT(0x181A4E3E4);
    }
    JUMPOUT(0x181A4DF10);
  }
  v13 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v4 + 416) = *(_OWORD *)v0;
  *(_OWORD *)(v4 + 432) = v13;
  STACK[0x240] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4DE68);
}

void sub_181A4E120()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  _QWORD *v10;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (v4 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), v5))
      JUMPOUT(0x181A4DF10);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v7._countAndFlagsBits = 0xD000000000000027;
    v7._object = (void *)0x8000000182305A10;
    String.append(_:)(v7);
    BufferReader.lineNumber.getter();
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x8000000182305A40;
    v9._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v9);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0;
    JUMPOUT(0x181A4DF04);
  }
  v6 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 1440) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 1456) = v6;
  STACK[0x640] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4E2F8);
}

void sub_181A4E15C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  _QWORD *v13;

  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v4))
  {
    v5 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    v6 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 1568) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 1584) = v6;
    STACK[0x6C0] = *(_QWORD *)(v0 + 32);
    XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(&STACK[0x6A0]);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
    destructiveProjectEnumData for PredicateCodableError(v8, v9);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v10._countAndFlagsBits = 0xD000000000000027;
    v10._object = (void *)0x8000000182305A10;
    String.append(_:)(v10);
    BufferReader.lineNumber.getter();
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x8000000182305A40;
    v12._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v12);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *v13 = 0;
    v13[1] = 0xE000000000000000;
    v13[2] = 0;
    v13[3] = 0;
    JUMPOUT(0x181A4DF04);
  }
  JUMPOUT(0x181A4DF10);
}

uint64_t sub_181A4E1E8()
{
  uint64_t v0;
  __int16 v1;
  _OWORD *v2;
  Swift::Bool v3;
  uint64_t v4;
  Foundation::XMLPlistTag v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  if ((v1 & 0x100) != 0)
  {
    v8 = *(_OWORD *)(v0 + 16);
    v2[34] = *(_OWORD *)v0;
    v2[35] = v8;
    STACK[0x2C0] = *(_QWORD *)(v0 + 32);
    goto LABEL_10;
  }
  v3 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v4)
    goto LABEL_11;
  if (!v3)
  {
    v9 = *(_OWORD *)(v0 + 16);
    v2[81] = *(_OWORD *)v0;
    v2[82] = v9;
    STACK[0x5B0] = *(_QWORD *)(v0 + 32);
LABEL_10:
    JUMPOUT(0x181A4DECCLL);
  }
  v5 = XMLPlistScanner.peekXMLElement()()._0;
  if (v6)
LABEL_11:
    JUMPOUT(0x181A4DF10);
  return ((uint64_t (*)(void))((char *)&loc_181A4E22C + dword_181A4EB14[v5]))();
}

uint64_t sub_181A4E23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  Swift::Bool v13;
  uint64_t v14;
  Foundation::XMLPlistTag v15;
  uint64_t v16;

  if ((v2 & 0x100) != 0)
  {
    v12 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 1168) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 1184) = v12;
    STACK[0x530] = *(_QWORD *)(v0 + 32);
    JUMPOUT(0x181A4DE68);
  }
  v4 = XMLPlistScanner.scanThroughCloseTag(_:)(v2);
  if (v1)
    goto LABEL_15;
  v6 = v4;
  v7 = v5;
  v8 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
  v9 = *(_QWORD *)(v0 + 8);
  v10 = v6 - *(_QWORD *)v0;
  v11 = *(_QWORD *)(v0 + 32);
  STACK[0x538] = *(_QWORD *)v0;
  STACK[0x540] = v9;
  *(_OWORD *)&STACK[0x548] = *(_OWORD *)(v0 + 16);
  STACK[0x558] = v11;
  XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v8, v7 - v6, v10, &STACK[0x538]);
  v13 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v14)
    goto LABEL_15;
  if (!v13)
    JUMPOUT(0x181A4E148);
  v15 = XMLPlistScanner.peekXMLElement()()._0;
  if (v16)
LABEL_15:
    JUMPOUT(0x181A4DF10);
  return ((uint64_t (*)(void))((char *)&loc_181A4E824 + *((int *)qword_181A4EB40 + v15)))();
}

void sub_181A4E298()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD *v9;

  if ((v1 & 0x100) != 0)
  {
    v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 1344) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 1360) = v5;
    STACK[0x5E0] = *(_QWORD *)(v0 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x5C0]);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v4)
      JUMPOUT(0x181A4DF10);
  }
  *(_QWORD *)(v0 + 24) = v2;
  _StringGuts.grow(_:)(77);
  v6._countAndFlagsBits = 0xD000000000000027;
  v6._object = (void *)0x8000000182305A10;
  String.append(_:)(v6);
  BufferReader.lineNumber.getter();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000182305A40;
  v8._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v8);
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  v9[2] = 0;
  v9[3] = 0;
  JUMPOUT(0x181A4DF04);
}

void sub_181A4E2B0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD *v9;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (v4)
      JUMPOUT(0x181A4E2C4);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v6._countAndFlagsBits = 0xD000000000000027;
    v6._object = (void *)0x8000000182305A10;
    String.append(_:)(v6);
    BufferReader.lineNumber.getter();
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x8000000182305A40;
    v8._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v8);
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0;
    JUMPOUT(0x181A4DF04);
  }
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 1392) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 1408) = v5;
  STACK[0x610] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4E374);
}

void sub_181A4E484()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  Swift::String v7;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v1 == 3);
    if (v4 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), v5))
      JUMPOUT(0x181A4DF10);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v7._countAndFlagsBits = 0xD000000000000027;
    v7._object = (void *)0x8000000182305A10;
    String.append(_:)(v7);
    JUMPOUT(0x181A4E3E4);
  }
  v6 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 368) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 384) = v6;
  STACK[0x210] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4E5A4);
}

void sub_181A4E4C0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v6;
  Swift::String v7;

  if ((v1 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1), !v4))
  {
    v5 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
    v6 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 496) = *(_OWORD *)v0;
    *(_OWORD *)(v3 + 512) = v6;
    STACK[0x290] = *(_QWORD *)(v0 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v5, &STACK[0x270]);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v7._countAndFlagsBits = 0xD000000000000027;
    v7._object = (void *)0x8000000182305A10;
    String.append(_:)(v7);
    JUMPOUT(0x181A4E3E4);
  }
  JUMPOUT(0x181A4DF10);
}

void sub_181A4E534()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (v4)
      JUMPOUT(0x181A4DF10);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v6._countAndFlagsBits = 0xD000000000000027;
    v6._object = (void *)0x8000000182305A10;
    String.append(_:)(v6);
    JUMPOUT(0x181A4E3E4);
  }
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 192) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 208) = v5;
  JUMPOUT(0x181A4DECCLL);
}

void sub_181A4E54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  Swift::String v69;

  if ((v64 & 0x100) != 0)
  {
    v68 = *(_OWORD *)(v63 + 16);
    *(_OWORD *)(v66 + 272) = *(_OWORD *)v63;
    *(_OWORD *)(v66 + 288) = v68;
    a63 = *(_QWORD *)(v63 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &a59);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v67)
      JUMPOUT(0x181A4DF10);
  }
  *(_QWORD *)(v63 + 24) = v65;
  _StringGuts.grow(_:)(77);
  v69._countAndFlagsBits = 0xD000000000000027;
  v69._object = (void *)0x8000000182305A10;
  String.append(_:)(v69);
  JUMPOUT(0x181A4E3E4);
}

void sub_181A4E564()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (v4)
      JUMPOUT(0x181A4DF10);
    *(_QWORD *)(v0 + 24) = v2;
    _StringGuts.grow(_:)(77);
    v6._countAndFlagsBits = 0xD000000000000027;
    v6._object = (void *)0x8000000182305A10;
    String.append(_:)(v6);
    JUMPOUT(0x181A4E3E4);
  }
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 320) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 336) = v5;
  JUMPOUT(0x181A4E5FCLL);
}

uint64_t sub_181A4E66C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::Bool v6;
  uint64_t v7;
  Foundation::XMLPlistTag v8;
  uint64_t v9;

  if ((v1 & 0x100) != 0)
  {
    v5 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v2 + 1120) = *(_OWORD *)v0;
    *(_OWORD *)(v2 + 1136) = v5;
    STACK[0x500] = *(_QWORD *)(v0 + 32);
    JUMPOUT(0x181A4E778);
  }
  XMLPlistScanner.scanString(asKey:)(v1 == 3);
  if (v3)
    goto LABEL_15;
  XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
  if (v4)
    goto LABEL_15;
  v6 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v7)
    goto LABEL_15;
  if (!v6)
    JUMPOUT(0x181A4E88CLL);
  v8 = XMLPlistScanner.peekXMLElement()()._0;
  if (v9)
LABEL_15:
    JUMPOUT(0x181A4DF10);
  return ((uint64_t (*)(void))((char *)&loc_181A4E824 + *((int *)qword_181A4EB40 + v8)))();
}

uint64_t sub_181A4E6A4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  __int128 v5;
  Swift::Bool v6;
  uint64_t v7;
  Foundation::XMLPlistTag v8;
  uint64_t v9;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v1);
    if (v3)
      goto LABEL_10;
  }
  v4 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v1);
  v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 1248) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 1264) = v5;
  STACK[0x580] = *(_QWORD *)(v0 + 32);
  XMLPlistScanner.PartialMapData.record(tagType:with:)(v4, &STACK[0x560]);
  v6 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (v7)
    goto LABEL_10;
  if (!v6)
    JUMPOUT(0x181A4E88CLL);
  v8 = XMLPlistScanner.peekXMLElement()()._0;
  if (v9)
LABEL_10:
    JUMPOUT(0x181A4DF10);
  return ((uint64_t (*)(void))((char *)&loc_181A4E824 + *((int *)qword_181A4EB40 + v8)))();
}

void sub_181A4E708()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (!v3)
      JUMPOUT(0x181A4E7E0);
    JUMPOUT(0x181A4DF10);
  }
  v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 592) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 608) = v4;
  STACK[0x2F0] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4DECCLL);
}

void sub_181A4E71C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  if ((v1 & 0x100) != 0)
  {
    v4 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v2 + 1024) = *(_OWORD *)v0;
    *(_OWORD *)(v2 + 1040) = v4;
    STACK[0x4A0] = *(_QWORD *)(v0 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x480]);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v3)
      JUMPOUT(0x181A4DF10);
  }
  JUMPOUT(0x181A4E7E0);
}

void sub_181A4E730()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  __int128 v3;

  if ((v1 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    JUMPOUT(0x181A4E740);
  }
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 1072) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 1088) = v3;
  STACK[0x4D0] = *(_QWORD *)(v0 + 32);
  JUMPOUT(0x181A4E7D8);
}

void sub_181A4E834()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;

  if ((v3 & 0x100) == 0)
  {
    v5 = XMLPlistScanner.scanThroughCloseTag(_:)(v3);
    if (!v2)
    {
      v7 = v5;
      v8 = v6;
      v9 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v3);
      v10 = v1[1];
      v11 = v7 - *v1;
      v12 = v1[4];
      STACK[0x408] = *v1;
      STACK[0x410] = v10;
      *(_OWORD *)&STACK[0x418] = *((_OWORD *)v1 + 1);
      STACK[0x428] = v12;
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v9, v8 - v7, v11, &STACK[0x408]);
      v1[3] = v0;
      _StringGuts.grow(_:)(77);
      v14._countAndFlagsBits = 0xD000000000000027;
      v14._object = (void *)0x8000000182305A10;
      String.append(_:)(v14);
      v15 = v1[2];
      v16 = v1[4];
      *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
      STACK[0x338] = v15;
      STACK[0x340] = v0;
      STACK[0x348] = v16;
      JUMPOUT(0x181A4E3E4);
    }
    JUMPOUT(0x181A4DF10);
  }
  v13 = *((_OWORD *)v1 + 1);
  *(_OWORD *)(v4 + 864) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 880) = v13;
  STACK[0x400] = v1[4];
  JUMPOUT(0x181A4DE68);
}

void sub_181A4E894()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  Swift::String v7;
  unint64_t v8;
  unint64_t v9;

  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanString(asKey:)(v2 == 3);
    if (v4 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2), v5))
      JUMPOUT(0x181A4DF10);
    *(_QWORD *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77);
    v7._countAndFlagsBits = 0xD000000000000027;
    v7._object = (void *)0x8000000182305A10;
    String.append(_:)(v7);
    v8 = *(_QWORD *)(v1 + 16);
    v9 = *(_QWORD *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v8;
    STACK[0x340] = v0;
    STACK[0x348] = v9;
    JUMPOUT(0x181A4E3E4);
  }
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 816) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 832) = v6;
  STACK[0x3D0] = *(_QWORD *)(v1 + 32);
  JUMPOUT(0x181A4E998);
}

void sub_181A4E8D0()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v6;
  Swift::String v7;
  unint64_t v8;
  unint64_t v9;

  if ((v2 & 0x100) != 0 || (XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v2), !v4))
  {
    v5 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v2);
    v6 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v3 + 944) = *(_OWORD *)v1;
    *(_OWORD *)(v3 + 960) = v6;
    STACK[0x450] = *(_QWORD *)(v1 + 32);
    XMLPlistScanner.PartialMapData.record(tagType:with:)(v5, &STACK[0x430]);
    *(_QWORD *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77);
    v7._countAndFlagsBits = 0xD000000000000027;
    v7._object = (void *)0x8000000182305A10;
    String.append(_:)(v7);
    v8 = *(_QWORD *)(v1 + 16);
    v9 = *(_QWORD *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v8;
    STACK[0x340] = v0;
    STACK[0x348] = v9;
    JUMPOUT(0x181A4E3E4);
  }
  JUMPOUT(0x181A4DF10);
}

void sub_181A4E928()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;

  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanPlist()();
    if (v4)
      JUMPOUT(0x181A4DF10);
    *(_QWORD *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77);
    v6._countAndFlagsBits = 0xD000000000000027;
    v6._object = (void *)0x8000000182305A10;
    String.append(_:)(v6);
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v7;
    STACK[0x340] = v0;
    STACK[0x348] = v8;
    JUMPOUT(0x181A4E3E4);
  }
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 640) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 656) = v5;
  STACK[0x320] = *(_QWORD *)(v1 + 32);
  JUMPOUT(0x181A4DECCLL);
}

void sub_181A4E940()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;

  if ((v2 & 0x100) != 0)
  {
    v5 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v3 + 720) = *(_OWORD *)v1;
    *(_OWORD *)(v3 + 736) = v5;
    STACK[0x370] = *(_QWORD *)(v1 + 32);
    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(8u, &STACK[0x350]);
  }
  else
  {
    XMLPlistScanner.scanArray()();
    if (v4)
      JUMPOUT(0x181A4DF10);
  }
  *(_QWORD *)(v1 + 24) = v0;
  _StringGuts.grow(_:)(77);
  v6._countAndFlagsBits = 0xD000000000000027;
  v6._object = (void *)0x8000000182305A10;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
  STACK[0x338] = v7;
  STACK[0x340] = v0;
  STACK[0x348] = v8;
  JUMPOUT(0x181A4E3E4);
}

void sub_181A4E958()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;

  if ((v2 & 0x100) == 0)
  {
    XMLPlistScanner.scanDict()();
    if (v4)
      JUMPOUT(0x181A4DF10);
    *(_QWORD *)(v1 + 24) = v0;
    _StringGuts.grow(_:)(77);
    v6._countAndFlagsBits = 0xD000000000000027;
    v6._object = (void *)0x8000000182305A10;
    String.append(_:)(v6);
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 32);
    *(_OWORD *)&STACK[0x328] = *(_OWORD *)v1;
    STACK[0x338] = v7;
    STACK[0x340] = v0;
    STACK[0x348] = v8;
    JUMPOUT(0x181A4E3E4);
  }
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 768) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 784) = v5;
  STACK[0x3A0] = *(_QWORD *)(v1 + 32);
  JUMPOUT(0x181A4E9F0);
}

uint64_t XMLPlistScanner.scanThroughCloseTag(_:)(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1[3];
  v2 = v1[4];
  if (v2 < v3 + 1)
  {
LABEL_9:
    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)result);
    if (v10)
      return v9;
    else
      return v3;
  }
  else
  {
    v4 = *v1 + v1[1] - v2;
    v5 = v2 - v3;
    v6 = v3 - *v1;
    v7 = (_BYTE *)v1[3];
    while (v2 >= (unint64_t)v7)
    {
      if (v6 < 0)
        goto LABEL_13;
      if (v5 < 0)
        goto LABEL_14;
      if ((v4 & 0x8000000000000000) != 0)
        goto LABEL_15;
      if (*v7 != 60)
      {
        v8 = v7 + 2;
        v1[3] = v7 + 1;
        --v5;
        ++v6;
        ++v7;
        if (v2 >= (unint64_t)v8)
          continue;
      }
      goto LABEL_9;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

unsigned __int8 *XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(unsigned __int8 *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;

  v2 = v1[4];
  v3 = v2 - (_QWORD)result;
  if (v2 > (unint64_t)result)
  {
    v4 = v1[1] + *v1 - (_QWORD)result;
    for (i = (unint64_t)&result[-*v1]; (i & 0x8000000000000000) == 0; ++i)
    {
      v6 = v4-- < 1;
      if (v6)
        break;
      v7 = *result;
      v6 = v7 > 0x20;
      v8 = (1 << v7) & 0x100002600;
      if (v6 || v8 == 0)
        return result;
      ++result;
      if (!--v3)
        return (unsigned __int8 *)v1[4];
    }
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.skipDTD()()
{
  _QWORD *v0;
  _DWORD *v1;
  unsigned __int8 *v2;
  unint64_t v3;
  Swift::String v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (_DWORD *)v0[3];
  v2 = (unsigned __int8 *)v1 + 7;
  if (v0[4] < (unint64_t)v1 + 7)
    goto LABEL_9;
  v3 = *v0 + v0[1];
  if (v3 < (unint64_t)v1)
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((uint64_t)v1 - *v0 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((uint64_t)(v3 - (_QWORD)v1) < 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (*v1 == 1413697348 && *(_DWORD *)((char *)v1 + 3) == 1162893652)
  {
    v0[3] = v2;
    v8 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v2);
    v0[3] = v8;
    v9 = (unsigned __int8 *)v0[4];
    while (v8 != v9)
    {
      v11 = *v8++;
      v10 = v11;
      v0[3] = v8;
      if (v11 == 62)
        return;
      if (v10 == 91)
      {
        v12 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_QWORD *)v6 = 91;
        *(_QWORD *)(v6 + 8) = v12;
        *(_QWORD *)(v6 + 16) = 0xD000000000000011;
        *(_QWORD *)(v6 + 24) = 0x80000001823059B0;
        v7 = 3;
        goto LABEL_10;
      }
    }
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000011;
    *(_QWORD *)(v13 + 8) = 0x80000001823059B0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_BYTE *)(v13 + 32) = 0;
    goto LABEL_11;
  }
LABEL_9:
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  BufferReader.lineNumber.getter();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(_QWORD *)v6 = 0xD000000000000016;
  *(_QWORD *)(v6 + 8) = 0x8000000182305990;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v7 = 5;
LABEL_10:
  *(_BYTE *)(v6 + 32) = v7;
LABEL_11:
  swift_willThrow();
}

void XMLPlistScanner.scanXMLPropertyList()()
{
  uint64_t *v0;
  unsigned __int8 *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (unsigned __int8 *)v0[3];
  v2 = v0[4];
  if ((unsigned __int8 *)v2 == v1)
  {
LABEL_18:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_BYTE *)(v11 + 32) = 0;
LABEL_22:
    swift_willThrow();
    return;
  }
  while (1)
  {
    v3 = *v0;
    v4 = v0[1];
    v5 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v1);
    v0[3] = (uint64_t)v5;
    if ((unsigned __int8 *)v2 == v5)
    {
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_QWORD *)v12 = 0xD000000000000014;
      *(_QWORD *)(v12 + 8) = 0x8000000182305940;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      v13 = 5;
LABEL_21:
      *(_BYTE *)(v12 + 32) = v13;
      goto LABEL_22;
    }
    v6 = v5 + 1;
    v7 = *v5;
    v0[3] = (uint64_t)(v5 + 1);
    if (v7 != 60)
    {
      v14 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_QWORD *)v12 = v7;
      *(_QWORD *)(v12 + 8) = v14;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      v13 = 3;
      goto LABEL_21;
    }
    v8 = v5 + 2;
    if (v2 < (unint64_t)(v5 + 2))
      goto LABEL_18;
    if ((uint64_t)&v6[-v3] < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }
    if ((uint64_t)(v2 - (_QWORD)v6) < 0)
      goto LABEL_31;
    if ((uint64_t)(v3 + v4 - v2) < 0)
      goto LABEL_32;
    v9 = *v6;
    if (v9 == 33)
    {
      if (v2 >= (unint64_t)(v5 + 4) && v5[2] == 45 && v5[3] == 45)
      {
        v0[3] = (uint64_t)(v5 + 4);
        XMLPlistScanner.skipXMLComment()();
      }
      else
      {
        v0[3] = (uint64_t)v8;
        XMLPlistScanner.skipDTD()();
      }
      goto LABEL_16;
    }
    if (v9 != 63)
      break;
    v0[3] = (uint64_t)v8;
    XMLPlistScanner.skipXMLProcessingInstruction()();
LABEL_16:
    if (v10)
      return;
    v1 = (unsigned __int8 *)v0[3];
    if ((unsigned __int8 *)v2 == v1)
      goto LABEL_18;
  }
  XMLPlistScanner.scanXMLElement()();
  if (!v15)
  {
    v16 = v0[2];
    v17 = v0[4];
    if (v17 < v16)
      goto LABEL_33;
    if ((uint64_t)(v16 - *v0) < 0)
      goto LABEL_34;
    v18 = v17 - v16;
    if ((uint64_t)(v17 - v16) < 0)
      goto LABEL_35;
    if ((uint64_t)(*v0 + v0[1] - v17) < 0)
      goto LABEL_36;
    v19 = v0[5];
    type metadata accessor for XMLPlistMap();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
    v21 = swift_allocObject();
    *(_DWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 16) = v16;
    *(_QWORD *)(v21 + 24) = v18;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v20 + 24) = v21;
    swift_bridgeObjectRetain();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance XMLPlistError(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[2];
  __int128 v6[2];

  outlined init with take of PredicateCodableError(a1, (uint64_t)v5);
  outlined init with take of PredicateCodableError(a2, (uint64_t)v6);
  specialized static XMLPlistError.== infix(_:_:)(v5, v6);
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError;
  if (!lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for XMLPlistError, &type metadata for XMLPlistError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLPlistError and conformance XMLPlistError);
  }
  return result;
}

_QWORD *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v10, *result + a3, a4);
    if (!v5)
      *a5 = v10;
  }
  return result;
}

void specialized static XMLPlistError.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  _BYTE v3[8];
  _BYTE v4[40];

  outlined init with take of PredicateCodableError(a2, (uint64_t)v3);
  outlined init with take of PredicateCodableError(a1, (uint64_t)v4);
  __asm { BR              X10 }
}

uint64_t sub_181A4F330()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v8;
  v1 = v9;
  outlined init with take of PredicateCodableError(v0, (uint64_t)&v5);
  if (!v7)
  {
    if (v1)
    {
      if (v6 && (v2 == v5 && v1 == v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        v3 = 1;
        return v3 & 1;
      }
    }
    else if (!v6)
    {
      swift_bridgeObjectRetain();
      v3 = 1;
      return v3 & 1;
    }
  }
  v3 = 0;
  return v3 & 1;
}

unint64_t specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(unint64_t result)
{
  if (result >= 0xE)
    return 14;
  return result;
}

uint64_t specialized XMLPlistMap.TypeDescriptor.init(_:)(unsigned __int8 a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_181A4F558 + 4 * byte_1820652E4[a1]))(0);
}

uint64_t sub_181A4F558()
{
  return 8;
}

uint64_t sub_181A4F560()
{
  return 7;
}

uint64_t sub_181A4F568()
{
  return 9;
}

uint64_t sub_181A4F570()
{
  return 3;
}

uint64_t sub_181A4F578()
{
  return 4;
}

uint64_t sub_181A4F580()
{
  return 5;
}

uint64_t sub_181A4F588()
{
  return 2;
}

uint64_t sub_181A4F590()
{
  return 6;
}

uint64_t sub_181A4F598()
{
  return 1;
}

void sub_181A4F5A0()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t result;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = type metadata accessor for Unicode.Scalar.Properties();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = a1[3];
  v7 = a1[4];
  while (v7 >= result + 1)
  {
    if (v7 < result)
    {
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return result;
    }
    if ((uint64_t)(result - *a1) < 0)
      goto LABEL_15;
    if ((uint64_t)(v7 - result) < 0)
      goto LABEL_16;
    if ((uint64_t)(*a1 + a1[1] - v7) < 0)
      goto LABEL_17;
    v8 = *(unsigned __int8 *)result;
    if (v8 < 0x21 || v8 - 127 <= 0x21)
    {
      a1[3] = ++result;
    }
    else
    {
      result = BufferView<A>._decodeScalar()((unsigned __int8 *)result, v7 - result);
      if ((result & 0x100000000) != 0)
        return result;
      v10 = v9;
      Unicode.Scalar.properties.getter();
      v11 = Unicode.Scalar.Properties.isWhitespace.getter();
      result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if ((v11 & 1) == 0)
        return result;
      v7 = a1[4];
      result = a1[3] + v10;
      a1[3] = result;
    }
  }
  return result;
}

unint64_t specialized static XMLPlistScanner.parseCDSect_pl(reader:string:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v3 = a1[3];
  v4 = a1[4];
  result = v3 + 9;
  if (v4 < v3 + 9)
    goto LABEL_21;
  v6 = *a1;
  v7 = a1[1];
  v8 = *a1 + v7;
  if (v8 < v3)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((uint64_t)(v3 - v6) < 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((uint64_t)(v8 - v3) < 0)
    goto LABEL_37;
  if (*(_QWORD *)v3 != 0x41544144435B213CLL || *(_BYTE *)(v3 + 8) != 91)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    BufferReader.lineNumber.getter();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v11 = 0xD00000000000002BLL;
    *(_QWORD *)(v11 + 8) = 0x8000000182305B30;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_BYTE *)(v11 + 32) = 5;
    return swift_willThrow();
  }
  a1[3] = result;
  if (result >= v4 - 2)
  {
LABEL_20:
    a1[3] = result;
LABEL_21:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_BYTE *)(v17 + 32) = 0;
    return swift_willThrow();
  }
  v13 = 0;
  v14 = v7 + v6 - v3 - 9;
  while (1)
  {
    v15 = (_WORD *)(v3 + v13 + 9);
    if (v8 < (unint64_t)v15)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if ((uint64_t)(v3 - v6 + 9 + v13) < 0)
      goto LABEL_33;
    if (v14 < 0)
      goto LABEL_34;
    if (*v15 == 23901 && *(_BYTE *)(v3 + v13 + 11) == 62)
      break;
    a1[3] = v3 + v13++ + 10;
    --v14;
    if (v4 - v3 - 11 == v13)
      goto LABEL_20;
  }
  v18 = v13 + 9;
  if (!*(_QWORD *)(a2 + 8))
  {
    v20 = v18 + v3;
LABEL_30:
    a1[3] = v20 + 3;
    return result;
  }
  if (v18 < 9)
    goto LABEL_38;
  if ((uint64_t)(result - v6) >= 0)
  {
    result = static String._tryFromUTF8(_:)();
    if (v19)
    {
      if (!*(_QWORD *)(a2 + 8))
        goto LABEL_40;
      String.append(_:)(*(Swift::String *)&result);
      result = swift_bridgeObjectRelease();
      v20 = a1[3];
      goto LABEL_30;
    }
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_BYTE *)(v21 + 32) = 6;
    return swift_willThrow();
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t *specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  const char *v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;

  v1 = *result;
  v3 = (_BYTE *)result[3];
  v2 = result[4];
  v4 = v3 + 1;
  if (v2 < (unint64_t)(v3 + 1))
    goto LABEL_9;
  if ((uint64_t)&v3[-v1] < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  if ((uint64_t)(v2 - (_QWORD)v3) < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((uint64_t)(v1 + result[1] - v2) >= 0)
  {
    if (*v3 == 120)
    {
      result[3] = (uint64_t)v4;
      v5 = 1;
      ++v3;
      if ((_BYTE *)v2 == v4)
      {
LABEL_7:
        v6 = 0;
LABEL_8:
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_BYTE *)(v7 + 32) = 0;
LABEL_32:
        swift_willThrow();
        return (uint64_t *)v6;
      }
LABEL_10:
      v6 = 0;
      v8 = 0;
      while (1)
      {
        v11 = v3[v8];
        result[3] = (uint64_t)&v3[v8 + 1];
        if (v11 == 59)
          break;
        if (v8 == 8)
        {
          _StringGuts.grow(_:)(116);
          v16._object = (void *)0x8000000182305BB0;
          v16._countAndFlagsBits = 0xD000000000000031;
          String.append(_:)(v16);
          BufferReader.lineNumber.getter();
          v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v17);
          swift_bridgeObjectRelease();
          v14 = 0xD000000000000041;
          v15 = " while parsing data (too large of a value for a Unicode sequence)";
          goto LABEL_27;
        }
        v9 = 16 * v6;
        if ((v11 - 58) >= 0xF6u)
        {
          if (!v5)
            v9 = 10 * v6;
          v10 = -48;
        }
        else
        {
          if ((v5 & 1) == 0)
          {
            v21 = BufferReader.lineNumber.getter();
            lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
            swift_allocError();
            *(_QWORD *)v19 = v11;
            *(_QWORD *)(v19 + 8) = v21;
            v22 = 0xD00000000000001CLL;
            v23 = "while parsing decimal entity";
            goto LABEL_30;
          }
          if ((v11 - 71) > 0xF9u)
          {
            v10 = -55;
          }
          else
          {
            if ((v11 - 103) <= 0xF9u)
            {
              v24 = BufferReader.lineNumber.getter();
              lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
              swift_allocError();
              *(_QWORD *)v19 = v11;
              *(_QWORD *)(v19 + 8) = v24;
              v22 = 0xD000000000000020;
              v23 = "while parsing hexadecimal entity";
LABEL_30:
              *(_QWORD *)(v19 + 16) = v22;
              *(_QWORD *)(v19 + 24) = (unint64_t)(v23 - 32) | 0x8000000000000000;
              v20 = 3;
LABEL_31:
              *(_BYTE *)(v19 + 32) = v20;
              goto LABEL_32;
            }
            v10 = -87;
          }
        }
        ++v8;
        v6 = v9 + (v11 + v10);
        if (&v3[v8] == (_BYTE *)v2)
          goto LABEL_8;
      }
      if (WORD1(v6) > 0x10u || (v6 & 0xFFFFF800) == 0xD800)
      {
        _StringGuts.grow(_:)(110);
        v12._object = (void *)0x8000000182305BB0;
        v12._countAndFlagsBits = 0xD000000000000031;
        String.append(_:)(v12);
        BufferReader.lineNumber.getter();
        v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14 = 0xD00000000000003BLL;
        v15 = " while parsing data (input did not result in a real string)";
LABEL_27:
        v18 = (unint64_t)(v15 - 32) | 0x8000000000000000;
        String.append(_:)(*(Swift::String *)&v14);
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_QWORD *)v19 = 0;
        *(_QWORD *)(v19 + 8) = 0xE000000000000000;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = 5;
        goto LABEL_31;
      }
      return (uint64_t *)v6;
    }
LABEL_9:
    v5 = 0;
    if ((_BYTE *)v2 == v3)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t *specialized static XMLPlistScanner.parseEntityReference(reader:string:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = (_BYTE *)result[3];
  v3 = result[4];
  v5 = v4 + 1;
  result[3] = (uint64_t)(v4 + 1);
  v6 = v3 - (_QWORD)(v4 + 1);
  if ((uint64_t)v6 < 1)
  {
LABEL_15:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_BYTE *)(v15 + 32) = 0;
    return (uint64_t *)swift_willThrow();
  }
  v8 = *result;
  v7 = result[1];
  v9 = v4 + 2;
  if (v3 < (unint64_t)(v4 + 2))
  {
LABEL_3:
    v10 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v11 = v10;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_BYTE *)(v11 + 32) = 4;
    return (uint64_t *)swift_willThrow();
  }
  if ((uint64_t)&v5[-v8] < 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  v12 = v8 + v7;
  if ((uint64_t)(v8 + v7 - v3) < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    JUMPOUT(0x181A50090);
  }
  switch(*v5)
  {
    case 'a':
      if (v6 < 4)
        goto LABEL_15;
      if (v12 < (unint64_t)v9)
        goto LABEL_44;
      if ((uint64_t)v9 - v8 < 0)
        goto LABEL_45;
      if ((uint64_t)(v12 - (_QWORD)v9) < 0)
        goto LABEL_46;
      if (*(_WORD *)v9 == 28781 && v4[4] == 59)
      {
        v14 = v4 + 5;
      }
      else
      {
        if (v6 < 5 || *v9 != 997420912)
          goto LABEL_3;
        v14 = v4 + 6;
      }
LABEL_37:
      result[3] = (uint64_t)v14;
LABEL_38:
      if (a2[1])
      {
        v17 = *a2;
        v18 = a2[1];
        result = (uint64_t *)String.UnicodeScalarView.append(_:)();
        *a2 = v17;
        a2[1] = v18;
      }
      break;
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
      goto LABEL_3;
    case 'g':
    case 'l':
      v14 = v4 + 4;
      if (v3 < (unint64_t)(v4 + 4) || v4[2] != 116 || v4[3] != 59)
        goto LABEL_3;
      goto LABEL_37;
    case 'q':
      if (v6 < 5)
        goto LABEL_3;
      if (v12 < (unint64_t)v9)
        goto LABEL_42;
      if ((uint64_t)v9 - v8 < 0)
        goto LABEL_43;
      if ((uint64_t)(v12 - (_QWORD)v9) < 0)
        goto LABEL_47;
      if (*v9 != 997486453)
        goto LABEL_3;
      v14 = v4 + 6;
      goto LABEL_37;
    default:
      if (*v5 != 35)
        goto LABEL_3;
      result[3] = (uint64_t)v9;
      result = specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)(result);
      if (!v2)
        goto LABEL_38;
      return result;
  }
  return result;
}

uint64_t *specialized static XMLPlistScanner.parseString(with:generate:)@<X0>(uint64_t *result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v5 = result;
  v8 = result[3];
  v7 = result[4];
  v9 = (unsigned __int8 *)(v8 + 5);
  v10 = *result;
  v11 = result[1];
  if (v7 < v8 + 5)
    goto LABEL_9;
  if (v10 + v11 < v8)
    goto LABEL_85;
  if ((uint64_t)(v8 - v10) < 0)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if ((uint64_t)(v10 + v11 - v8) < 0)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (*(_DWORD *)v8 == 1819635236 && *(_BYTE *)(v8 + 4) == 108)
  {
    v18 = 0;
    result[3] = (uint64_t)v9;
    v16 = 1;
    v13 = 0xE000000000000000;
LABEL_69:
    v17 = 1;
    goto LABEL_70;
  }
LABEL_9:
  v34 = 0;
  v35 = 0;
  if (v7 >= v8 + 1)
  {
    result = (uint64_t *)v8;
    v9 = (unsigned __int8 *)v8;
    while (1)
    {
      if (v7 < (unint64_t)v9)
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      if ((uint64_t)&v9[-v10] < 0)
        goto LABEL_74;
      if ((uint64_t)(v7 - (_QWORD)v9) < 0)
        goto LABEL_75;
      v19 = v10 + v11;
      if ((uint64_t)(v10 + v11 - v7) < 0)
        goto LABEL_76;
      v20 = *v9;
      if (v20 == 38)
        break;
      if (v20 == 60)
      {
        if (v7 < (unint64_t)(v9 + 2) || v9[1] != 33)
          goto LABEL_11;
        if (v35)
        {
          if (v9 < (unsigned __int8 *)result)
            goto LABEL_81;
          if ((uint64_t)result - v10 < 0)
            goto LABEL_82;
          if (v9 - (unsigned __int8 *)result < 0)
            goto LABEL_83;
          if (v19 - (uint64_t)v9 < 0)
            goto LABEL_84;
          v21 = static String._tryFromUTF8(_:)();
          if (!v22)
            goto LABEL_71;
          String.append(_:)(*(Swift::String *)&v21);
          swift_bridgeObjectRelease();
        }
        else if ((a2 & 1) != 0)
        {
          if (v9 < (unsigned __int8 *)result)
            goto LABEL_92;
          if ((uint64_t)result - v10 < 0)
            goto LABEL_93;
          if (v9 - (unsigned __int8 *)result < 0)
            goto LABEL_94;
          if (v19 - (uint64_t)v9 < 0)
            goto LABEL_95;
          v28 = static String._tryFromUTF8(_:)();
          v30 = v29;
          swift_bridgeObjectRelease();
          v34 = v28;
          v35 = v30;
          if (!v30)
            goto LABEL_71;
        }
        specialized static XMLPlistScanner.parseCDSect_pl(reader:string:)(v5, (uint64_t)&v34);
        if (v3)
          return (uint64_t *)swift_bridgeObjectRelease();
LABEL_60:
        result = (uint64_t *)v5[3];
        v9 = (unsigned __int8 *)result;
        goto LABEL_22;
      }
      v5[3] = (uint64_t)++v9;
LABEL_22:
      v10 = *v5;
      v11 = v5[1];
      v7 = v5[4];
      if (v7 < (unint64_t)(v9 + 1))
        goto LABEL_11;
    }
    if (v35)
    {
      if (v9 < (unsigned __int8 *)result)
        goto LABEL_77;
      if ((uint64_t)result - v10 < 0)
        goto LABEL_78;
      if (v9 - (unsigned __int8 *)result < 0)
        goto LABEL_79;
      if (v19 - (uint64_t)v9 < 0)
        goto LABEL_80;
      v23 = static String._tryFromUTF8(_:)();
      if (!v24)
        goto LABEL_71;
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
    }
    else if ((a2 & 1) != 0)
    {
      if (v9 < (unsigned __int8 *)result)
        goto LABEL_88;
      if ((uint64_t)result - v10 < 0)
        goto LABEL_89;
      if (v9 - (unsigned __int8 *)result < 0)
        goto LABEL_90;
      if (v19 - (uint64_t)v9 < 0)
        goto LABEL_91;
      v25 = static String._tryFromUTF8(_:)();
      v27 = v26;
      swift_bridgeObjectRelease();
      v34 = v25;
      v35 = v27;
      if (!v27)
        goto LABEL_71;
    }
    specialized static XMLPlistScanner.parseEntityReference(reader:string:)(v5, &v34);
    if (v3)
      return (uint64_t *)swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  v9 = (unsigned __int8 *)v8;
  result = (uint64_t *)v8;
LABEL_11:
  if ((a2 & 1) == 0)
  {
    v17 = v8 == (_QWORD)result;
    result = (uint64_t *)swift_bridgeObjectRelease();
    v18 = 0;
    v16 = 0;
    v13 = 0xE000000000000000;
    goto LABEL_70;
  }
  v13 = v35;
  if (v35)
  {
    if (result >= (uint64_t *)v9)
    {
LABEL_19:
      v16 = 0;
      v17 = 0;
      v18 = v34;
LABEL_70:
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v9;
      *(_QWORD *)(a3 + 16) = v18;
      *(_QWORD *)(a3 + 24) = v13;
      *(_BYTE *)(a3 + 32) = v16;
      *(_BYTE *)(a3 + 33) = v17;
      return result;
    }
    if ((uint64_t)result - v10 >= 0)
    {
      if (v9 - (unsigned __int8 *)result >= 0)
      {
        if (v10 + v11 - (uint64_t)v9 >= 0)
        {
          v14 = static String._tryFromUTF8(_:)();
          if (v15)
          {
            String.append(_:)(*(Swift::String *)&v14);
            result = (uint64_t *)swift_bridgeObjectRelease();
            v9 = (unsigned __int8 *)v5[3];
            v13 = v35;
            goto LABEL_19;
          }
          goto LABEL_71;
        }
LABEL_102:
        __break(1u);
        return result;
      }
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if ((unint64_t)v9 < v8)
    goto LABEL_96;
  if ((uint64_t)(v8 - v10) < 0)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  if ((uint64_t)&v9[-v8] < 0)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  if (v10 + v11 - (uint64_t)v9 < 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  v31 = static String._tryFromUTF8(_:)();
  if (v32)
  {
    v18 = v31;
    v13 = v32;
    v9 = (unsigned __int8 *)v5[3];
    result = (uint64_t *)swift_bridgeObjectRelease();
    v16 = 0;
    goto LABEL_69;
  }
LABEL_71:
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_BYTE *)(v33 + 32) = 6;
  swift_willThrow();
  return (uint64_t *)swift_bridgeObjectRelease();
}

uint64_t sub_181A50500()
{
  return swift_deallocObject();
}

uint64_t sub_181A50510()
{
  return swift_deallocObject();
}

uint64_t sub_181A50520()
{
  return swift_deallocObject();
}

uint64_t outlined copy of XMLPlistError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5 || a5 == 5 || a5 == 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for XMLPlistError(uint64_t a1)
{
  return outlined consume of XMLPlistError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of XMLPlistError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5 || a5 == 5 || a5 == 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for XMLPlistError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of XMLPlistError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for XMLPlistError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of XMLPlistError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of XMLPlistError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for XMLPlistError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of XMLPlistError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XMLPlistError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLPlistError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for XMLPlistError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 5u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t destructiveInjectEnumTag for XMLPlistError(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistError()
{
  return &type metadata for XMLPlistError;
}

ValueMetadata *type metadata accessor for XMLPlistMap.ArrayIterator()
{
  return &type metadata for XMLPlistMap.ArrayIterator;
}

ValueMetadata *type metadata accessor for XMLPlistMap.DictionaryIterator()
{
  return &type metadata for XMLPlistMap.DictionaryIterator;
}

unint64_t *initializeBufferWithCopyOfBuffer for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of XMLPlistMap.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for XMLPlistMap.Value(unint64_t *a1)
{
  return outlined consume of XMLPlistMap.Value(*a1);
}

unint64_t outlined consume of XMLPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t *assignWithCopy for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of XMLPlistMap.Value(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of XMLPlistMap.Value(v4);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for XMLPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of XMLPlistMap.Value(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for XMLPlistMap.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x78 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 120);
  v3 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x77)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for XMLPlistMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x77)
  {
    *(_QWORD *)result = a2 - 120;
    if (a3 >= 0x78)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x78)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for XMLPlistMap.Value(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 60;
  if (v1 <= 7)
    return v1;
  else
    return (*a1 >> 3) + 8;
}

_QWORD *destructiveProjectEnumData for XMLPlistMap.Value(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for XMLPlistMap.Value(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 8)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 60;
  }
  else
  {
    v2 = 8 * (a2 - 8);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistMap.Value()
{
  return &type metadata for XMLPlistMap.Value;
}

uint64_t partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:));
}

{
  return partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:));
}

uint64_t partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v5;

  return a5(a1, a2, a3, a4, v5[4], v5[5], v5[6], v5[2], v5[3]);
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE1C8], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE1D0], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDEA0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UInt8, MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDEB0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

uint64_t sub_181A50A80()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for XMLPlistMap.Region()
{
  return &type metadata for XMLPlistMap.Region;
}

uint64_t getEnumTagSinglePayload for XMLPlistTag(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLPlistTag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_181A50B7C + 4 * byte_1820652FC[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_181A50BB0 + 4 * byte_1820652F7[v4]))();
}

uint64_t sub_181A50BB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A50BB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A50BC0);
  return result;
}

uint64_t sub_181A50BCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A50BD4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_181A50BD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A50BE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XMLPlistTag()
{
  return &type metadata for XMLPlistTag;
}

unint64_t lazy protocol witness table accessor for type XMLPlistTag and conformance XMLPlistTag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag;
  if (!lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for XMLPlistTag, &type metadata for XMLPlistTag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLPlistTag and conformance XMLPlistTag);
  }
  return result;
}

NSValue __swiftcall _NSRange._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = v0;
  v4 = v1;
  type metadata accessor for _NSRange(0);
  return (NSValue)objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v3, "{_NSRange=QQ}");
}

id static _NSRange._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static _NSRange._forceBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for _NSRange, "{_NSRange=QQ}");
}

BOOL static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for _NSRange, "{_NSRange=QQ}");
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance _NSRange()
{
  __int128 *v0;
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = *v0;
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v2, "{_NSRange=QQ}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(a1, a2, a3, a4, "{_NSRange=QQ}");
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance _NSRange(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for _NSRange, "{_NSRange=QQ}");
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance _NSRange@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = specialized static _NSRange._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

NSValue __swiftcall CGRect._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = v0;
  v6 = v1;
  v7 = v2;
  v8 = v3;
  type metadata accessor for CGRect(0);
  return (NSValue)objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v5, "{CGRect={CGPoint=dd}{CGSize=dd}}");
}

id static CGRect._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  id result;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGRect(0);
  result = (id)strcmp(v4, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGRect()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v3, "{CGRect={CGPoint=dd}{CGSize=dd}}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGRect(void *a1, uint64_t a2)
{
  id v3;
  id result;

  v3 = objc_retainAutorelease(a1);
  result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGRect(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(double *)a2 = specialized static CGRect._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
}

NSValue __swiftcall CGPoint._bridgeToObjectiveC()()
{
  double v0;
  double v1;

  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGPoint, (uint64_t)"{CGPoint=dd}", v0, v1);
}

id static CGPoint._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  id result;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGPoint(0);
  result = (id)strcmp(v4, "{CGPoint=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(a1, a2, (uint64_t)"{CGPoint=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGPoint(void *a1, uint64_t a2)
{
  id v3;
  id result;

  v3 = objc_retainAutorelease(a1);
  result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGPoint=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGPoint(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(double *)a2 = specialized static CGPoint._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(_QWORD *)(a2 + 8) = v3;
}

NSValue __swiftcall CGVector._bridgeToObjectiveC()()
{
  double v0;
  double v1;

  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGVector, (uint64_t)"{CGVector=dd}", v0, v1);
}

id static CGVector._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static _NSRange._forceBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for CGVector, "{CGVector=dd}");
}

id static _NSRange._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, void (*a3)(_QWORD), const char *a4)
{
  id v7;
  const char *v8;
  id result;

  v7 = objc_retainAutorelease(a1);
  v8 = (const char *)objc_msgSend(v7, sel_objCType);
  a3(0);
  result = (id)strcmp(v8, a4);
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }
  return result;
}

BOOL static CGVector._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for CGVector, "{CGVector=dd}");
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGVector(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(a1, a2, (uint64_t)"{CGVector=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGVector(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(a1, a2, a3, a4, "{CGVector=dd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _NSRange(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  id v7;
  id result;

  v7 = objc_retainAutorelease(a1);
  result = (id)strcmp((const char *)objc_msgSend(v7, sel_objCType), a5);
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }
  return result;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CGVector(void *a1, uint64_t a2)
{
  return specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, type metadata accessor for CGVector, "{CGVector=dd}");
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGVector(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(double *)a2 = specialized static CGVector._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(_QWORD *)(a2 + 8) = v3;
}

NSValue __swiftcall CGSize._bridgeToObjectiveC()()
{
  double v0;
  double v1;

  return (NSValue)CGPoint._bridgeToObjectiveC()(type metadata accessor for CGSize, (uint64_t)"{CGSize=dd}", v0, v1);
}

id CGPoint._bridgeToObjectiveC()(void (*a1)(_QWORD), uint64_t a2, double a3, double a4)
{
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  *(double *)v6 = a3;
  *(double *)&v6[1] = a4;
  a1(0);
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v6, a2);
}

id static CGSize._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  id result;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGSize(0);
  result = (id)strcmp(v4, "{CGSize=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGSize(void *a1, uint64_t a2)
{
  id v3;
  id result;

  v3 = objc_retainAutorelease(a1);
  result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGSize=dd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGSize(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(double *)a2 = specialized static CGSize._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(_QWORD *)(a2 + 8) = v3;
}

NSValue __swiftcall CGAffineTransform._bridgeToObjectiveC()()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[3];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  type metadata accessor for CGAffineTransform(0);
  return (NSValue)objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v3, "{CGAffineTransform=dddddd}");
}

id static CGAffineTransform._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  id result;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0);
  result = (id)strcmp(v4, "{CGAffineTransform=dddddd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }
  return result;
}

double static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  specialized static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)(a1, v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGAffineTransform()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[3];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, v3, "{CGAffineTransform=dddddd}");
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CGAffineTransform(void *a1, uint64_t a2)
{
  id v3;
  id result;

  v3 = objc_retainAutorelease(a1);
  result = (id)strcmp((const char *)objc_msgSend(v3, sel_objCType), "{CGAffineTransform=dddddd}");
  if ((_DWORD)result)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }
  return result;
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGAffineTransform@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  specialized static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)(a1, v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

uint64_t NSValue.value<A>(of:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v19;
  char v20;
  _OWORD v21[2];
  NSUInteger sizep[2];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (swift_isClassType())
    v5 = a1;
  else
    v5 = 0;
  if (v5)
  {
    v6 = objc_retainAutorelease(v2);
    objc_msgSend(v6, sel_objCType);
    v7 = String.init(cString:)();
    v9 = v7 == 30302 && v8 == 0xE200000000000000;
    if (v9
      || (v10 = v7, v11 = v8, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      || (v10 == 64 ? (v19 = v11 == 0xE100000000000000) : (v19 = 0), v19))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
        v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
        return v18(a2, 1, 1, a1);
      }
    }
    if (objc_msgSend(v6, sel_nonretainedObjectValue))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(v21, sizep);
    }
    else
    {
      *(_OWORD *)sizep = 0u;
      v23 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    v17 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v17 ^ 1u, 1, a1);
  }
  else
  {
    v12 = *(_QWORD *)(a1 - 8);
    v13 = *(_DWORD *)(v12 + 80);
    if ((v13 & 0x10000) != 0)
    {
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      return v18(a2, 1, 1, a1);
    }
    sizep[0] = 0;
    *(_QWORD *)&v21[0] = 0;
    v14 = objc_retainAutorelease(v2);
    NSGetSizeAndAlignment((const char *)objc_msgSend(v14, sel_objCType), sizep, (NSUInteger *)v21);
    if (*(_QWORD *)(v12 + 64) == sizep[0] && *(_QWORD *)&v21[0] == v13 + 1)
    {
      v15 = swift_slowAlloc();
      objc_msgSend(v14, sel_getValue_size_, v15, sizep[0]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v15, a1);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, a1);
      return MEMORY[0x186DA9E78](v15, -1, -1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 1, a1);
    }
  }
}

uint64_t specialized static _NSRange._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  const char *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
LABEL_5:
    __break(1u);
  v1 = objc_retainAutorelease(a1);
  v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for _NSRange(0);
  if (strcmp(v2, "{_NSRange=QQ}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return v4[0];
}

double specialized static CGRect._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  const char *v2;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!a1)
LABEL_5:
    __break(1u);
  v1 = objc_retainAutorelease(a1);
  v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGRect(0);
  if (strcmp(v2, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  memset(v4, 0, sizeof(v4));
  objc_msgSend(v1, sel_getValue_size_, v4, 32);
  return *(double *)v4;
}

double specialized static CGPoint._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  const char *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
LABEL_5:
    __break(1u);
  v1 = objc_retainAutorelease(a1);
  v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGPoint(0);
  if (strcmp(v2, "{CGPoint=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

BOOL specialized static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, void (*a3)(_QWORD), const char *a4)
{
  id v7;
  const char *v8;
  int v9;

  v7 = objc_retainAutorelease(a1);
  v8 = (const char *)objc_msgSend(v7, sel_objCType);
  a3(0);
  v9 = strcmp(v8, a4);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v9)
  {
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 16) = 0;
    objc_msgSend(v7, sel_getValue_size_, a2, 16);
  }
  return v9 == 0;
}

double specialized static CGVector._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  const char *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
LABEL_5:
    __break(1u);
  v1 = objc_retainAutorelease(a1);
  v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGVector(0);
  if (strcmp(v2, "{CGVector=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

double specialized static CGSize._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  const char *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
LABEL_5:
    __break(1u);
  v1 = objc_retainAutorelease(a1);
  v2 = (const char *)objc_msgSend(v1, sel_objCType);
  type metadata accessor for CGSize(0);
  if (strcmp(v2, "{CGSize=dd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, sel_getValue_size_, v4, 16);
  return *(double *)v4;
}

BOOL specialized static CGAffineTransform._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  int v5;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0);
  v5 = strcmp(v4, "{CGAffineTransform=dddddd}");
  if (v5)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_BYTE *)(a2 + 48) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    objc_msgSend(v3, sel_getValue_size_, a2, 48);
  }
  return v5 == 0;
}

double specialized static CGAffineTransform._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3;
  const char *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
LABEL_5:
    __break(1u);
  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGAffineTransform(0);
  if (strcmp(v4, "{CGAffineTransform=dddddd}"))
  {
    __break(1u);
    goto LABEL_5;
  }
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  objc_msgSend(v3, sel_getValue_size_, &v8, 48);
  result = *(double *)&v8;
  v6 = v9;
  v7 = v10;
  *a2 = v8;
  a2[1] = v6;
  a2[2] = v7;
  return result;
}

void _MutableHandle.hash(into:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();

}

id static _MutableHandle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 16), sel_isEqual_, *(_QWORD *)(a2 + 16));
}

Swift::Int _MutableHandle.hashValue.getter()
{
  uint64_t v0;
  id v1;

  Hasher.init(_seed:)();
  v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _MutableHandle<A>()
{
  return _MutableHandle.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance _MutableHandle<A>()
{
  _MutableHandle.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _MutableHandle<A>()
{
  Hasher.init(_seed:)();
  _MutableHandle.hash(into:)();
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _MutableHandle<A>(uint64_t *a1, uint64_t *a2)
{
  return (unint64_t)static _MutableHandle.== infix(_:_:)(*a1, *a2) & 1;
}

void base witness table accessor for Equatable in _MutableHandle<A>()
{
  JUMPOUT(0x186DA9D64);
}

id Data.init(base64Encoded:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id v4;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBase64EncodedString_options_, String._bridgeToObjectiveCImpl()(), a3);
  swift_unknownObjectRelease();
  if (!v3)
    return 0;
  v4 = specialized Data.init(referencing:)(v3);

  return v4;
}

void Data.init(base64Encoded:options:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id sub_181A52264()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v1;
  v9 = v0;
  v10 = BYTE2(v0);
  v11 = BYTE3(v0);
  v12 = BYTE4(v0);
  v13 = BYTE5(v0);
  v4 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3408)), sel_initWithBytes_length_, &v8, BYTE6(v0));
  v5 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3408)), sel_initWithBase64EncodedData_options_, v4, v2);
  outlined consume of Data._Representation(v1, v0);

  if (!v5)
    return 0;
  v6 = specialized Data.init(referencing:)(v5);

  return v6;
}

void Data.base64EncodedData(options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

id sub_181A5247C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v0;
  v9 = v2;
  v10 = BYTE2(v2);
  v11 = BYTE3(v2);
  v12 = BYTE4(v2);
  v13 = BYTE5(v2);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v8, BYTE6(v2), 0);
  v4 = objc_msgSend(v3, sel_base64EncodedDataWithOptions_, v1);
  if (v4)
  {
    v5 = v4;
    v6 = specialized Data.init(referencing:)(v5);

  }
  else
  {

    return 0;
  }
  return v6;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyHashable>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Hashable & Sendable)?(v4, (uint64_t)&v16, &demangling cache variable for type metadata for (String, AnyHashable));
    v5 = v16;
    v6 = v17;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    v10 = v2[7] + 40 * result;
    v11 = v18;
    v12 = v19;
    *(_QWORD *)(v10 + 32) = v20;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Hashable & Sendable)?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _BridgedStoredNSError.init(_:userInfo:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v4 = objc_allocWithZone((Class)NSError);
  v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v5, a1, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v7 = objc_msgSend(v6, sel_domain);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v10 == v11)
    goto LABEL_7;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    result = swift_bridgeObjectRelease_n();
  }
  *a2 = v6;
  return result;
}

uint64_t FloatingPointParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t FloatingPointParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*FloatingPointParseStrategy.formatStyle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointParseStrategy.lenient.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t FloatingPointParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*FloatingPointParseStrategy.lenient.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void FloatingPointParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD v18[3];
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  MEMORY[0x1E0C80A78](v4);
  v21 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v6);
  v18[2] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v18[1] = (char *)v18 - v9;
  MEMORY[0x1E0C80A78](v10);
  v18[0] = (char *)v18 - v11;
  v19 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v19);
  v20 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v13);
  v14 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 44)));
  v25 = v2;
  v26 = a2;
  outlined init with copy of ICUNumberFormatter.Signature(v2 + *(int *)(a2 + 48), (uint64_t)v16, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  v17 = (char *)sub_181A52E9C + 4 * byte_182065790[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181A52E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  int *v8;
  int v9;
  Swift::UInt v10;
  int v11;
  unsigned int v12;
  int v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  Swift::UInt v20;
  Swift::UInt64 v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t (*v27)(uint64_t, uint64_t);
  Swift::UInt8 v28;
  void (*v29)(uint64_t, uint64_t);
  int v30;
  Swift::UInt8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  Swift::UInt v59;
  int v60;
  Swift::UInt v61;
  int v62;
  Swift::UInt8 v63;
  int v64;
  Swift::UInt8 v65;
  Swift::UInt8 v66;

  outlined init with take of ICUNumberFormatter.Signature(v3, v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v5;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
  }
  v8 = *(int **)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  outlined init with take of LocalePreferences?(v2 + 16, v4 - 152, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v9 = *(unsigned __int8 *)(v2 + 73);
  if (v9 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v10 = v9 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }
  v11 = *(unsigned __int16 *)(v2 + 74);
  v12 = v11 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12 & 1);
    Hasher._combine(_:)((v12 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v12) & 1);
  }
  v13 = *(unsigned __int8 *)(v2 + 77);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)v0;
  outlined init with copy of (Hashable & Sendable)?(v2 + v8[9], *(_QWORD *)v0, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v16, 1, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v17, v16, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v15);
  }
  v18 = v2 + v8[10];
  v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v20 = *(_QWORD *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v21 = v20;
      else
        v21 = 0;
      Hasher._combine(_:)(v21);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v20);
    }
  }
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(unsigned __int8 *)(v2 + v8[11]);
  if (v23 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
  }
  v24 = *(_QWORD *)(v0 + 72);
  outlined destroy of ICUNumberFormatter.Signature(v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v25 = *(_QWORD *)(v24 + *(int *)(v22 + 52) + 8);
  ObjectType = swift_getObjectType();
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 48);
  swift_unknownObjectRetain();
  if ((v27(ObjectType, v25) & 1) != 0)
  {
    v28 = 1;
LABEL_34:
    Hasher._combine(_:)(v28);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v25 + 64))(ObjectType, v25);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = *(void (**)(uint64_t, uint64_t))(v25 + 464);
  swift_unknownObjectRetain();
  v29(ObjectType, v25);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 376, v0 + 520, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?(v0 + 520, v0 + 664, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg(v0 + 664) == 1)
  {
    v28 = 0;
    goto LABEL_34;
  }
  outlined init with take of LocalePreferences?(v0 + 520, v0 + 232, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  v30 = *(unsigned __int8 *)(v0 + 232);
  if (v30 == 2)
  {
    v31 = 0;
  }
  else
  {
    v31 = v30 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  v32 = *(_QWORD *)(v0 + 240);
  if (!v32)
  {
    Hasher._combine(_:)(0);
    v37 = (_QWORD *)(v0 + 232);
    goto LABEL_49;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v32 + 16));
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
    outlined init with take of LocalePreferences?(v0 + 520, v0 + 88, &demangling cache variable for type metadata for LocalePreferences?);
    v37 = (_QWORD *)(v0 + 88);
LABEL_49:
    outlined retain of LocalePreferences(v37);
    if (!*(_QWORD *)(v0 + 256))
      goto LABEL_43;
    goto LABEL_50;
  }
  outlined retain of LocalePreferences?(v0 + 520, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v34 = v32 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v34 += 16;
    --v33;
  }
  while (v33);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 256))
  {
LABEL_43:
    Hasher._combine(_:)(0);
    if (!*(_QWORD *)(v0 + 272))
      goto LABEL_44;
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 272))
  {
LABEL_44:
    Hasher._combine(_:)(0);
    v35 = *(_QWORD *)(v0 + 280);
    if (!v35)
      goto LABEL_45;
LABEL_52:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v35);
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)(v0 + 288);
    if (!v36)
      goto LABEL_46;
    goto LABEL_53;
  }
LABEL_51:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v0 + 280);
  if (v35)
    goto LABEL_52;
LABEL_45:
  Hasher._combine(_:)(0);
  v36 = *(_QWORD *)(v0 + 288);
  if (!v36)
  {
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_54;
  }
LABEL_53:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v36);
  swift_bridgeObjectRelease();
LABEL_54:
  v38 = *(void **)(v0 + 296);
  v39 = *(void **)(v0 + 304);
  v41 = *(void **)(v0 + 312);
  v40 = *(void **)(v0 + 320);
  v42 = *(void **)(v0 + 328);
  if (v38)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v43 = v39;
    v44 = v41;
    v45 = v40;
    v46 = v42;
    v47 = v38;
    _CFObject.hash(into:)();
    *(_QWORD *)(v0 + 80) = v38;
    if (v39)
      goto LABEL_56;
  }
  else
  {
    Hasher._combine(_:)(0);
    v52 = v42;
    v53 = v39;
    v54 = v41;
    v55 = v40;
    *(_QWORD *)(v0 + 80) = 0;
    if (v39)
    {
LABEL_56:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v48 = v39;
      _CFObject.hash(into:)();

      if (v41)
        goto LABEL_57;
      goto LABEL_62;
    }
  }
  Hasher._combine(_:)(0);
  if (v41)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v49 = v41;
    _CFObject.hash(into:)();

    if (v40)
      goto LABEL_58;
LABEL_63:
    Hasher._combine(_:)(0);
    if (v42)
      goto LABEL_59;
    goto LABEL_64;
  }
LABEL_62:
  Hasher._combine(_:)(0);
  if (!v40)
    goto LABEL_63;
LABEL_58:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v50 = v40;
  _CFObject.hash(into:)();

  if (v42)
  {
LABEL_59:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v51 = v42;
    _CFObject.hash(into:)();

    goto LABEL_65;
  }
LABEL_64:
  Hasher._combine(_:)(0);
  v51 = 0;
LABEL_65:

  v56 = *(_QWORD *)(v0 + 336);
  if (v56)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v56);
    swift_bridgeObjectRelease();
    v57 = *(_QWORD *)(v0 + 344);
    if (v57)
      goto LABEL_67;
LABEL_70:
    Hasher._combine(_:)(0);
    if (*(_QWORD *)(v0 + 360))
      goto LABEL_68;
LABEL_71:
    Hasher._combine(_:)(0);
    goto LABEL_72;
  }
  Hasher._combine(_:)(0);
  v57 = *(_QWORD *)(v0 + 344);
  if (!v57)
    goto LABEL_70;
LABEL_67:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v57);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 360))
    goto LABEL_71;
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_72:
  v58 = *(unsigned __int8 *)(v0 + 368);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  v60 = *(unsigned __int8 *)(v0 + 369);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v61 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61);
  }
  v62 = *(unsigned __int8 *)(v0 + 370);
  if (v62 == 2)
  {
    v63 = 0;
  }
  else
  {
    v63 = v62 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v63);
  v64 = *(unsigned __int8 *)(v0 + 371);
  if (v64 == 2)
  {
    v65 = 0;
  }
  else
  {
    v66 = v64 & 1;
    Hasher._combine(_:)(1u);
    v65 = v66;
  }
  Hasher._combine(_:)(v65);
  outlined retain of LocalePreferences?(v0 + 520, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?(v0 + 520, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease();
}

uint64_t static FloatingPointParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  __int128 v16;
  __int128 v17;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (v10 = type metadata accessor for FloatingPointParseStrategy(0, a3, a4, a5),
        *(unsigned __int8 *)(a1 + *(int *)(v10 + 44)) == *(unsigned __int8 *)(a2 + *(int *)(v10 + 44)))
    && (v11 = v10,
        (static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48)) & 1) != 0))
  {
    v12 = *(int *)(v11 + 52);
    v13 = *(_OWORD *)(a1 + v12);
    v16 = *(_OWORD *)(a2 + v12);
    v17 = v13;
    v14 = specialized static Locale.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

BOOL static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FloatingPointParseStrategy.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t FloatingPointParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x745374616D726F66 && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65696E656CLL && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000182306080
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

Swift::Int FloatingPointParseStrategy.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t FloatingPointParseStrategy.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A540FC + 4 * byte_182065794[a1]))(0x745374616D726F66, 0xEB00000000656C79);
}

uint64_t sub_181A540FC()
{
  return 0x746E65696E656CLL;
}

unint64_t sub_181A54114()
{
  return 0xD000000000000010;
}

uint64_t sub_181A54130()
{
  return 0x656C61636F6CLL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointParseStrategy<A>.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  unsigned __int8 *v0;

  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FloatingPointParseStrategy<A>.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  FloatingPointParseStrategy.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FloatingPointParseStrategy<A>.CodingKeys()
{
  unsigned __int8 *v0;

  return FloatingPointParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FloatingPointParseStrategy<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = FloatingPointParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FloatingPointParseStrategy<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointParseStrategy<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointParseStrategy<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointParseStrategy.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int128 v16;
  char v17;

  v3 = a2[2];
  v4 = a2[3];
  v15[0] = a2;
  v15[1] = v3;
  v5 = type metadata accessor for FloatingPointParseStrategy.CodingKeys(255, v3, v4, a2[4]);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointParseStrategy<A>.CodingKeys, v5);
  v6 = type metadata accessor for KeyedEncodingContainer();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  v10 = v15[2];
  v11 = v15[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = v7;
  v14 = v15[0];
  LOBYTE(v16) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v16) = 2;
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType, (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = *(_OWORD *)(v10 + *(int *)(v14 + 52));
  v17 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v9, v6);
}

Swift::Int FloatingPointParseStrategy.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  FloatingPointParseStrategy.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t FloatingPointParseStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  char v43;

  v30 = a5;
  v31 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v10);
  v38 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FloatingPointParseStrategy.CodingKeys(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointParseStrategy<A>.CodingKeys, v12);
  v37 = type metadata accessor for KeyedDecodingContainer();
  v32 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v30 - v13;
  v35 = a3;
  v36 = a2;
  v15 = type metadata accessor for FloatingPointParseStrategy(0, a2, a3, a4);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v30 - v17;
  v19 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v39 = v14;
  v20 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  v41 = v16;
  v22 = v33;
  v21 = (uint64_t)v34;
  v23 = v32;
  LOBYTE(v42) = 0;
  v24 = v36;
  v25 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v38, v24);
  LOBYTE(v42) = 1;
  v26 = KeyedDecodingContainer.decode(_:forKey:)();
  v38 = (char *)v15;
  v18[*(int *)(v15 + 44)] = v26 & 1;
  LOBYTE(v42) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType, (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature(v21, (uint64_t)&v18[*((int *)v38 + 12)], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  v43 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v39, v25);
  v27 = v38;
  *(_OWORD *)&v18[*((int *)v38 + 13)] = v42;
  v28 = v41;
  (*(void (**)(uint64_t, char *, char *))(v41 + 16))(v30, v18, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return (*(uint64_t (**)(char *, char *))(v28 + 8))(v18, v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointParseStrategy<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointParseStrategy.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointParseStrategy<A>(_QWORD *a1, _QWORD *a2)
{
  return FloatingPointParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  FloatingPointParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointParseStrategy<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static FloatingPointParseStrategy.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t FloatingPointParseStrategy.parse(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t countAndFlagsBits;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *object;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t inited;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v93;
  int isUniquelyReferenced_nonNull_native;
  int v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  int64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  unint64_t v121;
  int64_t v122;
  int64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  int v128;
  int64_t v129;
  char *v130;
  os_unfair_lock_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  Swift::String v153;
  uint64_t v154;
  _QWORD v155[2];
  __int128 v156;
  uint64_t v157;

  v5 = v4;
  v6 = a3;
  v153._object = a2;
  v153._countAndFlagsBits = a1;
  v137 = a4;
  v157 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v143 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v142 = (char *)&v126 - v10;
  v136 = *(_QWORD *)(v6 + 32);
  v141 = *(_QWORD *)(v136 + 8);
  v147 = v11;
  v140 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v140);
  v139 = (char *)&v126 - v12;
  v145 = v7;
  v144 = v8;
  v149 = swift_getAssociatedTypeWitness();
  v138 = *(_QWORD *)(v149 - 8);
  MEMORY[0x1E0C80A78](v149);
  v148 = (char *)&v126 - v13;
  v14 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v126 - v19;
  v21 = *(int *)(v6 + 44);
  v22 = v4 + *(int *)(v6 + 48);
  v23 = (uint64_t *)(v4 + *(int *)(v6 + 52));
  v24 = *v23;
  v25 = v23[1];
  v146 = v5;
  LOBYTE(v6) = *(_BYTE *)(v5 + v21);
  outlined init with copy of ICUNumberFormatter.Signature(v22, (uint64_t)&v126 - v19, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  ObjectType = swift_getObjectType();
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 64);
  swift_unknownObjectRetain_n();
  v28 = v27(ObjectType, v25);
  v30 = v29;
  v151 = v24;
  swift_unknownObjectRelease();
  v31 = (uint64_t *)&v20[*(int *)(v14 + 20)];
  *v31 = v28;
  v31[1] = v30;
  v133 = (_QWORD *)v14;
  v20[*(int *)(v14 + 24)] = v6;
  if (one-time initialization token for cache != -1)
    swift_once();
  v32 = static ICULegacyNumberFormatter.cache;
  countAndFlagsBits = unk_1EDC3B320;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, (uint64_t)v17, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v134 = v15;
  v34 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v152 = swift_allocObject();
  v135 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v17, v152 + v34, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v35 = countAndFlagsBits + 16;
  v36 = countAndFlagsBits + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(countAndFlagsBits + 24));
  v37 = (void *)v154;
  v38 = specialized closure #1 in FormatterCache.formatter(for:creator:)(countAndFlagsBits + 16, (uint64_t)v20);
  v150 = v37;
  if (v37)
  {
LABEL_80:
    os_unfair_lock_unlock((os_unfair_lock_t)v36);
    __break(1u);
    goto LABEL_81;
  }
  v39 = v38;
  os_unfair_lock_unlock((os_unfair_lock_t)(countAndFlagsBits + 24));
  swift_release();
  if (!v39)
  {
    v72 = v150;
    implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    if (v72)
    {

      swift_release();
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 40) = v75;
      v155[0] = 0;
      v155[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      strcpy((char *)v155, "Cannot parse ");
      HIWORD(v155[1]) = -4864;
      String.append(_:)(v153);
      v76._object = (void *)0x8000000182306020;
      v76._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v76);
      v77 = v155[0];
      v78 = v155[1];
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = v77;
      *(_QWORD *)(inited + 56) = v78;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v43 = static _DictionaryStorage.allocate(capacity:)();
      v20 = (char *)v155;
      outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v155, &demangling cache variable for type metadata for (String, Any));
      v79 = v155[0];
      v35 = v155[1];
      swift_retain();
      v80 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v35);
      if ((v81 & 1) == 0)
      {
        *(_QWORD *)(v43 + 8 * (v80 >> 6) + 64) |= 1 << v80;
        v82 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v80);
        *v82 = v79;
        v82[1] = v35;
        outlined init with take of Any(&v156, (_OWORD *)(*(_QWORD *)(v43 + 56) + 32 * v80));
        v83 = *(_QWORD *)(v43 + 16);
        v64 = __OFADD__(v83, 1);
        v84 = v83 + 1;
        if (!v64)
        {
          *(_QWORD *)(v43 + 16) = v84;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v85 = objc_allocWithZone((Class)NSError);
          v86 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v87 = objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v86, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v20 = (char *)objc_msgSend(v87, sel_domain);
          v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v43 = v89;

          if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v43 == v90)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            LODWORD(v35) = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) == 0)
              goto LABEL_41;
          }
          return swift_willThrow();
        }
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    v92 = v73;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(countAndFlagsBits + 24));
    v93 = *(_QWORD *)(*(_QWORD *)(countAndFlagsBits + 16) + 16);
    v132 = *(_QWORD *)(countAndFlagsBits + 16);
    if (v32 < v93)
      *(_QWORD *)v35 = MEMORY[0x1E0DEE9E0];
    else
      swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v155[0] = *(_QWORD *)v35;
    v43 = v155[0];
    *(_QWORD *)v35 = 0x8000000000000000;
    v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
    v96 = *(_QWORD *)(v43 + 16);
    v97 = (v95 & 1) == 0;
    v98 = v96 + v97;
    if (__OFADD__(v96, v97))
      goto LABEL_40;
    LODWORD(v35) = v95;
    v99 = *(_QWORD *)(v43 + 24);
    v154 = v92;
    v150 = 0;
    v131 = (os_unfair_lock_t)(countAndFlagsBits + 24);
    if (v99 >= v98)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_42;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v98, isUniquelyReferenced_nonNull_native);
      v43 = v155[0];
      v100 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
      if ((v35 & 1) != (v101 & 1))
        goto LABEL_82;
      v49 = v100;
    }
    v36 = v149;
    v40 = v148;
    if ((v35 & 1) == 0)
      goto LABEL_77;
    goto LABEL_33;
  }
  v154 = v39;
  swift_release();
  v36 = v149;
  v40 = v148;
  while (1)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v20, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    object = v153._object;
    swift_bridgeObjectRetain();
    countAndFlagsBits = v153._countAndFlagsBits;
    specialized BidirectionalCollection._trimmingCharacters(while:)(v153._countAndFlagsBits, (unint64_t)object);
    v43 = v42;
    LODWORD(v35) = v44;
    v20 = v45;
    swift_bridgeObjectRelease();
    v46 = String.init(_:)();
    v48 = specialized _copyCollectionToContiguousArray<A>(_:)(v46, v47);
    LODWORD(v155[0]) = 0;
    if (v48[2] >> 31)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unum_parseDouble();
    swift_bridgeObjectRelease();
    swift_release();
    if (SLODWORD(v155[0]) <= 0)
    {
      dispatch thunk of BinaryFloatingPoint.init(_:)();
      return swift_release();
    }
    v50 = v147;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)();
    v51 = v142;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    (*(void (**)(char *, uint64_t))(v145 + 48))(v51, v144);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v51, v50);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v52 = swift_initStackObject();
    *(_OWORD *)(v52 + 16) = xmmword_18205C850;
    *(_QWORD *)(v52 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v52 + 40) = v53;
    v155[0] = 0;
    v155[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(73);
    v54._countAndFlagsBits = 0x7020746F6E6E6143;
    v54._object = (void *)0xED00002065737261;
    String.append(_:)(v54);
    v55._countAndFlagsBits = countAndFlagsBits;
    v55._object = object;
    String.append(_:)(v55);
    v56._countAndFlagsBits = 0xD000000000000038;
    v56._object = (void *)0x8000000182306040;
    String.append(_:)(v56);
    _print_unlocked<A, B>(_:_:)();
    v57 = v155[0];
    v58 = v155[1];
    *(_QWORD *)(v52 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v52 + 48) = v57;
    *(_QWORD *)(v52 + 56) = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v43 = static _DictionaryStorage.allocate(capacity:)();
    v20 = (char *)v155;
    outlined init with copy of (Hashable & Sendable)?(v52 + 32, (uint64_t)v155, &demangling cache variable for type metadata for (String, Any));
    v59 = v155[0];
    v35 = v155[1];
    swift_retain();
    v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v35);
    if ((v61 & 1) != 0)
      goto LABEL_35;
    *(_QWORD *)(v43 + 8 * (v60 >> 6) + 64) |= 1 << v60;
    v62 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v60);
    *v62 = v59;
    v62[1] = v35;
    outlined init with take of Any(&v156, (_OWORD *)(*(_QWORD *)(v43 + 56) + 32 * v60));
    v63 = *(_QWORD *)(v43 + 16);
    v64 = __OFADD__(v63, 1);
    v65 = v63 + 1;
    if (v64)
      goto LABEL_36;
    *(_QWORD *)(v43 + 16) = v65;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v66 = objc_allocWithZone((Class)NSError);
    v67 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v20 = (char *)objc_msgSend(v68, sel_domain);
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v43 = v70;

    if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v43 == v71)
    {
      swift_bridgeObjectRelease_n();
LABEL_21:
      swift_willThrow();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v40, v36);
    }
    LODWORD(v35) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_21;
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    v127 = v49;
    v128 = v35;
    v126 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    v104 = (_QWORD *)v43;
    v105 = static _DictionaryStorage.copy(original:)();
    v43 = v105;
    v133 = v104;
    if (v104[2])
      break;
LABEL_76:
    swift_bridgeObjectRelease();
    v36 = v149;
    v40 = v148;
    v92 = v154;
    v20 = v126;
    v49 = v127;
    if ((v128 & 1) != 0)
    {
LABEL_33:
      v102 = *(_QWORD *)(v43 + 56);
      v103 = 8 * v49;
      swift_release();
      *(_QWORD *)(v102 + v103) = v154;
    }
    else
    {
LABEL_77:
      v124 = v135;
      v125 = v49;
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v20, v135, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v125, v124, v92, (_QWORD *)v43);
    }
    *(_QWORD *)(countAndFlagsBits + 16) = v43;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v131);
    swift_release_n();
    swift_bridgeObjectRelease();
  }
  v106 = (char *)(v105 + 64);
  v107 = 1 << *(_BYTE *)(v43 + 32);
  v130 = (char *)(v133 + 8);
  v108 = (unint64_t)(v107 + 63) >> 6;
  if ((_QWORD *)v43 != v133 || v106 >= &v130[8 * v108])
    memmove(v106, v130, 8 * v108);
  v109 = 0;
  v110 = v133;
  *(_QWORD *)(v43 + 16) = v133[2];
  v111 = 1 << *((_BYTE *)v110 + 32);
  v112 = -1;
  if (v111 < 64)
    v112 = ~(-1 << v111);
  v113 = v112 & v110[8];
  v129 = (unint64_t)(v111 + 63) >> 6;
  v114 = v135;
  while (2)
  {
    if (v113)
    {
      v115 = __clz(__rbit64(v113));
      v113 &= v113 - 1;
      v116 = v115 | (v109 << 6);
LABEL_50:
      v117 = v133;
      v36 = *(_QWORD *)(v134 + 72) * v116;
      outlined init with copy of ICUNumberFormatter.Signature(v133[6] + v36, v114, type metadata accessor for ICULegacyNumberFormatter.Signature);
      v118 = 8 * v116;
      v119 = *(_QWORD *)(v117[7] + v118);
      outlined init with take of ICUNumberFormatter.Signature(v114, *(_QWORD *)(v43 + 48) + v36, type metadata accessor for ICULegacyNumberFormatter.Signature);
      *(_QWORD *)(*(_QWORD *)(v43 + 56) + v118) = v119;
      swift_retain();
      continue;
    }
    break;
  }
  v120 = v109 + 1;
  if (__OFADD__(v109, 1))
  {
    __break(1u);
    goto LABEL_80;
  }
  if (v120 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v120];
  v122 = v109 + 1;
  if (v121)
    goto LABEL_75;
  v122 = v109 + 2;
  if (v109 + 2 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v122];
  if (v121)
    goto LABEL_75;
  v122 = v109 + 3;
  if (v109 + 3 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v122];
  if (v121)
    goto LABEL_75;
  v122 = v109 + 4;
  if (v109 + 4 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v122];
  if (v121)
    goto LABEL_75;
  v122 = v109 + 5;
  if (v109 + 5 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v122];
  if (v121)
    goto LABEL_75;
  v122 = v109 + 6;
  if (v109 + 6 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v122];
  if (v121)
    goto LABEL_75;
  v122 = v109 + 7;
  if (v109 + 7 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v122];
  if (v121)
    goto LABEL_75;
  v122 = v109 + 8;
  if (v109 + 8 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v122];
  if (v121)
  {
LABEL_75:
    v113 = (v121 - 1) & v121;
    v109 = v122;
    v116 = __clz(__rbit64(v121)) + (v122 << 6);
    goto LABEL_50;
  }
  v123 = v109 + 9;
  if (v109 + 9 >= v129)
    goto LABEL_76;
  v121 = *(_QWORD *)&v130[8 * v123];
  if (v121)
  {
    v122 = v109 + 9;
    goto LABEL_75;
  }
  while (1)
  {
    v122 = v123 + 1;
    if (__OFADD__(v123, 1))
      break;
    if (v122 >= v129)
      goto LABEL_76;
    v121 = *(_QWORD *)&v130[8 * v122];
    ++v123;
    if (v121)
      goto LABEL_75;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t FloatingPointParseStrategy.parse(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, int *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t ObjectType;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t result;
  uint64_t TupleTypeMetadata2;
  uint64_t v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  uint64_t v51;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  int64_t v88;
  char *v89;
  int64_t v90;
  uint64_t v91;
  os_unfair_lock_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108[3];

  v13 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v85 - v15;
  v103 = a3;
  if (a3 >> 14 >= a4 >> 14)
  {
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a6, 1, 1, TupleTypeMetadata2);
  }
  v100 = v17;
  v101 = v16;
  v98 = a5;
  v99 = a1;
  v93 = a2;
  v94 = a4;
  v96 = a6;
  v19 = (uint64_t *)(v6 + a5[13]);
  v21 = *v19;
  v20 = v19[1];
  v22 = *(_BYTE *)(v6 + a5[11]);
  outlined init with copy of ICUNumberFormatter.Signature(v6 + a5[12], (uint64_t)&v85 - v15, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  ObjectType = swift_getObjectType();
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 64);
  swift_unknownObjectRetain_n();
  v25 = v24(ObjectType, v20);
  v27 = v26;
  v95 = v21;
  swift_unknownObjectRelease();
  v28 = (uint64_t *)&v18[*(int *)(v13 + 20)];
  *v28 = v25;
  v28[1] = v27;
  v18[*(int *)(v13 + 24)] = v22;
  if (one-time initialization token for cache != -1)
    swift_once();
  v30 = static ICULegacyNumberFormatter.cache;
  v29 = unk_1EDC3B320;
  v31 = v101;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v18, v101, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v32 = (*(unsigned __int8 *)(v100 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  v97 = swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature(v31, v97 + v32, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v33 = (unint64_t *)(v29 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  v34 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v29 + 16, (uint64_t)v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
  swift_release();
  v102 = v34;
  if (v34)
  {
    swift_release();
    goto LABEL_6;
  }
  v92 = (os_unfair_lock_t)(v29 + 24);
  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  v102 = v49;
  swift_retain();
  v50 = v92;
  os_unfair_lock_lock(v92);
  v51 = *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16);
  v91 = *(_QWORD *)(v29 + 16);
  if (v30 >= v51)
    swift_bridgeObjectRetain();
  else
    *v33 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v104 = *v33;
  v53 = v104;
  *v33 = 0x8000000000000000;
  v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
  v56 = *(_QWORD *)(v53 + 16);
  v57 = (v54 & 1) == 0;
  v58 = v56 + v57;
  if (__OFADD__(v56, v57))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v53 + 24) < v58)
    {
      v59 = v54;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, isUniquelyReferenced_nonNull_native);
      v60 = v104;
      v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
      if ((v59 & 1) != (v62 & 1))
        goto LABEL_61;
      v55 = v61;
      if ((v59 & 1) == 0)
        goto LABEL_57;
LABEL_20:
      v63 = *(_QWORD *)(v60 + 56);
      v64 = 8 * v55;
      swift_release();
      *(_QWORD *)(v63 + v64) = v102;
LABEL_58:
      *(_QWORD *)(v29 + 16) = v60;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v50);
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_6:
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v18, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      v35 = String.subscript.getter();
      v37 = v36;
      v39 = v38;
      v41 = v40;
      v108[0] = 0;
      specialized ICULegacyNumberFormatter.parseAsDouble<A>(_:upperBound:)(v35, v36, v38, v40, v108);
      if ((v42 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_getAssociatedTypeWitness();
        v48 = swift_getTupleTypeMetadata2();
        return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v96, 1, 1, v48);
      }
      else
      {
        v104 = v35;
        v105 = v37;
        v106 = v39;
        v107 = v41;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        v43 = String.Index.init<A>(utf16Offset:in:)();
        swift_getAssociatedTypeWitness();
        v44 = swift_getTupleTypeMetadata2();
        v45 = v96;
        *v96 = v43;
        dispatch thunk of BinaryFloatingPoint.init(_:)();
        swift_release();
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v45, 0, 1, v44);
      }
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v60 = v53;
      if ((v54 & 1) != 0)
        goto LABEL_20;
LABEL_57:
      v83 = v101;
      v84 = v55;
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v18, v101, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v84, v83, v102, (_QWORD *)v60);
      goto LABEL_58;
    }
  }
  v86 = v55;
  v87 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  v65 = static _DictionaryStorage.copy(original:)();
  v60 = v65;
  if (!*(_QWORD *)(v53 + 16))
  {
LABEL_56:
    swift_bridgeObjectRelease();
    v50 = v92;
    v55 = v86;
    if ((v87 & 1) != 0)
      goto LABEL_20;
    goto LABEL_57;
  }
  v66 = (char *)(v65 + 64);
  v67 = 1 << *(_BYTE *)(v60 + 32);
  v89 = (char *)(v53 + 64);
  v68 = (unint64_t)(v67 + 63) >> 6;
  if (v60 != v53 || v66 >= &v89[8 * v68])
    memmove(v66, v89, 8 * v68);
  v90 = 0;
  *(_QWORD *)(v60 + 16) = *(_QWORD *)(v53 + 16);
  v69 = 1 << *(_BYTE *)(v53 + 32);
  v70 = -1;
  if (v69 < 64)
    v70 = ~(-1 << v69);
  v71 = v70 & *(_QWORD *)(v53 + 64);
  v88 = (unint64_t)(v69 + 63) >> 6;
  v72 = v101;
  while (1)
  {
    if (v71)
    {
      v73 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      v74 = v73 | (v90 << 6);
      v75 = v100;
      goto LABEL_30;
    }
    v79 = v90 + 1;
    v75 = v100;
    if (__OFADD__(v90, 1))
    {
      __break(1u);
      goto LABEL_60;
    }
    if (v79 >= v88)
      goto LABEL_56;
    v80 = *(_QWORD *)&v89[8 * v79];
    v81 = v90 + 1;
    if (!v80)
    {
      v81 = v90 + 2;
      if (v90 + 2 >= v88)
        goto LABEL_56;
      v80 = *(_QWORD *)&v89[8 * v81];
      if (!v80)
      {
        v81 = v90 + 3;
        if (v90 + 3 >= v88)
          goto LABEL_56;
        v80 = *(_QWORD *)&v89[8 * v81];
        if (!v80)
        {
          v81 = v90 + 4;
          if (v90 + 4 >= v88)
            goto LABEL_56;
          v80 = *(_QWORD *)&v89[8 * v81];
          if (!v80)
          {
            v81 = v90 + 5;
            if (v90 + 5 >= v88)
              goto LABEL_56;
            v80 = *(_QWORD *)&v89[8 * v81];
            if (!v80)
            {
              v81 = v90 + 6;
              if (v90 + 6 >= v88)
                goto LABEL_56;
              v80 = *(_QWORD *)&v89[8 * v81];
              if (!v80)
              {
                v81 = v90 + 7;
                if (v90 + 7 >= v88)
                  goto LABEL_56;
                v80 = *(_QWORD *)&v89[8 * v81];
                if (!v80)
                {
                  v81 = v90 + 8;
                  if (v90 + 8 >= v88)
                    goto LABEL_56;
                  v80 = *(_QWORD *)&v89[8 * v81];
                  if (!v80)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_55:
    v71 = (v80 - 1) & v80;
    v90 = v81;
    v74 = __clz(__rbit64(v80)) + (v81 << 6);
LABEL_30:
    v76 = *(_QWORD *)(v75 + 72) * v74;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v53 + 48) + v76, v72, type metadata accessor for ICULegacyNumberFormatter.Signature);
    v77 = 8 * v74;
    v78 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v74);
    outlined init with take of ICUNumberFormatter.Signature(v72, *(_QWORD *)(v60 + 48) + v76, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v60 + 56) + v77) = v78;
    swift_retain();
  }
  v82 = v90 + 9;
  if (v90 + 9 >= v88)
    goto LABEL_56;
  v80 = *(_QWORD *)&v89[8 * v82];
  if (v80)
  {
    v81 = v90 + 9;
    v75 = v100;
    goto LABEL_55;
  }
  while (1)
  {
    v81 = v82 + 1;
    if (__OFADD__(v82, 1))
      break;
    v75 = v100;
    if (v81 >= v88)
      goto LABEL_56;
    v80 = *(_QWORD *)&v89[8 * v81];
    ++v82;
    if (v80)
      goto LABEL_55;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized ICULegacyNumberFormatter.parseAsDouble<A>(_:upperBound:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17[6];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    v11 = v10;
    v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0);
    v13 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v17, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11)
      goto LABEL_10;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v17[0] = 0;
  if (v12[2] >> 31)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
  unum_parseDouble();
  v15 = v14;
  swift_release();
  if (v17[0] > 0)
    return 0;
  *a5 = 0;
  return v15;
}

uint64_t protocol witness for ParseStrategy.parse(_:) in conformance FloatingPointParseStrategy<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointParseStrategy.parse(_:)(*(_QWORD *)a1, *(void **)(a1 + 8), a2, a3);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return FloatingPointParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>, a5);
}

{
  return FloatingPointParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, a5);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  void (*v19)(__int128 *, uint64_t);
  __int128 v21;

  v10 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FloatingPointFormatStyle.Currency(0, a3, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v15 + 16))(a5, a1, v14);
  v16 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v14);
  v17 = (int *)type metadata accessor for FloatingPointParseStrategy(0, v14, v16, a4);
  *(_BYTE *)(a5 + v17[11]) = a2;
  v18 = v17[13];
  v21 = *a1;
  *(_OWORD *)(a5 + v18) = v21;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)a1 + *(int *)(v14 + 40), (uint64_t)v12, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v19 = *(void (**)(__int128 *, uint64_t))(v15 + 8);
  swift_unknownObjectRetain();
  v19(a1, v14);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v12, a5 + v17[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t FloatingPointParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;

  v12 = a5(0, a3, a4);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a7, a1, v12);
  v13 = MEMORY[0x186DA9D64](a6, v12);
  v14 = (int *)type metadata accessor for FloatingPointParseStrategy(0, v12, v13, a4);
  *(_BYTE *)(a7 + v14[11]) = a2;
  *(_OWORD *)(a7 + v14[13]) = *a1;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)a1 + *(int *)(v12 + 36), a7 + v14[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

void specialized Optional<A>.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  _BYTE v19[56];

  v2 = v1;
  outlined init with take of LocalePreferences?(v2, (uint64_t)v13, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  v5 = v13[0];
  v4 = v13[1];
  v6 = v14;
  v7 = v15;
  v9 = v16;
  v8 = v17;
  v10 = v18;
  outlined init with take of LocalePreferences?(v2, (uint64_t)v19, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  if ((unint64_t)v19[38] << 48 == 0x3000000000000)
  {
LABEL_45:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  if (v5 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if ((_BYTE)v6 == 0xFF)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v4, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (BYTE1(v6) != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  if (BYTE2(v6) != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  if (HIBYTE(v6) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if ((v9 & 0x100) != 0)
  {
    Hasher._combine(_:)(0);
    if (BYTE2(v9) == 3)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v9 & 1) == 0)
    {
      v11 = 10;
      if (v7 < 10)
        v11 = v7;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      MEMORY[0x186DA4928](103, 0xE100000000000000, v12);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (BYTE2(v9) == 3)
    {
LABEL_26:
      Hasher._combine(_:)(0);
      if (BYTE3(v9) != 6)
        goto LABEL_27;
      goto LABEL_29;
    }
  }
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (BYTE3(v9) != 6)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    __asm { BR              X10 }
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (BYTE4(v9) == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, SBYTE4(v9));
  }
  if (BYTE5(v9) == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(BYTE5(v9));
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if ((v9 & 0xFF000000000000) == 0x2000000000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (HIBYTE(v9) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if ((_BYTE)v10 == 0xFF)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v8, v10 & 1);
  }
  if (v10 >> 8 == 12)
    goto LABEL_45;
  Hasher._combine(_:)(1u);
  Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(BYTE1(v10));
  String.hash(into:)();
  swift_bridgeObjectRelease();
}

void specialized Optional<A>.hash(into:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  if (a3)
  {
    Hasher._combine(_:)(1u);
    if (a2 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(a2 + 1);
    }
    if ((a2 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(a2) + 1);
    }
    if ((*(_QWORD *)&a2 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(a2) + 1);
    }
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, a3);
    if (a4 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(a4 + 1);
    }
    if ((a4 & 0xFF00) == 0x300)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(a4) + 1);
    }
    if ((a4 & 0xFF0000) == 0x30000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(a4) + 1);
    }
    if ((a4 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((a4 >> 24) & 1) + 1);
    }
    if ((a4 & 0xFF00000000) == 0x200000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)((HIDWORD(a4) & 1) + 1);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7)
      goto LABEL_19;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_19;
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
        break;
    }
LABEL_18:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }
  v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_19;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7)
      goto LABEL_19;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_19;
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
        break;
    }
LABEL_18:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }
  v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_19;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

{
  Swift::UInt v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v3 = 0;
  v4 = 0;
  v5 = a2 + 64;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v9)
      goto LABEL_19;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_19;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
        break;
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v11);
    Hasher._combine(_:)(*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v11));
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }
  v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_19:
    Hasher._combine(_:)(v3);
    return;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      goto LABEL_19;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v17 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v18 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  if (!v5)
    goto LABEL_6;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v7 << 6);
LABEL_5:
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v9);
  v12 = *v10;
  v11 = v10[1];
  outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a2 + 56) + 72 * v9, (uint64_t)&v20);
  *(_QWORD *)&v19 = v12;
  *((_QWORD *)&v19 + 1) = v11;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of LocalePreferences?((uint64_t)&v19, (uint64_t)v25, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
    if (!v25[1])
    {
      swift_release();
      Hasher._combine(_:)(v6);
      return;
    }
    v21 = v28;
    v22 = v29;
    *(_QWORD *)&v23 = v30;
    v19 = v26;
    v20 = v27;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v19);
    v6 ^= Hasher._finalize()();
    if (v5)
      goto LABEL_4;
LABEL_6:
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 < v18)
    {
      v14 = *(_QWORD *)(v17 + 8 * v13);
      if (v14)
        goto LABEL_9;
      v15 = v7 + 2;
      ++v7;
      if (v13 + 1 < v18)
      {
        v14 = *(_QWORD *)(v17 + 8 * v15);
        if (v14)
        {
          ++v13;
LABEL_9:
          v5 = (v14 - 1) & v14;
          v9 = __clz(__rbit64(v14)) + (v13 << 6);
          v7 = v13;
          goto LABEL_5;
        }
        v16 = v13 + 2;
        v7 = v13 + 1;
        if (v13 + 2 < v18)
          break;
      }
    }
LABEL_21:
    v5 = 0;
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
  }
  v14 = *(_QWORD *)(v17 + 8 * v16);
  if (v14)
  {
    v13 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v18)
    {
      v7 = v18 - 1;
      goto LABEL_21;
    }
    v14 = *(_QWORD *)(v17 + 8 * v13);
    ++v16;
    if (v14)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v22;

  v20 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v19 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v22 = (v4 - 1) & v4;
      v7 = v6;
      v8 = __clz(__rbit64(v4)) | (v6 << 6);
      goto LABEL_20;
    }
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v9 >= v19)
      goto LABEL_32;
    v10 = *(_QWORD *)(v20 + 8 * v9);
    v11 = v6 + 1;
    if (!v10)
    {
      v11 = v6 + 2;
      if (v6 + 2 >= v19)
        goto LABEL_32;
      v10 = *(_QWORD *)(v20 + 8 * v11);
      if (!v10)
        break;
    }
LABEL_19:
    v22 = (v10 - 1) & v10;
    v7 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
    v13 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 80 * v8);
    v14 = v13[1];
    v15 = v13[3];
    v16 = v13[5];
    v17 = v13[7];
    v18 = v13[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v14)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v6 = v7;
    if (v15)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v16)
        goto LABEL_25;
    }
    else
    {
      Hasher._combine(_:)(0);
      if (v16)
      {
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v17)
          goto LABEL_26;
        goto LABEL_30;
      }
    }
    Hasher._combine(_:)(0);
    if (v17)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v18)
        goto LABEL_4;
      goto LABEL_31;
    }
LABEL_30:
    Hasher._combine(_:)(0);
    if (v18)
    {
LABEL_4:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_5;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v4 = v22;
    v5 ^= Hasher._finalize()();
  }
  v12 = v6 + 3;
  if (v6 + 3 >= v19)
  {
LABEL_32:
    swift_release();
    Hasher._combine(_:)(v5);
    return;
  }
  v10 = *(_QWORD *)(v20 + 8 * v12);
  if (v10)
  {
    v11 = v6 + 3;
    goto LABEL_19;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v19)
      goto LABEL_32;
    v10 = *(_QWORD *)(v20 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_19;
  }
LABEL_34:
  __break(1u);
}

{
  Swift::UInt v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v3 = 0;
  v4 = 0;
  v5 = a2 + 64;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v9)
      goto LABEL_19;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_19;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
        break;
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v11);
    Hasher._combine(_:)(*(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v11));
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }
  v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_19:
    Hasher._combine(_:)(v3);
    return;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      goto LABEL_19;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;

  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_20;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v12 >= v7)
      goto LABEL_22;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_22;
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
        break;
    }
LABEL_19:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_20:
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v11 + 8);
    Hasher._combine(_:)(*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v11));
    if (v15)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v8 ^= Hasher._finalize()();
  }
  v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_22:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_22;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_24:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7)
      goto LABEL_19;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_19;
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
        break;
    }
LABEL_18:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }
  v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_19;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  Swift::UInt v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_20;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v11 >= v6)
      goto LABEL_22;
    v12 = *(_QWORD *)(v15 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_22;
      v12 = *(_QWORD *)(v15 + 8 * v8);
      if (!v12)
        break;
    }
LABEL_19:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_20:
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v10 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v14)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v7 ^= Hasher._finalize()();
  }
  v13 = v11 + 2;
  if (v13 >= v6)
  {
LABEL_22:
    swift_release();
    Hasher._combine(_:)(v7);
    return;
  }
  v12 = *(_QWORD *)(v15 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_22;
    v12 = *(_QWORD *)(v15 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_24:
  __break(1u);
}

uint64_t type metadata accessor for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointParseStrategy);
}

uint64_t type metadata accessor for FloatingPointParseStrategy.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointParseStrategy.CodingKeys);
}

void base witness table accessor for Equatable in FloatingPointParseStrategy<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for FloatingPointParseStrategy<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointParseStrategy<A>);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointParseStrategy<A>, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointParseStrategy<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t type metadata completion function for FloatingPointParseStrategy()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FloatingPointParseStrategy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  const void *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *result;
  uint64_t v52;
  size_t __n;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 | 7;
  if (*(_DWORD *)(v9 + 84))
    v12 = *(_QWORD *)(v9 + 64);
  else
    v12 = *(_QWORD *)(v9 + 64) + 1;
  if (((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    v13 = ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v13 = ((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v14 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v13 + (((v10 | 7) + v7 + 1) & ~(v10 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = (_QWORD *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
    swift_retain();
  }
  else
  {
    v52 = v10 + 79;
    __n = v12;
    v54 = v10 + 78;
    v55 = v8;
    v56 = v12 + 7;
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
    *((_BYTE *)a1 + v7) = *((_BYTE *)a2 + v7);
    v19 = ((unint64_t)a1 + v7 + v11 + 1) & ~v11;
    v20 = ((unint64_t)a2 + v7 + v11 + 1) & ~v11;
    v22 = ~v10;
    v18 = a1;
    switch(*(_BYTE *)(v20 + v13))
    {
      case 0:
        v23 = *(_QWORD *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v19 = v23;
        v24 = *(_OWORD *)(v20 + 16);
        v25 = *(_OWORD *)(v20 + 32);
        v26 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v25;
        *(_OWORD *)(v19 + 48) = v26;
        *(_OWORD *)(v19 + 16) = v24;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v23) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v23;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        v27 = (void *)((v54 + v19) & v22);
        v28 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v28, 1, v55))
        {
          memcpy(v27, v28, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v27, v28, v55);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v27, 0, 1, v55);
        }
        v41 = 0;
        v42 = ((unint64_t)v27 + v56) & 0xFFFFFFFFFFFFFFF8;
        v43 = ((unint64_t)v28 + v56) & 0xFFFFFFFFFFFFFFF8;
        v44 = *(_QWORD *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_QWORD *)v42 = v44;
        *(_BYTE *)(v42 + 9) = *(_BYTE *)(v43 + 9);
        break;
      case 1:
        v29 = *(_QWORD *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v19 = v29;
        v30 = *(_OWORD *)(v20 + 16);
        v31 = *(_OWORD *)(v20 + 32);
        v32 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v31;
        *(_OWORD *)(v19 + 48) = v32;
        *(_OWORD *)(v19 + 16) = v30;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v29) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v29;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        v33 = (void *)((v54 + v19) & v22);
        v34 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v34, 1, v55))
        {
          memcpy(v33, v34, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v33, v34, v55);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v33, 0, 1, v55);
        }
        v45 = ((unint64_t)v33 + v56) & 0xFFFFFFFFFFFFFFF8;
        v46 = ((unint64_t)v34 + v56) & 0xFFFFFFFFFFFFFFF8;
        v47 = *(_QWORD *)v46;
        *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
        *(_QWORD *)v45 = v47;
        *(_BYTE *)(v45 + 9) = *(_BYTE *)(v46 + 9);
        v41 = 1;
        break;
      case 2:
        v35 = *(_QWORD *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v19 = v35;
        v36 = *(_OWORD *)(v20 + 16);
        v37 = *(_OWORD *)(v20 + 32);
        v38 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v37;
        *(_OWORD *)(v19 + 48) = v38;
        *(_OWORD *)(v19 + 16) = v36;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        *(_DWORD *)(v19 + 74) = *(_DWORD *)(v20 + 74);
        *(_BYTE *)(v19 + 78) = *(_BYTE *)(v20 + 78);
        v39 = (void *)((v52 + v19) & v22);
        v40 = (const void *)((v52 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v40, 1, v55))
        {
          memcpy(v39, v40, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v39, v40, v55);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v39, 0, 1, v55);
        }
        v48 = ((unint64_t)v39 + v56) & 0xFFFFFFFFFFFFFFF8;
        v49 = ((unint64_t)v40 + v56) & 0xFFFFFFFFFFFFFFF8;
        v50 = *(_QWORD *)v49;
        *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
        *(_QWORD *)v48 = v50;
        *(_BYTE *)(v48 + 9) = *(_BYTE *)(v49 + 9);
        *(_BYTE *)(v48 + 10) = *(_BYTE *)(v49 + 10);
        v41 = 2;
        break;
      case 3:
        *(_WORD *)v19 = *(_WORD *)v20;
        v41 = 3;
        break;
      default:
        if (v13 <= 3)
          v21 = v13;
        else
          v21 = 4;
        __asm { BR              X11 }
        return result;
    }
    *(_BYTE *)(v19 + v13) = v41;
    *(_OWORD *)(((v19 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v20 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v18;
}

uint64_t destroy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (a1 + (v7 | 7) + v4 + 1) & ~(v7 | 7);
  v9 = (v7 + 78) & ~v7;
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  if (((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11 <= v12)
    v13 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v13 = ((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v14 = *(unsigned __int8 *)(v8 + v13);
  v16 = ~v7;
  switch(v14)
  {
    case 0:
    case 1:
      v17 = v7 + 78 + v8;
      goto LABEL_15;
    case 2:
      v17 = v8 + v7 + 79;
LABEL_15:
      v18 = v17 & v16;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v17 & v16, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
      break;
    case 3:
      return swift_unknownObjectRelease();
    default:
      if (v16 <= 3)
        v15 = ~(_DWORD)v7;
      else
        v15 = 4;
      __asm { BR              X14 }
      return result;
  }
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  const void *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (v12 + v8) & ~(v11 | 7);
  v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  v17 = v16 + 7;
  v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      v22 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v22;
      v23 = *(_OWORD *)(v14 + 16);
      v24 = *(_OWORD *)(v14 + 32);
      v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v26 = (void *)((v15 + v13) & v21);
      v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1, v9))
      {
        memcpy(v26, v27, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v26, v27, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v9);
      }
      v40 = 0;
      v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8;
      v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8;
      v43 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      v28 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v28;
      v29 = *(_OWORD *)(v14 + 16);
      v30 = *(_OWORD *)(v14 + 32);
      v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v32 = (void *)((v15 + v13) & v21);
      v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1, v9))
      {
        memcpy(v32, v33, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v32, v33, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v32, 0, 1, v9);
      }
      v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8;
      v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8;
      v46 = *(_QWORD *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_QWORD *)v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      v40 = 1;
      break;
    case 2:
      v34 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v34;
      v35 = *(_OWORD *)(v14 + 16);
      v36 = *(_OWORD *)(v14 + 32);
      v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      v38 = (void *)((v18 + v13) & v21);
      v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1, v9))
      {
        memcpy(v38, v39, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v38, v39, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v38, 0, 1, v9);
      }
      v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8;
      v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8;
      v49 = *(_QWORD *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(_QWORD *)v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      v40 = 2;
      break;
    case 3:
      *(_WORD *)v13 = *(_WORD *)v14;
      v40 = 3;
      break;
    default:
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X14 }
      return result;
  }
  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  const void *v38;
  size_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  const void *v45;
  size_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const void *v51;
  size_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  size_t __n;
  size_t v74;
  int v75;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    v24 = *(_DWORD *)(v10 + 84);
    v25 = *(_QWORD *)(v10 + 64);
    v26 = (v11 + 79) & ~v11;
    v17 = (v11 + 78) & ~v11;
  }
  else
  {
    v15 = v9;
    v72 = a1;
    v16 = v11 + 78;
    v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84))
      v18 = *(_QWORD *)(v10 + 64);
    else
      v18 = *(_QWORD *)(v10 + 64) + 1;
    v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8;
    v21 = v20 + 11;
    if (v20 + 11 <= v19)
      v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    else
      v22 = v20 + 11;
    __n = v18;
    v27 = ~v11;
    v75 = *(_DWORD *)(v10 + 84);
    v74 = *(_QWORD *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        v71 = v11 + 78;
        v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        v71 = v11 + 78;
        v28 = v13 + v11 + 79;
LABEL_16:
        v29 = v28 & v27;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v28 & v27, 1, v15))
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v29, v15);
        v17 = (v11 + 78) & ~v11;
        v30 = v74;
        v16 = v71;
        if (!v75)
          goto LABEL_19;
        goto LABEL_20;
      case 3:
LABEL_19:
        v30 = __n;
LABEL_20:
        v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v19 > v31)
          v31 = v19;
        if (v21 > v31)
          v31 = v21;
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            v33 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v33;
            v34 = *(_OWORD *)(v14 + 16);
            v35 = *(_OWORD *)(v14 + 32);
            v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v37 = (void *)((v16 + v13) & v27);
            v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1, v15))
            {
              v39 = __n;
              memcpy(v37, v38, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v37, v38, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v39 = __n;
            }
            v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v58 = *(_QWORD *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(_QWORD *)v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            v40 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v40;
            v41 = *(_OWORD *)(v14 + 16);
            v42 = *(_OWORD *)(v14 + 32);
            v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v44 = (void *)((v16 + v13) & v27);
            v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1, v15))
            {
              v46 = __n;
              memcpy(v44, v45, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v44, v45, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v46 = __n;
            }
            v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v61 = *(_QWORD *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(_QWORD *)v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            v47 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v47;
            v48 = *(_OWORD *)(v14 + 16);
            v49 = *(_OWORD *)(v14 + 32);
            v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1, v15))
            {
              v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 16))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))((v13 + v11 + 79) & v27, 0, 1, v15);
              v26 = (v11 + 79) & ~v11;
              v52 = __n;
            }
            v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v55 = *(_QWORD *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(_QWORD *)v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            v24 = v75;
            v17 = (v11 + 78) & ~v11;
            v25 = v74;
            break;
          case 3:
            *(_WORD *)v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            v26 = (v11 + 79) & ~v11;
            a1 = v72;
            v24 = v75;
            v25 = v74;
            break;
          default:
            if (v22 <= 3)
              v32 = v22;
            else
              v32 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      default:
        if (v22 <= 3)
          v23 = v22;
        else
          v23 = 4;
        __asm { BR              X11 }
        return result;
    }
  }
  if (v24)
    v62 = v25;
  else
    v62 = v25 + 1;
  v63 = v62 + 7;
  v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
  v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v65 <= v64)
    v65 = v64;
  v66 = v65 + 1;
  v67 = (_QWORD *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v68 = (_QWORD *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v69 = v68[1];
  *v67 = *v68;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t initializeWithTake for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  const void *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (v12 + v8) & ~(v11 | 7);
  v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  v17 = v16 + 7;
  v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      v22 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v22;
      v23 = *(_OWORD *)(v14 + 16);
      v24 = *(_OWORD *)(v14 + 32);
      v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v26 = (void *)((v15 + v13) & v21);
      v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1, v9))
      {
        memcpy(v26, v27, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v26, v27, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v9);
      }
      v40 = 0;
      v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8;
      v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8;
      v43 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      v28 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v28;
      v29 = *(_OWORD *)(v14 + 16);
      v30 = *(_OWORD *)(v14 + 32);
      v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v32 = (void *)((v15 + v13) & v21);
      v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1, v9))
      {
        memcpy(v32, v33, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v32, v33, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v32, 0, 1, v9);
      }
      v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8;
      v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8;
      v46 = *(_QWORD *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_QWORD *)v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      v40 = 1;
      break;
    case 2:
      v34 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v34;
      v35 = *(_OWORD *)(v14 + 16);
      v36 = *(_OWORD *)(v14 + 32);
      v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      v38 = (void *)((v18 + v13) & v21);
      v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1, v9))
      {
        memcpy(v38, v39, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v38, v39, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v38, 0, 1, v9);
      }
      v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8;
      v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8;
      v49 = *(_QWORD *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(_QWORD *)v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      v40 = 2;
      break;
    case 3:
      *(_WORD *)v13 = *(_WORD *)v14;
      v40 = 3;
      break;
    default:
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X14 }
      return result;
  }
  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for FloatingPointParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  const void *v38;
  size_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  const void *v45;
  size_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const void *v51;
  size_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  size_t __n;
  size_t v74;
  int v75;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    v24 = *(_DWORD *)(v10 + 84);
    v25 = *(_QWORD *)(v10 + 64);
    v26 = (v11 + 79) & ~v11;
    v17 = (v11 + 78) & ~v11;
  }
  else
  {
    v15 = v9;
    v72 = a1;
    v16 = v11 + 78;
    v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84))
      v18 = *(_QWORD *)(v10 + 64);
    else
      v18 = *(_QWORD *)(v10 + 64) + 1;
    v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8;
    v21 = v20 + 11;
    if (v20 + 11 <= v19)
      v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    else
      v22 = v20 + 11;
    __n = v18;
    v27 = ~v11;
    v75 = *(_DWORD *)(v10 + 84);
    v74 = *(_QWORD *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        v71 = v11 + 78;
        v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        v71 = v11 + 78;
        v28 = v13 + v11 + 79;
LABEL_16:
        v29 = v28 & v27;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v28 & v27, 1, v15))
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v29, v15);
        v17 = (v11 + 78) & ~v11;
        v30 = v74;
        v16 = v71;
        if (!v75)
          goto LABEL_19;
        goto LABEL_20;
      case 3:
LABEL_19:
        v30 = __n;
LABEL_20:
        v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v19 > v31)
          v31 = v19;
        if (v21 > v31)
          v31 = v21;
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            v33 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v33;
            v34 = *(_OWORD *)(v14 + 16);
            v35 = *(_OWORD *)(v14 + 32);
            v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v37 = (void *)((v16 + v13) & v27);
            v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1, v15))
            {
              v39 = __n;
              memcpy(v37, v38, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v39 = __n;
            }
            v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v58 = *(_QWORD *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(_QWORD *)v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            v40 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v40;
            v41 = *(_OWORD *)(v14 + 16);
            v42 = *(_OWORD *)(v14 + 32);
            v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v44 = (void *)((v16 + v13) & v27);
            v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1, v15))
            {
              v46 = __n;
              memcpy(v44, v45, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v44, v45, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v46 = __n;
            }
            v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v61 = *(_QWORD *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(_QWORD *)v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            v47 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v47;
            v48 = *(_OWORD *)(v14 + 16);
            v49 = *(_OWORD *)(v14 + 32);
            v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1, v15))
            {
              v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 32))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))((v13 + v11 + 79) & v27, 0, 1, v15);
              v26 = (v11 + 79) & ~v11;
              v52 = __n;
            }
            v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v55 = *(_QWORD *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(_QWORD *)v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            v24 = v75;
            v17 = (v11 + 78) & ~v11;
            v25 = v74;
            break;
          case 3:
            *(_WORD *)v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            v26 = (v11 + 79) & ~v11;
            a1 = v72;
            v24 = v75;
            v25 = v74;
            break;
          default:
            if (v22 <= 3)
              v32 = v22;
            else
              v32 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      default:
        if (v22 <= 3)
          v23 = v22;
        else
          v23 = 4;
        __asm { BR              X11 }
        return result;
    }
  }
  if (v24)
    v62 = v25;
  else
    v62 = v25 + 1;
  v63 = v62 + 7;
  v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
  v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v65 <= v64)
    v65 = v64;
  v66 = v65 + 1;
  v67 = (_QWORD *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v68 = (_QWORD *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v69 = v68[1];
  *v67 = *v68;
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t getEnumTagSinglePayload for FloatingPointParseStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 84);
  v11 = *(_QWORD *)(v8 + 64);
  if (v7 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v7;
  if (!v10)
    ++v11;
  v13 = v11 + 7;
  v14 = ((v13 + ((v9 + 78) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 10;
  if (((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11 > v14)
    v14 = ((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (!a2)
    return 0;
  v15 = *(_QWORD *)(v6 + 64);
  v16 = v9 | 7;
  if (v12 < a2)
  {
    if (((((v14 + ((v15 + v16 + 1) & ~v16) + 8) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v12 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X16 }
  }
  if (v7 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
  v21 = *(_QWORD *)((((a1 + v15 + v16 + 1) & ~v16 | 7) + v14 + 1) & 0xFFFFFFFFFFFFF8);
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  return (v21 + 1);
}

void storeEnumTagSinglePayload for FloatingPointParseStrategy(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 78) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v8;
  v14 = (v10 + 79) & ~v10;
  v15 = v10 | 7;
  if (!*(_DWORD *)(v9 + 84))
    ++v12;
  v16 = v12 + 7;
  v17 = ((v16 + v11) & 0xFFFFFFFFFFFFFFF8) + 10;
  v18 = ((v16 + v14) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v18 > v17)
    v17 = v18;
  if (v13 >= a3)
  {
    v21 = 0u;
    if (a2 <= v13)
      goto LABEL_21;
  }
  else
  {
    if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v19 = a3 - v13 + 1;
    else
      v19 = 2;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 >= 2)
      v21 = v20;
    else
      v21 = 0;
    if (a2 <= v13)
LABEL_21:
      __asm { BR              X14 }
  }
  if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v22 = ~v13 + a2;
    bzero(a1, ((v17 + ((*(_QWORD *)(v7 + 64) + v15 + 1) & ~v15) + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v22;
  }
  __asm { BR              X10 }
}

void sub_181A5A1CC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x181A5A264);
}

void sub_181A5A1D4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x181A5A1DCLL);
  JUMPOUT(0x181A5A264);
}

void sub_181A5A23C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x181A5A264);
}

void sub_181A5A244()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x181A5A264);
}

uint64_t sub_181A5A24C()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v1 + v5) = 0;
  if (!(_DWORD)v2)
    JUMPOUT(0x181A5A264);
  if (v4 < 0x7FFFFFFF)
  {
    if ((v2 & 0x80000000) == 0)
      JUMPOUT(0x181A5A260);
    JUMPOUT(0x181A5A258);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v1, v2, v4, v3);
}

uint64_t storeEnumTagSinglePayload for FloatingPointParseStrategy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181A5A2CC + 4 * byte_1820657FC[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181A5A300 + 4 * byte_1820657F7[v4]))();
}

uint64_t sub_181A5A300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A5A308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A5A310);
  return result;
}

uint64_t sub_181A5A31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A5A324);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181A5A328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A5A330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in FloatingPointParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0) - 8) + 80);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
      goto LABEL_7;
    v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  v4 = v0 + ((v1 + 16) & ~v1) + *(int *)(v3 + 36);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for NSDecimal._CalculationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181A5A4C4 + 4 * byte_182065A85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181A5A4F8 + 4 * byte_182065A80[v4]))();
}

uint64_t sub_181A5A4F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A5A500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A5A508);
  return result;
}

uint64_t sub_181A5A514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A5A51CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181A5A520(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A5A528(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NSDecimal._CalculationError()
{
  return &type metadata for NSDecimal._CalculationError;
}

double one-time initialization function for powerOfTen()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt16]>);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 39;
  *(_OWORD *)(v0 + 16) = xmmword_182065B70;
  *(_QWORD *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 40) = &outlined read-only object #1 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 48) = &outlined read-only object #2 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 56) = &outlined read-only object #3 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 64) = &outlined read-only object #4 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 72) = &outlined read-only object #5 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 80) = &outlined read-only object #6 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 88) = &outlined read-only object #7 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 96) = &outlined read-only object #8 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 104) = &outlined read-only object #9 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 112) = &outlined read-only object #10 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 120) = &outlined read-only object #11 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 128) = &outlined read-only object #12 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 136) = &outlined read-only object #13 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 144) = &outlined read-only object #14 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 152) = &outlined read-only object #15 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 160) = &outlined read-only object #16 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 168) = &outlined read-only object #17 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 176) = &outlined read-only object #18 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 184) = &outlined read-only object #19 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 192) = &outlined read-only object #20 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 200) = &outlined read-only object #21 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 208) = &outlined read-only object #22 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 216) = &outlined read-only object #23 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 224) = &outlined read-only object #24 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 232) = &outlined read-only object #25 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 240) = &outlined read-only object #26 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 248) = &outlined read-only object #27 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 256) = &outlined read-only object #28 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 264) = &outlined read-only object #29 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 272) = &outlined read-only object #30 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 280) = &outlined read-only object #31 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 288) = &outlined read-only object #32 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 296) = &outlined read-only object #33 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 304) = &outlined read-only object #34 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 312) = &outlined read-only object #35 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 320) = &outlined read-only object #36 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 328) = &outlined read-only object #37 of one-time initialization function for powerOfTen;
  *(_QWORD *)(v0 + 336) = &outlined read-only object #38 of one-time initialization function for powerOfTen;
  powerOfTen._rawValue = (void *)v0;
  return result;
}

double NSDecimal.asVariableLengthInteger()(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v3 = WORD1(a2);
  v4 = WORD2(a2);
  v5 = HIWORD(a2);
  v6 = a2;
  v7 = a3;
  v8 = HIWORD(a3);
  v9 = HIWORD(a1);
  if (WORD2(a1))
  {
    if (!(_DWORD)v9)
      goto LABEL_3;
LABEL_11:
    if (!(_WORD)a2)
      goto LABEL_18;
LABEL_12:
    if (WORD1(a2))
      goto LABEL_19;
LABEL_13:
    if (WORD2(a2))
      goto LABEL_20;
    if (!(_DWORD)v5 && !(_WORD)a3 && !v8)
    {
      v13 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v14 = swift_allocObject();
      *(_QWORD *)&result = 3;
      *(_OWORD *)(v14 + 16) = xmmword_182065BD0;
      *(_WORD *)(v14 + 32) = v13;
      *(_WORD *)(v14 + 34) = v9;
      *(_WORD *)(v14 + 36) = v6;
      return result;
    }
    goto LABEL_24;
  }
  if ((_DWORD)v9)
    goto LABEL_11;
  if (!(_DWORD)a2 && !WORD2(a2) && !(_DWORD)v5 && !(_WORD)a3 && !v8)
    return result;
LABEL_3:
  if ((_WORD)a2)
    goto LABEL_12;
  if (!WORD1(a2) && !WORD2(a2) && !(_DWORD)v5 && !(_WORD)a3 && !v8)
  {
    v10 = HIDWORD(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    v11 = swift_allocObject();
    *(_QWORD *)&result = 1;
    *(_OWORD *)(v11 + 16) = xmmword_18205C850;
    *(_WORD *)(v11 + 32) = v10;
    return result;
  }
LABEL_18:
  if (!WORD1(a2))
  {
    if (!WORD2(a2) && !(_DWORD)v5 && !(_WORD)a3 && !v8)
    {
      v21 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v22 = swift_allocObject();
      *(_QWORD *)&result = 2;
      *(_OWORD *)(v22 + 16) = xmmword_18205F0D0;
      *(_WORD *)(v22 + 32) = v21;
      *(_WORD *)(v22 + 34) = v9;
      return result;
    }
    goto LABEL_13;
  }
LABEL_19:
  if (WORD2(a2))
  {
LABEL_20:
    if (!(_DWORD)v5)
      goto LABEL_21;
    goto LABEL_25;
  }
LABEL_24:
  if ((_DWORD)v5)
  {
LABEL_25:
    if ((_WORD)a3)
      goto LABEL_26;
    if (v8)
    {
LABEL_29:
      v19 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v20 = swift_allocObject();
      *(_QWORD *)&result = 8;
      *(_OWORD *)(v20 + 16) = xmmword_182065BA0;
      *(_WORD *)(v20 + 32) = v19;
      *(_WORD *)(v20 + 34) = v9;
      *(_WORD *)(v20 + 36) = v6;
      *(_WORD *)(v20 + 38) = v3;
      *(_WORD *)(v20 + 40) = v4;
      *(_WORD *)(v20 + 42) = v5;
      *(_WORD *)(v20 + 44) = v7;
      *(_WORD *)(v20 + 46) = v8;
      return result;
    }
    v25 = HIDWORD(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    v26 = swift_allocObject();
    *(_QWORD *)&result = 6;
    *(_OWORD *)(v26 + 16) = xmmword_182065B80;
    *(_WORD *)(v26 + 32) = v25;
    *(_WORD *)(v26 + 34) = v9;
    *(_WORD *)(v26 + 36) = v6;
    *(_WORD *)(v26 + 38) = v3;
    *(_WORD *)(v26 + 40) = v4;
    *(_WORD *)(v26 + 42) = v5;
    return result;
  }
  if ((unsigned __int16)a3 | v8)
  {
LABEL_21:
    if (!(_WORD)a3)
    {
      if (!v8)
      {
        v15 = HIDWORD(a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
        v16 = swift_allocObject();
        *(_QWORD *)&result = 5;
        *(_OWORD *)(v16 + 16) = xmmword_182065BB0;
        *(_WORD *)(v16 + 32) = v15;
        *(_WORD *)(v16 + 34) = v9;
        *(_WORD *)(v16 + 36) = v6;
        *(_WORD *)(v16 + 38) = v3;
        *(_WORD *)(v16 + 40) = v4;
        return result;
      }
      goto LABEL_29;
    }
LABEL_26:
    if (!v8)
    {
      v17 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v18 = swift_allocObject();
      *(_QWORD *)&result = 7;
      *(_OWORD *)(v18 + 16) = xmmword_182065B90;
      *(_WORD *)(v18 + 32) = v17;
      *(_WORD *)(v18 + 34) = v9;
      *(_WORD *)(v18 + 36) = v6;
      *(_WORD *)(v18 + 38) = v3;
      *(_WORD *)(v18 + 40) = v4;
      *(_WORD *)(v18 + 42) = v5;
      *(_WORD *)(v18 + 44) = v7;
      return result;
    }
    goto LABEL_29;
  }
  v23 = HIDWORD(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  v24 = swift_allocObject();
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v24 + 16) = xmmword_182065BC0;
  *(_WORD *)(v24 + 32) = v23;
  *(_WORD *)(v24 + 34) = v9;
  *(_WORD *)(v24 + 36) = v6;
  *(_WORD *)(v24 + 38) = v3;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal.copyVariableLengthInteger(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  unint64_t v2;
  _BYTE *v3;
  __int16 v5;
  __int16 v6;
  unsigned int v7;
  int v8;
  unsigned __int16 v9;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (v2 <= 8)
  {
    _So9NSDecimala__length_setter(*((_QWORD *)a1._rawValue + 2), (_DWORD *)v1);
    switch(v2)
    {
      case 0uLL:
        *(_QWORD *)(v1 + 12) = 0;
        *(_QWORD *)(v1 + 4) = 0;
        break;
      case 1uLL:
        *(_WORD *)(v1 + 4) = *((_WORD *)a1._rawValue + 16);
        *(_QWORD *)(v1 + 6) = 0;
        *(_QWORD *)(v1 + 12) = 0;
        break;
      case 2uLL:
        *(_DWORD *)(v1 + 4) = *((_DWORD *)a1._rawValue + 8);
        *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 16) = 0;
        break;
      case 3uLL:
        v5 = *((_WORD *)a1._rawValue + 18);
        *(_DWORD *)(v1 + 4) = *((_DWORD *)a1._rawValue + 8);
        *(_WORD *)(v1 + 8) = v5;
        *(_QWORD *)(v1 + 10) = 0;
        *(_WORD *)(v1 + 18) = 0;
        break;
      case 4uLL:
        *(_QWORD *)(v1 + 4) = *((_QWORD *)a1._rawValue + 4);
        *(_QWORD *)(v1 + 12) = 0;
        break;
      case 5uLL:
        v6 = *((_WORD *)a1._rawValue + 20);
        *(_QWORD *)(v1 + 4) = *((_QWORD *)a1._rawValue + 4);
        *(_WORD *)(v1 + 12) = v6;
        *(_DWORD *)(v1 + 14) = 0;
        *(_WORD *)(v1 + 18) = 0;
        break;
      case 6uLL:
        v7 = *((_DWORD *)a1._rawValue + 10);
        *(_QWORD *)(v1 + 4) = *((_QWORD *)a1._rawValue + 4);
        *(_QWORD *)(v1 + 12) = v7;
        break;
      case 7uLL:
        v8 = *((_DWORD *)a1._rawValue + 10);
        v9 = *((_WORD *)a1._rawValue + 22);
        *(_QWORD *)(v1 + 4) = *((_QWORD *)a1._rawValue + 4);
        *(_DWORD *)(v1 + 12) = v8;
        *(_DWORD *)(v1 + 16) = v9;
        break;
      case 8uLL:
        *(_OWORD *)(v1 + 4) = *((_OWORD *)a1._rawValue + 2);
        break;
      default:
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v3 = 0;
    swift_willThrow();
  }
}

Swift::Void __swiftcall NSDecimal.compact()()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  __int16 v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  __int16 v36;
  int v37;
  unint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  int v49;
  unint64_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  unsigned int v55;
  unint64_t v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  NSDecimal *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  _BYTE *v80;
  unsigned int *v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  unsigned int v96;
  __int128 v97;

  v2 = *((unsigned __int16 *)v0 + 2);
  v3 = *((unsigned __int16 *)v0 + 3);
  v4 = *((unsigned __int16 *)v0 + 4);
  v5 = *((unsigned __int16 *)v0 + 5);
  v6 = *((unsigned __int16 *)v0 + 6);
  v7 = *((unsigned __int16 *)v0 + 7);
  v8 = *((unsigned __int16 *)v0 + 8);
  v9 = *((unsigned __int16 *)v0 + 9);
  v96 = *v0;
  v1 = v96;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  v90 = _So9NSDecimala__exponent_getter((char *)&v96);
  v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  if (_So9NSDecimala__isCompact_getter(&v96))
    return;
  v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  if (!_So9NSDecimala__length_getter(&v96))
  {
    v96 = v1;
    LOWORD(v97) = v2;
    WORD1(v97) = v3;
    WORD2(v97) = v4;
    WORD3(v97) = v5;
    WORD4(v97) = v6;
    WORD5(v97) = v7;
    WORD6(v97) = v8;
    HIWORD(v97) = v9;
    if (_So9NSDecimala__isNegative_getter(&v96))
      return;
  }
  v96 = v1;
  LOWORD(v97) = v2;
  WORD1(v97) = v3;
  WORD2(v97) = v4;
  WORD3(v97) = v5;
  WORD4(v97) = v6;
  WORD5(v97) = v7;
  WORD6(v97) = v8;
  HIWORD(v97) = v9;
  if (!_So9NSDecimala__length_getter(&v96))
    return;
  v81 = v0;
  v10 = v90;
  v11 = v90 + 1;
  v12 = v2;
  v13 = v3;
  v14 = 3435973837;
  v15 = v1;
  while (2)
  {
    v89 = v11;
    v91 = v10;
    v92 = v15;
    v83 = v13;
    v84 = v12;
    v86 = v4;
    v82 = v9;
    NSDecimal.asVariableLengthInteger()(v15 | (v12 << 32) | (v13 << 48), v4 | (v5 << 16) | (v6 << 32) | (v7 << 48), v8 | (v9 << 16));
    v17 = v16;
    v18 = *(_QWORD *)(v16 + 16);
    if (!v18)
    {
      LOWORD(v2) = 0;
      v19 = MEMORY[0x1E0DEE9D8];
      goto LABEL_15;
    }
    v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v19 + 16) = v18;
    bzero((void *)(v19 + 32), 2 * v18);
    v20 = *(_QWORD *)(v17 + 16);
    if (v18 > v20)
    {
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    v21 = v18 - 1;
    if (v18 - 1 < *(_QWORD *)(v19 + 16))
    {
      v22 = v18 - 2;
      v23 = *(unsigned __int16 *)(v17 + 32 + 2 * v21);
      LOWORD(v24) = *(_WORD *)(v17 + 32 + 2 * v21) / 0xAu;
      while (1)
      {
        *(_WORD *)(v19 + 30 + 2 * v18) = v24;
        LODWORD(v2) = v23 % 0xA;
        if (v18 == 1)
          break;
        if (v22 >= (uint64_t)v20)
          goto LABEL_75;
        v23 = *(unsigned __int16 *)(v17 + 28 + 2 * v18) | ((_DWORD)v2 << 16);
        v24 = v23 / 0xA;
        v25 = v18 - 2;
        --v18;
        if (v25 >= *(_QWORD *)(v19 + 16))
          goto LABEL_74;
      }
LABEL_15:
      v26 = *(_QWORD *)(v19 + 16);
      if (v26 && !*(_WORD *)(v19 + 2 * v26 + 30))
      {
        do
        {
          *(_QWORD *)(v19 + 16) = v26 - 1;
          if (v26 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v19 + 28 + 2 * v26--));
      }
      swift_bridgeObjectRelease();
      v96 = v92;
      LOWORD(v97) = v84;
      WORD1(v97) = v83;
      WORD2(v97) = v86;
      WORD3(v97) = v5;
      WORD4(v97) = v6;
      WORD5(v97) = v7;
      WORD6(v97) = v8;
      HIWORD(v97) = v82;
      v28 = *(_QWORD *)(v19 + 16);
      if (v28 <= 8)
      {
        _So9NSDecimala__length_setter(*(_QWORD *)(v19 + 16), &v96);
        switch(v28)
        {
          case 0uLL:
            swift_bridgeObjectRelease();
            v97 = 0uLL;
            goto LABEL_66;
          case 1uLL:
            if (!*(_QWORD *)(v19 + 16))
              goto LABEL_93;
            v44 = *(_WORD *)(v19 + 32);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v44;
            *(_QWORD *)((char *)&v97 + 2) = 0;
            *((_QWORD *)&v97 + 1) = 0;
            goto LABEL_66;
          case 2uLL:
            v33 = *(_QWORD *)(v19 + 16);
            if (!v33)
              goto LABEL_92;
            if (v33 == 1)
              goto LABEL_100;
            v34 = *(_DWORD *)(v19 + 32);
            swift_bridgeObjectRelease();
            LODWORD(v97) = v34;
            *(_QWORD *)((char *)&v97 + 4) = 0;
            HIDWORD(v97) = 0;
            goto LABEL_66;
          case 3uLL:
            v35 = *(_QWORD *)(v19 + 16);
            if (!v35)
              goto LABEL_90;
            if (v35 == 1)
              goto LABEL_96;
            if (v35 < 3)
              goto LABEL_102;
            v36 = *(_WORD *)(v19 + 32);
            v37 = *(_DWORD *)(v19 + 34);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v36;
            *(_DWORD *)((char *)&v97 + 2) = v37;
            *(_QWORD *)((char *)&v97 + 6) = 0;
            HIWORD(v97) = 0;
            goto LABEL_66;
          case 4uLL:
            v29 = *(_QWORD *)(v19 + 16);
            if (!v29)
              goto LABEL_87;
            if (v29 == 1)
              goto LABEL_94;
            if (v29 < 3)
              goto LABEL_103;
            if (v29 == 3)
              goto LABEL_109;
            v30 = *(_WORD *)(v19 + 32);
            v31 = *(_WORD *)(v19 + 34);
            v32 = *(_DWORD *)(v19 + 36);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v30;
            WORD1(v97) = v31;
            DWORD1(v97) = v32;
            *((_QWORD *)&v97 + 1) = 0;
            goto LABEL_66;
          case 5uLL:
            v45 = *(_QWORD *)(v19 + 16);
            if (!v45)
              goto LABEL_89;
            if (v45 == 1)
              goto LABEL_98;
            if (v45 < 3)
              goto LABEL_104;
            if (v45 == 3)
              goto LABEL_110;
            if (v45 < 5)
              goto LABEL_115;
            v46 = *(_WORD *)(v19 + 32);
            v47 = *(_WORD *)(v19 + 34);
            v48 = *(_WORD *)(v19 + 36);
            v49 = *(_DWORD *)(v19 + 38);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v46;
            WORD1(v97) = v47;
            WORD2(v97) = v48;
            *(_DWORD *)((char *)&v97 + 6) = v49;
            *(_DWORD *)((char *)&v97 + 10) = 0;
            HIWORD(v97) = 0;
            goto LABEL_66;
          case 6uLL:
            v50 = *(_QWORD *)(v19 + 16);
            if (!v50)
              goto LABEL_88;
            if (v50 == 1)
              goto LABEL_99;
            if (v50 < 3)
              goto LABEL_105;
            if (v50 == 3)
              goto LABEL_107;
            if (v50 < 5)
              goto LABEL_112;
            if (v50 == 5)
              goto LABEL_116;
            v51 = *(_WORD *)(v19 + 32);
            v52 = *(_WORD *)(v19 + 34);
            v53 = *(_WORD *)(v19 + 36);
            v54 = *(_WORD *)(v19 + 38);
            v55 = *(_DWORD *)(v19 + 40);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v51;
            WORD1(v97) = v52;
            WORD2(v97) = v53;
            WORD3(v97) = v54;
            *((_QWORD *)&v97 + 1) = v55;
            goto LABEL_66;
          case 7uLL:
            v38 = *(_QWORD *)(v19 + 16);
            if (!v38)
              goto LABEL_91;
            if (v38 == 1)
              goto LABEL_97;
            if (v38 < 3)
              goto LABEL_101;
            if (v38 == 3)
              goto LABEL_111;
            if (v38 < 5)
              goto LABEL_113;
            if (v38 == 5)
              goto LABEL_118;
            if (v38 < 7)
              goto LABEL_120;
            v39 = *(_WORD *)(v19 + 32);
            v40 = *(_WORD *)(v19 + 34);
            v41 = *(_WORD *)(v19 + 36);
            v42 = *(_WORD *)(v19 + 38);
            v43 = *(_WORD *)(v19 + 40);
            v93 = *(_DWORD *)(v19 + 42);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v39;
            WORD1(v97) = v40;
            WORD2(v97) = v41;
            WORD3(v97) = v42;
            WORD4(v97) = v43;
            *(_DWORD *)((char *)&v97 + 10) = v93;
            HIWORD(v97) = 0;
            goto LABEL_66;
          case 8uLL:
            v56 = *(_QWORD *)(v19 + 16);
            if (!v56)
              goto LABEL_86;
            if (v56 == 1)
              goto LABEL_95;
            if (v56 < 3)
              goto LABEL_106;
            if (v56 == 3)
              goto LABEL_108;
            if (v56 < 5)
              goto LABEL_114;
            if (v56 == 5)
              goto LABEL_117;
            if (v56 < 7)
              goto LABEL_119;
            if (v56 == 7)
              goto LABEL_121;
            v57 = *(_WORD *)(v19 + 32);
            v58 = *(_WORD *)(v19 + 34);
            v59 = *(_WORD *)(v19 + 36);
            v60 = *(_WORD *)(v19 + 38);
            v61 = *(_WORD *)(v19 + 40);
            v94 = *(_WORD *)(v19 + 42);
            v87 = *(_DWORD *)(v19 + 44);
            swift_bridgeObjectRelease();
            LOWORD(v97) = v57;
            WORD1(v97) = v58;
            WORD2(v97) = v59;
            WORD3(v97) = v60;
            WORD4(v97) = v61;
            WORD5(v97) = v94;
            HIDWORD(v97) = v87;
LABEL_66:
            _So9NSDecimala__length_setter(v28, &v96);
            v10 = v91 + 1;
            if (__OFADD__(v91, 1))
              goto LABEL_85;
            LODWORD(v15) = v96;
            LOWORD(v12) = v97;
            LOWORD(v13) = WORD1(v97);
            v4 = WORD2(v97);
            v5 = WORD3(v97);
            v6 = WORD4(v97);
            LOWORD(v7) = WORD5(v97);
            LOWORD(v8) = WORD6(v97);
            v9 = HIWORD(v97);
            if (!(_WORD)v2)
            {
              v85 = WORD6(v97);
              v62 = v96;
              v95 = WORD5(v97);
              v63 = (unsigned __int16)v97;
              v88 = WORD4(v97);
              v64 = WORD3(v97);
              v65 = WORD1(v97);
              v66 = _So9NSDecimala__length_getter(&v96);
              v13 = v65;
              v5 = v64;
              v6 = v88;
              v12 = v63;
              v7 = v95;
              v10 = v91 + 1;
              v15 = v62;
              v8 = v85;
              v11 = v89 + 1;
              if (v66)
                continue;
            }
            v91 = v10;
            v96 = v15;
            LOWORD(v97) = v12;
            WORD1(v97) = v13;
            v86 = v4;
            WORD2(v97) = v4;
            v14 = v5;
            WORD3(v97) = v5;
            v5 = v6;
            WORD4(v97) = v6;
            WORD5(v97) = v7;
            WORD6(v97) = v8;
            HIWORD(v97) = v9;
            v67 = _So9NSDecimala__length_getter(&v96);
            if ((_WORD)v2 || v67)
              goto LABEL_76;
            *(_QWORD *)v81 = 0;
            *((_QWORD *)v81 + 1) = 0;
            v81[4] = 0;
            break;
          default:
            goto LABEL_123;
        }
        return;
      }
      goto LABEL_123;
    }
    break;
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  NSDecimal._multiply(byShort:)((NSDecimal *)(v86 | (v14 << 16) | (v5 << 32)), 0xAu);
  if (v69)
    goto LABEL_125;
  NSDecimal._add(_:)(v68, v2);
  if (v73)
  {
LABEL_126:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x181A5B560);
  }
  *(_QWORD *)v81 = v70;
  v74 = HIDWORD(v70);
  v75 = HIWORD(v70);
  *((_QWORD *)v81 + 1) = v71;
  v81[4] = v72;
  v76 = (v91 - 1);
  if (__OFSUB__(v91, 1))
  {
LABEL_122:
    __break(1u);
LABEL_123:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v80 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unexpectedError();
    __break(1u);
LABEL_124:
    swift_unexpectedError();
    __break(1u);
LABEL_125:
    swift_unexpectedError();
    __break(1u);
    goto LABEL_126;
  }
  if ((int)v76 >= 128)
  {
    do
    {
      NSDecimal._multiply(byShort:)((NSDecimal *)(v70 | ((unint64_t)(unsigned __int16)v74 << 32) | (v75 << 48)), 0xAu);
      if (v79)
        goto LABEL_124;
      v75 = HIWORD(v70);
      v74 = HIDWORD(v70);
      --v89;
    }
    while (v89 > 128);
    *(_QWORD *)v81 = v70;
    *((_QWORD *)v81 + 1) = v77;
    v81[4] = v78;
    v76 = 127;
  }
  _So9NSDecimala__exponent_setter(v76, v81);
  _So9NSDecimala__isCompact_setter_0(1, v81);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._add(_:)(NSDecimal *__return_ptr retstr, Swift::UInt16 a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  int v19;
  int v20;
  _QWORD v21[2];
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;

  LOWORD(v5) = a2;
  v23 = v2;
  v6 = HIWORD(v2);
  v24 = v3;
  v20 = WORD2(v2);
  v26 = (unsigned __int16)v3;
  v7 = HIWORD(v3);
  v8 = WORD1(v3);
  v9 = (unsigned __int16)v4;
  v25 = v4;
  v10 = HIWORD(v4);
  v11 = WORD2(v3);
  v19 = v2;
  v21[0] = v2;
  v21[1] = v3;
  v22 = v4;
  if (_So9NSDecimala__length_getter(v21))
  {
    LODWORD(v12) = 0;
    v5 = (unsigned __int16)v5;
    do
    {
      switch((int)v12)
      {
        case 0:
          v13 = v5 + v20;
          v20 = (unsigned __int16)(v5 + v20);
          break;
        case 1:
          v13 = v5 + v6;
          LODWORD(v6) = (unsigned __int16)(v5 + v6);
          break;
        case 2:
          v13 = v5 + v26;
          v26 = (unsigned __int16)(v5 + v26);
          break;
        case 3:
          v13 = v5 + v8;
          v8 = (unsigned __int16)(v5 + v8);
          break;
        case 4:
          v13 = v5 + v11;
          v11 = (unsigned __int16)(v5 + v11);
          break;
        case 5:
          v13 = v5 + v7;
          LODWORD(v7) = (unsigned __int16)(v5 + v7);
          break;
        case 6:
          v13 = v5 + v9;
          v9 = (unsigned __int16)(v5 + v9);
          break;
        case 7:
          v13 = v5 + v10;
          v10 = (unsigned __int16)(v5 + v10);
          break;
        default:
          HIWORD(v25) = v10;
          LOWORD(v25) = v9;
          HIWORD(v24) = v7;
          WORD2(v24) = v11;
          WORD1(v24) = v8;
          LOWORD(v24) = v26;
          HIWORD(v23) = v6;
          WORD2(v23) = v20;
          v21[0] = 0;
          v21[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          strcpy((char *)v21, "Invalid index ");
          HIBYTE(v21[1]) = -18;
          v27 = v12;
          v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          v16._countAndFlagsBits = 0x616D5F20726F6620;
          v16._object = (void *)0xEE0061737369746ELL;
          String.append(_:)(v16);
          while (1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_31:
            v21[0] = 0;
            v21[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(30);
            swift_bridgeObjectRelease();
            strcpy((char *)v21, "Invalid index ");
            HIBYTE(v21[1]) = -18;
            v27 = v12;
            v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            v18._countAndFlagsBits = 0x616D5F20726F6620;
            v18._object = (void *)0xEE0061737369746ELL;
            String.append(_:)(v18);
          }
      }
      v12 = (v12 + 1);
      LODWORD(v21[0]) = v19;
      v5 = HIWORD(v13);
      WORD2(v21[0]) = v20;
      HIWORD(v21[0]) = v6;
      LOWORD(v21[1]) = v26;
      WORD1(v21[1]) = v8;
      WORD2(v21[1]) = v11;
      HIWORD(v21[1]) = v7;
      LOWORD(v22) = v9;
      HIWORD(v22) = v10;
    }
    while (v12 < _So9NSDecimala__length_getter(v21));
    HIWORD(v25) = v10;
    LOWORD(v25) = v9;
    HIWORD(v24) = v7;
    WORD2(v24) = v11;
    WORD1(v24) = v8;
    LOWORD(v24) = v26;
    HIWORD(v23) = v6;
    WORD2(v23) = v20;
    if (v13 < 0x10000)
      goto LABEL_16;
    LOWORD(v5) = 1;
  }
  else
  {
    v12 = 0;
    if (!(_WORD)v5)
    {
LABEL_16:
      _So9NSDecimala__length_setter(v12, &v23);
      return;
    }
  }
  LODWORD(v21[0]) = v19;
  WORD2(v21[0]) = v20;
  HIWORD(v21[0]) = v6;
  LOWORD(v21[1]) = v26;
  WORD1(v21[1]) = v8;
  WORD2(v21[1]) = v11;
  HIWORD(v21[1]) = v7;
  LOWORD(v22) = v9;
  HIWORD(v22) = v10;
  if (_So9NSDecimala__length_getter(v21) < 8)
  {
    switch((int)v12)
    {
      case 0:
        WORD2(v23) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      case 1:
        HIWORD(v23) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      case 2:
        LOWORD(v24) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      case 3:
        WORD1(v24) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      case 4:
        WORD2(v24) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      case 5:
        HIWORD(v24) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      case 6:
        LOWORD(v25) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      case 7:
        HIWORD(v25) = v5;
        v12 = (v12 + 1);
        goto LABEL_16;
      default:
        goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  *v14 = 0;
  swift_willThrow();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._multiply(byShort:)(NSDecimal *__return_ptr retstr, Swift::UInt16 byShort)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  Swift::String v28;
  Swift::String v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD v33[2];
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;

  v5 = v2;
  v35 = v2;
  v36 = v3;
  v37 = v4;
  if (!byShort)
  {
    v14 = 0;
LABEL_20:
    _So9NSDecimala__length_setter(v14, &v35);
    return;
  }
  v33[0] = v2;
  v32 = WORD2(v2);
  v7 = HIWORD(v2);
  v8 = (unsigned __int16)v3;
  v33[1] = v3;
  v9 = WORD1(v3);
  v10 = WORD2(v3);
  v11 = HIWORD(v3);
  v12 = (unsigned __int16)v4;
  v34 = v4;
  v13 = HIWORD(v4);
  if (!_So9NSDecimala__length_getter(v33))
  {
    v14 = 0;
    goto LABEL_20;
  }
  v31 = v5;
  v38 = 0;
  v30 = byShort;
  LODWORD(v14) = 1;
  while (2)
  {
    v20 = v7;
    v21 = v32;
    v22 = v8;
    v23 = v9;
    v24 = v11;
    v25 = v13;
    v16 = v10;
    v26 = v12;
    switch((int)v14)
    {
      case 1:
        v15 = v38 + v32 * v30;
        v21 = (unsigned __int16)(v38 + v32 * v30);
        goto LABEL_5;
      case 2:
        v15 = v38 + v7 * v30;
        v20 = (unsigned __int16)(v38 + v7 * v30);
        goto LABEL_5;
      case 3:
        v15 = v38 + v8 * v30;
        v22 = (unsigned __int16)(v38 + v8 * v30);
        goto LABEL_5;
      case 4:
        v15 = v38 + v9 * v30;
        v23 = (unsigned __int16)(v38 + v9 * v30);
        goto LABEL_5;
      case 5:
        v15 = v38 + v10 * v30;
        v16 = (unsigned __int16)(v38 + v10 * v30);
        goto LABEL_5;
      case 6:
        v15 = v38 + v11 * v30;
        v24 = (unsigned __int16)(v38 + v11 * v30);
        goto LABEL_5;
      case 7:
        v15 = v38 + v12 * v30;
        v26 = (unsigned __int16)(v38 + v12 * v30);
        goto LABEL_5;
      case 8:
        v15 = v38 + v13 * v30;
        v25 = (unsigned __int16)(v38 + v13 * v30);
LABEL_5:
        LODWORD(v33[0]) = v31;
        v17 = v15;
        v38 = HIWORD(v15);
        v32 = v21;
        WORD2(v33[0]) = v21;
        v7 = v20;
        HIWORD(v33[0]) = v20;
        v8 = v22;
        LOWORD(v33[1]) = v22;
        v9 = v23;
        WORD1(v33[1]) = v23;
        v10 = v16;
        WORD2(v33[1]) = v16;
        v11 = v24;
        HIWORD(v33[1]) = v24;
        v12 = v26;
        LOWORD(v34) = v26;
        v13 = v25;
        HIWORD(v34) = v25;
        v18 = _So9NSDecimala__length_getter(v33);
        v19 = v14;
        v14 = (v14 + 1);
        if (v19 < v18)
          continue;
        HIWORD(v37) = v13;
        LOWORD(v37) = v12;
        HIWORD(v36) = v11;
        WORD2(v36) = v10;
        WORD1(v36) = v9;
        LOWORD(v36) = v8;
        HIWORD(v35) = v7;
        WORD2(v35) = v32;
        if (v17 < 0x10000)
        {
          v14 = (v14 - 1);
          goto LABEL_20;
        }
        LODWORD(v33[0]) = v31;
        WORD2(v33[0]) = v32;
        HIWORD(v33[0]) = v7;
        LOWORD(v33[1]) = v8;
        WORD1(v33[1]) = v9;
        WORD2(v33[1]) = v10;
        HIWORD(v33[1]) = v11;
        LOWORD(v34) = v12;
        HIWORD(v34) = v13;
        if (_So9NSDecimala__length_getter(v33) < 8)
        {
          NSDecimal.subscript.setter(v38, v14 - 1);
          goto LABEL_20;
        }
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        swift_allocError();
        *v27 = 0;
        swift_willThrow();
        break;
      default:
        HIWORD(v37) = v13;
        LOWORD(v37) = v12;
        HIWORD(v36) = v11;
        WORD2(v36) = v10;
        WORD1(v36) = v9;
        LOWORD(v36) = v8;
        HIWORD(v35) = v7;
        WORD2(v35) = v32;
        v33[0] = 0;
        v33[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        strcpy((char *)v33, "Invalid index ");
        HIBYTE(v33[1]) = -18;
        v39 = v14 - 1;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 0x616D5F20726F6620;
        v29._object = (void *)0xEE0061737369746ELL;
        String.append(_:)(v29);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
    }
    break;
  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._multiplyBy10AndAdd(number:)(NSDecimal *__return_ptr retstr, Swift::UInt16 number)
{
  NSDecimal *v3;
  void *v4;
  void *v5;
  void *v6;
  _BYTE *v7;

  NSDecimal._multiply(byShort:)(retstr, 0xAu);
  v5 = v4;
  if (v4 || (NSDecimal._add(_:)(v3, number), (v5 = v6) != 0))
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v7 = 0;
    swift_willThrow();

  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._power(exponent:roundingMode:)(NSDecimal *__return_ptr retstr, Swift::UInt exponent, NSRoundingMode roundingMode)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  Swift::UInt v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  Swift::OpaquePointer v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _BOOL8 v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  uint64_t v109;
  __int16 v111;
  int v112;
  _BOOL8 v113;
  uint64_t v114;
  Swift::OpaquePointer v115;
  void *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _BYTE *v125;
  _BYTE *v126;
  _BOOL8 v127;
  int v128;
  uint64_t v129;
  Swift::OpaquePointer v130;
  void *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  unsigned int v162;
  unsigned int v163;
  __int16 v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  unint64_t v168;
  __int16 v169;
  int v170;
  __int16 v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  int isNegative_getter;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  int v191;
  int v192;
  __int16 v193;
  __int16 v194;
  __int16 v195;
  __int16 v196;
  __int16 v197;
  __int16 v198;
  __int16 v199;
  __int16 v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t v204;

  v6 = v3;
  v201 = v3;
  v7 = HIWORD(v3);
  v8 = WORD2(v3);
  v202 = v4;
  v9 = (unsigned __int16)v4;
  v10 = HIWORD(v4);
  v11 = WORD1(v4);
  v12 = WORD2(v4);
  v203 = v5;
  v13 = (unsigned __int16)v5;
  v14 = HIWORD(v5);
  if (!_So9NSDecimala__length_getter(&v201))
  {
    LODWORD(v201) = v6;
    WORD2(v201) = v8;
    HIWORD(v201) = v7;
    LOWORD(v202) = v9;
    WORD1(v202) = v11;
    WORD2(v202) = v12;
    HIWORD(v202) = v10;
    LOWORD(v203) = v13;
    HIWORD(v203) = v14;
    if (_So9NSDecimala__isNegative_getter(&v201))
      goto LABEL_137;
  }
  v162 = v14;
  v204 = v6;
  v189 = v7;
  v185 = v12;
  v15 = specialized NSDecimal.init(_:)(1uLL);
  v16 = HIWORD(v15);
  v183 = WORD2(v17);
  v184 = WORD1(v17);
  v18 = (unsigned __int16)v17;
  v182 = HIWORD(v17);
  HIDWORD(v181) = (unsigned __int16)v19;
  LODWORD(v181) = HIWORD(v19);
  v20 = exponent;
  if (!exponent)
    return;
  v180 = WORD2(v15);
  v21 = v10;
  v22 = v15;
  v23 = v13;
  v24 = v9;
  v25 = v11;
  v26 = v8;
  if (exponent == 1)
  {
    v27 = v162;
LABEL_5:
    LODWORD(v201) = v22;
    WORD2(v201) = v180;
    HIWORD(v201) = v16;
    v177 = v18;
    LOWORD(v202) = v18;
    WORD1(v202) = v184;
    WORD2(v202) = v183;
    HIWORD(v202) = v182;
    LOWORD(v203) = WORD2(v181);
    HIWORD(v203) = v181;
    if (!_So9NSDecimala__length_getter(&v201))
    {
      LODWORD(v201) = v22;
      WORD2(v201) = v180;
      HIWORD(v201) = v16;
      LOWORD(v202) = v177;
      WORD1(v202) = v184;
      WORD2(v202) = v183;
      HIWORD(v202) = v182;
      LOWORD(v203) = WORD2(v181);
      HIWORD(v203) = v181;
      if (_So9NSDecimala__isNegative_getter(&v201))
        goto LABEL_137;
    }
    LODWORD(v201) = v204;
    WORD2(v201) = v26;
    HIWORD(v201) = v189;
    LOWORD(v202) = v24;
    WORD1(v202) = v25;
    WORD2(v202) = v185;
    HIWORD(v202) = v21;
    LOWORD(v203) = v23;
    HIWORD(v203) = v27;
    if (!_So9NSDecimala__length_getter(&v201))
    {
      LODWORD(v201) = v204;
      WORD2(v201) = v26;
      HIWORD(v201) = v189;
      LOWORD(v202) = v24;
      WORD1(v202) = v25;
      WORD2(v202) = v185;
      HIWORD(v202) = v21;
      LOWORD(v203) = v23;
      HIWORD(v203) = v27;
      if (_So9NSDecimala__isNegative_getter(&v201))
      {
LABEL_137:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        swift_allocError();
        *v126 = 0;
        swift_willThrow();
        return;
      }
    }
    LODWORD(v201) = v22;
    WORD2(v201) = v180;
    HIWORD(v201) = v16;
    LOWORD(v202) = v177;
    WORD1(v202) = v184;
    WORD2(v202) = v183;
    HIWORD(v202) = v182;
    LOWORD(v203) = WORD2(v181);
    HIWORD(v203) = v181;
    if (!_So9NSDecimala__length_getter(&v201))
      return;
    v28 = v27;
    v29 = v26;
    v30 = v25;
    v31 = v204;
    LODWORD(v201) = v204;
    WORD2(v201) = v29;
    HIWORD(v201) = v189;
    LOWORD(v202) = v24;
    WORD1(v202) = v30;
    WORD2(v202) = v185;
    HIWORD(v202) = v21;
    LOWORD(v203) = v23;
    HIWORD(v203) = v28;
    if (!_So9NSDecimala__length_getter(&v201))
      return;
    NSDecimal.asVariableLengthInteger()(v22 | (v180 << 32) | (v16 << 48), v177 | (v184 << 16) | (v183 << 32) | (v182 << 48), HIDWORD(v181) | ((_DWORD)v181 << 16));
    v32 = v30;
    v34 = v33;
    v159 = v29;
    v152 = v24;
    v155 = v32;
    v169 = v23;
    NSDecimal.asVariableLengthInteger()(v31 | (v29 << 32) | (v189 << 48), v24 | (v32 << 16) | (v185 << 32) | (v21 << 48), v23 | (v28 << 16));
    v36 = v35;
    v37 = *(_QWORD *)(v34 + 16);
    v167 = v21;
    if (!v37 || (v38 = *(_QWORD *)(v35 + 16)) == 0)
    {
      v165 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v188 = MEMORY[0x1E0DEE9D8];
LABEL_140:
      v201 = 0;
      v202 = 0;
      v203 = 0;
      v192 = v22;
      v193 = v180;
      v194 = v16;
      v195 = v177;
      v196 = v184;
      v197 = v183;
      v198 = v182;
      v199 = WORD2(v181);
      v200 = v181;
      isNegative_getter = _So9NSDecimala__isNegative_getter(&v192);
      v192 = v204;
      v193 = v159;
      v194 = v189;
      v195 = v152;
      v196 = v155;
      v197 = v185;
      v198 = v167;
      v199 = v169;
      v200 = v165;
      v127 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v192);
      _So9NSDecimala__isNegative_setter(v127, &v201);
      v192 = v22;
      v193 = v180;
      v194 = v16;
      v195 = v177;
      v196 = v184;
      v197 = v183;
      v198 = v182;
      v199 = WORD2(v181);
      v200 = v181;
      v128 = _So9NSDecimala__exponent_getter((char *)&v192);
      v192 = v204;
      v193 = v159;
      v194 = v189;
      v195 = v152;
      v196 = v155;
      v197 = v185;
      v198 = v167;
      v199 = v169;
      v200 = v165;
      v129 = _So9NSDecimala__exponent_getter((char *)&v192) + v128;
      v130._rawValue = (void *)v188;
      if (*(_QWORD *)(v188 + 16) >= 9uLL)
      {
        specialized static NSDecimal._fitMantissa(_:roundingMode:)(v188, roundingMode);
        if (v166)
          goto LABEL_180;
        v133 = v131;
        v134 = v132;
        swift_bridgeObjectRelease();
        if (v134 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_211;
        if (v134 > 0x7FFFFFFF)
        {
LABEL_212:
          __break(1u);
          goto LABEL_213;
        }
        v64 = __OFADD__((_DWORD)v129, (_DWORD)v134);
        v129 = (v129 + v134);
        if (v64)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v130._rawValue = v133;
      }
      NSDecimal.copyVariableLengthInteger(_:)(v130);
      if (v135)
        goto LABEL_180;
      v136 = *((_QWORD *)v130._rawValue + 2);
      swift_bridgeObjectRelease();
      if (!HIDWORD(v136))
      {
        _So9NSDecimala__length_setter(v136, &v201);
        _So9NSDecimala__isCompact_setter_0(0, &v201);
        if ((int)v129 < 128)
        {
          _So9NSDecimala__exponent_setter(v129, &v201);
          NSDecimal.compact()();
          return;
        }
        goto LABEL_137;
      }
LABEL_215:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      goto LABEL_207;
    if (v39 > 15)
    {
      v39 = 16;
    }
    else
    {
      if (v39 < 0)
      {
LABEL_214:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_215;
      }
      if (!v39)
      {
        v40 = MEMORY[0x1E0DEE9D8];
LABEL_152:
        v137 = 0;
        v138 = v36 + 32;
        v139 = v40 + 32;
        while (2)
        {
          if (v137 != v38)
          {
            v140 = 0;
            v141 = 0;
            v142 = v137 + 1;
            do
            {
              if (v37 == v141)
                goto LABEL_188;
              v143 = v141 + v137;
              if (__OFADD__(v141, v137))
                goto LABEL_189;
              if (v143 >= v39)
              {
                if (v140)
                  goto LABEL_179;
                v140 = *(unsigned __int16 *)(v138 + 2 * v137);
                if (*(_WORD *)(v138 + 2 * v137))
                {
                  v140 = *(unsigned __int16 *)(v34 + 2 * v141 + 32);
                  if (*(_WORD *)(v34 + 2 * v141 + 32))
                    goto LABEL_179;
                }
              }
              else
              {
                if (v143 < 0)
                  goto LABEL_190;
                if ((unint64_t)v143 >= *(_QWORD *)(v40 + 16))
                  goto LABEL_191;
                v144 = 2 * v143;
                v145 = v140
                     + *(unsigned __int16 *)(v139 + v144)
                     + *(unsigned __int16 *)(v34 + 2 * v141 + 32) * *(unsigned __int16 *)(v138 + 2 * v137);
                v140 = HIWORD(v145);
                *(_WORD *)(v139 + v144) = v145;
              }
              ++v141;
            }
            while (v37 != v141);
            if (!v140)
            {
LABEL_172:
              v137 = v142;
              if (v142 != v38)
                continue;
              v147 = *(_QWORD *)(v40 + 16);
              v165 = v28;
              v188 = v40;
              if (v147 && !*(_WORD *)(v139 + 2 * v147 - 2))
              {
                v148 = v147 + 14;
                do
                {
                  *(_QWORD *)(v40 + 16) = v148 - 15;
                  if (v148 == 15)
                    break;
                }
                while (!*(unsigned __int16 *)(v40 + 2 * v148--));
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_140;
            }
            v64 = __OFADD__(v37, v137);
            v146 = v37 + v137;
            if (v64)
              goto LABEL_208;
            if (v146 >= v39)
              goto LABEL_179;
            if (v146 < 0)
              goto LABEL_209;
            if ((unint64_t)v146 < *(_QWORD *)(v40 + 16))
            {
              *(_WORD *)(v139 + 2 * v146) = v140;
              goto LABEL_172;
            }
            goto LABEL_210;
          }
          goto LABEL_203;
        }
      }
    }
    v40 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v40 + 16) = v39;
    bzero((void *)(v40 + 32), 2 * v39);
    goto LABEL_152;
  }
  v27 = v162;
  while (1)
  {
    v168 = v21;
    v187 = v20;
    if ((v20 & 1) != 0)
    {
      v170 = v23;
      LODWORD(v201) = v22;
      WORD2(v201) = v180;
      HIWORD(v201) = v16;
      v43 = v18;
      LOWORD(v202) = v18;
      WORD1(v202) = v184;
      WORD2(v202) = v183;
      HIWORD(v202) = v182;
      LOWORD(v203) = WORD2(v181);
      HIWORD(v203) = v181;
      if (!_So9NSDecimala__length_getter(&v201))
      {
        LODWORD(v201) = v22;
        WORD2(v201) = v180;
        HIWORD(v201) = v16;
        LOWORD(v202) = v43;
        WORD1(v202) = v184;
        WORD2(v202) = v183;
        HIWORD(v202) = v182;
        LOWORD(v203) = WORD2(v181);
        HIWORD(v203) = v181;
        if (_So9NSDecimala__isNegative_getter(&v201))
          goto LABEL_137;
      }
      LODWORD(v201) = v204;
      WORD2(v201) = v26;
      HIWORD(v201) = v189;
      LOWORD(v202) = v24;
      WORD1(v202) = v25;
      WORD2(v202) = v185;
      HIWORD(v202) = v21;
      LOWORD(v203) = v170;
      HIWORD(v203) = v27;
      if (!_So9NSDecimala__length_getter(&v201))
      {
        LODWORD(v201) = v204;
        WORD2(v201) = v26;
        HIWORD(v201) = v189;
        LOWORD(v202) = v24;
        WORD1(v202) = v25;
        WORD2(v202) = v185;
        HIWORD(v202) = v21;
        LOWORD(v203) = v170;
        HIWORD(v203) = v27;
        if (_So9NSDecimala__isNegative_getter(&v201))
          goto LABEL_137;
      }
      v41 = v25;
      LODWORD(v201) = v22;
      WORD2(v201) = v180;
      HIWORD(v201) = v16;
      LOWORD(v202) = v43;
      WORD1(v202) = v184;
      WORD2(v202) = v183;
      HIWORD(v202) = v182;
      LOWORD(v203) = WORD2(v181);
      HIWORD(v203) = v181;
      if (_So9NSDecimala__length_getter(&v201))
      {
        v173 = v22;
        v179 = v43;
        v42 = v204;
        LODWORD(v201) = v204;
        WORD2(v201) = v26;
        HIWORD(v201) = v189;
        LOWORD(v202) = v24;
        v160 = v26;
        v44 = v41;
        WORD1(v202) = v41;
        WORD2(v202) = v185;
        HIWORD(v202) = v21;
        v23 = v170;
        LOWORD(v203) = v170;
        HIWORD(v203) = v27;
        if (_So9NSDecimala__length_getter(&v201))
        {
          NSDecimal.asVariableLengthInteger()(v22 | (v180 << 32) | (v16 << 48), v179 | (v184 << 16) | (v183 << 32) | (v182 << 48), HIDWORD(v181) | ((_DWORD)v181 << 16));
          v46 = v45;
          v156 = v44;
          v163 = v27;
          NSDecimal.asVariableLengthInteger()(v42 | (v160 << 32) | (v189 << 48), v24 | (v44 << 16) | (v185 << 32) | (v21 << 48), v170 | (v27 << 16));
          v48 = v47;
          v49 = *(_QWORD *)(v46 + 16);
          v153 = v24;
          if (v49 && (v50 = *(_QWORD *)(v47 + 16)) != 0)
          {
            if (__OFADD__(v49, v50))
              goto LABEL_199;
            if (v49 + v50 >= 16)
              v51 = 16;
            else
              v51 = v49 + v50;
            v52 = v173;
            if (v51 < 0)
              goto LABEL_214;
            v53._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
            *((_QWORD *)v53._rawValue + 2) = v51;
            v54 = (char *)v53._rawValue + 32;
            bzero((char *)v53._rawValue + 32, 2 * v51);
            v55 = 0;
            v56 = v48 + 32;
            v57 = v179;
            do
            {
              v58 = 0;
              v59 = 0;
              v60 = v55++;
              do
              {
                v61 = v59 + v60;
                if (__OFADD__(v59, v60))
                  goto LABEL_183;
                if (v61 >= v51)
                {
                  if (v58)
                    goto LABEL_179;
                  v58 = *(unsigned __int16 *)(v56 + 2 * v60);
                  if (*(_WORD *)(v56 + 2 * v60))
                  {
                    v58 = *(unsigned __int16 *)(v46 + 2 * v59 + 32);
                    if (*(_WORD *)(v46 + 2 * v59 + 32))
                      goto LABEL_179;
                  }
                }
                else
                {
                  if (v61 < 0)
                    goto LABEL_186;
                  if ((unint64_t)v61 >= *((_QWORD *)v53._rawValue + 2))
                    goto LABEL_187;
                  v62 = 2 * v61;
                  v63 = v58
                      + *(unsigned __int16 *)&v54[v62]
                      + *(unsigned __int16 *)(v46 + 2 * v59 + 32) * *(unsigned __int16 *)(v56 + 2 * v60);
                  v58 = HIWORD(v63);
                  *(_WORD *)&v54[v62] = v63;
                }
                ++v59;
              }
              while (v49 != v59);
              if (v58)
              {
                v64 = __OFADD__(v49, v60);
                v65 = v49 + v60;
                if (v64)
                  goto LABEL_204;
                if (v65 >= v51)
                {
LABEL_179:
                  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                  swift_allocError();
                  *v150 = 0;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_180;
                }
                if (v65 < 0)
                  goto LABEL_205;
                if ((unint64_t)v65 >= *((_QWORD *)v53._rawValue + 2))
                  goto LABEL_206;
                *(_WORD *)&v54[2 * v65] = v58;
              }
            }
            while (v55 != v50);
            v66 = *((_QWORD *)v53._rawValue + 2);
            if (v66 && !*(_WORD *)&v54[2 * v66 - 2])
            {
              v123 = v66 + 14;
              v67 = v180;
              do
              {
                *((_QWORD *)v53._rawValue + 2) = v123 - 15;
                if (v123 == 15)
                  break;
              }
              while (!*((unsigned __int16 *)v53._rawValue + v123--));
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v67 = v180;
            }
          }
          else
          {
            v67 = v180;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v53._rawValue = (void *)MEMORY[0x1E0DEE9D8];
            v57 = v179;
            v52 = v173;
          }
          v201 = 0;
          v202 = 0;
          v203 = 0;
          v192 = v52;
          v193 = v67;
          v194 = v16;
          v195 = v57;
          v196 = v184;
          v197 = v183;
          v198 = v182;
          v199 = WORD2(v181);
          v200 = v181;
          v174 = _So9NSDecimala__isNegative_getter(&v192);
          v71 = v204;
          v192 = v204;
          v193 = v160;
          v194 = v189;
          v24 = v153;
          v195 = v153;
          v196 = v156;
          v72 = v52;
          v197 = v185;
          v198 = v168;
          v23 = v170;
          v199 = v170;
          v27 = v163;
          v200 = v163;
          v73 = v174 != _So9NSDecimala__isNegative_getter(&v192);
          _So9NSDecimala__isNegative_setter(v73, &v201);
          v192 = v72;
          v193 = v67;
          v194 = v16;
          v195 = v179;
          v196 = v184;
          v197 = v183;
          v198 = v182;
          v199 = WORD2(v181);
          v200 = v181;
          v74 = _So9NSDecimala__exponent_getter((char *)&v192);
          v204 = v71;
          v192 = v71;
          v193 = v160;
          v194 = v189;
          v195 = v153;
          v196 = v156;
          v197 = v185;
          v198 = v168;
          v199 = v170;
          v200 = v163;
          v75 = _So9NSDecimala__exponent_getter((char *)&v192) + v74;
          if (*((_QWORD *)v53._rawValue + 2) < 9uLL)
          {
            v80 = v189;
          }
          else
          {
            specialized static NSDecimal._fitMantissa(_:roundingMode:)((uint64_t)v53._rawValue, roundingMode);
            if (v166)
              goto LABEL_180;
            v78 = v76;
            v79 = v77;
            swift_bridgeObjectRelease();
            if (v79 < (uint64_t)0xFFFFFFFF80000000)
              goto LABEL_200;
            v80 = v189;
            if (v79 > 0x7FFFFFFF)
            {
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
LABEL_203:
              __break(1u);
LABEL_204:
              __break(1u);
LABEL_205:
              __break(1u);
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
LABEL_208:
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
              goto LABEL_212;
            }
            v64 = __OFADD__((_DWORD)v75, (_DWORD)v79);
            v75 = (v75 + v79);
            if (v64)
              goto LABEL_202;
            v53._rawValue = v78;
            v24 = v153;
            v23 = v170;
            v27 = v163;
          }
          NSDecimal.copyVariableLengthInteger(_:)(v53);
          v166 = v81;
          if (v81)
            goto LABEL_180;
          v82 = *((_QWORD *)v53._rawValue + 2);
          swift_bridgeObjectRelease();
          if (HIDWORD(v82))
            goto LABEL_215;
          _So9NSDecimala__length_setter(v82, &v201);
          _So9NSDecimala__isCompact_setter_0(0, &v201);
          v42 = v204;
          if ((int)v75 >= 128)
            goto LABEL_137;
          v189 = v80;
          _So9NSDecimala__exponent_setter(v75, &v201);
          NSDecimal.compact()();
          v68 = v201;
          v180 = WORD2(v201);
          v69 = HIWORD(v201);
          v70 = (unsigned __int16)v202;
          v184 = WORD1(v202);
          v183 = WORD2(v202);
          v182 = HIWORD(v202);
          HIDWORD(v181) = (unsigned __int16)v203;
          LODWORD(v181) = HIWORD(v203);
          v26 = v160;
          v41 = v156;
        }
        else
        {
          v68 = 0;
          v180 = 0;
          v181 = 0;
          v69 = 0;
          v70 = 0;
          v183 = 0;
          v184 = 0;
          v182 = 0;
          v26 = v160;
        }
      }
      else
      {
        v68 = 0;
        v180 = 0;
        v181 = 0;
        v69 = 0;
        v70 = 0;
        v183 = 0;
        v184 = 0;
        v182 = 0;
        v23 = v170;
        v42 = v204;
      }
      v175 = v69;
      v178 = v70;
      v172 = v68;
      --v187;
    }
    else
    {
      v41 = v25;
      v175 = v16;
      v178 = v18;
      v172 = v22;
      v42 = v204;
    }
    LODWORD(v201) = v42;
    WORD2(v201) = v26;
    HIWORD(v201) = v189;
    LOWORD(v202) = v24;
    WORD1(v202) = v41;
    WORD2(v202) = v185;
    HIWORD(v202) = v168;
    LOWORD(v203) = v23;
    HIWORD(v203) = v27;
    if (!_So9NSDecimala__length_getter(&v201))
    {
      LODWORD(v201) = v42;
      WORD2(v201) = v26;
      HIWORD(v201) = v189;
      LOWORD(v202) = v24;
      WORD1(v202) = v41;
      WORD2(v202) = v185;
      HIWORD(v202) = v168;
      LOWORD(v203) = v23;
      HIWORD(v203) = v27;
      if (_So9NSDecimala__isNegative_getter(&v201))
        goto LABEL_137;
    }
    LODWORD(v201) = v42;
    WORD2(v201) = v26;
    HIWORD(v201) = v189;
    LOWORD(v202) = v24;
    WORD1(v202) = v41;
    WORD2(v202) = v185;
    HIWORD(v202) = v168;
    LOWORD(v203) = v23;
    HIWORD(v203) = v27;
    if (!_So9NSDecimala__length_getter(&v201))
    {
      LODWORD(v201) = v42;
      WORD2(v201) = v26;
      HIWORD(v201) = v189;
      LOWORD(v202) = v24;
      WORD1(v202) = v41;
      WORD2(v202) = v185;
      HIWORD(v202) = v168;
      LOWORD(v203) = v23;
      HIWORD(v203) = v27;
      if (_So9NSDecimala__isNegative_getter(&v201))
        goto LABEL_137;
    }
    LODWORD(v201) = v42;
    WORD2(v201) = v26;
    HIWORD(v201) = v189;
    LOWORD(v202) = v24;
    WORD1(v202) = v41;
    WORD2(v202) = v185;
    HIWORD(v202) = v168;
    LOWORD(v203) = v23;
    HIWORD(v203) = v27;
    if (!_So9NSDecimala__length_getter(&v201))
      goto LABEL_110;
    LODWORD(v201) = v42;
    WORD2(v201) = v26;
    HIWORD(v201) = v189;
    LOWORD(v202) = v24;
    WORD1(v202) = v41;
    WORD2(v202) = v185;
    HIWORD(v202) = v168;
    LOWORD(v203) = v23;
    HIWORD(v203) = v27;
    if (!_So9NSDecimala__length_getter(&v201))
    {
LABEL_110:
      v204 = 0;
      v26 = 0;
      v189 = 0;
      v24 = 0;
      v25 = 0;
      v185 = 0;
      v21 = 0;
      v23 = 0;
      v27 = 0;
      v22 = v172;
      v16 = v175;
      goto LABEL_124;
    }
    v204 = v42;
    v161 = v26;
    v83 = v42 | (v26 << 32) | (v189 << 48);
    v154 = v24;
    v157 = v41;
    v84 = v24 | (v41 << 16) | (v185 << 32) | (v168 << 48);
    v85 = v27;
    NSDecimal.asVariableLengthInteger()(v83, v84, v23 | (v27 << 16));
    v87 = v86;
    NSDecimal.asVariableLengthInteger()(v83, v84, v23 | (v27 << 16));
    v89 = v88;
    v90 = *(_QWORD *)(v87 + 16);
    v171 = v23;
    if (!v90 || (v91 = *(_QWORD *)(v88 + 16)) == 0)
    {
      v164 = v27;
      v111 = v168;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v151 = MEMORY[0x1E0DEE9D8];
LABEL_112:
      v106 = v161;
      v107 = v154;
      v108 = v189;
      goto LABEL_113;
    }
    if (__OFADD__(v90, v91))
      goto LABEL_192;
    if (v90 + v91 >= 16)
      v92 = 16;
    else
      v92 = v90 + v91;
    if (v92 < 0)
      goto LABEL_214;
    v93 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v93 + 16) = v92;
    v94 = v93 + 32;
    bzero((void *)(v93 + 32), 2 * v92);
    v95 = 0;
    v96 = v89 + 32;
    do
    {
      v97 = 0;
      v98 = 0;
      v99 = v95++;
      do
      {
        v102 = v98 + v99;
        if (__OFADD__(v98, v99))
        {
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
          goto LABEL_193;
        }
        if (v102 >= v92)
        {
          if (v97)
            goto LABEL_131;
          v97 = *(unsigned __int16 *)(v96 + 2 * v99);
          if (*(_WORD *)(v96 + 2 * v99))
          {
            v97 = *(unsigned __int16 *)(v87 + 2 * v98 + 32);
            if (*(_WORD *)(v87 + 2 * v98 + 32))
              goto LABEL_131;
          }
        }
        else
        {
          if (v102 < 0)
            goto LABEL_184;
          if ((unint64_t)v102 >= *(_QWORD *)(v93 + 16))
            goto LABEL_185;
          v100 = 2 * v102;
          v101 = v97
               + *(unsigned __int16 *)(v94 + v100)
               + *(unsigned __int16 *)(v87 + 2 * v98 + 32) * *(unsigned __int16 *)(v96 + 2 * v99);
          v97 = HIWORD(v101);
          *(_WORD *)(v94 + v100) = v101;
        }
        ++v98;
      }
      while (v90 != v98);
      if (!v97)
        continue;
      v64 = __OFADD__(v90, v99);
      v103 = v90 + v99;
      if (v64)
        goto LABEL_196;
      if (v103 >= v92)
      {
LABEL_131:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        swift_allocError();
        *v125 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_180;
      }
      if (v103 < 0)
        goto LABEL_197;
      if ((unint64_t)v103 >= *(_QWORD *)(v93 + 16))
      {
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
        goto LABEL_201;
      }
      *(_WORD *)(v94 + 2 * v103) = v97;
    }
    while (v95 != v91);
    v104 = *(_QWORD *)(v93 + 16);
    v164 = v85;
    v151 = v93;
    if (!v104)
    {
      v111 = v168;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_112;
    }
    v105 = *(unsigned __int16 *)(v94 + 2 * v104 - 2);
    v106 = v161;
    v107 = v154;
    v108 = v189;
    if (!v105)
    {
      v109 = v104 + 14;
      do
      {
        *(_QWORD *)(v93 + 16) = v109 - 15;
        if (v109 == 15)
          break;
      }
      while (!*(unsigned __int16 *)(v93 + 2 * v109--));
    }
    v111 = v168;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_113:
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v112 = v204;
    v192 = v204;
    v193 = v106;
    v194 = v108;
    v195 = v107;
    v196 = v157;
    v197 = v185;
    v198 = v111;
    v199 = v171;
    v200 = v164;
    v190 = _So9NSDecimala__isNegative_getter(&v192);
    v192 = v112;
    v193 = v106;
    v194 = v108;
    v195 = v107;
    v196 = v157;
    v197 = v185;
    v198 = v111;
    v199 = v171;
    v200 = v164;
    v113 = v190 != _So9NSDecimala__isNegative_getter(&v192);
    _So9NSDecimala__isNegative_setter(v113, &v201);
    v192 = v112;
    v193 = v106;
    v194 = v108;
    v195 = v107;
    v196 = v157;
    v197 = v185;
    v198 = v111;
    v199 = v171;
    v200 = v164;
    v191 = _So9NSDecimala__exponent_getter((char *)&v192);
    v192 = v112;
    v193 = v106;
    v194 = v108;
    v195 = v107;
    v196 = v157;
    v197 = v185;
    v198 = v111;
    v199 = v171;
    v200 = v164;
    v114 = _So9NSDecimala__exponent_getter((char *)&v192) + v191;
    v115._rawValue = (void *)v151;
    if (*(_QWORD *)(v151 + 16) >= 9uLL)
      break;
    v120 = v180;
    v22 = v172;
    v16 = v175;
LABEL_120:
    NSDecimal.copyVariableLengthInteger(_:)(v115);
    if (v121)
      goto LABEL_180;
    v122 = *((_QWORD *)v115._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v122))
      goto LABEL_215;
    _So9NSDecimala__length_setter(v122, &v201);
    _So9NSDecimala__isCompact_setter_0(0, &v201);
    if ((int)v114 >= 128)
      goto LABEL_137;
    v166 = 0;
    _So9NSDecimala__exponent_setter(v114, &v201);
    NSDecimal.compact()();
    v204 = v201;
    v26 = WORD2(v201);
    v189 = HIWORD(v201);
    v24 = (unsigned __int16)v202;
    v185 = WORD2(v202);
    v21 = HIWORD(v202);
    v23 = (unsigned __int16)v203;
    v27 = HIWORD(v203);
    v180 = v120;
    v25 = WORD1(v202);
LABEL_124:
    v20 = v187 >> 1;
    v18 = v178;
    if (v187 <= 3)
      goto LABEL_5;
  }
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v151, roundingMode);
  v16 = v175;
  if (!v166)
  {
    v118 = v116;
    v119 = v117;
    swift_bridgeObjectRelease();
    if (v119 >= (uint64_t)0xFFFFFFFF80000000)
    {
      v120 = v180;
      v22 = v172;
      if (v119 <= 0x7FFFFFFF)
      {
        v64 = __OFADD__((_DWORD)v114, (_DWORD)v119);
        v114 = (v114 + v119);
        if (!v64)
        {
          v115._rawValue = v118;
          goto LABEL_120;
        }
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
        goto LABEL_198;
      }
LABEL_194:
      __break(1u);
      goto LABEL_195;
    }
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
LABEL_180:
  swift_bridgeObjectRelease();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal._round(scale:roundingMode:)(NSDecimal *__return_ptr retstr, Swift::Int scale, NSRoundingMode roundingMode)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned __int16 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __int16 v67;
  __int16 v68;
  int v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  int v75;
  unint64_t v76;
  __int16 v77;
  __int16 v78;
  unsigned int v79;
  BOOL v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  NSDecimal *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  Swift::Int v101;
  uint64_t v102;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  __int16 v111;
  __int16 v112;
  __int16 v113;
  __int16 v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  __int16 v120;
  int v121;
  int v122;
  __int16 v123;
  __int16 v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  int v131;
  unsigned int v132;

  v6 = v5;
  v7 = v4;
  v8 = v3;
  v128 = v3;
  v10 = HIWORD(v3);
  v129 = v4;
  v11 = HIWORD(v4);
  v12 = HIWORD(v5);
  v130 = v5;
  v13 = _So9NSDecimala__exponent_getter((char *)&v128);
  v14 = scale + v13;
  if (__OFADD__(scale, v13))
  {
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v15 = (unsigned __int16)v7;
  v16 = WORD1(v7);
  v17 = WORD2(v7);
  v18 = v6;
  if (scale == 0x7FFF || (v14 & 0x8000000000000000) == 0)
    return;
  if (__OFSUB__(0, v14))
    goto LABEL_87;
  v101 = scale + v13;
  v108 = WORD2(v8);
  v109 = v8;
  LODWORD(v128) = v8;
  WORD2(v128) = WORD2(v8);
  HIWORD(v128) = v10;
  LOWORD(v129) = v15;
  WORD1(v129) = v16;
  WORD2(v129) = v17;
  HIWORD(v129) = v11;
  LOWORD(v130) = v6;
  HIWORD(v130) = v12;
  v19 = v15;
  v20 = v16;
  v21 = v18;
  v22 = -v14;
  v23 = _So9NSDecimala__exponent_getter((char *)&v128);
  if (__OFADD__(v23, v22))
    goto LABEL_88;
  v24 = v22;
  v100 = v23;
  v102 = v23 + v22;
  LOWORD(v129) = v19;
  WORD1(v129) = v20;
  WORD2(v129) = v17;
  HIWORD(v129) = v11;
  LOWORD(v130) = v21;
  HIWORD(v130) = v12;
  v25 = v19;
  v26 = v21;
  v104 = v19;
  v105 = v10;
  v106 = v12;
  v103 = v21;
  if (v22 < 5)
  {
    v27 = 0;
    v28 = 0;
    v31 = WORD2(v8);
    v32 = v109;
    v30 = v10;
    v8 = v25;
    v29 = v20;
    v53 = v17;
    v52 = v11;
    v34 = v26;
    v39 = v12;
    while (1)
    {
LABEL_26:
      v118 = v24;
      v120 = v31;
      if (v28)
        v27 = 1;
      v131 = v27;
      v122 = v32;
      v124 = v30;
      v112 = v29;
      v113 = v8;
      LOWORD(v115) = v53;
      LOWORD(v116) = v52;
      v114 = v34;
      v132 = v39;
      NSDecimal.asVariableLengthInteger()(v32 | (v31 << 32) | (v30 << 48), v8 | (v29 << 16) | (v53 << 32) | (v52 << 48), v34 | (v39 << 16));
      v55 = v54;
      v56 = *(_QWORD *)(v54 + 16);
      if (v56)
        break;
      LOWORD(v60) = 0;
      v57 = MEMORY[0x1E0DEE9D8];
      v62 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v62)
        goto LABEL_36;
LABEL_39:
      swift_bridgeObjectRelease();
      LODWORD(v125) = v122;
      WORD2(v125) = v120;
      HIWORD(v125) = v124;
      LOWORD(v126) = v113;
      WORD1(v126) = v112;
      WORD2(v126) = v115;
      HIWORD(v126) = v116;
      LOWORD(v127) = v114;
      HIWORD(v127) = v132;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v57);
      if (v64)
        goto LABEL_49;
      v65 = *(_QWORD *)(v57 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v65))
        goto LABEL_92;
      _So9NSDecimala__length_setter(v65, &v125);
      v32 = v125;
      v31 = WORD2(v125);
      v30 = HIWORD(v125);
      v8 = (unsigned __int16)v126;
      v29 = WORD1(v126);
      v53 = WORD2(v126);
      v52 = HIWORD(v126);
      v34 = (unsigned __int16)v127;
      v39 = HIWORD(v127);
      v128 = v125;
      v129 = v126;
      v130 = v127;
      v24 = v118 - 1;
      if (__OFSUB__(v118, 1))
        goto LABEL_89;
      v28 = (unsigned __int16)v60;
      v27 = v131;
      if (v118 == 1)
      {
        v132 = HIWORD(v127);
        v115 = WORD2(v126);
        LOWORD(v116) = HIWORD(v126);
        v114 = v127;
        v66 = WORD1(v126);
        if (!(_WORD)v131)
        {
          v68 = v104;
          v67 = v105;
          v70 = v108;
          v69 = v109;
          v72 = v17;
          v71 = v20;
          v73 = v103;
          if (v28)
            goto LABEL_52;
          goto LABEL_77;
        }
        v68 = v104;
        v67 = v105;
        v70 = v108;
        v69 = v109;
        v72 = v17;
        v71 = v20;
        v73 = v103;
        if (v28 == 5 || !v28)
          ++v28;
LABEL_52:
        v74 = WORD2(v125);
        v75 = v125;
        LOWORD(v76) = HIWORD(v125);
        LODWORD(v125) = v69;
        WORD2(v125) = v70;
        HIWORD(v125) = v67;
        LOWORD(v126) = v68;
        WORD1(v126) = v71;
        WORD2(v126) = v72;
        HIWORD(v126) = v11;
        LOWORD(v127) = v73;
        HIWORD(v127) = v12;
        if (_So9NSDecimala__isNegative_getter(&v125))
        {
          v77 = v66;
          v78 = v114;
          LOWORD(v79) = v132;
          if (roundingMode)
          {
            if (roundingMode != NSRoundDown)
            {
              if (roundingMode != NSRoundBankers)
                goto LABEL_72;
              v80 = v28 == 5;
              if ((v74 & 1) != 0)
                v80 = 0;
              if (v28 < 5 || v80)
                goto LABEL_72;
            }
          }
          else if (v28 < 5)
          {
            goto LABEL_72;
          }
          NSDecimal._add(_:)((NSDecimal *)(v8 | (v66 << 16) | (v115 << 32)), 1u);
          if (v86)
            return;
          v128 = v83;
          v76 = HIWORD(v83);
          v79 = HIWORD(v85);
          v78 = v85;
          LOWORD(v8) = v84;
          v75 = v83;
          v129 = v84;
          LOWORD(v115) = WORD2(v84);
          v116 = HIWORD(v84);
          v77 = WORD1(v84);
          v130 = v85;
          v74 = WORD2(v83);
LABEL_72:
          LODWORD(v125) = v75;
          WORD2(v125) = v74;
          HIWORD(v125) = v76;
          LOWORD(v126) = v8;
          WORD1(v126) = v77;
          WORD2(v126) = v115;
          HIWORD(v126) = v116;
          LOWORD(v127) = v78;
          HIWORD(v127) = v79;
          v87 = _So9NSDecimala__length_getter(&v125);
          v88 = v102;
          if (!(_DWORD)v87)
            _So9NSDecimala__isNegative_setter(v87, &v128);
LABEL_78:
          _So9NSDecimala__isCompact_setter_0(0, &v128);
          if (v88 >= 128)
          {
            v93 = (NSDecimal *)HIWORD(v128);
            v94 = v100 - v101 + 1;
            v88 = 127;
            while (1)
            {
              NSDecimal._multiply(byShort:)(v93, 0xAu);
              if (v98)
                return;
              v128 = v95;
              v93 = (NSDecimal *)HIWORD(v95);
              v129 = v96;
              v130 = v97;
              if (--v94 <= 128)
                goto LABEL_84;
            }
          }
          if (v88 >= (uint64_t)0xFFFFFFFF80000000)
          {
LABEL_84:
            _So9NSDecimala__exponent_setter(v88, &v128);
            NSDecimal.compact()();
            return;
          }
LABEL_90:
          __break(1u);
LABEL_91:
          LOWORD(v129) = v113;
          WORD1(v129) = v112;
          WORD2(v129) = v115;
          HIWORD(v129) = v116;
          LOWORD(v130) = v114;
          HIWORD(v130) = v132;
LABEL_92:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        if (roundingMode)
        {
          v81 = v115;
          if (roundingMode != NSRoundUp)
          {
            if (roundingMode != NSRoundBankers)
              goto LABEL_77;
            v82 = v28 == 5;
            if ((v74 & 1) != 0)
              v82 = 0;
            if (v28 < 5 || v82)
              goto LABEL_77;
          }
        }
        else
        {
          v81 = v115;
          if (v28 < 5)
          {
LABEL_77:
            v88 = v102;
            goto LABEL_78;
          }
        }
        NSDecimal._add(_:)((NSDecimal *)(v8 | (v66 << 16) | (v81 << 32)), 1u);
        if (v92)
          return;
        v128 = v89;
        v129 = v90;
        v130 = v91;
        goto LABEL_77;
      }
    }
    v57 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v57 + 16) = v56;
    bzero((void *)(v57 + 32), 2 * v56);
    v58 = *(unsigned __int16 *)(2 * v56 + v55 + 30);
    v59 = v58 / 0xA;
    while (1)
    {
      *(_WORD *)(v57 + 30 + 2 * v56) = v59;
      v60 = v58 % 0xA;
      if (v56 == 1)
        break;
      v58 = *(unsigned __int16 *)(v55 + 28 + 2 * v56) | (v60 << 16);
      v59 = v58 / 0xA;
      v61 = v56 - 2;
      --v56;
      if (v61 >= *(_QWORD *)(v57 + 16))
      {
        __break(1u);
        goto LABEL_47;
      }
    }
    LOWORD(v12) = v106;
    v62 = *(_QWORD *)(v57 + 16);
    if (!v62)
      goto LABEL_39;
LABEL_36:
    if (!*(_WORD *)(v57 + 2 * v62 + 30))
    {
      do
      {
        *(_QWORD *)(v57 + 16) = v62 - 1;
        if (v62 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v62--));
    }
    goto LABEL_39;
  }
  v27 = 0;
  v28 = 0;
  LOWORD(v8) = v129;
  LOWORD(v29) = WORD1(v129);
  LOWORD(v115) = WORD2(v129);
  v30 = v10;
  v31 = WORD2(v8);
  LOWORD(v116) = HIWORD(v129);
  v32 = v109;
  v33 = v25;
  LOWORD(v34) = v130;
  v35 = v17;
  v99 = v11;
  v36 = v11;
  v37 = v20;
  v38 = v26;
  v39 = v12;
  while (1)
  {
    v117 = v24;
    v114 = v34;
    v112 = v29;
    v113 = v8;
    if (v28)
      v27 = 1;
    v131 = v27;
    v119 = v31;
    v121 = v32;
    v123 = v30;
    v110 = v36;
    v111 = v35;
    v132 = v39;
    NSDecimal.asVariableLengthInteger()(v32 | (v31 << 32) | (v30 << 48), v33 | (v37 << 16) | (v35 << 32) | (v36 << 48), v38 | (v39 << 16));
    v41 = v40;
    v42 = *(_QWORD *)(v40 + 16);
    if (v42)
    {
      v43 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v43 + 16) = v42;
      bzero((void *)(v43 + 32), 2 * v42);
      v44 = *(unsigned __int16 *)(2 * v42 + v41 + 30);
      v45 = (839 * (v44 >> 4)) >> 19;
      while (1)
      {
        *(_WORD *)(v43 + 30 + 2 * v42) = v45;
        v46 = v44 % 0x2710;
        if (v42 == 1)
          break;
        v44 = *(unsigned __int16 *)(v41 + 28 + 2 * v42) | (v46 << 16);
        v45 = v44 / 0x2710;
        v47 = v42 - 2;
        --v42;
        if (v47 >= *(_QWORD *)(v43 + 16))
        {
LABEL_47:
          LOWORD(v129) = v113;
          WORD1(v129) = v112;
          WORD2(v129) = v115;
          HIWORD(v129) = v116;
          LOWORD(v130) = v114;
          HIWORD(v130) = v132;
          __break(1u);
          goto LABEL_48;
        }
      }
      v48 = *(_QWORD *)(v43 + 16);
      if (!v48)
        goto LABEL_21;
    }
    else
    {
      LOWORD(v46) = 0;
      v43 = MEMORY[0x1E0DEE9D8];
      v48 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v48)
        goto LABEL_21;
    }
    if (!*(_WORD *)(v43 + 2 * v48 + 30))
    {
      do
      {
        *(_QWORD *)(v43 + 16) = v48 - 1;
        if (v48 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v43 + 28 + 2 * v48--));
    }
LABEL_21:
    swift_bridgeObjectRelease();
    LODWORD(v125) = v121;
    WORD2(v125) = v119;
    HIWORD(v125) = v123;
    LOWORD(v126) = v33;
    WORD1(v126) = v37;
    WORD2(v126) = v111;
    HIWORD(v126) = v110;
    LOWORD(v127) = v38;
    HIWORD(v127) = v132;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v43);
    if (v50)
      break;
    v51 = *(_QWORD *)(v43 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v51))
      goto LABEL_91;
    _So9NSDecimala__length_setter(v51, &v125);
    v32 = v125;
    v31 = WORD2(v125);
    v30 = HIWORD(v125);
    v8 = (unsigned __int16)v126;
    v29 = WORD1(v126);
    v34 = (unsigned __int16)v127;
    v28 = (unsigned __int16)v46;
    v33 = (unsigned __int16)v126;
    v37 = WORD1(v126);
    LOWORD(v115) = WORD2(v126);
    LOWORD(v116) = HIWORD(v126);
    v35 = WORD2(v126);
    v39 = HIWORD(v127);
    v36 = HIWORD(v126);
    v38 = (unsigned __int16)v127;
    v24 = v117 - 4;
    v27 = v131;
    if (v117 <= 8)
    {
      v129 = v126;
      v53 = WORD2(v126);
      v52 = HIWORD(v126);
      v130 = v127;
      v128 = v125;
      v24 = v117 - 4;
      LOWORD(v11) = v99;
      LOWORD(v12) = v106;
      goto LABEL_26;
    }
  }
LABEL_48:
  LOWORD(v129) = v113;
  WORD1(v129) = v112;
  WORD2(v129) = v115;
  HIWORD(v129) = v116;
  LOWORD(v130) = v114;
  HIWORD(v130) = v132;
LABEL_49:
  swift_bridgeObjectRelease();
}

uint64_t NSDecimal.doubleValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3;
  unsigned __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  double v14;
  unsigned int v15;
  unsigned __int16 v16;
  double i;
  int v18;
  int v19;
  int v20;
  Swift::String v22;
  Swift::String v23;
  _QWORD v24[2];
  unsigned int v25;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v24[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v24[1] = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v25 = a3;
  if (!_So9NSDecimala__length_getter(v24))
    goto LABEL_4;
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  v12 = _So9NSDecimala__length_getter(v24);
  if (v12 <= 8)
  {
    if (!v12)
      goto LABEL_32;
  }
  else
  {
    v12 = 8;
  }
  v14 = 0.0;
  v15 = v12 - 1;
  if (v12 != 1)
  {
    while (2)
    {
      v16 = v7;
      switch(v15)
      {
        case 1u:
          goto LABEL_9;
        case 2u:
          v16 = v4;
          goto LABEL_9;
        case 3u:
          v16 = v8;
          goto LABEL_9;
        case 4u:
          v16 = v9;
          goto LABEL_9;
        case 5u:
          v16 = v10;
          goto LABEL_9;
        case 6u:
          v16 = v3;
          goto LABEL_9;
        case 7u:
          v16 = v11;
LABEL_9:
          v14 = v14 * 65536.0 + (double)v16;
          if (--v15)
            continue;
          v14 = v14 * 65536.0;
          break;
        default:
          goto LABEL_34;
      }
      break;
    }
  }
  for (i = v14 + (double)(unsigned __int16)v6; ; i = 0.0)
  {
    LODWORD(v24[0]) = v5;
    WORD2(v24[0]) = v6;
    HIWORD(v24[0]) = v7;
    LOWORD(v24[1]) = v4;
    WORD1(v24[1]) = v8;
    WORD2(v24[1]) = v9;
    HIWORD(v24[1]) = v10;
    LOWORD(v25) = v3;
    HIWORD(v25) = v11;
    if ((_So9NSDecimala__exponent_getter((char *)v24) & 0x80000000) == 0)
      break;
    LODWORD(v24[0]) = v5;
    WORD2(v24[0]) = v6;
    HIWORD(v24[0]) = v7;
    LOWORD(v24[1]) = v4;
    WORD1(v24[1]) = v8;
    WORD2(v24[1]) = v9;
    HIWORD(v24[1]) = v10;
    LOWORD(v25) = v3;
    HIWORD(v25) = v11;
    v19 = _So9NSDecimala__exponent_getter((char *)v24);
    if (v19 > 0)
    {
      __break(1u);
LABEL_34:
      v24[0] = 0;
      v24[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v24, "Invalid index ");
      HIBYTE(v24[1]) = -18;
      v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 0x616D5F20726F6620;
      v23._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v23);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181A5E374);
    }
    if (!v19)
      goto LABEL_4;
    v20 = v19;
    while (v20 >= v19)
    {
      i = i / 10.0;
      if (__CFADD__(v20++, 1))
        goto LABEL_4;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    ;
  }
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  v18 = _So9NSDecimala__exponent_getter((char *)v24);
  if (v18 < 0)
    goto LABEL_31;
  for (; v18; --v18)
    i = i * 10.0;
LABEL_4:
  LODWORD(v24[0]) = v5;
  WORD2(v24[0]) = v6;
  HIWORD(v24[0]) = v7;
  LOWORD(v24[1]) = v4;
  WORD1(v24[1]) = v8;
  WORD2(v24[1]) = v9;
  HIWORD(v24[1]) = v10;
  LOWORD(v25) = v3;
  HIWORD(v25) = v11;
  return _So9NSDecimala__isNegative_getter(v24);
}

uint64_t specialized static NSDecimal._integerCompare(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 < v2)
    return 1;
  if (v2 >= v3)
  {
    if (v2)
    {
      v5 = 2 * v2 - 2;
      v6 = *(unsigned __int16 *)(a1 + v5 + 32);
      v7 = *(unsigned __int16 *)(a2 + v5 + 32);
      if (v7 < v6)
        return 1;
      if (v6 < v7)
        return -1;
      v8 = v2 - 2;
      v9 = a1 + 28;
      result = 1;
      while (v2 != 1)
      {
        if (v8 >= (uint64_t)v3)
        {
          __break(1u);
          return result;
        }
        v10 = *(unsigned __int16 *)(v9 + 2 * v2);
        v11 = *(unsigned __int16 *)(a2 + 28 + 2 * v2);
        if (v11 < v10)
          return result;
        --v2;
        if (v10 < v11)
          return -1;
      }
    }
    return 0;
  }
  return -1;
}

uint64_t specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unint64_t v19;
  _WORD *v20;
  unsigned __int16 *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  _WORD *v28;
  unsigned __int16 *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  char *v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;

  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  v8 = a2;
  if (specialized static NSDecimal._integerCompare(lhs:rhs:)(a1, a2) == -1)
    return MEMORY[0x1E0DEE9D8];
  if (v5 != 1)
  {
    v11 = v8 + 32;
    if (((*(unsigned __int16 *)(v8 + 32 + 2 * v5 - 2) + 1) & 0x10000) == 0)
    {
      v15 = *(_QWORD *)(a1 + 16);
      LODWORD(v16) = 0x10000u / (unsigned __int16)(*(_WORD *)(v8 + 32 + 2 * v5 - 2) + 1);
      if (!v15)
      {
        v6 = MEMORY[0x1E0DEE9D8];
        goto LABEL_23;
      }
      v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v6 + 16) = v15;
      bzero((void *)(v6 + 32), 2 * v15);
      v17 = (char *)v6;
      v18 = v16 * *(unsigned __int16 *)(a1 + 32);
      LODWORD(v4) = HIWORD(v18);
      *(_WORD *)(v6 + 32) = v16 * *(_WORD *)(a1 + 32);
      v19 = v15 - 1;
      if (v15 != 1)
      {
        v20 = (_WORD *)(v6 + 34);
        v21 = (unsigned __int16 *)(a1 + 34);
        do
        {
          v22 = *v21++;
          v18 = v4 + v16 * v22;
          LODWORD(v4) = HIWORD(v18);
          *v20++ = v18;
          --v19;
        }
        while (v19);
      }
      if (v18 < 0x10000)
        goto LABEL_23;
      v23 = *(_QWORD *)(v6 + 24);
      v24 = v15 + 1;
      if (v15 < v23 >> 1)
        goto LABEL_22;
      goto LABEL_145;
    }
    while (1)
    {
      __break(1u);
LABEL_136:
      v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
      while (1)
      {
        v24 = *(_QWORD *)(v11 + 16);
        v36 = *(_QWORD *)(v11 + 24);
        v5 = v24 + 1;
        if (v24 >= v36 >> 1)
        {
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v24 + 1, 1, (char *)v11);
          v37 = (char *)v6;
          v11 = (unint64_t)v77;
        }
        else
        {
          v37 = (char *)v6;
        }
        *(_QWORD *)(v11 + 16) = v5;
        v15 = v11 + 32;
        *(_WORD *)(v11 + 32 + 2 * v24) = 0;
        v32 = v8 - 1;
        if (v8 - 1 > v24)
        {
          __break(1u);
          goto LABEL_139;
        }
        v16 = *((_QWORD *)v37 + 2);
        v85 = *(unsigned __int16 *)(v15 + 2 * v32);
        v23 = v8 - 2;
        if (v8 >= 2)
        {
          if (v23 > v24)
          {
            __break(1u);
            goto LABEL_144;
          }
          if ((a3 & 0x8000000000000000) != 0)
            goto LABEL_146;
          v80 = *(unsigned __int16 *)(v15 + 2 * v23);
          if (a3)
            goto LABEL_48;
LABEL_44:
          v5 = MEMORY[0x1E0DEE9D8];
          v38 = v16 - v8;
          if (((v16 - v8) & 0x8000000000000000) == 0)
            goto LABEL_49;
          goto LABEL_45;
        }
        while (1)
        {
          if ((a3 & 0x8000000000000000) != 0)
          {
LABEL_146:
            result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          v80 = 0;
          if (!a3)
            goto LABEL_44;
LABEL_48:
          v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(_QWORD *)(v5 + 16) = a3;
          bzero((void *)(v5 + 32), 2 * a3);
          v37 = (char *)v6;
          v38 = v16 - v8;
          if (((v16 - v8) & 0x8000000000000000) == 0)
            break;
LABEL_45:
          __break(1u);
        }
LABEL_49:
        if (v16 == v8)
        {
LABEL_50:
          v39 = *(_QWORD *)(v5 + 16);
          if (v39 && !*(_WORD *)(v5 + 2 * v39 + 30))
          {
            v40 = v39 + 14;
            do
            {
              *(_QWORD *)(v5 + 16) = v40 - 15;
              if (v40 == 15)
                break;
            }
            while (!*(unsigned __int16 *)(v5 + 2 * v40--));
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v5;
        }
        v23 = v85;
        if (v85)
          break;
LABEL_144:
        __break(1u);
LABEL_145:
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24, 1, v17);
LABEL_22:
        *((_QWORD *)v17 + 2) = v24;
        v6 = (uint64_t)v17;
        *(_WORD *)&v17[2 * v15 + 32] = v4;
LABEL_23:
        v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v24 + 16) = v5;
        bzero((void *)(v24 + 32), 2 * v5);
        v25 = *(unsigned __int16 *)v11;
        v11 = v24;
        v26 = v16 * v25;
        LODWORD(v24) = HIWORD(v26);
        *(_WORD *)(v11 + 32) = v26;
        v27 = v5 - 1;
        if (v5 != 1)
        {
          v28 = (_WORD *)(v11 + 34);
          v29 = (unsigned __int16 *)(v8 + 34);
          do
          {
            v30 = *v29++;
            v26 = v24 + v16 * v30;
            LODWORD(v24) = HIWORD(v26);
            *v28++ = v26;
            --v27;
          }
          while (v27);
        }
        v31 = v6;
        if (v26 >= 0x10000)
        {
          v32 = *(_QWORD *)(v11 + 24);
          v8 = v5 + 1;
          if (v5 >= v32 >> 1)
            goto LABEL_142;
          goto LABEL_29;
        }
        v8 = v5;
LABEL_30:
        v4 = *(_QWORD *)(v31 + 16);
        swift_bridgeObjectRetain();
        if (v4 == v15)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, (char *)v6);
          v33 = (char *)v6;
          v35 = *(_QWORD *)(v6 + 16);
          v34 = *(_QWORD *)(v6 + 24);
          v4 = v35 + 1;
          if (v35 >= v34 >> 1)
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v6);
          *((_QWORD *)v33 + 2) = v4;
          v6 = (uint64_t)v33;
          *(_WORD *)&v33[2 * v35 + 32] = 0;
          v8 = *(_QWORD *)(v11 + 16);
        }
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_136;
      }
      v6 = 0;
      v89 = v4 - v8;
      v79 = v5 + 32;
      v87 = v4 + ~v8;
      v86 = v8 + 1;
      v78 = v8;
      v81 = v4;
      v82 = v5;
      v83 = v38;
LABEL_58:
      if (v6 == v38)
        goto LABEL_126;
      v32 = v4 - v6;
      if (v4 == v6)
        goto LABEL_127;
      v42 = v4 - v6 - 1;
      v43 = *((_QWORD *)v37 + 2);
      if (v42 >= v43)
        goto LABEL_128;
      if (v32 - 2 >= v43)
        goto LABEL_129;
      v44 = v37 + 32;
      v45 = *(unsigned __int16 *)&v37[2 * v32 + 28] | (*(unsigned __int16 *)&v37[2 * v42 + 32] << 16);
      v46 = v45 / v85;
      v47 = v45 % v85;
      v88 = v46;
      if (v46 != 0x10000)
      {
        v48 = v80 * (unint64_t)v46;
        if ((v48 & 0xFFFFFFFF00000000) != 0)
          goto LABEL_132;
        if (v32 - 3 >= v43)
          goto LABEL_133;
        if ((*(unsigned __int16 *)&v44[2 * v32 - 6] | (v47 << 16)) >= v48)
          goto LABEL_73;
      }
      v88 = v46 - 1;
      if (!v46)
        goto LABEL_131;
      v49 = v47 + v85;
      if (!HIWORD(v49))
      {
        if (v46 != 65537)
        {
          v50 = v80 * (unint64_t)v88;
          if ((v50 & 0xFFFFFFFF00000000) == 0)
          {
            v32 -= 3;
            if (v32 < v43)
            {
              if ((*(unsigned __int16 *)&v44[2 * v32] | (v49 << 16)) >= v50)
                goto LABEL_73;
              goto LABEL_72;
            }
LABEL_141:
            __break(1u);
LABEL_142:
            v31 = v6;
            v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v8, 1, (char *)v11);
LABEL_29:
            *(_QWORD *)(v11 + 16) = v8;
            *(_WORD *)(v11 + 2 * v5 + 32) = v24;
            goto LABEL_30;
          }
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
LABEL_72:
        v32 = v46 - 2;
        v88 = v46 - 2;
        if (v46 != 1)
          goto LABEL_73;
LABEL_139:
        __break(1u);
        goto LABEL_140;
      }
LABEL_73:
      v51 = 0;
      v24 = 0;
      v84 = v6 + 1;
      v4 = 1;
      while (v24 < *(_QWORD *)(v11 + 16))
      {
        v52 = *(unsigned __int16 *)(v15 + 2 * v24) * (unint64_t)v88;
        if ((v52 & 0xFFFFFFFF00000000) != 0)
          goto LABEL_113;
        a3 = v15;
        v53 = v52 + v51;
        if (__CFADD__((_DWORD)v52, v51))
          goto LABEL_114;
        v54 = v89 + v24;
        if (__OFADD__(v89, v24))
          goto LABEL_115;
        v55 = __OFSUB__(v54, v6);
        v56 = v54 - v6;
        if (v55)
          goto LABEL_116;
        v8 = v11;
        v11 = v56 - 1;
        if (__OFSUB__(v56, 1))
          goto LABEL_117;
        if ((v87 & 0x8000000000000000) != 0)
          goto LABEL_118;
        if (v11 >= *((_QWORD *)v37 + 2))
          goto LABEL_119;
        v57 = *(unsigned __int16 *)&v37[2 * v11 + 32];
        v58 = (uint64_t)v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v37 = (char *)v58;
        else
          v37 = specialized _ArrayBuffer._consumeAndCreateNew()(v58);
        ++v24;
        v51 = HIWORD(v53);
        v59 = v4 - (unsigned __int16)v53 + v57 + 0xFFFF;
        v4 = HIWORD(v59);
        v60 = v37 + 32;
        *(_WORD *)&v37[2 * v11 + 32] = v59;
        v11 = v8;
        v15 = a3;
        if (v86 == v24)
        {
          if (!(_DWORD)v4)
          {
            v61 = v88-- != 0;
            v5 = v82;
            v38 = v83;
            if (!v61)
              goto LABEL_134;
            v62 = 0;
            v63 = 0;
            v64 = *(_QWORD *)(v8 + 16);
            v8 = v78;
            v4 = v81;
            while (v64 != v63)
            {
              v65 = v89 + v63;
              if (__OFADD__(v89, v63))
                goto LABEL_121;
              v55 = __OFSUB__(v65, v6);
              v66 = v65 - v6;
              if (v55)
                goto LABEL_122;
              v55 = __OFSUB__(v66, 1);
              v67 = v66 - 1;
              if (v55)
                goto LABEL_123;
              if ((v67 & 0x8000000000000000) != 0)
                goto LABEL_124;
              if (v67 >= *((_QWORD *)v37 + 2))
                goto LABEL_125;
              v68 = *(unsigned __int16 *)(a3 + 2 * v63);
              v69 = v63 + 1;
              v70 = 2 * v67;
              v71 = v62 + v68 + *(unsigned __int16 *)&v60[2 * v67];
              v62 = HIWORD(v71);
              *(_WORD *)&v60[v70] = v71;
              v63 = v69;
              if (v78 == v69)
                goto LABEL_100;
            }
            goto LABEL_120;
          }
          v4 = v81;
          v5 = v82;
          v38 = v83;
LABEL_100:
          if (v88 >= 0x10000)
            goto LABEL_10;
          v72 = v38 + ~v6;
          if (v72 >= *(_QWORD *)(v5 + 16))
            goto LABEL_130;
          *(_WORD *)(v79 + 2 * v72) = v88;
          --v87;
          ++v6;
          if (v84 != v38)
            goto LABEL_58;
          goto LABEL_50;
        }
      }
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
    }
  }
  v10 = *(unsigned __int16 *)(v8 + 32);
  if (!*(_WORD *)(v8 + 32))
  {
LABEL_11:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v14 = 2;
    swift_willThrow();
    return v5;
  }
  a3 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v11 = v5 + 30;
    *(_QWORD *)(v5 + 16) = v6;
    v8 = 2 * v6;
    bzero((void *)(v5 + 32), 2 * v6);
    v12 = *(unsigned __int16 *)(2 * v6 + a1 + 30);
    v13 = v12 / v10;
    while (1)
    {
      if ((unint64_t)(v6 - 1) >= *(_QWORD *)(v5 + 16))
      {
        __break(1u);
        goto LABEL_112;
      }
      *(_WORD *)(v11 + 2 * v6) = v13;
      if (v6 == 1)
        break;
      v12 = *(unsigned __int16 *)(a1 + 28 + 2 * v6) | ((v12 % v10) << 16);
      v13 = v12 / v10;
      --v6;
      if ((v12 / v10) >> 16)
      {
LABEL_10:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  v73 = *(_QWORD *)(v5 + 16);
  if (v73 && !*(_WORD *)(v5 + 2 * v73 + 30))
  {
    v74 = v73 + 14;
    do
    {
      *(_QWORD *)(v5 + 16) = v74 - 15;
      if (v74 == 15)
        break;
    }
    while (!*(unsigned __int16 *)(v5 + 2 * v74--));
  }
  return v5;
}

uint64_t specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  if (!__OFADD__(v3, v5))
  {
    if (v3 + v5 >= a3)
      v6 = a3;
    else
      v6 = v3 + v5;
    if (v6 < 0)
      goto LABEL_51;
    if (v6)
    {
      v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v8 + 16) = v6;
      bzero((void *)(v8 + 32), 2 * v6);
    }
    else
    {
      v8 = MEMORY[0x1E0DEE9D8];
    }
    v9 = 0;
    v10 = a2 + 32;
    v11 = a1 + 32;
    v12 = v8 + 32;
    while (2)
    {
      if (v9 != v5)
      {
        v13 = 0;
        v14 = 0;
        v15 = v9 + 1;
        do
        {
          if (v3 == v14)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          v18 = v14 + v9;
          if (__OFADD__(v14, v9))
            goto LABEL_43;
          if ((uint64_t)v18 >= v6)
          {
            if (v13)
              goto LABEL_40;
            v13 = *(unsigned __int16 *)(v10 + 2 * v9);
            if (*(_WORD *)(v10 + 2 * v9))
            {
              v13 = *(unsigned __int16 *)(v11 + 2 * v14);
              if (*(_WORD *)(v11 + 2 * v14))
                goto LABEL_40;
            }
          }
          else
          {
            if ((v18 & 0x8000000000000000) != 0)
              goto LABEL_44;
            if (v18 >= *(_QWORD *)(v8 + 16))
              goto LABEL_45;
            v16 = 2 * v18;
            v17 = v13
                + *(unsigned __int16 *)(v12 + v16)
                + *(unsigned __int16 *)(v11 + 2 * v14) * *(unsigned __int16 *)(v10 + 2 * v9);
            v13 = HIWORD(v17);
            *(_WORD *)(v12 + v16) = v17;
          }
          ++v14;
        }
        while (v3 != v14);
        if (!v13)
          goto LABEL_33;
        v19 = __OFADD__(v3, v9);
        v20 = v3 + v9;
        if (v19)
          goto LABEL_48;
        if ((uint64_t)v20 >= v6)
        {
LABEL_40:
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          swift_allocError();
          *v24 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          return v8;
        }
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_49;
        if (v20 < *(_QWORD *)(v8 + 16))
        {
          *(_WORD *)(v12 + 2 * v20) = v13;
LABEL_33:
          v9 = v15;
          if (v15 != v5)
            continue;
          v21 = *(_QWORD *)(v8 + 16);
          if (v21 && !*(_WORD *)(v12 + 2 * v21 - 2))
          {
            v22 = v21 + 14;
            do
            {
              *(_QWORD *)(v8 + 16) = v22 - 15;
              if (v22 == 15)
                break;
            }
            while (!*(unsigned __int16 *)(v8 + 2 * v22--));
          }
          return v8;
        }
        goto LABEL_50;
      }
      break;
    }
LABEL_46:
    __break(1u);
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static NSDecimal._normalize(a:b:roundingMode:)(int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  _QWORD *rawValue;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  Swift::OpaquePointer v47;
  _DWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v165;
  uint64_t result;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD *v179;
  unsigned int v180;
  __int128 v181;
  uint64_t v182;

  v3 = v2;
  v6 = *a1;
  v180 = *a1;
  v181 = *(_OWORD *)(a1 + 1);
  v7 = _So9NSDecimala__exponent_getter((char *)&v180);
  v8 = *(_DWORD *)a2;
  v180 = *(_DWORD *)a2;
  v181 = *(_OWORD *)(a2 + 4);
  v9 = _So9NSDecimala__exponent_getter((char *)&v180);
  v10 = v7 - v9;
  if (v7 == v9)
    return v10 & 1;
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = (v9 - v7);
  if (v10 >= 0)
    v13 = a2;
  else
    v13 = (uint64_t)a1;
  v182 = v13;
  if (v11)
    v14 = v8;
  else
    v14 = v6;
  if (!v11)
    a2 = (uint64_t)a1;
  v15 = v14 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 6) << 48);
  v16 = *(_QWORD *)(a2 + 8);
  LODWORD(v174) = *(_DWORD *)(a2 + 16);
  NSDecimal.asVariableLengthInteger()(v15, v16, v174);
  v18 = v17;
  v19 = specialized abs<A>(_:)(v12);
  v20 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v20 != -1)
    goto LABEL_322;
LABEL_14:
  v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
  rawValue = powerOfTen._rawValue;
  v23 = *((_QWORD *)powerOfTen._rawValue + 2);
  v176 = v15;
  v179 = (_DWORD *)a2;
  v171 = v12;
  v175 = v16;
  if (v23 > v19)
  {
    v16 = v18;
    if ((v19 & 0x8000000000000000) == 0)
      goto LABEL_16;
LABEL_256:
    __break(1u);
LABEL_304:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v165 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_305;
  }
  if (!v23)
    goto LABEL_332;
  a2 = v23 - 1;
  v16 = v18;
  do
  {
    v28 = __OFSUB__(v19, a2);
    v19 -= a2;
    if (v28)
    {
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      swift_once();
      goto LABEL_14;
    }
    v29 = v21[499];
    if ((unint64_t)v23 > *(_QWORD *)(v29 + 16))
      goto LABEL_321;
    v12 = *(_QWORD *)(v16 + 16);
    if (!v12 || (v15 = *(_QWORD *)(v29 + 8 * a2 + 32), (v21 = *(unint64_t **)(v15 + 16)) == 0))
    {
      swift_bridgeObjectRelease();
      v16 = MEMORY[0x1E0DEE9D8];
      v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
      continue;
    }
    if (__OFADD__(v12, v21))
      goto LABEL_333;
    v167 = a2;
    v168 = v3;
    v170 = v18;
    if ((uint64_t)v21 + v12 >= 8)
      v25 = 8;
    else
      v25 = (uint64_t)v21 + v12;
    if (v25 < 0)
      goto LABEL_378;
    swift_bridgeObjectRetain();
    v30 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v30 + 16) = v25;
    v31 = v30 + 32;
    bzero((void *)(v30 + 32), 2 * v25);
    v32 = 0;
    v33 = v15 + 32;
    do
    {
      v34 = 0;
      v35 = 0;
      v36 = v32;
      v32 = (unint64_t *)((char *)v32 + 1);
      do
      {
        v39 = (uint64_t)v36 + v35;
        if (__OFADD__(v35, v36))
        {
          __break(1u);
          swift_bridgeObjectRelease();
LABEL_305:
          swift_bridgeObjectRelease();
LABEL_306:
          swift_bridgeObjectRelease();
          return v10 & 1;
        }
        if (v39 >= v25)
        {
          if (v34)
            goto LABEL_67;
          v34 = *(unsigned __int16 *)(v33 + 2 * (_QWORD)v36);
          if (*(_WORD *)(v33 + 2 * (_QWORD)v36))
          {
            v34 = *(unsigned __int16 *)(v16 + 2 * v35 + 32);
            if (*(_WORD *)(v16 + 2 * v35 + 32))
              goto LABEL_67;
          }
        }
        else
        {
          if (v39 < 0)
          {
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            v111 = 8;
LABEL_276:
            swift_bridgeObjectRetain();
            v112 = static Array._allocateBufferUninitialized(minimumCapacity:)();
            *(_QWORD *)(v112 + 16) = v111;
            bzero((void *)(v112 + 32), 2 * v111);
            goto LABEL_277;
          }
          if ((unint64_t)v39 >= *(_QWORD *)(v30 + 16))
            goto LABEL_272;
          v37 = 2 * v39;
          v38 = v34
              + *(unsigned __int16 *)(v31 + v37)
              + *(unsigned __int16 *)(v16 + 2 * v35 + 32) * *(unsigned __int16 *)(v33 + 2 * (_QWORD)v36);
          v34 = HIWORD(v38);
          *(_WORD *)(v31 + v37) = v38;
        }
        ++v35;
      }
      while (v12 != v35);
      if (!v34)
        continue;
      v28 = __OFADD__(v12, v36);
      v40 = (uint64_t)v36 + v12;
      if (v28)
        goto LABEL_337;
      if (v40 >= v25)
      {
LABEL_67:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        v44 = (void *)swift_allocError();
        *v45 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        v46 = 0;
        v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
        goto LABEL_101;
      }
      if (v40 < 0)
        goto LABEL_338;
      if ((unint64_t)v40 >= *(_QWORD *)(v30 + 16))
        goto LABEL_339;
      *(_WORD *)(v31 + 2 * v40) = v34;
    }
    while (v32 != v21);
    v41 = *(_QWORD *)(v30 + 16);
    if (v41)
    {
      v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
      a2 = v167;
      if (*(_WORD *)(v31 + 2 * v41 - 2))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = v30;
        v3 = v168;
      }
      else
      {
        v42 = v41 + 14;
        v3 = v168;
        do
        {
          *(_QWORD *)(v30 + 16) = v42 - 15;
          if (v42 == 15)
            break;
        }
        while (!*(unsigned __int16 *)(v30 + 2 * v42--));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = v30;
      }
      v18 = v170;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = v30;
      v3 = v168;
      v18 = v170;
      v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
      a2 = v167;
    }
  }
  while (v23 <= v19);
  rawValue = (_QWORD *)v21[499];
  if (v19 < 0)
    goto LABEL_256;
LABEL_16:
  if ((unint64_t)v19 >= rawValue[2])
    goto LABEL_331;
  v24 = v3;
  v25 = *(_QWORD *)(v16 + 16);
  if (!v25 || (v19 = rawValue[v19 + 4], (v26 = *(_QWORD *)(v19 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47._rawValue = (void *)MEMORY[0x1E0DEE9D8];
    v48 = v179;
    goto LABEL_69;
  }
  v15 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_343:
    __break(1u);
    goto LABEL_344;
  }
  if (v15 > 7)
  {
    v15 = 8;
  }
  else
  {
    if (v15 < 0)
      goto LABEL_378;
    if (!v15)
    {
      swift_bridgeObjectRetain();
      v27 = MEMORY[0x1E0DEE9D8];
      goto LABEL_74;
    }
  }
  swift_bridgeObjectRetain();
  v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v27 + 16) = v15;
  bzero((void *)(v27 + 32), 2 * v15);
LABEL_74:
  v54 = 0;
  v55 = v19 + 32;
  v56 = v27 + 32;
  while (2)
  {
    if (v54 == v26)
      goto LABEL_336;
    v57 = 0;
    v58 = 0;
    v59 = v54 + 1;
    do
    {
      if (v25 == v58)
        goto LABEL_273;
      v60 = v58 + v54;
      if (__OFADD__(v58, v54))
        goto LABEL_274;
      if (v60 >= v15)
      {
        if (v57)
          goto LABEL_100;
        v57 = *(unsigned __int16 *)(v55 + 2 * v54);
        if (*(_WORD *)(v55 + 2 * v54))
        {
          v57 = *(unsigned __int16 *)(v16 + 2 * v58 + 32);
          if (*(_WORD *)(v16 + 2 * v58 + 32))
            goto LABEL_100;
        }
      }
      else
      {
        if (v60 < 0)
          goto LABEL_312;
        if ((unint64_t)v60 >= *(_QWORD *)(v27 + 16))
          goto LABEL_313;
        v61 = 2 * v60;
        v62 = v57
            + *(unsigned __int16 *)(v56 + v61)
            + *(unsigned __int16 *)(v16 + 2 * v58 + 32) * *(unsigned __int16 *)(v55 + 2 * v54);
        v57 = HIWORD(v62);
        *(_WORD *)(v56 + v61) = v62;
      }
      ++v58;
    }
    while (v25 != v58);
    if (!v57)
    {
LABEL_94:
      v54 = v59;
      if (v59 != v26)
        continue;
      v64 = *(_QWORD *)(v27 + 16);
      if (v64 && !*(_WORD *)(v56 + 2 * v64 - 2))
      {
        do
        {
          *(_QWORD *)(v27 + 16) = v64 - 1;
          if (v64 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v27 + 28 + 2 * v64--));
      }
      goto LABEL_309;
    }
    break;
  }
  v28 = __OFADD__(v25, v54);
  v63 = v25 + v54;
  if (v28)
    goto LABEL_346;
  if (v63 < v15)
  {
    if (v63 < 0)
      goto LABEL_347;
    if ((unint64_t)v63 >= *(_QWORD *)(v27 + 16))
      goto LABEL_348;
    *(_WORD *)(v56 + 2 * v63) = v57;
    goto LABEL_94;
  }
LABEL_100:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v44 = (void *)swift_allocError();
  *v66 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  v46 = 0;
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v176, v175, v174);
  v68 = *(_QWORD *)(v67 + 16);
  swift_bridgeObjectRelease();
  v69 = floor((double)(8 - v68) * 4.81647993);
  v70 = v182;
  if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) == 0)
    goto LABEL_327;
  if (v69 <= -9.22337204e18)
  {
LABEL_328:
    __break(1u);
    goto LABEL_329;
  }
  if (v69 >= 9.22337204e18)
  {
LABEL_329:
    __break(1u);
    goto LABEL_330;
  }
  v71 = (uint64_t)v69;
  NSDecimal.asVariableLengthInteger()(*(_QWORD *)v182, *(_QWORD *)(v182 + 8), *(_DWORD *)(v182 + 16));
  v175 = v71;
  v73 = v71 - v171;
  if (__OFSUB__(v71, v171))
  {
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }
  if (!v73)
  {
    v24 = v72;
    v81 = (unint64_t *)v179;
    goto LABEL_165;
  }
  v177 = v72;
  v24 = specialized abs<A>(_:)(v71 - v171);
  v74 = v21[499];
  v75 = *(_QWORD *)(v74 + 16);
  v174 = v73;
  if (v75 > v24)
  {
    v76 = v177;
    swift_bridgeObjectRetain();
    if (v24 < 0)
      goto LABEL_259;
    goto LABEL_108;
  }
  if (!v75)
  {
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
LABEL_356:
    __break(1u);
LABEL_357:
    __break(1u);
LABEL_358:
    __break(1u);
LABEL_359:
    __break(1u);
    goto LABEL_360;
  }
  v27 = v75 - 1;
  v76 = v177;
  swift_bridgeObjectRetain();
  v172 = v75;
  while (2)
  {
    v82 = v21[499];
    if ((unint64_t)v75 > *(_QWORD *)(v82 + 16))
      goto LABEL_326;
    v83 = *(_QWORD *)(v82 + 8 * v27 + 32);
    if (v73 < 0)
    {
      swift_bridgeObjectRetain();
      v98 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v76, v83, 8uLL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v76 = v98;
      v75 = v172;
      goto LABEL_121;
    }
    v169 = v46;
    v84 = *(_QWORD *)(v76 + 16);
    if (!v84 || (v85 = *(_QWORD *)(v83 + 16)) == 0)
    {
      swift_bridgeObjectRelease();
      v76 = MEMORY[0x1E0DEE9D8];
      v46 = v169;
      goto LABEL_121;
    }
    if (__OFADD__(v84, v85))
      goto LABEL_345;
    if (v84 + v85 >= 8)
      v86 = 8;
    else
      v86 = v84 + v85;
    if (v86 < 0)
      goto LABEL_378;
    swift_bridgeObjectRetain();
    v21 = (unint64_t *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v21[2] = v86;
    v87 = v21 + 4;
    bzero(v21 + 4, 2 * v86);
    v88 = 0;
    v89 = v83 + 32;
    do
    {
      v90 = 0;
      v91 = 0;
      v92 = v88++;
      do
      {
        v95 = v91 + v92;
        if (__OFADD__(v91, v92))
        {
          __break(1u);
LABEL_309:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v48 = v179;
          v47._rawValue = (void *)v27;
LABEL_69:
          v49 = v182;
          v50 = v47._rawValue;
          NSDecimal.copyVariableLengthInteger(_:)(v47);
          if (!v51)
          {
            v52 = v50[2];
            swift_bridgeObjectRelease();
            if (HIDWORD(v52))
              goto LABEL_379;
            _So9NSDecimala__length_setter(v52, v48);
            v180 = *(_DWORD *)v49;
            v181 = *(_OWORD *)(v49 + 4);
            v53 = _So9NSDecimala__exponent_getter((char *)&v180);
            _So9NSDecimala__exponent_setter(v53, v48);
            _So9NSDecimala__isCompact_setter_0(0, v48);
            LOBYTE(v10) = 0;
            return v10 & 1;
          }
          goto LABEL_306;
        }
        if (v95 >= v86)
        {
          if (v90)
            goto LABEL_304;
          v90 = *(unsigned __int16 *)(v89 + 2 * v92);
          if (*(_WORD *)(v89 + 2 * v92))
          {
            v90 = *(unsigned __int16 *)(v76 + 2 * v91 + 32);
            if (*(_WORD *)(v76 + 2 * v91 + 32))
              goto LABEL_304;
          }
        }
        else
        {
          if (v95 < 0)
            goto LABEL_314;
          if (v95 >= v21[2])
            goto LABEL_315;
          v93 = 2 * v95;
          v94 = v90
              + *(unsigned __int16 *)((char *)v87 + v93)
              + *(unsigned __int16 *)(v76 + 2 * v91 + 32) * *(unsigned __int16 *)(v89 + 2 * v92);
          v90 = HIWORD(v94);
          *(_WORD *)((char *)v87 + v93) = v94;
        }
        ++v91;
      }
      while (v84 != v91);
      if (!v90)
        continue;
      v28 = __OFADD__(v84, v92);
      v96 = v84 + v92;
      if (v28)
        goto LABEL_353;
      if (v96 >= v86)
        goto LABEL_304;
      if (v96 < 0)
        goto LABEL_356;
      if (v96 >= v21[2])
        goto LABEL_357;
      *((_WORD *)v87 + v96) = v90;
    }
    while (v88 != v85);
    v97 = v21[2];
    if (v97)
    {
      v46 = v169;
      v75 = v172;
      if (*((_WORD *)v87 + v97 - 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v76 = (uint64_t)v21;
        v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
        v73 = v174;
      }
      else
      {
        v99 = v97 + 14;
        v73 = v174;
        do
        {
          v21[2] = v99 - 15;
          if (v99 == 15)
            break;
        }
        while (!*((unsigned __int16 *)v21 + v99--));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v76 = (uint64_t)v21;
        v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v76 = (uint64_t)v21;
      v46 = v169;
      v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
      v75 = v172;
      v73 = v174;
    }
LABEL_121:
    v24 -= v27;
    if (v75 <= v24)
      continue;
    break;
  }
  v74 = v21[499];
  if (v24 < 0)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }
LABEL_108:
  if ((unint64_t)v24 >= *(_QWORD *)(v74 + 16))
    goto LABEL_342;
  v77 = *(_QWORD *)(v74 + 8 * v24 + 32);
  if (v174 < 0)
  {
    swift_bridgeObjectRetain();
    v24 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v76, v77, 8uLL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_163;
  }
  v78 = *(_QWORD *)(v76 + 16);
  if (!v78 || (v79 = *(_QWORD *)(v77 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x1E0DEE9D8];
LABEL_163:
    v81 = (unint64_t *)v179;
    goto LABEL_164;
  }
  v80 = v78 + v79;
  if (__OFADD__(v78, v79))
  {
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
    goto LABEL_364;
  }
  if (v80 > 7)
  {
    v80 = 8;
LABEL_187:
    swift_bridgeObjectRetain();
    v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v24 + 16) = v80;
    bzero((void *)(v24 + 32), 2 * v80);
    goto LABEL_188;
  }
  if (v80 < 0)
    goto LABEL_378;
  if (v80)
    goto LABEL_187;
  swift_bridgeObjectRetain();
  v24 = MEMORY[0x1E0DEE9D8];
LABEL_188:
  v115 = 0;
  v116 = v77 + 32;
  v117 = v24 + 32;
  do
  {
    if (v115 == v79)
      goto LABEL_358;
    v118 = 0;
    v119 = 0;
    v120 = v115 + 1;
    do
    {
      if (v78 == v119)
        goto LABEL_316;
      v123 = v119 + v115;
      if (__OFADD__(v119, v115))
        goto LABEL_317;
      if (v123 >= v80)
      {
        if (v118)
          goto LABEL_304;
        v118 = *(unsigned __int16 *)(v116 + 2 * v115);
        if (*(_WORD *)(v116 + 2 * v115))
        {
          v118 = *(unsigned __int16 *)(v76 + 2 * v119 + 32);
          if (*(_WORD *)(v76 + 2 * v119 + 32))
            goto LABEL_304;
        }
      }
      else
      {
        if (v123 < 0)
        {
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
          goto LABEL_328;
        }
        if ((unint64_t)v123 >= *(_QWORD *)(v24 + 16))
          goto LABEL_324;
        v121 = 2 * v123;
        v122 = v118
             + *(unsigned __int16 *)(v117 + v121)
             + *(unsigned __int16 *)(v76 + 2 * v119 + 32) * *(unsigned __int16 *)(v116 + 2 * v115);
        v118 = HIWORD(v122);
        *(_WORD *)(v117 + v121) = v122;
      }
      ++v119;
    }
    while (v78 != v119);
    if (v118)
    {
      v28 = __OFADD__(v78, v115);
      v124 = v78 + v115;
      if (v28)
        goto LABEL_361;
      if (v124 >= v80)
        goto LABEL_304;
      if (v124 < 0)
        goto LABEL_362;
      if ((unint64_t)v124 >= *(_QWORD *)(v24 + 16))
        goto LABEL_363;
      *(_WORD *)(v117 + 2 * v124) = v118;
    }
    v115 = v120;
  }
  while (v120 != v79);
  v125 = *(_QWORD *)(v24 + 16);
  if (!v125)
    goto LABEL_318;
  v81 = (unint64_t *)v179;
  if (!*(_WORD *)(v117 + 2 * v125 - 2))
  {
    do
    {
      *(_QWORD *)(v24 + 16) = v125 - 1;
      if (v125 == 1)
        break;
    }
    while (!*(unsigned __int16 *)(v24 + 28 + 2 * v125--));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_164:
    v70 = v182;
    v73 = v174;
LABEL_165:
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v24);
    if (v101)
      goto LABEL_306;
    v102 = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRelease();
    if (v102 >> 31)
      goto LABEL_349;
    _So9NSDecimala__length_setter(v102, (_DWORD *)v70);
    if (v73 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_350;
    if (v73 > 0x7FFFFFFF)
      goto LABEL_351;
    v180 = *(_DWORD *)v70;
    v181 = *(_OWORD *)(v70 + 4);
    v103 = _So9NSDecimala__exponent_getter((char *)&v180);
    v28 = __OFSUB__(v103, (_DWORD)v73);
    v104 = (v103 - v73);
    if (v28)
      goto LABEL_352;
    _So9NSDecimala__exponent_setter(v104, (_BYTE *)v70);
    _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v70);
    v180 = *(_DWORD *)v70;
    v181 = *(_OWORD *)(v70 + 4);
    v105 = _So9NSDecimala__length_getter(&v180);
    v106 = *((unsigned __int16 *)v81 + 2);
    v107 = *((unsigned __int16 *)v81 + 3);
    if (!v105)
    {
      v113 = *((_DWORD *)v81 + 4);
      v180 = *(_DWORD *)v81;
      LOWORD(v181) = v106;
      WORD1(v181) = v107;
      *(_QWORD *)((char *)&v181 + 4) = v81[1];
      HIDWORD(v181) = v113;
      v114 = _So9NSDecimala__exponent_getter((char *)&v180);
      _So9NSDecimala__exponent_setter(v114, (_BYTE *)v70);
LABEL_269:
      LOBYTE(v10) = 1;
      return v10 & 1;
    }
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v81 | (unint64_t)(v106 << 32) | (v107 << 48), v81[1], *((_DWORD *)v81 + 4));
    if (!v175)
    {
      v112 = v108;
      goto LABEL_263;
    }
    v178 = v108;
    v24 = specialized abs<A>(_:)(v175);
    v109 = v21[499];
    v110 = *(_QWORD *)(v109 + 16);
    if (v110 > v24)
    {
      v15 = v178;
      swift_bridgeObjectRetain();
      if ((v24 & 0x8000000000000000) == 0)
        goto LABEL_175;
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v81 = (unint64_t *)v179;
      continue;
    }
    break;
  }
  if (!v110)
    goto LABEL_365;
  v127 = v110 - 1;
  v15 = v178;
  swift_bridgeObjectRetain();
  do
  {
    v128 = v21[499];
    if ((unint64_t)v110 > *(_QWORD *)(v128 + 16))
      goto LABEL_359;
    v129 = *(_QWORD *)(v128 + 8 * v127 + 32);
    if (v175 < 0)
    {
      swift_bridgeObjectRetain();
      v148 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v129, 8uLL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v148;
    }
    else
    {
      v130 = *(_QWORD *)(v15 + 16);
      if (v130 && (v131 = *(_QWORD *)(v129 + 16)) != 0)
      {
        v174 = v127;
        if (__OFADD__(v130, v131))
          goto LABEL_366;
        v132 = *(_QWORD *)(v129 + 16);
        v173 = v110;
        if (v130 + v131 >= 8)
          v133 = 8;
        else
          v133 = v130 + v131;
        if (v133 < 0)
          goto LABEL_378;
        swift_bridgeObjectRetain();
        v182 = v129;
        v134 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v134 + 16) = v133;
        v135 = v134 + 32;
        bzero((void *)(v134 + 32), 2 * v133);
        v136 = 0;
        v137 = v182 + 32;
        do
        {
          v138 = 0;
          v139 = 0;
          v140 = v136++;
          do
          {
            v141 = v139 + v140;
            if (__OFADD__(v139, v140))
              goto LABEL_325;
            if (v141 >= v133)
            {
              if (v138)
                goto LABEL_304;
              v138 = *(unsigned __int16 *)(v137 + 2 * v140);
              if (*(_WORD *)(v137 + 2 * v140))
              {
                v138 = *(unsigned __int16 *)(v15 + 2 * v139 + 32);
                if (*(_WORD *)(v15 + 2 * v139 + 32))
                  goto LABEL_304;
              }
            }
            else
            {
              if (v141 < 0)
                goto LABEL_334;
              if ((unint64_t)v141 >= *(_QWORD *)(v134 + 16))
                goto LABEL_335;
              v142 = 2 * v141;
              v143 = v138
                   + *(unsigned __int16 *)(v135 + v142)
                   + *(unsigned __int16 *)(v15 + 2 * v139 + 32) * *(unsigned __int16 *)(v137 + 2 * v140);
              v138 = HIWORD(v143);
              *(_WORD *)(v135 + v142) = v143;
            }
            ++v139;
          }
          while (v130 != v139);
          if (v138)
          {
            v28 = __OFADD__(v130, v140);
            v144 = v130 + v140;
            if (v28)
              goto LABEL_370;
            if (v144 >= v133)
              goto LABEL_304;
            if (v144 < 0)
              goto LABEL_371;
            if ((unint64_t)v144 >= *(_QWORD *)(v134 + 16))
              goto LABEL_372;
            *(_WORD *)(v135 + 2 * v144) = v138;
          }
        }
        while (v136 != v132);
        v145 = *(_QWORD *)(v134 + 16);
        if (v145 && !*(_WORD *)(v135 + 2 * v145 - 2))
        {
          v146 = v145 + 14;
          do
          {
            *(_QWORD *)(v134 + 16) = v146 - 15;
            if (v146 == 15)
              break;
          }
          while (!*(unsigned __int16 *)(v134 + 2 * v146--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = v134;
        v21 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
        v110 = v173;
        v127 = v174;
      }
      else
      {
        swift_bridgeObjectRelease();
        v15 = MEMORY[0x1E0DEE9D8];
      }
    }
    v24 -= v127;
  }
  while (v110 <= v24);
  v109 = v21[499];
  if (v24 < 0)
    goto LABEL_311;
LABEL_175:
  if ((unint64_t)v24 >= *(_QWORD *)(v109 + 16))
  {
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
    goto LABEL_367;
  }
  v21 = v81;
  v19 = *(_QWORD *)(v109 + 8 * v24 + 32);
  if (v175 < 0)
  {
    swift_bridgeObjectRetain();
    v112 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v19, 8uLL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_262;
  }
  v25 = *(_QWORD *)(v15 + 16);
  if (!v25 || (v16 = *(_QWORD *)(v19 + 16)) == 0)
  {
LABEL_260:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v112 = MEMORY[0x1E0DEE9D8];
LABEL_262:
    v81 = v21;
LABEL_263:
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v112);
    if (v149)
      goto LABEL_306;
    v150 = *(_QWORD *)(v112 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v150))
      goto LABEL_379;
    _So9NSDecimala__length_setter(v150, v81);
    if (v175 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v175 <= 0x7FFFFFFF)
      {
        v180 = *(_DWORD *)v81;
        v181 = *(_OWORD *)((char *)v81 + 4);
        v151 = _So9NSDecimala__exponent_getter((char *)&v180);
        v28 = __OFSUB__(v151, (_DWORD)v175);
        v152 = (v151 - v175);
        if (!v28)
        {
          _So9NSDecimala__exponent_setter(v152, v81);
          _So9NSDecimala__isCompact_setter_0(0, v81);
          goto LABEL_269;
        }
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
        goto LABEL_373;
      }
LABEL_368:
      __break(1u);
      goto LABEL_369;
    }
LABEL_367:
    __break(1u);
    goto LABEL_368;
  }
  v111 = v25 + v16;
  if (__OFADD__(v25, v16))
  {
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
    goto LABEL_377;
  }
  if (v111 > 7)
    goto LABEL_275;
  if (v111 < 0)
    goto LABEL_378;
  if (v111)
    goto LABEL_276;
  swift_bridgeObjectRetain();
  v112 = MEMORY[0x1E0DEE9D8];
LABEL_277:
  v153 = 0;
  v154 = v19 + 32;
  v155 = v112 + 32;
  while (2)
  {
    if (v153 == v16)
    {
LABEL_373:
      __break(1u);
      goto LABEL_374;
    }
    v156 = 0;
    v157 = 0;
    v158 = v153 + 1;
    do
    {
      if (v25 == v157)
        goto LABEL_340;
      v161 = v157 + v153;
      if (__OFADD__(v157, v153))
        goto LABEL_341;
      if (v161 >= v111)
      {
        if (v156)
          goto LABEL_304;
        v156 = *(unsigned __int16 *)(v154 + 2 * v153);
        if (*(_WORD *)(v154 + 2 * v153))
        {
          v156 = *(unsigned __int16 *)(v15 + 2 * v157 + 32);
          if (*(_WORD *)(v15 + 2 * v157 + 32))
            goto LABEL_304;
        }
      }
      else
      {
        if (v161 < 0)
          goto LABEL_354;
        if ((unint64_t)v161 >= *(_QWORD *)(v112 + 16))
          goto LABEL_355;
        v159 = 2 * v161;
        v160 = v156
             + *(unsigned __int16 *)(v155 + v159)
             + *(unsigned __int16 *)(v15 + 2 * v157 + 32) * *(unsigned __int16 *)(v154 + 2 * v153);
        v156 = HIWORD(v160);
        *(_WORD *)(v155 + v159) = v160;
      }
      ++v157;
    }
    while (v25 != v157);
    if (!v156)
    {
LABEL_298:
      v153 = v158;
      if (v158 != v16)
        continue;
      v163 = *(_QWORD *)(v112 + 16);
      if (v163 && !*(_WORD *)(v155 + 2 * v163 - 2))
      {
        do
        {
          *(_QWORD *)(v112 + 16) = v163 - 1;
          if (v163 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v112 + 28 + 2 * v163--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_262;
    }
    break;
  }
  v28 = __OFADD__(v25, v153);
  v162 = v25 + v153;
  if (v28)
    goto LABEL_375;
  if (v162 >= v111)
    goto LABEL_304;
  if (v162 < 0)
    goto LABEL_376;
  if ((unint64_t)v162 < *(_QWORD *)(v112 + 16))
  {
    *(_WORD *)(v155 + 2 * v162) = v156;
    goto LABEL_298;
  }
LABEL_377:
  __break(1u);
LABEL_378:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_379:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t result;
  uint64_t v22;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8 >= v7)
    v9 = *(_QWORD *)(a1 + 16);
  else
    v9 = *(_QWORD *)(a2 + 16);
  if (a3 < 0)
    goto LABEL_62;
  if (a3)
  {
    v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v13 + 16) = a3;
    bzero((void *)(v13 + 32), 2 * a3);
    v22 = v13;
    if (v9)
    {
LABEL_7:
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v4 = 0;
        v6 = *(unsigned __int16 *)(a2 + 32) + *(unsigned __int16 *)(a1 + 32);
        while (1)
        {
          v5 = HIWORD(v6);
          *(_WORD *)(v13 + 32 + 2 * v4) = v6;
          a4 = v4 + 1;
          if (v9 - 1 == v4)
            break;
          v15 = 2 * v4;
          v5 += *(unsigned __int16 *)(a1 + 34 + v15);
          v6 = v5 + *(unsigned __int16 *)(a2 + 34 + v15);
          v4 = a4;
          if (a4 >= v14)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        __break(1u);
      }
      v22 = v13;
      if (a4 >= v7)
      {
LABEL_30:
        if ((uint64_t)a4 >= v8)
          goto LABEL_49;
LABEL_31:
        if (v5)
        {
          while ((int64_t)a4 < *(_QWORD *)(v13 + 16))
          {
            v18 = *(unsigned __int16 *)(a2 + 32 + 2 * a4);
            *(_WORD *)(v13 + 2 * a4 + 32) = v18 + 1;
            if (v8 - 1 == a4)
            {
              v22 = v13;
              if ((v18 + 1) >> 16)
                goto LABEL_50;
              goto LABEL_47;
            }
            ++a4;
            if (v18 != 0xFFFF)
            {
              v22 = v13;
              goto LABEL_36;
            }
          }
          goto LABEL_59;
        }
LABEL_36:
        if ((uint64_t)a4 >= v8)
          goto LABEL_54;
        goto LABEL_39;
      }
      if (v6 >= 0x10000)
      {
        while (v4 + 1 < *(_QWORD *)(v13 + 16))
        {
          v16 = *(unsigned __int16 *)(a1 + 34 + 2 * v4);
          *(_WORD *)(v13 + 2 * v4 + 34) = v16 + 1;
          if (v7 - 2 == v4)
          {
            v5 = (v16 + 1) >> 16;
            v22 = v13;
            a4 = v7;
            if ((uint64_t)v7 < v8)
              goto LABEL_31;
            goto LABEL_49;
          }
          ++v4;
          if (v16 != 0xFFFF)
          {
            v22 = v13;
            a4 = v4 + 1;
            goto LABEL_18;
          }
        }
        goto LABEL_60;
      }
LABEL_18:
      if ((uint64_t)a4 >= (uint64_t)v7)
      {
        v5 = 0;
        if ((uint64_t)a4 >= v8)
        {
LABEL_49:
          v8 = a4;
          if (v5)
          {
LABEL_50:
            if (v8 > a3)
            {
              swift_bridgeObjectRelease();
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              swift_allocError();
              *v20 = 0;
              return swift_willThrow();
            }
            if ((unint64_t)v8 >= *(_QWORD *)(v13 + 16))
              goto LABEL_61;
            *(_WORD *)(v13 + 2 * v8 + 32) = 1;
            v22 = v13;
            a4 = v8 + 1;
          }
          else
          {
LABEL_47:
            a4 = v8;
          }
LABEL_54:
          specialized RangeReplaceableCollection<>.removeLast(_:)(*(_QWORD *)(v13 + 16) - a4);
          return v22;
        }
        goto LABEL_31;
      }
LABEL_23:
      if (a4 <= v7)
        v17 = v7;
      else
        v17 = a4;
      while (v17 != a4)
      {
        if (a4 >= *(_QWORD *)(v13 + 16))
          goto LABEL_56;
        *(_WORD *)(v13 + 2 * a4 + 32) = *(_WORD *)(a1 + 32 + 2 * a4);
        if ((uint64_t)++a4 >= (uint64_t)v7)
        {
          v5 = 0;
          v22 = v13;
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
    v22 = MEMORY[0x1E0DEE9D8];
    if (v9)
      goto LABEL_7;
  }
  a4 = 0;
  if (v7)
    goto LABEL_23;
  if (!v8)
    goto LABEL_54;
LABEL_39:
  if (a4 <= v8)
    v19 = v8;
  else
    v19 = a4;
  while (v19 != a4)
  {
    if (a4 >= *(_QWORD *)(v13 + 16))
      goto LABEL_58;
    *(_WORD *)(v13 + 2 * a4 + 32) = *(_WORD *)(a2 + 32 + 2 * a4);
    if ((uint64_t)++a4 >= v8)
    {
      v22 = v13;
      goto LABEL_54;
    }
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized static NSDecimal._fitMantissa(_:roundingMode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  _WORD *v31;
  unsigned __int16 *v32;
  int v33;
  _BYTE *v34;
  unint64_t v35;
  int64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v43;
  uint64_t v44;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 <= 8)
  {
    swift_bridgeObjectRetain();
    return;
  }
  swift_bridgeObjectRetain();
  if (v3 != 9)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v19 = MEMORY[0x1E0DEE068];
    v8 = 10000;
    v9 = v2;
    do
    {
      v44 = v4;
      if ((_DWORD)v5)
        v6 = 1;
      v4 = v19;
      v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v2 + 16) = v3;
      bzero((void *)(v2 + 32), 2 * v3);
      v20 = *(_QWORD *)(v9 + 16);
      if (v3 > v20)
        goto LABEL_86;
      if (v3 - 1 >= *(_QWORD *)(v2 + 16))
        goto LABEL_53;
      v21 = *(unsigned __int16 *)(v9 + 32 + 2 * (v3 - 1));
      v22 = v3 - 2;
      v23 = (839 * (v21 >> 4)) >> 19;
      while (1)
      {
        *(_WORD *)(v2 + 30 + 2 * v3) = v23;
        v5 = v21 % 0x2710;
        if (v3 == 1)
          break;
        if (v22 >= (uint64_t)v20)
          goto LABEL_54;
        v21 = *(unsigned __int16 *)(v9 + 28 + 2 * v3) | ((_DWORD)v5 << 16);
        v23 = v21 / 0x2710;
        v24 = v3 - 2;
        --v3;
        if (v24 >= *(_QWORD *)(v2 + 16))
          goto LABEL_53;
      }
      v25 = *(_QWORD *)(v2 + 16);
      if (v25 && !*(_WORD *)(v2 + 32 + 2 * v25 - 2))
      {
        do
        {
          *(_QWORD *)(v2 + 16) = v25 - 1;
          if (v25 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v2 + 28 + 2 * v25--));
        swift_bridgeObjectRelease();
        v4 = v44 + 4;
        if (__OFADD__(v44, 4))
          goto LABEL_93;
      }
      else
      {
        swift_bridgeObjectRelease();
        v4 = v44 + 4;
        if (__OFADD__(v44, 4))
          goto LABEL_93;
      }
      v3 = *(_QWORD *)(v2 + 16);
      v9 = v2;
    }
    while (v3 > 9);
    if (v3 == 9)
      goto LABEL_4;
LABEL_46:
    if (!v6)
      goto LABEL_55;
    v27 = a2;
    if ((_DWORD)v5 == 5 || !(_DWORD)v5)
      LODWORD(v5) = v5 + 1;
LABEL_56:
    if (v27)
    {
      if (v27 == 2)
        goto LABEL_64;
      if (v27 != 3)
        return;
      if ((_DWORD)v5 == 5)
      {
        if (!v3)
        {
          __break(1u);
LABEL_101:
          __break(1u);
          return;
        }
        if ((*(_WORD *)(v2 + 32) & 1) != 0)
          return;
        goto LABEL_65;
      }
    }
    if (v5 < 5)
      return;
LABEL_64:
    if (!v3)
    {
      v8 = MEMORY[0x1E0DEE9D8];
      v9 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v28 = 1;
      goto LABEL_71;
    }
LABEL_65:
    v28 = v3 + 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v3;
    bzero((void *)(v8 + 32), 2 * v3);
    v29 = *(unsigned __int16 *)(v2 + 32) + 1;
    *(_WORD *)(v8 + 32) = *(_WORD *)(v2 + 32) + 1;
    v30 = v3 - 1;
    if (v3 != 1)
    {
      v31 = (_WORD *)(v8 + 34);
      v32 = (unsigned __int16 *)(v2 + 34);
      do
      {
        v33 = *v32++;
        v29 = v33 + HIWORD(v29);
        *v31++ = v29;
        --v30;
      }
      while (v30);
    }
    v9 = v3;
    if (v29 < 0x10000)
    {
LABEL_83:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_71:
    if (v9 == v28)
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      swift_allocError();
      *v34 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return;
    }
    v35 = *(_QWORD *)(v8 + 24);
    v5 = v9 + 1;
    if (v9 >= v35 >> 1)
      goto LABEL_99;
    while (1)
    {
      *(_QWORD *)(v8 + 16) = v5;
      *(_WORD *)(v8 + 32 + 2 * v9) = 1;
      v5 = *(_QWORD *)(v8 + 16);
      if (v5 >= v3)
        goto LABEL_83;
      if (v5)
      {
        v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v3 + 16) = v5;
        bzero((void *)(v3 + 32), 2 * v5);
        v17 = *(_QWORD *)(v8 + 16);
        if (v5 > v17)
          goto LABEL_101;
        if (v5 - 1 >= *(_QWORD *)(v3 + 16))
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        v36 = v5 - 2;
        v37 = *(unsigned __int16 *)(v8 + 32 + 2 * (v5 - 1));
        LOWORD(v38) = *(_WORD *)(v8 + 32 + 2 * (v5 - 1)) / 0xAu;
        while (1)
        {
          *(_WORD *)(v3 + 30 + 2 * v5) = v38;
          if (v5 == 1)
            break;
          if (v36 >= (uint64_t)v17)
          {
            __break(1u);
            goto LABEL_92;
          }
          v37 = *(unsigned __int16 *)(v8 + 28 + 2 * v5) | ((v37 % 0xA) << 16);
          v38 = v37 / 0xA;
          v39 = v5 - 2;
          --v5;
          if (v39 >= *(_QWORD *)(v3 + 16))
            goto LABEL_82;
        }
      }
      else
      {
LABEL_87:
        v3 = MEMORY[0x1E0DEE9D8];
      }
      v17 = *(_QWORD *)(v3 + 16);
      if (v17 && !*(_WORD *)(v3 + 2 * v17 + 30))
      {
        do
        {
LABEL_94:
          *(_QWORD *)(v3 + 16) = v17 - 1;
          if (v17 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v3 + 28 + 2 * v17--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!__OFADD__(v4++, 1))
        return;
      __break(1u);
LABEL_99:
      v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v5, 1, (char *)v8);
    }
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
LABEL_4:
  v3 = 9;
  v7 = MEMORY[0x1E0DEE068];
  v8 = 3435973837;
  while (1)
  {
    v43 = v4;
    if ((_DWORD)v5)
      v6 = 1;
    v4 = v7;
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v9 + 16) = v3;
    bzero((void *)(v9 + 32), 2 * v3);
    v10 = *(_QWORD *)(v2 + 16);
    if (v3 > v10)
    {
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    v11 = v3 - 1;
    if (v3 - 1 >= *(_QWORD *)(v9 + 16))
      break;
    v12 = v3 - 2;
    v13 = *(unsigned __int16 *)(v2 + 32 + 2 * v11);
    LOWORD(v14) = *(_WORD *)(v2 + 32 + 2 * v11) / 0xAu;
    while (1)
    {
      *(_WORD *)(v9 + 30 + 2 * v3) = v14;
      v5 = v13 % 0xA;
      if (v3 == 1)
        break;
      if (v12 >= (uint64_t)v10)
        goto LABEL_52;
      v13 = *(unsigned __int16 *)(v2 + 28 + 2 * v3) | ((_DWORD)v5 << 16);
      v14 = v13 / 0xA;
      v15 = v3 - 2;
      --v3;
      if (v15 >= *(_QWORD *)(v9 + 16))
        goto LABEL_51;
    }
    v16 = *(_QWORD *)(v9 + 16);
    if (v16 && !*(_WORD *)(v9 + 32 + 2 * v16 - 2))
    {
      do
      {
        *(_QWORD *)(v9 + 16) = v16 - 1;
        if (v16 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v9 + 28 + 2 * v16--));
      swift_bridgeObjectRelease();
      v4 = v43 + 1;
      if (__OFADD__(v43, 1))
      {
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v4 = v43 + 1;
      if (__OFADD__(v43, 1))
        goto LABEL_92;
    }
    v3 = *(_QWORD *)(v9 + 16);
    v2 = v9;
    if (v3 <= 8)
    {
      v2 = v9;
      goto LABEL_46;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  v27 = a2;
  if ((_DWORD)v5)
    goto LABEL_56;
}

uint64_t specialized static NSDecimal._integerSubtract(term:subtrahend:maxResultLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v21;
  uint64_t result;

  if (a3 < 0)
    goto LABEL_51;
  if (a3)
  {
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v9 + 16) = a3;
    bzero((void *)(v9 + 32), 2 * a3);
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a2 + 16);
  if (v11 >= v10)
    v12 = *(_QWORD *)(a1 + 16);
  else
    v12 = *(_QWORD *)(a2 + 16);
  if (!v12)
  {
    if (!v10)
      goto LABEL_36;
    v12 = 0;
    goto LABEL_22;
  }
  v13 = *(_QWORD *)(v9 + 16);
  if (v13)
  {
    v4 = 0;
    v14 = (*(unsigned __int16 *)(a1 + 32) | 0x10000) - *(unsigned __int16 *)(a2 + 32);
    v15 = v12 - 1;
    v5 = a2 + 34;
    while (1)
    {
      v3 = HIWORD(v14);
      *(_WORD *)(v9 + 32 + 2 * v4) = v14;
      v12 = v4 + 1;
      if (v15 == v4)
        break;
      v3 = v3 + *(unsigned __int16 *)(a1 + 34 + 2 * v4) - *(unsigned __int16 *)(v5 + 2 * v4);
      v14 = v3 + 0xFFFF;
      ++v4;
      if (v12 >= v13)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    __break(1u);
  }
  if (v12 < v10)
  {
    if (!v3)
    {
      while ((unint64_t)(v4 + 1) < *(_QWORD *)(v9 + 16))
      {
        v16 = *(unsigned __int16 *)(a1 + 34 + 2 * v4);
        LODWORD(v5) = v16 + 0xFFFF;
        *(_WORD *)(v9 + 34 + 2 * v4) = v16 - 1;
        if (v10 - 2 == v4)
          goto LABEL_39;
        ++v4;
        if (v16)
        {
          v12 = v4 + 1;
          goto LABEL_22;
        }
      }
      goto LABEL_50;
    }
LABEL_22:
    if (v12 <= v10)
      v17 = v10;
    else
      v17 = v12;
    while (v17 != v12)
    {
      if (v12 >= *(_QWORD *)(v9 + 16))
        goto LABEL_49;
      *(_WORD *)(v9 + 32 + 2 * v12) = *(_WORD *)(a1 + 32 + 2 * v12);
      if ((uint64_t)++v12 >= (uint64_t)v10)
      {
        v3 = 1;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_29:
  if ((uint64_t)v12 < (uint64_t)v11)
  {
    while (v12 >= v11)
    {
      __break(1u);
LABEL_39:
      v3 = WORD1(v5);
      v12 = v10;
      if ((uint64_t)v10 >= (uint64_t)v11)
        goto LABEL_40;
    }
    while (v12 >= *(_QWORD *)(v9 + 16))
    {
LABEL_35:
      __break(1u);
LABEL_36:
      if (!v11)
        goto LABEL_41;
      v12 = 0;
      v3 = 1;
    }
    v18 = v3 + (*(unsigned __int16 *)(a2 + 32 + 2 * v12) ^ 0xFFFF);
    --v11;
    while (1)
    {
      v3 = HIWORD(v18);
      *(_WORD *)(v9 + 32 + 2 * v12) = v18;
      if (v11 == v12)
        break;
      v18 = v3 + (*(unsigned __int16 *)(a2 + 34 + 2 * v12++) ^ 0xFFFF);
      if (v12 >= *(_QWORD *)(v9 + 16))
        goto LABEL_35;
    }
  }
LABEL_40:
  if (v3)
  {
LABEL_41:
    v19 = *(_QWORD *)(v9 + 16);
    if (v19 && !*(_WORD *)(v9 + 2 * v19 + 30))
    {
      do
      {
        *(_QWORD *)(v9 + 16) = v19 - 1;
        if (v19 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v9 + 28 + 2 * v19--));
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v21 = 0;
    swift_willThrow();
  }
  return v9;
}

uint64_t specialized static NSDecimal._compare(lhs:rhs:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  __int16 v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  unsigned __int16 v35;
  uint64_t v36;
  unint64_t *v37;
  unsigned int v38;
  __int16 v39;
  int isNegative_getter;
  __int16 v41;
  uint64_t v42;
  uint64_t result;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  _QWORD *rawValue;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  void *v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v194;
  _BYTE *v195;
  __int16 v196;
  unsigned int v197;
  int v198;
  unsigned __int16 v199;
  unsigned __int16 v200;
  __int16 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unsigned __int16 v211;
  unint64_t v212;
  __int16 v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t *v216;
  __int16 v217;
  uint64_t v218;
  _BYTE v219[20];
  unint64_t v220;
  unint64_t v221;
  unsigned int v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;

  v10 = a1;
  v226 = *MEMORY[0x1E0C80C00];
  v223 = a1;
  v205 = HIDWORD(a1);
  v208 = HIWORD(a1);
  v211 = a2;
  v224 = a2;
  v11 = a2 >> 16;
  v12 = HIDWORD(a2);
  v13 = HIWORD(a2);
  v14 = HIWORD(a3);
  v204 = HIDWORD(a4);
  v225 = a3;
  v15 = _So9NSDecimala__length_getter(&v223);
  v16 = a4;
  v17 = a6;
  v18 = HIWORD(a6);
  v19 = HIDWORD(a5);
  v20 = a5 >> 16;
  v21 = HIWORD(v16);
  v215 = HIWORD(v16);
  LODWORD(v203) = v14;
  if (!v15)
  {
    LODWORD(v223) = v10;
    WORD2(v223) = v205;
    HIWORD(v223) = v208;
    LOWORD(v224) = v211;
    WORD1(v224) = v11;
    WORD2(v224) = v12;
    HIWORD(v224) = v13;
    LOWORD(v225) = a3;
    HIWORD(v225) = v14;
    v39 = v17;
    v198 = v16;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v223);
    LODWORD(v16) = v198;
    v17 = v39;
    v20 = a5 >> 16;
    LOWORD(v21) = v215;
    v19 = HIDWORD(a5);
    if (isNegative_getter)
    {
      LODWORD(v223) = v198;
      WORD2(v223) = v204;
      HIWORD(v223) = v215;
      v224 = a5;
      LOWORD(v225) = v17;
      HIWORD(v225) = v18;
      v41 = v17;
      if (!_So9NSDecimala__length_getter(&v223))
      {
        LODWORD(v223) = v198;
        WORD2(v223) = v204;
        HIWORD(v223) = v215;
        v224 = a5;
        LOWORD(v225) = v41;
        HIWORD(v225) = v18;
        if (_So9NSDecimala__isNegative_getter(&v223))
          return 0;
      }
      return -1;
    }
  }
  v199 = v11;
  v200 = v12;
  v201 = v13;
  LODWORD(v202) = a3;
  LODWORD(v223) = v16;
  WORD2(v223) = v204;
  HIWORD(v223) = v21;
  LOWORD(v224) = a5;
  WORD1(v224) = v20;
  WORD2(v224) = v19;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v17;
  HIWORD(v225) = v18;
  v22 = v18;
  v23 = HIWORD(a5);
  v24 = v19;
  v25 = v20;
  v26 = v17;
  v27 = v16;
  if (!_So9NSDecimala__length_getter(&v223))
  {
    LODWORD(v223) = v27;
    WORD2(v223) = v204;
    HIWORD(v223) = v215;
    LOWORD(v224) = a5;
    WORD1(v224) = v25;
    WORD2(v224) = v24;
    HIWORD(v224) = HIWORD(a5);
    LOWORD(v225) = v26;
    HIWORD(v225) = v22;
    if (_So9NSDecimala__isNegative_getter(&v223))
      return 1;
  }
  v197 = v10;
  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v11;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  v28 = _So9NSDecimala__isNegative_getter(&v223);
  LODWORD(v223) = v27;
  WORD2(v223) = v204;
  HIWORD(v223) = v215;
  LOWORD(v224) = a5;
  WORD1(v224) = v25;
  WORD2(v224) = v24;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v26;
  HIWORD(v225) = v22;
  if (_So9NSDecimala__isNegative_getter(&v223) < v28)
    return -1;
  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v199;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  v29 = _So9NSDecimala__isNegative_getter(&v223);
  LODWORD(v223) = v27;
  WORD2(v223) = v204;
  HIWORD(v223) = v215;
  LOWORD(v224) = a5;
  WORD1(v224) = v25;
  WORD2(v224) = v24;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v26;
  HIWORD(v225) = v22;
  if (v29 < _So9NSDecimala__isNegative_getter(&v223))
    return 1;
  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v199;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  if (!_So9NSDecimala__length_getter(&v223))
  {
    LODWORD(v223) = v27;
    WORD2(v223) = v204;
    HIWORD(v223) = v215;
    LOWORD(v224) = a5;
    WORD1(v224) = v25;
    WORD2(v224) = v24;
    HIWORD(v224) = HIWORD(a5);
    LOWORD(v225) = v26;
    HIWORD(v225) = v22;
    if (_So9NSDecimala__length_getter(&v223))
      return -1;
    else
      return 0;
  }
  LODWORD(v223) = v27;
  WORD2(v223) = v204;
  HIWORD(v223) = v215;
  v196 = a5;
  LOWORD(v224) = a5;
  WORD1(v224) = v25;
  WORD2(v224) = v24;
  HIWORD(v224) = HIWORD(a5);
  LOWORD(v225) = v26;
  HIWORD(v225) = v22;
  if (!_So9NSDecimala__length_getter(&v223))
  {
    LODWORD(v223) = v10;
    WORD2(v223) = v205;
    HIWORD(v223) = v208;
    LOWORD(v224) = v211;
    WORD1(v224) = v199;
    WORD2(v224) = v200;
    HIWORD(v224) = v201;
    LOWORD(v225) = a3;
    HIWORD(v225) = v203;
    return _So9NSDecimala__length_getter(&v223) != 0;
  }
  LODWORD(v223) = v10;
  WORD2(v223) = v205;
  HIWORD(v223) = v208;
  LOWORD(v224) = v211;
  WORD1(v224) = v199;
  WORD2(v224) = v200;
  HIWORD(v224) = v201;
  LOWORD(v225) = a3;
  HIWORD(v225) = v203;
  LODWORD(v220) = v27;
  WORD2(v220) = v204;
  HIWORD(v220) = v215;
  LOWORD(v221) = a5;
  WORD1(v221) = v25;
  WORD2(v221) = v24;
  HIWORD(v221) = HIWORD(a5);
  LOWORD(v222) = v26;
  HIWORD(v222) = v22;
  *(_DWORD *)v219 = v10;
  *(_WORD *)&v219[4] = v205;
  *(_DWORD *)&v219[6] = __PAIR32__(v211, v208);
  *(_DWORD *)&v219[10] = __PAIR32__(v200, v199);
  *(_WORD *)&v219[14] = v201;
  *(_WORD *)&v219[16] = a3;
  *(_WORD *)&v219[18] = v203;
  v30 = _So9NSDecimala__exponent_getter(v219);
  *(_DWORD *)v219 = v27;
  *(_WORD *)&v219[4] = v204;
  *(_WORD *)&v219[6] = v215;
  *(_WORD *)&v219[8] = v196;
  *(_WORD *)&v219[10] = v25;
  *(_WORD *)&v219[12] = v24;
  *(_WORD *)&v219[14] = v23;
  *(_WORD *)&v219[16] = v26;
  *(_WORD *)&v219[18] = v22;
  v31 = _So9NSDecimala__exponent_getter(v219);
  v32 = v30 - v31;
  if (v30 == v31)
    goto LABEL_180;
  v33 = v32;
  if (v32 < 0)
  {
    v38 = v27;
    v34 = (char *)&v220 + 4;
    v33 = -v33;
    v36 = (uint64_t)&v220;
    v37 = &v223;
    v35 = v204;
  }
  else
  {
    v34 = (char *)&v223 + 4;
    v35 = v205;
    v36 = (uint64_t)&v223;
    v37 = &v220;
    v38 = v197;
  }
  v44 = v38 | ((unint64_t)v35 << 32) | ((unint64_t)*((unsigned __int16 *)v34 + 1) << 48);
  v45 = *(_QWORD *)(v34 + 4);
  v46 = *((_DWORD *)v34 + 3);
  NSDecimal.asVariableLengthInteger()(v44, v45, v46);
  v48 = v47;
  if (!v33)
    goto LABEL_80;
  LODWORD(v206) = v46;
  v209 = v45;
  v212 = v44;
  v216 = v37;
  v49 = specialized abs<A>(_:)(v33);
  v50 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v50 != -1)
    goto LABEL_336;
  while (1)
  {
    v51 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
    rawValue = powerOfTen._rawValue;
    v53 = *((_QWORD *)powerOfTen._rawValue + 2);
    if (v53 > v49)
      break;
    v202 = v33;
    if (!v53)
      goto LABEL_346;
    v33 = v53 - 1;
    v55 = v48;
    while (1)
    {
      v60 = __OFSUB__(v49, v33);
      v49 -= v33;
      if (v60)
        goto LABEL_334;
      v61 = v51[499];
      if ((unint64_t)v53 > *(_QWORD *)(v61 + 16))
        break;
      v62 = *(_QWORD *)(v55 + 16);
      if (v62 && (v63 = *(_QWORD *)(v61 + 8 * v33 + 32), (v54 = *(char **)(v63 + 16)) != 0))
      {
        if (__OFADD__(v62, v54))
          goto LABEL_347;
        v203 = v48;
        v204 = v36;
        if ((uint64_t)&v54[v62] >= 8)
          v58 = 8;
        else
          v58 = (uint64_t)&v54[v62];
        if (v58 < 0)
          goto LABEL_391;
        swift_bridgeObjectRetain();
        v64 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v64 + 16) = v58;
        v36 = v64 + 32;
        bzero((void *)(v64 + 32), 2 * v58);
        v66 = 0;
        v67 = v63 + 32;
        do
        {
          v68 = 0;
          v69 = 0;
          v70 = v66++;
          do
          {
            v73 = (uint64_t)&v70[v69];
            if (__OFADD__(v69, v70))
            {
              __break(1u);
              swift_bridgeObjectRelease();
              goto LABEL_175;
            }
            if (v73 >= v58)
            {
              if (v68)
                goto LABEL_77;
              v68 = *(unsigned __int16 *)(v67 + 2 * (_QWORD)v70);
              if (*(_WORD *)(v67 + 2 * (_QWORD)v70))
              {
                v68 = *(unsigned __int16 *)(v55 + 2 * v69 + 32);
                if (*(_WORD *)(v55 + 2 * v69 + 32))
                  goto LABEL_77;
              }
            }
            else
            {
              if (v73 < 0)
              {
                __break(1u);
LABEL_282:
                __break(1u);
LABEL_283:
                v142 = v65;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_284:
                v59 = v203;
                goto LABEL_285;
              }
              if ((unint64_t)v73 >= *(_QWORD *)(v64 + 16))
                goto LABEL_282;
              v71 = 2 * v73;
              v72 = v68
                  + *(unsigned __int16 *)(v36 + v71)
                  + *(unsigned __int16 *)(v55 + 2 * v69 + 32) * *(unsigned __int16 *)(v67 + 2 * (_QWORD)v70);
              v68 = HIWORD(v72);
              *(_WORD *)(v36 + v71) = v72;
            }
            ++v69;
          }
          while (v62 != v69);
          if (v68)
          {
            v60 = __OFADD__(v62, v70);
            v74 = (uint64_t)&v70[v62];
            if (v60)
              goto LABEL_351;
            if (v74 >= v58)
              goto LABEL_77;
            if (v74 < 0)
              goto LABEL_352;
            if ((unint64_t)v74 >= *(_QWORD *)(v64 + 16))
              goto LABEL_353;
            *(_WORD *)(v36 + 2 * v74) = v68;
          }
        }
        while (v66 != v54);
        v75 = *(_QWORD *)(v64 + 16);
        if (v75 && !*(_WORD *)(v36 + 2 * v75 - 2))
        {
          v76 = v75 + 14;
          do
          {
            *(_QWORD *)(v64 + 16) = v76 - 15;
            if (v76 == 15)
              break;
          }
          while (!*(unsigned __int16 *)(v64 + 2 * v76--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = v64;
        v48 = v203;
        v36 = v204;
        v51 = &lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
      }
      else
      {
        swift_bridgeObjectRelease();
        v55 = MEMORY[0x1E0DEE9D8];
      }
      if (v53 > v49)
      {
        rawValue = (_QWORD *)v51[499];
        v54 = 0;
        v33 = v202;
        if (v49 < 0)
          goto LABEL_76;
        goto LABEL_27;
      }
    }
LABEL_335:
    __break(1u);
LABEL_336:
    swift_once();
  }
  v54 = 0;
  v55 = v48;
  if (v49 < 0)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    v58 = swift_allocError();
    *v78 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    v79 = 0;
    v36 = v204;
    v33 = v202;
    goto LABEL_114;
  }
LABEL_27:
  if ((unint64_t)v49 >= rawValue[2])
  {
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
    goto LABEL_356;
  }
  v56 = *(_QWORD *)(v55 + 16);
  if (!v56 || (v57 = rawValue[v49 + 4], (v58 = *(_QWORD *)(v57 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = MEMORY[0x1E0DEE9D8];
    goto LABEL_79;
  }
  v59 = v56 + v58;
  if (__OFADD__(v56, v58))
    goto LABEL_357;
  v203 = v48;
  if (v59 > 7)
  {
    v59 = 8;
LABEL_85:
    swift_bridgeObjectRetain();
    v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v48 + 16) = v59;
    bzero((void *)(v48 + 32), 2 * v59);
    goto LABEL_86;
  }
  if (v59 < 0)
    goto LABEL_391;
  if (v59)
    goto LABEL_85;
  swift_bridgeObjectRetain();
  v48 = MEMORY[0x1E0DEE9D8];
LABEL_86:
  v82 = 0;
  v83 = v57 + 32;
  v84 = v48 + 32;
  while (1)
  {
    if (v82 == v58)
      goto LABEL_350;
    v85 = 0;
    v86 = 0;
    v87 = v82 + 1;
    do
    {
      if (v56 == v86)
        goto LABEL_292;
      v90 = v86 + v82;
      if (__OFADD__(v86, v82))
      {
LABEL_293:
        __break(1u);
        goto LABEL_294;
      }
      if (v90 >= v59)
      {
        if (v85)
          goto LABEL_113;
        v85 = *(unsigned __int16 *)(v83 + 2 * v82);
        if (*(_WORD *)(v83 + 2 * v82))
        {
          v85 = *(unsigned __int16 *)(v55 + 2 * v86 + 32);
          if (*(_WORD *)(v55 + 2 * v86 + 32))
            goto LABEL_113;
        }
      }
      else
      {
        if (v90 < 0)
          goto LABEL_327;
        if ((unint64_t)v90 >= *(_QWORD *)(v48 + 16))
        {
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_279:
          swift_bridgeObjectRelease();
LABEL_175:
          swift_bridgeObjectRelease();
          goto LABEL_178;
        }
        v88 = 2 * v90;
        v89 = v85
            + *(unsigned __int16 *)(v84 + v88)
            + *(unsigned __int16 *)(v55 + 2 * v86 + 32) * *(unsigned __int16 *)(v83 + 2 * v82);
        v85 = HIWORD(v89);
        *(_WORD *)(v84 + v88) = v89;
      }
      ++v86;
    }
    while (v56 != v86);
    if (!v85)
      goto LABEL_107;
    v60 = __OFADD__(v56, v82);
    v91 = v56 + v82;
    if (v60)
      goto LABEL_360;
    if (v91 >= v59)
      break;
    if (v91 < 0)
      goto LABEL_361;
    if ((unint64_t)v91 >= *(_QWORD *)(v48 + 16))
      goto LABEL_362;
    *(_WORD *)(v84 + 2 * v91) = v85;
LABEL_107:
    v82 = v87;
    if (v87 == v58)
    {
      v92 = *(_QWORD *)(v48 + 16);
      if (v92 && !*(_WORD *)(v84 + 2 * v92 - 2))
      {
        do
        {
          *(_QWORD *)(v48 + 16) = v92 - 1;
          if (v92 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v48 + 28 + 2 * v92--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_79:
      v37 = v216;
LABEL_80:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v48);
      if (!v54)
      {
        v80 = *(_QWORD *)(v48 + 16);
        swift_bridgeObjectRelease();
        if (!HIDWORD(v80))
        {
          _So9NSDecimala__length_setter(v80, (_DWORD *)v36);
          *(_DWORD *)v219 = *(_DWORD *)v37;
          *(_OWORD *)&v219[4] = *(_OWORD *)((char *)v37 + 4);
          v81 = _So9NSDecimala__exponent_getter(v219);
LABEL_83:
          _So9NSDecimala__exponent_setter(v81, (_BYTE *)v36);
          _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v36);
          goto LABEL_180;
        }
        goto LABEL_392;
      }
      goto LABEL_178;
    }
  }
LABEL_113:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v58 = swift_allocError();
  *v94 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  v79 = 0;
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v212, v209, v206);
  v96 = *(_QWORD *)(v95 + 16);
  swift_bridgeObjectRelease();
  v97 = floor((double)(8 - v96) * 4.81647993);
  if ((~*(_QWORD *)&v97 & 0x7FF0000000000000) == 0)
    goto LABEL_341;
  v48 = (uint64_t)&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
  v98 = (uint64_t)v216;
  if (v97 <= -9.22337204e18)
  {
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }
  if (v97 >= 9.22337204e18)
  {
LABEL_343:
    __break(1u);
    goto LABEL_344;
  }
  v59 = (uint64_t)v97;
  NSDecimal.asVariableLengthInteger()(*v216, v216[1], *((_DWORD *)v216 + 4));
  v60 = __OFSUB__(v59, v33);
  v100 = v59 - v33;
  if (v60)
  {
LABEL_344:
    __break(1u);
    goto LABEL_345;
  }
  v101 = v99;
  if (!v100)
  {
    v53 = v99;
    goto LABEL_177;
  }
  v53 = specialized abs<A>(_:)(v100);
  v102 = powerOfTen._rawValue;
  v103 = *((_QWORD *)powerOfTen._rawValue + 2);
  v204 = v36;
  if (v103 > v53)
  {
    swift_bridgeObjectRetain();
    v36 = v101;
    if (v53 < 0)
      goto LABEL_276;
    goto LABEL_121;
  }
  if (!v103)
    goto LABEL_358;
  v106 = v103 - 1;
  swift_bridgeObjectRetain();
  v36 = v101;
  v207 = v100;
  v212 = v101;
LABEL_136:
  v107 = *(_QWORD *)(v48 + 3992);
  if ((unint64_t)v103 > *(_QWORD *)(v107 + 16))
    goto LABEL_340;
  v108 = *(_QWORD *)(v107 + 8 * v106 + 32);
  if (v100 < 0)
  {
    v58 = v59;
    v123 = v48;
    v124 = v106;
    swift_bridgeObjectRetain();
    v125 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v36, v108, 8uLL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = v125;
    v106 = v124;
    v48 = v123;
    v59 = v58;
    goto LABEL_135;
  }
  v209 = v79;
  v109 = *(_QWORD *)(v36 + 16);
  if (!v109 || (v54 = *(char **)(v108 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
    goto LABEL_134;
  }
  v203 = v59;
  if (__OFADD__(v109, v54))
    goto LABEL_359;
  v202 = v106;
  if ((uint64_t)&v54[v109] >= 8)
    v59 = 8;
  else
    v59 = (uint64_t)&v54[v109];
  if (v59 < 0)
    goto LABEL_391;
  swift_bridgeObjectRetain();
  v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v48 + 16) = v59;
  v110 = v48 + 32;
  bzero((void *)(v48 + 32), 2 * v59);
  v111 = 0;
  v112 = v108 + 32;
LABEL_146:
  v113 = 0;
  v114 = 0;
  v115 = v111++;
  while (1)
  {
    v118 = (uint64_t)&v115[v114];
    if (__OFADD__(v114, v115))
      break;
    if (v118 >= v59)
    {
      if (v113)
        goto LABEL_172;
      v113 = *(unsigned __int16 *)(v112 + 2 * (_QWORD)v115);
      if (*(_WORD *)(v112 + 2 * (_QWORD)v115))
      {
        v113 = *(unsigned __int16 *)(v36 + 2 * v114 + 32);
        if (*(_WORD *)(v36 + 2 * v114 + 32))
          goto LABEL_172;
      }
    }
    else
    {
      if (v118 < 0)
        goto LABEL_329;
      if ((unint64_t)v118 >= *(_QWORD *)(v48 + 16))
        goto LABEL_330;
      v116 = 2 * v118;
      v117 = v113
           + *(unsigned __int16 *)(v110 + v116)
           + *(unsigned __int16 *)(v36 + 2 * v114 + 32) * *(unsigned __int16 *)(v112 + 2 * (_QWORD)v115);
      v113 = HIWORD(v117);
      *(_WORD *)(v110 + v116) = v117;
    }
    if (v109 == ++v114)
    {
      if (!v113)
        goto LABEL_164;
      v60 = __OFADD__(v109, v115);
      v119 = (uint64_t)&v115[v109];
      if (v60)
        goto LABEL_367;
      if (v119 >= v59)
      {
LABEL_172:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        v126 = swift_allocError();
        *v127 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v128 = (void *)v126;
        goto LABEL_179;
      }
      if (v119 < 0)
        goto LABEL_370;
      if ((unint64_t)v119 >= *(_QWORD *)(v48 + 16))
        goto LABEL_371;
      *(_WORD *)(v110 + 2 * v119) = v113;
LABEL_164:
      if (v111 == v54)
      {
        v120 = *(_QWORD *)(v48 + 16);
        if (v120 && !*(_WORD *)(v110 + 2 * v120 - 2))
        {
          v121 = v120 + 14;
          do
          {
            *(_QWORD *)(v48 + 16) = v121 - 15;
            if (v121 == 15)
              break;
          }
          while (!*(unsigned __int16 *)(v48 + 2 * v121--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 = v48;
        v48 = 0x1EDC3F000;
        v106 = v202;
        v59 = v203;
LABEL_134:
        v100 = v207;
        v79 = v209;
LABEL_135:
        v53 -= v106;
        if (v103 <= v53)
          goto LABEL_136;
        v102 = *(_QWORD **)(v48 + 3992);
        if (v53 < 0)
        {
LABEL_276:
          __break(1u);
          goto LABEL_277;
        }
LABEL_121:
        if ((unint64_t)v53 < v102[2])
        {
          v49 = v102[v53 + 4];
          if (v100 < 0)
          {
            swift_bridgeObjectRetain();
            v53 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v36, v49, 8uLL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v104 = *(_QWORD *)(v36 + 16);
            if (v104)
            {
              v58 = *(_QWORD *)(v49 + 16);
              if (v58)
              {
                v206 = v100;
                v33 = v59;
                v105 = v104 + v58;
                if (__OFADD__(v104, v58))
                  goto LABEL_374;
                if (v105 > 7)
                {
                  v105 = 8;
                }
                else
                {
                  if (v105 < 0)
                    goto LABEL_391;
                  if (!v105)
                  {
                    swift_bridgeObjectRetain();
                    v53 = MEMORY[0x1E0DEE9D8];
LABEL_206:
                    v145 = 0;
                    v146 = v49 + 32;
                    v147 = v53 + 32;
LABEL_207:
                    if (v145 == v58)
                      goto LABEL_372;
                    v148 = 0;
                    v149 = 0;
                    v150 = v145 + 1;
                    while (v104 != v149)
                    {
                      v151 = v149 + v145;
                      if (__OFADD__(v149, v145))
                        goto LABEL_333;
                      if (v151 >= v105)
                      {
                        if (v148)
                          goto LABEL_232;
                        v148 = *(unsigned __int16 *)(v146 + 2 * v145);
                        if (*(_WORD *)(v146 + 2 * v145))
                        {
                          v148 = *(unsigned __int16 *)(v36 + 2 * v149 + 32);
                          if (*(_WORD *)(v36 + 2 * v149 + 32))
                            goto LABEL_232;
                        }
                      }
                      else
                      {
                        if (v151 < 0)
                        {
                          __break(1u);
LABEL_338:
                          __break(1u);
LABEL_339:
                          __break(1u);
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
                          goto LABEL_342;
                        }
                        if ((unint64_t)v151 >= *(_QWORD *)(v53 + 16))
                          goto LABEL_338;
                        v152 = 2 * v151;
                        v153 = v148
                             + *(unsigned __int16 *)(v147 + v152)
                             + *(unsigned __int16 *)(v36 + 2 * v149 + 32) * *(unsigned __int16 *)(v146 + 2 * v145);
                        v148 = HIWORD(v153);
                        *(_WORD *)(v147 + v152) = v153;
                      }
                      if (v104 == ++v149)
                      {
                        if (!v148)
                          goto LABEL_226;
                        v60 = __OFADD__(v104, v145);
                        v154 = v104 + v145;
                        if (v60)
                          goto LABEL_375;
                        if (v154 >= v105)
                        {
LABEL_232:
                          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                          v157 = swift_allocError();
                          *v158 = 0;
                          swift_willThrow();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v128 = (void *)v157;
                          goto LABEL_179;
                        }
                        if (v154 < 0)
                          goto LABEL_376;
                        if ((unint64_t)v154 >= *(_QWORD *)(v53 + 16))
                          goto LABEL_377;
                        *(_WORD *)(v147 + 2 * v154) = v148;
LABEL_226:
                        v145 = v150;
                        if (v150 == v58)
                        {
                          v155 = *(_QWORD *)(v53 + 16);
                          if (v155 && !*(_WORD *)(v147 + 2 * v155 - 2))
                          {
                            do
                            {
                              *(_QWORD *)(v53 + 16) = v155 - 1;
                              if (v155 == 1)
                                break;
                            }
                            while (!*(unsigned __int16 *)(v53 + 28 + 2 * v155--));
                          }
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v98 = (uint64_t)v216;
                          v59 = v33;
                          v36 = v204;
                          v100 = v206;
                          goto LABEL_177;
                        }
                        goto LABEL_207;
                      }
                    }
                    __break(1u);
LABEL_333:
                    __break(1u);
LABEL_334:
                    __break(1u);
                    goto LABEL_335;
                  }
                }
                swift_bridgeObjectRetain();
                v53 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                *(_QWORD *)(v53 + 16) = v105;
                bzero((void *)(v53 + 32), 2 * v105);
                goto LABEL_206;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v53 = MEMORY[0x1E0DEE9D8];
          }
          v36 = v204;
          v98 = (uint64_t)v216;
LABEL_177:
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v53);
          if (!v54)
            goto LABEL_185;
LABEL_178:
          swift_bridgeObjectRelease();
          v128 = v54;
          goto LABEL_179;
        }
LABEL_356:
        __break(1u);
LABEL_357:
        __break(1u);
LABEL_358:
        __break(1u);
LABEL_359:
        __break(1u);
LABEL_360:
        __break(1u);
LABEL_361:
        __break(1u);
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
        goto LABEL_364;
      }
      goto LABEL_146;
    }
  }
  __break(1u);
LABEL_325:
  v140 = *(_QWORD *)(v48 + 3992);
  if (v109 < 0)
    goto LABEL_326;
  while (2)
  {
    if ((unint64_t)v109 >= *(_QWORD *)(v140 + 16))
      goto LABEL_378;
    v57 = *(_QWORD *)(v140 + 8 * v109 + 32);
    if (v203 < 0)
    {
      swift_bridgeObjectRetain();
      v65 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v59, v57, 8uLL);
      if (v54)
        goto LABEL_279;
      goto LABEL_283;
    }
    v58 = *(_QWORD *)(v59 + 16);
    if (!v58 || (v53 = *(_QWORD *)(v57 + 16)) == 0)
    {
LABEL_277:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v142 = MEMORY[0x1E0DEE9D8];
      goto LABEL_284;
    }
    v56 = v36;
    v141 = v58 + v53;
    if (__OFADD__(v58, v53))
      goto LABEL_387;
    if (v141 > 7)
    {
LABEL_294:
      v141 = 8;
      goto LABEL_295;
    }
    if (v141 < 0)
      goto LABEL_391;
    if (!v141)
    {
      swift_bridgeObjectRetain();
      v142 = MEMORY[0x1E0DEE9D8];
      goto LABEL_296;
    }
LABEL_295:
    swift_bridgeObjectRetain();
    v142 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v142 + 16) = v141;
    bzero((void *)(v142 + 32), 2 * v141);
LABEL_296:
    v182 = 0;
    v183 = v57 + 32;
    v184 = v142 + 32;
    while (2)
    {
      if (v182 == v53)
        goto LABEL_386;
      v185 = 0;
      v186 = 0;
      v187 = v182 + 1;
      do
      {
        if (v58 == v186)
          goto LABEL_354;
        v190 = v186 + v182;
        if (__OFADD__(v186, v182))
          goto LABEL_355;
        if (v190 >= v141)
        {
          if (v185)
            goto LABEL_323;
          v185 = *(unsigned __int16 *)(v183 + 2 * v182);
          if (*(_WORD *)(v183 + 2 * v182))
          {
            v185 = *(unsigned __int16 *)(v59 + 2 * v186 + 32);
            if (*(_WORD *)(v59 + 2 * v186 + 32))
              goto LABEL_323;
          }
        }
        else
        {
          if (v190 < 0)
            goto LABEL_368;
          if ((unint64_t)v190 >= *(_QWORD *)(v142 + 16))
            goto LABEL_369;
          v188 = 2 * v190;
          v189 = v185
               + *(unsigned __int16 *)(v184 + v188)
               + *(unsigned __int16 *)(v59 + 2 * v186 + 32) * *(unsigned __int16 *)(v183 + 2 * v182);
          v185 = HIWORD(v189);
          *(_WORD *)(v184 + v188) = v189;
        }
        ++v186;
      }
      while (v58 != v186);
      if (!v185)
      {
LABEL_317:
        v182 = v187;
        if (v187 != v53)
          continue;
        v192 = *(_QWORD *)(v142 + 16);
        if (v192 && !*(_WORD *)(v184 + 2 * v192 - 2))
        {
          do
          {
            *(_QWORD *)(v142 + 16) = v192 - 1;
            if (v192 == 1)
              break;
          }
          while (!*(unsigned __int16 *)(v142 + 28 + 2 * v192--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 = v56;
        goto LABEL_284;
      }
      break;
    }
    v60 = __OFADD__(v58, v182);
    v191 = v58 + v182;
    if (v60)
      goto LABEL_388;
    if (v191 < v141)
    {
      if (v191 < 0)
        goto LABEL_389;
      if ((unint64_t)v191 >= *(_QWORD *)(v142 + 16))
        goto LABEL_390;
      *(_WORD *)(v184 + 2 * v191) = v185;
      goto LABEL_317;
    }
LABEL_323:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    v194 = swift_allocError();
    *v195 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v128 = (void *)v194;
LABEL_179:

LABEL_180:
    while (2)
    {
      v59 = v223;
      v58 = WORD2(v223);
      v213 = v224;
      v36 = WORD1(v224);
      v53 = WORD2(v224);
      v217 = v225;
      v48 = HIWORD(v223);
      v129 = HIWORD(v224);
      v100 = HIWORD(v225);
      NSDecimal.asVariableLengthInteger()(v223 | ((unint64_t)WORD2(v223) << 32) | ((unint64_t)HIWORD(v223) << 48), (unsigned __int16)v224 | ((unint64_t)WORD1(v224) << 16) | ((unint64_t)WORD2(v224) << 32) | ((unint64_t)HIWORD(v224) << 48), (unsigned __int16)v225 | (HIWORD(v225) << 16));
      v98 = v130;
      NSDecimal.asVariableLengthInteger()(v220, v221, v222);
      v54 = (char *)v131;
      v42 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v98, v131);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_DWORD *)v219 = v59;
      *(_WORD *)&v219[4] = v58;
      *(_WORD *)&v219[6] = v48;
      *(_WORD *)&v219[8] = v213;
      *(_WORD *)&v219[10] = v36;
      *(_WORD *)&v219[12] = v53;
      *(_WORD *)&v219[14] = v129;
      *(_WORD *)&v219[16] = v217;
      *(_WORD *)&v219[18] = v100;
      if (!_So9NSDecimala__isNegative_getter(v219))
        return v42;
      switch(v42)
      {
        case -1:
          return 1;
        case 1:
          return -1;
        case 0:
          return v42;
      }
      type metadata accessor for NSComparisonResult(0);
      *(_QWORD *)v219 = v42;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
LABEL_185:
      v132 = *(_QWORD *)(v53 + 16);
      swift_bridgeObjectRelease();
      if (v132 >> 31)
        goto LABEL_363;
      _So9NSDecimala__length_setter(v132, (_DWORD *)v98);
      if (v100 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }
      if (v100 > 0x7FFFFFFF)
      {
LABEL_365:
        __break(1u);
        goto LABEL_366;
      }
      *(_DWORD *)v219 = *(_DWORD *)v98;
      *(_OWORD *)&v219[4] = *(_OWORD *)(v98 + 4);
      v133 = _So9NSDecimala__exponent_getter(v219);
      v60 = __OFSUB__(v133, (_DWORD)v100);
      v134 = (v133 - v100);
      if (v60)
      {
LABEL_366:
        __break(1u);
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
      }
      _So9NSDecimala__exponent_setter(v134, (_BYTE *)v98);
      _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v98);
      *(_DWORD *)v219 = *(_DWORD *)v98;
      *(_OWORD *)&v219[4] = *(_OWORD *)(v98 + 4);
      v135 = _So9NSDecimala__length_getter(v219);
      v136 = *(unsigned __int16 *)(v36 + 4);
      v137 = *(unsigned __int16 *)(v36 + 6);
      if (!v135)
      {
        v143 = *(_DWORD *)(v36 + 16);
        *(_DWORD *)v219 = *(_DWORD *)v36;
        *(_WORD *)&v219[4] = v136;
        *(_WORD *)&v219[6] = v137;
        *(_QWORD *)&v219[8] = *(_QWORD *)(v36 + 8);
        *(_DWORD *)&v219[16] = v143;
        v144 = _So9NSDecimala__exponent_getter(v219);
        _So9NSDecimala__exponent_setter(v144, (_BYTE *)v98);
        continue;
      }
      break;
    }
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v36 | (unint64_t)(v136 << 32) | (v137 << 48), *(_QWORD *)(v36 + 8), *(_DWORD *)(v36 + 16));
    v139 = v138;
    if (v59)
    {
      v109 = specialized abs<A>(_:)(v59);
      v140 = *(_QWORD *)(v48 + 3992);
      v53 = *(_QWORD *)(v140 + 16);
      v203 = v59;
      if (v53 > v109)
      {
        swift_bridgeObjectRetain();
        v59 = v139;
        if ((v109 & 0x8000000000000000) == 0)
          continue;
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
        goto LABEL_328;
      }
      if (v53)
      {
        v159 = v53 - 1;
        swift_bridgeObjectRetain();
        v59 = v139;
        v218 = v53 - 1;
        while (1)
        {
          v160 = *(_QWORD *)(v48 + 3992);
          if ((unint64_t)v53 > *(_QWORD *)(v160 + 16))
            break;
          v58 = *(_QWORD *)(v160 + 8 * v159 + 32);
          if (v203 < 0)
          {
            v178 = v53;
            swift_bridgeObjectRetain();
            v179 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v59, v58, 8uLL);
            if (v54)
              goto LABEL_279;
            v180 = v179;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v59 = v180;
            v53 = v178;
          }
          else
          {
            v161 = *(_QWORD *)(v59 + 16);
            if (v161 && (v162 = *(_QWORD *)(v58 + 16)) != 0)
            {
              v214 = v139;
              if (__OFADD__(v161, v162))
                goto LABEL_380;
              v210 = v53;
              if (v161 + v162 >= 8)
                v163 = 8;
              else
                v163 = v161 + v162;
              if (v163 < 0)
                goto LABEL_391;
              swift_bridgeObjectRetain();
              v164 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(_QWORD *)(v164 + 16) = v163;
              v165 = v164 + 32;
              bzero((void *)(v164 + 32), 2 * v163);
              v166 = 0;
              v167 = v58 + 32;
              do
              {
                v168 = 0;
                v169 = 0;
                v170 = v166++;
                do
                {
                  v171 = v169 + v170;
                  if (__OFADD__(v169, v170))
                    goto LABEL_339;
                  if (v171 >= v163)
                  {
                    if (v168)
                      goto LABEL_172;
                    v168 = *(unsigned __int16 *)(v167 + 2 * v170);
                    if (*(_WORD *)(v167 + 2 * v170))
                    {
                      v168 = *(unsigned __int16 *)(v59 + 2 * v169 + 32);
                      if (*(_WORD *)(v59 + 2 * v169 + 32))
                        goto LABEL_172;
                    }
                  }
                  else
                  {
                    if (v171 < 0)
                      goto LABEL_348;
                    if ((unint64_t)v171 >= *(_QWORD *)(v164 + 16))
                      goto LABEL_349;
                    v172 = 2 * v171;
                    v173 = v168
                         + *(unsigned __int16 *)(v165 + v172)
                         + *(unsigned __int16 *)(v59 + 2 * v169 + 32) * *(unsigned __int16 *)(v167 + 2 * v170);
                    v168 = HIWORD(v173);
                    *(_WORD *)(v165 + v172) = v173;
                  }
                  ++v169;
                }
                while (v161 != v169);
                if (v168)
                {
                  v60 = __OFADD__(v161, v170);
                  v174 = v161 + v170;
                  if (v60)
                    goto LABEL_383;
                  if (v174 >= v163)
                    goto LABEL_172;
                  if (v174 < 0)
                    goto LABEL_384;
                  if ((unint64_t)v174 >= *(_QWORD *)(v164 + 16))
                    goto LABEL_385;
                  *(_WORD *)(v165 + 2 * v174) = v168;
                }
              }
              while (v166 != v162);
              v175 = *(_QWORD *)(v164 + 16);
              if (v175 && !*(_WORD *)(v165 + 2 * v175 - 2))
              {
                v176 = v175 + 14;
                do
                {
                  *(_QWORD *)(v164 + 16) = v176 - 15;
                  if (v176 == 15)
                    break;
                }
                while (!*(unsigned __int16 *)(v164 + 2 * v176--));
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v59 = v164;
              v48 = 0x1EDC3F000;
              v53 = v210;
              v139 = v214;
            }
            else
            {
              swift_bridgeObjectRelease();
              v59 = MEMORY[0x1E0DEE9D8];
            }
            v159 = v218;
          }
          v109 -= v159;
          if (v53 > v109)
            goto LABEL_325;
        }
        __break(1u);
LABEL_374:
        __break(1u);
LABEL_375:
        __break(1u);
LABEL_376:
        __break(1u);
LABEL_377:
        __break(1u);
LABEL_378:
        __break(1u);
      }
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
      goto LABEL_382;
    }
    break;
  }
  v142 = v138;
LABEL_285:
  v56 = v36;
  NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v142);
  if (v54)
    goto LABEL_178;
  v57 = *(_QWORD *)(v142 + 16);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v57))
  {
    _So9NSDecimala__length_setter(v57, (_DWORD *)v36);
    if (v59 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_381;
    if (v59 <= 0x7FFFFFFF)
    {
      *(_DWORD *)v219 = *(_DWORD *)v36;
      *(_OWORD *)&v219[4] = *(_OWORD *)(v36 + 4);
      v181 = _So9NSDecimala__exponent_getter(v219);
      v60 = __OFSUB__(v181, (_DWORD)v59);
      v81 = (v181 - v59);
      if (!v60)
        goto LABEL_83;
      __break(1u);
LABEL_292:
      __break(1u);
      goto LABEL_293;
    }
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
LABEL_392:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t result;
  BOOL v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v29 = a1;
  v4 = a4;
  v5 = a3;
  v6 = a2;
  v26 = a2;
  v7 = HIDWORD(a2);
  v8 = HIWORD(a2);
  v27 = a3;
  v9 = a3 >> 16;
  v10 = HIDWORD(a3);
  v11 = HIWORD(a3);
  v12 = HIWORD(a4);
  v28 = a4;
  if (!_So9NSDecimala__length_getter(&v26))
  {
    LODWORD(v26) = v6;
    WORD2(v26) = v7;
    HIWORD(v26) = v8;
    LOWORD(v27) = v5;
    WORD1(v27) = v9;
    WORD2(v27) = v10;
    HIWORD(v27) = v11;
    LOWORD(v28) = v4;
    HIWORD(v28) = v12;
    if (_So9NSDecimala__isNegative_getter(&v26))
      goto LABEL_12;
  }
  LODWORD(v26) = v6;
  WORD2(v26) = v7;
  HIWORD(v26) = v8;
  LOWORD(v27) = v5;
  WORD1(v27) = v9;
  WORD2(v27) = v10;
  HIWORD(v27) = v11;
  LOWORD(v28) = v4;
  HIWORD(v28) = v12;
  if (!_So9NSDecimala__length_getter(&v26))
    return 0;
  LODWORD(v26) = v6;
  WORD2(v26) = v7;
  HIWORD(v26) = v8;
  LOWORD(v27) = v5;
  WORD1(v27) = v9;
  WORD2(v27) = v10;
  HIWORD(v27) = v11;
  LOWORD(v28) = v4;
  HIWORD(v28) = v12;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v5;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v4;
  v25 = v12;
  result = _So9NSDecimala__exponent_getter((char *)&v17);
  if (v29 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v29 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = __OFADD__((_DWORD)result, (_DWORD)v29);
  result = (result + v29);
  if (v14)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if ((int)result <= -129)
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v15 = 1;
    return swift_willThrow();
  }
  if ((int)result >= 128)
  {
LABEL_12:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v16 = 0;
    return swift_willThrow();
  }
  _So9NSDecimala__exponent_setter(result, &v26);
  return v26;
}

uint64_t specialized NSDecimal._divide(by:roundingMode:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t v6;
  int v9;
  int v10;
  Swift::OpaquePointer v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *rawValue;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v46;
  char *v47;
  char v48;
  uint64_t result;
  unsigned __int16 v50;
  unsigned int v51;
  unsigned int v52;
  __int16 v53;
  unsigned int v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  int v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  unint64_t v69;
  __int16 v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int16 v76;
  unsigned __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v95;
  uint64_t v96;
  unint64_t v97;
  int isNegative_getter;
  _BOOL8 v99;
  int v100;
  uint64_t v101;
  __int16 v102;
  unsigned __int16 v103;
  unsigned int v104;
  __int16 v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int64_t v110;
  unsigned int v111;
  unint64_t v112;
  unsigned __int16 v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned __int16 v117;
  unint64_t v118;
  unsigned int v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  unsigned __int16 v130;
  unint64_t v131;
  unsigned __int16 v132;
  unsigned __int16 v133;
  unsigned __int16 v134;
  uint64_t v135;
  __int16 v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v141;
  __int16 v142;
  __int16 v143;
  unsigned __int16 v144;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  unsigned __int16 v148;
  __int16 v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  uint64_t v159;

  LODWORD(v6) = a4;
  v159 = *MEMORY[0x1E0C80C00];
  v156 = a4;
  v127 = HIDWORD(a4);
  v137 = HIWORD(a4);
  v131 = a5 >> 16;
  v133 = a5;
  v157 = a5;
  v135 = HIDWORD(a5);
  v129 = HIWORD(a5);
  v130 = a6;
  v158 = a6;
  v139 = HIWORD(a6);
  if (!_So9NSDecimala__length_getter(&v156))
  {
    LODWORD(v156) = v6;
    WORD2(v156) = v127;
    HIWORD(v156) = v137;
    LOWORD(v157) = v133;
    WORD1(v157) = v131;
    WORD2(v157) = v135;
    HIWORD(v157) = v129;
    LOWORD(v158) = v130;
    HIWORD(v158) = v139;
    if (_So9NSDecimala__isNegative_getter(&v156))
      goto LABEL_53;
  }
  v156 = a1;
  v157 = a2;
  v158 = a3;
  if (!_So9NSDecimala__length_getter(&v156))
  {
    v156 = a1;
    v157 = a2;
    v158 = a3;
    if (_So9NSDecimala__isNegative_getter(&v156))
      goto LABEL_53;
  }
  v156 = a1;
  v122 = a2 >> 16;
  v123 = HIWORD(a1);
  v157 = a2;
  v121 = HIWORD(a2);
  v158 = a3;
  v119 = HIWORD(a3);
  if (!_So9NSDecimala__length_getter(&v156))
  {
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    v48 = 2;
    goto LABEL_55;
  }
  v120 = HIDWORD(a2);
  v117 = a2;
  v118 = HIDWORD(a1);
  v9 = v6;
  v116 = a1;
  LODWORD(v156) = v6;
  WORD2(v156) = v127;
  HIWORD(v156) = v137;
  LOWORD(v157) = v133;
  WORD1(v157) = v131;
  WORD2(v157) = v135;
  HIWORD(v157) = v129;
  LOWORD(v158) = v130;
  HIWORD(v158) = v139;
  if (!_So9NSDecimala__length_getter(&v156))
    return 0;
  LODWORD(v156) = v6;
  WORD2(v156) = v127;
  HIWORD(v156) = v137;
  LOWORD(v157) = v133;
  WORD1(v157) = v131;
  WORD2(v157) = v135;
  HIWORD(v157) = v129;
  LOWORD(v158) = v130;
  HIWORD(v158) = v139;
  v153 = a1;
  v154 = a2;
  v155 = a3;
  v114 = v6;
  LODWORD(v150) = v6;
  WORD2(v150) = v127;
  HIWORD(v150) = v137;
  LOWORD(v151) = v133;
  WORD1(v151) = v131;
  WORD2(v151) = v135;
  HIWORD(v151) = v129;
  LOWORD(v152) = v130;
  HIWORD(v152) = v139;
  v10 = _So9NSDecimala__exponent_getter((char *)&v150);
  v150 = a1;
  v11._rawValue = (void *)HIWORD(a1);
  v151 = a2;
  v152 = a3;
  v12 = _So9NSDecimala__exponent_getter((char *)&v150);
  v13 = v127;
  if (v10 - v12 >= 19)
  {
    result = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v156, (uint64_t)&v153);
    v18 = v125;
    if (v125)
      return result;
    v50 = WORD1(v157);
    v51 = WORD2(v157);
    v52 = HIWORD(v157);
    v53 = v158;
    v54 = HIWORD(v158);
    v108 = v156;
    v109 = WORD2(v156);
    v150 = v156;
    v111 = HIWORD(v156);
    v113 = v157;
    v151 = v157;
    v152 = v158;
    if (_So9NSDecimala__length_getter(&v150))
    {
      v106 = v54;
      v107 = v51;
      v55 = v153;
      v56 = WORD2(v153);
      v103 = v50;
      v104 = v52;
      v57 = HIWORD(v153);
      v58 = v154;
      v105 = v53;
      v59 = WORD1(v154);
      v60 = WORD2(v154);
      v61 = HIWORD(v154);
      v102 = v155;
      v62 = HIWORD(v155);
      v150 = v153;
      v151 = v154;
      v152 = v155;
      v63 = _So9NSDecimala__length_getter(&v150);
      if (v63)
        v64 = v55;
      else
        v64 = v116;
      v116 = v64;
      v18 = v125;
      if (v63)
        v65 = v56;
      else
        v65 = v118;
      LOWORD(v118) = v65;
      if (v63)
        v11._rawValue = (void *)v57;
      else
        v11._rawValue = (void *)v123;
      if (v63)
        v66 = v58;
      else
        v66 = v117;
      v117 = v66;
      if (v63)
        v67 = v59;
      else
        v67 = v122;
      LOWORD(v122) = v67;
      if (v63)
        v68 = v60;
      else
        v68 = v120;
      LOWORD(v120) = v68;
      if (v63)
        v69 = v61;
      else
        v69 = v121;
      v121 = v69;
      v70 = a3;
      if (v63)
        v70 = v102;
      LOWORD(a3) = v70;
      v71 = v119;
      if (v63)
        v71 = v62;
      LOWORD(v119) = v71;
      if (v63)
        LODWORD(v6) = v108;
      else
        LODWORD(v6) = v114;
      if (v63)
        v13 = v109;
      else
        v13 = v127;
      if (v63)
        v15 = v111;
      else
        v15 = v137;
      if (v63)
        v17 = v113;
      else
        v17 = v133;
      if (v63)
        v16 = v103;
      else
        v16 = v131;
      if (v63)
        v14 = v107;
      else
        v14 = v135;
      if (v63)
        v72 = v104;
      else
        v72 = v129;
      v129 = v72;
      v73 = v130;
      if (v63)
        v73 = v105;
      v130 = v73;
      if (v63)
        v19 = v106;
      else
        v19 = v139;
    }
    else
    {
      v14 = v135;
      v15 = v137;
      v16 = v131;
      v17 = v133;
      LODWORD(v6) = v9;
      v19 = v139;
      v13 = v127;
    }
  }
  else
  {
    v14 = v135;
    v15 = v137;
    v16 = v131;
    v17 = v133;
    v18 = v125;
    v19 = v139;
  }
  v20 = v13;
  v132 = v16;
  v134 = v17;
  NSDecimal.asVariableLengthInteger()(v6 | ((unint64_t)(unsigned __int16)v13 << 32) | (v15 << 48), v17 | ((unint64_t)v16 << 16) | ((unint64_t)(unsigned __int16)v14 << 32) | (v129 << 48), v130 | ((unsigned __int16)v19 << 16));
  v22 = v21;
  v23 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v23 != -1)
    goto LABEL_178;
  while (1)
  {
    rawValue = powerOfTen._rawValue;
    v25 = *((_QWORD *)powerOfTen._rawValue + 2);
    v124 = v11._rawValue;
    v126 = v18;
    v136 = v14;
    v115 = v6;
    if (v25 > 0x26)
    {
      v6 = 38;
      v11._rawValue = v22;
      v18 = v20;
      goto LABEL_113;
    }
    if (!v25)
      goto LABEL_180;
    v18 = v20;
    v26 = v25 - 1;
    v6 = 38;
    v11._rawValue = v22;
    v20 = (uint64_t)&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit;
    v139 = v19;
    v128 = v22;
    v110 = *((_QWORD *)powerOfTen._rawValue + 2);
    v112 = v25 - 1;
    v138 = v15;
LABEL_11:
    v27 = __OFSUB__(v6, v26);
    v6 -= v26;
    if (v27)
      goto LABEL_176;
    v28 = *(_QWORD *)(v20 + 3992);
    if (v25 <= *(_QWORD *)(v28 + 16))
      break;
LABEL_177:
    __break(1u);
LABEL_178:
    swift_once();
  }
  v15 = v18;
  v29 = *((_QWORD *)v11._rawValue + 2);
  if (!v29 || (v30 = *(_QWORD *)(v28 + 8 * v26 + 32), (v18 = *(_QWORD *)(v30 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    v11._rawValue = (void *)MEMORY[0x1E0DEE9D8];
    v19 = v139;
    v18 = v15;
    v15 = v138;
    goto LABEL_43;
  }
  if (__OFADD__(v29, v18))
    goto LABEL_181;
  if (v29 + v18 >= 16)
    v31 = 16;
  else
    v31 = v29 + v18;
  if (v31 < 0)
    goto LABEL_191;
  swift_bridgeObjectRetain();
  v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v32 + 16) = v31;
  v14 = v32 + 32;
  bzero((void *)(v32 + 32), 2 * v31);
  v34 = 0;
  v35 = v30 + 32;
LABEL_21:
  v36 = 0;
  v37 = 0;
  v38 = v34++;
  while (1)
  {
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
    {
      __break(1u);
      goto LABEL_166;
    }
    if (v39 < v31)
      break;
    if (v36)
      goto LABEL_154;
    v36 = *(unsigned __int16 *)(v35 + 2 * v38);
    if (*(_WORD *)(v35 + 2 * v38))
    {
      v36 = *((unsigned __int16 *)v11._rawValue + v37 + 16);
      if (*((_WORD *)v11._rawValue + v37 + 16))
        goto LABEL_154;
    }
LABEL_22:
    if (v29 == ++v37)
    {
      if (v36)
      {
        v27 = __OFADD__(v29, v38);
        v42 = v29 + v38;
        if (v27)
          goto LABEL_183;
        if (v42 >= v31)
        {
LABEL_154:
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          swift_allocError();
          *v95 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (v42 < 0)
          goto LABEL_184;
        if ((unint64_t)v42 >= *(_QWORD *)(v32 + 16))
          goto LABEL_185;
        *(_WORD *)(v14 + 2 * v42) = v36;
      }
      if (v34 != v18)
        goto LABEL_21;
      v43 = *(_QWORD *)(v32 + 16);
      if (v43)
      {
        v18 = v15;
        v20 = 0x1EDC3F000;
        if (*(_WORD *)(v14 + 2 * v43 - 2))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v11._rawValue = (void *)v32;
          v15 = v138;
          v19 = v139;
        }
        else
        {
          v44 = v43 + 14;
          v15 = v138;
          do
          {
            *(_QWORD *)(v32 + 16) = v44 - 15;
            if (v44 == 15)
              break;
          }
          while (!*(unsigned __int16 *)(v32 + 2 * v44--));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v11._rawValue = (void *)v32;
          v19 = v139;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11._rawValue = (void *)v32;
        v19 = v139;
        v18 = v15;
        v15 = v138;
        v20 = 0x1EDC3F000;
      }
LABEL_43:
      v25 = v110;
      v26 = v112;
      v22 = v128;
      if (v110 > v6)
      {
        if ((v6 & 0x8000000000000000) == 0)
        {
          rawValue = *(_QWORD **)(v20 + 3992);
          if ((unint64_t)v6 >= rawValue[2])
          {
            __break(1u);
            goto LABEL_161;
          }
LABEL_113:
          v14 = *((_QWORD *)v11._rawValue + 2);
          if (!v14 || (v74 = (uint64_t *)rawValue[v6 + 4], (v6 = v74[2]) == 0))
          {
            LOWORD(v139) = v19;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v32 = MEMORY[0x1E0DEE9D8];
            v6 = (uint64_t)v124;
            v75 = v126;
            LOWORD(v22) = a3;
            v76 = v122;
            v77 = v120;
            goto LABEL_122;
          }
          v20 = v14 + v6;
          if (!__OFADD__(v14, v6))
          {
            if (v20 > 15)
            {
              v22 = (void *)v19;
              v20 = 16;
              goto LABEL_126;
            }
            if ((v20 & 0x8000000000000000) == 0)
            {
              v22 = (void *)v19;
              if (!v20)
              {
                v19 = (int64_t)v74;
                swift_bridgeObjectRetain();
                v32 = MEMORY[0x1E0DEE9D8];
                goto LABEL_127;
              }
LABEL_126:
              v19 = (int64_t)v74;
              swift_bridgeObjectRetain();
              v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(_QWORD *)(v32 + 16) = v20;
              bzero((void *)(v32 + 32), 2 * v20);
LABEL_127:
              v83 = 0;
              v84 = v19 + 32;
              v85 = v32 + 32;
              do
              {
                if (v83 == v6)
                  goto LABEL_182;
                v86 = 0;
                v87 = 0;
                v88 = v83 + 1;
                do
                {
                  if (v14 == v87)
                    goto LABEL_170;
                  v91 = v87 + v83;
                  if (__OFADD__(v87, v83))
                    goto LABEL_171;
                  if (v91 >= v20)
                  {
                    if (v86)
                      goto LABEL_154;
                    v86 = *(unsigned __int16 *)(v84 + 2 * v83);
                    if (*(_WORD *)(v84 + 2 * v83))
                    {
                      v86 = *((unsigned __int16 *)v11._rawValue + v87 + 16);
                      if (*((_WORD *)v11._rawValue + v87 + 16))
                        goto LABEL_154;
                    }
                  }
                  else
                  {
                    if (v91 < 0)
                    {
                      __break(1u);
LABEL_175:
                      __break(1u);
LABEL_176:
                      __break(1u);
                      goto LABEL_177;
                    }
                    if ((unint64_t)v91 >= *(_QWORD *)(v32 + 16))
                      goto LABEL_175;
                    v89 = 2 * v91;
                    v90 = v86
                        + *(unsigned __int16 *)(v85 + v89)
                        + *((unsigned __int16 *)v11._rawValue + v87 + 16) * *(unsigned __int16 *)(v84 + 2 * v83);
                    v86 = HIWORD(v90);
                    *(_WORD *)(v85 + v89) = v90;
                  }
                  ++v87;
                }
                while (v14 != v87);
                if (v86)
                {
                  v27 = __OFADD__(v14, v83);
                  v92 = v14 + v83;
                  if (v27)
                    goto LABEL_187;
                  if (v92 >= v20)
                    goto LABEL_154;
                  if (v92 < 0)
                    goto LABEL_188;
                  if ((unint64_t)v92 >= *(_QWORD *)(v32 + 16))
                    goto LABEL_189;
                  *(_WORD *)(v85 + 2 * v92) = v86;
                }
                v83 = v88;
              }
              while (v88 != v6);
              v93 = *(_QWORD *)(v32 + 16);
              LOWORD(v139) = (_WORD)v22;
              if (!v93)
                goto LABEL_172;
              v75 = v126;
              v77 = v120;
              if (!*(_WORD *)(v85 + 2 * v93 - 2))
              {
                do
                {
                  *(_QWORD *)(v32 + 16) = v93 - 1;
                  if (v93 == 1)
                    break;
                }
                while (!*(unsigned __int16 *)(v32 + 28 + 2 * v93--));
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_173;
            }
LABEL_191:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_192:
            result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
        }
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_186;
      }
      goto LABEL_11;
    }
  }
  if ((v39 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v39 >= *(_QWORD *)(v32 + 16))
      goto LABEL_169;
    v40 = 2 * v39;
    v41 = v36
        + *(unsigned __int16 *)(v14 + v40)
        + *((unsigned __int16 *)v11._rawValue + v37 + 16) * *(unsigned __int16 *)(v35 + 2 * v38);
    v36 = HIWORD(v41);
    *(_WORD *)(v14 + v40) = v41;
    goto LABEL_22;
  }
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v75 = v126;
  v77 = v120;
LABEL_173:
  swift_bridgeObjectRelease();
  LOWORD(v22) = a3;
  v76 = v122;
  v6 = (uint64_t)v124;
LABEL_122:
  NSDecimal.asVariableLengthInteger()(v116 | ((unint64_t)(unsigned __int16)v118 << 32) | (v6 << 48), v117 | ((unint64_t)v76 << 16) | ((unint64_t)v77 << 32) | (v121 << 48), (unsigned __int16)v22 | ((unsigned __int16)v119 << 16));
  v79 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v32, v78, *(_QWORD *)(v32 + 16));
  if (v75)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v80 = v79;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v80, 1);
  v11._rawValue = v81;
  v14 = v82;
  swift_bridgeObjectRelease();
  v150 = 0;
  v151 = 0;
  v152 = 0;
  NSDecimal.copyVariableLengthInteger(_:)(v11);
  if (v96)
    return swift_bridgeObjectRelease();
LABEL_161:
  v97 = *((_QWORD *)v11._rawValue + 2);
  swift_bridgeObjectRelease();
  if (HIDWORD(v97))
    goto LABEL_192;
  _So9NSDecimala__length_setter(v97, &v150);
  v141 = v115;
  v142 = v18;
  v143 = v15;
  v144 = v134;
  v145 = v132;
  v146 = v136;
  v147 = v129;
  v148 = v130;
  v149 = v139;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v141);
  v141 = v116;
  v142 = v118;
  v143 = v6;
  v144 = v117;
  v145 = v122;
  v146 = v120;
  v147 = v121;
  v148 = (unsigned __int16)v22;
  v149 = v119;
  v99 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v141);
  _So9NSDecimala__isNegative_setter(v99, &v150);
  v141 = v115;
  v142 = v18;
  v143 = v15;
  v144 = v134;
  v145 = v132;
  v146 = v136;
  v147 = v129;
  v148 = v130;
  v149 = v139;
  v100 = _So9NSDecimala__exponent_getter((char *)&v141);
  v141 = v116;
  v142 = v118;
  v143 = (__int16)v124;
  v144 = v117;
  v145 = v122;
  v146 = v120;
  v147 = v121;
  v148 = (unsigned __int16)v22;
  v149 = v119;
  v101 = (int)(v100 - _So9NSDecimala__exponent_getter((char *)&v141)) - 38;
  v33 = v101 + v14;
  if (__OFADD__(v101, v14))
    goto LABEL_190;
  if (v33 > -129)
  {
LABEL_166:
    if (v33 < 128)
    {
      _So9NSDecimala__exponent_setter(v33, &v150);
      _So9NSDecimala__isCompact_setter_0(0, &v150);
      NSDecimal.compact()();
      return v150;
    }
LABEL_53:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *v46 = 0;
    return swift_willThrow();
  }
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  v48 = 1;
LABEL_55:
  *v47 = v48;
  return swift_willThrow();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FormatStyleCapitalizationContext.Option@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormatStyleCapitalizationContext.Option()
{
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormatStyleCapitalizationContext.Option()
{
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
  return RawRepresentable<>.encode(to:)();
}

void static FormatStyleCapitalizationContext.middleOfSentence.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FormatStyleCapitalizationContext.CodingKeys()
{
  return 0x6E6F6974706FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FormatStyleCapitalizationContext.CodingKeys()
{
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FormatStyleCapitalizationContext.CodingKeys()
{
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FormatStyleCapitalizationContext.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FormatStyleCapitalizationContext.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys, &unk_1E0F28D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys, &unk_1E0F28D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys, &unk_1E0F28D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.CodingKeys, &unk_1E0F28D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.Option, &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.Option, &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.Option, &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext.Option, &type metadata for FormatStyleCapitalizationContext.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option);
  }
  return result;
}

uint64_t FormatStyleCapitalizationContext.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FormatStyleCapitalizationContext.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext.CodingKeys and conformance FormatStyleCapitalizationContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext.Option and conformance FormatStyleCapitalizationContext.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormatStyleCapitalizationContext@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatStyleCapitalizationContext.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormatStyleCapitalizationContext(_QWORD *a1)
{
  return FormatStyleCapitalizationContext.encode(to:)(a1);
}

void NumberFormatStyleConfiguration.Collection.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  int v10;
  Swift::UInt v11;
  int v12;
  unsigned int v13;
  int v14;
  Swift::UInt v15;
  int *v16;
  uint64_t v17;
  int v18;
  Swift::UInt v19;
  Swift::UInt64 v20;
  Swift::UInt v21;
  _BYTE v22[64];

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v8 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v9 = v8;
    else
      v9 = 0;
    Hasher._combine(_:)(v9);
  }
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v0 + 16, (uint64_t)v22);
  specialized Optional<A>.hash(into:)();
  v10 = *(unsigned __int8 *)(v0 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  v12 = *(unsigned __int16 *)(v0 + 74);
  v13 = v12 | (*(unsigned __int8 *)(v0 + 76) << 16);
  if (v12 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v13) & 1);
  }
  v14 = *(unsigned __int8 *)(v0 + 77);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  v16 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v0 + v16[9], (uint64_t)v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }
  v17 = v0 + v16[10];
  v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *(_QWORD *)v17;
    Hasher._combine(_:)(1u);
    if ((v18 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v20 = v19;
      else
        v20 = 0;
      Hasher._combine(_:)(v20);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v19);
    }
  }
  v21 = *(unsigned __int8 *)(v0 + v16[11]);
  if (v21 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }
}

uint64_t NumberFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A64268 + 4 * byte_182065BE0[a1]))(0x656C616373, 0xE500000000000000);
}

uint64_t sub_181A64268()
{
  return 0x6F69736963657270;
}

uint64_t sub_181A64284()
{
  return 0x70756F7267;
}

unint64_t sub_181A64294()
{
  return 0xD000000000000013;
}

uint64_t sub_181A642CC()
{
  return 0x676E69646E756F72;
}

unint64_t sub_181A642E4()
{
  return 0xD000000000000011;
}

uint64_t sub_181A64300()
{
  return 0x6E6F697461746F6ELL;
}

uint64_t NumberFormatStyleConfiguration.Collection.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Collection.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v9 = *(_QWORD *)(v3 + 64);
    v10 = *(_BYTE *)(v3 + 72);
    v11 = *(_OWORD *)(v3 + 32);
    v19 = *(_OWORD *)(v3 + 16);
    v20 = v11;
    v21 = *(_OWORD *)(v3 + 48);
    v22 = v9;
    v23 = v10;
    v18 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(_BYTE *)(v3 + 73);
    v18 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = *(_WORD *)(v3 + 74);
    BYTE2(v19) = *(_BYTE *)(v3 + 76);
    LOWORD(v19) = v12;
    v18 = 3;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(_BYTE *)(v3 + 77);
    v18 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    LOBYTE(v19) = 5;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v14 = (uint64_t *)(v3 + *(int *)(v13 + 40));
    v15 = *v14;
    LOBYTE(v14) = *((_BYTE *)v14 + 8);
    *(_QWORD *)&v19 = v15;
    BYTE8(v19) = (_BYTE)v14;
    v18 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(_BYTE *)(v3 + *(int *)(v13 + 44));
    v18 = 7;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NumberFormatStyleConfiguration.Collection.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int16 v26;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  char v43;

  v34 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v3);
  v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Collection.CodingKeys>);
  v32 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = 0;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_DWORD *)v9 + 18) = 131584;
  *((_WORD *)v9 + 38) = 512;
  v11 = (uint64_t)&v9[*(int *)(v10 + 36)];
  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v31 = v11;
  v13(v11, 1, 1, v12);
  v14 = &v9[*(int *)(v7 + 40)];
  *(_QWORD *)v14 = 0;
  v14[8] = -1;
  v15 = *(int *)(v7 + 44);
  v9[v15] = 3;
  v16 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    v37 = v14;
    v30 = v15;
    v19 = v32;
    v18 = (uint64_t)v33;
    v21 = v34;
    v20 = v35;
    LOBYTE(v38) = 0;
    *(_QWORD *)v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v9[8] = v22 & 1;
    v43 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v23 = v41;
    v24 = v42;
    v25 = v39;
    *((_OWORD *)v9 + 1) = v38;
    *((_OWORD *)v9 + 2) = v25;
    *((_OWORD *)v9 + 3) = v40;
    *((_QWORD *)v9 + 8) = v23;
    v9[72] = v24;
    v43 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9[73] = v38;
    v43 = 3;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v26 = v38;
    v9[76] = BYTE2(v38);
    *((_WORD *)v9 + 37) = v26;
    v43 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9[77] = v38;
    LOBYTE(v38) = 5;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointRoundingRule?(v18, v31);
    v43 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v28 = v37;
    v29 = BYTE8(v38);
    *(_QWORD *)v37 = v38;
    v28[8] = v29;
    v43 = 7;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
    v9[v30] = v38;
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v9, v21, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v9, type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  unsigned __int8 *v0;

  return NumberFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.Collection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NumberFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NumberFormatStyleConfiguration.Collection.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Collection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NumberFormatStyleConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Collection(_QWORD *a1)
{
  return NumberFormatStyleConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))NumberFormatStyleConfiguration.Collection.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))NumberFormatStyleConfiguration.Collection.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
  return RawRepresentable<>.encode(to:)();
}

uint64_t NumberFormatStyleConfiguration.Grouping.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x726576656ELL;
  else
    return 0x6974616D6F747561;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Grouping.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Grouping.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys, &unk_1E0F28150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys, &unk_1E0F28150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys, &unk_1E0F28150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.CodingKeys, &unk_1E0F28150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option, &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option, &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option, &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping.Option, &type metadata for NumberFormatStyleConfiguration.Grouping.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option);
  }
  return result;
}

uint64_t NumberFormatStyleConfiguration.Grouping.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Grouping.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.CodingKeys and conformance NumberFormatStyleConfiguration.Grouping.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping.Option and conformance NumberFormatStyleConfiguration.Grouping.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void NumberFormatStyleConfiguration.Precision.Option.hash(into:)()
{
  __int128 *v0;
  char v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;
  int v6;
  Swift::UInt v7;
  int v8;
  Swift::UInt v9;
  int v10;
  __int128 v11;
  Swift::UInt v12;
  unsigned __int8 v13;
  Swift::UInt v14;
  unsigned __int8 v15;
  Swift::UInt v16;
  char v17;

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, &v11);
  v1 = v17;
  if (v17 < 0)
  {
    v17 &= ~0x80u;
    v5 = v11;
    v6 = BYTE8(v11);
    v7 = v12;
    v8 = v13;
    v9 = v14;
    v10 = v15;
    v2 = v16;
    Hasher._combine(_:)(1uLL);
    if (v6 == 1)
    {
      Hasher._combine(_:)(0);
      if (!v8)
        goto LABEL_6;
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v5);
      if (!v8)
      {
LABEL_6:
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7);
        if (!v10)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    Hasher._combine(_:)(0);
    if (!v10)
    {
LABEL_7:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
      if ((v1 & 1) != 0)
        goto LABEL_3;
      goto LABEL_12;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    if ((v1 & 1) != 0)
      goto LABEL_3;
    goto LABEL_12;
  }
  v2 = *((_QWORD *)&v11 + 1);
  v3 = v11;
  v4 = v12;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v3);
  if (v4 == 1)
  {
LABEL_3:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_12:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Grouping@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.Grouping.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Grouping(_QWORD *a1)
{
  return NumberFormatStyleConfiguration.Grouping.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Grouping()
{
  _BYTE *v0;

  if (*v0)
    return 0x726576656ELL;
  else
    return 0x6974616D6F747561;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  __int128 *v0;
  _OWORD v2[4];

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v2);
  Hasher.init(_seed:)();
  NumberFormatStyleConfiguration.Precision.Option.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  __int128 *v0;
  _OWORD v1[4];

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v1);
  NumberFormatStyleConfiguration.Precision.Option.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Precision.Option()
{
  __int128 *v0;
  _OWORD v2[4];

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v0, v2);
  Hasher.init(_seed:)();
  NumberFormatStyleConfiguration.Precision.Option.hash(into:)();
  return Hasher._finalize()();
}

double static NumberFormatStyleConfiguration.Precision.significantDigits<A>(_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  double result;

  v3 = RangeExpression.clampedLowerAndUpperBounds(_:)(1, 999, a1);
  if ((v6 & 1) != 0)
    v7 = 1;
  else
    v7 = v3;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5 & 1;
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.significantDigits(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a1;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 41) = 0u;
  return result;
}

uint64_t static NumberFormatStyleConfiguration.Precision.integerAndFractionLength(integer:fraction:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = a2;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = a2;
  *(_BYTE *)(a3 + 56) = 0x80;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.integerLength<A>(_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  uint64_t v5;
  double result;

  *(_QWORD *)a2 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a1);
  *(_QWORD *)(a2 + 8) = v3 & 1;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v4 & 1;
  result = 0.0;
  *(_OWORD *)(a2 + 32) = xmmword_18205FD60;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = -127;
  return result;
}

double static NumberFormatStyleConfiguration.Precision.integerLength(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = a1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a2 + 40) = xmmword_182068080;
  *(_BYTE *)(a2 + 56) = -127;
  return result;
}

void NumberFormatStyleConfiguration.Precision.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(char *)(v0 + 56);
  if (v4 < 0)
  {
    v7 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      v10 = v4;
      if ((v9 & 1) != 0)
      {
LABEL_6:
        Hasher._combine(_:)(0);
        if ((v7 & 1) != 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      v10 = v4;
      if ((v9 & 1) != 0)
        goto LABEL_6;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if ((v7 & 1) != 0)
    {
LABEL_7:
      Hasher._combine(_:)(0);
      if ((v10 & 1) != 0)
        goto LABEL_8;
LABEL_12:
      Hasher._combine(_:)(1u);
      v5 = v6;
      goto LABEL_13;
    }
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) != 0)
  {
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  v5 = v1;
LABEL_13:
  Hasher._combine(_:)(v5);
}

BOOL static NumberFormatStyleConfiguration.Precision.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v4[4];
  __int128 v5[4];

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a1, v4);
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, v5);
  return specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Precision.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Precision.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v12 = v1[1];
  v13 = v7;
  v11 = v1[2];
  v8 = *((_QWORD *)v1 + 6);
  v9 = *((_BYTE *)v1 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = v13;
  v15 = v12;
  v16 = v11;
  v17 = v8;
  v18 = v9;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NumberFormatStyleConfiguration.Precision.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::UInt v5;
  uint64_t v6;
  Swift::UInt v7;
  int v8;
  Swift::UInt v9;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(char *)(v0 + 56);
  Hasher.init(_seed:)();
  if (v8 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }
    if ((v4 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if ((v6 & 1) != 0)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if ((v8 & 1) != 0)
          goto LABEL_10;
LABEL_13:
        Hasher._combine(_:)(1u);
        v9 = v7;
        goto LABEL_14;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      if ((v6 & 1) != 0)
        goto LABEL_9;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if ((v8 & 1) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    v9 = v1;
LABEL_14:
    Hasher._combine(_:)(v9);
    return Hasher._finalize()();
  }
LABEL_10:
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t NumberFormatStyleConfiguration.Precision.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[3];
  uint64_t v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Precision.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v15;
    v10 = v16;
    v11 = v14[1];
    v12 = v14[2];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 48) = v9;
    *(_BYTE *)(a2 + 56) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Precision@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NumberFormatStyleConfiguration.Precision.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Precision(_QWORD *a1)
{
  return NumberFormatStyleConfiguration.Precision.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.Precision()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(char *)(v0 + 56);
  if (v4 < 0)
  {
    v7 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      v10 = v4;
      if ((v9 & 1) != 0)
      {
LABEL_6:
        Hasher._combine(_:)(0);
        if ((v7 & 1) != 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      v10 = v4;
      if ((v9 & 1) != 0)
        goto LABEL_6;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if ((v7 & 1) != 0)
    {
LABEL_7:
      Hasher._combine(_:)(0);
      if ((v10 & 1) != 0)
        goto LABEL_8;
LABEL_12:
      Hasher._combine(_:)(1u);
      v5 = v6;
      goto LABEL_13;
    }
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) != 0)
  {
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  v5 = v1;
LABEL_13:
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.Precision()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::UInt v5;
  uint64_t v6;
  Swift::UInt v7;
  int v8;
  Swift::UInt v9;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(char *)(v0 + 56);
  Hasher.init(_seed:)();
  if (v8 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }
    if ((v4 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if ((v6 & 1) != 0)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if ((v8 & 1) != 0)
          goto LABEL_10;
LABEL_13:
        Hasher._combine(_:)(1u);
        v9 = v7;
        goto LABEL_14;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      if ((v6 & 1) != 0)
        goto LABEL_9;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if ((v8 & 1) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    v9 = v1;
LABEL_14:
    Hasher._combine(_:)(v9);
    return Hasher._finalize()();
  }
LABEL_10:
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NumberFormatStyleConfiguration.Precision.Option(__int128 *a1, __int128 *a2)
{
  __int128 v4[4];
  __int128 v5[4];

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a1, v4);
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, v5);
  return specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v4, v5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.always.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x737961776C61;
  else
    return 0x6974616D6F747561;
}

void NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy(_QWORD *a1)
{
  return NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  _BYTE *v0;

  if (*v0)
    return 0x737961776C61;
  else
    return 0x6974616D6F747561;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.SignDisplayStrategy.automatic.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 1;
}

void static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = result ^ 1;
  return result;
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.description.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
  {
    if (v0[1])
      return 0x726576656ELL;
    else
      return 0x6974616D6F747561;
  }
  else if (v0[2])
  {
    return 0xD00000000000001CLL;
  }
  else
  {
    return 0xD00000000000001BLL;
  }
}

void NumberFormatStyleConfiguration.SignDisplayStrategy.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = v0[1];
  v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x657669746167656ELL;
  if (*v0 != 1)
    v1 = 1869768058;
  if (*v0)
    return v1;
  else
    return 0x6576697469736F70;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  char v10;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v13 = v1[2];
  v14 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v20 = v8;
  v19 = 0;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = v13;
    v18 = v14;
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v16 = v10;
    v15 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NumberFormatStyleConfiguration.SignDisplayStrategy.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t NumberFormatStyleConfiguration.SignDisplayStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;
  unsigned __int8 v17;
  char v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v18 = 0;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v19;
    v16 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = v17;
    v14 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v15;
    *a2 = v9;
    a2[1] = v13;
    a2[2] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.SignDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy(_QWORD *a1)
{
  return NumberFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = v0[1];
  v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Notation.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Notation.Option()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
  return RawRepresentable<>.encode(to:)();
}

void static NumberFormatStyleConfiguration.Notation.scientific.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static NumberFormatStyleConfiguration.Notation.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static NumberFormatStyleConfiguration.Notation.compactName.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t NumberFormatStyleConfiguration.Notation.description.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6669746E65696373;
  if (*v0 != 1)
    v1 = 0x20746361706D6F63;
  if (*v0)
    return v1;
  else
    return 0x6974616D6F747561;
}

void NumberFormatStyleConfiguration.Notation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static NumberFormatStyleConfiguration.Notation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Notation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Notation.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NumberFormatStyleConfiguration.Notation.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Notation.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Notation@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NumberFormatStyleConfiguration.Notation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Notation(_QWORD *a1)
{
  return NumberFormatStyleConfiguration.Notation.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Notation()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6669746E65696373;
  if (*v0 != 1)
    v1 = 0x20746361706D6F63;
  if (*v0)
    return v1;
  else
    return 0x6974616D6F747561;
}

Swift::Int NumberFormatStyleConfiguration.RoundingIncrement.hashValue.getter(Swift::UInt a1, char a2)
{
  Swift::UInt64 v4;

  Hasher.init(_seed:)();
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a1;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  uint64_t v0;

  return NumberFormatStyleConfiguration.RoundingIncrement.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt64 v2;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v2 = v1;
    else
      v2 = 0;
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  Swift::UInt64 v3;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v3 = v1;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) == 1)
    return Double.description.getter();
  else
    return dispatch thunk of CustomStringConvertible.description.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NumberFormatStyleConfiguration.RoundingIncrement(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = *(double *)a1 == *(double *)a2;
  if ((v2 & 1) == 0)
    v3 = 0;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v3;
  else
    return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
}

void CurrencyFormatStyleConfiguration.Collection.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  int v10;
  Swift::UInt v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  Swift::UInt v15;
  int *v16;
  uint64_t v17;
  int v18;
  Swift::UInt v19;
  Swift::UInt64 v20;
  Swift::UInt v21;
  _BYTE v22[64];

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v8 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v9 = v8;
    else
      v9 = 0;
    Hasher._combine(_:)(v9);
  }
  outlined init with take of NumberFormatStyleConfiguration.Precision?(v0 + 16, (uint64_t)v22);
  specialized Optional<A>.hash(into:)();
  v10 = *(unsigned __int8 *)(v0 + 73);
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = v10 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  v12 = *(unsigned int *)(v0 + 74);
  if (*(_DWORD *)(v0 + 74) == 2)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12 & 1);
    Hasher._combine(_:)((v12 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v12) & 1);
    v13 = BYTE3(v12) & 1;
  }
  Hasher._combine(_:)(v13);
  v14 = *(unsigned __int8 *)(v0 + 78);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v0 + v16[9], (uint64_t)v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }
  v17 = v0 + v16[10];
  v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *(_QWORD *)v17;
    Hasher._combine(_:)(1u);
    if ((v18 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v20 = v19;
      else
        v20 = 0;
      Hasher._combine(_:)(v20);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v19);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + v16[11]));
  v21 = *(unsigned __int8 *)(v0 + v16[12]);
  if (v21 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }
}

uint64_t CurrencyFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A67070 + 4 * byte_182065BE8[a1]))(0x656C616373, 0xE500000000000000);
}

uint64_t sub_181A67070()
{
  return 0x6F69736963657270;
}

uint64_t sub_181A6708C()
{
  return 0x70756F7267;
}

unint64_t sub_181A6709C()
{
  return 0xD000000000000013;
}

uint64_t sub_181A670D4()
{
  return 0x676E69646E756F72;
}

unint64_t sub_181A670EC()
{
  return 0xD000000000000011;
}

uint64_t sub_181A67108()
{
  return 0x61746E6573657270;
}

uint64_t sub_181A67128()
{
  return 0x6E6F697461746F6ELL;
}

uint64_t CurrencyFormatStyleConfiguration.Collection.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.Collection.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v9 = *(_QWORD *)(v3 + 64);
    v10 = *(_BYTE *)(v3 + 72);
    v11 = *(_OWORD *)(v3 + 32);
    v18 = *(_OWORD *)(v3 + 16);
    v19 = v11;
    v20 = *(_OWORD *)(v3 + 48);
    v21 = v9;
    v22 = v10;
    v17 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + 73);
    v17 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LODWORD(v18) = *(_DWORD *)(v3 + 74);
    v17 = 3;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + 78);
    v17 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    LOBYTE(v18) = 5;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13 = (uint64_t *)(v3 + v12[10]);
    v14 = *v13;
    LOBYTE(v13) = *((_BYTE *)v13 + 8);
    *(_QWORD *)&v18 = v14;
    BYTE8(v18) = (_BYTE)v13;
    v17 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + v12[11]);
    v17 = 7;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = *(_BYTE *)(v3 + v12[12]);
    v17 = 8;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CurrencyFormatStyleConfiguration.Collection.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  char v44;

  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v3);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.Collection.CodingKeys>);
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 8) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_WORD *)v8 + 36) = 512;
  *(_DWORD *)(v8 + 74) = 2;
  v8[78] = 2;
  v10 = (uint64_t)&v8[*(int *)(v9 + 36)];
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v36 = v10;
  v12(v10, 1, 1, v11);
  v13 = &v8[v6[10]];
  *(_QWORD *)v13 = 0;
  v13[8] = -1;
  v14 = v6[12];
  v8[v14] = 3;
  v15 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  v16 = v38;
  v17 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    v25 = v36;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    return outlined destroy of Any?(v25, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  }
  else
  {
    v38 = v11;
    v29 = v14;
    v30 = v13;
    v19 = v32;
    v18 = (uint64_t)v33;
    LOBYTE(v39) = 0;
    v20 = v34;
    *(_QWORD *)v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v8[8] = v21 & 1;
    v44 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v22 = v42;
    v23 = v43;
    v24 = v40;
    *((_OWORD *)v8 + 1) = v39;
    *((_OWORD *)v8 + 2) = v24;
    *((_OWORD *)v8 + 3) = v41;
    *((_QWORD *)v8 + 8) = v22;
    v8[72] = v23;
    v44 = 2;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v8[73] = v39;
    v44 = 3;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_DWORD *)(v8 + 74) = v39;
    v44 = 4;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v8[78] = v39;
    LOBYTE(v39) = 5;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointRoundingRule?(v18, v36);
    v44 = 6;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v26 = BYTE8(v39);
    v27 = v30;
    *(_QWORD *)v30 = v39;
    v27[8] = v26;
    v44 = 7;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v8[v6[11]] = v39;
    v44 = 8;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v20);
    v8[v29] = v39;
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v8, v31, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  unsigned __int8 *v0;

  return CurrencyFormatStyleConfiguration.Collection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CurrencyFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Collection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Collection(_QWORD *a1)
{
  return CurrencyFormatStyleConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, (void (*)(_BYTE *))CurrencyFormatStyleConfiguration.Collection.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, a2, a3, (void (*)(_BYTE *))CurrencyFormatStyleConfiguration.Collection.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
  return RawRepresentable<>.encode(to:)();
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.automatic.getter@<D0>(_DWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x1000100010001;
  *a1 = 65537;
  return result;
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.never.getter@<D0>(_DWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 65793;
  *a1 = 65793;
  return result;
}

uint64_t static CurrencyFormatStyleConfiguration.SignDisplayStrategy.always(showZero:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = result ^ 1;
  *(_BYTE *)(a2 + 3) = 0;
  return result;
}

double static CurrencyFormatStyleConfiguration.SignDisplayStrategy.accounting.getter@<D0>(_DWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 16842753;
  *a1 = 16842753;
  return result;
}

uint64_t static CurrencyFormatStyleConfiguration.SignDisplayStrategy.accountingAlways(showZero:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = result ^ 1;
  *(_BYTE *)(a2 + 3) = 1;
  return result;
}

void CurrencyFormatStyleConfiguration.SignDisplayStrategy.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A67BCC + 4 * byte_182065BF1[*v0]))(0x6576697469736F70, 0xE800000000000000);
}

uint64_t sub_181A67BCC()
{
  return 0x657669746167656ELL;
}

uint64_t sub_181A67BE0()
{
  return 1869768058;
}

uint64_t sub_181A67BF0()
{
  return 0x69746E756F636361;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CurrencyFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  char v10;
  _DWORD v12[2];
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v13 = v1[2];
  v14 = v9;
  v12[1] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = v8;
  v20 = 0;
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = v13;
    v19 = v14;
    v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v10;
    v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int CurrencyFormatStyleConfiguration.SignDisplayStrategy.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt8 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t CurrencyFormatStyleConfiguration.SignDisplayStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  unsigned __int8 v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v20 = 0;
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v21;
    v18 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v14 = v9;
    LOBYTE(v9) = v19;
    v16 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v9;
    LOBYTE(v9) = v17;
    v15 = 3;
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v14;
    a2[1] = v11;
    a2[2] = v9;
    a2[3] = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.SignDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy(_QWORD *a1)
{
  return CurrencyFormatStyleConfiguration.SignDisplayStrategy.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt8 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CurrencyFormatStyleConfiguration.Presentation.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CurrencyFormatStyleConfiguration.Presentation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CurrencyFormatStyleConfiguration.Presentation.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t CurrencyFormatStyleConfiguration.Presentation.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CurrencyFormatStyleConfiguration.Presentation.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CurrencyFormatStyleConfiguration.Presentation@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CurrencyFormatStyleConfiguration.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CurrencyFormatStyleConfiguration.Presentation(_QWORD *a1)
{
  return CurrencyFormatStyleConfiguration.Presentation.encode(to:)(a1);
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result >= 4uLL)
    v2 = 3;
  else
    v2 = 0x2010003u >> (8 * *result);
  *a2 = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.Option(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void DescriptiveNumberFormatConfiguration.Presentation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FormatStyleCapitalizationContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t DescriptiveNumberFormatConfiguration.Presentation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DescriptiveNumberFormatConfiguration.Presentation.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int DescriptiveNumberFormatConfiguration.Presentation.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t DescriptiveNumberFormatConfiguration.Presentation.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DescriptiveNumberFormatConfiguration.Presentation.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Presentation@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DescriptiveNumberFormatConfiguration.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Presentation(_QWORD *a1)
{
  return DescriptiveNumberFormatConfiguration.Presentation.encode(to:)(a1);
}

uint64_t DescriptiveNumberFormatConfiguration.Collection.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DescriptiveNumberFormatConfiguration.Collection.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v11 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = v8;
  v14 = 0;
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v13 = v11;
    v12 = 1;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DescriptiveNumberFormatConfiguration.Collection.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DescriptiveNumberFormatConfiguration.Collection.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v15 = 0;
    lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v16;
    v13 = 1;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v14;
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x61746E6573657270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized DescriptiveNumberFormatConfiguration.Collection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DescriptiveNumberFormatConfiguration.Collection@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DescriptiveNumberFormatConfiguration.Collection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DescriptiveNumberFormatConfiguration.Collection(_QWORD *a1)
{
  return DescriptiveNumberFormatConfiguration.Collection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  unsigned __int8 *v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  if (v2 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0 + 1);
  if (v1 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DescriptiveNumberFormatConfiguration.Collection()
{
  unsigned __int8 *v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  if (v2 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FloatingPointRoundingRule.CodingValue@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointRoundingRule.CodingValue()
{
  lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointRoundingRule.CodingValue()
{
  lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
  return RawRepresentable<>.encode(to:)();
}

uint64_t FloatingPointRoundingRule.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v11[4];
  char v12;

  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, **((unsigned int **)&unk_1E0F3EC78 + v12), v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FloatingPointRoundingRule.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  char v10;
  _BYTE v12[8];
  _BYTE v13[24];
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v2, v4, v6);
  v9 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == *MEMORY[0x1E0DED4F0])
  {
    v10 = 0;
  }
  else
  {
    if (v9 != *MEMORY[0x1E0DED4E8])
    {
      if (v9 == *MEMORY[0x1E0DED500])
      {
        v10 = 2;
        goto LABEL_13;
      }
      if (v9 == *MEMORY[0x1E0DED508])
      {
        v10 = 3;
        goto LABEL_13;
      }
      if (v9 == *MEMORY[0x1E0DED4D8])
      {
        v10 = 4;
        goto LABEL_13;
      }
      if (v9 == *MEMORY[0x1E0DED4E0])
      {
        v10 = 5;
        goto LABEL_13;
      }
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
    }
    v10 = 1;
  }
LABEL_13:
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v12[7] = v10;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
  lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointRoundingRule@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointRoundingRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointRoundingRule(_QWORD *a1)
{
  return FloatingPointRoundingRule.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x676E6974616F6C66;
  else
    return 0x72656765746E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.RoundingIncrement.encode(to:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((a3 & 1) != 0)
  {
    v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  else
  {
    v11 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NumberFormatStyleConfiguration.Precision.Option.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181A69560 + 4 * byte_182065BF5[a1]))(0xD000000000000014, 0x8000000182306330);
}

uint64_t sub_181A69560()
{
  uint64_t v0;

  return v0 + 4;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.RoundingIncrement@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = specialized NumberFormatStyleConfiguration.RoundingIncrement.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.RoundingIncrement(_QWORD *a1)
{
  uint64_t v1;

  return NumberFormatStyleConfiguration.RoundingIncrement.encode(to:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  unsigned __int8 *v0;

  return NumberFormatStyleConfiguration.Precision.Option.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NumberFormatStyleConfiguration.Precision.Option.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NumberFormatStyleConfiguration.Precision.Option.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NumberFormatStyleConfiguration.Precision.Option.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v3, &v20);
  v9 = v26;
  if (v26 < 0)
  {
    v26 &= ~0x80u;
    v27 = v22;
    v16 = v23;
    v17 = v21;
    v15 = v24;
    v12 = v25;
    v18 = v20;
    v19 = BYTE8(v20);
    v28 = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v2)
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v12;
    v18 = v17;
    v19 = v27;
    v28 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = v16;
    v19 = v15;
    v28 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = v14;
    v19 = v9 & 1;
    v28 = 5;
    goto LABEL_4;
  }
  v10 = *((_QWORD *)&v20 + 1);
  v11 = v21;
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v18 = v10;
    v19 = v11;
    v28 = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?();
LABEL_4:
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_OWORD *protocol witness for Decodable.init(from:) in conformance NumberFormatStyleConfiguration.Precision.Option@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *result;
  __int128 v5[4];

  result = (_OWORD *)specialized NumberFormatStyleConfiguration.Precision.Option.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v5, a2);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NumberFormatStyleConfiguration.Precision.Option(_QWORD *a1)
{
  __int128 *v1;
  _OWORD v4[4];

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(v1, v4);
  return NumberFormatStyleConfiguration.Precision.Option.encode(to:)(a1);
}

uint64_t NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(int64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::OpaquePointer v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  Swift::String v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  Swift::String v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  Swift::String v30;
  int v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  Swift::String v37;
  int v38;
  __int16 v39;
  int v40;
  Swift::String v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  Swift::String v52;
  int v53;
  uint64_t result;
  unint64_t v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  Swift::String v59;
  int v60;
  Swift::String v61;
  int v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  int v76;
  __int16 v77;
  __int16 v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  _BYTE v83[20];
  __int128 v84;
  _BYTE v85[20];
  unint64_t v86;
  unint64_t v87;

  if ((a2 & 1) == 0)
  {
    if (a1 >= 1)
    {
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v86 = 0xD000000000000014;
      v87 = 0x8000000182306250;
      v3 = specialized NSDecimal.init(_:)(a1);
      LOWORD(v5) = v4;
      LOWORD(v7) = v6;
      *(_QWORD *)v85 = v3;
      v8 = HIDWORD(v3);
      v9 = HIWORD(v3);
      v10._rawValue = (void *)(v4 >> 16);
      *(_QWORD *)&v85[8] = v4;
      v11 = HIDWORD(v4);
      v12 = (char *)HIWORD(v4);
      v13 = HIWORD(v6);
      *(_DWORD *)&v85[16] = v6;
      if (_So9NSDecimala__length_getter(v85)
        || (*(_QWORD *)v85 = v3,
            *(_WORD *)&v85[8] = v5,
            *(_WORD *)&v85[10] = v10._rawValue,
            *(_WORD *)&v85[12] = v11,
            *(_WORD *)&v85[14] = (_WORD)v12,
            *(_WORD *)&v85[16] = v7,
            *(_WORD *)&v85[18] = v13,
            !_So9NSDecimala__isNegative_getter(v85)))
      {
        *(_QWORD *)v85 = v3;
        *(_WORD *)&v85[8] = v5;
        *(_WORD *)&v85[10] = v10._rawValue;
        *(_WORD *)&v85[12] = v11;
        *(_WORD *)&v85[14] = (_WORD)v12;
        *(_WORD *)&v85[16] = v7;
        *(_WORD *)&v85[18] = v13;
        if (_So9NSDecimala__length_getter(v85))
        {
          *(_QWORD *)&v84 = 0;
          *((_QWORD *)&v84 + 1) = 0xE000000000000000;
          *(_QWORD *)v85 = v3;
          *(_WORD *)&v85[8] = v5;
          *(_WORD *)&v85[10] = v10._rawValue;
          *(_WORD *)&v85[12] = v11;
          *(_WORD *)&v85[14] = (_WORD)v12;
          *(_WORD *)&v85[16] = v7;
          *(_WORD *)&v85[18] = v13;
          *(_QWORD *)v83 = v3;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          if ((int)_So9NSDecimala__exponent_getter(v83) >= 1)
          {
            do
            {
              v14._countAndFlagsBits = 48;
              v14._object = (void *)0xE100000000000000;
              String.append(_:)(v14);
              *(_DWORD *)v83 = v3;
              *(_WORD *)&v83[4] = v8;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v5;
              *(_WORD *)&v83[10] = v10._rawValue;
              *(_WORD *)&v83[12] = v11;
              *(_WORD *)&v83[14] = (_WORD)v12;
              *(_WORD *)&v83[16] = v7;
              *(_WORD *)&v83[18] = v13;
              v15 = _So9NSDecimala__exponent_getter(v83);
              _So9NSDecimala__exponent_setter((v15 - 1), v85);
              LODWORD(v3) = *(_DWORD *)v85;
              LOWORD(v8) = *(_WORD *)&v85[4];
              LOWORD(v9) = *(_WORD *)&v85[6];
              LOWORD(v5) = *(_WORD *)&v85[8];
              LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
              LOWORD(v11) = *(_WORD *)&v85[12];
              LOWORD(v12) = *(_WORD *)&v85[14];
              LOWORD(v7) = *(_WORD *)&v85[16];
              LOWORD(v13) = *(_WORD *)&v85[18];
              *(_OWORD *)v83 = *(_OWORD *)v85;
              *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
              *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
            }
            while ((int)_So9NSDecimala__exponent_getter(v83) > 0);
          }
          *(_DWORD *)v83 = v3;
          *(_WORD *)&v83[4] = v8;
          *(_WORD *)&v83[6] = v9;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          if (!_So9NSDecimala__exponent_getter(v83))
          {
            _So9NSDecimala__exponent_setter(1, v85);
            LODWORD(v3) = *(_DWORD *)v85;
            LOWORD(v8) = *(_WORD *)&v85[4];
            LOWORD(v9) = *(_WORD *)&v85[6];
            LOWORD(v5) = *(_WORD *)&v85[8];
            LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
            LOWORD(v11) = *(_WORD *)&v85[12];
            LOWORD(v12) = *(_WORD *)&v85[14];
            LOWORD(v7) = *(_WORD *)&v85[16];
            LOWORD(v13) = *(_WORD *)&v85[18];
          }
          v76 = v3;
          *(_DWORD *)v83 = v3;
          LOWORD(v16) = v8;
          *(_WORD *)&v83[4] = v8;
          *(_WORD *)&v83[6] = v9;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          if (_So9NSDecimala__length_getter(v83))
          {
            v17 = v8;
            v18 = v3;
            while (1)
            {
              v77 = v17;
              *(_DWORD *)v83 = v18;
              *(_WORD *)&v83[4] = v17;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v5;
              *(_WORD *)&v83[10] = v10._rawValue;
              *(_WORD *)&v83[12] = v11;
              *(_WORD *)&v83[14] = (_WORD)v12;
              *(_WORD *)&v83[16] = v7;
              *(_WORD *)&v83[18] = v13;
              if (!_So9NSDecimala__exponent_getter(v83))
              {
                v19._countAndFlagsBits = 46;
                v19._object = (void *)0xE100000000000000;
                String.append(_:)(v19);
              }
              *(_DWORD *)v83 = v18;
              *(_WORD *)&v83[4] = v77;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v5;
              *(_WORD *)&v83[10] = v10._rawValue;
              *(_WORD *)&v83[12] = v11;
              *(_WORD *)&v83[14] = (_WORD)v12;
              *(_WORD *)&v83[16] = v7;
              *(_WORD *)&v83[18] = v13;
              v20 = _So9NSDecimala__exponent_getter(v83);
              _So9NSDecimala__exponent_setter((v20 + 1), v85);
              v21 = *(_DWORD *)v85;
              LOWORD(v9) = *(_WORD *)&v85[6];
              LOWORD(v13) = *(_WORD *)&v85[14];
              v76 = *(unsigned __int16 *)&v85[8];
              v78 = *(_WORD *)&v85[4];
              v72 = *(_WORD *)&v85[12];
              v74 = *(_WORD *)&v85[10];
              LOWORD(v11) = *(_WORD *)&v85[18];
              v70 = *(_WORD *)&v85[16];
              NSDecimal.asVariableLengthInteger()(*(unsigned int *)v85 | ((unint64_t)*(unsigned __int16 *)&v85[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[6] << 48), *(unsigned __int16 *)&v85[8] | ((unint64_t)*(unsigned __int16 *)&v85[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v85[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[14] << 48), *(unsigned __int16 *)&v85[16] | (*(unsigned __int16 *)&v85[18] << 16));
              v16 = v22;
              v7 = *(_QWORD *)(v22 + 16);
              if (!v7)
                break;
              v68 = v21;
              v10._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
              v12 = (char *)v10._rawValue + 30;
              *((_QWORD *)v10._rawValue + 2) = v7;
              bzero((char *)v10._rawValue + 32, 2 * v7);
              v23 = *(unsigned __int16 *)(2 * v7 + v16 + 30);
              v24 = v23 / 0xA;
              while (1)
              {
                *(_WORD *)&v12[2 * v7] = v24;
                v5 = v23 % 0xA;
                if (v7 == 1)
                  break;
                v23 = *(unsigned __int16 *)(v16 + 28 + 2 * v7) | (v5 << 16);
                v24 = v23 / 0xA;
                v25 = v7 - 2;
                --v7;
                if (v25 >= *((_QWORD *)v10._rawValue + 2))
                {
                  __break(1u);
                  goto LABEL_60;
                }
              }
              v21 = v68;
              v26 = *((_QWORD *)v10._rawValue + 2);
              if (v26)
                goto LABEL_21;
LABEL_24:
              swift_bridgeObjectRelease();
              *(_DWORD *)v83 = v21;
              *(_WORD *)&v83[4] = v78;
              *(_WORD *)&v83[6] = v9;
              *(_WORD *)&v83[8] = v76;
              *(_WORD *)&v83[10] = v74;
              *(_WORD *)&v83[12] = v72;
              *(_WORD *)&v83[14] = v13;
              *(_WORD *)&v83[16] = v70;
              *(_WORD *)&v83[18] = v11;
              NSDecimal.copyVariableLengthInteger(_:)(v10);
              if (v28)
                goto LABEL_77;
              v29 = *((_QWORD *)v10._rawValue + 2);
              swift_bridgeObjectRelease();
              if (HIDWORD(v29))
                goto LABEL_78;
              _So9NSDecimala__length_setter(v29, v83);
              *(_DWORD *)v85 = *(_DWORD *)v83;
              *(_OWORD *)&v85[4] = *(_OWORD *)&v83[4];
              *(_QWORD *)v83 = v5 | 0x30;
              v30._countAndFlagsBits = MEMORY[0x186DA46D0](v83, 1);
              String.append(_:)(v30);
              swift_bridgeObjectRelease();
              v18 = *(_DWORD *)v85;
              v79 = *(_WORD *)&v85[4];
              LOWORD(v9) = *(_WORD *)&v85[6];
              LOWORD(v5) = *(_WORD *)&v85[8];
              LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
              LOWORD(v11) = *(_WORD *)&v85[12];
              LOWORD(v12) = *(_WORD *)&v85[14];
              LOWORD(v7) = *(_WORD *)&v85[16];
              LOWORD(v13) = *(_WORD *)&v85[18];
              *(_OWORD *)v83 = *(_OWORD *)v85;
              *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
              *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
              v31 = _So9NSDecimala__length_getter(v83);
              v17 = v79;
              if (!v31)
                goto LABEL_62;
            }
            v5 = 0;
            v10._rawValue = (void *)MEMORY[0x1E0DEE9D8];
            v26 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
            if (!v26)
              goto LABEL_24;
LABEL_21:
            if (!*((_WORD *)v10._rawValue + v26 + 15))
            {
              do
              {
                *((_QWORD *)v10._rawValue + 2) = v26 - 1;
                if (v26 == 1)
                  break;
              }
              while (!*((unsigned __int16 *)v10._rawValue + v26-- + 14));
            }
            goto LABEL_24;
          }
LABEL_61:
          v17 = v16;
          v18 = v76;
LABEL_62:
          *(_DWORD *)v83 = v18;
          *(_WORD *)&v83[4] = v17;
          *(_WORD *)&v83[6] = v9;
          *(_WORD *)&v83[8] = v5;
          *(_WORD *)&v83[10] = v10._rawValue;
          *(_WORD *)&v83[12] = v11;
          *(_WORD *)&v83[14] = (_WORD)v12;
          *(_WORD *)&v83[16] = v7;
          *(_WORD *)&v83[18] = v13;
          v57 = v17;
          v58 = v18;
          if ((int)_So9NSDecimala__exponent_getter(v83) > 0)
            goto LABEL_73;
          while (1)
          {
            *(_DWORD *)v83 = v58;
            *(_WORD *)&v83[4] = v57;
            *(_WORD *)&v83[6] = v9;
            *(_WORD *)&v83[8] = v5;
            *(_WORD *)&v83[10] = v10._rawValue;
            *(_WORD *)&v83[12] = v11;
            *(_WORD *)&v83[14] = (_WORD)v12;
            *(_WORD *)&v83[16] = v7;
            *(_WORD *)&v83[18] = v13;
            if (!_So9NSDecimala__exponent_getter(v83))
              break;
            v59._countAndFlagsBits = 48;
            v59._object = (void *)0xE100000000000000;
            String.append(_:)(v59);
            *(_DWORD *)v83 = v58;
            *(_WORD *)&v83[4] = v57;
            *(_WORD *)&v83[6] = v9;
            *(_WORD *)&v83[8] = v5;
            *(_WORD *)&v83[10] = v10._rawValue;
            *(_WORD *)&v83[12] = v11;
            *(_WORD *)&v83[14] = (_WORD)v12;
            *(_WORD *)&v83[16] = v7;
            *(_WORD *)&v83[18] = v13;
            v60 = _So9NSDecimala__exponent_getter(v83);
            _So9NSDecimala__exponent_setter((v60 + 1), v85);
            v58 = *(_DWORD *)v85;
            v57 = *(_WORD *)&v85[4];
            LOWORD(v9) = *(_WORD *)&v85[6];
            LOWORD(v5) = *(_WORD *)&v85[8];
            LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
            LOWORD(v11) = *(_WORD *)&v85[12];
            LOWORD(v12) = *(_WORD *)&v85[14];
            LOWORD(v7) = *(_WORD *)&v85[16];
            LOWORD(v13) = *(_WORD *)&v85[18];
          }
          goto LABEL_72;
        }
        goto LABEL_55;
      }
LABEL_59:
      v56 = 5136718;
      v55 = 0xE300000000000000;
      goto LABEL_76;
    }
    return 0;
  }
  if (*(double *)&a1 <= 0.0)
    return 0;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v86 = 0xD000000000000014;
  v87 = 0x8000000182306250;
  specialized NSDecimal.init(_:)(*(double *)&a1);
  v33 = v32;
  LOWORD(v5) = v34;
  LOWORD(v7) = v35;
  *(_QWORD *)v85 = v32;
  v36 = HIDWORD(v32);
  v9 = HIWORD(v32);
  v10._rawValue = (void *)(v34 >> 16);
  *(_QWORD *)&v85[8] = v34;
  v11 = HIDWORD(v34);
  v12 = (char *)HIWORD(v34);
  v13 = HIWORD(v35);
  *(_DWORD *)&v85[16] = v35;
  if (!_So9NSDecimala__length_getter(v85))
  {
    *(_DWORD *)v85 = v33;
    *(_WORD *)&v85[4] = v36;
    *(_WORD *)&v85[6] = v9;
    *(_WORD *)&v85[8] = v5;
    *(_WORD *)&v85[10] = v10._rawValue;
    *(_WORD *)&v85[12] = v11;
    *(_WORD *)&v85[14] = (_WORD)v12;
    *(_WORD *)&v85[16] = v7;
    *(_WORD *)&v85[18] = v13;
    if (_So9NSDecimala__isNegative_getter(v85))
      goto LABEL_59;
  }
  *(_DWORD *)v85 = v33;
  *(_WORD *)&v85[4] = v36;
  *(_WORD *)&v85[6] = v9;
  *(_WORD *)&v85[8] = v5;
  *(_WORD *)&v85[10] = v10._rawValue;
  *(_WORD *)&v85[12] = v11;
  *(_WORD *)&v85[14] = (_WORD)v12;
  *(_WORD *)&v85[16] = v7;
  *(_WORD *)&v85[18] = v13;
  if (!_So9NSDecimala__length_getter(v85))
  {
LABEL_55:
    v55 = 0xE100000000000000;
    v56 = 48;
LABEL_76:
    v67 = v55;
    String.append(_:)(*(Swift::String *)&v56);
    swift_bridgeObjectRelease();
    return v86;
  }
  *(_QWORD *)&v84 = 0;
  *((_QWORD *)&v84 + 1) = 0xE000000000000000;
  *(_DWORD *)v85 = v33;
  *(_WORD *)&v85[4] = v36;
  *(_WORD *)&v85[6] = v9;
  *(_WORD *)&v85[8] = v5;
  *(_WORD *)&v85[10] = v10._rawValue;
  *(_WORD *)&v85[12] = v11;
  *(_WORD *)&v85[14] = (_WORD)v12;
  *(_WORD *)&v85[16] = v7;
  *(_WORD *)&v85[18] = v13;
  *(_DWORD *)v83 = v33;
  *(_WORD *)&v83[4] = v36;
  *(_WORD *)&v83[6] = v9;
  *(_WORD *)&v83[8] = v5;
  *(_WORD *)&v83[10] = v10._rawValue;
  *(_WORD *)&v83[12] = v11;
  *(_WORD *)&v83[14] = (_WORD)v12;
  *(_WORD *)&v83[16] = v7;
  *(_WORD *)&v83[18] = v13;
  if ((int)_So9NSDecimala__exponent_getter(v83) >= 1)
  {
    do
    {
      v37._countAndFlagsBits = 48;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      *(_DWORD *)v83 = v33;
      *(_WORD *)&v83[4] = v36;
      *(_WORD *)&v83[6] = v9;
      *(_WORD *)&v83[8] = v5;
      *(_WORD *)&v83[10] = v10._rawValue;
      *(_WORD *)&v83[12] = v11;
      *(_WORD *)&v83[14] = (_WORD)v12;
      *(_WORD *)&v83[16] = v7;
      *(_WORD *)&v83[18] = v13;
      v38 = _So9NSDecimala__exponent_getter(v83);
      _So9NSDecimala__exponent_setter((v38 - 1), v85);
      v33 = *(_DWORD *)v85;
      LOWORD(v36) = *(_WORD *)&v85[4];
      LOWORD(v9) = *(_WORD *)&v85[6];
      LOWORD(v5) = *(_WORD *)&v85[8];
      LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
      LOWORD(v11) = *(_WORD *)&v85[12];
      LOWORD(v12) = *(_WORD *)&v85[14];
      LOWORD(v7) = *(_WORD *)&v85[16];
      LOWORD(v13) = *(_WORD *)&v85[18];
      *(_OWORD *)v83 = *(_OWORD *)v85;
      *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
      *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v83) > 0);
  }
  *(_DWORD *)v83 = v33;
  *(_WORD *)&v83[4] = v36;
  *(_WORD *)&v83[6] = v9;
  *(_WORD *)&v83[8] = v5;
  *(_WORD *)&v83[10] = v10._rawValue;
  *(_WORD *)&v83[12] = v11;
  *(_WORD *)&v83[14] = (_WORD)v12;
  *(_WORD *)&v83[16] = v7;
  *(_WORD *)&v83[18] = v13;
  if (!_So9NSDecimala__exponent_getter(v83))
  {
    _So9NSDecimala__exponent_setter(1, v85);
    v33 = *(_DWORD *)v85;
    LOWORD(v36) = *(_WORD *)&v85[4];
    LOWORD(v9) = *(_WORD *)&v85[6];
    LOWORD(v5) = *(_WORD *)&v85[8];
    LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
    LOWORD(v11) = *(_WORD *)&v85[12];
    LOWORD(v12) = *(_WORD *)&v85[14];
    LOWORD(v7) = *(_WORD *)&v85[16];
    LOWORD(v13) = *(_WORD *)&v85[18];
  }
  *(_DWORD *)v83 = v33;
  *(_WORD *)&v83[4] = v36;
  *(_WORD *)&v83[6] = v9;
  *(_WORD *)&v83[8] = v5;
  *(_WORD *)&v83[10] = v10._rawValue;
  *(_WORD *)&v83[12] = v11;
  *(_WORD *)&v83[14] = (_WORD)v12;
  *(_WORD *)&v83[16] = v7;
  *(_WORD *)&v83[18] = v13;
  if (!_So9NSDecimala__length_getter(v83))
  {
    v39 = v36;
    v40 = v33;
LABEL_68:
    *(_DWORD *)v83 = v40;
    *(_WORD *)&v83[4] = v39;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    v57 = v39;
    v58 = v40;
    if ((int)_So9NSDecimala__exponent_getter(v83) > 0)
      goto LABEL_73;
    while (1)
    {
      *(_DWORD *)v83 = v58;
      *(_WORD *)&v83[4] = v57;
      *(_WORD *)&v83[6] = v9;
      *(_WORD *)&v83[8] = v5;
      *(_WORD *)&v83[10] = v10._rawValue;
      *(_WORD *)&v83[12] = v11;
      *(_WORD *)&v83[14] = (_WORD)v12;
      *(_WORD *)&v83[16] = v7;
      *(_WORD *)&v83[18] = v13;
      if (!_So9NSDecimala__exponent_getter(v83))
        break;
      v61._countAndFlagsBits = 48;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      *(_DWORD *)v83 = v58;
      *(_WORD *)&v83[4] = v57;
      *(_WORD *)&v83[6] = v9;
      *(_WORD *)&v83[8] = v5;
      *(_WORD *)&v83[10] = v10._rawValue;
      *(_WORD *)&v83[12] = v11;
      *(_WORD *)&v83[14] = (_WORD)v12;
      *(_WORD *)&v83[16] = v7;
      *(_WORD *)&v83[18] = v13;
      v62 = _So9NSDecimala__exponent_getter(v83);
      _So9NSDecimala__exponent_setter((v62 + 1), v85);
      v58 = *(_DWORD *)v85;
      v57 = *(_WORD *)&v85[4];
      LOWORD(v9) = *(_WORD *)&v85[6];
      LOWORD(v5) = *(_WORD *)&v85[8];
      LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
      LOWORD(v11) = *(_WORD *)&v85[12];
      LOWORD(v12) = *(_WORD *)&v85[14];
      LOWORD(v7) = *(_WORD *)&v85[16];
      LOWORD(v13) = *(_WORD *)&v85[18];
    }
LABEL_72:
    v63._countAndFlagsBits = 46;
    v63._object = (void *)0xE100000000000000;
    String.append(_:)(v63);
    v64._countAndFlagsBits = 48;
    v64._object = (void *)0xE100000000000000;
    String.append(_:)(v64);
LABEL_73:
    *(_DWORD *)v83 = v58;
    *(_WORD *)&v83[4] = v57;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    if (_So9NSDecimala__isNegative_getter(v83))
    {
      v65._countAndFlagsBits = 45;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);
    }
    *(_OWORD *)v83 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    v56 = String.init<A>(_:)();
    v55 = v66;
    goto LABEL_76;
  }
  v39 = v36;
  v40 = v33;
  while (1)
  {
    v80 = v39;
    *(_DWORD *)v83 = v40;
    *(_WORD *)&v83[4] = v39;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    if (!_So9NSDecimala__exponent_getter(v83))
    {
      v41._countAndFlagsBits = 46;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
    }
    *(_DWORD *)v83 = v40;
    *(_WORD *)&v83[4] = v80;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v5;
    *(_WORD *)&v83[10] = v10._rawValue;
    *(_WORD *)&v83[12] = v11;
    *(_WORD *)&v83[14] = (_WORD)v12;
    *(_WORD *)&v83[16] = v7;
    *(_WORD *)&v83[18] = v13;
    v42 = _So9NSDecimala__exponent_getter(v83);
    _So9NSDecimala__exponent_setter((v42 + 1), v85);
    v43 = *(_DWORD *)v85;
    LOWORD(v9) = *(_WORD *)&v85[6];
    LOWORD(v13) = *(_WORD *)&v85[14];
    v76 = *(unsigned __int16 *)&v85[8];
    v81 = *(_WORD *)&v85[4];
    v73 = *(_WORD *)&v85[12];
    v75 = *(_WORD *)&v85[10];
    LOWORD(v11) = *(_WORD *)&v85[18];
    v71 = *(_WORD *)&v85[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v85 | ((unint64_t)*(unsigned __int16 *)&v85[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[6] << 48), *(unsigned __int16 *)&v85[8] | ((unint64_t)*(unsigned __int16 *)&v85[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v85[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v85[14] << 48), *(unsigned __int16 *)&v85[16] | (*(unsigned __int16 *)&v85[18] << 16));
    v16 = v44;
    v7 = *(_QWORD *)(v44 + 16);
    if (v7)
    {
      v69 = v43;
      v10._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v12 = (char *)v10._rawValue + 30;
      *((_QWORD *)v10._rawValue + 2) = v7;
      bzero((char *)v10._rawValue + 32, 2 * v7);
      v45 = *(unsigned __int16 *)(2 * v7 + v16 + 30);
      v46 = v45 / 0xA;
      while (1)
      {
        *(_WORD *)&v12[2 * v7] = v46;
        v5 = v45 % 0xA;
        if (v7 == 1)
          break;
        v45 = *(unsigned __int16 *)(v16 + 28 + 2 * v7) | (v5 << 16);
        v46 = v45 / 0xA;
        v47 = v7 - 2;
        --v7;
        if (v47 >= *((_QWORD *)v10._rawValue + 2))
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
      }
      v43 = v69;
      v48 = *((_QWORD *)v10._rawValue + 2);
      if (!v48)
        goto LABEL_50;
    }
    else
    {
      v5 = 0;
      v10._rawValue = (void *)MEMORY[0x1E0DEE9D8];
      v48 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v48)
        goto LABEL_50;
    }
    if (!*((_WORD *)v10._rawValue + v48 + 15))
    {
      do
      {
        *((_QWORD *)v10._rawValue + 2) = v48 - 1;
        if (v48 == 1)
          break;
      }
      while (!*((unsigned __int16 *)v10._rawValue + v48-- + 14));
    }
LABEL_50:
    swift_bridgeObjectRelease();
    *(_DWORD *)v83 = v43;
    *(_WORD *)&v83[4] = v81;
    *(_WORD *)&v83[6] = v9;
    *(_WORD *)&v83[8] = v76;
    *(_WORD *)&v83[10] = v75;
    *(_WORD *)&v83[12] = v73;
    *(_WORD *)&v83[14] = v13;
    *(_WORD *)&v83[16] = v71;
    *(_WORD *)&v83[18] = v11;
    NSDecimal.copyVariableLengthInteger(_:)(v10);
    if (v50)
      break;
    v51 = *((_QWORD *)v10._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v51))
      goto LABEL_78;
    _So9NSDecimala__length_setter(v51, v83);
    *(_DWORD *)v85 = *(_DWORD *)v83;
    *(_OWORD *)&v85[4] = *(_OWORD *)&v83[4];
    *(_QWORD *)v83 = v5 | 0x30;
    v52._countAndFlagsBits = MEMORY[0x186DA46D0](v83, 1);
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v40 = *(_DWORD *)v85;
    v82 = *(_WORD *)&v85[4];
    LOWORD(v9) = *(_WORD *)&v85[6];
    LOWORD(v5) = *(_WORD *)&v85[8];
    LOWORD(v10._rawValue) = *(_WORD *)&v85[10];
    LOWORD(v11) = *(_WORD *)&v85[12];
    LOWORD(v12) = *(_WORD *)&v85[14];
    LOWORD(v7) = *(_WORD *)&v85[16];
    LOWORD(v13) = *(_WORD *)&v85[18];
    *(_OWORD *)v83 = *(_OWORD *)v85;
    *(_WORD *)&v83[16] = *(_WORD *)&v85[16];
    *(_WORD *)&v83[18] = *(_WORD *)&v85[18];
    v53 = _So9NSDecimala__length_getter(v83);
    v39 = v82;
    if (!v53)
      goto LABEL_68;
  }
LABEL_77:
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_78:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::String __swiftcall NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(Swift::String stem)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String result;
  _QWORD v26[6];
  uint64_t v27;
  void *v28;
  Swift::String v29;

  object = stem._object;
  countAndFlagsBits = stem._countAndFlagsBits;
  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  v11 = *(char *)(v1 + 56);
  v12 = String.count.getter();
  if (v12 >= 1)
  {
    v27 = countAndFlagsBits;
    v28 = object;
    if ((v11 & 0x80000000) == 0)
    {
      swift_bridgeObjectRetain();
LABEL_24:
      v13 = v27;
      v14 = v28;
      goto LABEL_28;
    }
    if ((v9 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      v22 = v7 & 1;
      if ((v5 & 1) == 0)
        goto LABEL_23;
LABEL_21:
      if (v22)
        goto LABEL_24;
      v4 = 0;
LABEL_23:
      v24._countAndFlagsBits = NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(v4, v6, v22);
      v29._countAndFlagsBits = 32;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    v29._countAndFlagsBits = 46;
    v29._object = (void *)0xE100000000000000;
    MEMORY[0x1E0C80A78](v12);
    v26[2] = &v29;
    swift_bridgeObjectRetain();
    specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v26, countAndFlagsBits, (unint64_t)object);
    if ((v16 & 1) != 0)
    {
      v23._countAndFlagsBits = MEMORY[0x186DA4928](48, 0xE100000000000000, v8);
      v29._countAndFlagsBits = 46;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v19 = v29._countAndFlagsBits;
      v20 = v29._object;
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    v17 = String.index(after:)();
    specialized Collection.suffix(from:)(v17, countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    if (Substring.distance(from:to:)() >= v8)
      goto LABEL_20;
    v18 = Substring.distance(from:to:)();
    v13 = swift_bridgeObjectRelease();
    if (!__OFSUB__(v8, v18))
    {
      v19 = MEMORY[0x186DA4928](48, 0xE100000000000000, v8 - v18);
LABEL_19:
      String.append(_:)(*(Swift::String *)&v19);
LABEL_20:
      swift_bridgeObjectRelease();
      v22 = v7 & 1;
      if ((v5 & 1) == 0)
        goto LABEL_23;
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  if (v11 < 0)
  {
    v13 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(v4, v5 & 1, v6, v7 & 1, v8, v9 & 1, v10, v11 & 1);
  }
  else
  {
    v13 = MEMORY[0x186DA4928](64, 0xE100000000000000, v4);
    v29._countAndFlagsBits = v13;
    v29._object = v14;
    if ((v6 & 1) != 0)
    {
      v21._countAndFlagsBits = 43;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
    }
    else
    {
      if (__OFSUB__(v5, v4))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v15._countAndFlagsBits = MEMORY[0x186DA4928](35, 0xE100000000000000, v5 - v4);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
    }
    v13 = v29._countAndFlagsBits;
    v14 = v29._object;
  }
LABEL_28:
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

void CurrencyFormatStyleConfiguration.Collection.skeleton.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v6[34];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = MEMORY[0x1E0C80A78](v2);
  v6[12] = (char *)v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&loc_181A6ABE8
     + dword_181A6BB7C[*(unsigned __int8 *)(v0
                                          + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0)
                                                   + 44))];
  __asm { BR              X11 }
}

void sub_181A6ABF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  int v25;
  uint64_t v26;
  Swift::String v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  Swift::String v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __int16 v49;
  int i;
  Swift::String v51;
  int v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  Swift::String v81;
  Swift::String v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  Swift::String v99;
  int v100;
  unint64_t v101;
  Swift::String v102;
  uint64_t v103;
  int v104;
  const char *v105;
  unint64_t v106;
  Swift::String v107;

  *(_QWORD *)(v8 - 248) = v0;
  *(_QWORD *)(v8 - 168) = 0xD000000000000010;
  *(_QWORD *)(v8 - 160) = 0x80000001823062F0;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v8 - 160);
  *(_QWORD *)(v8 - 104) = *(_QWORD *)(v8 - 168);
  *(_QWORD *)(v8 - 96) = v10;
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
LABEL_39:
    v62 = *(_QWORD *)(v2 + 16);
    v61 = *(_QWORD *)(v2 + 24);
    v64 = *(_QWORD *)(v2 + 32);
    v63 = *(_QWORD *)(v2 + 40);
    v65 = *(_QWORD *)(v2 + 48);
    v66 = *(_QWORD *)(v2 + 56);
    v67 = *(_QWORD *)(v2 + 64);
    v68 = *(unsigned __int8 *)(v2 + 72);
    v69 = v2 + *(int *)(v5 + 40);
    v70 = *(unsigned __int8 *)(v69 + 8);
    if (v63 >> 1 == 0xFFFFFFFF && v66 <= 1 && v68 < 2)
    {
      v71 = *(_QWORD *)(v8 - 248);
      if (v70 == 255)
        goto LABEL_56;
      *(_QWORD *)(v8 - 168) = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(*(_QWORD *)v69, v70 & 1);
      *(_QWORD *)(v8 - 160) = v72;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v70 != 255)
      {
        v73 = *(_QWORD *)v69;
        *(_QWORD *)(v8 - 168) = v62;
        *(_QWORD *)(v8 - 160) = v61;
        *(_QWORD *)(v8 - 152) = v64;
        *(_QWORD *)(v8 - 144) = v63;
        *(_QWORD *)(v8 - 136) = v65;
        *(_QWORD *)(v8 - 128) = v66;
        *(_QWORD *)(v8 - 120) = v67;
        *(_BYTE *)(v8 - 112) = v68;
        v74._countAndFlagsBits = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(v73, v70 & 1);
        v75 = NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(v74);
        swift_bridgeObjectRelease();
        String.append(_:)(v75);
        v71 = *(_QWORD *)(v8 - 248);
LABEL_55:
        swift_bridgeObjectRelease();
LABEL_56:
        v83 = *(unsigned __int8 *)(v2 + 73);
        if (v83 != 2)
        {
          if ((v83 & 1) != 0)
            v84 = 0x666F2D70756F7267;
          else
            v84 = 0;
          if ((v83 & 1) != 0)
            v85 = 0xE900000000000066;
          else
            v85 = 0xE000000000000000;
          v86 = v85;
          String.append(_:)(*(Swift::String *)&v84);
          swift_bridgeObjectRelease();
        }
        v87 = *(_DWORD *)(v2 + 74);
        if (v87 != 2)
        {
          v88 = 0x776C612D6E676973;
          if ((v87 & 0x10000) != 0)
            v88 = v7;
          v89 = 0x8000000182306210;
          if ((v87 & 0x10000) == 0)
            v89 = 0xEB00000000737961;
          v90 = 0x76656E2D6E676973;
          if ((v87 & 0x100) == 0)
            v90 = 0x7475612D6E676973;
          v91 = 0xE90000000000006FLL;
          if ((v87 & 0x100) != 0)
            v91 = 0xEA00000000007265;
          if ((v87 & 1) != 0)
          {
            v88 = v90;
            v89 = v91;
          }
          v92 = 0xEF676E69746E756FLL;
          v93 = 0x6363612D6E676973;
          v94 = v7 + 6;
          if ((v87 & 0x10000) != 0)
            v94 = v7 + 11;
          v95 = 0x80000001823062B0;
          if ((v87 & 0x10000) != 0)
            v95 = 0x8000000182306290;
          if ((v87 & 1) == 0)
          {
            v93 = v94;
            v92 = v95;
          }
          v96 = (v87 & 0x1000000) == 0;
          if ((v87 & 0x1000000) != 0)
            v97 = v93;
          else
            v97 = v88;
          if (v96)
            v98 = v89;
          else
            v98 = v92;
          *(_QWORD *)(v8 - 168) = v97;
          *(_QWORD *)(v8 - 160) = v98;
          swift_bridgeObjectRetain();
          v99._countAndFlagsBits = 32;
          v99._object = (void *)0xE100000000000000;
          String.append(_:)(v99);
          swift_bridgeObjectRelease();
          String.append(_:)(*(Swift::String *)(v8 - 168));
          swift_bridgeObjectRelease();
        }
        v100 = *(unsigned __int8 *)(v2 + 78);
        if (v100 != 2)
        {
          if ((v100 & 1) != 0)
            v101 = 0xEE00737961776C61;
          else
            v101 = 0xEC0000006F747561;
          *(_QWORD *)(v8 - 168) = 0x2D6C616D69636564;
          *(_QWORD *)(v8 - 160) = v101;
          swift_bridgeObjectRetain();
          v102._countAndFlagsBits = 32;
          v102._object = (void *)0xE100000000000000;
          String.append(_:)(v102);
          swift_bridgeObjectRelease();
          String.append(_:)(*(Swift::String *)(v8 - 168));
          swift_bridgeObjectRelease();
        }
        outlined init with copy of FloatingPointRoundingRule?(v2 + *(int *)(v5 + 36), v71);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v71, 1, v3) == 1)
        {
          outlined destroy of Any?(v71, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
          goto LABEL_109;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v71, v3);
        v103 = *(_QWORD *)(v8 - 256);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v103, v6, v3);
        v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v103, v3);
        if (v104 == *MEMORY[0x1E0DED4F0])
        {
          v7 += 5;
          v105 = "rounding-mode-half-up";
        }
        else if (v104 == *MEMORY[0x1E0DED4E8])
        {
          v7 += 7;
          v105 = "rounding-mode-half-even";
        }
        else if (v104 == *MEMORY[0x1E0DED500])
        {
          v7 += 5;
          v105 = "rounding-mode-ceiling";
        }
        else if (v104 == *MEMORY[0x1E0DED508])
        {
          v7 += 3;
          v105 = "rounding-mode-floor";
        }
        else if (v104 == *MEMORY[0x1E0DED4D8])
        {
          v7 += 2;
          v105 = "rounding-mode-down";
        }
        else
        {
          if (v104 != *MEMORY[0x1E0DED4E0])
          {
            (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v8 - 256), v3);
            v7 = 0;
            v106 = 0xE000000000000000;
            goto LABEL_108;
          }
          v105 = "rounding-mode-up";
        }
        v106 = (unint64_t)(v105 - 32) | 0x8000000000000000;
LABEL_108:
        *(_QWORD *)(v8 - 168) = v7;
        *(_QWORD *)(v8 - 160) = v106;
        swift_bridgeObjectRetain();
        v107._countAndFlagsBits = 32;
        v107._object = (void *)0xE100000000000000;
        String.append(_:)(v107);
        swift_bridgeObjectRelease();
        String.append(_:)(*(Swift::String *)(v8 - 168));
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v3);
LABEL_109:
        __asm { BR              X11 }
      }
      if ((v68 & 0x80) != 0)
      {
        v78 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(*(_QWORD *)(v2 + 16), v61 & 1, *(_QWORD *)(v2 + 32), v63 & 1, v65, *(_BYTE *)(v2 + 56) & 1, v67, v68 & 1);
        v80 = v79;
        v71 = *(_QWORD *)(v8 - 248);
      }
      else
      {
        *(_QWORD *)(v8 - 168) = MEMORY[0x186DA4928](64, 0xE100000000000000, *(_QWORD *)(v2 + 16));
        *(_QWORD *)(v8 - 160) = v76;
        if ((v64 & 1) != 0)
        {
          v81._countAndFlagsBits = 43;
          v81._object = (void *)0xE100000000000000;
          String.append(_:)(v81);
        }
        else
        {
          if (__OFSUB__(v61, v62))
          {
            __break(1u);
LABEL_112:
            swift_bridgeObjectRelease();
            swift_unexpectedError();
            __break(1u);
LABEL_113:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x181A6BB7CLL);
          }
          v77._countAndFlagsBits = MEMORY[0x186DA4928](35, 0xE100000000000000, v61 - v62);
          String.append(_:)(v77);
          swift_bridgeObjectRelease();
        }
        v71 = *(_QWORD *)(v8 - 248);
        v78 = *(_QWORD *)(v8 - 168);
        v80 = *(_QWORD *)(v8 - 160);
      }
      *(_QWORD *)(v8 - 168) = v78;
      *(_QWORD *)(v8 - 160) = v80;
      swift_bridgeObjectRetain();
    }
    v82._countAndFlagsBits = 32;
    v82._object = (void *)0xE100000000000000;
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)(v8 - 168));
    goto LABEL_55;
  }
  *(_QWORD *)(v8 - 272) = v3;
  *(_QWORD *)(v8 - 264) = v1;
  *(_QWORD *)(v8 - 296) = v6;
  *(_QWORD *)(v8 - 288) = v5;
  *(_QWORD *)(v8 - 280) = v4;
  v11 = *(double *)v2;
  *(_QWORD *)(v8 - 184) = 0x2F656C616373;
  *(_QWORD *)(v8 - 176) = 0xE600000000000000;
  specialized NSDecimal.init(_:)(v11);
  v13 = v12;
  LOWORD(v15) = v14;
  LOWORD(v17) = v16;
  *(_QWORD *)(v8 - 168) = v12;
  v18 = HIDWORD(v12);
  v19 = HIWORD(v12);
  v20 = v14 >> 16;
  *(_QWORD *)(v8 - 160) = v14;
  v21 = HIDWORD(v14);
  v22 = HIWORD(v14);
  LODWORD(v23) = HIWORD(v16);
  *(_DWORD *)(v8 - 152) = v16;
  if (_So9NSDecimala__length_getter((_DWORD *)(v8 - 168)))
    goto LABEL_3;
  *(_DWORD *)(v8 - 168) = v13;
  *(_WORD *)(v8 - 164) = v18;
  *(_WORD *)(v8 - 162) = v19;
  *(_WORD *)(v8 - 160) = v15;
  *(_WORD *)(v8 - 158) = v20;
  *(_WORD *)(v8 - 156) = v21;
  *(_WORD *)(v8 - 154) = v22;
  *(_WORD *)(v8 - 152) = v17;
  *(_WORD *)(v8 - 150) = v23;
  if (!_So9NSDecimala__isNegative_getter((_DWORD *)(v8 - 168)))
  {
LABEL_3:
    *(_DWORD *)(v8 - 168) = v13;
    *(_WORD *)(v8 - 164) = v18;
    *(_WORD *)(v8 - 162) = v19;
    *(_WORD *)(v8 - 160) = v15;
    *(_WORD *)(v8 - 158) = v20;
    *(_WORD *)(v8 - 156) = v21;
    *(_WORD *)(v8 - 154) = v22;
    *(_WORD *)(v8 - 152) = v17;
    *(_WORD *)(v8 - 150) = v23;
    if (_So9NSDecimala__length_getter((_DWORD *)(v8 - 168)))
    {
      *(_QWORD *)(v8 - 344) = v2;
      *(_QWORD *)(v8 - 200) = 0;
      *(_QWORD *)(v8 - 192) = 0xE000000000000000;
      *(_DWORD *)(v8 - 168) = v13;
      *(_WORD *)(v8 - 164) = v18;
      *(_WORD *)(v8 - 162) = v19;
      *(_WORD *)(v8 - 160) = v15;
      *(_WORD *)(v8 - 158) = v20;
      *(_WORD *)(v8 - 156) = v21;
      *(_WORD *)(v8 - 154) = v22;
      *(_WORD *)(v8 - 152) = v17;
      *(_WORD *)(v8 - 150) = v23;
      *(_DWORD *)(v8 - 224) = v13;
      *(_WORD *)(v8 - 220) = v18;
      *(_WORD *)(v8 - 218) = v19;
      *(_WORD *)(v8 - 216) = v15;
      *(_WORD *)(v8 - 214) = v20;
      *(_WORD *)(v8 - 212) = v21;
      *(_WORD *)(v8 - 210) = v22;
      *(_WORD *)(v8 - 208) = v17;
      *(_WORD *)(v8 - 206) = v23;
      if ((int)_So9NSDecimala__exponent_getter((char *)(v8 - 224)) >= 1)
      {
        do
        {
          v24._countAndFlagsBits = 48;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          *(_DWORD *)(v8 - 224) = v13;
          *(_WORD *)(v8 - 220) = v18;
          *(_WORD *)(v8 - 218) = v19;
          *(_WORD *)(v8 - 216) = v15;
          *(_WORD *)(v8 - 214) = v20;
          *(_WORD *)(v8 - 212) = v21;
          *(_WORD *)(v8 - 210) = v22;
          *(_WORD *)(v8 - 208) = v17;
          *(_WORD *)(v8 - 206) = v23;
          v25 = _So9NSDecimala__exponent_getter((char *)(v8 - 224));
          _So9NSDecimala__exponent_setter((v25 - 1), (_BYTE *)(v8 - 168));
          v13 = *(unsigned int *)(v8 - 168);
          v18 = *(unsigned __int16 *)(v8 - 164);
          LOWORD(v19) = *(_WORD *)(v8 - 162);
          LOWORD(v15) = *(_WORD *)(v8 - 160);
          LOWORD(v20) = *(_WORD *)(v8 - 158);
          LOWORD(v21) = *(_WORD *)(v8 - 156);
          LOWORD(v22) = *(_WORD *)(v8 - 154);
          LOWORD(v17) = *(_WORD *)(v8 - 152);
          LOWORD(v23) = *(_WORD *)(v8 - 150);
          *(_DWORD *)(v8 - 224) = v13;
          *(_WORD *)(v8 - 220) = v18;
          *(_WORD *)(v8 - 218) = v19;
          *(_WORD *)(v8 - 216) = v15;
          *(_WORD *)(v8 - 214) = v20;
          *(_WORD *)(v8 - 212) = v21;
          *(_WORD *)(v8 - 210) = v22;
          *(_WORD *)(v8 - 208) = v17;
          *(_WORD *)(v8 - 206) = v23;
        }
        while ((int)_So9NSDecimala__exponent_getter((char *)(v8 - 224)) > 0);
      }
      *(_DWORD *)(v8 - 224) = v13;
      *(_WORD *)(v8 - 220) = v18;
      *(_WORD *)(v8 - 218) = v19;
      *(_WORD *)(v8 - 216) = v15;
      *(_WORD *)(v8 - 214) = v20;
      *(_WORD *)(v8 - 212) = v21;
      *(_WORD *)(v8 - 210) = v22;
      *(_WORD *)(v8 - 208) = v17;
      *(_WORD *)(v8 - 206) = v23;
      if (!_So9NSDecimala__exponent_getter((char *)(v8 - 224)))
      {
        _So9NSDecimala__exponent_setter(1, (_BYTE *)(v8 - 168));
        v13 = *(unsigned int *)(v8 - 168);
        v18 = *(unsigned __int16 *)(v8 - 164);
        LOWORD(v19) = *(_WORD *)(v8 - 162);
        LOWORD(v15) = *(_WORD *)(v8 - 160);
        LOWORD(v20) = *(_WORD *)(v8 - 158);
        LOWORD(v21) = *(_WORD *)(v8 - 156);
        LOWORD(v22) = *(_WORD *)(v8 - 154);
        LOWORD(v17) = *(_WORD *)(v8 - 152);
        LOWORD(v23) = *(_WORD *)(v8 - 150);
      }
      *(_DWORD *)(v8 - 224) = v13;
      *(_QWORD *)(v8 - 240) = v18;
      *(_WORD *)(v8 - 220) = v18;
      *(_WORD *)(v8 - 218) = v19;
      *(_WORD *)(v8 - 216) = v15;
      *(_WORD *)(v8 - 214) = v20;
      *(_WORD *)(v8 - 212) = v21;
      *(_WORD *)(v8 - 210) = v22;
      *(_WORD *)(v8 - 208) = v17;
      *(_WORD *)(v8 - 206) = v23;
      if (_So9NSDecimala__length_getter((_DWORD *)(v8 - 224)))
      {
        v26 = *(_QWORD *)(v8 - 240);
        while (1)
        {
          *(_QWORD *)(v8 - 240) = v26;
          *(_DWORD *)(v8 - 224) = v13;
          *(_WORD *)(v8 - 220) = v26;
          *(_WORD *)(v8 - 218) = v19;
          *(_WORD *)(v8 - 216) = v15;
          *(_WORD *)(v8 - 214) = v20;
          *(_WORD *)(v8 - 212) = v21;
          *(_WORD *)(v8 - 210) = v22;
          *(_WORD *)(v8 - 208) = v17;
          *(_WORD *)(v8 - 206) = v23;
          if (!_So9NSDecimala__exponent_getter((char *)(v8 - 224)))
          {
            *(_QWORD *)(v8 - 304) = v13;
            v27._countAndFlagsBits = 46;
            v27._object = (void *)0xE100000000000000;
            String.append(_:)(v27);
            v13 = *(_QWORD *)(v8 - 304);
          }
          *(_DWORD *)(v8 - 224) = v13;
          *(_WORD *)(v8 - 220) = *(_QWORD *)(v8 - 240);
          *(_WORD *)(v8 - 218) = v19;
          *(_WORD *)(v8 - 216) = v15;
          *(_WORD *)(v8 - 214) = v20;
          *(_WORD *)(v8 - 212) = v21;
          *(_WORD *)(v8 - 210) = v22;
          *(_WORD *)(v8 - 208) = v17;
          *(_WORD *)(v8 - 206) = v23;
          v28 = _So9NSDecimala__exponent_getter((char *)(v8 - 224));
          _So9NSDecimala__exponent_setter((v28 + 1), (_BYTE *)(v8 - 168));
          v29 = *(unsigned int *)(v8 - 168);
          v30 = *(unsigned __int16 *)(v8 - 164);
          v23 = *(unsigned __int16 *)(v8 - 162);
          v31 = *(unsigned __int16 *)(v8 - 160);
          v32 = *(unsigned __int16 *)(v8 - 158);
          v33 = *(unsigned __int16 *)(v8 - 156);
          v21 = *(unsigned __int16 *)(v8 - 154);
          v34 = *(unsigned __int16 *)(v8 - 152);
          *(_QWORD *)(v8 - 304) = v30;
          *(_QWORD *)(v8 - 312) = v31;
          *(_QWORD *)(v8 - 320) = v32;
          *(_QWORD *)(v8 - 328) = v33;
          LODWORD(v20) = *(unsigned __int16 *)(v8 - 150);
          *(_DWORD *)(v8 - 332) = v34;
          NSDecimal.asVariableLengthInteger()(v29 | (v30 << 32) | (v23 << 48), v31 | (v32 << 16) | (v33 << 32) | (v21 << 48), v34 | ((_DWORD)v20 << 16));
          v13 = v35;
          v19 = *(_QWORD *)(v35 + 16);
          *(_QWORD *)(v8 - 240) = v29;
          if (v19)
            break;
          v15 = 0;
          v17 = MEMORY[0x1E0DEE9D8];
LABEL_18:
          v39 = *(_QWORD *)(v17 + 16);
          if (v39 && !*(_WORD *)(v17 + 2 * v39 + 30))
          {
            do
            {
              *(_QWORD *)(v17 + 16) = v39 - 1;
              if (v39 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v17 + 28 + 2 * v39--));
          }
          swift_bridgeObjectRelease();
          *(_DWORD *)(v8 - 224) = *(_QWORD *)(v8 - 240);
          *(_WORD *)(v8 - 220) = *(_QWORD *)(v8 - 304);
          *(_WORD *)(v8 - 218) = v23;
          *(_WORD *)(v8 - 216) = *(_QWORD *)(v8 - 312);
          *(_WORD *)(v8 - 214) = *(_QWORD *)(v8 - 320);
          *(_WORD *)(v8 - 212) = *(_QWORD *)(v8 - 328);
          *(_WORD *)(v8 - 210) = v21;
          *(_WORD *)(v8 - 208) = *(_DWORD *)(v8 - 332);
          *(_WORD *)(v8 - 206) = v20;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v17);
          if (v41)
            goto LABEL_112;
          *(_QWORD *)(v8 - 264) = 0;
          v42 = *(_QWORD *)(v17 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v42))
            goto LABEL_113;
          _So9NSDecimala__length_setter(v42, (_DWORD *)(v8 - 224));
          v43 = *(_OWORD *)(v8 - 220);
          *(_DWORD *)(v8 - 168) = *(_DWORD *)(v8 - 224);
          *(_OWORD *)(v8 - 164) = v43;
          *(_QWORD *)(v8 - 224) = v15 | 0x30;
          v44._countAndFlagsBits = MEMORY[0x186DA46D0](v8 - 224, 1);
          String.append(_:)(v44);
          swift_bridgeObjectRelease();
          v13 = *(unsigned int *)(v8 - 168);
          v45 = *(unsigned __int16 *)(v8 - 164);
          *(_QWORD *)(v8 - 240) = v45;
          LOWORD(v19) = *(_WORD *)(v8 - 162);
          LOWORD(v15) = *(_WORD *)(v8 - 160);
          LOWORD(v20) = *(_WORD *)(v8 - 158);
          LOWORD(v21) = *(_WORD *)(v8 - 156);
          LOWORD(v22) = *(_WORD *)(v8 - 154);
          LOWORD(v17) = *(_WORD *)(v8 - 152);
          LOWORD(v23) = *(_WORD *)(v8 - 150);
          *(_DWORD *)(v8 - 224) = v13;
          *(_WORD *)(v8 - 220) = v45;
          *(_WORD *)(v8 - 218) = v19;
          *(_WORD *)(v8 - 216) = v15;
          *(_WORD *)(v8 - 214) = v20;
          *(_WORD *)(v8 - 212) = v21;
          *(_WORD *)(v8 - 210) = v22;
          *(_WORD *)(v8 - 208) = v17;
          *(_WORD *)(v8 - 206) = v23;
          v46 = _So9NSDecimala__length_getter((_DWORD *)(v8 - 224));
          v26 = *(_QWORD *)(v8 - 240);
          if (!v46)
            goto LABEL_31;
        }
        v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        v22 = v17 + 30;
        *(_QWORD *)(v17 + 16) = v19;
        bzero((void *)(v17 + 32), 2 * v19);
        v36 = *(unsigned __int16 *)(2 * v19 + v13 + 30);
        v37 = v36 / 0xA;
        do
        {
          *(_WORD *)(v22 + 2 * v19) = v37;
          v15 = v36 % 0xA;
          if (v19 == 1)
            goto LABEL_18;
          v36 = *(unsigned __int16 *)(v13 + 28 + 2 * v19) | (v15 << 16);
          v37 = v36 / 0xA;
          v38 = v19 - 2;
          --v19;
        }
        while (v38 < *(_QWORD *)(v17 + 16));
        __break(1u);
      }
      v26 = *(_QWORD *)(v8 - 240);
LABEL_31:
      *(_DWORD *)(v8 - 224) = v13;
      *(_WORD *)(v8 - 220) = v26;
      *(_WORD *)(v8 - 218) = v19;
      *(_WORD *)(v8 - 216) = v15;
      *(_WORD *)(v8 - 214) = v20;
      *(_WORD *)(v8 - 212) = v21;
      *(_WORD *)(v8 - 210) = v22;
      *(_WORD *)(v8 - 208) = v17;
      *(_WORD *)(v8 - 206) = v23;
      v49 = v26;
      if ((int)_So9NSDecimala__exponent_getter((char *)(v8 - 224)) <= 0)
      {
        *(_DWORD *)(v8 - 224) = v13;
        *(_WORD *)(v8 - 220) = v49;
        *(_WORD *)(v8 - 218) = v19;
        *(_WORD *)(v8 - 216) = v15;
        *(_WORD *)(v8 - 214) = v20;
        *(_WORD *)(v8 - 212) = v21;
        *(_WORD *)(v8 - 210) = v22;
        *(_WORD *)(v8 - 208) = v17;
        *(_WORD *)(v8 - 206) = v23;
        for (i = v13; _So9NSDecimala__exponent_getter((char *)(v8 - 224)); *(_WORD *)(v8 - 206) = v23)
        {
          v51._countAndFlagsBits = 48;
          v51._object = (void *)0xE100000000000000;
          String.append(_:)(v51);
          *(_DWORD *)(v8 - 224) = i;
          *(_WORD *)(v8 - 220) = v49;
          *(_WORD *)(v8 - 218) = v19;
          *(_WORD *)(v8 - 216) = v15;
          *(_WORD *)(v8 - 214) = v20;
          *(_WORD *)(v8 - 212) = v21;
          *(_WORD *)(v8 - 210) = v22;
          *(_WORD *)(v8 - 208) = v17;
          *(_WORD *)(v8 - 206) = v23;
          v52 = _So9NSDecimala__exponent_getter((char *)(v8 - 224));
          _So9NSDecimala__exponent_setter((v52 + 1), (_BYTE *)(v8 - 168));
          i = *(_DWORD *)(v8 - 168);
          v49 = *(_WORD *)(v8 - 164);
          LOWORD(v19) = *(_WORD *)(v8 - 162);
          LOWORD(v15) = *(_WORD *)(v8 - 160);
          LOWORD(v20) = *(_WORD *)(v8 - 158);
          LOWORD(v21) = *(_WORD *)(v8 - 156);
          LOWORD(v22) = *(_WORD *)(v8 - 154);
          LOWORD(v17) = *(_WORD *)(v8 - 152);
          LOWORD(v23) = *(_WORD *)(v8 - 150);
          *(_DWORD *)(v8 - 224) = i;
          *(_WORD *)(v8 - 220) = v49;
          *(_WORD *)(v8 - 218) = v19;
          *(_WORD *)(v8 - 216) = v15;
          *(_WORD *)(v8 - 214) = v20;
          *(_WORD *)(v8 - 212) = v21;
          *(_WORD *)(v8 - 210) = v22;
          *(_WORD *)(v8 - 208) = v17;
        }
        v53._countAndFlagsBits = 46;
        v53._object = (void *)0xE100000000000000;
        String.append(_:)(v53);
        v54._countAndFlagsBits = 48;
        v54._object = (void *)0xE100000000000000;
        String.append(_:)(v54);
        LODWORD(v13) = i;
      }
      v3 = *(_QWORD *)(v8 - 272);
      *(_DWORD *)(v8 - 224) = v13;
      *(_WORD *)(v8 - 220) = v49;
      *(_WORD *)(v8 - 218) = v19;
      *(_WORD *)(v8 - 216) = v15;
      *(_WORD *)(v8 - 214) = v20;
      *(_WORD *)(v8 - 212) = v21;
      *(_WORD *)(v8 - 210) = v22;
      *(_WORD *)(v8 - 208) = v17;
      *(_WORD *)(v8 - 206) = v23;
      if (_So9NSDecimala__isNegative_getter((_DWORD *)(v8 - 224)))
      {
        v55._countAndFlagsBits = 45;
        v55._object = (void *)0xE100000000000000;
        String.append(_:)(v55);
      }
      v56 = *(_QWORD *)(v8 - 192);
      *(_QWORD *)(v8 - 224) = *(_QWORD *)(v8 - 200);
      *(_QWORD *)(v8 - 216) = v56;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      v48 = String.init<A>(_:)();
      v47 = v57;
      v4 = *(_QWORD *)(v8 - 280);
      v5 = *(_QWORD *)(v8 - 288);
      v7 = 0xD000000000000010;
      v6 = *(_QWORD *)(v8 - 296);
      v2 = *(_QWORD *)(v8 - 344);
      goto LABEL_38;
    }
    v47 = 0xE100000000000000;
    v48 = 48;
  }
  else
  {
    v47 = 0xE300000000000000;
    v48 = 5136718;
  }
  v4 = *(_QWORD *)(v8 - 280);
  v5 = *(_QWORD *)(v8 - 288);
  v7 = 0xD000000000000010;
  v6 = *(_QWORD *)(v8 - 296);
  v3 = *(_QWORD *)(v8 - 272);
LABEL_38:
  v58 = v47;
  String.append(_:)(*(Swift::String *)&v48);
  swift_bridgeObjectRelease();
  v59 = *(_QWORD *)(v8 - 176);
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v8 - 184);
  *(_QWORD *)(v8 - 160) = v59;
  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = 32;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  String.append(_:)(*(Swift::String *)(v8 - 168));
  swift_bridgeObjectRelease();
  goto LABEL_39;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys, &unk_1E0F28490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys, &unk_1E0F28490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys, &unk_1E0F28490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.CodingKeys, &unk_1E0F28490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option, &type metadata for NumberFormatStyleConfiguration.Precision.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option, &type metadata for NumberFormatStyleConfiguration.Precision.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option, &type metadata for NumberFormatStyleConfiguration.Precision.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option and conformance NumberFormatStyleConfiguration.Precision.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys, &unk_1E0F27FB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys, &unk_1E0F27FB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys, &unk_1E0F27FB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys, &unk_1E0F27FB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option);
  }
  return result;
}

BOOL specialized static CurrencyFormatStyleConfiguration.SignDisplayStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a1[2] ^ a2[2] | a2[3] ^ a1[3]) & 1) == 0;
}

uint64_t specialized static DescriptiveNumberFormatConfiguration.Collection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 == 5)
  {
    if (v3 != 5)
      return 0;
  }
  else if (v3 == 5 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

BOOL specialized static NumberFormatStyleConfiguration.SignDisplayStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F27E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F27E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F27E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F27E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy.Option and conformance NumberFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys, &unk_1E0F282F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys, &unk_1E0F282F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys, &unk_1E0F282F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.CodingKeys, &unk_1E0F282F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.CodingKeys and conformance NumberFormatStyleConfiguration.Notation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option, &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option, &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option, &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation.Option, &type metadata for NumberFormatStyleConfiguration.Notation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation.Option and conformance NumberFormatStyleConfiguration.Notation.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F28B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F28B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F28B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys, &unk_1E0F28B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option, &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys, &unk_1E0F289E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys, &unk_1E0F289E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys, &unk_1E0F289E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys, &unk_1E0F289E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.CodingKeys and conformance CurrencyFormatStyleConfiguration.Presentation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option, &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option, &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option, &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation.Option, &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation.Option and conformance CurrencyFormatStyleConfiguration.Presentation.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys, &unk_1E0F29198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys, &unk_1E0F29198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys, &unk_1E0F29198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys, &unk_1E0F29198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Presentation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option, &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option, &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option, &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation.Option, &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation.Option and conformance DescriptiveNumberFormatConfiguration.Presentation.Option);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointRoundingRule.CodingValue, &unk_1E0F36E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointRoundingRule.CodingValue, &unk_1E0F36E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointRoundingRule.CodingValue, &unk_1E0F36E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue;
  if (!lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointRoundingRule.CodingValue, &unk_1E0F36E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointRoundingRule.CodingValue and conformance FloatingPointRoundingRule.CodingValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext, &type metadata for FormatStyleCapitalizationContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext, &type metadata for FormatStyleCapitalizationContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext;
  if (!lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FormatStyleCapitalizationContext, &type metadata for FormatStyleCapitalizationContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping, &type metadata for NumberFormatStyleConfiguration.Grouping);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping, &type metadata for NumberFormatStyleConfiguration.Grouping);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Grouping, &type metadata for NumberFormatStyleConfiguration.Grouping);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision, &type metadata for NumberFormatStyleConfiguration.Precision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision, &type metadata for NumberFormatStyleConfiguration.Precision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision, &type metadata for NumberFormatStyleConfiguration.Precision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision and conformance NumberFormatStyleConfiguration.Precision);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy, &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy, &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy, &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy and conformance NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy, &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy, &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.SignDisplayStrategy, &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation, &type metadata for NumberFormatStyleConfiguration.Notation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation, &type metadata for NumberFormatStyleConfiguration.Notation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Notation, &type metadata for NumberFormatStyleConfiguration.Notation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Notation and conformance NumberFormatStyleConfiguration.Notation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy, &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy, &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.SignDisplayStrategy, &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.SignDisplayStrategy and conformance CurrencyFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation, &type metadata for CurrencyFormatStyleConfiguration.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation, &type metadata for CurrencyFormatStyleConfiguration.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Presentation, &type metadata for CurrencyFormatStyleConfiguration.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Presentation and conformance CurrencyFormatStyleConfiguration.Presentation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation, &type metadata for DescriptiveNumberFormatConfiguration.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation, &type metadata for DescriptiveNumberFormatConfiguration.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Presentation, &type metadata for DescriptiveNumberFormatConfiguration.Presentation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Presentation and conformance DescriptiveNumberFormatConfiguration.Presentation);
  }
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration()
{
  return &type metadata for NumberFormatStyleConfiguration;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Grouping()
{
  return &type metadata for NumberFormatStyleConfiguration.Grouping;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy()
{
  return &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.SignDisplayStrategy(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = v4 - 2;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.SignDisplayStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  return &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Notation()
{
  return &type metadata for NumberFormatStyleConfiguration.Notation;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration()
{
  return &type metadata for CurrencyFormatStyleConfiguration;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CurrencyFormatStyleConfiguration.SignDisplayStrategy(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[4])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.SignDisplayStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy()
{
  return &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation()
{
  return &type metadata for CurrencyFormatStyleConfiguration.Presentation;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration()
{
  return &type metadata for DescriptiveNumberFormatConfiguration;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Presentation;
}

void *type metadata accessor for FloatingPointRoundingRule.CodingValue()
{
  return &unk_1E0F36E88;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation.Option()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Presentation.Option;
}

void *type metadata accessor for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys()
{
  return &unk_1E0F29198;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation.Option()
{
  return &type metadata for CurrencyFormatStyleConfiguration.Presentation.Option;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.Presentation.CodingKeys()
{
  return &unk_1E0F289E8;
}

ValueMetadata *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return &type metadata for CurrencyFormatStyleConfiguration.SignDisplayStrategy.Option;
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Presentation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181A6C838 + 4 * byte_182065C00[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181A6C86C + 4 * byte_182065BFB[v4]))();
}

uint64_t sub_181A6C86C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A6C874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A6C87CLL);
  return result;
}

uint64_t sub_181A6C888(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A6C890);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181A6C894(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A6C89C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return &unk_1E0F28B88;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Notation.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Notation.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Notation.CodingKeys()
{
  return &unk_1E0F282F0;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.SignDisplayStrategy.Option;
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Notation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181A6C934 + 4 * byte_182065C0A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181A6C968 + 4 * byte_182065C05[v4]))();
}

uint64_t sub_181A6C968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A6C970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A6C978);
  return result;
}

uint64_t sub_181A6C984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A6C98CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181A6C990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A6C998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys()
{
  return &unk_1E0F27E08;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.DecimalSeparatorDisplayStrategy.CodingKeys()
{
  return &unk_1E0F27FB0;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Precision.CodingKeys()
{
  return &unk_1E0F28490;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.Precision(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Precision(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 2 * -a2;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 56) = 0;
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for NumberFormatStyleConfiguration.Precision.Option(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56) >> 7;
}

uint64_t destructiveProjectEnumData for NumberFormatStyleConfiguration.Precision.Option(uint64_t result)
{
  *(_BYTE *)(result + 56) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for NumberFormatStyleConfiguration.Precision.Option(uint64_t result, char a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(result + 40) & 1;
  v3 = *(_BYTE *)(result + 56) & 1 | (a2 << 7);
  *(_QWORD *)(result + 24) &= 1uLL;
  *(_QWORD *)(result + 40) = v2;
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Precision.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Precision.Option;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Grouping.Option()
{
  return &type metadata for NumberFormatStyleConfiguration.Grouping.Option;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Grouping.CodingKeys()
{
  return &unk_1E0F28150;
}

uint64_t getEnumTagSinglePayload for FormatStyleCapitalizationContext(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatStyleCapitalizationContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181A6CBEC + 4 * byte_182065C14[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181A6CC20 + 4 * byte_182065C0F[v4]))();
}

uint64_t sub_181A6CC20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A6CC28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A6CC30);
  return result;
}

uint64_t sub_181A6CC3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A6CC44);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181A6CC48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A6CC50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatStyleCapitalizationContext.Option()
{
  return &type metadata for FormatStyleCapitalizationContext.Option;
}

uint64_t storeEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Presentation.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181A6CCAC + 4 * byte_182065C19[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181A6CCCC + 4 * byte_182065C1E[v4]))();
}

_BYTE *sub_181A6CCAC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181A6CCCC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A6CCD4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A6CCDC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A6CCE4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A6CCEC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for FormatStyleCapitalizationContext.CodingKeys()
{
  return &unk_1E0F28D50;
}

_QWORD *initializeBufferWithCopyOfBuffer for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    v8 = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
    *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
    v9 = a3[9];
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    *(_OWORD *)(a1 + 57) = v8;
    v12 = type metadata accessor for FloatingPointRoundingRule();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = a3[10];
    v17 = a3[11];
    v18 = (char *)v4 + v16;
    v19 = (uint64_t)a2 + v16;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = *(_BYTE *)(v19 + 8);
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  }
  return v4;
}

uint64_t initializeWithCopy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[10];
  v15 = a3[11];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithCopy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
  *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
  v10 = a3[9];
  v11 = (void *)(a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[10];
  v15 = a3[11];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[10];
  v18 = a3[11];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    v8 = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    v9 = a3[9];
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    *(_OWORD *)(a1 + 57) = v8;
    v12 = type metadata accessor for FloatingPointRoundingRule();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = a3[10];
    v17 = a3[11];
    v18 = (char *)v4 + v16;
    v19 = (uint64_t)a2 + v16;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = *(_BYTE *)(v19 + 8);
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
  }
  return v4;
}

uint64_t destroy for CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 36);
  v3 = type metadata accessor for FloatingPointRoundingRule();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

uint64_t initializeWithCopy for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[10];
  v15 = a3[11];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

uint64_t assignWithCopy for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  LOWORD(v6) = *((_WORD *)a2 + 37);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_WORD *)(a1 + 74) = v6;
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  v10 = a3[9];
  v11 = (void *)(a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[10];
  v15 = a3[11];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  *(_OWORD *)(a1 + 57) = v7;
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[10];
  v18 = a3[11];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t base witness table accessor for Equatable in NumberFormatStyleConfiguration.Collection()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
}

uint64_t base witness table accessor for Equatable in CurrencyFormatStyleConfiguration.Collection()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, type metadata accessor for CurrencyFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys, &unk_1E0F28520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys, &unk_1E0F28520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys, &unk_1E0F28520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys, &unk_1E0F28520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Int? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Int? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Int?);
    v2 = MEMORY[0x1E0DEB420];
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
  }
  return result;
}

BOOL specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BOOL8 result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, int *);
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, int *);
  uint64_t v56;
  double *v57;
  int v58;
  double *v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  double v64;
  double v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  int *v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81[4];
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v66 - v17;
  v19 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v19 = 1;
    if ((v19 & 1) != 0)
      return 0;
  }
  v70 = v7;
  v71 = v5;
  v72 = v10;
  v73 = (int *)v4;
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(unsigned __int8 *)(a1 + 72);
  v23 = *(_QWORD *)(a2 + 16);
  v24 = *(_QWORD *)(a2 + 24);
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_QWORD *)(a2 + 40);
  v27 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a2 + 56);
  v29 = *(_QWORD *)(a2 + 64);
  v30 = *(unsigned __int8 *)(a2 + 72);
  if (v20 >> 1 != 0xFFFFFFFF || v21 > 1 || v22 >= 2)
  {
    v32 = *(_QWORD *)(a1 + 64);
    v33 = *(_QWORD *)(a1 + 48);
    v34 = *(_QWORD *)(a1 + 32);
    v74 = *(_OWORD *)(a1 + 16);
    v75 = v34;
    v76 = v20;
    v77 = v33;
    v78 = v21;
    v79 = v32;
    v80 = v22;
    if (v26 >> 1 == 0xFFFFFFFF && v28 <= 1 && v30 < 2)
      return 0;
    v68 = v14;
    v67 = v18;
    v69 = v16;
    v66 = v29;
    v35 = v25;
    v36 = v8;
    v37 = v27;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(&v74, v81);
    *(_QWORD *)&v82 = v23;
    *((_QWORD *)&v82 + 1) = v24;
    v83 = v35;
    v84 = v26;
    v85 = v37;
    v86 = v28;
    v8 = v36;
    v87 = v66;
    v88 = v30;
    v38 = specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v81, &v82);
    v16 = v69;
    v18 = v67;
    v14 = v68;
    if (!v38)
      return 0;
LABEL_18:
    v39 = *(unsigned __int8 *)(a1 + 73);
    v40 = *(unsigned __int8 *)(a2 + 73);
    if (v39 == 2)
    {
      if (v40 != 2)
        return 0;
    }
    else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
    {
      return 0;
    }
    v41 = *(_DWORD *)(a2 + 74);
    if (*(_DWORD *)(a1 + 74) == 2)
    {
      if (v41 != 2)
        return 0;
    }
    else
    {
      if (v41 == 2)
        return 0;
      result = 0;
      v42 = *(_DWORD *)(a1 + 74) ^ *(_DWORD *)(a2 + 74);
      if ((v42 & 1) != 0 || ((v42 >> 8) & 1) != 0 || (v42 & 0x10000) != 0 || (v42 & 0x1000000) != 0)
        return result;
    }
    v43 = *(unsigned __int8 *)(a1 + 78);
    v44 = *(unsigned __int8 *)(a2 + 78);
    if (v43 == 2)
    {
      v45 = v73;
      if (v44 != 2)
        return 0;
    }
    else
    {
      v45 = v73;
      if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0)
        return 0;
    }
    v46 = (uint64_t)v18;
    v47 = v16;
    v48 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?(a1 + *(int *)(v48 + 36), v46);
    outlined init with copy of FloatingPointRoundingRule?(a2 + *(int *)(v48 + 36), v47);
    v49 = (uint64_t)v72;
    v50 = (uint64_t)&v72[*(int *)(v8 + 48)];
    outlined init with copy of FloatingPointRoundingRule?(v46, (uint64_t)v72);
    outlined init with copy of FloatingPointRoundingRule?(v47, v50);
    v51 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v71 + 48);
    if (v51(v49, 1, v45) == 1)
    {
      v73 = (int *)v48;
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if (v51(v50, 1, v45) == 1)
      {
        outlined destroy of Any?((uint64_t)v72, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
LABEL_45:
        v56 = v73[10];
        v57 = (double *)(a1 + v56);
        v58 = *(unsigned __int8 *)(a1 + v56 + 8);
        v59 = (double *)(a2 + v56);
        v60 = *(unsigned __int8 *)(a2 + v56 + 8);
        if (v58 == 255)
        {
          if (v60 != 255)
            return 0;
        }
        else
        {
          if (v60 == 255)
            return 0;
          v64 = *v57;
          v65 = *v59;
          result = 0;
          if ((v58 & 1) != 0)
          {
            if ((v60 & 1) == 0 || v64 != v65)
              return result;
          }
          else if ((v60 & 1) != 0 || *(_QWORD *)&v64 != *(_QWORD *)&v65)
          {
            return result;
          }
        }
        if (*(unsigned __int8 *)(a1 + v73[11]) == *(unsigned __int8 *)(a2 + v73[11]))
        {
          v61 = v73[12];
          v62 = *(unsigned __int8 *)(a1 + v61);
          v63 = *(unsigned __int8 *)(a2 + v61);
          if (v62 != 3)
            return v63 != 3 && v62 == v63;
          if (v63 == 3)
            return 1;
        }
        return 0;
      }
    }
    else
    {
      v69 = v47;
      outlined init with copy of FloatingPointRoundingRule?(v49, (uint64_t)v14);
      if (v51(v50, 1, v45) != 1)
      {
        v73 = (int *)v48;
        v52 = v71;
        v53 = v70;
        (*(void (**)(char *, uint64_t, int *))(v71 + 32))(v70, v50, v45);
        v54 = dispatch thunk of static Equatable.== infix(_:_:)();
        v55 = *(void (**)(char *, int *))(v52 + 8);
        v55(v53, v45);
        outlined destroy of Any?(v69, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        v55(v14, v45);
        outlined destroy of Any?(v49, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        if ((v54 & 1) == 0)
          return 0;
        goto LABEL_45;
      }
      outlined destroy of Any?(v69, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      (*(void (**)(char *, int *))(v71 + 8))(v14, v45);
    }
    outlined destroy of Any?((uint64_t)v72, &demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
    return 0;
  }
  result = 0;
  if (v26 >> 1 == 0xFFFFFFFF && v28 <= 1 && v30 < 2)
    goto LABEL_18;
  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.RoundingIncrement.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v11;
  char v12;
  _BYTE v13[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v13[15] = 0;
    v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if ((v9 & 1) != 0)
    {
      v13[14] = 1;
      v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v12 = v11;
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
      if ((v12 & 1) != 0)
        v7 = 0x3FE0000000000000;
    }
    else
    {
      v7 = v8;
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t specialized NumberFormatStyleConfiguration.Precision.Option.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NumberFormatStyleConfiguration.Precision.Option.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Precision.Option.CodingKeys and conformance NumberFormatStyleConfiguration.Precision.Option.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v40 = 0;
  v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if ((v10 & 1) != 0 || (v12 = v9, v35 = 1, v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(), (v14 & 1) != 0))
  {
    v39 = 2;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if ((v18 & 1) == 0)
    {
      v12 = v17;
      v38 = 3;
      v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      if ((v20 & 1) == 0)
      {
        v21 = v19;
        v37 = 4;
        v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        if ((v23 & 1) == 0)
        {
          v31 = v22;
          v36 = 5;
          v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          if ((v25 & 1) == 0)
          {
            v15 = 0;
            v32 = v24;
            v33 = v21;
            LODWORD(v34) = 128;
            v16 = v31;
            goto LABEL_7;
          }
        }
      }
    }
    v26 = type metadata accessor for DecodingError();
    swift_allocError();
    v34 = v27;
    v29 = a1[3];
    v28 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v29);
    MEMORY[0x186DA5FB4](v29, v28);
    v30 = v34;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v30, *MEMORY[0x1E0DEC458], v26);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v15 = v13;
  v32 = 0;
  v33 = 0;
  v16 = 0;
  LODWORD(v34) = 0;
LABEL_7:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v33;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v32;
  *(_BYTE *)(a2 + 56) = v34;
  return result;
}

unint64_t specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C616373 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69736963657270 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x70756F7267 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823063F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000182306410
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x676E69646E756F72 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000182306430
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6F697461746F6ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t specialized NumberFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6576697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1869768058 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized CurrencyFormatStyleConfiguration.Collection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C616373 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69736963657270 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x70756F7267 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823063F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000182306410
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x676E69646E756F72 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000182306430
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6F697461746F6ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t specialized CurrencyFormatStyleConfiguration.SignDisplayStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6576697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1869768058 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69746E756F636361 && a2 == 0xEA0000000000676ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F27C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F27C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F27C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F27C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection.CodingKeys and conformance NumberFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement, &type metadata for NumberFormatStyleConfiguration.RoundingIncrement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement, &type metadata for NumberFormatStyleConfiguration.RoundingIncrement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement, &type metadata for NumberFormatStyleConfiguration.RoundingIncrement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement and conformance NumberFormatStyleConfiguration.RoundingIncrement);
  }
  return result;
}

uint64_t outlined assign with take of FloatingPointRoundingRule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F28958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F28958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F28958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection.CodingKeys, &unk_1E0F28958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection.CodingKeys and conformance CurrencyFormatStyleConfiguration.Collection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys, &unk_1E0F27CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys, &unk_1E0F27CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys, &unk_1E0F27CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys, &unk_1E0F27CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys and conformance NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<String>);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DECCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(_QWORD *a1)
{
  uint64_t v1;

  return specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, *(_QWORD **)(v1 + 16)) & 1;
}

unint64_t specialized CurrencyFormatStyleConfiguration.Presentation.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t specialized DescriptiveNumberFormatConfiguration.Collection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000182304440)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

uint64_t outlined init with take of NumberFormatStyleConfiguration.Precision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys()
{
  return &unk_1E0F27CE8;
}

uint64_t storeEnumTagSinglePayload for CurrencyFormatStyleConfiguration.Collection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_181A704D4 + 4 * byte_182065C28[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_181A70508 + 4 * byte_182065C23[v4]))();
}

uint64_t sub_181A70508(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A70510(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A70518);
  return result;
}

uint64_t sub_181A70524(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A7052CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_181A70530(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A70538(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CurrencyFormatStyleConfiguration.Collection.CodingKeys()
{
  return &unk_1E0F28958;
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Collection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_181A705A0 + 4 * byte_182065C32[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181A705D4 + 4 * byte_182065C2D[v4]))();
}

uint64_t sub_181A705D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A705DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A705E4);
  return result;
}

uint64_t sub_181A705F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A705F8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_181A705FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A70604(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Collection.CodingKeys()
{
  return &unk_1E0F27C58;
}

uint64_t storeEnumTagSinglePayload for FloatingPointRoundingRule.CodingValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181A7066C + 4 * byte_182065C3C[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181A706A0 + 4 * byte_182065C37[v4]))();
}

uint64_t sub_181A706A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A706A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A706B0);
  return result;
}

uint64_t sub_181A706BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A706C4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181A706C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A706D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NumberFormatStyleConfiguration.Precision.Option.CodingKeys()
{
  return &unk_1E0F28520;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Collection(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DescriptiveNumberFormatConfiguration.Collection(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181A707D8 + 4 * byte_182065C46[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_181A7080C + 4 * byte_182065C41[v4]))();
}

uint64_t sub_181A7080C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_181A70814(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x181A7081CLL);
  return result;
}

uint64_t sub_181A70828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x181A70830);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181A70834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_181A7083C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DescriptiveNumberFormatConfiguration.Collection()
{
  return &type metadata for DescriptiveNumberFormatConfiguration.Collection;
}

uint64_t getEnumTagSinglePayload for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for NumberFormatStyleConfiguration.RoundingIncrement(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.RoundingIncrement()
{
  return &type metadata for NumberFormatStyleConfiguration.RoundingIncrement;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection, &type metadata for DescriptiveNumberFormatConfiguration.Collection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection, &type metadata for DescriptiveNumberFormatConfiguration.Collection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection, &type metadata for DescriptiveNumberFormatConfiguration.Collection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection and conformance DescriptiveNumberFormatConfiguration.Collection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys, &unk_1E0F29088);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys, &unk_1E0F29088);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys, &unk_1E0F29088);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys;
  if (!lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys, &unk_1E0F29088);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DescriptiveNumberFormatConfiguration.Collection.CodingKeys and conformance DescriptiveNumberFormatConfiguration.Collection.CodingKeys);
  }
  return result;
}

uint64_t specialized NumberFormatStyleConfiguration.RoundingIncrement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72656765746E69 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6974616F6C66 && a2 == 0xED0000746E696F50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized NumberFormatStyleConfiguration.Precision.Option.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x8000000182306330
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000182306350
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000182306370
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000182306390
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823063B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001823063D0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t storeEnumTagSinglePayload for NumberFormatStyleConfiguration.Grouping(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181A711DC + 4 * byte_182065C50[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181A71210 + 4 * byte_182065C4B[v4]))();
}

uint64_t sub_181A71210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A71218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A71220);
  return result;
}

uint64_t sub_181A7122C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A71234);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181A71238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A71240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DescriptiveNumberFormatConfiguration.Collection.CodingKeys()
{
  return &unk_1E0F29088;
}

double NSRunLoop.SchedulerTimeType.date.getter@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double NSRunLoop.SchedulerTimeType.date.setter(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t (*NSRunLoop.SchedulerTimeType.date.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double NSRunLoop.SchedulerTimeType.distance(to:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 - *v2;
  *a2 = result;
  return result;
}

double NSRunLoop.SchedulerTimeType.advanced(by:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 + *v2;
  *a2 = result;
  return result;
}

double NSRunLoop.SchedulerTimeType.Stride.timeInterval.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double NSRunLoop.SchedulerTimeType.Stride.magnitude.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void NSRunLoop.SchedulerTimeType.Stride.magnitude.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*NSRunLoop.SchedulerTimeType.Stride.magnitude.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a1, a2, v7);
  v10 = Double.init<A>(exactly:)((uint64_t)v9, a2);
  v12 = v11;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  if ((v12 & 1) != 0)
    v14 = 0;
  else
    v14 = v10;
  *(_QWORD *)a3 = v14;
  *(_BYTE *)(a3 + 8) = v12 & 1;
  return result;
}

uint64_t Double.init<A>(exactly:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  if (dispatch thunk of BinaryInteger.bitWidth.getter() > 64)
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    v4 = static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    if ((v4 & 1) != 0)
      return v11;
    goto LABEL_13;
  }
  v6 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v7 = dispatch thunk of BinaryInteger._lowWord.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if ((v6 & 1) != 0)
  {
    v8 = (double)v7;
    if ((double)v7 < 9.22337204e18)
    {
      *(double *)&result = (double)v7;
      if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
      {
        if (v8 > -9.22337204e18)
        {
          v9 = (uint64_t)v8;
          goto LABEL_12;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    v10 = (double)(unint64_t)v7;
    if ((double)(unint64_t)v7 < 1.84467441e19)
    {
      *(double *)&result = (double)(unint64_t)v7;
      if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) != 0)
      {
        v9 = (unint64_t)v10;
LABEL_12:
        if (v7 == v9)
          return result;
        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return result;
    }
  }
LABEL_13:
  *(double *)&result = 0.0;
  return result;
}

BOOL static NSRunLoop.SchedulerTimeType.Stride.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static NSRunLoop.SchedulerTimeType.Stride.* infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 - *a2;
  *a3 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.*= infix(_:_:)(double *a1, double *a2)
{
  double result;

  result = *a2 * *a1;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.+= infix(_:_:)(double *a1, double *a2)
{
  double result;

  result = *a2 + *a1;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.-= infix(_:_:)(double *a1, double *a2)
{
  double result;

  result = *a1 - *a2;
  *a1 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1;
  *a2 = (double)a1;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.microseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.nanoseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

BOOL static NSRunLoop.SchedulerTimeType.Stride.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return 0x647574696E67616DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x647574696E67616DLL && a2 == 0xE900000000000065)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F36C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F36C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F36C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys, &unk_1E0F36C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

double protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double protocol witness for static SignedNumeric.- prefix(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = 0.0 - *a1;
  *a2 = result;
  return result;
}

double protocol witness for SignedNumeric.negate() in conformance NSRunLoop.SchedulerTimeType.Stride()
{
  double *v0;
  double result;

  result = 0.0 - *v0;
  *v0 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSRunLoop.SchedulerTimeType.Stride@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NSRunLoop.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSRunLoop.SchedulerTimeType.Stride(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.Stride.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride.CodingKeys and conformance NSRunLoop.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void protocol witness for static SchedulerTimeIntervalConvertible.seconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double protocol witness for static SchedulerTimeIntervalConvertible.milliseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

double protocol witness for static SchedulerTimeIntervalConvertible.microseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double protocol witness for static SchedulerTimeIntervalConvertible.nanoseconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

double protocol witness for Numeric.magnitude.getter in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double protocol witness for static Numeric.* infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

double protocol witness for static Numeric.*= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1, double *a2)
{
  double result;

  result = *a2 * *a1;
  *a1 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1, double *a2)
{
  double result;

  result = *a2 + *a1;
  *a1 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 - *a2;
  *a3 = result;
  return result;
}

double protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType.Stride(double *a1, double *a2)
{
  double result;

  result = *a1 - *a2;
  *a1 = result;
  return result;
}

void NSRunLoop.SchedulerTimeType.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return 1702125924;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSRunLoop.SchedulerTimeType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NSRunLoop.SchedulerTimeType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSRunLoop.SchedulerTimeType.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys, &unk_1E0F36B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys, &unk_1E0F36B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys, &unk_1E0F36B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.CodingKeys, &unk_1E0F36B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys);
  }
  return result;
}

Swift::Int NSRunLoop.SchedulerTimeType.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NSRunLoop.SchedulerTimeType.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSRunLoop.SchedulerTimeType.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.CodingKeys and conformance NSRunLoop.SchedulerTimeType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance NSRunLoop.SchedulerTimeType(double *a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  *a1 = *a4 + *a6;
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSRunLoop.SchedulerTimeType@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NSRunLoop.SchedulerTimeType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSRunLoop.SchedulerTimeType(_QWORD *a1)
{
  return NSRunLoop.SchedulerTimeType.encode(to:)(a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a2 - *a1 > 0.0;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a1 - *a2 <= 0.0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a2 - *a1 <= 0.0;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a1 - *a2 > 0.0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSRunLoop.SchedulerTimeType(double *a1, double *a2)
{
  return *a2 - *a1 == 0.0;
}

void NSRunLoop.schedule(options:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v8[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v8[5] = v6;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v8[3] = &block_descriptor_0;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_performBlock_, v7);
  _Block_release(v7);
}

uint64_t sub_181A72190()
{
  swift_release();
  return swift_deallocObject();
}

id partial apply for closure #1 in NSRunLoop.schedule(after:tolerance:options:_:)(void *a1)
{
  uint64_t v1;

  (*(void (**)(void))(v1 + 16))();
  return objc_msgSend(a1, sel_invalidate);
}

double NSRunLoop.now.getter@<D0>(double *a1@<X8>)
{
  double result;
  timespec __tp;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void NSRunLoop.minimumTolerance.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void @objc NSRunLoop.runLoopScheduled(action:)(void *a1, uint64_t a2, char *a3)
{
  void (*v4)(void);
  char *v5;
  id v6;

  v4 = *(void (**)(void))&a3[OBJC_IVAR____TtC10FoundationP33_AE6BD10245B422606B9EE93C01570D8F21_CombineRunLoopAction_action];
  v5 = a3;
  v6 = a1;
  v4();

}

void protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance NSRunLoop(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSRunLoop.schedule(after:tolerance:options:_:)(a1, a2, a3, a4, a5);
}

id _CombineRunLoopAction.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _CombineRunLoopAction();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_181A72364()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E0DEB0F0];
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride, &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride, &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride, &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride, &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride, &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride, &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType.Stride, &type metadata for NSRunLoop.SchedulerTimeType.Stride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType.Stride and conformance NSRunLoop.SchedulerTimeType.Stride);
  }
  return result;
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Numeric in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E0DEB0B0];
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E0DEB0F8];
}

uint64_t type metadata accessor for _CombineRunLoopAction()
{
  return objc_opt_self();
}

void *type metadata accessor for NSRunLoop.SchedulerTimeType.CodingKeys()
{
  return &unk_1E0F36B88;
}

uint64_t storeEnumTagSinglePayload for NSRunLoop.SchedulerTimeType.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181A72618 + 4 * byte_1820680A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181A72638 + 4 * byte_1820680A5[v4]))();
}

_BYTE *sub_181A72618(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181A72638(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A72640(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A72648(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A72650(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A72658(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for NSRunLoop.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_1E0F36C18;
}

uint64_t (*PropertyListEncoder.outputFormat.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 32);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(_QWORD *)(v1 + 16);
  return PropertyListEncoder.outputFormat.modify;
}

uint64_t PropertyListEncoder.outputFormat.modify(_QWORD *a1)
{
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)a1[2];
  *(_QWORD *)(a1[1] + 16) = *a1;
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t PropertyListEncoder.userInfo.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + 32);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  v2 = *(_QWORD *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t PropertyListEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(_QWORD *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

_QWORD *PropertyListEncoder.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9E0];
  v0[2] = 200;
  v0[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[4] = v2;
  return v0;
}

uint64_t *PropertyListEncoder._encodeBPlist<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t *v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  void (*v36)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v7 = PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(a1, a2, a3);
  if (!v4)
  {
    v8 = (uint64_t)v7;
    v9 = *((unsigned __int8 *)v7 + 40);
    v10 = v7[2];
    v11 = v7[3];
    v12 = v7[4];
    switch(v9 >> 4)
    {
      case 0u:
        goto LABEL_17;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        v55 = v7;
        v13 = type metadata accessor for EncodingError();
        swift_allocError();
        v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v15[3] = a2;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
        v50 = 0;
        v51 = 0xE000000000000000;
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v9);
        _StringGuts.grow(_:)(54);
        v17._countAndFlagsBits = 0x6576656C2D706F54;
        v17._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v17);
        v18._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._object = (void *)0x8000000182306710;
        v3 = &v50;
        v19._countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v19);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC4B0], v13);
        goto LABEL_22;
      case 7u:
        v20 = type metadata accessor for EncodingError();
        swift_allocError();
        v22 = v21;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v22[3] = a2;
        v23 = __swift_allocate_boxed_opaque_existential_1(v22);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v23, a1, a2);
        v50 = 0;
        v51 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v24._countAndFlagsBits = 0x6576656C2D706F54;
        v24._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v24);
        v25._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26 = 0xD000000000000028;
        v27 = 0x80000001823066B0;
        v3 = &v50;
        goto LABEL_18;
      case 9u:
        v28 = v12 | v11;
        if (!(v12 | v11 | v10) && v9 == 144
          || (v9 == 144 ? (v29 = v10 == 1) : (v29 = 0), v29 ? (v30 = v28 == 0) : (v30 = 0), v30))
        {
          v49 = v7[2];
          v40 = v7[3];
          v41 = v7[4];
          v20 = type metadata accessor for EncodingError();
          swift_allocError();
          v43 = v42;
          v55 = (uint64_t *)((char *)v42
                          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context))
                                   + 48));
          v43[3] = a2;
          v44 = __swift_allocate_boxed_opaque_existential_1(v43);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v44, a1, a2);
          v50 = 0;
          v51 = 0xE000000000000000;
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v49, v40, v41, v9);
          _StringGuts.grow(_:)(55);
          v45._countAndFlagsBits = 0x6576656C2D706F54;
          v45._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v45);
          v46._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          v47._countAndFlagsBits = 0xD00000000000002BLL;
          v47._object = (void *)0x8000000182306740;
          v3 = &v50;
          String.append(_:)(v47);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          v35 = *MEMORY[0x1E0DEC4B0];
          v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104);
          v37 = v43;
        }
        else
        {
          if (v9 != 144 || v10 != 2 || v28)
          {
LABEL_19:
            v38 = swift_slowAlloc();
            v50 = MEMORY[0x1E0DEE9D8];
            LOBYTE(v51) = 0;
            v52 = v38;
            v53 = 0x2000;
            v54 = 0;
            _BPlistEncodingFormat.Writer.serializePlist(_:)(v8);
            v3 = v39;
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(0, 0xC000000000000000);
            swift_release();
            return v3;
          }
LABEL_17:
          v20 = type metadata accessor for EncodingError();
          swift_allocError();
          v22 = v31;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v22[3] = a2;
          v32 = __swift_allocate_boxed_opaque_existential_1(v22);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v32, a1, a2);
          v50 = 0;
          v51 = 0xE000000000000000;
          _StringGuts.grow(_:)(54);
          v33._countAndFlagsBits = 0x6576656C2D706F54;
          v33._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v33);
          v34._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          v27 = 0x80000001823066E0;
          v3 = &v50;
          v26 = 0xD00000000000002ALL;
LABEL_18:
          String.append(_:)(*(Swift::String *)&v26);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          v35 = *MEMORY[0x1E0DEC4B0];
          v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104);
          v37 = v22;
        }
        v36(v37, v35, v20);
LABEL_22:
        swift_willThrow();
        swift_release();
        break;
      default:
        goto LABEL_19;
    }
  }
  return v3;
}

__int128 *PropertyListEncoder._encodeXML<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v12;
  Swift::String v13;
  const char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t *v32;
  uint64_t *v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  __int128 v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 *v42;
  unint64_t v43;
  unint64_t v44;

  PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:)(a1, a2, a3, (uint64_t)&v40);
  if (!v4)
  {
    v7 = v40;
    v8 = v41;
    switch((char)v41)
    {
      case 0:
        goto LABEL_13;
      case 1:
      case 2:
      case 3:
        type metadata accessor for EncodingError();
        v44 = *((_QWORD *)&v7 + 1);
        swift_allocError();
        v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v10[3] = a2;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
        (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
        *(_QWORD *)&v40 = 0;
        *((_QWORD *)&v40 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v12._countAndFlagsBits = 0x6576656C2D706F54;
        v12._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v12);
        v13._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14 = " encoded as number property list fragment.";
        goto LABEL_14;
      case 4:
        v25 = type metadata accessor for EncodingError();
        swift_allocError();
        v27 = v26;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v27[3] = a2;
        v28 = __swift_allocate_boxed_opaque_existential_1(v27);
        (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(_QWORD *)(a2 - 8) + 16))(v28, a1, a2);
        *(_QWORD *)&v40 = 0;
        *((_QWORD *)&v40 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v29._countAndFlagsBits = 0x6576656C2D706F54;
        v29._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v29);
        v30._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._countAndFlagsBits = 0xD000000000000028;
        v31._object = (void *)0x80000001823066B0;
        v3 = &v40;
        String.append(_:)(v31);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC4B0], v25);
        swift_willThrow();
        return v3;
      case 8:
        if ((unint64_t)(v40 - 1) <= 1)
        {
          v15 = type metadata accessor for EncodingError();
          swift_allocError();
          v44 = *((_QWORD *)&v7 + 1);
          v17 = v16;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v17[3] = a2;
          v18 = __swift_allocate_boxed_opaque_existential_1(v17);
          (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(_QWORD *)(a2 - 8) + 16))(v18, a1, a2);
          *(_QWORD *)&v40 = 0;
          *((_QWORD *)&v40 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(55);
          v19._countAndFlagsBits = 0x6576656C2D706F54;
          v19._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v19);
          v20._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v20);
          swift_bridgeObjectRelease();
          v21._countAndFlagsBits = 0xD00000000000002BLL;
          v21._object = (void *)0x8000000182306740;
          v3 = &v40;
          String.append(_:)(v21);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC4B0], v15);
          swift_willThrow();
          v22 = v7;
          v23 = v44;
          v24 = 8;
LABEL_15:
          outlined consume of _XMLPlistEncodingFormat.Reference(v22, v23, v24);
          return v3;
        }
        if (v40 == 0)
        {
LABEL_13:
          type metadata accessor for EncodingError();
          v44 = *((_QWORD *)&v7 + 1);
          swift_allocError();
          v10 = v32;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v10[3] = a2;
          v33 = __swift_allocate_boxed_opaque_existential_1(v10);
          (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(_QWORD *)(a2 - 8) + 16))(v33, a1, a2);
          *(_QWORD *)&v40 = 0;
          *((_QWORD *)&v40 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(54);
          v34._countAndFlagsBits = 0x6576656C2D706F54;
          v34._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v34);
          v35._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v14 = " encoded as string property list fragment.";
LABEL_14:
          v36._object = (void *)((unint64_t)(v14 - 32) | 0x8000000000000000);
          v3 = &v40;
          v36._countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v36);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)&v7 + 1) - 8) + 104))(v10, *MEMORY[0x1E0DEC4B0], *((_QWORD *)&v7 + 1));
          swift_willThrow();
          v22 = v7;
          v23 = v44;
          v24 = v8;
          goto LABEL_15;
        }
LABEL_8:
        *(_QWORD *)&v40 = swift_slowAlloc();
        *((_QWORD *)&v40 + 1) = 0x2000;
        v41 = 0;
        v42 = 0;
        v43 = 0xC000000000000000;
        _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n", 164);
        v38 = v7;
        v39 = v8;
        _XMLPlistEncodingFormat.Writer.append(_:indentation:)((uint64_t)&v38, 0);
        *(_QWORD *)&v38 = 0x3E7473696C702F3CLL;
        *((_QWORD *)&v38 + 1) = 0xE90000000000000ALL;
        specialized String.withUTF8<A>(_:)((uint64_t *)&v38);
        swift_bridgeObjectRelease();
        if (v41 >= 1)
          Data._Representation.append(contentsOf:)();
        v3 = v42;
        if ((_QWORD)v40)
          MEMORY[0x186DA9E78](v40, -1, -1);
        outlined consume of _XMLPlistEncodingFormat.Reference(v7, *((unint64_t *)&v7 + 1), v8);
        break;
      default:
        goto LABEL_8;
    }
  }
  return v3;
}

unint64_t PropertyListEncoder.encode<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *boxed_opaque_existential_1;
  id v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v8 = *(_QWORD *)(v4 + 16);
  switch(v8)
  {
    case 1:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 40) = v14;
      *(_QWORD *)(inited + 48) = 0xD000000000000038;
      *(_QWORD *)(inited + 56) = 0x8000000182306560;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v15 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v57);
      v16 = v57;
      v17 = v58;
      swift_retain();
      result = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
      if ((v19 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v15[(result >> 6) + 8] |= 1 << result;
        v20 = (uint64_t *)(v15[6] + 16 * result);
        *v20 = v16;
        v20[1] = v17;
        result = (unint64_t)outlined init with take of Any(&v59, (_OWORD *)(v15[7] + 32 * result));
        v21 = v15[2];
        v22 = __OFADD__(v21, 1);
        v23 = v21 + 1;
        if (!v22)
        {
          v15[2] = v23;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v24 = objc_allocWithZone((Class)NSError);
          v25 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v10 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 3852, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v26 = objc_msgSend(v10, sel_domain);
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v29 = v28;

          if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v29 == v30)
            goto LABEL_18;
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v31 & 1) != 0)
          {
LABEL_20:
            swift_willThrow();
            goto LABEL_21;
          }
          __break(1u);
LABEL_12:
          v32 = PropertyListEncoder._encodeXML<A>(_:configuration:)(a1, a2, a3);
          if (!v5)
            return (unint64_t)v32;
          v10 = v5;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    case 100:
      goto LABEL_12;
    case 200:
      v9 = PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:configuration:)(a1, a2, a3, a4);
      v10 = v5;
      if (!v5)
      {
        v11 = (uint64_t)v9;
        v12 = swift_slowAlloc();
        v57 = MEMORY[0x1E0DEE9D8];
        LOBYTE(v58) = 0;
        *(_QWORD *)&v59 = v12;
        *((_QWORD *)&v59 + 1) = 0x2000;
        v60 = 0;
        _BPlistEncodingFormat.Writer.serializePlist(_:)(v11);
        v10 = v56;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(0, 0xC000000000000000);
        swift_release();
        return (unint64_t)v10;
      }
LABEL_21:
      v51 = type metadata accessor for EncodingError();
      swift_allocError();
      v53 = v52;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
      v53[3] = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
      v55 = v10;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v53, *MEMORY[0x1E0DEC4B0], v51);
      swift_willThrow();

      return (unint64_t)v10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v33 = swift_initStackObject();
  *(_OWORD *)(v33 + 16) = xmmword_18205C850;
  *(_QWORD *)(v33 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(v33 + 40) = v34;
  v57 = 0;
  v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  v35._object = (void *)0x8000000182306500;
  v35._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v35);
  v61 = *(_QWORD *)(v4 + 16);
  type metadata accessor for NSPropertyListFormat(0);
  _print_unlocked<A, B>(_:_:)();
  *(_QWORD *)(v33 + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v33 + 48) = 0;
  *(_QWORD *)(v33 + 56) = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v36 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v33 + 32, (uint64_t)&v57);
  v37 = v57;
  v38 = v58;
  swift_retain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
  if ((v39 & 1) != 0)
    goto LABEL_26;
  v36[(result >> 6) + 8] |= 1 << result;
  v40 = (uint64_t *)(v36[6] + 16 * result);
  *v40 = v37;
  v40[1] = v38;
  result = (unint64_t)outlined init with take of Any(&v59, (_OWORD *)(v36[7] + 32 * result));
  v41 = v36[2];
  v22 = __OFADD__(v41, 1);
  v42 = v41 + 1;
  if (v22)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v36[2] = v42;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v43 = objc_allocWithZone((Class)NSError);
  v44 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v43, sel_initWithDomain_code_userInfo_, v44, 3852, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v45 = objc_msgSend(v10, sel_domain);
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v47;

  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v48 == v49)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    goto LABEL_20;
  }
  v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
    goto LABEL_20;
LABEL_28:
  __break(1u);
  return result;
}

uint64_t *PropertyListEncoder._encodeXML<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;

  v4 = &v12;
  PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:configuration:)(a1, a3, (uint64_t)&v12);
  if (!v3)
  {
    v5 = v12;
    v6 = v13;
    v7 = v14;
    v12 = swift_slowAlloc();
    v13 = 0x2000;
    v14 = 0;
    v15 = 0;
    v16 = 0xC000000000000000;
    _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n", 164);
    v9 = v5;
    v10 = v6;
    v11 = v7;
    _XMLPlistEncodingFormat.Writer.append(_:indentation:)((uint64_t)&v9, 0);
    v9 = 0x3E7473696C702F3CLL;
    v10 = 0xE90000000000000ALL;
    specialized String.withUTF8<A>(_:)(&v9);
    swift_bridgeObjectRelease();
    if (v14 >= 1)
      Data._Representation.append(contentsOf:)();
    v4 = v15;
    if (v12)
      MEMORY[0x186DA9E78](v12, -1, -1);
    outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  }
  return v4;
}

uint64_t PropertyListEncoder.encode<A, B>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v7 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t, __n128))(a6 + 16))(a4, a6, v15);
  v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 200))(a1, v17, a3, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
  return v18;
}

_QWORD *PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v20;
  Swift::String v21;
  _QWORD v22[2];
  _OWORD v23[2];
  uint64_t v24;

  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  v10 = swift_allocObject();
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 16) = v11;
  *(_OWORD *)(v10 + 40) = xmmword_182068780;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v23);
  v12 = v23[1];
  *(_OWORD *)(v10 + 56) = v23[0];
  *(_OWORD *)(v10 + 72) = v12;
  *(_QWORD *)(v10 + 88) = v24;
  swift_bridgeObjectRetain();
  v13 = (_QWORD *)v10;
  v14 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3);
  if (!v4)
  {
    v13 = (_QWORD *)v14;
    if (v14)
    {
      swift_release();
      return v13;
    }
    v16 = type metadata accessor for EncodingError();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v18[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v22[0] = 0x6576656C2D706F54;
    v22[1] = 0xEA0000000000206CLL;
    v20._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x80000001823065E0;
    v13 = v22;
    v21._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC4B0], v16);
    swift_willThrow();
  }
  swift_release();
  return v13;
}

uint64_t PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;

  v11 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  type metadata accessor for __PlistEncoderXML();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = 0x8000000000000000;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_BYTE *)(v12 + 72) = 8;
  *(_OWORD *)(v12 + 80) = xmmword_182068080;
  *(_BYTE *)(v12 + 96) = 8;
  *(_OWORD *)(v12 + 104) = xmmword_182068790;
  *(_BYTE *)(v12 + 120) = 8;
  swift_bridgeObjectRetain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3, &v23);
  if (v5)
    return swift_release();
  v14 = v25;
  if (v25 == 255)
  {
    v17 = type metadata accessor for EncodingError();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v19[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
    (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v23 = 0x6576656C2D706F54;
    v24 = 0xEA0000000000206CLL;
    v21._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x80000001823065E0;
    v22._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC4B0], v17);
    swift_willThrow();
    return swift_release();
  }
  v16 = v23;
  v15 = v24;
  result = swift_release();
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

uint64_t *PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v22;
  Swift::String v23;
  _QWORD v24[7];
  uint64_t v25;
  unint64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  v11 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  v12 = swift_allocObject();
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 16) = v13;
  *(_OWORD *)(v12 + 40) = xmmword_182068780;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v27);
  v14 = v27[1];
  *(_OWORD *)(v12 + 56) = v27[0];
  *(_OWORD *)(v12 + 72) = v14;
  *(_QWORD *)(v12 + 88) = v28;
  v24[2] = a3;
  v24[3] = a4;
  v24[4] = a1;
  v24[5] = a2;
  swift_bridgeObjectRetain();
  v15 = (uint64_t *)v12;
  v16 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:), (uint64_t)v24, 0x8000000000000000, 0, 0, 0, 255);
  if (!v5)
  {
    v15 = (uint64_t *)v16;
    if (!v16)
    {
      v18 = type metadata accessor for EncodingError();
      swift_allocError();
      v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
      v20[3] = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
      v25 = 0;
      v26 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      v25 = 0x6576656C2D706F54;
      v26 = 0xEA0000000000206CLL;
      v22._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._object = (void *)0x80000001823065E0;
      v15 = &v25;
      v23._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v23);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC4B0], v18);
      swift_willThrow();
    }
  }
  swift_release();
  return v15;
}

uint64_t PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;

  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  type metadata accessor for __PlistEncoderXML();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = 0x8000000000000000;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 72) = 8;
  *(_OWORD *)(v10 + 80) = xmmword_182068080;
  *(_BYTE *)(v10 + 96) = 8;
  *(_OWORD *)(v10 + 104) = xmmword_182068790;
  *(_BYTE *)(v10 + 120) = 8;
  swift_bridgeObjectRetain();
  specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:configuration:for:_:), 0x8000000000000000, 0, 0, 0, 255, (uint64_t)&v21);
  if (v4)
    return swift_release();
  v12 = v23;
  if (v23 == 255)
  {
    v15 = type metadata accessor for EncodingError();
    swift_allocError();
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v17[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v21 = 0x6576656C2D706F54;
    v22 = 0xEA0000000000206CLL;
    v19._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x80000001823065E0;
    v20._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v20);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC4B0], v15);
    swift_willThrow();
    return swift_release();
  }
  v14 = v21;
  v13 = v22;
  result = swift_release();
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

uint64_t PropertyListEncoder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  void (*v15)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD v17[5];

  v17[3] = a6(0);
  v17[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(a7, a6, a8);
  v17[0] = a1;
  v15 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  v15(v17, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_181A74960@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_181A74990(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t sub_181A749BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_181A749EC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 128);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for PropertyListEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PropertyListEncoder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A, B>(_:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

_QWORD *initializeBufferWithCopyOfBuffer for PropertyListEncoder._Options(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PropertyListEncoder._Options(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for PropertyListEncoder._Options(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PropertyListEncoder._Options()
{
  return &type metadata for PropertyListEncoder._Options;
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1)
{
  uint64_t *v1;

  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML, &lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1)
{
  uint64_t *v1;

  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:configuration:for:_:)(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist, &lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
}

uint64_t outlined copy of _BPlistEncodingFormat.Reference.Backing(uint64_t result, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 4)
  {
    case 0:
      result = swift_bridgeObjectRetain();
      break;
    case 5:
      goto LABEL_4;
    case 6:
      swift_retain();
      swift_retain();
LABEL_4:
      result = swift_retain();
      break;
    case 8:
      result = outlined copy of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t URL.ParseStrategy.requiredComponentsValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 104);
  v20 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 120);
  if (v2)
  {
    v10 = *(_QWORD *)v0;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
    v11 = 0;
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v11 = 1;
    if (v3)
    {
LABEL_3:
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v1, v3);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v1, v3);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
      v12 = 0;
      if (v6)
        goto LABEL_4;
LABEL_8:
      v13 = 4;
      if (v7)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  v12 = 2;
  if (!v6)
    goto LABEL_8;
LABEL_4:
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v6);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v6);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
  v13 = 0;
  if (v7)
  {
LABEL_5:
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v7);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v7);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
    v14 = 0;
    goto LABEL_10;
  }
LABEL_9:
  v14 = 8;
LABEL_10:
  if ((v24 & (v23 == 0)) != 0)
    v15 = 16;
  else
    v15 = 0;
  if (v8)
  {
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v8);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v8);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
    v16 = 0;
    if (v9)
    {
LABEL_15:
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v21, v9);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v21, v9);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
      v17 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v16 = 32;
    if (v9)
      goto LABEL_15;
  }
  v17 = 64;
LABEL_18:
  v18 = v11 | v15 | v12 | v13 | v14 | v16 | v17;
  if (!v25)
    return v18 | 0x80;
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v22, v25);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v22, v25);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0, 0);
  return v18;
}

uint64_t specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
  {
    if (!a4)
      return 1;
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    if (a4 == 1)
      return 1;
LABEL_8:
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(a1, a2);
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(a3, a4);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a1, a2);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a3, a4);
    return 0;
  }
  if (a4 < 2)
    goto LABEL_8;
  if (a1 == a3 && a2 == a4)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy();
}

uint64_t sub_181A74F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t (*v16)(_BYTE *, uint64_t, uint64_t);
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  _BYTE v23[96];

  v6 = a1;
  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v5 - 128) = &v23[-v8];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v5 - 136) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = &v23[-v11];
  v14 = &v23[*(int *)(v13 + 48) - v11];
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v7 + 16);
  v15(&v23[-v11], v2, v6, v10);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v15)(v14, *(_QWORD *)(v5 - 120), v6);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48);
  v17 = v16(v12, 2, v1);
  if (!v17)
  {
    ((void (*)(_QWORD, _BYTE *, uint64_t))v15)(*(_QWORD *)(v5 - 128), v12, v6);
    if (!v16(v14, 2, v1))
    {
      v19 = v4;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v4, v14, v1);
      v20 = *(_QWORD *)(v5 - 128);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v21 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v21(v19, v1);
      v21(v20, v1);
      goto LABEL_11;
    }
    (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v5 - 128), v1);
    goto LABEL_9;
  }
  if (v17 == 1)
  {
    if (v16(v14, 2, v1) == 1)
      goto LABEL_8;
LABEL_9:
    v18 = 0;
    v7 = *(_QWORD *)(v5 - 136);
    v6 = TupleTypeMetadata2;
    goto LABEL_11;
  }
  if (v16(v14, 2, v1) != 2)
    goto LABEL_9;
LABEL_8:
  v18 = 1;
LABEL_11:
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  return v18 & 1;
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t URL.ParseStrategy.defaultValues.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  int64_t *v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t *v63;
  char v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  int64_t v115;
  unint64_t v116;
  int64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  unint64_t v122;
  unint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  int64_t v138;
  unint64_t v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  unint64_t v145;
  unint64_t v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  int64_t v161;
  unint64_t v162;
  int64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  int64_t v180;
  unint64_t v181;
  int64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  void *v186;
  unint64_t v187;
  unint64_t v188;
  int64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  int64_t v203;
  unint64_t v204;
  int64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  void *v209;
  unint64_t v210;
  unint64_t v211;
  int64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  int64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  int64_t v226;
  unint64_t v227;
  int64_t v228;
  unint64_t v229;
  void *__src;
  char *__srca;
  unint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int64_t v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 40);
  v237 = *(_QWORD *)(v0 + 48);
  v238 = *(_QWORD *)(v0 + 32);
  v239 = *(_QWORD *)(v0 + 16);
  v240 = *(char **)(v0 + 56);
  v5 = *(unsigned __int8 *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 104);
  v234 = *(_QWORD *)(v0 + 96);
  v235 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 120);
  v236 = *(_QWORD *)(v0 + 112);
  v9 = MEMORY[0x1E0DEE9E0];
  v242 = MEMORY[0x1E0DEE9E0];
  v241 = v4;
  if (v1 < 2)
    goto LABEL_11;
  v233 = *(unsigned __int8 *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 88);
  v232 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_76;
  }
  LOBYTE(v4) = v11;
  if (*(_QWORD *)(v9 + 24) >= v14)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_82;
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(1);
    if ((v4 & 1) != (v16 & 1))
      goto LABEL_334;
    v7 = v15;
  }
  while (1)
  {
    v8 = v6;
    v6 = v5;
    if ((v4 & 1) != 0)
    {
      v17 = (unint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v7);
      swift_bridgeObjectRelease();
      *v17 = v2;
      v17[1] = v1;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v7, 1, v2, v1, (_QWORD *)v9);
    }
    v5 = v233;
    v4 = v241;
    v242 = v9;
    swift_bridgeObjectRelease();
    v7 = v232;
LABEL_11:
    if (v3 < 2)
    {
      v1 = v9;
      v18 = (unint64_t)v240;
      if (v4 >= 2)
        goto LABEL_29;
LABEL_13:
      v3 = v1;
      if (v18 >= 2)
        goto LABEL_38;
LABEL_14:
      v4 = v3;
      if ((v5 & 1) == 0)
        goto LABEL_47;
LABEL_15:
      v3 = v4;
      if (v6 >= 2)
        goto LABEL_56;
LABEL_16:
      v4 = v3;
      if (v7 >= 2)
        goto LABEL_65;
LABEL_17:
      v19 = v4;
      if (v8 < 2)
        return v19;
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    v1 = swift_isUniquelyReferenced_nonNull_native();
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(2);
    v23 = *(_QWORD *)(v9 + 16);
    v24 = (v22 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    v26 = v22;
    if (*(_QWORD *)(v9 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v1);
      v1 = v9;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(2);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_334;
      v2 = v27;
      v18 = (unint64_t)v240;
      if ((v26 & 1) == 0)
        goto LABEL_27;
      goto LABEL_24;
    }
    if ((v1 & 1) != 0)
    {
      v1 = v9;
      v18 = (unint64_t)v240;
      if ((v22 & 1) == 0)
        goto LABEL_27;
LABEL_24:
      v29 = (int64_t *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *v29 = v239;
      v29[1] = v3;
      goto LABEL_28;
    }
    v233 = v5;
    v96 = v6;
    v232 = v7;
    v97 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v98 = static _DictionaryStorage.copy(original:)();
    v1 = v98;
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_308;
    v99 = (char *)(v98 + 64);
    __srca = (char *)(v9 + 64);
    v100 = (unint64_t)((1 << *(_BYTE *)(v1 + 32)) + 63) >> 6;
    if (v1 != v9 || v99 >= &__srca[8 * v100])
      memmove(v99, __srca, 8 * v100);
    v101 = 0;
    *(_QWORD *)(v1 + 16) = *(_QWORD *)(v9 + 16);
    v102 = 1 << *(_BYTE *)(v9 + 32);
    v103 = -1;
    if (v102 < 64)
      v103 = ~(-1 << v102);
    v104 = v103 & *(_QWORD *)(v9 + 64);
    v105 = (unint64_t)(v102 + 63) >> 6;
    while (1)
    {
      if (v104)
      {
        v106 = __clz(__rbit64(v104));
        v104 &= v104 - 1;
        v107 = v106 | (v101 << 6);
        goto LABEL_123;
      }
      v115 = v101 + 1;
      if (__OFADD__(v101, 1))
        goto LABEL_321;
      if (v115 >= v105)
        goto LABEL_308;
      v116 = *(_QWORD *)&__srca[8 * v115];
      ++v101;
      if (!v116)
      {
        v101 = v115 + 1;
        if (v115 + 1 >= v105)
          goto LABEL_308;
        v116 = *(_QWORD *)&__srca[8 * v101];
        if (!v116)
        {
          v101 = v115 + 2;
          if (v115 + 2 >= v105)
            goto LABEL_308;
          v116 = *(_QWORD *)&__srca[8 * v101];
          if (!v116)
          {
            v101 = v115 + 3;
            if (v115 + 3 >= v105)
              goto LABEL_308;
            v116 = *(_QWORD *)&__srca[8 * v101];
            if (!v116)
            {
              v101 = v115 + 4;
              if (v115 + 4 >= v105)
                goto LABEL_308;
              v116 = *(_QWORD *)&__srca[8 * v101];
              if (!v116)
              {
                v101 = v115 + 5;
                if (v115 + 5 >= v105)
                  goto LABEL_308;
                v116 = *(_QWORD *)&__srca[8 * v101];
                if (!v116)
                {
                  v101 = v115 + 6;
                  if (v115 + 6 >= v105)
                    goto LABEL_308;
                  v116 = *(_QWORD *)&__srca[8 * v101];
                  if (!v116)
                    break;
                }
              }
            }
          }
        }
      }
LABEL_146:
      v104 = (v116 - 1) & v116;
      v107 = __clz(__rbit64(v116)) + (v101 << 6);
LABEL_123:
      v108 = 8 * v107;
      v109 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v107);
      v110 = 16 * v107;
      v111 = (uint64_t *)(*(_QWORD *)(v9 + 56) + v110);
      v113 = *v111;
      v112 = v111[1];
      *(_QWORD *)(*(_QWORD *)(v1 + 48) + v108) = v109;
      v114 = (_QWORD *)(*(_QWORD *)(v1 + 56) + v110);
      *v114 = v113;
      v114[1] = v112;
      swift_bridgeObjectRetain();
    }
    v117 = v115 + 7;
    if (v117 >= v105)
      goto LABEL_308;
    v116 = *(_QWORD *)&__srca[8 * v117];
    if (v116)
    {
      v101 = v117;
      goto LABEL_146;
    }
    while (1)
    {
      v101 = v117 + 1;
      if (__OFADD__(v117, 1))
        goto LABEL_328;
      if (v101 >= v105)
        break;
      v116 = *(_QWORD *)&__srca[8 * v101];
      ++v117;
      if (v116)
        goto LABEL_146;
    }
LABEL_308:
    swift_bridgeObjectRelease();
    v8 = v97;
    v7 = v232;
    v6 = v96;
    v5 = v233;
    v18 = (unint64_t)v240;
    if ((v26 & 1) != 0)
      goto LABEL_24;
LABEL_27:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 2, v239, v3, (_QWORD *)v1);
LABEL_28:
    LOBYTE(v4) = v241;
    v242 = v1;
    swift_bridgeObjectRelease();
    if (v241 < 2)
      goto LABEL_13;
LABEL_29:
    swift_bridgeObjectRetain();
    v3 = swift_isUniquelyReferenced_nonNull_native();
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(4);
    v31 = *(_QWORD *)(v1 + 16);
    v32 = (v30 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      goto LABEL_77;
    v34 = v30;
    if (*(_QWORD *)(v1 + 24) < v33)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, v3);
      v3 = v1;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(4);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_334;
      v2 = v35;
      if ((v34 & 1) == 0)
        goto LABEL_36;
      goto LABEL_33;
    }
    if ((v3 & 1) != 0)
    {
      v3 = v1;
      if ((v30 & 1) == 0)
        goto LABEL_36;
      goto LABEL_33;
    }
    v233 = v5;
    v118 = v6;
    v232 = v7;
    v119 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v120 = static _DictionaryStorage.copy(original:)();
    v3 = v120;
    if (!*(_QWORD *)(v1 + 16))
      goto LABEL_310;
    v121 = (void *)(v120 + 64);
    v122 = v1 + 64;
    v123 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
    if (v3 != v1 || (unint64_t)v121 >= v122 + 8 * v123)
      memmove(v121, (const void *)(v1 + 64), 8 * v123);
    v124 = 0;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
    v125 = 1 << *(_BYTE *)(v1 + 32);
    v126 = -1;
    if (v125 < 64)
      v126 = ~(-1 << v125);
    v127 = v126 & *(_QWORD *)(v1 + 64);
    v128 = (unint64_t)(v125 + 63) >> 6;
    while (2)
    {
      if (v127)
      {
        v129 = __clz(__rbit64(v127));
        v127 &= v127 - 1;
        v130 = v129 | (v124 << 6);
LABEL_155:
        v131 = 8 * v130;
        v132 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v130);
        v133 = 16 * v130;
        v134 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v133);
        v136 = *v134;
        v135 = v134[1];
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + v131) = v132;
        v137 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v133);
        *v137 = v136;
        v137[1] = v135;
        swift_bridgeObjectRetain();
        continue;
      }
      break;
    }
    v138 = v124 + 1;
    if (__OFADD__(v124, 1))
      goto LABEL_322;
    v18 = (unint64_t)v240;
    if (v138 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v138);
    ++v124;
    if (v139)
      goto LABEL_178;
    v124 = v138 + 1;
    if (v138 + 1 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v124);
    if (v139)
      goto LABEL_178;
    v124 = v138 + 2;
    if (v138 + 2 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v124);
    if (v139)
      goto LABEL_178;
    v124 = v138 + 3;
    if (v138 + 3 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v124);
    if (v139)
      goto LABEL_178;
    v124 = v138 + 4;
    if (v138 + 4 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v124);
    if (v139)
      goto LABEL_178;
    v124 = v138 + 5;
    if (v138 + 5 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v124);
    if (v139)
      goto LABEL_178;
    v124 = v138 + 6;
    if (v138 + 6 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v124);
    if (v139)
    {
LABEL_178:
      v127 = (v139 - 1) & v139;
      v130 = __clz(__rbit64(v139)) + (v124 << 6);
      goto LABEL_155;
    }
    v140 = v138 + 7;
    if (v140 >= v128)
      goto LABEL_310;
    v139 = *(_QWORD *)(v122 + 8 * v140);
    if (v139)
    {
      v124 = v140;
      goto LABEL_178;
    }
    while (1)
    {
      v124 = v140 + 1;
      if (__OFADD__(v140, 1))
        goto LABEL_329;
      v18 = (unint64_t)v240;
      if (v124 >= v128)
        break;
      v139 = *(_QWORD *)(v122 + 8 * v124);
      ++v140;
      if (v139)
        goto LABEL_178;
    }
LABEL_310:
    swift_bridgeObjectRelease();
    v8 = v119;
    v7 = v232;
    v6 = v118;
    v5 = v233;
    if ((v34 & 1) != 0)
    {
LABEL_33:
      v37 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *v37 = v238;
      v37[1] = v241;
      goto LABEL_37;
    }
LABEL_36:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 4, v238, v241, (_QWORD *)v3);
LABEL_37:
    v242 = v3;
    swift_bridgeObjectRelease();
    if (v18 < 2)
      goto LABEL_14;
LABEL_38:
    swift_bridgeObjectRetain();
    LOBYTE(v4) = swift_isUniquelyReferenced_nonNull_native();
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(8);
    v39 = *(_QWORD *)(v3 + 16);
    v40 = (v38 & 1) == 0;
    v41 = v39 + v40;
    if (__OFADD__(v39, v40))
      goto LABEL_78;
    v1 = v38;
    if (*(_QWORD *)(v3 + 24) < v41)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, v4);
      v4 = v3;
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(8);
      if ((v1 & 1) != (v43 & 1))
        goto LABEL_334;
      v2 = v42;
      v44 = v237;
      if ((v1 & 1) == 0)
        goto LABEL_45;
      goto LABEL_42;
    }
    if ((v4 & 1) != 0)
    {
      v4 = v3;
      v44 = v237;
      if ((v38 & 1) == 0)
        goto LABEL_45;
      goto LABEL_42;
    }
    v233 = v5;
    v241 = v6;
    v141 = v7;
    v142 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v143 = static _DictionaryStorage.copy(original:)();
    v4 = v143;
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_312;
    v144 = (void *)(v143 + 64);
    v145 = v3 + 64;
    v146 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
    if (v4 != v3 || (unint64_t)v144 >= v145 + 8 * v146)
      memmove(v144, (const void *)(v3 + 64), 8 * v146);
    v147 = 0;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    v148 = 1 << *(_BYTE *)(v3 + 32);
    v149 = -1;
    if (v148 < 64)
      v149 = ~(-1 << v148);
    v150 = v149 & *(_QWORD *)(v3 + 64);
    v151 = (unint64_t)(v148 + 63) >> 6;
    while (2)
    {
      if (v150)
      {
        v152 = __clz(__rbit64(v150));
        v150 &= v150 - 1;
        v153 = v152 | (v147 << 6);
LABEL_187:
        v154 = 8 * v153;
        v155 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v153);
        v156 = 16 * v153;
        v157 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v156);
        v159 = *v157;
        v158 = v157[1];
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v154) = v155;
        v160 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v156);
        *v160 = v159;
        v160[1] = v158;
        swift_bridgeObjectRetain();
        continue;
      }
      break;
    }
    v161 = v147 + 1;
    if (__OFADD__(v147, 1))
      goto LABEL_323;
    v18 = (unint64_t)v240;
    if (v161 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v161);
    ++v147;
    if (v162)
      goto LABEL_210;
    v147 = v161 + 1;
    if (v161 + 1 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v147);
    if (v162)
      goto LABEL_210;
    v147 = v161 + 2;
    if (v161 + 2 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v147);
    if (v162)
      goto LABEL_210;
    v147 = v161 + 3;
    if (v161 + 3 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v147);
    if (v162)
      goto LABEL_210;
    v147 = v161 + 4;
    if (v161 + 4 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v147);
    if (v162)
      goto LABEL_210;
    v147 = v161 + 5;
    if (v161 + 5 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v147);
    if (v162)
      goto LABEL_210;
    v147 = v161 + 6;
    if (v161 + 6 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v147);
    if (v162)
    {
LABEL_210:
      v150 = (v162 - 1) & v162;
      v153 = __clz(__rbit64(v162)) + (v147 << 6);
      goto LABEL_187;
    }
    v163 = v161 + 7;
    if (v163 >= v151)
      goto LABEL_312;
    v162 = *(_QWORD *)(v145 + 8 * v163);
    if (v162)
    {
      v147 = v163;
      goto LABEL_210;
    }
    while (1)
    {
      v147 = v163 + 1;
      if (__OFADD__(v163, 1))
        goto LABEL_330;
      v18 = (unint64_t)v240;
      if (v147 >= v151)
        break;
      v162 = *(_QWORD *)(v145 + 8 * v147);
      ++v163;
      if (v162)
        goto LABEL_210;
    }
LABEL_312:
    swift_bridgeObjectRelease();
    v8 = v142;
    v7 = v141;
    v6 = v241;
    v5 = v233;
    v44 = v237;
    if ((v1 & 1) != 0)
    {
LABEL_42:
      v45 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *v45 = v44;
      v45[1] = v18;
      goto LABEL_46;
    }
LABEL_45:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 8, v44, v18, (_QWORD *)v4);
LABEL_46:
    v242 = v4;
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_15;
LABEL_47:
    v5 = v6;
    v46 = v7;
    v6 = v8;
    v2 = dispatch thunk of CustomStringConvertible.description.getter();
    v1 = v47;
    v3 = swift_isUniquelyReferenced_nonNull_native();
    v49 = specialized __RawDictionaryStorage.find<A>(_:)(16);
    v50 = *(_QWORD *)(v4 + 16);
    v51 = (v48 & 1) == 0;
    v52 = v50 + v51;
    if (__OFADD__(v50, v51))
      goto LABEL_79;
    v53 = v48;
    if (*(_QWORD *)(v4 + 24) < v52)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v3);
      v3 = v4;
      v54 = specialized __RawDictionaryStorage.find<A>(_:)(16);
      if ((v53 & 1) != (v55 & 1))
        goto LABEL_334;
      v49 = v54;
      if ((v53 & 1) == 0)
        goto LABEL_54;
      goto LABEL_51;
    }
    if ((v3 & 1) != 0)
    {
      v3 = v4;
      if ((v48 & 1) == 0)
        goto LABEL_54;
      goto LABEL_51;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v164 = static _DictionaryStorage.copy(original:)();
    v3 = v164;
    if (!*(_QWORD *)(v4 + 16))
      goto LABEL_314;
    v165 = (char *)(v164 + 64);
    v240 = (char *)(v4 + 64);
    v166 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
    if (v3 != v4 || v165 >= &v240[8 * v166])
      memmove(v165, v240, 8 * v166);
    v167 = 0;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v4 + 16);
    v168 = 1 << *(_BYTE *)(v4 + 32);
    v169 = -1;
    if (v168 < 64)
      v169 = ~(-1 << v168);
    v170 = v169 & *(_QWORD *)(v4 + 64);
    v239 = (unint64_t)(v168 + 63) >> 6;
    while (2)
    {
      if (v170)
      {
        v171 = __clz(__rbit64(v170));
        v170 &= v170 - 1;
        v241 = v167;
        v172 = v171 | (v167 << 6);
LABEL_219:
        v173 = 8 * v172;
        v174 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v172);
        v175 = 16 * v172;
        v176 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v175);
        v178 = *v176;
        v177 = v176[1];
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + v173) = v174;
        v179 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v175);
        *v179 = v178;
        v179[1] = v177;
        swift_bridgeObjectRetain();
        v167 = v241;
        continue;
      }
      break;
    }
    v180 = v167 + 1;
    if (__OFADD__(v167, 1))
      goto LABEL_324;
    if (v180 >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v180];
    v182 = v167 + 1;
    if (v181)
      goto LABEL_242;
    v182 = v167 + 2;
    if ((uint64_t)(v167 + 2) >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v182];
    if (v181)
      goto LABEL_242;
    v182 = v167 + 3;
    if ((uint64_t)(v167 + 3) >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v182];
    if (v181)
      goto LABEL_242;
    v182 = v167 + 4;
    if ((uint64_t)(v167 + 4) >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v182];
    if (v181)
      goto LABEL_242;
    v182 = v167 + 5;
    if ((uint64_t)(v167 + 5) >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v182];
    if (v181)
      goto LABEL_242;
    v182 = v167 + 6;
    if ((uint64_t)(v167 + 6) >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v182];
    if (v181)
      goto LABEL_242;
    v182 = v167 + 7;
    if ((uint64_t)(v167 + 7) >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v182];
    if (v181)
    {
LABEL_242:
      v170 = (v181 - 1) & v181;
      v241 = v182;
      v172 = __clz(__rbit64(v181)) + (v182 << 6);
      goto LABEL_219;
    }
    v183 = v167 + 8;
    if ((uint64_t)(v167 + 8) >= v239)
      goto LABEL_314;
    v181 = *(_QWORD *)&v240[8 * v183];
    if (v181)
    {
      v182 = v167 + 8;
      goto LABEL_242;
    }
    while (1)
    {
      v182 = v183 + 1;
      if (__OFADD__(v183, 1))
        goto LABEL_331;
      if (v182 >= v239)
        break;
      v181 = *(_QWORD *)&v240[8 * v182];
      ++v183;
      if (v181)
        goto LABEL_242;
    }
LABEL_314:
    swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
    {
LABEL_51:
      v56 = (unint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v49);
      swift_bridgeObjectRelease();
      *v56 = v2;
      v56[1] = v1;
      goto LABEL_55;
    }
LABEL_54:
    specialized _NativeDictionary._insert(at:key:value:)(v49, 16, v2, v1, (_QWORD *)v3);
LABEL_55:
    v242 = v3;
    swift_bridgeObjectRelease();
    v8 = v6;
    v7 = v46;
    v6 = v5;
    if (v5 < 2)
      goto LABEL_16;
LABEL_56:
    swift_bridgeObjectRetain();
    LOBYTE(v4) = swift_isUniquelyReferenced_nonNull_native();
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(32);
    v58 = *(_QWORD *)(v3 + 16);
    v59 = (v57 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59))
      goto LABEL_80;
    v1 = v57;
    if (*(_QWORD *)(v3 + 24) < v60)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, v4);
      v4 = v3;
      v61 = specialized __RawDictionaryStorage.find<A>(_:)(32);
      if ((v1 & 1) != (v62 & 1))
        goto LABEL_334;
      v2 = v61;
      if ((v1 & 1) == 0)
        goto LABEL_63;
      goto LABEL_60;
    }
    if ((v4 & 1) != 0)
    {
      v4 = v3;
      if ((v57 & 1) == 0)
        goto LABEL_63;
      goto LABEL_60;
    }
    v232 = v7;
    v184 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v185 = static _DictionaryStorage.copy(original:)();
    v4 = v185;
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_316;
    v5 = v6;
    v186 = (void *)(v185 + 64);
    v187 = v3 + 64;
    v188 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
    if (v4 != v3 || (unint64_t)v186 >= v187 + 8 * v188)
      memmove(v186, (const void *)(v3 + 64), 8 * v188);
    v189 = 0;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    v190 = 1 << *(_BYTE *)(v3 + 32);
    v191 = -1;
    if (v190 < 64)
      v191 = ~(-1 << v190);
    v192 = v191 & *(_QWORD *)(v3 + 64);
    v193 = (unint64_t)(v190 + 63) >> 6;
    while (2)
    {
      if (v192)
      {
        v194 = __clz(__rbit64(v192));
        v192 &= v192 - 1;
        v195 = v194 | (v189 << 6);
LABEL_251:
        v196 = 8 * v195;
        v197 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v195);
        v198 = 16 * v195;
        v199 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v198);
        v201 = *v199;
        v200 = v199[1];
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v196) = v197;
        v202 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v198);
        *v202 = v201;
        v202[1] = v200;
        swift_bridgeObjectRetain();
        continue;
      }
      break;
    }
    v203 = v189 + 1;
    if (__OFADD__(v189, 1))
      goto LABEL_325;
    v6 = v5;
    if (v203 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v203);
    ++v189;
    if (v204)
      goto LABEL_274;
    v189 = v203 + 1;
    if (v203 + 1 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v189);
    if (v204)
      goto LABEL_274;
    v189 = v203 + 2;
    if (v203 + 2 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v189);
    if (v204)
      goto LABEL_274;
    v189 = v203 + 3;
    if (v203 + 3 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v189);
    if (v204)
      goto LABEL_274;
    v189 = v203 + 4;
    if (v203 + 4 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v189);
    if (v204)
      goto LABEL_274;
    v189 = v203 + 5;
    if (v203 + 5 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v189);
    if (v204)
      goto LABEL_274;
    v189 = v203 + 6;
    if (v203 + 6 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v189);
    if (v204)
    {
LABEL_274:
      v192 = (v204 - 1) & v204;
      v195 = __clz(__rbit64(v204)) + (v189 << 6);
      goto LABEL_251;
    }
    v205 = v203 + 7;
    if (v205 >= v193)
      goto LABEL_316;
    v204 = *(_QWORD *)(v187 + 8 * v205);
    if (v204)
    {
      v189 = v205;
      goto LABEL_274;
    }
    while (1)
    {
      v189 = v205 + 1;
      if (__OFADD__(v205, 1))
        goto LABEL_332;
      v6 = v5;
      if (v189 >= v193)
        break;
      v204 = *(_QWORD *)(v187 + 8 * v189);
      ++v205;
      if (v204)
        goto LABEL_274;
    }
LABEL_316:
    swift_bridgeObjectRelease();
    v8 = v184;
    v7 = v232;
    if ((v1 & 1) != 0)
    {
LABEL_60:
      v63 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *v63 = v235;
      v63[1] = v6;
      goto LABEL_64;
    }
LABEL_63:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 32, v235, v6, (_QWORD *)v4);
LABEL_64:
    v242 = v4;
    swift_bridgeObjectRelease();
    if (v7 < 2)
      goto LABEL_17;
LABEL_65:
    swift_bridgeObjectRetain();
    v3 = swift_isUniquelyReferenced_nonNull_native();
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(64);
    v65 = *(_QWORD *)(v4 + 16);
    v66 = (v64 & 1) == 0;
    v67 = v65 + v66;
    if (!__OFADD__(v65, v66))
      break;
LABEL_81:
    __break(1u);
LABEL_82:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v73 = static _DictionaryStorage.copy(original:)();
    v74 = MEMORY[0x1E0DEE9E0];
    v9 = v73;
    v75 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16);
    if (v75)
    {
      v76 = (void *)(v73 + 64);
      v77 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
      if (v9 != MEMORY[0x1E0DEE9E0] || (unint64_t)v76 >= MEMORY[0x1E0DEE9E0] + 8 * v77 + 64)
      {
        memmove(v76, (const void *)(MEMORY[0x1E0DEE9E0] + 64), 8 * v77);
        v74 = MEMORY[0x1E0DEE9E0];
      }
      v78 = 0;
      *(_QWORD *)(v9 + 16) = v75;
      v79 = 1 << *(_BYTE *)(v74 + 32);
      v80 = *(_QWORD *)(v74 + 64);
      v81 = -1;
      if (v79 < 64)
        v81 = ~(-1 << v79);
      v82 = v81 & v80;
      __src = (void *)((unint64_t)(v79 + 63) >> 6);
      while (1)
      {
        if (v82)
        {
          v83 = __clz(__rbit64(v82));
          v82 &= v82 - 1;
          v84 = v83 | (v78 << 6);
          v85 = MEMORY[0x1E0DEE9E0];
        }
        else
        {
          v93 = __OFADD__(v78++, 1);
          v85 = MEMORY[0x1E0DEE9E0];
          if (v93)
          {
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
LABEL_323:
            __break(1u);
LABEL_324:
            __break(1u);
LABEL_325:
            __break(1u);
LABEL_326:
            __break(1u);
            goto LABEL_327;
          }
          if (v78 >= (uint64_t)__src)
            break;
          v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v78 + 64);
          if (!v94)
          {
            v95 = v78 + 1;
            if (v78 + 1 >= (uint64_t)__src)
              break;
            v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v95 + 64);
            if (!v94)
            {
              v95 = v78 + 2;
              if (v78 + 2 >= (uint64_t)__src)
                break;
              v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v95 + 64);
              if (!v94)
              {
                v95 = v78 + 3;
                if (v78 + 3 >= (uint64_t)__src)
                  break;
                v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v95 + 64);
                if (!v94)
                {
                  v95 = v78 + 4;
                  if (v78 + 4 >= (uint64_t)__src)
                    break;
                  v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v95 + 64);
                  if (!v94)
                  {
                    v95 = v78 + 5;
                    if (v78 + 5 >= (uint64_t)__src)
                      break;
                    v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v95 + 64);
                    if (!v94)
                    {
                      v95 = v78 + 6;
                      if (v78 + 6 >= (uint64_t)__src)
                        break;
                      v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v95 + 64);
                      if (!v94)
                      {
                        v95 = v78 + 7;
                        if (v78 + 7 >= (uint64_t)__src)
                          break;
                        v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v95 + 64);
                        if (!v94)
                        {
                          while (1)
                          {
                            v78 = v95 + 1;
                            if (__OFADD__(v95, 1))
                              break;
                            v85 = MEMORY[0x1E0DEE9E0];
                            if (v78 >= (uint64_t)__src)
                              goto LABEL_307;
                            v94 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v78 + 64);
                            ++v95;
                            if (v94)
                              goto LABEL_110;
                          }
LABEL_327:
                          __break(1u);
LABEL_328:
                          __break(1u);
LABEL_329:
                          __break(1u);
LABEL_330:
                          __break(1u);
LABEL_331:
                          __break(1u);
LABEL_332:
                          __break(1u);
                          goto LABEL_333;
                        }
                      }
                    }
                  }
                }
              }
            }
            v78 = v95;
          }
LABEL_110:
          v82 = (v94 - 1) & v94;
          v84 = __clz(__rbit64(v94)) + (v78 << 6);
        }
        v86 = 8 * v84;
        v87 = *(_QWORD *)(*(_QWORD *)(v85 + 48) + 8 * v84);
        v88 = 16 * v84;
        v89 = (uint64_t *)(*(_QWORD *)(v85 + 56) + v88);
        v91 = *v89;
        v90 = v89[1];
        *(_QWORD *)(*(_QWORD *)(v9 + 48) + v86) = v87;
        v92 = (_QWORD *)(*(_QWORD *)(v9 + 56) + v88);
        *v92 = v91;
        v92[1] = v90;
        swift_bridgeObjectRetain();
      }
    }
LABEL_307:
    swift_bridgeObjectRelease();
  }
  v68 = v64;
  if (*(_QWORD *)(v4 + 24) < v67)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, v3);
    v19 = v4;
    v69 = specialized __RawDictionaryStorage.find<A>(_:)(64);
    if ((v68 & 1) != (v70 & 1))
      goto LABEL_334;
    v2 = v69;
    v71 = v234;
    if ((v68 & 1) != 0)
    {
LABEL_69:
      v72 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v2);
      swift_bridgeObjectRelease();
      *v72 = v71;
      v72[1] = v7;
      goto LABEL_73;
    }
LABEL_72:
    specialized _NativeDictionary._insert(at:key:value:)(v2, 64, v71, v7, (_QWORD *)v19);
LABEL_73:
    v242 = v19;
    swift_bridgeObjectRelease();
    if (v8 < 2)
      return v19;
LABEL_18:
    v20 = URL.FormatStyle.Component.rawValue.getter();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v236, v8, v20);
    return v242;
  }
  if ((v3 & 1) != 0)
  {
    v19 = v4;
    v71 = v234;
    if ((v64 & 1) != 0)
      goto LABEL_69;
    goto LABEL_72;
  }
  v206 = v7;
  v207 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  v208 = static _DictionaryStorage.copy(original:)();
  v19 = v208;
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_318:
    swift_bridgeObjectRelease();
    v8 = v207;
    v7 = v206;
    v71 = v234;
    if ((v68 & 1) != 0)
      goto LABEL_69;
    goto LABEL_72;
  }
  v209 = (void *)(v208 + 64);
  v210 = v4 + 64;
  v211 = (unint64_t)((1 << *(_BYTE *)(v19 + 32)) + 63) >> 6;
  if (v19 != v4 || (unint64_t)v209 >= v210 + 8 * v211)
    memmove(v209, (const void *)(v4 + 64), 8 * v211);
  v212 = 0;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v4 + 16);
  v213 = 1 << *(_BYTE *)(v4 + 32);
  v214 = -1;
  if (v213 < 64)
    v214 = ~(-1 << v213);
  v215 = v214 & *(_QWORD *)(v4 + 64);
  v216 = (unint64_t)(v213 + 63) >> 6;
  while (2)
  {
    if (v215)
    {
      v217 = __clz(__rbit64(v215));
      v215 &= v215 - 1;
      v218 = v217 | (v212 << 6);
LABEL_283:
      v219 = 8 * v218;
      v220 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v218);
      v221 = 16 * v218;
      v222 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v221);
      v224 = *v222;
      v223 = v222[1];
      *(_QWORD *)(*(_QWORD *)(v19 + 48) + v219) = v220;
      v225 = (_QWORD *)(*(_QWORD *)(v19 + 56) + v221);
      *v225 = v224;
      v225[1] = v223;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v226 = v212 + 1;
  if (__OFADD__(v212, 1))
    goto LABEL_326;
  if (v226 >= v216)
    goto LABEL_318;
  v227 = *(_QWORD *)(v210 + 8 * v226);
  ++v212;
  if (v227)
    goto LABEL_306;
  v212 = v226 + 1;
  if (v226 + 1 >= v216)
    goto LABEL_318;
  v227 = *(_QWORD *)(v210 + 8 * v212);
  if (v227)
    goto LABEL_306;
  v212 = v226 + 2;
  if (v226 + 2 >= v216)
    goto LABEL_318;
  v227 = *(_QWORD *)(v210 + 8 * v212);
  if (v227)
    goto LABEL_306;
  v212 = v226 + 3;
  if (v226 + 3 >= v216)
    goto LABEL_318;
  v227 = *(_QWORD *)(v210 + 8 * v212);
  if (v227)
    goto LABEL_306;
  v212 = v226 + 4;
  if (v226 + 4 >= v216)
    goto LABEL_318;
  v227 = *(_QWORD *)(v210 + 8 * v212);
  if (v227)
    goto LABEL_306;
  v212 = v226 + 5;
  if (v226 + 5 >= v216)
    goto LABEL_318;
  v227 = *(_QWORD *)(v210 + 8 * v212);
  if (v227)
    goto LABEL_306;
  v212 = v226 + 6;
  if (v226 + 6 >= v216)
    goto LABEL_318;
  v227 = *(_QWORD *)(v210 + 8 * v212);
  if (v227)
  {
LABEL_306:
    v215 = (v227 - 1) & v227;
    v218 = __clz(__rbit64(v227)) + (v212 << 6);
    goto LABEL_283;
  }
  v228 = v226 + 7;
  if (v228 >= v216)
    goto LABEL_318;
  v229 = v19;
  v227 = *(_QWORD *)(v210 + 8 * v228);
  if (v227)
  {
    v212 = v228;
    goto LABEL_306;
  }
  while (1)
  {
    v212 = v228 + 1;
    if (__OFADD__(v228, 1))
      break;
    v19 = v229;
    if (v212 >= v216)
      goto LABEL_318;
    v227 = *(_QWORD *)(v210 + 8 * v212);
    ++v228;
    if (v227)
      goto LABEL_306;
  }
LABEL_333:
  __break(1u);
LABEL_334:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

__n128 URL.ParseStrategy.init(scheme:user:password:host:port:path:query:fragment:)@<Q0>(_OWORD *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X5>, __int128 *a7@<X6>, __n128 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;

  v9 = *a5;
  v10 = *((_BYTE *)a5 + 8);
  v11 = *a2;
  *(_OWORD *)a9 = *a1;
  *(_OWORD *)(a9 + 16) = v11;
  v12 = *a4;
  *(_OWORD *)(a9 + 32) = *a3;
  *(_OWORD *)(a9 + 48) = v12;
  *(_QWORD *)(a9 + 64) = v9;
  *(_BYTE *)(a9 + 72) = v10;
  v13 = *a7;
  *(_OWORD *)(a9 + 80) = *a6;
  *(_OWORD *)(a9 + 96) = v13;
  result = *a8;
  *(__n128 *)(a9 + 112) = *a8;
  return result;
}

uint64_t URL.ParseStrategy.init(format:lenient:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = a1[11];
  v28 = a1[10];
  v29 = v3;
  v30 = a1[12];
  v4 = a1[7];
  v24 = a1[6];
  v25 = v4;
  v5 = a1[9];
  v26 = a1[8];
  v27 = v5;
  v6 = a1[3];
  v20 = a1[2];
  v21 = v6;
  v7 = a1[5];
  v22 = a1[4];
  v23 = v7;
  v8 = a1[1];
  v18 = *a1;
  v19 = v8;
  if (v18 != 1)
    goto LABEL_4;
  if ((_QWORD)v19)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    v9 = 1;
    goto LABEL_6;
  }
  v9 = 0;
LABEL_6:
  if (BYTE8(v19) != 1)
  {
LABEL_9:
    v10 = 1;
    goto LABEL_11;
  }
  if (*((_QWORD *)&v20 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v10 = 0;
LABEL_11:
  if (v21 != 1)
  {
LABEL_14:
    v11 = 1;
    goto LABEL_16;
  }
  if ((_QWORD)v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v11 = 0;
LABEL_16:
  if (BYTE8(v22) != 1)
  {
LABEL_19:
    v12 = 1;
    goto LABEL_21;
  }
  if (*((_QWORD *)&v23 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v12 = 0;
LABEL_21:
  if (v25 != 1)
  {
LABEL_24:
    v13 = 1;
    goto LABEL_26;
  }
  if ((_QWORD)v26)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  v13 = 0;
LABEL_26:
  if (BYTE8(v26) != 1)
  {
LABEL_29:
    v14 = 1;
    goto LABEL_31;
  }
  if (*((_QWORD *)&v27 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v14 = 0;
LABEL_31:
  if (v28 != 1)
  {
LABEL_34:
    v15 = 1;
    goto LABEL_36;
  }
  if ((_QWORD)v29)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v15 = 0;
LABEL_36:
  if (BYTE8(v29) == 1)
  {
    if (!*((_QWORD *)&v30 + 1))
    {
      result = outlined release of URL.FormatStyle((uint64_t)&v18);
      v17 = 0;
      goto LABEL_42;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URL.FormatStyle((uint64_t)&v18);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = outlined release of URL.FormatStyle((uint64_t)&v18);
  }
  v17 = 1;
LABEL_42:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 64) = v13;
  *(_BYTE *)(a2 + 72) = 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v15;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = v17;
  return result;
}

void URL.ParseStrategy.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  Swift::UInt v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  unint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  Swift::UInt v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  Swift::UInt v28;
  unint64_t v29;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 40);
  v24 = *(_QWORD *)(v0 + 32);
  v25 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v27 = *(unsigned __int8 *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 64);
  v29 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 120);
  if (!v1)
  {
    v10 = 0;
LABEL_5:
    Hasher._combine(_:)(v10);
    if (v3)
      goto LABEL_6;
LABEL_9:
    v11 = 0;
LABEL_10:
    Hasher._combine(_:)(v11);
    if (v4)
      goto LABEL_11;
LABEL_14:
    v17 = 0;
LABEL_15:
    Hasher._combine(_:)(v17);
    v18 = v29;
    if (v5)
      goto LABEL_16;
LABEL_19:
    v19 = 0;
LABEL_20:
    Hasher._combine(_:)(v19);
    if (v27)
      goto LABEL_21;
    goto LABEL_25;
  }
  if (v1 == 1)
  {
    v10 = 1;
    goto LABEL_5;
  }
  v23 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)v0;
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v16 = v15;
  v7 = v14;
  v9 = v13;
  v6 = v12;
  v8 = v23;
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, v1);
  if (!v3)
    goto LABEL_9;
LABEL_6:
  if (v3 == 1)
  {
    v11 = 1;
    goto LABEL_10;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  if (!v4)
    goto LABEL_14;
LABEL_11:
  if (v4 == 1)
  {
    v17 = 1;
    goto LABEL_15;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v24, v4);
  v18 = v29;
  if (!v5)
    goto LABEL_19;
LABEL_16:
  if (v5 == 1)
  {
    v19 = 1;
    goto LABEL_20;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v5);
  if (v27)
  {
LABEL_21:
    Hasher._combine(_:)(v28 != 0);
    if (v18)
      goto LABEL_22;
LABEL_26:
    v20 = 0;
LABEL_27:
    Hasher._combine(_:)(v20);
    if (v8)
      goto LABEL_28;
LABEL_31:
    v21 = 0;
LABEL_32:
    Hasher._combine(_:)(v21);
    if (v9)
      goto LABEL_33;
LABEL_36:
    v22 = 0;
    goto LABEL_37;
  }
LABEL_25:
  Hasher._combine(_:)(2uLL);
  Hasher._combine(_:)(v28);
  if (!v18)
    goto LABEL_26;
LABEL_22:
  if (v18 == 1)
  {
    v20 = 1;
    goto LABEL_27;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v26, v18);
  if (!v8)
    goto LABEL_31;
LABEL_28:
  if (v8 == 1)
  {
    v21 = 1;
    goto LABEL_32;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v8);
  if (!v9)
    goto LABEL_36;
LABEL_33:
  if (v9 == 1)
  {
    v22 = 1;
LABEL_37:
    Hasher._combine(_:)(v22);
    return;
  }
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v7, v9);
}

uint64_t outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181A76DAC
                                                            + 4 * asc_182068820[*v0]))(0x656D65686373, 0xE600000000000000);
}

uint64_t sub_181A76DAC()
{
  return 1919251317;
}

uint64_t sub_181A76DBC()
{
  return 0x64726F7773736170;
}

uint64_t sub_181A76DD4()
{
  return 1953722216;
}

uint64_t sub_181A76DE4()
{
  return 1953656688;
}

uint64_t sub_181A76DF4()
{
  return 1752457584;
}

uint64_t sub_181A76E04()
{
  return 0x7972657571;
}

uint64_t sub_181A76E18()
{
  return 0x746E656D67617266;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t URL.ParseStrategy.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.ParseStrategy.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v30 = v1[3];
  v31 = v9;
  v10 = v1[4];
  v28 = v1[5];
  v29 = v10;
  v11 = v1[7];
  v26 = v1[6];
  v27 = v11;
  v12 = v1[8];
  v35 = *((unsigned __int8 *)v1 + 72);
  v13 = v1[10];
  v24 = v1[11];
  v25 = v12;
  v14 = v1[12];
  v22 = v1[13];
  v23 = v13;
  v19 = v1[14];
  v20 = v1[15];
  v21 = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v33 = v8;
  v34 = v7;
  v36 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<String> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>, (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
  v15 = v32;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v15)
  {
    v17 = v28;
    v16 = v29;
    v33 = v31;
    v34 = v30;
    v36 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v16;
    v34 = v17;
    v36 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v26;
    v34 = v27;
    v36 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v25;
    LOBYTE(v34) = v35;
    v36 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<Int> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>, (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v23;
    v34 = v24;
    v36 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v21;
    v34 = v22;
    v36 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v19;
    v34 = v20;
    v36 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int URL.ParseStrategy.hashValue.getter()
{
  Hasher.init(_seed:)();
  URL.ParseStrategy.hash(into:)();
  return Hasher._finalize()();
}

uint64_t *URL.ParseStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  char v88;
  char v89;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.ParseStrategy.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v62 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v13 = 0;
  }
  else
  {
    v60 = (_OWORD *)a2;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>);
    LOBYTE(v63) = 0;
    v12 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<String> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<String>, (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = v12;
    v16 = v71;
    v17 = v72;
    LOBYTE(v63) = 1;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
    v58 = v15;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v59 = 0;
    *(_QWORD *)&v57 = v16;
    *((_QWORD *)&v57 + 1) = v17;
    a2 = v71;
    v18 = v72;
    LOBYTE(v63) = 2;
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
    v19 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v61 = v18;
    if (!v19)
    {
      v56 = a2;
      v20 = v11;
      v21 = v71;
      v22 = v72;
      LOBYTE(v63) = 3;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v59 = v20;
      *(_QWORD *)&v54 = v21;
      *((_QWORD *)&v54 + 1) = v22;
      v23 = v71;
      v24 = v72;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>);
      LOBYTE(v63) = 4;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v24);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type URL.ParseStrategy.ComponentParseStrategy<Int> and conformance URL.ParseStrategy.ComponentParseStrategy<A>, &demangling cache variable for type metadata for URL.ParseStrategy.ComponentParseStrategy<Int>, (uint64_t)&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v55 = v23;
      v52 = v24;
      v49 = v71;
      LODWORD(v24) = v72;
      v88 = v72;
      LOBYTE(v63) = 5;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v48 = v24;
      v26 = v71;
      v25 = v72;
      LOBYTE(v63) = 6;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v51 = v26;
      v47 = v25;
      v28 = v71;
      v27 = v72;
      v89 = 7;
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v71, v72);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v59 = 0;
      v50 = v27;
      v53 = v28;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v46 = *((_QWORD *)&v87 + 1);
      v58 = v87;
      v29 = v57;
      v63 = v57;
      v30 = v55;
      *(_QWORD *)&v64 = v56;
      *((_QWORD *)&v64 + 1) = v61;
      v31 = v54;
      v65 = v54;
      v32 = v28;
      v33 = v51;
      v34 = v52;
      *(_QWORD *)&v66 = v55;
      *((_QWORD *)&v66 + 1) = v52;
      *(_QWORD *)&v67 = v49;
      BYTE8(v67) = v48;
      v35 = v47;
      *(_QWORD *)&v68 = v51;
      *((_QWORD *)&v68 + 1) = v47;
      *(_QWORD *)&v69 = v32;
      *((_QWORD *)&v69 + 1) = v27;
      v70 = v87;
      outlined retain of URL.ParseStrategy((uint64_t *)&v63, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v32, v27);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v35);
      v36 = v34;
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v30, v34);
      v37 = *((_QWORD *)&v54 + 1);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v31, *((unint64_t *)&v54 + 1));
      v38 = v56;
      v39 = v61;
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v56, v61);
      v40 = *((_QWORD *)&v57 + 1);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v29, *((unint64_t *)&v57 + 1));
      v41 = v68;
      v42 = v60;
      v60[4] = v67;
      v42[5] = v41;
      v43 = v70;
      v42[6] = v69;
      v42[7] = v43;
      v44 = v64;
      *v42 = v63;
      v42[1] = v44;
      v45 = v66;
      v42[2] = v65;
      v42[3] = v45;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      v71 = v29;
      v72 = v40;
      v73 = v38;
      v74 = v39;
      v75 = v31;
      v76 = v37;
      v77 = v55;
      v78 = v36;
      v79 = v49;
      v80 = v88;
      v81 = v51;
      v82 = v47;
      v83 = v53;
      v84 = v50;
      v85 = v58;
      v86 = v46;
      return outlined retain of URL.ParseStrategy(&v71, (void (*)(uint64_t, uint64_t))outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>);
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a2, v18);
    v10 = *((_QWORD *)&v57 + 1);
    v5 = v57;
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v57, *((unint64_t *)&v57 + 1));
    v13 = 3;
  }
  result = (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  if ((v13 & 1) != 0)
    result = (uint64_t *)outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v5, v10);
  if ((v13 & 2) != 0)
    return (uint64_t *)outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(a2, v61);
  return result;
}

uint64_t *protocol witness for Decodable.init(from:) in conformance URL.ParseStrategy@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return URL.ParseStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URL.ParseStrategy(_QWORD *a1)
{
  return URL.ParseStrategy.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.ParseStrategy()
{
  Hasher.init(_seed:)();
  URL.ParseStrategy.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy()
{
  Hasher.init(_seed:)();
  URL.ParseStrategy.hash(into:)();
  return Hasher._finalize()();
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  Swift::String v15;
  unint64_t v17;
  unint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v17 - v6;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v12 + 16))(v11, v9);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 2, v1);
  if (v13)
  {
    if (v13 == 1)
      return 0x6465726975716572;
    else
      return 0x6C616E6F6974706FLL;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v11, v1);
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v17 = 0xD000000000000015;
    v18 = 0x8000000182306770;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    v15._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v14 = v17;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  return v14;
}

void URL.ParseStrategy.ComponentParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v10, v12, a2, v8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 2, v3);
  if (v13)
  {
    Hasher._combine(_:)(v13 != 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    Hasher._combine(_:)(2uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6465726975716572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616E6F6974706FLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x56746C7561666564 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6465726975716572;
  if (a1 == 1)
    return 0x6C616E6F6974706FLL;
  return 0x56746C7561666564;
}

uint64_t URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  unsigned __int8 *v0;

  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  FloatingPointParseStrategy.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  char *v0;

  return URL.ParseStrategy.ComponentParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))default argument 1 of _typeName(_:qualified:), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys@<X0>(_QWORD *a1@<X2>, _BYTE *a2@<X8>)
{
  return protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))default argument 1 of _typeName(_:qualified:), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = a2(a1[2], a1[3], a1[4], a1[5]);
  result = swift_bridgeObjectRelease();
  *a3 = v4 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void URL.ParseStrategy.ComponentParseStrategy.encode(to:)()
{
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys();
}

void sub_181A7836C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v13 - 216) = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys, a1);
  *(_QWORD *)(v13 - 208) = a1;
  v15 = type metadata accessor for KeyedEncodingContainer();
  *(_QWORD *)(v13 - 184) = v15;
  *(_QWORD *)(v13 - 224) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v13 - 200) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 160) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v13 - 192) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v13 - 120) = v10;
  *(_QWORD *)(v13 - 112) = v9;
  *(_QWORD *)(v13 - 104) = v12;
  *(_QWORD *)(v13 - 96) = v11;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys();
}

void sub_181A78410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 240) = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys, a1);
  *(_QWORD *)(v13 - 232) = a1;
  v15 = type metadata accessor for KeyedEncodingContainer();
  *(_QWORD *)(v13 - 256) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v13 - 248) = v15;
  MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v13 - 264) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 120) = v10;
  *(_QWORD *)(v13 - 112) = v9;
  *(_QWORD *)(v13 - 104) = v12;
  *(_QWORD *)(v13 - 96) = v11;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys();
}

void sub_181A78480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys, a1);
  *(_QWORD *)(v13 - 272) = a1;
  *(_QWORD *)(v13 - 280) = v15;
  v16 = type metadata accessor for KeyedEncodingContainer();
  *(_QWORD *)(v13 - 288) = v16;
  *(_QWORD *)(v13 - 296) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v13 - 304) = (char *)&a9 - v17;
  MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v13 - 120) = v10;
  *(_QWORD *)(v13 - 112) = v9;
  *(_QWORD *)(v13 - 176) = v12;
  *(_QWORD *)(v13 - 104) = v12;
  *(_QWORD *)(v13 - 96) = v11;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys();
}

uint64_t sub_181A78538(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys, a1);
  v6 = type metadata accessor for KeyedEncodingContainer();
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 136) = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - v7;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v5 - 152) = v8;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 16);
  v10 = v3;
  v11 = *(_QWORD *)(v5 - 160);
  v9(v4, *(_QWORD *)(v5 - 128), *(_QWORD *)(v5 - 168));
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v4, 2, v10);
  if (v12)
  {
    if (v12 == 1)
    {
      *(_BYTE *)(v5 - 120) = 0;
      v13 = *(_QWORD *)(v5 - 304);
      v14 = *(_QWORD *)(v5 - 136);
      v15 = *(_QWORD *)(v5 - 152);
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 296) + 8))(v13, *(_QWORD *)(v5 - 288));
    }
    else
    {
      *(_BYTE *)(v5 - 120) = 1;
      v22 = *(_QWORD *)(v5 - 264);
      v14 = *(_QWORD *)(v5 - 136);
      v15 = *(_QWORD *)(v5 - 152);
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 256) + 8))(v22, *(_QWORD *)(v5 - 248));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v15, v14);
  }
  else
  {
    v16 = *(_QWORD *)(v5 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v16, v4, v10);
    *(_BYTE *)(v5 - 120) = 2;
    v17 = *(_QWORD *)(v5 - 200);
    v18 = *(_QWORD *)(v5 - 136);
    v19 = *(_QWORD *)(v5 - 152);
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v20 = *(_QWORD *)(v5 - 184);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8))(v17, v20);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v16, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v19, v18);
  }
}

Swift::Int URL.ParseStrategy.ComponentParseStrategy.hashValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v14;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, a1);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 2, v4);
  if (v12)
  {
    Hasher._combine(_:)(v12 != 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    Hasher._combine(_:)(2uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return Hasher._finalize()();
}

void URL.ParseStrategy.ComponentParseStrategy.init(from:)()
{
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys();
}

void sub_181A788FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys, a1);
  *(_QWORD *)(v13 - 144) = a1;
  *(_QWORD *)(v13 - 192) = v15;
  v16 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v13 - 264) = v16;
  *(_QWORD *)(v13 - 272) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v13 - 184) = (char *)&a9 - v17;
  *(_QWORD *)(v13 - 120) = v9;
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 104) = v12;
  *(_QWORD *)(v13 - 96) = v10;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys();
}

void sub_181A78978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 208) = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys, a1);
  *(_QWORD *)(v13 - 200) = a1;
  v15 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v13 - 280) = v15;
  *(_QWORD *)(v13 - 288) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v13 - 216) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 120) = v9;
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 104) = v12;
  *(_QWORD *)(v13 - 96) = v10;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys();
}

void sub_181A789F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 232) = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys, a1);
  *(_QWORD *)(v13 - 224) = a1;
  v15 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v13 - 296) = v15;
  *(_QWORD *)(v13 - 304) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v13 - 240) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 120) = v9;
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 104) = v12;
  *(_QWORD *)(v13 - 96) = v10;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys();
}

void sub_181A78A68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys, a1);
  v6 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v5 - 136) = v6;
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v5 - 176) = v1;
  *(_QWORD *)(v5 - 120) = v1;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 256) = v3;
  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 96) = v2;
  type metadata accessor for URL.ParseStrategy.ComponentParseStrategy();
}

uint64_t sub_181A78ADC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[96];

  *(_QWORD *)(v3 - 168) = a1;
  *(_QWORD *)(v3 - 248) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = &v37[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v8 = &v37[-v7];
  v9 = v2;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v10 = *(_QWORD *)(v3 - 128);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v10)
  {
    *(_QWORD *)(v3 - 320) = v5;
    *(_QWORD *)(v3 - 312) = v8;
    v11 = *(_QWORD *)(v3 - 152);
    *(_QWORD *)(v3 - 128) = v2;
    v12 = KeyedDecodingContainer.allKeys.getter();
    v13 = _ArrayBuffer.requestNativeBuffer()();
    if (!v13)
    {
      *(_QWORD *)(v3 - 72) = v12;
      v14 = type metadata accessor for Array();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v14);
      v13 = _copyCollectionToContiguousArray<A>(_:)();
    }
    v15 = v13;
    swift_bridgeObjectRelease();
    v16 = v11;
    v17 = (2 * *(_QWORD *)(v15 + 16)) | 1;
    *(_QWORD *)(v3 - 120) = v15;
    *(_QWORD *)(v3 - 112) = v15 + 32;
    *(_QWORD *)(v3 - 104) = 0;
    *(_QWORD *)(v3 - 96) = v17;
    v18 = type metadata accessor for ArraySlice();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEBF88], v18);
    Collection<>.popFirst()();
    v19 = *(unsigned __int8 *)(v3 - 72);
    v20 = *(_QWORD *)(v3 - 136);
    if (v19 != 3 && *(_QWORD *)(v3 - 104) == *(_QWORD *)(v3 - 96) >> 1)
    {
      if (*(_BYTE *)(v3 - 72))
      {
        if (v19 != 1)
        {
          *(_BYTE *)(v3 - 72) = 2;
          v31 = *(_QWORD *)(v3 - 184);
          v32 = v1;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v33 = *(_QWORD *)(v3 - 320);
          v34 = *(_QWORD *)(v3 - 176);
          v35 = *(_QWORD *)(v3 - 264);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v36 = *(_QWORD *)(v3 - 160);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 8))(v31, v35);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v32, v20);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 2, v34);
          v30 = *(_QWORD *)(v3 - 248);
          v22 = *(_QWORD *)(v3 - 312);
          v29 = *(_QWORD *)(v3 - 168);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v22, v33, v29);
          goto LABEL_14;
        }
        *(_BYTE *)(v3 - 72) = 1;
        v21 = *(_QWORD *)(v3 - 216);
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 288) + 8))(v21, *(_QWORD *)(v3 - 280));
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v1, v20);
        v22 = *(_QWORD *)(v3 - 312);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 - 176) - 8) + 56))(v22, 2, 2);
      }
      else
      {
        *(_BYTE *)(v3 - 72) = 0;
        v28 = *(_QWORD *)(v3 - 240);
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 304) + 8))(v28, *(_QWORD *)(v3 - 296));
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v1, v20);
        v22 = *(_QWORD *)(v3 - 312);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 - 176) - 8) + 56))(v22, 1, 2);
      }
      v29 = *(_QWORD *)(v3 - 168);
      v30 = *(_QWORD *)(v3 - 248);
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v16, v22, v29);
      v26 = *(_QWORD *)(v3 - 128);
      return __swift_destroy_boxed_opaque_existential_1(v26);
    }
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = *(_QWORD *)(v3 - 168);
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v1, v20);
    v9 = *(_QWORD **)(v3 - 128);
  }
  v26 = (uint64_t)v9;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

void protocol witness for Decodable.init(from:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>()
{
  URL.ParseStrategy.ComponentParseStrategy.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>()
{
  URL.ParseStrategy.ComponentParseStrategy.encode(to:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  URL.ParseStrategy.ComponentParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance URL.ParseStrategy.ComponentParseStrategy<A>(uint64_t a1)
{
  static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(a1);
}

__n128 URL.ParseStrategy.scheme(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  __n128 result;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  _OWORD v20[2];
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[7];
  v25 = v2[6];
  v26 = v6;
  v7 = v2[5];
  v23 = v2[4];
  v24 = v7;
  v8 = v2[3];
  v21 = v2[2];
  v22 = v8;
  v9 = v2[1];
  v20[0] = *v2;
  v20[1] = v9;
  v10 = v26;
  v18 = v24;
  v19 = v25;
  v11 = v23.n128_u64[0];
  v12 = v23.n128_i8[8];
  v16 = v21;
  v17 = v22;
  v15 = v9;
  v13 = v20[0];
  outlined retain of URL.ParseStrategy((uint64_t *)v20, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13, *((unint64_t *)&v13 + 1));
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  a2[4].n128_u64[0] = v11;
  a2[4].n128_u8[8] = v12;
  result = v19;
  a2[5] = v18;
  a2[6] = v19;
  a2[7] = v10;
  return result;
}

__n128 URL.ParseStrategy.user(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  _OWORD v21[2];
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[7];
  v26 = v2[6];
  v27 = v6;
  v7 = v2[5];
  v24 = v2[4];
  v25 = v7;
  v8 = v2[3];
  v22 = v2[2];
  v23 = v8;
  v9 = v2[1];
  v21[0] = *v2;
  v21[1] = v9;
  v10 = v27.n128_i64[1];
  v20 = v27.n128_u64[0];
  v18 = v25;
  v19 = v26;
  v11 = v24.n128_u64[0];
  v12 = v24.n128_i8[8];
  v16 = v22;
  v17 = v8;
  v13 = v21[0];
  v14 = v9;
  outlined retain of URL.ParseStrategy((uint64_t *)v21, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 32) = v16;
  *(__n128 *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v12;
  result = v19;
  *(__n128 *)(a2 + 80) = v18;
  *(__n128 *)(a2 + 96) = v19;
  *(_QWORD *)(a2 + 112) = v20;
  *(_QWORD *)(a2 + 120) = v10;
  return result;
}

__n128 URL.ParseStrategy.password(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  __n128 v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[7];
  v27 = v2[6];
  v28 = v6;
  v7 = v2[5];
  v25 = v2[4];
  v26 = v7;
  v8 = v2[1];
  v21 = *v2;
  v22 = v8;
  v9 = v2[3];
  v23 = v2[2];
  v24 = v9;
  v10 = v28.n128_i64[1];
  v20 = v28.n128_u64[0];
  v18 = v26;
  v19 = v27;
  v11 = v25.n128_u64[0];
  v12 = v25.n128_i8[8];
  v13 = v22;
  v16 = v21;
  v17 = v9;
  v14 = v23;
  outlined retain of URL.ParseStrategy((uint64_t *)&v21, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *a2 = v16;
  a2[1] = v13;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v5;
  a2[3] = v17;
  a2[4].n128_u64[0] = v11;
  a2[4].n128_u8[8] = v12;
  result = v19;
  a2[5] = v18;
  a2[6] = v19;
  a2[7].n128_u64[0] = v20;
  a2[7].n128_u64[1] = v10;
  return result;
}

__n128 URL.ParseStrategy.host(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  __n128 v14;
  uint64_t v15;
  __n128 result;
  __int128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  _OWORD v22[2];
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[7];
  v27 = v2[6];
  v28 = v6;
  v7 = v2[5];
  v25 = v2[4];
  v26 = v7;
  v8 = v2[1];
  v22[0] = *v2;
  v22[1] = v8;
  v9 = v2[3];
  v23 = v2[2];
  v24 = v9;
  v10 = v28.n128_i64[1];
  v21 = v28.n128_u64[0];
  v19 = v26;
  v20 = v27;
  v11 = v9.n128_u64[1];
  v12 = v25.n128_u64[0];
  v13 = v25.n128_i8[8];
  v14 = v23;
  v17 = v22[0];
  v18 = v8;
  v15 = v9.n128_u64[0];
  outlined retain of URL.ParseStrategy((uint64_t *)v22, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v15, v11);
  *(_OWORD *)a2 = v17;
  *(__n128 *)(a2 + 16) = v18;
  *(__n128 *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 64) = v12;
  *(_BYTE *)(a2 + 72) = v13;
  result = v20;
  *(__n128 *)(a2 + 80) = v19;
  *(__n128 *)(a2 + 96) = v20;
  *(_QWORD *)(a2 + 112) = v21;
  *(_QWORD *)(a2 + 120) = v10;
  return result;
}

uint64_t *URL.ParseStrategy.port(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = v2[5];
  v17 = v2[4];
  v18 = v5;
  v6 = v2[7];
  v19 = v2[6];
  v20 = v6;
  v7 = v2[1];
  v13 = *v2;
  v14 = v7;
  v8 = v2[3];
  v15 = v2[2];
  v16 = v8;
  v21 = v4;
  v9 = v14;
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v9;
  v10 = v16;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 64) = v3;
  *(_BYTE *)(a2 + 72) = v4;
  v11 = v19;
  *(_OWORD *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v11;
  *(_OWORD *)(a2 + 112) = v20;
  return outlined retain of URL.ParseStrategy((uint64_t *)&v13, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
}

__n128 URL.ParseStrategy.path(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  char v12;
  __n128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  _OWORD v20[2];
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[7];
  v25 = v2[6];
  v26 = v6;
  v7 = v2[3];
  v21 = v2[2];
  v22 = v7;
  v8 = v2[1];
  v20[0] = *v2;
  v20[1] = v8;
  v9 = v2[5];
  v23 = v2[4];
  v24 = v9;
  v10 = v26;
  v11 = v23.n128_u64[0];
  v12 = v23.n128_i8[8];
  v18 = v22;
  v19 = v25;
  v16 = v8;
  v17 = v21;
  v15 = v20[0];
  v13 = v9;
  outlined retain of URL.ParseStrategy((uint64_t *)v20, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13.n128_i64[0], v13.n128_u64[1]);
  *(_OWORD *)a2 = v15;
  *(__n128 *)(a2 + 16) = v16;
  *(__n128 *)(a2 + 32) = v17;
  *(__n128 *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = v4;
  *(_QWORD *)(a2 + 88) = v5;
  result = v19;
  *(__n128 *)(a2 + 96) = v19;
  *(__n128 *)(a2 + 112) = v10;
  return result;
}

__n128 URL.ParseStrategy.query(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  char v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[5];
  v25 = v2[4];
  v26 = v6;
  v7 = v2[3];
  v23 = v2[2];
  v24 = v7;
  v8 = v2[1];
  v21 = *v2;
  v22 = v8;
  v9 = v2[7];
  v27 = v2[6];
  v28 = v9;
  v10 = v9.n128_i64[1];
  v20 = v9.n128_u64[0];
  v11 = v26;
  v12 = v25.n128_u64[0];
  v13 = v25.n128_i8[8];
  v18 = v23;
  v19 = v24;
  v16 = v21;
  v17 = v22;
  v14 = v27;
  outlined retain of URL.ParseStrategy((uint64_t *)&v21, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14.n128_i64[0], v14.n128_u64[1]);
  *a2 = v16;
  a2[1] = v17;
  result = v19;
  a2[2] = v18;
  a2[3] = v19;
  a2[4].n128_u64[0] = v12;
  a2[4].n128_u8[8] = v13;
  a2[5] = v11;
  a2[6].n128_u64[0] = v4;
  a2[6].n128_u64[1] = v5;
  a2[7].n128_u64[0] = v20;
  a2[7].n128_u64[1] = v10;
  return result;
}

__n128 URL.ParseStrategy.fragment(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  char v12;
  __n128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  _OWORD v20[2];
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[5];
  v23 = v2[4];
  v24 = v6;
  v7 = v2[3];
  v21 = v2[2];
  v22 = v7;
  v8 = v2[1];
  v20[0] = *v2;
  v20[1] = v8;
  v9 = v2[7];
  v25 = v2[6];
  v26 = v9;
  v10 = v25;
  v11 = v23.n128_u64[0];
  v12 = v23.n128_i8[8];
  v18 = v22;
  v19 = v24;
  v16 = v8;
  v17 = v21;
  v15 = v20[0];
  v13 = v9;
  outlined retain of URL.ParseStrategy((uint64_t *)v20, (void (*)(uint64_t, uint64_t))outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v13.n128_i64[0], v13.n128_u64[1]);
  *(_OWORD *)a2 = v15;
  *(__n128 *)(a2 + 16) = v16;
  *(__n128 *)(a2 + 32) = v17;
  *(__n128 *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v12;
  result = v19;
  *(__n128 *)(a2 + 80) = v19;
  *(__n128 *)(a2 + 96) = v10;
  *(_QWORD *)(a2 + 112) = v4;
  *(_QWORD *)(a2 + 120) = v5;
  return result;
}

uint64_t URL.ParseStrategy.validate(_:)(__int128 *a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[4];
  uint64_t v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[2];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _OWORD v123[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _OWORD v132[2];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;

  v2 = a1[7];
  v130 = a1[6];
  v131 = v2;
  v132[0] = a1[8];
  *(_OWORD *)((char *)v132 + 10) = *(__int128 *)((char *)a1 + 138);
  v3 = a1[3];
  v126 = a1[2];
  v127 = v3;
  v4 = a1[5];
  v128 = a1[4];
  v129 = v4;
  v5 = a1[1];
  v124 = *a1;
  v125 = v5;
  v6 = v1[5];
  v7 = v1[3];
  v137 = v1[4];
  v138 = v6;
  v8 = v1[5];
  v9 = v1[7];
  v139 = v1[6];
  v140 = v9;
  v10 = v1[1];
  v133 = *v1;
  v134 = v10;
  v11 = v1[3];
  v13 = *v1;
  v12 = v1[1];
  v135 = v1[2];
  v136 = v11;
  v119 = v137;
  v120 = v8;
  v14 = v1[7];
  v121 = v139;
  v122 = v14;
  v115 = v13;
  v116 = v12;
  v117 = v135;
  v118 = v7;
  if ((URL.ParseStrategy.requiredComponentsValue.getter() & 1) != 0 && !(_QWORD)v126)
  {
    if (BYTE9(v124) != 1 || !(_QWORD)v124 || (*(_BYTE *)(v124 + 48) & 1) != 0)
      return 0;
    outlined retain of URLComponents((uint64_t)&v124);
    v15 = String.subscript.getter();
    MEMORY[0x186DA4634](v15);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v124);
    swift_bridgeObjectRelease();
  }
  v119 = v137;
  v120 = v138;
  v121 = v139;
  v122 = v140;
  v115 = v133;
  v116 = v134;
  v117 = v135;
  v118 = v136;
  if ((URL.ParseStrategy.requiredComponentsValue.getter() & 2) == 0)
    goto LABEL_71;
  v121 = v130;
  v122 = v131;
  v123[0] = v132[0];
  *(_OWORD *)((char *)v123 + 10) = *(_OWORD *)((char *)v132 + 10);
  v117 = v126;
  v118 = v127;
  v119 = v128;
  v120 = v129;
  v115 = v124;
  v116 = v125;
  v16 = outlined retain of URLComponents((uint64_t)&v124);
  URLComponents._URLComponents.user.getter(v16);
  v18 = v17;
  outlined release of URLComponents((uint64_t)&v124);
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_71:
    v110 = v137;
    v111 = v138;
    v112 = v139;
    v113 = v140;
    v106 = v133;
    v107 = v134;
    v108 = v135;
    v109 = v136;
    if ((URL.ParseStrategy.requiredComponentsValue.getter() & 4) == 0)
      goto LABEL_11;
    v112 = v130;
    v113 = v131;
    v114[0] = v132[0];
    *(_OWORD *)((char *)v114 + 10) = *(_OWORD *)((char *)v132 + 10);
    v108 = v126;
    v109 = v127;
    v110 = v128;
    v111 = v129;
    v106 = v124;
    v107 = v125;
    v19 = outlined retain of URLComponents((uint64_t)&v124);
    URLComponents._URLComponents.password.getter(v19);
    v18 = v20;
    outlined release of URLComponents((uint64_t)&v124);
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_11:
      v101 = v137;
      v102 = v138;
      v103 = v139;
      v104 = v140;
      v97 = v133;
      v98 = v134;
      v99 = v135;
      v100 = v136;
      if ((URL.ParseStrategy.requiredComponentsValue.getter() & 8) == 0)
        goto LABEL_55;
      v103 = v130;
      v104 = v131;
      v105[0] = v132[0];
      *(_OWORD *)((char *)v105 + 10) = *(_OWORD *)((char *)v132 + 10);
      v99 = v126;
      v100 = v127;
      v101 = v128;
      v102 = v129;
      v97 = v124;
      v98 = v125;
      v21 = v129;
      if ((_QWORD)v129)
      {
        v22 = *((_QWORD *)&v128 + 1);
        v23 = outlined retain of URLComponents((uint64_t)&v124);
        v24 = v21;
      }
      else if ((BYTE12(v124) & 1) != 0 && (_QWORD)v124 && (*(_BYTE *)(v124 + 120) & 1) == 0)
      {
        outlined retain of URLComponents((uint64_t)&v124);
        v44 = String.subscript.getter();
        v22 = MEMORY[0x186DA4634](v44);
        v24 = v45;
        v23 = swift_bridgeObjectRelease();
      }
      else
      {
        outlined retain of URLComponents((uint64_t)&v124);
        v23 = URLComponents._URLComponents.port.getter();
        if ((v25 & 1) != 0)
        {
          URLComponents._URLComponents.percentEncodedUser.getter();
          v18 = v26;
          v23 = swift_bridgeObjectRelease();
          if (!v18)
          {
            outlined release of URLComponents((uint64_t)&v124);
            return v18;
          }
        }
        v22 = 0;
        v24 = 0xE000000000000000;
      }
      v27 = v22 & 0xFFFFFFFFFFFFLL;
      if ((v24 & 0x2000000000000000) != 0)
        v28 = HIBYTE(v24) & 0xF;
      else
        v28 = v22 & 0xFFFFFFFFFFFFLL;
      if (!v28)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined release of URLComponents((uint64_t)&v124);
        goto LABEL_55;
      }
      if ((BYTE8(v132[1]) & 1) != 0)
      {
        *(_QWORD *)&v88 = v22;
        *((_QWORD *)&v88 + 1) = v24;
        MEMORY[0x1E0C80A78](v23);
        v68 = &v88;
        v69 = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v67, v22, v24);
        if (v29 == 1)
        {
          v31 = *((_QWORD *)&v88 + 1);
          v30 = v88;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v30, v31, MEMORY[0x1E0DEE9E8]);
          v18 = v32;
          swift_bridgeObjectRelease_n();
LABEL_52:
          swift_bridgeObjectRelease();
LABEL_53:
          outlined release of URLComponents((uint64_t)&v124);
          if (!v18)
            return v18;
          goto LABEL_54;
        }
        v18 = v29;
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_53;
      }
      if ((v24 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((v24 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)&v88 = v22;
          *((_QWORD *)&v88 + 1) = v24 & 0xFFFFFFFFFFFFFFLL;
          *(_QWORD *)&v79 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          *((_QWORD *)&v79 + 1) = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v88, HIBYTE(v24) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v79, 0, (unsigned __int8 *)&v88, HIBYTE(v24) & 0xF, (uint64_t *)&v70);
          v18 = *((_QWORD *)&v70 + 1);
          swift_release();
        }
        else
        {
          if ((v22 & 0x1000000000000000) != 0)
          {
            v33 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            v27 = v52;
          }
          *(_QWORD *)&v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          *((_QWORD *)&v88 + 1) = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v33, v27, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88, 0, v33, v27);
          v18 = v34;
        }
        swift_bridgeObjectRelease();
        if (v18 != 1)
          goto LABEL_39;
      }
      *(_QWORD *)&v88 = v22;
      *((_QWORD *)&v88 + 1) = v24;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      v35 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v36 = objc_msgSend(v35, sel__fastCharacterContents);
      v37 = v35;
      if (v36)
      {
        *(_QWORD *)&v88 = v22;
        *((_QWORD *)&v88 + 1) = v24;
        StringProtocol._ephemeralString.getter();
        v38 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v39 = objc_msgSend(v38, sel_length);
        v40 = swift_unknownObjectRelease();
        MEMORY[0x1E0C80A78](v40);
        LOBYTE(v68) = 0;
        MEMORY[0x1E0C80A78](v41);
        v66[2] = v36;
        v66[3] = v39;
        specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v36, (uint64_t)v39, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v42, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v66);
        v18 = v43;
        swift_bridgeObjectRelease_n();
        outlined release of URLComponents((uint64_t)&v124);
        if (!v18)
          return v18;
LABEL_54:
        swift_bridgeObjectRelease();
LABEL_55:
        v92 = v137;
        v93 = v138;
        v94 = v139;
        v95 = v140;
        v88 = v133;
        v89 = v134;
        v90 = v135;
        v91 = v136;
        if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x10) == 0)
          goto LABEL_60;
        v94 = v130;
        v95 = v131;
        v96[0] = v132[0];
        *(_OWORD *)((char *)v96 + 10) = *(_OWORD *)((char *)v132 + 10);
        v90 = v126;
        v91 = v127;
        v92 = v128;
        v93 = v129;
        v88 = v124;
        v89 = v125;
        URLComponents.port.getter();
        if ((v55 & 1) == 0)
        {
LABEL_60:
          v92 = v137;
          v93 = v138;
          v94 = v139;
          v95 = v140;
          v88 = v133;
          v89 = v134;
          v90 = v135;
          v91 = v136;
          if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x20) == 0)
            goto LABEL_61;
          v94 = v130;
          v95 = v131;
          v96[0] = v132[0];
          *(_OWORD *)((char *)v96 + 10) = *(_OWORD *)((char *)v132 + 10);
          v90 = v126;
          v91 = v127;
          v92 = v128;
          v93 = v129;
          v88 = v124;
          v89 = v125;
          outlined retain of URLComponents((uint64_t)&v124);
          v56 = (unint64_t)URLComponents._URLComponents.path.getter();
          v58 = v57;
          outlined release of URLComponents((uint64_t)&v124);
          swift_bridgeObjectRelease();
          v59 = HIBYTE(v58) & 0xF;
          if ((v58 & 0x2000000000000000) == 0)
            v59 = v56 & 0xFFFFFFFFFFFFLL;
          if (v59)
          {
LABEL_61:
            v83 = v137;
            v84 = v138;
            v85 = v139;
            v86 = v140;
            v79 = v133;
            v80 = v134;
            v81 = v135;
            v82 = v136;
            if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x40) == 0)
              goto LABEL_63;
            v85 = v130;
            v86 = v131;
            v87[0] = v132[0];
            *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v132 + 10);
            v81 = v126;
            v82 = v127;
            v83 = v128;
            v84 = v129;
            v79 = v124;
            v80 = v125;
            v60 = outlined retain of URLComponents((uint64_t)&v124);
            URLComponents._URLComponents.query.getter(v60);
            v18 = v61;
            outlined release of URLComponents((uint64_t)&v124);
            swift_bridgeObjectRelease();
            if (v18)
            {
LABEL_63:
              v74 = v137;
              v75 = v138;
              v76 = v139;
              v77 = v140;
              v70 = v133;
              v71 = v134;
              v72 = v135;
              v73 = v136;
              if ((URL.ParseStrategy.requiredComponentsValue.getter() & 0x80) != 0)
              {
                v77 = v131;
                v78[0] = v132[0];
                *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)((char *)v132 + 10);
                v72 = v126;
                v73 = v127;
                v74 = v128;
                v75 = v129;
                v76 = v130;
                v70 = v124;
                v71 = v125;
                v63 = outlined retain of URLComponents((uint64_t)&v124);
                URLComponents._URLComponents.fragment.getter(v63);
                v65 = v64;
                outlined release of URLComponents((uint64_t)&v124);
                v18 = v65 != 0;
                swift_bridgeObjectRelease();
              }
              else
              {
                return 1;
              }
            }
            return v18;
          }
        }
        return 0;
      }
      *(_QWORD *)&v88 = v22;
      *((_QWORD *)&v88 + 1) = v24;
      swift_bridgeObjectRetain();
      v47 = String.init<A>(_:)();
      v48 = v46;
      if ((v46 & 0x1000000000000000) != 0)
      {
        v47 = static String._copying(_:)();
        v54 = v53;
        swift_bridgeObjectRelease();
        v48 = v54;
        if ((v54 & 0x2000000000000000) == 0)
          goto LABEL_44;
      }
      else if ((v46 & 0x2000000000000000) == 0)
      {
LABEL_44:
        if ((v47 & 0x1000000000000000) != 0)
        {
          v49 = (unsigned __int8 *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v50 = v47 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v49 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        *(_QWORD *)&v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v88 + 1) = 0;
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v49, v50, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88, 0, v49, v50);
        v18 = v51;
        goto LABEL_51;
      }
      *(_QWORD *)&v88 = v47;
      *((_QWORD *)&v88 + 1) = v48 & 0xFFFFFFFFFFFFFFLL;
      *(_QWORD *)&v79 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v79 + 1) = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v88, HIBYTE(v48) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v79, 0, (unsigned __int8 *)&v88, HIBYTE(v48) & 0xF, (uint64_t *)&v70);
      v18 = *((_QWORD *)&v70 + 1);
      swift_release();
LABEL_51:
      swift_bridgeObjectRelease_n();
      goto LABEL_52;
    }
  }
  return v18;
}

uint64_t URL.ParseStrategy.fillDefaultValues(for:)(__int128 *a1)
{
  _OWORD *v1;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  Swift::String_optional v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void (*v25)(char *, _QWORD);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50;
  __int128 v51;
  void (*v52)(char *, _QWORD);
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  __int128 v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned __int8 *v105;
  unint64_t v106;
  void *v107;
  id v108;
  id v109;
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  char v123;
  char v124;
  int v125;
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  char v145;
  char v146;
  char v147;
  char v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  void (*v175)(char *, _QWORD);
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unsigned __int8 *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  uint64_t v209;
  char v210;
  char v211;
  void (*v212)(char *, _QWORD);
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t result;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  void *v238;
  unsigned __int16 *v239;
  id v240;
  void *v241;
  uint64_t v242;
  void *v243;
  unsigned __int16 *v244;
  id v245;
  void *v246;
  id v247;
  char v248;
  void *v249;
  unsigned __int16 *v250;
  void *v251;
  unsigned __int16 *v252;
  id v253;
  void *v254;
  id v255;
  char v256;
  void *v257;
  unsigned __int16 *v258;
  id v259;
  void *v260;
  id v261;
  char v262;
  uint64_t v263;
  char v264;
  char v265;
  char v266;
  char v267;
  unint64_t v268;
  unint64_t v269;
  _QWORD v270[4];
  _BYTE v271[16];
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t, uint64_t, uint64_t);
  __int128 v292;
  unint64_t v293;
  uint64_t v294;
  char v295;
  char v296;
  char v297;
  char v298;
  char v299;
  char v300;
  unsigned __int8 v301;
  unsigned __int8 v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  char v311;
  __int128 v312;
  uint64_t v313;
  unint64_t v314;
  __int128 v315;
  char v316;
  char v317;
  _OWORD v318[7];
  __int128 v319;
  _OWORD v320[2];
  int32_t (__cdecl *v321)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v322;
  char v323;
  _BYTE v324[7];
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  _BYTE v335[7];
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char v342;
  char v343;
  unint64_t v344;
  uint64_t v345;
  char v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  __int128 v352;
  unsigned __int8 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  char v357;
  char v358;
  unint64_t v359;
  uint64_t v360;
  char v361;
  __int128 v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  unsigned __int8 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  char v372;
  char v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  _OWORD v382[11];

  v3 = 0;
  v4 = v1[5];
  v382[6] = v1[4];
  v382[7] = v4;
  v5 = v1[7];
  v382[8] = v1[6];
  v382[9] = v5;
  v6 = v1[1];
  v382[2] = *v1;
  v382[3] = v6;
  v7 = v1[3];
  v382[4] = v1[2];
  v382[5] = v7;
  v8 = *((_QWORD *)a1 + 4);
  if (v8)
  {
    if ((v8 & 0x2000000000000000) == 0)
    {
      v9 = *((_QWORD *)a1 + 3);
      goto LABEL_4;
    }
    v13 = v8;
LABEL_12:
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRelease();
    if ((v13 & 0xF00000000000000) != 0)
      goto LABEL_19;
    goto LABEL_13;
  }
  if (*((_BYTE *)a1 + 9) == 1 && *(_QWORD *)a1 && (*(_BYTE *)(*(_QWORD *)a1 + 48) & 1) == 0)
  {
    v11 = String.subscript.getter();
    v9 = MEMORY[0x186DA4634](v11);
    v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 0x2000000000000000) == 0)
    {
LABEL_4:
      swift_bridgeObjectRetain();
      v10 = swift_bridgeObjectRelease();
      if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_19;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v14 = URL.ParseStrategy.defaultValues.getter();
  if (*(_QWORD *)(v14 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v16 & 1) != 0))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
    v19 = *v17;
    v18 = (void *)v17[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  swift_bridgeObjectRelease();
  v20.value._countAndFlagsBits = v19;
  v20.value._object = v18;
  URLComponents._URLComponents.setScheme(_:)(v20);
  if (v3)
  {

    swift_bridgeObjectRelease();
    LODWORD(v273) = 0;
    v272 = 714;
    goto LABEL_202;
  }
  v10 = swift_bridgeObjectRelease();
LABEL_19:
  v21 = a1[7];
  v380 = a1[6];
  v381 = v21;
  v382[0] = a1[8];
  *(_OWORD *)((char *)v382 + 10) = *(__int128 *)((char *)a1 + 138);
  v22 = a1[3];
  v376 = a1[2];
  v377 = v22;
  v23 = a1[5];
  v378 = a1[4];
  v379 = v23;
  v24 = a1[1];
  v374 = *a1;
  v375 = v24;
  v25 = URLComponents._URLComponents.user.getter(v10);
  if (!v26)
    goto LABEL_24;
  v27 = (unint64_t)v25;
  v28 = v26;
  swift_bridgeObjectRelease();
  v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v29 = v27 & 0xFFFFFFFFFFFFLL;
  if (!v29)
  {
LABEL_24:
    v32 = URL.ParseStrategy.defaultValues.getter();
    if (*(_QWORD *)(v32 + 16) && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v34 & 1) != 0))
    {
      v35 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v33);
      v30 = *v35;
      v31 = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_BYTE *)a1 + 8) = 0;
      *((_BYTE *)a1 + 10) = 0;
      if ((v31 & 0x1000000000000000) != 0)
      {
        v359 = v30;
        v360 = v31;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v249 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v250 = (unsigned __int16 *)objc_msgSend(v249, sel__fastCharacterContents);
        v251 = v249;
        v252 = v250;
        v253 = v251;
        if (v252)
        {
          v359 = v30;
          v360 = v31;
          StringProtocol._ephemeralString.getter();
          v254 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v255 = objc_msgSend(v254, sel_length);
          swift_unknownObjectRelease();
          v256 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v252, (uint64_t)v255, 2u, 0);
        }
        else
        {
          v256 = specialized Sequence.allSatisfy(_:)(v30, v31, 2);
        }
        v266 = v256;
        v83 = swift_bridgeObjectRelease();
        if ((v266 & 1) == 0)
          goto LABEL_56;
      }
      else
      {
        if ((v31 & 0x2000000000000000) != 0)
        {
          v37 = HIBYTE(v31) & 0xF;
          v359 = v30;
          v360 = v31 & 0xFFFFFFFFFFFFFFLL;
          v36 = (char *)&v359;
        }
        else if ((v30 & 0x1000000000000000) != 0)
        {
          v36 = (char *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v37 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v36 = (char *)_StringObject.sharedUTF8.getter();
        }
        v83 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v37, 2u, 0);
        if ((v83 & 1) == 0)
        {
LABEL_56:
          v84 = HIBYTE(v31) & 0xF;
          if ((v31 & 0x2000000000000000) == 0)
            v84 = v30 & 0xFFFFFFFFFFFFLL;
          if (v84)
          {
            v359 = v30;
            v360 = v31;
            MEMORY[0x1E0C80A78](v83);
            v272 = (uint64_t)&v359;
            LOBYTE(v273) = 2;
            swift_bridgeObjectRetain();
            v85 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v271, v30, v31);
            if (v86)
            {
              v30 = (uint64_t)v85;
              v87 = v86;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v232 = v359;
              v233 = v360;
              swift_bridgeObjectRetain();
              v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v232, v233, 2u);
              v87 = v234;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }
            v31 = v87;
          }
          else
          {
            swift_bridgeObjectRelease();
            v30 = 0;
            v31 = 0xE000000000000000;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = 0;
      v31 = 0;
      *((_BYTE *)a1 + 8) = 0;
      *((_BYTE *)a1 + 10) = 0;
    }
    swift_bridgeObjectRelease();
    *((_QWORD *)a1 + 5) = v30;
    *((_QWORD *)a1 + 6) = v31;
    goto LABEL_32;
  }
  v30 = *((_QWORD *)&v376 + 1);
  v31 = v377;
LABEL_32:
  v38 = *(_QWORD *)a1;
  v39 = *((_BYTE *)a1 + 8);
  v40 = *((_BYTE *)a1 + 9);
  v41 = *((_BYTE *)a1 + 10);
  v42 = *((_BYTE *)a1 + 11);
  v43 = *((_BYTE *)a1 + 12);
  v44 = *((_BYTE *)a1 + 13);
  v45 = *((_BYTE *)a1 + 14);
  v46 = *((_BYTE *)a1 + 15);
  v47 = *((_BYTE *)a1 + 16);
  v48 = *((_QWORD *)a1 + 7);
  v49 = *((_BYTE *)a1 + 152);
  v50 = *((_BYTE *)a1 + 153);
  v302 = *((_BYTE *)a1 + 96);
  v359 = v38;
  LOBYTE(v360) = v39;
  BYTE1(v360) = v40;
  BYTE2(v360) = v41;
  BYTE3(v360) = v42;
  BYTE4(v360) = v43;
  BYTE5(v360) = v44;
  BYTE6(v360) = v45;
  HIBYTE(v360) = v46;
  v361 = v47;
  v362 = *(__int128 *)((char *)a1 + 24);
  v363 = v30;
  v364 = v31;
  v365 = v48;
  v51 = a1[5];
  v292 = a1[4];
  v366 = v292;
  v367 = v51;
  v368 = v302;
  v369 = *(__int128 *)((char *)a1 + 104);
  v370 = *(__int128 *)((char *)a1 + 120);
  v371 = *(__int128 *)((char *)a1 + 136);
  v372 = v49;
  v373 = v50;
  v52 = URLComponents._URLComponents.password.getter(v302);
  if (v53)
  {
    v54 = (unint64_t)v52;
    v55 = v53;
    swift_bridgeObjectRelease();
    v56 = HIBYTE(v55) & 0xF;
    if ((v55 & 0x2000000000000000) == 0)
      v56 = v54 & 0xFFFFFFFFFFFFLL;
    if (v56)
    {
      v57 = v292;
      goto LABEL_45;
    }
  }
  v58 = URL.ParseStrategy.defaultValues.getter();
  if (*(_QWORD *)(v58 + 16) && (v59 = specialized __RawDictionaryStorage.find<A>(_:)(4), (v60 & 1) != 0))
  {
    v61 = (uint64_t *)(*(_QWORD *)(v58 + 56) + 16 * v59);
    v48 = *v61;
    v57 = v61[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 11) = 0;
    if ((v57 & 0x1000000000000000) != 0)
    {
      v344 = v48;
      v345 = v57;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v257 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v258 = (unsigned __int16 *)objc_msgSend(v257, sel__fastCharacterContents);
      v259 = v257;
      if (v258)
      {
        v344 = v48;
        v345 = v57;
        StringProtocol._ephemeralString.getter();
        v260 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v261 = objc_msgSend(v260, sel_length);
        swift_unknownObjectRelease();
        v262 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v258, (uint64_t)v261, 2u, 0);
      }
      else
      {
        v262 = specialized Sequence.allSatisfy(_:)(v48, v57, 2);
      }
      v267 = v262;
      v88 = swift_bridgeObjectRelease();
      if ((v267 & 1) == 0)
        goto LABEL_64;
    }
    else
    {
      if ((v57 & 0x2000000000000000) != 0)
      {
        v63 = HIBYTE(v57) & 0xF;
        v344 = v48;
        v345 = v57 & 0xFFFFFFFFFFFFFFLL;
        v62 = (char *)&v344;
      }
      else if ((v48 & 0x1000000000000000) != 0)
      {
        v62 = (char *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v63 = v48 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v62 = (char *)_StringObject.sharedUTF8.getter();
      }
      v88 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v62, v63, 2u, 0);
      if ((v88 & 1) == 0)
      {
LABEL_64:
        v89 = HIBYTE(v57) & 0xF;
        if ((v57 & 0x2000000000000000) == 0)
          v89 = v48 & 0xFFFFFFFFFFFFLL;
        if (v89)
        {
          v344 = v48;
          v345 = v57;
          MEMORY[0x1E0C80A78](v88);
          v272 = (uint64_t)&v344;
          LOBYTE(v273) = 2;
          swift_bridgeObjectRetain();
          v90 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v271, v48, v57);
          if (v91)
          {
            v48 = (uint64_t)v90;
            v92 = v91;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v235 = v344;
            v236 = v345;
            swift_bridgeObjectRetain();
            v48 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v235, v236, 2u);
            v92 = v237;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          v57 = v92;
        }
        else
        {
          swift_bridgeObjectRelease();
          v48 = 0;
          v57 = 0xE000000000000000;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v48 = 0;
    v57 = 0;
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 11) = 0;
  }
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = v48;
  *((_QWORD *)a1 + 8) = v57;
LABEL_45:
  v64 = *(_QWORD *)a1;
  v65 = *((_BYTE *)a1 + 8);
  v66 = *((_BYTE *)a1 + 9);
  v67 = *((_BYTE *)a1 + 10);
  v68 = *((_BYTE *)a1 + 11);
  v69 = *((_BYTE *)a1 + 12);
  v70 = *((_BYTE *)a1 + 13);
  v71 = *((_BYTE *)a1 + 14);
  v72 = *((_BYTE *)a1 + 15);
  v73 = *((_BYTE *)a1 + 16);
  v74 = *((_QWORD *)a1 + 9);
  v76 = *((_BYTE *)a1 + 152);
  v77 = *((_BYTE *)a1 + 153);
  v301 = *((_BYTE *)a1 + 96);
  v75 = v301;
  v344 = v64;
  LOBYTE(v345) = v65;
  BYTE1(v345) = v66;
  BYTE2(v345) = v67;
  BYTE3(v345) = v68;
  BYTE4(v345) = v69;
  BYTE5(v345) = v70;
  BYTE6(v345) = v71;
  HIBYTE(v345) = v72;
  v346 = v73;
  v347 = *(__int128 *)((char *)a1 + 24);
  v348 = *(__int128 *)((char *)a1 + 40);
  v349 = v48;
  v350 = v57;
  v351 = v74;
  v78 = a1[5];
  v352 = v78;
  v353 = v301;
  v354 = *(__int128 *)((char *)a1 + 104);
  v355 = *(__int128 *)((char *)a1 + 120);
  v356 = *(__int128 *)((char *)a1 + 136);
  v357 = v76;
  v358 = v77;
  if ((_QWORD)v78)
  {
    v79 = v78;
  }
  else
  {
    if (!v64)
      v69 = 0;
    if ((v69 & 1) != 0 && (*(_BYTE *)(v64 + 120) & 1) == 0)
    {
      v93 = String.subscript.getter();
      v74 = MEMORY[0x186DA4634](v93);
      v79 = v94;
      v75 = swift_bridgeObjectRelease();
    }
    else
    {
      v75 = URLComponents._URLComponents.port.getter();
      if ((v80 & 1) != 0)
      {
        URLComponents._URLComponents.percentEncodedUser.getter();
        v82 = v81;
        v75 = swift_bridgeObjectRelease();
        if (!v82)
          goto LABEL_98;
      }
      v74 = 0;
      v79 = 0xE000000000000000;
    }
  }
  v95 = v74 & 0xFFFFFFFFFFFFLL;
  if ((v79 & 0x2000000000000000) != 0)
    v96 = HIBYTE(v79) & 0xF;
  else
    v96 = v74 & 0xFFFFFFFFFFFFLL;
  if (!v96)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v104 = 0xE000000000000000;
    goto LABEL_97;
  }
  if ((v76 & 1) != 0)
  {
    v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
    v322 = v79;
    MEMORY[0x1E0C80A78](v75);
    v272 = (uint64_t)&v321;
    v273 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v97 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v271, v74, v79);
    if (v98 == 1)
    {
      v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v321;
      v100 = v322;
      swift_bridgeObjectRetain();
      v101 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v99, v100, MEMORY[0x1E0DEE9E8]);
      goto LABEL_78;
    }
    v103 = (uint64_t)v97;
    v104 = v98;
    goto LABEL_93;
  }
  if ((v79 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((v79 & 0x2000000000000000) != 0)
    {
      v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
      v322 = v79 & 0xFFFFFFFFFFFFFFLL;
      *(_QWORD *)&v318[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v318[0] + 1) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v321, HIBYTE(v79) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v318, 0, (unsigned __int8 *)&v321, HIBYTE(v79) & 0xF, &v303);
      v103 = v303;
      v104 = v304;
      swift_release();
    }
    else
    {
      if ((v74 & 0x1000000000000000) != 0)
      {
        v105 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v105 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        v95 = v263;
      }
      v321 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v322 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      v103 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v105, v95, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v321, 0, v105, v95);
      v104 = v106;
    }
    swift_bridgeObjectRelease();
    if (v104 != 1)
    {
LABEL_93:
      swift_bridgeObjectRelease_n();
      if (!v104)
        goto LABEL_98;
      goto LABEL_94;
    }
  }
  v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
  v322 = v79;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  v107 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v108 = objc_msgSend(v107, sel__fastCharacterContents);
  v109 = v107;
  if (!v108)
  {
    v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
    v322 = v79;
    swift_bridgeObjectRetain();
    v191 = String.init<A>(_:)();
    v193 = v192;
    v3 = 0;
    if ((v192 & 0x1000000000000000) != 0)
    {
      v191 = static String._copying(_:)();
      v269 = v268;
      swift_bridgeObjectRelease();
      v193 = v269;
    }
    if ((v193 & 0x2000000000000000) != 0)
    {
      v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v191;
      v322 = v193 & 0xFFFFFFFFFFFFFFLL;
      *(_QWORD *)&v318[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((_QWORD *)&v318[0] + 1) = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v321, HIBYTE(v193) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v318, 0, (unsigned __int8 *)&v321, HIBYTE(v193) & 0xF, &v303);
      v103 = v303;
      v104 = v304;
      swift_release();
LABEL_79:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (!v104)
        goto LABEL_98;
      goto LABEL_94;
    }
    if ((v191 & 0x1000000000000000) != 0)
    {
      v194 = (unsigned __int8 *)((v193 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v195 = v191 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v194 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    v321 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v322 = 0;
    v101 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v194, v195, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v321, 0, v194, v195);
LABEL_78:
    v103 = v101;
    v104 = v102;
    goto LABEL_79;
  }
  v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v74;
  v322 = v79;
  StringProtocol._ephemeralString.getter();
  v110 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v111 = objc_msgSend(v110, sel_length);
  v112 = swift_unknownObjectRelease();
  MEMORY[0x1E0C80A78](v112);
  LOBYTE(v272) = 0;
  MEMORY[0x1E0C80A78](v113);
  v270[2] = v108;
  v270[3] = v111;
  v103 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v108, (uint64_t)v111, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v114, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v270);
  v104 = v115;
  swift_bridgeObjectRelease_n();
  v3 = 0;
  if (v104)
  {
LABEL_94:
    swift_bridgeObjectRelease();
    if ((v104 & 0x2000000000000000) == 0)
    {
      if ((v103 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_103;
      goto LABEL_98;
    }
LABEL_97:
    if ((v104 & 0xF00000000000000) != 0)
      goto LABEL_103;
  }
LABEL_98:
  v116 = URL.ParseStrategy.defaultValues.getter();
  if (*(_QWORD *)(v116 + 16) && (v117 = specialized __RawDictionaryStorage.find<A>(_:)(8), (v118 & 1) != 0))
  {
    v119 = (unint64_t *)(*(_QWORD *)(v116 + 56) + 16 * v117);
    v120 = *v119;
    v121 = v119[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v120 = 0;
    v121 = 0;
  }
  swift_bridgeObjectRelease();
  URLComponents.host.setter(v120, v121);
LABEL_103:
  *(_QWORD *)&v292 = v3;
  v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
  v123 = *((_BYTE *)a1 + 8);
  v300 = *((_BYTE *)a1 + 9);
  v299 = *((_BYTE *)a1 + 10);
  v298 = *((_BYTE *)a1 + 11);
  v297 = *((_BYTE *)a1 + 12);
  v124 = *((_BYTE *)a1 + 13);
  v125 = *((unsigned __int8 *)a1 + 14);
  v126 = *((_BYTE *)a1 + 15);
  v127 = *((_BYTE *)a1 + 16);
  *(_DWORD *)v324 = *(_DWORD *)((char *)a1 + 17);
  *(_DWORD *)&v324[3] = *((_DWORD *)a1 + 5);
  v129 = *((_QWORD *)a1 + 3);
  v128 = *((_QWORD *)a1 + 4);
  v130 = *((_QWORD *)a1 + 5);
  v131 = *((_QWORD *)a1 + 6);
  v132 = *((_QWORD *)a1 + 7);
  v133 = *((_QWORD *)a1 + 8);
  v134 = *((_QWORD *)a1 + 9);
  v135 = *((_QWORD *)a1 + 10);
  v136 = *((_QWORD *)a1 + 11);
  v137 = *((_BYTE *)a1 + 96);
  *(_DWORD *)v335 = *(_DWORD *)((char *)a1 + 97);
  *(_DWORD *)&v335[3] = *((_DWORD *)a1 + 25);
  v139 = *((_QWORD *)a1 + 13);
  v138 = *((_QWORD *)a1 + 14);
  v140 = *((_QWORD *)a1 + 15);
  v141 = *((_QWORD *)a1 + 16);
  BYTE1(v322) = v300;
  BYTE2(v322) = v299;
  v143 = *((_QWORD *)a1 + 17);
  v142 = *((_QWORD *)a1 + 18);
  BYTE3(v322) = v298;
  v144 = *((unsigned __int8 *)a1 + 152);
  BYTE4(v322) = v297;
  v145 = *((_BYTE *)a1 + 153);
  LOBYTE(v322) = v123;
  v146 = v123 & 1;
  BYTE5(v322) = v124;
  v147 = v124 & 1;
  v334 = v137;
  v274 = v137 & 1;
  v290 = v129;
  v291 = v122;
  v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v122;
  v278 = v125;
  BYTE6(v322) = v125;
  v148 = v126;
  HIBYTE(v322) = v126;
  v323 = v127;
  v325 = v129;
  v288 = v130;
  v289 = v128;
  v326 = v128;
  v327 = v130;
  v286 = v132;
  v287 = v131;
  v328 = v131;
  v329 = v132;
  v284 = v134;
  v285 = v133;
  v330 = v133;
  v331 = v134;
  v282 = v139;
  v283 = v135;
  v332 = v135;
  v149 = v136;
  v333 = v136;
  v150 = v145;
  v336 = v139;
  v280 = v140;
  v281 = v138;
  v337 = v138;
  v338 = v140;
  v279 = v141;
  v339 = v141;
  v276 = v142;
  v277 = v143;
  v340 = v143;
  v341 = v142;
  v275 = v144;
  v342 = v144;
  v343 = v145;
  URLComponents.port.getter();
  if ((v151 & 1) == 0)
  {
LABEL_110:
    v158 = v149;
    v159 = v274;
    goto LABEL_111;
  }
  v152 = URL.ParseStrategy.defaultValues.getter();
  if (!*(_QWORD *)(v152 + 16) || (v153 = specialized __RawDictionaryStorage.find<A>(_:)(16), (v154 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_110;
  }
  v155 = (uint64_t *)(*(_QWORD *)(v152 + 56) + 16 * v153);
  v156 = *v155;
  v157 = v155[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v158 = specialized FixedWidthInteger.init(_:)(v156, v157);
  *((_BYTE *)a1 + 8) = 0;
  *((_BYTE *)a1 + 13) = 0;
  if ((v159 & 1) == 0 && v158 < 0)
  {
    while (1)
    {
      LODWORD(v273) = 0;
      v272 = 764;
LABEL_202:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  v147 = 0;
  v146 = 0;
  *((_QWORD *)a1 + 11) = v158;
  *((_BYTE *)a1 + 96) = v159 & 1;
LABEL_111:
  v296 = v159 & 1;
  v321 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v291;
  LOBYTE(v322) = v146;
  BYTE1(v322) = v300;
  BYTE2(v322) = v299;
  BYTE3(v322) = v298;
  BYTE4(v322) = v297;
  BYTE5(v322) = v147;
  BYTE6(v322) = v278 & 1;
  HIBYTE(v322) = v148 & 1;
  v323 = v127 & 1;
  v325 = v290;
  v326 = v289;
  v327 = v288;
  v328 = v287;
  v329 = v286;
  v330 = v285;
  v331 = v284;
  v332 = v283;
  v333 = v158;
  v334 = v159 & 1;
  v336 = v282;
  v337 = v281;
  v338 = v280;
  v339 = v279;
  v340 = v277;
  v341 = v276;
  v342 = v275 & 1;
  v343 = v150 & 1;
  v160 = (unint64_t)URLComponents._URLComponents.path.getter();
  v162 = v161;
  v163 = swift_bridgeObjectRelease();
  v164 = HIBYTE(v162) & 0xF;
  if ((v162 & 0x2000000000000000) == 0)
    v164 = v160 & 0xFFFFFFFFFFFFLL;
  if (!v164)
  {
    v165 = URL.ParseStrategy.defaultValues.getter();
    v166 = specialized Dictionary.subscript.getter(32, v165);
    v168 = v167;
    swift_bridgeObjectRelease();
    if (v168)
      v169 = v166;
    else
      v169 = 0;
    if (v168)
      v170 = v168;
    else
      v170 = 0xE000000000000000;
    v163 = URLComponents._URLComponents.path.setter(v169, v170);
  }
  v171 = a1[7];
  v318[6] = a1[6];
  v319 = v171;
  v320[0] = a1[8];
  *(_OWORD *)((char *)v320 + 10) = *(__int128 *)((char *)a1 + 138);
  v172 = a1[3];
  v318[2] = a1[2];
  v318[3] = v172;
  v173 = a1[5];
  v318[4] = a1[4];
  v318[5] = v173;
  v174 = a1[1];
  v318[0] = *a1;
  v318[1] = v174;
  v175 = URLComponents._URLComponents.query.getter(v163);
  if (!v176)
    goto LABEL_126;
  v177 = (unint64_t)v175;
  v178 = v176;
  swift_bridgeObjectRelease();
  v179 = HIBYTE(v178) & 0xF;
  if ((v178 & 0x2000000000000000) == 0)
    v179 = v177 & 0xFFFFFFFFFFFFLL;
  if (!v179)
  {
LABEL_126:
    v182 = URL.ParseStrategy.defaultValues.getter();
    v180 = specialized Dictionary.subscript.getter(64, v182);
    v181 = v183;
    swift_bridgeObjectRelease();
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 15) = 0;
    if (v181)
    {
      if ((v181 & 0x1000000000000000) != 0)
      {
        v303 = v180;
        v304 = v181;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v238 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v239 = (unsigned __int16 *)objc_msgSend(v238, sel__fastCharacterContents);
        v240 = v238;
        if (v239)
        {
          v303 = v180;
          v304 = v181;
          StringProtocol._ephemeralString.getter();
          v241 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v242 = (uint64_t)objc_msgSend(v241, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v242) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v239, v242, 0x40u, 0);
          v186 = swift_bridgeObjectRelease();
          if ((v242 & 1) != 0)
            goto LABEL_147;
        }
        else
        {
          v264 = specialized Sequence.allSatisfy(_:)(v180, v181, 64);
          v186 = swift_bridgeObjectRelease();
          if ((v264 & 1) != 0)
            goto LABEL_147;
        }
LABEL_133:
        v187 = HIBYTE(v181) & 0xF;
        if ((v181 & 0x2000000000000000) == 0)
          v187 = v180 & 0xFFFFFFFFFFFFLL;
        if (v187)
        {
          v303 = v180;
          v304 = v181;
          MEMORY[0x1E0C80A78](v186);
          v272 = (uint64_t)&v303;
          LOBYTE(v273) = 64;
          swift_bridgeObjectRetain();
          v188 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v271, v180, v181);
          if (v189)
          {
            v180 = (uint64_t)v188;
            v190 = v189;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v196 = v303;
            v197 = v304;
            swift_bridgeObjectRetain();
            v180 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v196, v197, 0x40u);
            v190 = v198;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          v181 = v190;
        }
        else
        {
          swift_bridgeObjectRelease();
          v180 = 0;
          v181 = 0xE000000000000000;
        }
        goto LABEL_147;
      }
      if ((v181 & 0x2000000000000000) != 0)
      {
        v185 = HIBYTE(v181) & 0xF;
        v303 = v180;
        v304 = v181 & 0xFFFFFFFFFFFFFFLL;
        v184 = (char *)&v303;
      }
      else if ((v180 & 0x1000000000000000) != 0)
      {
        v184 = (char *)((v181 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v185 = v180 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v184 = (char *)_StringObject.sharedUTF8.getter();
      }
      v186 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v184, v185, 0x40u, 0);
      if ((v186 & 1) == 0)
        goto LABEL_133;
    }
LABEL_147:
    swift_bridgeObjectRelease();
    *((_QWORD *)a1 + 15) = v180;
    *((_QWORD *)a1 + 16) = v181;
    goto LABEL_148;
  }
  v180 = *((_QWORD *)&v319 + 1);
  v181 = *(_QWORD *)&v320[0];
LABEL_148:
  v199 = *(_QWORD *)a1;
  v200 = *((_BYTE *)a1 + 8);
  v201 = *((_BYTE *)a1 + 9);
  v202 = *((_BYTE *)a1 + 10);
  v203 = *((_BYTE *)a1 + 11);
  v204 = *((_BYTE *)a1 + 12);
  v205 = *((_BYTE *)a1 + 13);
  v206 = *((_BYTE *)a1 + 14);
  v207 = *((_BYTE *)a1 + 15);
  v208 = *((_BYTE *)a1 + 16);
  v209 = *((_QWORD *)a1 + 11);
  v210 = *((_BYTE *)a1 + 152);
  v211 = *((_BYTE *)a1 + 153);
  v295 = *((_BYTE *)a1 + 96);
  v303 = v199;
  LOBYTE(v304) = v200;
  BYTE1(v304) = v201;
  BYTE2(v304) = v202;
  BYTE3(v304) = v203;
  BYTE4(v304) = v204;
  BYTE5(v304) = v205;
  BYTE6(v304) = v206;
  HIBYTE(v304) = v207;
  v305 = v208;
  v306 = *(__int128 *)((char *)a1 + 24);
  v307 = *(__int128 *)((char *)a1 + 40);
  v308 = *(__int128 *)((char *)a1 + 56);
  v309 = *(__int128 *)((char *)a1 + 72);
  v310 = v209;
  v311 = v295;
  v312 = *(__int128 *)((char *)a1 + 104);
  v313 = v180;
  v314 = v181;
  v315 = *(__int128 *)((char *)a1 + 136);
  v316 = v210;
  v317 = v211;
  v212 = URLComponents._URLComponents.fragment.getter(v209);
  if (!v213)
    goto LABEL_152;
  v214 = (unint64_t)v212;
  v215 = v213;
  result = swift_bridgeObjectRelease();
  v217 = HIBYTE(v215) & 0xF;
  if ((v215 & 0x2000000000000000) == 0)
    v217 = v214 & 0xFFFFFFFFFFFFLL;
  if (!v217)
  {
LABEL_152:
    v218 = URL.ParseStrategy.defaultValues.getter();
    v219 = specialized Dictionary.subscript.getter(128, v218);
    v221 = v220;
    swift_bridgeObjectRelease();
    *((_BYTE *)a1 + 8) = 0;
    *((_BYTE *)a1 + 16) = 0;
    if (v221)
    {
      if ((v221 & 0x1000000000000000) != 0)
      {
        v293 = v219;
        v294 = v221;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v243 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v244 = (unsigned __int16 *)objc_msgSend(v243, sel__fastCharacterContents);
        v245 = v243;
        if (v244)
        {
          v293 = v219;
          v294 = v221;
          StringProtocol._ephemeralString.getter();
          v246 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v247 = objc_msgSend(v246, sel_length);
          swift_unknownObjectRelease();
          v248 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v244, (uint64_t)v247, 0x40u, 0);
        }
        else
        {
          v248 = specialized Sequence.allSatisfy(_:)(v219, v221, 64);
        }
        v265 = v248;
        v224 = swift_bridgeObjectRelease();
        if ((v265 & 1) == 0)
          goto LABEL_159;
      }
      else
      {
        if ((v221 & 0x2000000000000000) != 0)
        {
          v223 = HIBYTE(v221) & 0xF;
          v293 = v219;
          v294 = v221 & 0xFFFFFFFFFFFFFFLL;
          v222 = (char *)&v293;
        }
        else if ((v219 & 0x1000000000000000) != 0)
        {
          v222 = (char *)((v221 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v223 = v219 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v222 = (char *)_StringObject.sharedUTF8.getter();
        }
        v224 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v222, v223, 0x40u, 0);
        if ((v224 & 1) == 0)
        {
LABEL_159:
          v225 = HIBYTE(v221) & 0xF;
          if ((v221 & 0x2000000000000000) == 0)
            v225 = v219 & 0xFFFFFFFFFFFFLL;
          if (v225)
          {
            v293 = v219;
            v294 = v221;
            MEMORY[0x1E0C80A78](v224);
            v272 = (uint64_t)&v293;
            LOBYTE(v273) = 64;
            swift_bridgeObjectRetain();
            v226 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v271, v219, v221);
            if (v227)
            {
              v219 = (uint64_t)v226;
              v228 = v227;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v229 = v293;
              v230 = v294;
              swift_bridgeObjectRetain();
              v219 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v229, v230, 0x40u);
              v228 = v231;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
            }
            v221 = v228;
          }
          else
          {
            swift_bridgeObjectRelease();
            v219 = 0;
            v221 = 0xE000000000000000;
          }
        }
      }
    }
    result = swift_bridgeObjectRelease();
    *((_QWORD *)a1 + 17) = v219;
    *((_QWORD *)a1 + 18) = v221;
  }
  return result;
}

void URL.ParseStrategy.parse(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v3;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49[3];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[32];
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[5];
  _OWORD v84[8];
  _OWORD v85[11];
  void *v86;

  v7 = v3[5];
  v85[6] = v3[4];
  v85[7] = v7;
  v8 = v3[7];
  v85[8] = v3[6];
  v85[9] = v8;
  v9 = v3[1];
  v85[2] = *v3;
  v85[3] = v9;
  v10 = v3[3];
  if ((a2 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a2) & 0xF;
  else
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v85[4] = v3[2];
  v85[5] = v10;
  if (v11)
  {
    do
    {
      String.subscript.getter();
      v12 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
    }
    while ((v12 & 1) == 0 && 4 * v11 != (unint64_t)String.index(after:)() >> 14);
  }
  *(_QWORD *)&v68 = String.subscript.getter();
  *((_QWORD *)&v68 + 1) = v13;
  *(_QWORD *)&v69 = v14;
  *((_QWORD *)&v69 + 1) = v15;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v16 = String.init<A>(_:)();
  v18 = v17;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v16, v18, 1, (uint64_t)v83);
  outlined init with take of URLComponents._URLComponents?((uint64_t)v83, (uint64_t)v84);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v84) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v65 = v84[6];
    v66 = v84[7];
    v67[0] = v85[0];
    *(_OWORD *)((char *)v67 + 10) = *(_OWORD *)((char *)v85 + 10);
    v61 = v84[2];
    v62 = v84[3];
    v63 = v84[4];
    v64 = v84[5];
    v59 = v84[0];
    v60 = v84[1];
    swift_bridgeObjectRelease();
    v56 = v65;
    v57 = v66;
    v58[0] = v67[0];
    *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)((char *)v67 + 10);
    v52 = v61;
    v53 = v62;
    v54 = v63;
    v55 = v64;
    v50 = v59;
    v51 = v60;
    v74 = v65;
    v75 = v66;
    *(_OWORD *)v76 = v67[0];
    *(_OWORD *)&v76[10] = *(_OWORD *)((char *)v67 + 10);
    v70 = v61;
    v71 = v62;
    v72 = v63;
    v73 = v64;
    v68 = v59;
    v69 = v60;
    if ((URL.ParseStrategy.validate(_:)(&v50) & 1) != 0)
    {
      URL.ParseStrategy.fillDefaultValues(for:)(&v68);
      v56 = v74;
      v57 = v75;
      v58[0] = *(_OWORD *)v76;
      *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)&v76[10];
      v52 = v70;
      v53 = v71;
      v54 = v72;
      v55 = v73;
      v50 = v68;
      v51 = v69;
      URLComponents.url.getter(v49);
      outlined release of URLComponents((uint64_t)&v50);
      v19 = v49[1];
      v20 = v49[2];
      if (v49[0])
      {
        *a3 = v49[0];
        a3[1] = v19;
        a3[2] = v20;
        return;
      }
    }
    else
    {
      outlined release of URLComponents?(v83);
    }
  }
  URL.init(string:)(0xD000000000000039, 0x8000000182306790, (uint64_t *)&v59);
  v21 = (void *)v59;
  if (!(_QWORD)v59)
    goto LABEL_24;
  LOBYTE(v68) = 1;
  *(_QWORD *)&v69 = 0;
  *((_QWORD *)&v68 + 1) = 0;
  BYTE8(v69) = 1;
  v70 = 0uLL;
  LOBYTE(v71) = 1;
  *(_QWORD *)&v72 = 0;
  *((_QWORD *)&v71 + 1) = 0;
  BYTE8(v72) = 1;
  v73 = 0uLL;
  LOBYTE(v74) = 0;
  *((_QWORD *)&v74 + 1) = 0;
  LOBYTE(v75) = 1;
  *(_QWORD *)v76 = 0;
  *((_QWORD *)&v75 + 1) = 0;
  v76[8] = 1;
  *(_QWORD *)&v76[16] = 0;
  *(_QWORD *)&v76[24] = 0;
  v77 = 1;
  v79 = 0;
  v78 = 0;
  v80 = 1;
  v81 = 0;
  v82 = 0;
  v50 = v59;
  *(_QWORD *)&v51 = v60;
  v22 = URL.FormatStyle.format(_:)((uint64_t *)&v50);
  v24 = v23;
  *(_QWORD *)&v68 = 0;
  *((_QWORD *)&v68 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(88);
  v25._countAndFlagsBits = 0x7020746F6E6E6143;
  v25._object = (void *)0xED00002065737261;
  String.append(_:)(v25);
  v26._countAndFlagsBits = a1;
  v26._object = (void *)a2;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000046;
  v27._object = (void *)0x80000001823067D0;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v22;
  v86 = v24;
  v28._object = v24;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 46;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_18205C850;
  *(_QWORD *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(v31 + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v31 + 40) = v32;
  *(_OWORD *)(v31 + 48) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v33 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v31 + 32, (uint64_t)&v68);
  v34 = v68;
  swift_retain();
  v35 = specialized __RawDictionaryStorage.find<A>(_:)(v34, *((uint64_t *)&v34 + 1));
  if ((v36 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v33[(v35 >> 6) + 8] |= 1 << v35;
    *(_OWORD *)(v33[6] + 16 * v35) = v34;
    outlined init with take of Any(&v69, (_OWORD *)(v33[7] + 32 * v35));
    v37 = v33[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (!v38)
    {
      v33[2] = v39;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v40 = objc_allocWithZone((Class)NSError);
      v41 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v42 = objc_msgSend(v40, sel_initWithDomain_code_userInfo_, v41, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v43 = objc_msgSend(v42, sel_domain);
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

      if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v46 == v47)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_20:
        swift_willThrow();
        outlined consume of URL?(v21);
        outlined consume of URL?(0);
        return;
      }
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v48 & 1) != 0)
        goto LABEL_20;
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

void protocol witness for ParseStrategy.parse(_:) in conformance URL.ParseStrategy(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  URL.ParseStrategy.parse(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

double static ParseStrategy<>.url.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 24) = xmmword_182068080;
  *(_QWORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 72) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = xmmword_18205FD60;
  *(_OWORD *)(a1 + 96) = xmmword_18205FD60;
  *(_OWORD *)(a1 + 112) = xmmword_18205FD60;
  return result;
}

__n128 URL.init<A>(_:strategy:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  __n128 result;
  uint64_t v12;
  __n128 v13;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  if (!v5)
  {
    result = v13;
    *(_QWORD *)a5 = v12;
    *(__n128 *)(a5 + 8) = result;
  }
  return result;
}

void URL.ParseStrategy.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  _OWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63[5];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[11];
  uint64_t v73;

  v5 = v3[5];
  v72[6] = v3[4];
  v72[7] = v5;
  v6 = v3[7];
  v72[8] = v3[6];
  v72[9] = v6;
  v7 = v3[1];
  v72[2] = *v3;
  v72[3] = v7;
  v8 = v3[3];
  v72[4] = v3[2];
  v72[5] = v8;
  if (a1 >> 14 >= a2 >> 14)
    goto LABEL_21;
  v9 = String.subscript.getter();
  v12 = v9;
  v13 = v10;
  v14 = v11;
  v15 = v10 >> 14;
  v16 = v9 >> 14;
  if (v9 >> 14 == v10 >> 14)
  {
    v73 = v11;
    v17 = v10;
  }
  else
  {
    v33 = v9 >> 14;
    Substring.subscript.getter();
    v18 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    v17 = v12;
    if ((v18 & 1) != 0)
    {
LABEL_14:
      *(_QWORD *)&v64 = Substring.subscript.getter();
      *((_QWORD *)&v64 + 1) = v24;
      *(_QWORD *)&v65 = v25;
      *((_QWORD *)&v65 + 1) = v26;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v27 = String.init<A>(_:)();
      v29 = v28;
      swift_bridgeObjectRetain();
      specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v27, v29, 1, (uint64_t)v63);
      outlined init with take of URLComponents._URLComponents?((uint64_t)v63, (uint64_t)&v64);
      if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v64) == 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v51 = v70;
        v52 = v71;
        v53[0] = v72[0];
        *(_OWORD *)((char *)v53 + 10) = *(_OWORD *)((char *)v72 + 10);
        v47 = v66;
        v48 = v67;
        v49 = v68;
        v50 = v69;
        v45 = v64;
        v46 = v65;
        swift_bridgeObjectRelease();
        v42 = v51;
        v43 = v52;
        v44[0] = v53[0];
        *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v53 + 10);
        v38 = v47;
        v39 = v48;
        v40 = v49;
        v41 = v50;
        v36 = v45;
        v37 = v46;
        v60 = v51;
        v61 = v52;
        v62[0] = v53[0];
        *(_OWORD *)((char *)v62 + 10) = *(_OWORD *)((char *)v53 + 10);
        v56 = v47;
        v57 = v48;
        v58 = v49;
        v59 = v50;
        v54 = v45;
        v55 = v46;
        if ((URL.ParseStrategy.validate(_:)(&v36) & 1) != 0)
        {
          URL.ParseStrategy.fillDefaultValues(for:)(&v54);
          v42 = v60;
          v43 = v61;
          v44[0] = v62[0];
          *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v62 + 10);
          v38 = v56;
          v39 = v57;
          v40 = v58;
          v41 = v59;
          v36 = v54;
          v37 = v55;
          URLComponents.url.getter((uint64_t *)&v34);
          outlined release of URLComponents((uint64_t)&v36);
          swift_bridgeObjectRelease();
          v30 = v34;
          if ((_QWORD)v34)
          {
            v31 = v35;
            *(_QWORD *)a3 = v17;
            *(_OWORD *)(a3 + 8) = v30;
            *(_QWORD *)(a3 + 24) = v31;
            return;
          }
          goto LABEL_21;
        }
        outlined release of URLComponents?(v63);
      }
      swift_bridgeObjectRelease();
LABEL_21:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }
    v32 = a3;
    v19 = Substring.index(after:)();
    v20 = v19 >> 14;
    v73 = v14;
    if (v19 >> 14 == v15)
    {
      v17 = v13;
    }
    else
    {
      v17 = v19;
      Substring.subscript.getter();
      v21 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
      {
LABEL_10:
        v15 = v20;
      }
      else
      {
        while (1)
        {
          v22 = Substring.index(after:)();
          v20 = v22 >> 14;
          if (v22 >> 14 == v15)
            break;
          v17 = v22;
          Substring.subscript.getter();
          v23 = Character.isWhitespace.getter();
          swift_bridgeObjectRelease();
          if ((v23 & 1) != 0)
            goto LABEL_10;
        }
        v17 = v13;
      }
    }
    a3 = v32;
    v16 = v33;
  }
  if (v15 >= v16)
    goto LABEL_14;
  __break(1u);
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance URL.ParseStrategy(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  URL.ParseStrategy.consuming(_:startingAt:in:)(a1, a2, a3);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance URL.ParseStrategy()
{
  lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.url(scheme:user:password:host:port:path:query:fragment:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  char v25;

  v9 = *a1;
  v10 = a1[1];
  v11 = *a2;
  v12 = a2[1];
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = *a5;
  v18 = *a6;
  v19 = a6[1];
  v20 = *a7;
  v21 = a7[1];
  v23 = a8[1];
  v24 = *a8;
  v25 = *((_BYTE *)a5 + 8);
  *(_QWORD *)a9 = *a1;
  *(_QWORD *)(a9 + 8) = v10;
  *(_QWORD *)(a9 + 16) = v11;
  *(_QWORD *)(a9 + 24) = v12;
  *(_QWORD *)(a9 + 32) = v13;
  *(_QWORD *)(a9 + 40) = v14;
  *(_QWORD *)(a9 + 48) = v15;
  *(_QWORD *)(a9 + 56) = v16;
  *(_QWORD *)(a9 + 64) = v17;
  *(_BYTE *)(a9 + 72) = v25;
  *(_QWORD *)(a9 + 80) = v18;
  *(_QWORD *)(a9 + 88) = v19;
  *(_QWORD *)(a9 + 96) = v20;
  *(_QWORD *)(a9 + 104) = v21;
  *(_QWORD *)(a9 + 112) = v24;
  *(_QWORD *)(a9 + 120) = v23;
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v9, v10);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v11, v12);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v13, v14);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v15, v16);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v18, v19);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v21);
  return outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v24, v23);
}

uint64_t specialized static URL.ParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v43 = *(_QWORD *)(a1 + 40);
  v44 = *(_QWORD *)(a1 + 32);
  v40 = *(_QWORD *)(a1 + 56);
  v41 = *(_QWORD *)(a1 + 48);
  v36 = *(_QWORD *)(a1 + 64);
  v37 = *(unsigned __int8 *)(a1 + 72);
  v32 = *(_QWORD *)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 104);
  v29 = *(_QWORD *)(a1 + 96);
  v24 = *(_QWORD *)(a1 + 120);
  v25 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  v42 = *(_QWORD *)(a2 + 32);
  v38 = *(_QWORD *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 48);
  v34 = *(_QWORD *)(a2 + 64);
  v35 = *(_BYTE *)(a2 + 72);
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 104);
  v27 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a2 + 112);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(*(_QWORD *)a1, v3);
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  v11 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v2, v3, v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  if ((v11 & 1) != 0)
  {
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
    v12 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v4, v5, v8, v9);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
    if ((v12 & 1) != 0)
    {
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v44, v43);
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v42, v10);
      v13 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v44, v43, v42, v10);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v42, v10);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v44, v43);
      if ((v13 & 1) != 0)
      {
        outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v41, v40);
        outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v39, v38);
        v14 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v41, v40, v39, v38);
        outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v39, v38);
        outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v41, v40);
        if ((v14 & 1) != 0)
        {
          if (v37)
          {
            if (v36)
            {
              v15 = v35;
              if (!v34)
                v15 = 0;
              if ((v15 & 1) == 0)
                return 0;
            }
            else
            {
              v17 = v35;
              if (v34)
                v17 = 0;
              if ((v17 & 1) == 0)
                return 0;
            }
          }
          else
          {
            v16 = v35;
            if (v36 != v34)
              v16 = 1;
            if ((v16 & 1) != 0)
              return 0;
          }
          outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v32);
          outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v31, v30);
          v18 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v33, v32, v31, v30);
          outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v31, v30);
          outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v33, v32);
          if ((v18 & 1) != 0)
          {
            outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v29, v28);
            outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v27, v26);
            v19 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v29, v28, v27, v26);
            outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v27, v26);
            outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v29, v28);
            if ((v19 & 1) != 0)
            {
              outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v24);
              outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v22);
              v20 = specialized static URL.ParseStrategy.ComponentParseStrategy.== infix(_:_:)(v25, v24, v23, v22);
              outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v23, v22);
              outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v25, v24);
              return v20 & 1;
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_1E0F29F28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_1E0F29F28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_1E0F29F28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy.CodingKeys, &unk_1E0F29F28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy.CodingKeys and conformance URL.ParseStrategy.CodingKeys);
  }
  return result;
}

uint64_t outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t *outlined retain of URL.ParseStrategy(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[10];
  v11 = a1[11];
  v13 = a1[13];
  v14 = a1[12];
  v15 = a1[15];
  v16 = a1[14];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  return a1;
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.OptionalCodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.RequiredCodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for URL.ParseStrategy.ComponentParseStrategy.CodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t outlined init with take of URLComponents._URLComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents._URLComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy, &type metadata for URL.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy, &type metadata for URL.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy, &type metadata for URL.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy, &type metadata for URL.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy, &type metadata for URL.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy, &type metadata for URL.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy;
  if (!lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.ParseStrategy, &type metadata for URL.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.ParseStrategy and conformance URL.ParseStrategy);
  }
  return result;
}

void base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>()
{
  JUMPOUT(0x186DA9D64);
}

unint64_t instantiation function for generic protocol witness table for URL.ParseStrategy(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  a1[2] = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  result = lazy protocol witness table accessor for type URL.ParseStrategy and conformance URL.ParseStrategy();
  a1[3] = result;
  return result;
}

unint64_t destroy for URL.ParseStrategy(_QWORD *a1)
{
  unint64_t result;

  if (a1[1] >= 2uLL)
    swift_bridgeObjectRelease();
  if (a1[3] >= 2uLL)
    swift_bridgeObjectRelease();
  if (a1[5] >= 2uLL)
    swift_bridgeObjectRelease();
  if (a1[7] >= 2uLL)
    swift_bridgeObjectRelease();
  if (a1[11] >= 2uLL)
    swift_bridgeObjectRelease();
  if (a1[13] >= 2uLL)
    swift_bridgeObjectRelease();
  result = a1[15];
  if (result >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = (_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 >= 2)
  {
    *(_QWORD *)(a1 + 16) = *v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
  }
  v7 = (_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  if (v8 >= 2)
  {
    *(_QWORD *)(a1 + 32) = *v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
  }
  v9 = (_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  if (v10 >= 2)
  {
    *(_QWORD *)(a1 + 48) = *v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = (_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  if (v12 >= 2)
  {
    *(_QWORD *)(a1 + 80) = *v11;
    *(_QWORD *)(a1 + 88) = v12;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v11;
  }
  v13 = (_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  if (v14 >= 2)
  {
    *(_QWORD *)(a1 + 96) = *v13;
    *(_QWORD *)(a1 + 104) = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
  }
  v15 = (_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  if (v16 >= 2)
  {
    *(_QWORD *)(a1 + 112) = *v15;
    *(_QWORD *)(a1 + 120) = v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v15;
  }
  return a1;
}

uint64_t assignWithCopy for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) < 2uLL)
  {
    if (v4 >= 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 < 2)
  {
    outlined destroy of String(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 2uLL)
  {
    if (v5 >= 2)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v5 < 2)
  {
    outlined destroy of String(a1 + 16);
LABEL_13:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_15:
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) < 2uLL)
  {
    if (v6 >= 2)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v6 < 2)
  {
    outlined destroy of String(a1 + 32);
LABEL_20:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  v7 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) < 2uLL)
  {
    if (v7 >= 2)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v7 < 2)
  {
    outlined destroy of String(a1 + 48);
LABEL_27:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_29;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_29:
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) < 2uLL)
  {
    if (v9 >= 2)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v9 < 2)
  {
    outlined destroy of String(a1 + 80);
LABEL_34:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_36;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_36:
  v10 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104) < 2uLL)
  {
    if (v10 >= 2)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v10 < 2)
  {
    outlined destroy of String(a1 + 96);
LABEL_41:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_43:
  v11 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120) >= 2uLL)
  {
    if (v11 >= 2)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String(a1 + 112);
    goto LABEL_48;
  }
  if (v11 < 2)
  {
LABEL_48:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    return a1;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEA968] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for URL.ParseStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 8) < 2uLL)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 2)
  {
    outlined destroy of String(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  v5 = (_OWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 24) < 2uLL)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v5;
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 < 2)
  {
    outlined destroy of String(a1 + 16);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
LABEL_11:
  v7 = (_OWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 40) < 2uLL)
  {
LABEL_14:
    *(_OWORD *)(a1 + 32) = *v7;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a2 + 40);
  if (v8 < 2)
  {
    outlined destroy of String(a1 + 32);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
LABEL_16:
  v9 = (_OWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 56) < 2uLL)
  {
LABEL_19:
    *(_OWORD *)(a1 + 48) = *v9;
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a2 + 56);
  if (v10 < 2)
  {
    outlined destroy of String(a1 + 48);
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
LABEL_21:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = (_OWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 88) < 2uLL)
  {
LABEL_24:
    *(_OWORD *)(a1 + 80) = *v11;
    goto LABEL_26;
  }
  v12 = *(_QWORD *)(a2 + 88);
  if (v12 < 2)
  {
    outlined destroy of String(a1 + 80);
    goto LABEL_24;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v11;
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
LABEL_26:
  v13 = (_OWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 104) < 2uLL)
  {
LABEL_29:
    *(_OWORD *)(a1 + 96) = *v13;
    goto LABEL_31;
  }
  v14 = *(_QWORD *)(a2 + 104);
  if (v14 < 2)
  {
    outlined destroy of String(a1 + 96);
    goto LABEL_29;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v13;
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease();
LABEL_31:
  v15 = (_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 120) >= 2uLL)
  {
    v16 = *(_QWORD *)(a2 + 120);
    if (v16 >= 2)
    {
      *(_QWORD *)(a1 + 112) = *v15;
      *(_QWORD *)(a1 + 120) = v16;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.ParseStrategy(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.ParseStrategy()
{
  return &type metadata for URL.ParseStrategy;
}

uint64_t type metadata completion function for URL.ParseStrategy.ComponentParseStrategy()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for URL.ParseStrategy.ComponentParseStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for URL.ParseStrategy.ComponentParseStrategy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithCopy for URL.ParseStrategy.ComponentParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *initializeWithTake for URL.ParseStrategy.ComponentParseStrategy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithTake for URL.ParseStrategy.ComponentParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  else
  {
    v15 = 0u;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTag for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t destructiveInjectEnumTag for URL.ParseStrategy.ComponentParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181A7E04C + 4 * byte_18206883B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181A7E080 + 4 * byte_182068836[v4]))();
}

uint64_t sub_181A7E080(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A7E088(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A7E090);
  return result;
}

uint64_t sub_181A7E09C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A7E0A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181A7E0A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A7E0B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181A7E0FC + 4 * byte_182068840[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181A7E11C + 4 * byte_182068845[v4]))();
}

_BYTE *sub_181A7E0FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181A7E11C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A7E124(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A7E12C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A7E134(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A7E13C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for URL.ParseStrategy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_181A7E194 + 4 * byte_18206884F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181A7E1C8 + 4 * byte_18206884A[v4]))();
}

uint64_t sub_181A7E1C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A7E1D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A7E1D8);
  return result;
}

uint64_t sub_181A7E1E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A7E1ECLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_181A7E1F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A7E1F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for URL.ParseStrategy.CodingKeys()
{
  return &unk_1E0F29F28;
}

void base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.RequiredCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.OptionalCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in URL.ParseStrategy.ComponentParseStrategy<A>.DefaultValueCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t outlined release of URL.FormatStyle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized Array.append(_:)(uint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v3[2] = v6 + 1;
  v3[v6 + 4] = a1;
  *v1 = v3;
  return result;
}

void specialized Sequence._copyContents(initializing:)(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];

  NSFastEnumerationIterator.init(_:)(v3, (uint64_t)&v25);
  if (!a2)
  {
    v8 = *(_OWORD *)((char *)v37 + 9);
    v9 = v36;
    a1[10] = v35;
    a1[11] = v9;
    a1[12] = v37[0];
LABEL_11:
    *(_OWORD *)((char *)a1 + 201) = v8;
    v11 = v32;
    a1[6] = v31;
    a1[7] = v11;
    v12 = v34;
    a1[8] = v33;
    a1[9] = v12;
    v13 = v28;
    a1[2] = v27;
    a1[3] = v13;
    v14 = v30;
    a1[4] = v29;
    a1[5] = v14;
    v15 = v25;
    v16 = v26;
LABEL_13:
    *a1 = v15;
    a1[1] = v16;
    return;
  }
  if (!a3)
  {
LABEL_10:
    v10 = v36;
    a1[10] = v35;
    a1[11] = v10;
    a1[12] = v37[0];
    v8 = *(_OWORD *)((char *)v37 + 9);
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    NSFastEnumerationIterator.next()((uint64_t)&v22);
    if (!v23)
    {
LABEL_12:
      outlined destroy of Any?((uint64_t)&v22);
      v17 = v36;
      a1[10] = v35;
      a1[11] = v17;
      a1[12] = v37[0];
      *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)((char *)v37 + 9);
      v18 = v32;
      a1[6] = v31;
      a1[7] = v18;
      v19 = v34;
      a1[8] = v33;
      a1[9] = v19;
      v20 = v28;
      a1[2] = v27;
      a1[3] = v20;
      v21 = v30;
      a1[4] = v29;
      a1[5] = v21;
      v15 = v25;
      v16 = v26;
      goto LABEL_13;
    }
    v7 = 0;
    while (1)
    {
      outlined init with take of Any(&v22, v24);
      outlined init with take of Any(v24, a2);
      if (a3 - 1 == v7)
        goto LABEL_10;
      a2 += 2;
      NSFastEnumerationIterator.next()((uint64_t)&v22);
      ++v7;
      if (!v23)
        goto LABEL_12;
    }
  }
  __break(1u);
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  id v9;
  uint64_t i;
  id v11;
  id v12;

  v4 = v3;
  v5 = result;
  if (!a2)
  {
    v11 = 0;
    v6 = 0;
    *(_QWORD *)result = v4;
    v7 = 1;
    *(_BYTE *)(result + 8) = 1;
    goto LABEL_14;
  }
  v6 = a3;
  v7 = a3 == 0;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = objc_msgSend(v4, sel_firstIndex);
    if (v9 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      i = 0;
LABEL_6:
      v11 = 0;
      *(_QWORD *)v5 = v4;
      *(_BYTE *)(v5 + 8) = 0;
      v7 = 1;
      v6 = i;
LABEL_14:
      *(_QWORD *)(v5 + 16) = v11;
      *(_BYTE *)(v5 + 24) = v7;
      return v6;
    }
    v11 = v9;
    *a2 = v9;
    if (v6 != 1)
    {
      for (i = 1; i != v6; a2[i++] = v12)
      {
        v12 = objc_msgSend(v4, sel_indexGreaterThanIndex_, v11);
        if (v12 == (id)0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_6;
        v11 = v12;
      }
    }
LABEL_13:
    *(_QWORD *)v5 = v4;
    *(_BYTE *)(v5 + 8) = v6 == 0;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[5];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v4 = (_OWORD *)result;
  v5 = *((_QWORD *)v3 + 17);
  v6 = *((_QWORD *)v3 + 18);
  v7 = *((_QWORD *)v3 + 19);
  v9 = v3[9];
  v10 = v3[11];
  v55 = v3[10];
  v8 = v55;
  v56 = v10;
  v57 = v3[12];
  v11 = v3[7];
  v51 = v3[6];
  v52 = v11;
  v53 = v3[8];
  v54 = v9;
  v12 = v3[3];
  v47 = v3[2];
  v48 = v12;
  v13 = v3[5];
  v49 = v3[4];
  v50 = v13;
  v14 = v3[1];
  v45 = *v3;
  v46 = v14;
  *(_QWORD *)&v58 = v5;
  *((_QWORD *)&v58 + 1) = v6;
  *(_QWORD *)&v59 = v7;
  *((_QWORD *)&v59 + 1) = v55;
  if (!a2)
  {
    v15 = 0;
    v24 = v3[11];
    *(_OWORD *)(result + 160) = v3[10];
    *(_OWORD *)(result + 176) = v24;
    *(_OWORD *)(result + 192) = v3[12];
    v25 = v3[7];
    *(_OWORD *)(result + 96) = v3[6];
    *(_OWORD *)(result + 112) = v25;
    v26 = v3[9];
    *(_OWORD *)(result + 128) = v3[8];
    *(_OWORD *)(result + 144) = v26;
    v27 = v3[3];
    *(_OWORD *)(result + 32) = v3[2];
    *(_OWORD *)(result + 48) = v27;
    v28 = v3[5];
    *(_OWORD *)(result + 64) = v3[4];
    *(_OWORD *)(result + 80) = v28;
    v29 = v3[1];
    *(_OWORD *)result = *v3;
    *(_OWORD *)(result + 16) = v29;
    *(_QWORD *)(result + 208) = v5;
    *(_QWORD *)(result + 216) = v6;
    *(_QWORD *)(result + 224) = v7;
    *(_QWORD *)(result + 232) = v8;
    return v15;
  }
  v15 = a3;
  if (!a3)
    goto LABEL_10;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v16 = a2;
    AttributedString.Runs.NSAttributesSlice.Iterator.next()(v44);
    v17 = *(_QWORD *)&v44[0];
    if (!*(_QWORD *)&v44[0])
    {
      v18 = 0;
LABEL_12:
      v38 = v58;
      v4[12] = v57;
      v4[13] = v38;
      v4[14] = v59;
      v39 = v54;
      v4[8] = v53;
      v4[9] = v39;
      v40 = v56;
      v4[10] = v55;
      v4[11] = v40;
      v41 = v50;
      v4[4] = v49;
      v4[5] = v41;
      v42 = v52;
      v4[6] = v51;
      v4[7] = v42;
      v43 = v46;
      *v4 = v45;
      v4[1] = v43;
      v37 = v47;
      v36 = v48;
      v15 = v18;
      goto LABEL_13;
    }
    v18 = 0;
    while (1)
    {
      v19 = *((_QWORD *)&v44[0] + 1);
      v20 = v44[1];
      v21 = v44[2];
      v22 = v44[3];
      v23 = v44[4];
      *(_QWORD *)v16 = v17;
      *(_QWORD *)(v16 + 8) = v19;
      *(_OWORD *)(v16 + 16) = v20;
      *(_OWORD *)(v16 + 32) = v21;
      *(_OWORD *)(v16 + 48) = v22;
      *(_OWORD *)(v16 + 64) = v23;
      if (v15 - 1 == v18)
        break;
      AttributedString.Runs.NSAttributesSlice.Iterator.next()(v44);
      v17 = *(_QWORD *)&v44[0];
      v16 += 80;
      ++v18;
      if (!*(_QWORD *)&v44[0])
        goto LABEL_12;
    }
LABEL_10:
    v30 = v58;
    v4[12] = v57;
    v4[13] = v30;
    v4[14] = v59;
    v31 = v54;
    v4[8] = v53;
    v4[9] = v31;
    v32 = v56;
    v4[10] = v55;
    v4[11] = v32;
    v33 = v50;
    v4[4] = v49;
    v4[5] = v33;
    v34 = v52;
    v4[6] = v51;
    v4[7] = v34;
    v35 = v46;
    *v4 = v45;
    v4[1] = v35;
    v37 = v47;
    v36 = v48;
LABEL_13:
    v4[2] = v37;
    v4[3] = v36;
    return v15;
  }
  __break(1u);
  return result;
}

{
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;

  v4 = v3[9];
  v5 = v3[11];
  v67 = v3[10];
  v68 = v5;
  v6 = v3[11];
  v69 = v3[12];
  v7 = v3[5];
  v8 = v3[7];
  v63 = v3[6];
  v64 = v8;
  v9 = v3[7];
  v10 = v3[9];
  v65 = v3[8];
  v66 = v10;
  v11 = v3[1];
  v12 = v3[3];
  v59 = v3[2];
  v60 = v12;
  v13 = v3[3];
  v14 = v3[5];
  v61 = v3[4];
  v62 = v14;
  v15 = v3[1];
  v57 = *v3;
  v58 = v15;
  v81 = v67;
  v82 = v6;
  v77 = v63;
  v78 = v9;
  v79 = v65;
  v80 = v4;
  v73 = v59;
  v74 = v13;
  v75 = v61;
  v76 = v7;
  v70 = *((_QWORD *)v3 + 26);
  v83 = *((_QWORD *)v3 + 24);
  v71 = v57;
  v72 = v11;
  v16 = *((_QWORD *)&v67 + 1);
  v18 = *((_QWORD *)&v6 + 1);
  v17 = v6;
  v19 = v83;
  v35 = result;
  if (!a2)
  {
LABEL_10:
    v21 = 0;
LABEL_12:
    v27 = v3[11];
    *(_OWORD *)(v35 + 160) = v3[10];
    *(_OWORD *)(v35 + 176) = v27;
    *(_OWORD *)(v35 + 192) = v3[12];
    v28 = *((_QWORD *)v3 + 26);
    v29 = v3[7];
    *(_OWORD *)(v35 + 96) = v3[6];
    *(_OWORD *)(v35 + 112) = v29;
    v30 = v3[9];
    *(_OWORD *)(v35 + 128) = v3[8];
    *(_OWORD *)(v35 + 144) = v30;
    v31 = v3[3];
    *(_OWORD *)(v35 + 32) = v3[2];
    *(_OWORD *)(v35 + 48) = v31;
    v32 = v3[5];
    *(_OWORD *)(v35 + 64) = v3[4];
    *(_OWORD *)(v35 + 80) = v32;
    v33 = v3[1];
    *(_OWORD *)v35 = *v3;
    *(_OWORD *)(v35 + 16) = v33;
    *(_QWORD *)(v35 + 208) = v28;
    *(_QWORD *)(v35 + 216) = v16;
    *(_QWORD *)(v35 + 224) = v17;
    *(_QWORD *)(v35 + 232) = v18;
    *(_QWORD *)(v35 + 240) = v19;
    return v21;
  }
  if (!a3)
  {
    v21 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v36 = *((_QWORD *)&v79 + 1) >> 10;
    if (*((_QWORD *)&v79 + 1) >> 10 != *((_QWORD *)&v67 + 1) >> 10)
    {
      v20 = a2;
      v21 = 0;
      v37 = *((_QWORD *)&v69 + 1);
      v38 = v70;
      v22 = a3 - 1;
      while (1)
      {
        v50 = v81;
        v51 = v82;
        v52 = v83;
        v46 = v77;
        v47 = v78;
        v48 = v79;
        v49 = v80;
        v42 = v73;
        v43 = v74;
        v44 = v75;
        v45 = v76;
        v40 = v71;
        v41 = v72;
        v39[0] = v16;
        v39[1] = v17;
        v39[2] = v18;
        v39[3] = v19;
        outlined retain of AttributedString.Runs((uint64_t)&v71);
        AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v39, v37, v38, &v53);
        outlined release of AttributedString.Runs((uint64_t)&v71);
        v16 = v53;
        v17 = v54;
        v18 = v55;
        v19 = v56;
        specialized AttributedString.Runs.AttributesSlice1.subscript.getter(&v40, (__int128 *)((char *)&v40 + 8), v53, v54, v55, v56);
        v23 = v44;
        v24 = v41;
        v25 = v42;
        v26 = v43;
        *(_OWORD *)v20 = v40;
        *(_OWORD *)(v20 + 16) = v24;
        *(_OWORD *)(v20 + 32) = v25;
        *(_OWORD *)(v20 + 48) = v26;
        *(_QWORD *)(v20 + 64) = v23;
        if (v22 == v21)
          break;
        ++v21;
        v20 += 72;
        if (v36 == v16 >> 10)
          goto LABEL_12;
      }
      v21 = a3;
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

{
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41[4];
  __int128 v42;
  _BYTE v43[80];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;

  v4 = v3[9];
  v5 = v3[11];
  v65 = v3[10];
  v66 = v5;
  v6 = v3[11];
  v67 = v3[12];
  v7 = v3[5];
  v8 = v3[7];
  v61 = v3[6];
  v62 = v8;
  v9 = v3[7];
  v10 = v3[9];
  v63 = v3[8];
  v64 = v10;
  v11 = v3[1];
  v12 = v3[3];
  v57 = v3[2];
  v58 = v12;
  v13 = v3[3];
  v14 = v3[5];
  v59 = v3[4];
  v60 = v14;
  v15 = v3[1];
  v55 = *v3;
  v56 = v15;
  v79 = v65;
  v80 = v6;
  v75 = v61;
  v76 = v9;
  v77 = v63;
  v78 = v4;
  v71 = v57;
  v72 = v13;
  v73 = v59;
  v74 = v7;
  v68 = *((_QWORD *)v3 + 26);
  v81 = *((_QWORD *)v3 + 24);
  v69 = v55;
  v70 = v11;
  v16 = *((_QWORD *)&v65 + 1);
  v18 = *((_QWORD *)&v6 + 1);
  v17 = v6;
  v19 = v81;
  v37 = result;
  if (!a2)
  {
LABEL_10:
    v21 = 0;
LABEL_12:
    v29 = v3[11];
    *(_OWORD *)(v37 + 160) = v3[10];
    *(_OWORD *)(v37 + 176) = v29;
    *(_OWORD *)(v37 + 192) = v3[12];
    v30 = *((_QWORD *)v3 + 26);
    v31 = v3[7];
    *(_OWORD *)(v37 + 96) = v3[6];
    *(_OWORD *)(v37 + 112) = v31;
    v32 = v3[9];
    *(_OWORD *)(v37 + 128) = v3[8];
    *(_OWORD *)(v37 + 144) = v32;
    v33 = v3[3];
    *(_OWORD *)(v37 + 32) = v3[2];
    *(_OWORD *)(v37 + 48) = v33;
    v34 = v3[5];
    *(_OWORD *)(v37 + 64) = v3[4];
    *(_OWORD *)(v37 + 80) = v34;
    v35 = v3[1];
    *(_OWORD *)v37 = *v3;
    *(_OWORD *)(v37 + 16) = v35;
    *(_QWORD *)(v37 + 208) = v30;
    *(_QWORD *)(v37 + 216) = v16;
    *(_QWORD *)(v37 + 224) = v17;
    *(_QWORD *)(v37 + 232) = v18;
    *(_QWORD *)(v37 + 240) = v19;
    return v21;
  }
  if (!a3)
  {
    v21 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v38 = *((_QWORD *)&v77 + 1) >> 10;
    if (*((_QWORD *)&v77 + 1) >> 10 != *((_QWORD *)&v65 + 1) >> 10)
    {
      v20 = a2;
      v21 = 0;
      v39 = *((_QWORD *)&v67 + 1);
      v40 = v68;
      v22 = a3 - 1;
      while (1)
      {
        v48 = v79;
        v49 = v80;
        v50 = v81;
        v44 = v75;
        v45 = v76;
        v46 = v77;
        v47 = v78;
        *(_OWORD *)&v43[16] = v71;
        *(_OWORD *)&v43[32] = v72;
        *(_OWORD *)&v43[48] = v73;
        *(_OWORD *)&v43[64] = v74;
        v42 = v69;
        *(_OWORD *)v43 = v70;
        v41[0] = v16;
        v41[1] = v17;
        v41[2] = v18;
        v41[3] = v19;
        outlined retain of AttributedString.Runs((uint64_t)&v69);
        AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v41, v39, v40, &v51);
        outlined release of AttributedString.Runs((uint64_t)&v69);
        v16 = v51;
        v17 = v52;
        v18 = v53;
        v19 = v54;
        specialized AttributedString.Runs.AttributesSlice1.subscript.getter(&v42, &v43[8], v51, v52, v53, v54);
        v23 = *(_DWORD *)v43;
        v24 = v43[4];
        v25 = *(_OWORD *)&v43[8];
        v26 = *(_OWORD *)&v43[24];
        v27 = *(_OWORD *)&v43[40];
        v28 = *(_OWORD *)&v43[56];
        *(_OWORD *)v20 = v42;
        *(_BYTE *)(v20 + 20) = v24;
        *(_DWORD *)(v20 + 16) = v23;
        *(_OWORD *)(v20 + 24) = v25;
        *(_OWORD *)(v20 + 40) = v26;
        *(_OWORD *)(v20 + 56) = v27;
        *(_OWORD *)(v20 + 72) = v28;
        if (v22 == v21)
          break;
        ++v21;
        v20 += 88;
        if (v38 == v16 >> 10)
          goto LABEL_12;
      }
      v21 = a3;
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
LABEL_37:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v12;
  }
  if (!a3)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
    goto LABEL_39;
  v10 = a2;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v25 = result;
  v11 = 0;
  v12 = 0;
  v26 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(*(_QWORD *)(a4 + 56) + 40 * v14, (uint64_t)&v28);
    *(_QWORD *)&v27 = v20;
    *((_QWORD *)&v27 + 1) = v19;
    v21 = v30;
    v34 = v30;
    v22 = v29;
    v23 = v28;
    v32 = v28;
    v33 = v29;
    v31 = v27;
    *(_OWORD *)v10 = v27;
    *(_OWORD *)(v10 + 16) = v23;
    *(_OWORD *)(v10 + 32) = v22;
    *(_QWORD *)(v10 + 48) = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      v12 = a3;
      goto LABEL_36;
    }
    v10 += 56;
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v26)
      goto LABEL_35;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v26)
        goto LABEL_35;
      v16 = *(_QWORD *)(v5 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v11 = v15 + 1;
      if (v15 + 2 >= v26)
        goto LABEL_35;
      v16 = *(_QWORD *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2;
      }
      else
      {
        v11 = v15 + 2;
        if (v15 + 3 >= v26)
          goto LABEL_35;
        v16 = *(_QWORD *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          v17 = v15 + 4;
          v11 = v15 + 3;
          if (v15 + 4 < v26)
          {
            v16 = *(_QWORD *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                v15 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_40;
                if (v15 >= v26)
                {
                  v11 = v26 - 1;
                  goto LABEL_35;
                }
                v16 = *(_QWORD *)(v5 + 8 * v15);
                ++v17;
                if (v16)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v15 = v17;
            goto LABEL_21;
          }
LABEL_35:
          v8 = 0;
LABEL_36:
          v6 = v24;
          result = v25;
          goto LABEL_37;
        }
        v15 += 3;
      }
    }
LABEL_21:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  v28 = result;
  v11 = 0;
  v12 = 0;
  v29 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = 24 * v14;
    v19 = *(_QWORD *)(a4 + 48) + 24 * v14;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    v23 = *(_QWORD *)(a4 + 56) + v18;
    v25 = *(_QWORD *)v23;
    v24 = *(_QWORD *)(v23 + 8);
    v26 = *(_BYTE *)(v23 + 16);
    *(_QWORD *)v10 = *(_QWORD *)v19;
    *(_QWORD *)(v10 + 8) = v21;
    *(_BYTE *)(v10 + 16) = v22;
    *(_QWORD *)(v10 + 24) = v25;
    *(_QWORD *)(v10 + 32) = v24;
    *(_BYTE *)(v10 + 40) = v26;
    if (v12 == v9)
    {
      outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v22);
      outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v26);
      goto LABEL_38;
    }
    v10 += 48;
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v22);
    result = (_QWORD *)outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v26);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v29)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v29)
      {
        v8 = 0;
        v11 = v15;
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (v16)
          goto LABEL_14;
        v17 = v15 + 2;
        if (v15 + 2 >= v29)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          v15 = v17;
          goto LABEL_18;
        }
        v11 = v15 + 3;
        if (v15 + 3 < v29)
        {
          v16 = *(_QWORD *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            v15 = v11;
            goto LABEL_18;
          }
          v17 = v15 + 4;
          if (v15 + 4 >= v29)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v16 = *(_QWORD *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v15 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v15 >= v29)
              {
                v8 = 0;
                v11 = v29 - 1;
                goto LABEL_37;
              }
              v16 = *(_QWORD *)(v5 + 8 * v15);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v15 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v27;
      result = v28;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *specialized Array.reserveCapacity(_:)(int64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *result;
  int64_t v5;

  v3 = *v1;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || a1 > v3[3] >> 1)
  {
    if (v3[2] <= a1)
      v5 = a1;
    else
      v5 = v3[2];
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0, v3);
    v3 = result;
  }
  *v1 = v3;
  return result;
}

void IndexPath.Storage.append(contentsOf:)()
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_181A7F9AC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)&loc_181A7F9B8 + dword_181A7FD5C[a3]))();
}

void sub_181A7F9C8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 8) = v1;
  *(_BYTE *)(v0 + 16) = 1;
}

uint64_t sub_181A7FDAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 16);
  if (v3 == 1)
  {
    v7 = *(_QWORD *)(v2 + 32);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v0 = v1;
    *(_QWORD *)(v0 + 8) = v7;
    v6 = 1;
  }
  else
  {
    if (!v3)
      return swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_18205C850;
    *(_QWORD *)(v4 + 32) = v1;
    v8 = v4;
    result = specialized Array.append<A>(contentsOf:)(v2);
    *(_QWORD *)v0 = v8;
    *(_QWORD *)(v0 + 8) = 0;
    v6 = 2;
  }
  *(_BYTE *)(v0 + 16) = v6;
  return result;
}

void IndexPath.Storage.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181A7FEF4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    __break(1u);
    JUMPOUT(0x181A7FEFCLL);
  }
  return a2;
}

void sub_181A7FF48()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A80004);
}

void IndexPath.Storage.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __asm { BR              X10 }
}

uint64_t sub_181A8006C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  if (!(v1 | v2) || v1 == 1 && v2 == 1)
    return 0;
  if (v1 || v2 != 1)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    _print_unlocked<A, B>(_:_:)();
    v4._countAndFlagsBits = 3943982;
    v4._object = (void *)0xE300000000000000;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._object = (void *)0x8000000182306880;
    v6._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v6);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181A804A4);
  }
  return v0;
}

uint64_t sub_181A805E0()
{
  unsigned __int8 v0;

  return ((uint64_t (*)(void))((char *)&loc_181A805F0 + *((int *)qword_181A80E78 + v0)))();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance IndexPath.Storage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = specialized IndexPath.Storage.init(arrayLiteral:)(a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

void IndexPath.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 3;
}

uint64_t IndexPath.init<A>(indexes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v30 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v26 - v9;
  v11 = dispatch thunk of Sequence.underestimatedCount.getter();
  v33 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
  v12 = v33;
  v28 = v5;
  v29 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  result = dispatch thunk of Sequence.makeIterator()();
  if (v11 < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v11)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      result = dispatch thunk of IteratorProtocol.next()();
      if ((v32 & 1) != 0)
        goto LABEL_17;
      v14 = v31;
      v33 = v12;
      v16 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v12 = v33;
      }
      *(_QWORD *)(v12 + 16) = v16 + 1;
      *(_QWORD *)(v12 + 8 * v16 + 32) = v14;
      if (!--v11)
        goto LABEL_10;
    }
  }
  swift_getAssociatedConformanceWitness();
LABEL_10:
  dispatch thunk of IteratorProtocol.next()();
  if ((v32 & 1) == 0)
  {
    do
    {
      v23 = v31;
      v33 = v12;
      v25 = *(_QWORD *)(v12 + 16);
      v24 = *(_QWORD *)(v12 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        v12 = v33;
      }
      *(_QWORD *)(v12 + 16) = v25 + 1;
      *(_QWORD *)(v12 + 8 * v25 + 32) = v23;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v32 != 1);
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, AssociatedTypeWitness);
  v17 = specialized IndexPath.Storage.init(arrayLiteral:)(v33);
  v19 = v18;
  v21 = v20;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, a2);
  v22 = v30;
  *v30 = v17;
  v22[1] = v19;
  *((_BYTE *)v22 + 16) = v21;
  return result;
}

void IndexPath.dropLast()()
{
  __asm { BR              X10 }
}

void sub_181A811A4()
{
  uint64_t v0;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 16) = 3;
}

void IndexPath.append(_:)()
{
  IndexPath.Storage.append(contentsOf:)();
}

Swift::Void __swiftcall IndexPath.append(_:)(Swift::Int a1)
{
  __asm { BR              X12 }
}

uint64_t sub_181A81308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_182065BD0;
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 48) = v0;
  *(_QWORD *)v1 = result;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 2;
  return result;
}

Swift::Void __swiftcall IndexPath.append(_:)(Swift::OpaquePointer a1)
{
  swift_bridgeObjectRetain();
  IndexPath.Storage.append(contentsOf:)();
}

void IndexPath.appending(_:)()
{
  __asm { BR              X12 }
}

uint64_t sub_181A81440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = v1;
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v2;
  *(_BYTE *)(v0 + 16) = 1;
  return result;
}

double IndexPath.appending(_:)@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  double result;
  __int128 v4;
  char v5;

  v4 = *v1;
  v5 = *((_BYTE *)v1 + 16);
  outlined copy of IndexPath.Storage(*(_QWORD *)v1, *((_QWORD *)v1 + 1), v5);
  IndexPath.Storage.append(contentsOf:)();
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

{
  __int128 *v1;
  double result;
  __int128 v4;
  char v5;

  v4 = *v1;
  v5 = *((_BYTE *)v1 + 16);
  outlined copy of IndexPath.Storage(*(_QWORD *)v1, *((_QWORD *)v1 + 1), v5);
  swift_bridgeObjectRetain();
  IndexPath.Storage.append(contentsOf:)();
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

void (*IndexPath.subscript.modify(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v4;

  a1[1] = a2;
  a1[2] = v2;
  IndexPath.subscript.getter();
  *a1 = v4;
  return IndexPath.subscript.modify;
}

void IndexPath.subscript.modify()
{
  IndexPath.Storage.subscript.setter();
}

void IndexPath.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;

  IndexPath.Storage.subscript.getter(a1, a2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7;
}

uint64_t key path getter for IndexPath.subscript(_:) : IndexPath@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  v7 = a2[1];
  v8 = *(_BYTE *)(a1 + 16);
  outlined copy of IndexPath.Storage(*(_QWORD *)a1, v5, v8);
  IndexPath.Storage.subscript.getter(v6, v7, v4, v5, v8);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  result = outlined consume of IndexPath.Storage(v4, v5, v8);
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = v14;
  return result;
}

void key path setter for IndexPath.subscript(_:) : IndexPath(uint64_t a1)
{
  outlined copy of IndexPath.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  IndexPath.Storage.subscript.setter();
}

void IndexPath.subscript.setter()
{
  IndexPath.Storage.subscript.setter();
}

void (*IndexPath.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  IndexPath.Storage.subscript.getter(a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  *v7 = v8;
  v7[1] = v9;
  *((_BYTE *)v7 + 16) = v10;
  return IndexPath.subscript.modify;
}

void IndexPath.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined copy of IndexPath.Storage(**a1, (*a1)[1], *((_BYTE *)*a1 + 16));
    IndexPath.Storage.subscript.setter();
    outlined consume of IndexPath.Storage(*v2, v2[1], *((_BYTE *)v2 + 16));
  }
  else
  {
    IndexPath.Storage.subscript.setter();
  }
  free(v2);
}

uint64_t IndexPath.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  return outlined copy of IndexPath.Storage(v2, v3, v4);
}

uint64_t IndexPath.startIndex.getter()
{
  return 0;
}

uint64_t IndexPath.endIndex.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)sub_181A8190C + 4 * byte_182068FC4[*(unsigned __int8 *)(v0 + 16)]))(0);
}

uint64_t sub_181A8190C()
{
  return 1;
}

uint64_t sub_181A81914()
{
  return 2;
}

uint64_t sub_181A8191C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

Swift::Int __swiftcall IndexPath.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall IndexPath.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

void IndexPath.compare(_:)()
{
  __asm { BR              X9 }
}

uint64_t sub_181A81994()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_181A819B0 + *((int *)qword_181A81D28 + v0)))();
}

uint64_t sub_181A819C0()
{
  uint64_t v0;

  if (v0)
    __asm { BR              X9 }
  return -1;
}

void sub_181A81C60()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A81D18);
}

void IndexPath.hash(into:)()
{
  __asm { BR              X12 }
}

void sub_181A81D98(uint64_t a1@<X8>)
{
  Swift::UInt v1;
  Swift::UInt v2;

  v2 = *(_QWORD *)(a1 + 8);
  Hasher._combine(_:)(2uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

void sub_181A81DCC()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt *v2;
  Swift::UInt v3;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = (Swift::UInt *)(v0 + 32);
    do
    {
      v3 = *v2++;
      Hasher._combine(_:)(v3);
      --v1;
    }
    while (v1);
  }
  JUMPOUT(0x181A81DBCLL);
}

uint64_t static IndexPath.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)sub_181A81E2C
                                                 + 4 * byte_182068FCC[*(unsigned __int8 *)(a1 + 16)]))(*(_QWORD *)a1, *a2);
}

BOOL sub_181A81E2C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return !a3 && a1 == a2;
}

double static IndexPath.+ infix(_:_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  char v5;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 16);
  outlined copy of IndexPath.Storage(*(_QWORD *)a1, *((_QWORD *)a1 + 1), v5);
  IndexPath.Storage.append(contentsOf:)();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

void static IndexPath.+= infix(_:_:)()
{
  IndexPath.Storage.append(contentsOf:)();
}

BOOL static IndexPath.< infix(_:_:)()
{
  uint64_t v0;

  IndexPath.compare(_:)();
  return v0 == -1;
}

Swift::Int IndexPath.hashValue.getter()
{
  Hasher.init(_seed:)();
  IndexPath.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IndexPath()
{
  Hasher.init(_seed:)();
  IndexPath.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for MutableCollection.subscript.setter in conformance IndexPath()
{
  IndexPath.Storage.subscript.setter();
}

{
  IndexPath.Storage.subscript.setter();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IndexPath(_QWORD *a1, uint64_t *a2))()
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  a1[1] = v2;
  a1[2] = v4;
  IndexPath.subscript.getter();
  *a1 = v5;
  return protocol witness for MutableCollection.subscript.modify in conformance IndexPath;
}

void protocol witness for MutableCollection.subscript.modify in conformance IndexPath()
{
  IndexPath.Storage.subscript.setter();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IndexPath(_QWORD *a1, uint64_t *a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = a2[1];
  v5[3] = v2;
  v5[4] = v6;
  v5[5] = v7;
  IndexPath.Storage.subscript.getter(v6, v7, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  *v5 = v8;
  v5[1] = v9;
  *((_BYTE *)v5 + 16) = v10;
  return protocol witness for MutableCollection.subscript.modify in conformance IndexPath;
}

void protocol witness for MutableCollection.subscript.modify in conformance IndexPath(uint64_t **a1, char a2)
{
  uint64_t *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined copy of IndexPath.Storage(**a1, (*a1)[1], *((_BYTE *)*a1 + 16));
    IndexPath.Storage.subscript.setter();
    outlined consume of IndexPath.Storage(*v2, v2[1], *((_BYTE *)v2 + 16));
  }
  else
  {
    IndexPath.Storage.subscript.setter();
  }
  free(v2);
}

void protocol witness for MutableCollection.partition(by:) in conformance IndexPath(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  specialized MutableCollection<>._partitionImpl(by:)();
  if (!v1)
    *a1 = v3;
}

void protocol witness for MutableCollection.swapAt(_:_:) in conformance IndexPath(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  if (*a1 != *a2)
  {
    v4 = *(_QWORD *)v2;
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_BYTE *)(v2 + 16);
    IndexPath.Storage.subscript.getter(*a1, *(_QWORD *)v2, v5, v6);
    IndexPath.Storage.subscript.getter(v3, v4, v5, v6);
    IndexPath.Storage.subscript.setter();
    IndexPath.Storage.subscript.setter();
  }
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance IndexPath@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath(a1, a2);
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance IndexPath()
{
  uint64_t v0;

  IndexPath.compare(_:)();
  return v0 == -1;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance IndexPath()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181A82338 + 4 * byte_182068FD4[*(unsigned __int8 *)(v0 + 16)]))();
}

void sub_181A82338(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void sub_181A82344(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_181A82350(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexPath(_QWORD *a1, uint64_t *a2))(_QWORD, _QWORD)
{
  uint64_t v2;
  uint64_t v4;

  IndexPath.Storage.subscript.getter(*a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  *a1 = v4;
  return destructiveProjectEnumData for PredicateCodableError;
}

void protocol witness for Collection.subscript.getter in conformance IndexPath(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  IndexPath.Storage.subscript.getter(*a1, a1[1], *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
}

void protocol witness for Collection.indices.getter in conformance IndexPath(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  __asm { BR              X10 }
}

void sub_181A82418()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = 1;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance IndexPath()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_181A82468 + 4 * byte_182068FDC[*(unsigned __int8 *)(v0 + 16)]))(1);
}

uint64_t sub_181A82468()
{
  return 0;
}

BOOL sub_181A82470()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

void protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance IndexPath(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexPath(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance IndexPath(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance IndexPath@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance IndexPath@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance IndexPath(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IndexPath@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized BidirectionalCollection.index(_:offsetBy:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance IndexPath@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IndexPath(_QWORD *a1, _QWORD *a2)
{
  return specialized BidirectionalCollection.distance(from:to:)(*a1, *a2);
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexPath@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance IndexPath()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)sub_181A825D4 + 4 * byte_182068FE0[*(unsigned __int8 *)(v0 + 16)]))(0);
}

uint64_t sub_181A825D4()
{
  return 1;
}

uint64_t sub_181A825DC()
{
  return 2;
}

uint64_t sub_181A825E4()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexPath()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2, v3);
  v5 = v4;
  outlined consume of IndexPath.Storage(v1, v2, v3);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IndexPath(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD **)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance IndexPath@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t IndexPath.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v16[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)v1;
  v10 = *(_QWORD *)(v1 + 8);
  v11 = *(_BYTE *)(v1 + 16);
  v18 = v9;
  v19 = v10;
  v20 = v11;
  v16[2] = v9;
  v16[3] = v10;
  v17 = v11;
  v12 = *MEMORY[0x1E0DEDF98];
  v13 = type metadata accessor for Mirror.DisplayStyle();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v8, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  outlined copy of IndexPath.Storage(v9, v10, v11);
  outlined copy of IndexPath.Storage(v9, v10, v11);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance IndexPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v17[0] = a2;
  v17[1] = a1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v2;
  v11 = *(_QWORD *)(v2 + 8);
  v12 = *(_BYTE *)(v2 + 16);
  v19 = v10;
  v20 = v11;
  v21 = v12;
  v17[2] = v10;
  v17[3] = v11;
  v18 = v12;
  v13 = *MEMORY[0x1E0DEDF98];
  v14 = type metadata accessor for Mirror.DisplayStyle();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v9, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEDFE8], v3);
  outlined copy of IndexPath.Storage(v10, v11, v12);
  outlined copy of IndexPath.Storage(v10, v11, v12);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance IndexPath.CodingKeys@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IndexPath.CodingKeys()
{
  return 0x73657865646E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IndexPath.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73657865646E69 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IndexPath.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IndexPath.CodingKeys@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexPath.CodingKeys()
{
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IndexPath.CodingKeys()
{
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t IndexPath.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD v22[3];
  uint64_t v23;
  _QWORD *v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IndexPath.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v9 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    v24 = a2;
    if ((v10 & 1) != 0)
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    else
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0, MEMORY[0x1E0DEE9D8]);
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
        break;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      v14 = v11[2];
      v13 = v11[3];
      if (v14 >= v13 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
      v11[2] = v14 + 1;
      v11[v14 + 4] = v12;
    }
    v15 = v11[2];
    if (v15 == 2)
    {
      v16 = (_QWORD *)v11[4];
      v17 = v11[5];
      swift_bridgeObjectRelease();
      v18 = 1;
    }
    else if (v15 == 1)
    {
      v16 = (_QWORD *)v11[4];
      swift_bridgeObjectRelease();
      v17 = 0;
      v18 = 0;
    }
    else if (v15)
    {
      v17 = 0;
      v18 = 2;
      v16 = v11;
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = 0;
      v17 = 0;
      v18 = 3;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v19 = v24;
    *v24 = v16;
    v19[1] = v17;
    *((_BYTE *)v19 + 16) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void IndexPath.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IndexPath.CodingKeys>);
  MEMORY[0x1E0C80A78](v3);
  v4 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  __asm { BR              X9 }
}

uint64_t sub_181A82E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_mutable_project_boxed_opaque_existential_1(v2 - 120, *(_QWORD *)(v2 - 96));
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
  return __swift_destroy_boxed_opaque_existential_1(v2 - 120);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IndexPath@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return IndexPath.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance IndexPath(_QWORD *a1)
{
  IndexPath.encode(to:)(a1);
}

uint64_t NSIndexPath._toCustomAnyHashable()()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = v0;
  v2 = (unint64_t)objc_msgSend(v1, sel_length);
  if (v2 == 2)
  {
    objc_msgSend(v1, sel_indexAtPosition_, 0);
    objc_msgSend(v1, sel_indexAtPosition_, 1);
    goto LABEL_7;
  }
  v3 = v2;
  if (v2 == 1)
  {
    objc_msgSend(v1, sel_indexAtPosition_, 0);

LABEL_10:
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
    return AnyHashable.init<A>(_:)();
  }
  if (!v2)
  {
    specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E0DEE9D8]);
LABEL_7:

    goto LABEL_10;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = v3;
    objc_msgSend(v1, sel_getIndexes_range_, v4 + 32, 0, v3);
    *(_QWORD *)(v4 + 16) = v3;

    goto LABEL_10;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSIndexPath()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSIndexPath._toCustomAnyHashable()();

}

unint64_t static IndexPath._getObjectiveCType()()
{
  return type metadata accessor for NSIndexPath();
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  size_t v5;
  id v6;
  _QWORD *v7;
  id v8[2];

  v2 = (uint64_t)objc_msgSend(a1, sel_length);
  result = (uint64_t)objc_msgSend(a1, sel_length);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t)objc_msgSend(a1, sel_length);
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v4 = (_QWORD *)swift_allocObject();
        v5 = _swift_stdlib_malloc_size(v4);
        v4[2] = v2;
        v4[3] = 2 * v5 - 64;
        v6 = a1;
        v7 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v2);

        if (v7 == (_QWORD *)v2)
          return (uint64_t)v4;
        __break(1u);
      }
      return MEMORY[0x1E0DEE9D8];
    }
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  _QWORD v10[4];

  v3 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < a3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(v3, a3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!a2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = (uint64_t)result;
  if (a2 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = a2;
    v8[3] = 2 * v9 - 64;
  }
  result = specialized Sequence._copySequenceContents(initializing:)(v10, (uint64_t)(v8 + 4), a2, v7, a2, a3);
  if (result == (_QWORD *)a2)
    return v8;
LABEL_14:
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_181A8337C()
{
  char v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];
  char v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 2;
  v3[3] = 2 * (v5 >> 3);
  outlined copy of IndexPath.Storage((uint64_t)v2, v1, v0);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, v3 + 4, 2, v2, v1, v0);
  outlined consume of IndexPath.Storage(v8[0], v8[1], v9);
  if (v6 != 2)
  {
    __break(1u);
    JUMPOUT(0x181A83430);
  }
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v6 = a2 - a1;
  if (a2 > a1)
  {
    v7 = 0;
    while ((unint64_t)(~a1 + a2) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v6 == ++v7)
        goto LABEL_14;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    JUMPOUT(0x181A83678);
  }
  if (a2 >= a1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = 0;
  v8 = ~a2 + a1;
  if (v8 >= (a1 ^ 0x8000000000000000))
    v8 = a1 ^ 0x8000000000000000;
  v9 = 0x8000000000000000;
  if (v8 < 0x8000000000000000)
    v9 = v8;
  do
  {
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_24;
    if ((a1 ^ 0x8000000000000000) == v9)
      goto LABEL_25;
    --v7;
  }
  while (v6 != v7);
LABEL_14:
  if (!v7)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v7 <= 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v7;
    v10[3] = 2 * (v12 >> 4);
  }
  swift_retain();
  v13 = specialized Sequence._copySequenceContents(initializing:)(&v15, v10 + 4, v7, a1, a2, a3);
  swift_release();
  if (v13 != (_QWORD *)v7)
    goto LABEL_26;
  return v10;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  _BYTE v8[264];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 72);
  v3 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }
  else
  {
    if (!v3)
      return MEMORY[0x1E0DEE9D8];
    v4 = result;
    if (v3 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.Runs.Run>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v5[2] = v3;
      v5[3] = 2 * ((uint64_t)(v6 - 32) / 88);
    }
    outlined retain of AttributedString.Runs(v4);
    v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, v5 + 4, v3);
    result = outlined release of AttributedString.Runs((uint64_t)v8);
    if (v7 == v3)
      return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[8];

  v6 = specialized Collection.count.getter(a1, a2, a3);
  if (!v6)
    return MEMORY[0x1E0DEE9D8];
  v7 = (uint64_t)v6;
  if ((uint64_t)v6 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._InternalRun>);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = v7;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 24);
  }
  swift_retain();
  v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, v8 + 4, v7, a1, a2, a3);
  result = swift_release();
  if (v10 == v7)
    return (uint64_t)v8;
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[14];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a1;
  v17 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = *(_OWORD *)(*a1 + 32);
  v19 = *(_OWORD *)(*a1 + 16);
  v20 = v10;
  v21 = *(_OWORD *)(v2 + 48);
  v22 = v17;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  swift_unknownObjectRetain();
  v11 = BigSubstring.UnicodeScalarView.distance(from:to:)();
  swift_unknownObjectRelease();
  if (!v11)
    return MEMORY[0x1E0DEE9D8];
  if (v11 <= 0)
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
    v12 = (_QWORD *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 29;
    v12[2] = v11;
    v12[3] = 2 * (v14 >> 2);
  }
  outlined retain of AttributedString.Runs((uint64_t)a1);
  v15 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v18, (uint64_t)(v12 + 4), v11);
  result = swift_release();
  if (v15 == v11)
    return (uint64_t)v12;
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int64_t v11;
  uint64_t *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[14];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a1;
  v17 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = *(_OWORD *)(*a1 + 32);
  v19 = *(_OWORD *)(*a1 + 16);
  v20 = v10;
  v21 = *(_OWORD *)(v2 + 48);
  v22 = v17;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  swift_unknownObjectRetain();
  v11 = BigSubstring.distance(from:to:)();
  swift_unknownObjectRelease();
  if (!v11)
    return MEMORY[0x1E0DEE9D8];
  if (v11 <= 0)
  {
    v12 = (uint64_t *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    v12 = (uint64_t *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    v12[2] = v11;
    v12[3] = 2 * (v14 >> 4);
  }
  outlined retain of AttributedString.Runs((uint64_t)a1);
  v15 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v18, v12 + 4, v11);
  result = swift_release();
  if (v15 == v11)
    return (uint64_t)v12;
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  size_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD v12[9];

  v4 = (unint64_t *)MEMORY[0x1E0DEE9D8];
  if (!a1 || !a2)
    return (uint64_t)v4;
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._InternalRun>);
    v4 = (unint64_t *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v4);
    v4[2] = a2;
    v4[3] = 2 * ((uint64_t)(v9 - 32) / 24);
  }
  swift_unknownObjectRetain();
  v10 = specialized Sequence._copySequenceContents(initializing:)(v12, v4 + 4, a2, a1, a2, a3, a4);
  result = swift_unknownObjectRelease();
  if (v10 == (_QWORD *)a2)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  int64_t v5;
  _QWORD *v8;
  size_t v9;
  void *v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = v8 + 4;
        if (a2 + a3 < (unint64_t)v8 + v5 + 32 && (unint64_t)v10 < a2 + a3 + v5)
          goto LABEL_17;
        memcpy(v10, (const void *)(a2 + a3), v5);
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * v9 - 64;
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[3];

  v8 = BigString.Index.init(_utf8Offset:)();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = BigString.Index.init(_utf8Offset:)();
  v16 = specialized Collection.distance(from:to:)(v8, v10, v12, v14, v15);
  if (!v16)
    return MEMORY[0x1E0DEE9D8];
  v17 = v16;
  if (v16 <= 0)
  {
    v18 = (unint64_t *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.Index>);
    v18 = (unint64_t *)swift_allocObject();
    v19 = _swift_stdlib_malloc_size(v18);
    v20 = v19 - 32;
    if (v19 < 32)
      v20 = v19 - 1;
    v18[2] = v17;
    v18[3] = 2 * (v20 >> 5);
  }
  swift_bridgeObjectRetain();
  v21 = specialized Sequence._copySequenceContents(initializing:)(v23, v18 + 4, v17, a1, a2, a3, a4);
  result = swift_bridgeObjectRelease();
  if (v21 == v17)
    return (uint64_t)v18;
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, int64_t a2)
{
  char *v4;
  size_t v5;
  char *v6;
  uint64_t result;

  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (char *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    *((_QWORD *)v4 + 2) = a2;
    *((_QWORD *)v4 + 3) = 2 * v5 - 64;
    v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE *specialized _copyCollectionToContiguousArray<A>(_:)(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char v18;

  if (!a2)
    return (_BYTE *)MEMORY[0x1E0DEE9D8];
  if (a2 > 0)
  {
    v3 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = swift_allocObject();
    v5 = _swift_stdlib_malloc_size((const void *)v4);
    *(_QWORD *)(v4 + 16) = a2;
    *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
    *(_BYTE *)(v4 + 32) = *v3;
    v6 = v4 + 32;
    v7 = a2 - 1;
    if (a2 != 1)
    {
      if ((unint64_t)a2 < 9)
      {
        v8 = 1;
        v9 = v3;
        goto LABEL_18;
      }
      if ((unint64_t)a2 >= 0x21)
      {
        v11 = 0;
        v10 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v12 = v4 + v11;
          v13 = *(_OWORD *)&v3[v11 + 17];
          *(_OWORD *)(v12 + 33) = *(_OWORD *)&v3[v11 + 1];
          *(_OWORD *)(v12 + 49) = v13;
          v11 += 32;
        }
        while (v10 != v11);
        if (v7 == v10)
          return (_BYTE *)v4;
        if ((v7 & 0x18) == 0)
        {
          v9 = &v3[v10];
          v6 += v10;
          v8 = v10 | 1;
LABEL_18:
          v15 = a2 - v8;
          v16 = (_BYTE *)(v6 + 1);
          v17 = v9 + 1;
          do
          {
            v18 = *v17++;
            *v16++ = v18;
            --v15;
          }
          while (v15);
          return (_BYTE *)v4;
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = v7 & 0xFFFFFFFFFFFFFFF8;
      v8 = v7 & 0xFFFFFFFFFFFFFFF8 | 1;
      v6 += v7 & 0xFFFFFFFFFFFFFFF8;
      v9 = &v3[v7 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        *(_QWORD *)(v4 + v10 + 33) = *(_QWORD *)&v3[v10 + 1];
        v10 += 8;
      }
      while (v14 != v10);
      if (v7 == v14)
        return (_BYTE *)v4;
      goto LABEL_18;
    }
    return (_BYTE *)v4;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, MEMORY[0x1E0DEC3C0]);
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x186DA53A8](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [_BPlistEncodingFormat.Reference] and conformance [A], &demangling cache variable for type metadata for [_BPlistEncodingFormat.Reference], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_BPlistEncodingFormat.Reference]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized static IndexPath.> infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_181A84FB8()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_181A84FD4 + dword_181A8533C[v0]))();
}

uint64_t sub_181A84FE4()
{
  uint64_t v0;

  if (v0)
    __asm { BR              X9 }
  return 0;
}

void sub_181A85274()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A8532CLL);
}

void specialized static IndexPath.>= infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_181A853B8()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_181A853D4 + dword_181A85734[v0]))();
}

uint64_t sub_181A853E4()
{
  uint64_t v0;

  if (v0)
    __asm { BR              X9 }
  return 0;
}

void sub_181A8566C()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A85724);
}

void specialized static IndexPath.<= infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_181A857B0()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_181A857CC + *((int *)qword_181A85B38 + v0)))();
}

uint64_t sub_181A857DC()
{
  uint64_t v0;

  if (v0)
    __asm { BR              X9 }
  return 1;
}

void sub_181A85A70()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181A85B28);
}

uint64_t specialized IndexPath.Storage.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == 2 || v1 == 1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRelease();
  }
  else if (v1)
  {
    return a1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_1E0F32318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_1E0F32318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_1E0F32318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys;
  if (!lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath.CodingKeys, &unk_1E0F32318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath.CodingKeys and conformance IndexPath.CodingKeys);
  }
  return result;
}

unint64_t type metadata accessor for NSIndexPath()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSIndexPath;
  if (!lazy cache variable for type metadata for NSIndexPath)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSIndexPath);
  }
  return result;
}

uint64_t specialized static IndexPath._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  char v9;
  char v10;
  uint64_t result;

  outlined consume of IndexPath?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
  v4 = (unint64_t)objc_msgSend(a1, sel_length);
  if (v4 == 2)
  {
    v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    v10 = 1;
    v8 = objc_msgSend(a1, sel_indexAtPosition_, 1);
    goto LABEL_9;
  }
  v5 = v4;
  if (v4 == 1)
  {
    v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    v8 = 0;
    v10 = 0;
    goto LABEL_9;
  }
  if (!v4)
  {
    v6 = (_QWORD *)specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    v8 = v7;
    v10 = v9;
LABEL_9:
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v10;
    return 1;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v6[2] = v5;
    objc_msgSend(a1, sel_getIndexes_range_, v6 + 4, 0, v5);
    v8 = 0;
    v6[2] = v5;
    v10 = 2;
    goto LABEL_9;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in IndexPath()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexPath and conformance IndexPath, MEMORY[0x1E0DEA220]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IndexPath()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IndexPath>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in IndexPath()
{
  return lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexPath and conformance IndexPath, MEMORY[0x1E0DEA210]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<IndexPath> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for DefaultIndices<IndexPath>);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexPath()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<IndexPath> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<IndexPath>, MEMORY[0x1E0DEC908]);
}

unint64_t instantiation function for generic protocol witness table for IndexPath(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[2] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[3] = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  result = lazy protocol witness table accessor for type IndexPath and conformance IndexPath();
  a1[4] = result;
  return result;
}

void sub_181A8619C(_QWORD *a1@<X8>)
{
  uint64_t v2;

  IndexPath.subscript.getter();
  *a1 = v2;
}

void sub_181A861E4()
{
  IndexPath.Storage.subscript.setter();
}

uint64_t sub_181A8620C()
{
  return 0;
}

uint64_t sub_181A86224()
{
  return 0;
}

uint64_t assignWithCopy for IndexPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IndexPath.Storage(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of IndexPath.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IndexPath(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of IndexPath.Storage(v4, v5, v6);
  return a1;
}

uint64_t getEnumTag for IndexPath.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for IndexPath.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for IndexPath.Storage()
{
  return &unk_1E0F323A8;
}

uint64_t storeEnumTagSinglePayload for IndexPath.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181A86354 + 4 * byte_182068FF4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181A86374 + 4 * byte_182068FF9[v4]))();
}

_BYTE *sub_181A86354(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181A86374(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A8637C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A86384(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A8638C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A86394(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for IndexPath.CodingKeys()
{
  return &unk_1E0F32318;
}

uint64_t outlined retain of AttributedString.Runs.NSAttributesSlice(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t Locale.Language.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[4];
  v12 = *v0;
  v13 = v0[5];
  v4 = v0[9];
  v11 = v0[8];
  if (v1)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v2, v1);
    outlined copy of Locale.LanguageCode?(v3, v13);
    v5 = v11;
    outlined copy of Locale.LanguageCode?(v11, v4);
    outlined copy of Locale.LanguageCode?(v2, v1);
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    v6 = v13;
    if (v13)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    v8 = v1;
    v7 = v3;
    v9 = v4;
    if (v4)
      goto LABEL_4;
LABEL_7:
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  outlined copy of Locale.LanguageCode?(v2, 0);
  outlined copy of Locale.LanguageCode?(v3, v13);
  v5 = v11;
  outlined copy of Locale.LanguageCode?(v11, v4);
  v6 = v13;
  if (!v13)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v7 = v3;
  outlined consume of Locale.LanguageCode?(v3, v6);
  v8 = v1;
  v9 = v4;
  if (!v4)
    goto LABEL_7;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v5, v9);
LABEL_8:
  outlined consume of Locale.LanguageCode?(v12, v8);
  outlined consume of Locale.LanguageCode?(v7, v6);
  return outlined consume of Locale.LanguageCode?(v5, v9);
}

__n128 Locale.Language.Components.init(languageCode:script:region:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  v5 = a2[1];
  a4[2] = *a2;
  a4[3] = v5;
  result = *(__n128 *)a3;
  v7 = *(_OWORD *)(a3 + 16);
  a4[4] = *(_OWORD *)a3;
  a4[5] = v7;
  return result;
}

__n128 Locale.Language.init(components:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  result = *(__n128 *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v5;
  return result;
}

uint64_t Locale.Language.Components.languageCode.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.languageCode.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(*v1, v1[1]);
  result = v5;
  *(__n128 *)v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.languageCode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Language.Components.script.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.script.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[4], v1[5]);
  result = v5;
  *((__n128 *)v1 + 2) = v5;
  v1[6] = v2;
  v1[7] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.script.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Language.Components.region.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  v5 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Language.Components.region.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[8], v1[9]);
  result = v5;
  *((__n128 *)v1 + 4) = v5;
  v1[10] = v2;
  v1[11] = v3;
  return result;
}

uint64_t (*Locale.Language.Components.region.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Language.Components.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[1];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[9];
  v6 = v0[8];
  if (v1)
  {
    v5 = *v0;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v5, v1);
    if (v3)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v2, v3);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v6, v4);
    return;
  }
LABEL_7:
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Language.Components.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x747069726373;
  if (*v0 != 1)
    v1 = 0x6E6F69676572;
  if (*v0)
    return v1;
  else
    return 0x65676175676E616CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Language.Components.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Locale.Language.Components.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Language.Components.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Language.Components.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Language.Components.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Language.Components.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *v1;
  v9 = *((_QWORD *)v1 + 2);
  v8 = *((_QWORD *)v1 + 3);
  v10 = *((_QWORD *)v1 + 4);
  v29 = *((_QWORD *)v1 + 5);
  v30 = v10;
  v11 = *((_QWORD *)v1 + 6);
  v27 = *((_QWORD *)v1 + 7);
  v28 = v11;
  v12 = *((_QWORD *)v1 + 8);
  v25 = *((_QWORD *)v1 + 9);
  v26 = v12;
  v13 = *((_QWORD *)v1 + 10);
  v23 = *((_QWORD *)v1 + 11);
  v24 = v13;
  v14 = a1[3];
  v15 = a1;
  v17 = v16;
  __swift_project_boxed_opaque_existential_1(v15, v14);
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v32 = v31;
  v33 = v9;
  v34 = v8;
  v35 = 0;
  lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v19 = v23;
    v18 = v24;
    v21 = v25;
    v20 = v26;
    *(_QWORD *)&v32 = v30;
    *((_QWORD *)&v32 + 1) = v29;
    v33 = v28;
    v34 = v27;
    v35 = 1;
    lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)&v32 = v20;
    *((_QWORD *)&v32 + 1) = v21;
    v33 = v18;
    v34 = v19;
    v35 = 2;
    lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v17);
}

Swift::Int Locale.Language.Components.hashValue.getter()
{
  Hasher.init(_seed:)();
  Locale.Language.Components.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Locale.Language.Components.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Language.Components.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v46 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Locale.LanguageCode?(0, 0);
    outlined consume of Locale.LanguageCode?(0, 0);
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v51 = 0;
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10 = v47;
    v11 = v48;
    v51 = 1;
    v44 = v50;
    v45 = v49;
    outlined copy of Locale.LanguageCode?(v47, v48);
    lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v40 = a2;
    v42 = v10;
    v43 = v11;
    v51 = 2;
    v12 = v47;
    v13 = v48;
    v14 = v49;
    v46 = v50;
    outlined copy of Locale.LanguageCode?(v47, v48);
    lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v47;
    v39 = v49;
    v41 = v50;
    v16 = v48;
    outlined copy of Locale.LanguageCode?(v47, v48);
    outlined consume of Locale.LanguageCode?(0, 0);
    v17 = v44;
    outlined copy of Locale.LanguageCode?(v42, v43);
    v18 = v12;
    v19 = v12;
    v34 = v12;
    v37 = v13;
    v38 = v14;
    v20 = v46;
    outlined copy of Locale.LanguageCode?(v19, v13);
    v35 = v16;
    v36 = v15;
    outlined copy of Locale.LanguageCode?(v15, v16);
    outlined consume of Locale.LanguageCode?(v15, v16);
    v22 = v37;
    v21 = v38;
    outlined consume of Locale.LanguageCode?(v18, v37);
    v24 = v42;
    v23 = v43;
    v25 = v45;
    outlined consume of Locale.LanguageCode?(v42, v43);
    v26 = v40;
    v27 = v41;
    *v40 = v24;
    v26[1] = v23;
    v26[2] = v25;
    v26[3] = v17;
    v28 = v34;
    v26[4] = v34;
    v26[5] = v22;
    v26[6] = v21;
    v26[7] = v20;
    v30 = v35;
    v29 = v36;
    v26[8] = v36;
    v26[9] = v30;
    v26[10] = v39;
    v26[11] = v27;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of Locale.LanguageCode?(v24, v43);
    outlined consume of Locale.LanguageCode?(v28, v37);
    v31 = v29;
    v32 = v30;
  }
  return outlined consume of Locale.LanguageCode?(v31, v32);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Language.Components()
{
  Hasher.init(_seed:)();
  Locale.Language.Components.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Language.Components()
{
  Hasher.init(_seed:)();
  Locale.Language.Components.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Language.Components@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Language.Components.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Language.Components(_QWORD *a1)
{
  return Locale.Language.Components.encode(to:)(a1);
}

uint64_t Locale.Language.components.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = v1[9];
  v13 = v1[10];
  v12 = v1[11];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v6, v7);
  return outlined copy of Locale.LanguageCode?(v10, v11);
}

__n128 Locale.Language.components.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v12 = a1[1];
  v13 = *a1;
  v10 = a1[3];
  v11 = a1[2];
  v9 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  v8 = *((_QWORD *)a1 + 11);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  outlined consume of Locale.LanguageCode?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  outlined consume of Locale.LanguageCode?(v3, v4);
  outlined consume of Locale.LanguageCode?(v5, v6);
  *(_OWORD *)v1 = v13;
  *(_OWORD *)(v1 + 16) = v12;
  *(_OWORD *)(v1 + 32) = v11;
  *(_OWORD *)(v1 + 48) = v10;
  result = v9;
  *(__n128 *)(v1 + 64) = v9;
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v8;
  return result;
}

uint64_t (*Locale.Language.components.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Locale.Language.init(languageCode:script:region:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  v5 = a2[1];
  a4[2] = *a2;
  a4[3] = v5;
  result = *(__n128 *)a3;
  v7 = *(_OWORD *)(a3 + 16);
  a4[4] = *(_OWORD *)a3;
  a4[5] = v7;
  return result;
}

uint64_t static Locale.Language.systemLanguages.getter()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int Language;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int Script;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int Country;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _BYTE v37[272];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[32];
  _BYTE v51[32];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v0 = objc_msgSend((id)objc_opt_self(), sel_systemLanguages);
  if (!v0)
    __break(1u);
  v1 = v0;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v1, sel_copy);
    v35 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v3 = specialized _arrayForceCast<A, B>(_:)(v35);

    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
      goto LABEL_6;
LABEL_30:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v3 = v2;

  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_30;
LABEL_6:
  v49 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v38 = v3;
  v5 = v3 + 32;
  v39 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v45 = v5;
    outlined init with copy of Any(v5, (uint64_t)v51);
    outlined init with copy of Any((uint64_t)v51, (uint64_t)v50);
    v6 = swift_dynamicCast();
    MEMORY[0x1E0C80A78](v6);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    Language = uloc_getLanguage();
    v8 = swift_release();
    v9 = 0;
    v46 = v4;
    v10 = 0;
    if ((int)v47 <= 0 && Language > 0)
    {
      v37[Language] = 0;
      v8 = MEMORY[0x186DA4658](v37);
      v9 = v8;
      v10 = v11;
    }
    MEMORY[0x1E0C80A78](v8);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    Script = uloc_getScript();
    v13 = swift_release();
    v14 = 0;
    v15 = 0;
    if ((int)v47 <= 0 && Script > 0)
    {
      v37[Script] = 0;
      v13 = MEMORY[0x186DA4658](v37);
      v14 = v13;
      v15 = v16;
    }
    MEMORY[0x1E0C80A78](v13);
    LODWORD(v47) = 0;
    String.utf8CString.getter();
    Country = uloc_getCountry();
    swift_release();
    v18 = 0;
    v19 = 0;
    if ((int)v47 <= 0 && Country > 0)
    {
      v37[Country] = 0;
      v18 = MEMORY[0x186DA4658](v37);
      v19 = v20;
    }
    swift_bridgeObjectRelease();
    if (v10)
    {
      v21 = String.lowercased()();
      object = v21._object;
      countAndFlagsBits = v21._countAndFlagsBits;
      if (v15)
        goto LABEL_18;
    }
    else
    {
      v9 = 0;
      object = 0;
      countAndFlagsBits = 0;
      if (v15)
      {
LABEL_18:
        v47 = v14;
        v48 = v15;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        v22 = String._capitalized()();
        v41 = v22._object;
        v42 = v22._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = v14;
        if (v19)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    v41 = 0;
    v42 = 0;
    v23 = 0;
    if (v19)
    {
LABEL_19:
      v24 = String.uppercased()();
      v40 = v24._countAndFlagsBits;
      v25 = v24._object;
      goto LABEL_23;
    }
LABEL_22:
    v18 = 0;
    v40 = 0;
    v25 = 0;
LABEL_23:
    v26 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    v27 = v49;
    v28 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
      v27 = v49;
    }
    v30 = *(_QWORD *)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      v27 = v49;
    }
    *(_QWORD *)(v27 + 16) = v30 + 1;
    v31 = (_QWORD *)(v27 + 96 * v30);
    v31[4] = v28;
    v31[5] = v26;
    v32 = v45;
    v33 = object;
    v31[6] = countAndFlagsBits;
    v31[7] = v33;
    v31[8] = v23;
    v31[9] = v15;
    v34 = v41;
    v31[10] = v42;
    v31[11] = v34;
    v31[12] = v18;
    v31[13] = v19;
    v5 = v32 + 32;
    v31[14] = v40;
    v31[15] = v25;
    v4 = v46 - 1;
  }
  while (v46 != 1);
  swift_bridgeObjectRelease();
  return v27;
}

BOOL static Locale.Language.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[6];

  v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  v3 = a1[3];
  v10[2] = a1[2];
  v10[3] = v3;
  v4 = a1[5];
  v10[4] = a1[4];
  v10[5] = v4;
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  v6 = a2[3];
  v9[2] = a2[2];
  v9[3] = v6;
  v7 = a2[5];
  v9[4] = a2[4];
  v9[5] = v7;
  return specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v10, (uint64_t *)v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Language.CodingKeys()
{
  return 0x6E656E6F706D6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Language.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Language.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Language.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Locale.Language.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Language.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v15 = v1[1];
  v16 = v7;
  v8 = v1[2];
  v13 = v1[3];
  v14 = v8;
  v12 = v1[4];
  v10 = *((_QWORD *)v1 + 10);
  v9 = *((_QWORD *)v1 + 11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = v16;
  v18 = v15;
  v19 = v14;
  v20 = v13;
  v21 = v12;
  v22 = v10;
  v23 = v9;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Locale.Language.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[5];
  v4 = v0[9];
  v7 = v0[8];
  v6 = v0[4];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    if (v3)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4)
      goto LABEL_4;
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v6, v3);
  if (!v4)
    goto LABEL_7;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v7, v4);
  return Hasher._finalize()();
}

uint64_t Locale.Language.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[6];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Language.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v15[1];
    v10 = v15[2];
    v11 = v15[3];
    v12 = v15[4];
    v13 = v15[5];
    *a2 = v15[0];
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
    a2[4] = v12;
    a2[5] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance Locale.Language()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[1];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[9];
  v6 = v0[8];
  if (v1)
  {
    v5 = *v0;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v5, v1);
    if (v3)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v2, v3);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v6, v4);
    return;
  }
LABEL_7:
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Language()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[5];
  v4 = v0[9];
  v7 = v0[8];
  v6 = v0[4];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v2, v1);
    if (v3)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4)
      goto LABEL_4;
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v6, v3);
  if (!v4)
    goto LABEL_7;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of Locale.LanguageCode?(v7, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Language@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Locale.Language.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Language(_QWORD *a1)
{
  return Locale.Language.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Locale.Language(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[6];

  v2 = a1[1];
  v10[0] = *a1;
  v10[1] = v2;
  v3 = a1[3];
  v10[2] = a1[2];
  v10[3] = v3;
  v4 = a1[5];
  v10[4] = a1[4];
  v10[5] = v4;
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  v6 = a2[3];
  v9[2] = a2[2];
  v9[3] = v6;
  v7 = a2[5];
  v9[4] = a2[4];
  v9[5] = v7;
  return specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v10, (uint64_t *)v9);
}

BOOL specialized static Locale.Language.Components.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _BOOL8 result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[5];
  v6 = a1[6];
  v5 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v10 = a1[10];
  v9 = a1[11];
  v12 = *a2;
  v11 = a2[1];
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v17 = a2[8];
  v18 = a2[9];
  v19 = a2[10];
  v20 = a2[11];
  if (!v3)
  {
    v56 = a1[4];
    if (!v11)
      goto LABEL_8;
LABEL_15:
    outlined copy of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v2, v3);
    v42 = v12;
    v43 = v11;
    goto LABEL_29;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  v56 = a1[4];
  if (a1[2] == a2[2] && a1[3] == a2[3])
    goto LABEL_8;
  v54 = a2[10];
  v55 = a1[10];
  v52 = a2[6];
  v53 = a1[11];
  v51 = a2[11];
  v21 = a1[8];
  v22 = a1[9];
  v23 = a2[8];
  v24 = a2[9];
  v25 = a1[7];
  v26 = a1[6];
  v27 = a2[7];
  v28 = a2[4];
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v13 = v28;
  v20 = v51;
  v15 = v52;
  v16 = v27;
  v6 = v26;
  v5 = v25;
  v18 = v24;
  v17 = v23;
  v8 = v22;
  v7 = v21;
  v19 = v54;
  v10 = v55;
  v9 = v53;
  v30 = v29;
  result = 0;
  if ((v30 & 1) != 0)
  {
LABEL_8:
    if (v4)
    {
      if (v14)
      {
        if (v6 != v15 || v5 != v16)
        {
          v32 = v10;
          v33 = v19;
          v34 = v9;
          v35 = v20;
          v36 = v7;
          v37 = v8;
          v38 = v17;
          v39 = v18;
          v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v18 = v39;
          v17 = v38;
          v8 = v37;
          v7 = v36;
          v19 = v33;
          v20 = v35;
          v10 = v32;
          v9 = v34;
          v41 = v40;
          result = 0;
          if ((v41 & 1) == 0)
            return result;
        }
        goto LABEL_17;
      }
      v44 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = v44;
    }
    else if (!v14)
    {
LABEL_17:
      if (v8)
      {
        if (v18)
          return v10 == v19 && v9 == v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
        v47 = v7;
        v46 = v8;
        v48 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = 0;
        v17 = v48;
      }
      else
      {
        v46 = 0;
        v47 = v7;
        if (!v18)
          return 1;
      }
      v49 = v17;
      v50 = v18;
      outlined copy of Locale.LanguageCode?(v17, v18);
      outlined consume of Locale.LanguageCode?(v47, v46);
      v42 = v49;
      v43 = v50;
LABEL_29:
      outlined consume of Locale.LanguageCode?(v42, v43);
      return 0;
    }
    v45 = v13;
    outlined copy of Locale.LanguageCode?(v13, v14);
    outlined consume of Locale.LanguageCode?(v56, v4);
    v42 = v45;
    v43 = v14;
    goto LABEL_29;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.Components.CodingKeys, &unk_1E0F2FF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.Components.CodingKeys, &unk_1E0F2FF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.Components.CodingKeys, &unk_1E0F2FF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.Components.CodingKeys, &unk_1E0F2FF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components.CodingKeys and conformance Locale.Language.Components.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode, &type metadata for Locale.LanguageCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode, &type metadata for Locale.LanguageCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode, &type metadata for Locale.LanguageCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode, &type metadata for Locale.LanguageCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.LanguageCode, &type metadata for Locale.LanguageCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Script and conformance Locale.Script()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script;
  if (!lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Script, &type metadata for Locale.Script);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script and conformance Locale.Script);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_1E0F2FF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_1E0F2FF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_1E0F2FF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.CodingKeys, &unk_1E0F2FF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.CodingKeys and conformance Locale.Language.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.Components, &type metadata for Locale.Language.Components);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.Components, &type metadata for Locale.Language.Components);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components;
  if (!lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language.Components, &type metadata for Locale.Language.Components);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language.Components and conformance Locale.Language.Components);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Language and conformance Locale.Language()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language;
  if (!lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Language, &type metadata for Locale.Language);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Language and conformance Locale.Language);
  }
  return result;
}

_QWORD *assignWithCopy for Locale.Language(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode((uint64_t)a1);
      v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
  }
  v7 = a1 + 4;
  v8 = a2 + 4;
  v9 = a2[5];
  if (a1[5])
  {
    if (v9)
    {
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script((uint64_t)(a1 + 4));
      v10 = *((_OWORD *)a2 + 3);
      *v7 = *v8;
      *((_OWORD *)a1 + 3) = v10;
    }
  }
  else if (v9)
  {
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *((_OWORD *)a2 + 3);
    *v7 = *v8;
    *((_OWORD *)a1 + 3) = v11;
  }
  v12 = a1 + 8;
  v13 = a2 + 8;
  v14 = a2[9];
  if (a1[9])
  {
    if (v14)
    {
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region((uint64_t)(a1 + 8));
      v15 = *((_OWORD *)a2 + 5);
      *v12 = *v13;
      *((_OWORD *)a1 + 5) = v15;
    }
  }
  else if (v14)
  {
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *((_OWORD *)a2 + 5);
    *v12 = *v13;
    *((_OWORD *)a1 + 5) = v16;
  }
  return a1;
}

uint64_t assignWithTake for Locale.Language(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Locale.Script(a1 + 32);
  }
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (!*(_QWORD *)(a1 + 72))
  {
LABEL_15:
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    return a1;
  }
  v10 = *(_QWORD *)(a2 + 72);
  if (!v10)
  {
    outlined destroy of Locale.Region(a1 + 64);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Locale.Language.Components()
{
  return &type metadata for Locale.Language.Components;
}

uint64_t storeEnumTagSinglePayload for Locale.Language.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181A88BE0 + 4 * byte_18206963C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181A88C00 + 4 * byte_182069641[v4]))();
}

_BYTE *sub_181A88BE0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181A88C00(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A88C08(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A88C10(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A88C18(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A88C20(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Locale.Language.CodingKeys()
{
  return &unk_1E0F2FF08;
}

uint64_t storeEnumTagSinglePayload for Locale.Language.Components.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181A88C88 + 4 * byte_18206964B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181A88CBC + 4 * byte_182069646[v4]))();
}

uint64_t sub_181A88CBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A88CC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A88CCCLL);
  return result;
}

uint64_t sub_181A88CD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A88CE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181A88CE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A88CEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Locale.Language.Components.CodingKeys()
{
  return &unk_1E0F2FF98;
}

uint64_t specialized Locale.Language.Components.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65676175676E616CLL && a2 == 0xEC00000065646F43;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747069726373 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileManager.replaceItemAtURL(originalItemURL:withItemAtURL:backupItemName:options:)(NSURL_optional *__return_ptr retstr, NSURL *originalItemURL, NSURL *withItemAtURL, Swift::String_optional backupItemName, NSFileManagerItemReplacementOptions options)
{
  void *object;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15[5];

  object = backupItemName.value._object;
  URL.init(reference:)(originalItemURL, &v14);
  v8 = v14;
  URL.init(reference:)(withItemAtURL, &v13);
  v9 = v13;
  v10 = v15[4];
  NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(&v14, &v13, (uint64_t)object, options, (uint64_t)v15);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v10)
  {
    v11 = v15[0];
    if (v15[0])
    {
      v12 = v15[0];
      outlined consume of URL?(v11);
    }
  }
}

void NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(void **a1@<X0>, void **a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void *v5;
  void *v6;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  unsigned int v14;
  void *v15;
  id v16;
  id v17;
  __int128 v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  __int128 v24;
  id v25;
  void *v26;
  __int128 v27;
  uint64_t v28;

  v6 = v5;
  v28 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *a2;
  if (a3)
    v11 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v11 = 0;
  v25 = 0;
  v26 = 0;
  v12 = v9;
  v13 = v10;
  v14 = objc_msgSend(v6, sel__replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_, v12, v13, v11, a4, &v26, &v25);

  v16 = v25;
  v15 = v26;
  if (v14)
  {
    if (v26)
    {
      URL.init(reference:)(v26, &v26);
      v15 = v26;
      v24 = v27;
      v17 = v16;
      v18 = v24;
    }
    else
    {
      v20 = v25;
      v18 = 0uLL;
    }
    *(_QWORD *)a5 = v15;
    *(_OWORD *)(a5 + 8) = v18;
  }
  else
  {
    if (v25)
    {
      v25;
      v19 = v15;
    }
    else
    {
      v21 = one-time initialization token for _nilObjCError;
      v22 = v26;
      if (v21 != -1)
        swift_once();
      v23 = (id)_nilObjCError;
    }
    swift_willThrow();

  }
}

id NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  id v14;

  v7 = *(void **)a2;
  v12 = *(void **)a1;
  v13 = *(_OWORD *)(a1 + 8);
  v10 = v7;
  v11 = *(_OWORD *)(a2 + 8);
  NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(&v12, &v10, a4, a5, (uint64_t)&v14);
  if (!v6)
  {
    v5 = v14;
    if (v14)
    {
      v8 = v14;
      outlined consume of URL?(v5);
    }
  }
  return v5;
}

uint64_t closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  char v5;
  uint64_t v7;
  __int128 v8;

  if (a3)
  {
    v7 = *a1;
    v8 = *(_OWORD *)(a1 + 1);
    swift_retain();
    v5 = a3(&v7, a2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)a3);
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

uint64_t sub_181A893AC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ssize_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ssize_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  ssize_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  ssize_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  void *v67;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  _QWORD *v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  unint64_t v106;
  int64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  _QWORD *v123;
  int64_t v124;
  unint64_t v125;
  int64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  _QWORD *v142;
  unint64_t v143;
  int64_t v144;
  uint64_t result;
  _BYTE v146[1008];
  _DWORD v147[6];
  unint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  char name[16];
  uint64_t v167;

  v2 = a2;
  v167 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DEE9E0];
  v165 = MEMORY[0x1E0DEE9E0];
  v162 = specialized Array.count.getter(a2);
  if (!v162)
    return v4;
  v161 = v2 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v155 = 0;
  v156 = xmmword_182068790;
  v154 = MEMORY[0x1E0DEE9C0] + 8;
  v158 = v2;
  v159 = a1;
  while (1)
  {
    v6 = specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v5, 1, v2);
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_183:
      __break(1u);
      goto LABEL_184;
    }
    v8 = (uint64_t *)(v161 + 16 * v5);
    v10 = *v8;
    v9 = v8[1];
    MEMORY[0x1E0C80A78](v6);
    v147[4] = a1;
    v148 = &v165;
    v149 = v10;
    v150 = v9;
    if ((v9 & 0x1000000000000000) != 0)
      goto LABEL_69;
    if ((v9 & 0x2000000000000000) == 0)
      break;
    *(_QWORD *)name = v10;
    *(_QWORD *)&name[8] = v9 & 0xFFFFFFFFFFFFFFLL;
    v16 = swift_bridgeObjectRetain();
    MEMORY[0x1E0C80A78](v16);
    v17 = fgetxattr(a1, name, v146, 0x3E8uLL, 0, 0);
    if (v17 == -1)
    {
      if (MEMORY[0x186DA4118]() != 34)
        goto LABEL_56;
      v23 = fgetxattr(a1, name, 0, 0, 0, 0);
      v24 = malloc(v23);
      if (!v24)
        goto LABEL_191;
      v25 = v24;
      if (fgetxattr(a1, name, v24, v23, 0, 0) == v23)
      {
        v163 = &v151;
        v160 = v147;
        if (v23)
        {
          type metadata accessor for __DataStorage();
          v26 = swift_allocObject();
          if (v23 > 0x3FFFFFFFFFFFFFFELL)
          {
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }
          v27 = (_QWORD *)v26;
          *(_QWORD *)(v26 + 32) = v23;
          *(_QWORD *)(v26 + 40) = 0;
          *(_BYTE *)(v26 + 64) = 0;
          *(_QWORD *)(v26 + 16) = v25;
          *(_QWORD *)(v26 + 24) = v23;
          *(_QWORD *)(v26 + 48) = closure #2 in Data.Deallocator._deallocator.getter;
          *(_QWORD *)(v26 + 56) = 0;
          swift_bridgeObjectRetain();
          v28 = specialized Data._Representation.init(_:count:)(v27, v23);
          v157 = v29;
        }
        else
        {
          swift_bridgeObjectRetain();
          free(v25);
          v28 = 0;
          v157 = 0xC000000000000000;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v69 = v165;
        v164 = v165;
        v165 = 0x8000000000000000;
        v71 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
        v72 = *(_QWORD *)(v69 + 16);
        v73 = (v70 & 1) == 0;
        v74 = v72 + v73;
        if (!__OFADD__(v72, v73))
        {
          v75 = v70;
          if (*(_QWORD *)(v69 + 24) < v74)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v74, isUniquelyReferenced_nonNull_native);
            v76 = v164;
            v77 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
            if ((v75 & 1) != (v78 & 1))
              goto LABEL_197;
            v71 = v77;
            if ((v75 & 1) == 0)
              goto LABEL_66;
            goto LABEL_63;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v76 = v69;
            if ((v70 & 1) == 0)
              goto LABEL_66;
            goto LABEL_63;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
          v127 = static _DictionaryStorage.copy(original:)();
          v76 = v127;
          if (!*(_QWORD *)(v69 + 16))
            goto LABEL_176;
          v128 = (void *)(v127 + 64);
          v129 = (unint64_t)((1 << *(_BYTE *)(v76 + 32)) + 63) >> 6;
          if (v76 != v69 || (unint64_t)v128 >= v69 + 64 + 8 * v129)
            memmove(v128, (const void *)(v69 + 64), 8 * v129);
          v151 = v69 + 64;
          v130 = 0;
          *(_QWORD *)(v76 + 16) = *(_QWORD *)(v69 + 16);
          v131 = 1 << *(_BYTE *)(v69 + 32);
          if (v131 < 64)
            v132 = ~(-1 << v131);
          else
            v132 = -1;
          v133 = v132 & *(_QWORD *)(v69 + 64);
          v152 = (unint64_t)(v131 + 63) >> 6;
          while (1)
          {
            if (v133)
            {
              v134 = __clz(__rbit64(v133));
              v133 &= v133 - 1;
              v135 = v134 | (v130 << 6);
            }
            else
            {
              v52 = __OFADD__(v130++, 1);
              if (v52)
                goto LABEL_193;
              if (v130 >= v152)
                goto LABEL_175;
              v143 = *(_QWORD *)(v151 + 8 * v130);
              if (!v143)
              {
                v144 = v130 + 1;
                if (v130 + 1 >= v152)
                  goto LABEL_175;
                v143 = *(_QWORD *)(v151 + 8 * v144);
                if (!v143)
                {
                  v144 = v130 + 2;
                  if (v130 + 2 >= v152)
                    goto LABEL_175;
                  v143 = *(_QWORD *)(v151 + 8 * v144);
                  if (!v143)
                  {
                    v144 = v130 + 3;
                    if (v130 + 3 >= v152)
                      goto LABEL_175;
                    v143 = *(_QWORD *)(v151 + 8 * v144);
                    if (!v143)
                    {
                      v144 = v130 + 4;
                      if (v130 + 4 >= v152)
                        goto LABEL_175;
                      v143 = *(_QWORD *)(v151 + 8 * v144);
                      if (!v143)
                      {
                        v144 = v130 + 5;
                        if (v130 + 5 >= v152)
                          goto LABEL_175;
                        v143 = *(_QWORD *)(v151 + 8 * v144);
                        if (!v143)
                        {
                          v144 = v130 + 6;
                          if (v130 + 6 >= v152)
                            goto LABEL_175;
                          v143 = *(_QWORD *)(v151 + 8 * v144);
                          if (!v143)
                          {
                            v144 = v130 + 7;
                            if (v130 + 7 >= v152)
                              goto LABEL_175;
                            v143 = *(_QWORD *)(v151 + 8 * v144);
                            if (!v143)
                            {
                              while (1)
                              {
                                v130 = v144 + 1;
                                if (__OFADD__(v144, 1))
                                  goto LABEL_196;
                                if (v130 >= v152)
                                  break;
                                v143 = *(_QWORD *)(v151 + 8 * v130);
                                ++v144;
                                if (v143)
                                  goto LABEL_170;
                              }
LABEL_175:
                              v2 = v158;
LABEL_176:
                              swift_bridgeObjectRelease();
                              if ((v75 & 1) == 0)
                              {
LABEL_66:
                                *(_QWORD *)(v76 + 8 * (v71 >> 6) + 64) |= 1 << v71;
                                v81 = (uint64_t *)(*(_QWORD *)(v76 + 48) + 16 * v71);
                                *v81 = v10;
                                v81[1] = v9;
                                v82 = (uint64_t *)(*(_QWORD *)(v76 + 56) + 16 * v71);
                                v83 = v157;
                                *v82 = v28;
                                v82[1] = v83;
                                v84 = *(_QWORD *)(v76 + 16);
                                v52 = __OFADD__(v84, 1);
                                v85 = v84 + 1;
                                if (!v52)
                                {
                                  *(_QWORD *)(v76 + 16) = v85;
                                  swift_bridgeObjectRetain();
                                  goto LABEL_68;
                                }
LABEL_188:
                                __break(1u);
LABEL_189:
                                __break(1u);
LABEL_190:
                                __break(1u);
LABEL_191:
                                __break(1u);
LABEL_192:
                                __break(1u);
LABEL_193:
                                __break(1u);
                              }
LABEL_63:
                              v79 = *(_QWORD *)(v76 + 56) + 16 * v71;
                              outlined consume of Data._Representation(*(_QWORD *)v79, *(_QWORD *)(v79 + 8));
                              v80 = v157;
                              *(_QWORD *)v79 = v28;
                              *(_QWORD *)(v79 + 8) = v80;
LABEL_68:
                              v165 = v76;
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              goto LABEL_42;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v130 = v144;
              }
LABEL_170:
              v133 = (v143 - 1) & v143;
              v135 = __clz(__rbit64(v143)) + (v130 << 6);
            }
            v136 = 16 * v135;
            v137 = (uint64_t *)(*(_QWORD *)(v69 + 48) + v136);
            v139 = *v137;
            v138 = v137[1];
            v140 = *(_QWORD *)(v76 + 48);
            v153 = *(_OWORD *)(*(_QWORD *)(v69 + 56) + v136);
            v141 = v153;
            v142 = (_QWORD *)(v140 + v136);
            *v142 = v139;
            v142[1] = v138;
            *(_OWORD *)(*(_QWORD *)(v76 + 56) + v136) = v141;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
          }
        }
LABEL_186:
        __break(1u);
        goto LABEL_187;
      }
      v67 = v25;
LABEL_55:
      free(v67);
      goto LABEL_56;
    }
    v18 = v17;
    v163 = &v151;
    v160 = v147;
    if (v17)
    {
      if (v17 <= 14)
      {
        v21 = specialized Data.InlineData.init(_:)(v146, &v146[v17]);
        v22 = v35 & 0xFFFFFFFFFFFFFFLL;
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v19 = (unint64_t)__DataStorage.init(bytes:length:)((unint64_t)v146, v18);
        v20 = v19;
        if (v18 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          v21 = swift_allocObject();
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v21 + 24) = v18;
          v22 = v20 | 0x8000000000000000;
        }
        else
        {
          v21 = v18 << 32;
          v22 = v19 | 0x4000000000000000;
        }
      }
    }
    else
    {
      v21 = 0;
      v22 = 0xC000000000000000;
    }
    swift_bridgeObjectRetain();
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v38 = v165;
    v164 = v165;
    v165 = 0x8000000000000000;
    v40 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    v41 = *(_QWORD *)(v38 + 16);
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
      goto LABEL_183;
    v44 = v39;
    if (*(_QWORD *)(v38 + 24) < v43)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v37);
      v45 = v164;
      v46 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      if ((v44 & 1) != (v47 & 1))
        goto LABEL_197;
      v40 = v46;
      if ((v44 & 1) == 0)
        goto LABEL_39;
      goto LABEL_36;
    }
    if ((v37 & 1) != 0)
    {
      v45 = v38;
      if ((v39 & 1) == 0)
        goto LABEL_39;
LABEL_36:
      v48 = *(_QWORD *)(v45 + 56) + 16 * v40;
      outlined consume of Data._Representation(*(_QWORD *)v48, *(_QWORD *)(v48 + 8));
      *(_QWORD *)v48 = v21;
      *(_QWORD *)(v48 + 8) = v22;
      goto LABEL_41;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
    v87 = static _DictionaryStorage.copy(original:)();
    v45 = v87;
    if (!*(_QWORD *)(v38 + 16))
      goto LABEL_179;
    v88 = (void *)(v87 + 64);
    v89 = (unint64_t)((1 << *(_BYTE *)(v45 + 32)) + 63) >> 6;
    if (v45 != v38 || (unint64_t)v88 >= v38 + 64 + 8 * v89)
      memmove(v88, (const void *)(v38 + 64), 8 * v89);
    v151 = v38 + 64;
    v90 = 0;
    *(_QWORD *)(v45 + 16) = *(_QWORD *)(v38 + 16);
    v91 = 1 << *(_BYTE *)(v38 + 32);
    if (v91 < 64)
      v92 = ~(-1 << v91);
    else
      v92 = -1;
    v93 = v92 & *(_QWORD *)(v38 + 64);
    v152 = (unint64_t)(v91 + 63) >> 6;
    while (1)
    {
      if (v93)
      {
        v94 = __clz(__rbit64(v93));
        v93 &= v93 - 1;
        v157 = v90;
        v95 = v94 | (v90 << 6);
        goto LABEL_79;
      }
      v52 = __OFADD__(v90, 1);
      v103 = v90 + 1;
      if (v52)
        goto LABEL_189;
      if (v103 >= v152)
        goto LABEL_179;
      v104 = *(_QWORD *)(v151 + 8 * v103);
      if (!v104)
        break;
LABEL_95:
      v93 = (v104 - 1) & v104;
      v157 = v103;
      v95 = __clz(__rbit64(v104)) + (v103 << 6);
LABEL_79:
      v96 = 16 * v95;
      v97 = (uint64_t *)(*(_QWORD *)(v38 + 48) + v96);
      v99 = *v97;
      v98 = v97[1];
      v100 = *(_QWORD *)(v45 + 48);
      v153 = *(_OWORD *)(*(_QWORD *)(v38 + 56) + v96);
      v101 = v153;
      v102 = (_QWORD *)(v100 + v96);
      *v102 = v99;
      v102[1] = v98;
      *(_OWORD *)(*(_QWORD *)(v45 + 56) + v96) = v101;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
      v90 = v157;
    }
    v105 = v103 + 1;
    if (v103 + 1 >= v152)
      goto LABEL_179;
    v104 = *(_QWORD *)(v151 + 8 * v105);
    if (v104)
      goto LABEL_94;
    v105 = v103 + 2;
    if (v103 + 2 >= v152)
      goto LABEL_179;
    v104 = *(_QWORD *)(v151 + 8 * v105);
    if (v104)
      goto LABEL_94;
    v105 = v103 + 3;
    if (v103 + 3 >= v152)
      goto LABEL_179;
    v104 = *(_QWORD *)(v151 + 8 * v105);
    if (v104)
      goto LABEL_94;
    v105 = v103 + 4;
    if (v103 + 4 >= v152)
      goto LABEL_179;
    v104 = *(_QWORD *)(v151 + 8 * v105);
    if (v104)
      goto LABEL_94;
    v105 = v103 + 5;
    if (v103 + 5 >= v152)
      goto LABEL_179;
    v104 = *(_QWORD *)(v151 + 8 * v105);
    if (v104)
    {
LABEL_94:
      v103 = v105;
      goto LABEL_95;
    }
    v106 = v45;
    v107 = v103 + 6;
    if (v103 + 6 >= v152)
      goto LABEL_178;
    v104 = *(_QWORD *)(v151 + 8 * v107);
    if (v104)
      goto LABEL_100;
    v107 = v103 + 7;
    if (v103 + 7 >= v152)
      goto LABEL_178;
    v104 = *(_QWORD *)(v151 + 8 * v107);
    if (v104)
    {
LABEL_100:
      v103 = v107;
      goto LABEL_95;
    }
    while (1)
    {
      v103 = v107 + 1;
      if (__OFADD__(v107, 1))
      {
        __break(1u);
        goto LABEL_195;
      }
      if (v103 >= v152)
        break;
      v104 = *(_QWORD *)(v151 + 8 * v103);
      ++v107;
      v45 = v106;
      if (v104)
        goto LABEL_95;
    }
LABEL_178:
    v45 = v106;
LABEL_179:
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0)
      goto LABEL_36;
LABEL_39:
    *(_QWORD *)(v45 + 8 * (v40 >> 6) + 64) |= 1 << v40;
    v49 = (uint64_t *)(*(_QWORD *)(v45 + 48) + 16 * v40);
    *v49 = v10;
    v49[1] = v9;
    v50 = (uint64_t *)(*(_QWORD *)(v45 + 56) + 16 * v40);
    *v50 = v21;
    v50[1] = v22;
    v51 = *(_QWORD *)(v45 + 16);
    v52 = __OFADD__(v51, 1);
    v53 = v51 + 1;
    if (v52)
      goto LABEL_185;
    *(_QWORD *)(v45 + 16) = v53;
    swift_bridgeObjectRetain();
LABEL_41:
    v165 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v158;
LABEL_42:
    a1 = v159;
LABEL_56:
    swift_bridgeObjectRelease();
    v5 = v7;
    if (v7 == v162)
    {
      swift_bridgeObjectRelease();
      return v165;
    }
  }
  if ((v10 & 0x1000000000000000) == 0)
  {
LABEL_69:
    swift_bridgeObjectRetain();
    v86 = v155;
    _StringGuts._slowWithCString<A>(_:)();
    v155 = v86;
    goto LABEL_56;
  }
  v11 = swift_bridgeObjectRetain();
  MEMORY[0x1E0C80A78](v11);
  v12 = fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), v146, 0x3E8uLL, 0, 0);
  if (v12 == -1)
  {
    if (MEMORY[0x186DA4118]() != 34)
      goto LABEL_56;
    v30 = fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), 0, 0, 0, 0);
    v31 = malloc(v30);
    if (!v31)
      goto LABEL_192;
    v32 = (unint64_t)v31;
    if (fgetxattr(a1, (const char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32), v31, v30, 0, 0) == v30)
    {
      *(_OWORD *)name = v156;
      swift_bridgeObjectRetain();
      v33 = specialized Data.init(bytesNoCopy:count:deallocator:)(v32, v30, (unint64_t *)name);
      specialized Dictionary.subscript.setter(v33, v34, v10, v9);
      goto LABEL_56;
    }
    v67 = (void *)v32;
    goto LABEL_55;
  }
  v163 = &v151;
  if (v12)
  {
    v13 = &v146[v12];
    if (v12 <= 14)
    {
      v160 = (_DWORD *)specialized Data.InlineData.init(_:)(v146, v13);
      v15 = v36 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v12 >= 0x7FFFFFFF)
    {
      v160 = (_DWORD *)specialized Data.LargeSlice.init(_:)((unint64_t)v146, (uint64_t)v13);
      v15 = v54 | 0x8000000000000000;
    }
    else
    {
      v160 = specialized Data.InlineSlice.init(_:)((unint64_t)v146, (uint64_t)v13);
      v15 = v14 | 0x4000000000000000;
    }
  }
  else
  {
    v160 = 0;
    v15 = 0xC000000000000000;
  }
  swift_bridgeObjectRetain();
  v55 = swift_isUniquelyReferenced_nonNull_native();
  v56 = v165;
  v165 = 0x8000000000000000;
  *(_QWORD *)name = v56;
  v58 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
  v59 = *(_QWORD *)(v56 + 16);
  v60 = (v57 & 1) == 0;
  v61 = v59 + v60;
  if (__OFADD__(v59, v60))
  {
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  v62 = v57;
  if (*(_QWORD *)(v56 + 24) < v61)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, v55);
    v63 = *(_QWORD *)name;
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    if ((v62 & 1) != (v65 & 1))
      goto LABEL_197;
    v58 = v64;
    v2 = v158;
    if ((v62 & 1) != 0)
    {
LABEL_48:
      v66 = *(_QWORD *)(v63 + 56) + 16 * v58;
      outlined consume of Data._Representation(*(_QWORD *)v66, *(_QWORD *)(v66 + 8));
      *(_QWORD *)v66 = v160;
      *(_QWORD *)(v66 + 8) = v15;
LABEL_52:
      v165 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v159;
      goto LABEL_56;
    }
LABEL_51:
    specialized _NativeDictionary._insert(at:key:value:)(v58, v10, v9, (uint64_t)v160, v15, (_QWORD *)v63);
    swift_bridgeObjectRetain();
    goto LABEL_52;
  }
  if ((v55 & 1) != 0)
  {
    v63 = v56;
    v2 = v158;
    if ((v57 & 1) != 0)
      goto LABEL_48;
    goto LABEL_51;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v108 = static _DictionaryStorage.copy(original:)();
  v63 = v108;
  if (!*(_QWORD *)(v56 + 16))
  {
LABEL_139:
    swift_bridgeObjectRelease();
    v2 = v158;
    if ((v62 & 1) != 0)
      goto LABEL_48;
    goto LABEL_51;
  }
  v109 = (void *)(v108 + 64);
  v110 = (unint64_t)((1 << *(_BYTE *)(v63 + 32)) + 63) >> 6;
  if (v63 != v56 || (unint64_t)v109 >= v56 + 64 + 8 * v110)
    memmove(v109, (const void *)(v56 + 64), 8 * v110);
  v151 = v56 + 64;
  v111 = 0;
  *(_QWORD *)(v63 + 16) = *(_QWORD *)(v56 + 16);
  v112 = 1 << *(_BYTE *)(v56 + 32);
  if (v112 < 64)
    v113 = ~(-1 << v112);
  else
    v113 = -1;
  v114 = v113 & *(_QWORD *)(v56 + 64);
  v152 = (unint64_t)(v112 + 63) >> 6;
  while (2)
  {
    if (v114)
    {
      v115 = __clz(__rbit64(v114));
      v114 &= v114 - 1;
      v157 = v111;
      v116 = v115 | (v111 << 6);
LABEL_114:
      v117 = 16 * v116;
      v118 = (uint64_t *)(*(_QWORD *)(v56 + 48) + v117);
      v120 = *v118;
      v119 = v118[1];
      v121 = *(_QWORD *)(v63 + 48);
      v153 = *(_OWORD *)(*(_QWORD *)(v56 + 56) + v117);
      v122 = v153;
      v123 = (_QWORD *)(v121 + v117);
      *v123 = v120;
      v123[1] = v119;
      *(_OWORD *)(*(_QWORD *)(v63 + 56) + v117) = v122;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v153, *((unint64_t *)&v153 + 1));
      v111 = v157;
      continue;
    }
    break;
  }
  v52 = __OFADD__(v111, 1);
  v124 = v111 + 1;
  if (v52)
    goto LABEL_190;
  if (v124 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v124);
  if (v125)
  {
LABEL_134:
    v114 = (v125 - 1) & v125;
    v157 = v124;
    v116 = __clz(__rbit64(v125)) + (v124 << 6);
    goto LABEL_114;
  }
  v126 = v124 + 1;
  if (v124 + 1 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v126);
  if (v125)
    goto LABEL_133;
  v126 = v124 + 2;
  if (v124 + 2 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v126);
  if (v125)
    goto LABEL_133;
  v126 = v124 + 3;
  if (v124 + 3 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v126);
  if (v125)
    goto LABEL_133;
  v126 = v124 + 4;
  if (v124 + 4 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v126);
  if (v125)
    goto LABEL_133;
  v126 = v124 + 5;
  if (v124 + 5 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v126);
  if (v125)
    goto LABEL_133;
  v126 = v124 + 6;
  if (v124 + 6 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v126);
  if (v125)
    goto LABEL_133;
  v126 = v124 + 7;
  if (v124 + 7 >= v152)
    goto LABEL_139;
  v125 = *(_QWORD *)(v151 + 8 * v126);
  if (v125)
  {
LABEL_133:
    v124 = v126;
    goto LABEL_134;
  }
  while (1)
  {
    v124 = v126 + 1;
    if (__OFADD__(v126, 1))
      break;
    if (v124 >= v152)
      goto LABEL_139;
    v125 = *(_QWORD *)(v151 + 8 * v124);
    ++v126;
    if (v125)
      goto LABEL_134;
  }
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(char *name, int fd, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _BYTE v6[1000];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  closure #1 in closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(v6, 1000, fd, name, 0x3E8uLL, a3, a4, a5);
  if (v5)
  {
    swift_willThrow();
    __break(1u);
  }
}

void closure #1 in closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(_BYTE *value, int a2, int fd, char *name, size_t size, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  ssize_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  ssize_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int64_t v83;
  unint64_t v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  int64_t v88;
  void *__src;
  char *__srca;
  __int128 v91;
  int64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v14 = fgetxattr(fd, name, value, size, 0, 0);
  if (v14 == -1)
  {
    if (MEMORY[0x186DA4118]() != 34)
      return;
    v28 = fgetxattr(fd, name, 0, 0, 0, 0);
    v29 = malloc(v28);
    if (v29)
    {
      v30 = v29;
      if (fgetxattr(fd, name, v29, v28, 0, 0) != v28)
      {
        free(v30);
        return;
      }
      if (v28)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain();
        v31 = (_QWORD *)__DataStorage.init(bytes:length:copy:deallocator:offset:)((unint64_t)v30, v28, 0, (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter, 0, 0);
        v96 = specialized Data._Representation.init(_:count:)(v31, v28);
        v33 = v32;
      }
      else
      {
        swift_bridgeObjectRetain();
        free(v30);
        v96 = 0;
        v33 = 0xC000000000000000;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v98 = *a6;
      v36 = *a6;
      *a6 = 0x8000000000000000;
      v37 = a7;
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(a7, a8);
      v40 = *(_QWORD *)(v36 + 16);
      v41 = (v38 & 1) == 0;
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
      }
      else
      {
        LOBYTE(a7) = v38;
        if (*(_QWORD *)(v36 + 24) < v42)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
          v25 = v98;
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v37, a8);
          if ((a7 & 1) != (v44 & 1))
            goto LABEL_105;
          v39 = v43;
          v45 = v96;
          if ((a7 & 1) == 0)
            goto LABEL_98;
          goto LABEL_25;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v25 = v36;
          v45 = v96;
          if ((v38 & 1) == 0)
            goto LABEL_98;
          goto LABEL_25;
        }
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
      v70 = static _DictionaryStorage.copy(original:)();
      v25 = v70;
      if (!*(_QWORD *)(v36 + 16))
        goto LABEL_97;
      v71 = (char *)(v70 + 64);
      __srca = (char *)(v36 + 64);
      v72 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
      if (v25 != v36 || v71 >= &__srca[8 * v72])
        memmove(v71, __srca, 8 * v72);
      v92 = 0;
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v36 + 16);
      v73 = 1 << *(_BYTE *)(v36 + 32);
      v74 = -1;
      if (v73 < 64)
        v74 = ~(-1 << v73);
      v75 = v74 & *(_QWORD *)(v36 + 64);
      v88 = (unint64_t)(v73 + 63) >> 6;
      while (1)
      {
        if (v75)
        {
          v76 = __clz(__rbit64(v75));
          v75 &= v75 - 1;
          v77 = v76 | (v92 << 6);
        }
        else
        {
          v83 = v92 + 1;
          if (__OFADD__(v92, 1))
            goto LABEL_102;
          if (v83 >= v88)
            goto LABEL_97;
          v84 = *(_QWORD *)&__srca[8 * v83];
          v85 = v92 + 1;
          if (!v84)
          {
            v85 = v92 + 2;
            if (v92 + 2 >= v88)
              goto LABEL_97;
            v84 = *(_QWORD *)&__srca[8 * v85];
            if (!v84)
            {
              v85 = v92 + 3;
              if (v92 + 3 >= v88)
                goto LABEL_97;
              v84 = *(_QWORD *)&__srca[8 * v85];
              if (!v84)
              {
                v85 = v92 + 4;
                if (v92 + 4 >= v88)
                  goto LABEL_97;
                v84 = *(_QWORD *)&__srca[8 * v85];
                if (!v84)
                {
                  v85 = v92 + 5;
                  if (v92 + 5 >= v88)
                    goto LABEL_97;
                  v84 = *(_QWORD *)&__srca[8 * v85];
                  if (!v84)
                  {
                    v85 = v92 + 6;
                    if (v92 + 6 >= v88)
                      goto LABEL_97;
                    v84 = *(_QWORD *)&__srca[8 * v85];
                    if (!v84)
                    {
                      v85 = v92 + 7;
                      if (v92 + 7 >= v88)
                        goto LABEL_97;
                      v84 = *(_QWORD *)&__srca[8 * v85];
                      if (!v84)
                      {
                        v86 = v92 + 8;
                        if (v92 + 8 >= v88)
                          goto LABEL_97;
                        v84 = *(_QWORD *)&__srca[8 * v86];
                        if (!v84)
                        {
                          while (1)
                          {
                            v85 = v86 + 1;
                            if (__OFADD__(v86, 1))
                              goto LABEL_104;
                            if (v85 >= v88)
                              break;
                            v84 = *(_QWORD *)&__srca[8 * v85];
                            ++v86;
                            if (v84)
                              goto LABEL_96;
                          }
LABEL_97:
                          swift_bridgeObjectRelease();
                          v45 = v96;
                          if ((a7 & 1) == 0)
                          {
LABEL_98:
                            v65 = v39;
                            v66 = v37;
                            v67 = a8;
                            v68 = v45;
                            v69 = v33;
LABEL_61:
                            specialized _NativeDictionary._insert(at:key:value:)(v65, v66, v67, v68, v69, (_QWORD *)v25);
                            swift_bridgeObjectRetain();
LABEL_62:
                            *a6 = v25;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            return;
                          }
LABEL_25:
                          v46 = *(_QWORD *)(v25 + 56) + 16 * v39;
                          outlined consume of Data._Representation(*(_QWORD *)v46, *(_QWORD *)(v46 + 8));
                          *(_QWORD *)v46 = v45;
                          *(_QWORD *)(v46 + 8) = v33;
                          goto LABEL_62;
                        }
                        v85 = v92 + 8;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_96:
          v75 = (v84 - 1) & v84;
          v92 = v85;
          v77 = __clz(__rbit64(v84)) + (v85 << 6);
        }
        v78 = 16 * v77;
        v79 = (uint64_t *)(*(_QWORD *)(v36 + 48) + v78);
        v81 = *v79;
        v80 = v79[1];
        v94 = *(_OWORD *)(*(_QWORD *)(v36 + 56) + v78);
        v82 = (_QWORD *)(*(_QWORD *)(v25 + 48) + v78);
        *v82 = v81;
        v82[1] = v80;
        *(_OWORD *)(*(_QWORD *)(v25 + 56) + v78) = v94;
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v94, *((unint64_t *)&v94 + 1));
      }
    }
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if (!value)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v15 = specialized Data.init(bytes:count:)(value, v14);
  v95 = v16;
  swift_bridgeObjectRetain();
  v17 = swift_isUniquelyReferenced_nonNull_native();
  v97 = *a6;
  v18 = *a6;
  *a6 = 0x8000000000000000;
  v19 = a7;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a7, a8);
  v22 = *(_QWORD *)(v18 + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(a7) = v20;
    if (*(_QWORD *)(v18 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v17);
      v25 = v97;
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, a8);
      if ((a7 & 1) != (v27 & 1))
        goto LABEL_105;
      v21 = v26;
      if ((a7 & 1) == 0)
        goto LABEL_60;
LABEL_15:
      v34 = *(_QWORD *)(v25 + 56) + 16 * v21;
      outlined consume of Data._Representation(*(_QWORD *)v34, *(_QWORD *)(v34 + 8));
      *(_QWORD *)v34 = v15;
      *(_QWORD *)(v34 + 8) = v95;
      goto LABEL_62;
    }
    if ((v17 & 1) != 0)
    {
      v25 = v18;
      if ((v20 & 1) != 0)
        goto LABEL_15;
LABEL_60:
      v65 = v21;
      v66 = v19;
      v67 = a8;
      v68 = v15;
      v69 = v95;
      goto LABEL_61;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v47 = static _DictionaryStorage.copy(original:)();
  v25 = v47;
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_59:
    swift_bridgeObjectRelease();
    if ((a7 & 1) != 0)
      goto LABEL_15;
    goto LABEL_60;
  }
  v48 = (void *)(v47 + 64);
  v49 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  if (v25 != v18 || (unint64_t)v48 >= v18 + 64 + 8 * v49)
    memmove(v48, (const void *)(v18 + 64), 8 * v49);
  v87 = v18 + 64;
  v50 = 0;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v18 + 16);
  v51 = 1 << *(_BYTE *)(v18 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & *(_QWORD *)(v18 + 64);
  __src = (void *)((unint64_t)(v51 + 63) >> 6);
  while (1)
  {
    if (v53)
    {
      v54 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      v93 = v50;
      v55 = v54 | (v50 << 6);
      goto LABEL_35;
    }
    v61 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
      goto LABEL_100;
    }
    if (v61 >= (uint64_t)__src)
      goto LABEL_59;
    v62 = *(_QWORD *)(v87 + 8 * v61);
    v63 = v50 + 1;
    if (!v62)
    {
      v63 = v50 + 2;
      if (v50 + 2 >= (uint64_t)__src)
        goto LABEL_59;
      v62 = *(_QWORD *)(v87 + 8 * v63);
      if (!v62)
      {
        v63 = v50 + 3;
        if (v50 + 3 >= (uint64_t)__src)
          goto LABEL_59;
        v62 = *(_QWORD *)(v87 + 8 * v63);
        if (!v62)
        {
          v63 = v50 + 4;
          if (v50 + 4 >= (uint64_t)__src)
            goto LABEL_59;
          v62 = *(_QWORD *)(v87 + 8 * v63);
          if (!v62)
          {
            v63 = v50 + 5;
            if (v50 + 5 >= (uint64_t)__src)
              goto LABEL_59;
            v62 = *(_QWORD *)(v87 + 8 * v63);
            if (!v62)
            {
              v63 = v50 + 6;
              if (v50 + 6 >= (uint64_t)__src)
                goto LABEL_59;
              v62 = *(_QWORD *)(v87 + 8 * v63);
              if (!v62)
              {
                v63 = v50 + 7;
                if (v50 + 7 >= (uint64_t)__src)
                  goto LABEL_59;
                v62 = *(_QWORD *)(v87 + 8 * v63);
                if (!v62)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_58:
    v53 = (v62 - 1) & v62;
    v93 = v63;
    v55 = __clz(__rbit64(v62)) + (v63 << 6);
LABEL_35:
    v56 = 16 * v55;
    v57 = (uint64_t *)(*(_QWORD *)(v18 + 48) + v56);
    v59 = *v57;
    v58 = v57[1];
    v91 = *(_OWORD *)(*(_QWORD *)(v18 + 56) + v56);
    v60 = (_QWORD *)(*(_QWORD *)(v25 + 48) + v56);
    *v60 = v59;
    v60[1] = v58;
    *(_OWORD *)(*(_QWORD *)(v25 + 56) + v56) = v91;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v91, *((unint64_t *)&v91 + 1));
    v50 = v93;
  }
  v64 = v50 + 8;
  if (v50 + 8 >= (uint64_t)__src)
    goto LABEL_59;
  v62 = *(_QWORD *)(v87 + 8 * v64);
  if (v62)
  {
    v63 = v50 + 8;
    goto LABEL_58;
  }
  while (1)
  {
    v63 = v64 + 1;
    if (__OFADD__(v64, 1))
      break;
    if (v63 >= (uint64_t)__src)
      goto LABEL_59;
    v62 = *(_QWORD *)(v87 + 8 * v63);
    ++v64;
    if (v62)
      goto LABEL_58;
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, __int128 *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t object;
  __int128 *v9;
  uint64_t v10;
  uint64_t p_st_uid;
  uint64_t v12;
  __int128 *v13;
  id v14;
  Swift::String v15;
  uint64_t countAndFlagsBits;
  __darwin_ino64_t f_blocks;
  uint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  Swift::Int v38;
  __darwin_ino64_t st_ino;
  unint64_t v40;
  Swift::String v41;
  id v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  Swift::Int v57;
  __darwin_ino64_t v58;
  uint64_t p_f_bfree;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  Swift::Int isStackAllocationSafe;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t st_dev;
  uint64_t v80;
  char v81;
  int v82;
  Swift::Int32 v83;
  __int128 *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  __int128 *v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  id v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  __int128 *v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  off_t st_size;
  off_t v132;
  __int128 *v133;
  uid_t *v134;
  Swift::String v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL4 IsSafeForMapping;
  int v160;
  size_t v161;
  void *v162;
  id v163;
  id v164;
  uint64_t v165;
  __int128 *v166;
  __int128 *v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  id v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  char v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 *v196;
  uint64_t *v197;
  unint64_t i;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  uint64_t *v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  id v214;
  uint64_t v215;
  id v216;
  id v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uid_t *v230;
  uint64_t v231;
  uint64_t v232;
  __int128 *v233;
  uint64_t *v234;
  unint64_t j;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  unint64_t v243;
  char v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  id v248;
  uint64_t v249;
  id v250;
  id v251;
  id v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  __int128 *v261;
  uint64_t v262;
  __int128 *v263;
  __int128 *v264;
  id v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  id v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  id v273;
  uint64_t v274;
  id v275;
  id v276;
  id v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  id v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  id v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  Swift::Int32 v291;
  id v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __int128 *v296;
  __int128 *v297;
  id v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  _QWORD *v312;
  id v313;
  uint64_t v314;
  uint64_t v315;
  __int128 *v316;
  uint64_t v317;
  __int128 *v318;
  __int128 *v319;
  id v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 *v330;
  uint64_t *v331;
  _OWORD *v332;
  unint64_t v333;
  int64_t v334;
  unint64_t v335;
  int64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  __int128 v340;
  uint64_t v341;
  unint64_t v342;
  char v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  id v347;
  uint64_t v348;
  id v349;
  id v350;
  id v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char v356;
  id v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  id v362;
  uint64_t v363;
  uint64_t v364;
  id v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  id v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  Swift::Int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  char v379;
  char v380;
  id v381;
  void *v382;
  unint64_t v383;
  id v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  Swift::String v388;
  Swift::String v389;
  __int128 *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  char v394;
  char v395;
  Swift::String v396;
  uint64_t v397;
  unint64_t v398;
  id v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  __int128 *v404;
  id v405;
  uint64_t v406;
  __int128 *v407;
  uint64_t v408;
  Swift::String v409;
  _BYTE v410[16];
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  __int128 *v418;
  uint64_t v419;
  int64_t v420;
  id v421;
  uint64_t v422;
  uid_t *v423;
  __int128 *v424;
  _OWORD *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t *v429;
  int64_t v430;
  statfs v431;
  _OWORD v432[2];
  uint64_t v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  _BYTE v437[48];
  _OWORD v438[2];
  stat v439;
  uint64_t v440;

  v418 = a6;
  LODWORD(v420) = a2;
  v440 = *MEMORY[0x1E0C80C00];
  v9 = *(__int128 **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  p_st_uid = *(_QWORD *)(a1 + 16);
  LODWORD(v12) = *(unsigned __int8 *)(a1 + 24);
  v424 = *(__int128 **)a1;
  v425 = (_OWORD *)p_st_uid;
  LODWORD(v427) = v12;
  v419 = a8;
  v417 = a7;
  v426 = a5;
  LODWORD(v422) = a4;
  v421 = a3;
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    v18 = (uint64_t)v9;
    v19 = v10;
    goto LABEL_28;
  }
  swift_retain_n();
  v13 = v9;
  swift_retain_n();
  object = v13;
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v431.f_bfree = p_st_uid;
    v14 = (id)object;
    v423 = (uid_t *)v10;
    swift_retain();
    swift_retain();
    v15 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v15._countAndFlagsBits;
    object = (uint64_t)v15._object;
    *(_QWORD *)&v431.f_bsize = v15._countAndFlagsBits;
    v431.f_blocks = (uint64_t)v15._object;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      f_blocks = (__darwin_ino64_t)v15._object;
    }
    else
    {
      f_blocks = (__darwin_ino64_t)v15._object;
      if ((specialized BidirectionalCollection.last.getter(v15._countAndFlagsBits, (unint64_t)v15._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = *(_QWORD *)&v431.f_bsize;
        f_blocks = v431.f_blocks;
      }
    }
    *(_QWORD *)&v439.st_dev = Set.init(minimumCapacity:)();
    v32 = specialized Set._Variant.insert(_:)(v437, 0x2FuLL);
    v33 = *(_QWORD *)&v439.st_dev;
    v34 = HIBYTE(f_blocks) & 0xF;
    if ((f_blocks & 0x2000000000000000) == 0)
      v34 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v34)
    {
      *(_QWORD *)&v439.st_dev = countAndFlagsBits;
      v439.st_ino = f_blocks;
      MEMORY[0x1E0C80A78](v32);
      v411 = (uint64_t)&v439;
      v412 = v33;
      swift_bridgeObjectRetain();
      v35 = v428;
      v36 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v410, countAndFlagsBits, f_blocks);
      v428 = v35;
      if (v37 == 1)
      {
        v38 = *(_QWORD *)&v439.st_dev;
        st_ino = v439.st_ino;
        swift_bridgeObjectRetain();
        v18 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v38, st_ino, v33);
        v19 = v40;
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = (uint64_t)v36;
        v19 = v37;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v424;
      p_st_uid = (uint64_t)v425;
      LODWORD(v12) = v427;
      if (!v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = (uint64_t)v423;
        outlined consume of PathOrURL(v9, (uint64_t)v423, p_st_uid, 1);
        outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
        swift_release();
        swift_release();

        v18 = 0;
        v19 = 0xE000000000000000;
        goto LABEL_27;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v18 = 0;
      v19 = 0xE000000000000000;
      v9 = v424;
      LODWORD(v12) = v427;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = (uint64_t)v423;
    outlined consume of PathOrURL(v9, (uint64_t)v423, p_st_uid, 1);
    outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
    swift_release();
    swift_release();

LABEL_27:
    swift_release();
    swift_release();

    goto LABEL_28;
  }
  v20 = objc_msgSend((id)object, sel__parameterString);
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      || (v25 = objc_msgSend((id)object, sel_path)) == 0)
    {
      *(_QWORD *)&v431.f_bsize = 59;
      v431.f_blocks = 0xE100000000000000;
      v41._countAndFlagsBits = (uint64_t)v22;
      v41._object = v24;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
      outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
      v18 = 59;
      v19 = 0xE100000000000000;
LABEL_21:
      swift_release();
      swift_release();

      goto LABEL_28;
    }
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v12 = v10;
    v29 = v28;

    *(_QWORD *)&v431.f_bsize = v27;
    v431.f_blocks = v29;
    swift_bridgeObjectRetain();
    v30._countAndFlagsBits = 59;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v10 = v12;
    LODWORD(v12) = v427;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = (uint64_t)v22;
    v31._object = v24;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v9 = v424;
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v424, v10, p_st_uid, 1);
    v18 = *(_QWORD *)&v431.f_bsize;
    v19 = v431.f_blocks;
LABEL_20:
    outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
    goto LABEL_21;
  }
  v42 = objc_msgSend((id)object, sel_path);
  if (v42)
  {
    v43 = v42;
    v18 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v19 = v44;

    outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
    goto LABEL_20;
  }
  outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
  outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
  swift_release();
  swift_release();

  v18 = 0;
  v19 = 0xE000000000000000;
LABEL_28:
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(v9, v10, p_st_uid, v12);
  v45 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v45 = v18 & 0xFFFFFFFFFFFFLL;
  if (v45)
  {
    if ((v12 & 1) != 0)
    {
      swift_retain_n();
      v46 = v9;
      swift_retain_n();
      object = v46;
      if ((_foundation_swift_url_feature_enabled() & 1) != 0)
      {
        *(_QWORD *)&v431.f_bsize = object;
        v431.f_blocks = v10;
        v431.f_bfree = p_st_uid;
        object = (uint64_t)(id)object;
        v47 = v10;
        swift_retain();
        swift_retain();
        v48 = URL.path(percentEncoded:)(1);
        v19 = (unint64_t)v48._object;
        *(_QWORD *)&v431.f_bsize = v48._countAndFlagsBits;
        v431.f_blocks = (uint64_t)v48._object;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v48._countAndFlagsBits, (unint64_t)v48._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        *(_QWORD *)&v439.st_dev = Set.init(minimumCapacity:)();
        v49 = specialized Set._Variant.insert(_:)(v437, 0x2FuLL);
        v12 = *(_QWORD *)&v439.st_dev;
        v50 = *(_QWORD *)&v431.f_bsize;
        v51 = v431.f_blocks;
        v52 = HIBYTE(v431.f_blocks) & 0xF;
        if ((v431.f_blocks & 0x2000000000000000) == 0)
          v52 = *(_QWORD *)&v431.f_bsize & 0xFFFFFFFFFFFFLL;
        if (v52)
        {
          *(_QWORD *)&v439.st_dev = *(_QWORD *)&v431.f_bsize;
          v439.st_ino = v431.f_blocks;
          MEMORY[0x1E0C80A78](v49);
          v411 = (uint64_t)&v439;
          v412 = v12;
          swift_bridgeObjectRetain();
          v53 = v50;
          v54 = v428;
          v55 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v410, v53, v51);
          v428 = v54;
          if (v56 == 1)
          {
            v57 = *(_QWORD *)&v439.st_dev;
            v58 = v439.st_ino;
            swift_bridgeObjectRetain();
            p_f_bfree = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v57, v58, v12);
            v61 = v60;
            swift_bridgeObjectRelease();
          }
          else
          {
            p_f_bfree = (uint64_t)v55;
            v61 = v56;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = v424;
          if (!v61)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v10 = v47;
            v158 = v47;
            p_st_uid = (uint64_t)v425;
            outlined consume of PathOrURL(v9, v158, (uint64_t)v425, 1);
            outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
            swift_release();
            swift_release();

            p_f_bfree = 0;
            v61 = 0xE000000000000000;
            goto LABEL_115;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          p_f_bfree = 0;
          v61 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = v47;
        v147 = v47;
        p_st_uid = (uint64_t)v425;
        outlined consume of PathOrURL(v9, v147, (uint64_t)v425, 1);
        outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
        swift_release();
        swift_release();

      }
      else
      {
        v91 = objc_msgSend((id)object, sel__parameterString);
        if (v91)
        {
          v92 = v91;
          v19 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
          v94 = v93;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State())
          {
            v95 = objc_msgSend((id)object, sel_path);
            if (v95)
            {
              v96 = v95;
              v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
              v12 = v10;
              v99 = v98;

              *(_QWORD *)&v431.f_bsize = v97;
              v431.f_blocks = v99;
              swift_bridgeObjectRetain();
              v100._countAndFlagsBits = 59;
              v100._object = (void *)0xE100000000000000;
              String.append(_:)(v100);
              v10 = v12;
              swift_bridgeObjectRelease();
              v9 = (__int128 *)v431.f_blocks;
              swift_bridgeObjectRetain();
              v101._countAndFlagsBits = v19;
              v101._object = v94;
              String.append(_:)(v101);
              swift_bridgeObjectRelease();
              v19 = (unint64_t)v424;
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL((void *)v19, v12, p_st_uid, 1);
              p_f_bfree = *(_QWORD *)&v431.f_bsize;
              v61 = v431.f_blocks;
              outlined consume of PathOrURL((void *)v19, v12, p_st_uid, 1);
              swift_release();
              goto LABEL_116;
            }
          }
          *(_QWORD *)&v431.f_bsize = 59;
          v431.f_blocks = 0xE100000000000000;
          v107._countAndFlagsBits = v19;
          v107._object = v94;
          String.append(_:)(v107);
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
          outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
          p_f_bfree = *(_QWORD *)&v431.f_bsize;
          v61 = v431.f_blocks;
        }
        else
        {
          v108 = objc_msgSend((id)object, sel_path);
          if (!v108)
          {
            outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
            outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
            swift_release();
            swift_release();

            p_f_bfree = 0;
            v61 = 0xE000000000000000;
            goto LABEL_48;
          }
          v19 = (unint64_t)v108;
          p_f_bfree = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
          v61 = v109;

          outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
          outlined consume of PathOrURL(v9, v10, p_st_uid, 1);
        }
      }
LABEL_115:
      swift_release();
LABEL_116:
      swift_release();

      if ((v61 & 0x1000000000000000) != 0)
        goto LABEL_117;
      goto LABEL_48;
    }
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v62 = objc_allocWithZone((Class)NSError);
    v63 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v12 = (uint64_t)objc_msgSend(v62, sel_initWithDomain_code_userInfo_, v63, 258, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v19 = (unint64_t)objc_msgSend((id)v12, sel_domain);
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v19);
    object = v65;

    if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && object == v66)
    {
LABEL_60:
      swift_bridgeObjectRelease_n();
      return swift_willThrow();
    }
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v68 & 1) != 0)
      return swift_willThrow();
    __break(1u);
  }
  swift_bridgeObjectRetain();
  p_f_bfree = (uint64_t)v9;
  v61 = v10;
  if ((v10 & 0x1000000000000000) != 0)
  {
LABEL_117:
    isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_51;
  }
LABEL_48:
  if ((v61 & 0x2000000000000000) != 0)
    isStackAllocationSafe = HIBYTE(v61) & 0xF;
  else
    isStackAllocationSafe = p_f_bfree & 0xFFFFFFFFFFFFLL;
LABEL_51:
  v70 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_354;
  }
  if (v70 < -1)
  {
LABEL_354:
    __break(1u);
    goto LABEL_355;
  }
  v423 = (uid_t *)v10;
  v10 = (uint64_t)&v434;
  v71 = v70 + 1;
  if (v70 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v73 = (char *)&v413 - v72;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v73, v71, 1, p_f_bfree, v61);
    v75 = v74;
    swift_bridgeObjectRelease();
    if ((v75 & 1) != 0)
      v76 = 0;
    else
      v76 = (uint64_t)v73;
    v77 = v428;
    closure #1 in readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(v76, &v439);
    if (v77)
    {
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    v415 = 0;
    st_dev = v439.st_dev;
    v80 = swift_bridgeObjectRelease();
    if ((st_dev & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_83;
  }
  v102 = swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, v102, v71, 1, p_f_bfree, v61);
  v104 = v103;
  swift_bridgeObjectRelease();
  if ((v104 & 1) != 0)
    v105 = 0;
  else
    v105 = v102;
  v106 = v428;
  closure #1 in readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(v105, &v431);
  if (v106)
  {
    MEMORY[0x186DA9E78](v102, -1, -1);
    return swift_bridgeObjectRelease();
  }
  v415 = 0;
  MEMORY[0x186DA9E78](v102, -1, -1);
  v80 = swift_bridgeObjectRelease();
  st_dev = v431.f_bsize;
  if ((v431.f_bsize & 0x80000000) != 0)
  {
LABEL_83:
    LODWORD(v12) = MEMORY[0x186DA4118](v80);
    if ((v427 & 1) != 0)
    {
      *(_QWORD *)v437 = MEMORY[0x1E0DEE9E0];
      v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v112 = v111;
      v114 = (uint64_t)v423;
      v113 = v424;
      *(_QWORD *)&v439.st_dev = v424;
      v439.st_ino = (__darwin_ino64_t)v423;
      *(_QWORD *)&v439.st_uid = p_st_uid;
      lazy protocol witness table accessor for type URL and conformance URL();
      v115 = v113;
      swift_retain_n();
      swift_retain_n();
      v116 = v115;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v110, v112);
      object = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v118 = v117;
      *(_QWORD *)&v431.f_bsize = v116;
      v431.f_blocks = v114;
      v431.f_bfree = p_st_uid;
      v119 = URL.path(percentEncoded:)(0);
      *(_QWORD *)&v439.st_dev = v119._countAndFlagsBits;
      v439.st_ino = (__darwin_ino64_t)v119._object;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v431, object, v118);
      v9 = *(__int128 **)v437;
      *(_QWORD *)&v438[0] = *(_QWORD *)v437;
      swift_bridgeObjectRetain();
      v418 = v9;
      if ((_DWORD)v12 != 102)
      {
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_380;
        object = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v121 = v120;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v122 = (int)POSIXErrorCode.rawValue.getter();
        v123 = objc_allocWithZone((Class)NSError);
        v124 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v125 = objc_msgSend(v123, sel_initWithDomain_code_userInfo_, v124, v122, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v126 = objc_msgSend(v125, sel_domain);
        v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
        v129 = v128;

        if (v127 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v129 == v130)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v187 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v187 & 1) == 0)
          {
LABEL_374:
            __break(1u);
            goto LABEL_375;
          }
        }
        *(_QWORD *)&v439.st_dev = v125;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v431, object, v121);
        v9 = *(__int128 **)&v438[0];
      }
      CocoaError.Code.init(fileErrno:reading:)(v12, 1);
      v188 = *((_QWORD *)v9 + 2);
      v417 = (uint64_t *)v430;
      if (v188)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v189 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v189 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v190 = *((_QWORD *)v9 + 8);
      v422 = (uint64_t)(v9 + 4);
      v191 = -1;
      v192 = -1 << *((_BYTE *)v9 + 32);
      v416 = ~v192;
      if (-v192 < 64)
        v191 = ~(-1 << -(char)v192);
      v193 = v191 & v190;
      v421 = (id)((unint64_t)(63 - v192) >> 6);
      p_f_bfree = (uint64_t)&v431.f_bfree;
      v10 = (uint64_t)&v437[16];
      p_st_uid = (uint64_t)&v439.st_uid;
      v419 = (uint64_t)(v189 + 8);
      swift_bridgeObjectRetain();
      v427 = 0;
      v426 = MEMORY[0x1E0DEE9B8] + 8;
      v420 = (int64_t)&v439.st_uid;
      if (v193)
        goto LABEL_157;
LABEL_158:
      v199 = v427 + 1;
      if (__OFADD__(v427, 1))
        goto LABEL_340;
      v200 = (uint64_t)v425;
      if (v199 < (uint64_t)v421)
      {
        v201 = *(_QWORD *)(v422 + 8 * v199);
        if (v201)
        {
LABEL_174:
          v427 = v199;
          v428 = (v201 - 1) & v201;
          for (i = __clz(__rbit64(v201)) + (v199 << 6); ; i = __clz(__rbit64(v193)) | (v427 << 6))
          {
            v203 = (uint64_t *)(*((_QWORD *)v9 + 6) + 16 * i);
            v205 = *v203;
            v204 = v203[1];
            outlined init with copy of AnyHashable(*((_QWORD *)v9 + 7) + 40 * i, p_f_bfree);
            *(_QWORD *)&v431.f_bsize = v205;
            v431.f_blocks = v204;
            v206 = *(_OWORD *)(p_f_bfree + 16);
            v434 = *(_OWORD *)p_f_bfree;
            v435 = v206;
            v436 = *(_QWORD *)(p_f_bfree + 32);
            *(_QWORD *)v437 = v205;
            *(_QWORD *)&v437[8] = v204;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v12 = *(_QWORD *)v437;
            v207 = *(_QWORD *)&v437[8];
            outlined init with take of Any((_OWORD *)v10, (_OWORD *)p_st_uid);
            outlined init with take of Any((_OWORD *)p_st_uid, v432);
            outlined init with take of Any(v432, &v439);
            v208 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v207);
            object = v208;
            if ((v209 & 1) != 0)
            {
              v194 = p_f_bfree;
              v195 = v10;
              v196 = v9;
              v197 = (uint64_t *)(v189[6] + 16 * v208);
              swift_bridgeObjectRelease();
              *v197 = v12;
              v197[1] = v207;
              v9 = v196;
              v10 = v195;
              p_f_bfree = v194;
              p_st_uid = v420;
              object = v189[7] + 32 * object;
              __swift_destroy_boxed_opaque_existential_1(object);
              outlined init with take of Any(&v439, (_OWORD *)object);
              v193 = v428;
              if (!v428)
                goto LABEL_158;
            }
            else
            {
              if (v189[2] >= v189[3])
              {
                __break(1u);
                goto LABEL_337;
              }
              *(_QWORD *)(v419 + ((v208 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v208;
              v210 = (uint64_t *)(v189[6] + 16 * v208);
              *v210 = v12;
              v210[1] = v207;
              outlined init with take of Any(&v439, (_OWORD *)(v189[7] + 32 * v208));
              v211 = v189[2];
              v212 = __OFADD__(v211, 1);
              v213 = v211 + 1;
              if (v212)
                goto LABEL_338;
              v189[2] = v213;
              v193 = v428;
              if (!v428)
                goto LABEL_158;
            }
LABEL_157:
            v428 = (v193 - 1) & v193;
          }
        }
        v202 = v427 + 2;
        if (v427 + 2 < (uint64_t)v421)
        {
          v201 = *(_QWORD *)(v422 + 8 * v202);
          if (v201)
            goto LABEL_173;
          v202 = v427 + 3;
          if (v427 + 3 < (uint64_t)v421)
          {
            v201 = *(_QWORD *)(v422 + 8 * v202);
            if (v201)
              goto LABEL_173;
            v202 = v427 + 4;
            if (v427 + 4 < (uint64_t)v421)
            {
              v201 = *(_QWORD *)(v422 + 8 * v202);
              if (v201)
                goto LABEL_173;
              v202 = v427 + 5;
              if (v427 + 5 < (uint64_t)v421)
              {
                v201 = *(_QWORD *)(v422 + 8 * v202);
                if (v201)
                  goto LABEL_173;
                v202 = v427 + 6;
                if (v427 + 6 < (uint64_t)v421)
                {
                  v201 = *(_QWORD *)(v422 + 8 * v202);
                  if (!v201)
                  {
                    v202 = v427 + 7;
                    if (v427 + 7 < (uint64_t)v421)
                    {
                      v201 = *(_QWORD *)(v422 + 8 * v202);
                      if (!v201)
                      {
                        while (1)
                        {
                          v199 = v202 + 1;
                          if (__OFADD__(v202, 1))
                            goto LABEL_372;
                          if (v199 >= (uint64_t)v421)
                            goto LABEL_184;
                          v201 = *(_QWORD *)(v422 + 8 * v199);
                          ++v202;
                          if (v201)
                            goto LABEL_174;
                        }
                      }
                      goto LABEL_173;
                    }
                    goto LABEL_184;
                  }
LABEL_173:
                  v199 = v202;
                  goto LABEL_174;
                }
              }
            }
          }
        }
      }
LABEL_184:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v214 = objc_allocWithZone((Class)NSError);
      v215 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v216 = objc_msgSend(v214, sel_initWithDomain_code_userInfo_, v215, v417, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v217 = objc_msgSend(v216, sel_domain);
      v218 = static String._unconditionallyBridgeFromObjectiveC(_:)(v217);
      v220 = v219;

      if (v218 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v220 == v221)
        goto LABEL_190;
      v223 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v424, (uint64_t)v423, v200, 1);
      if ((v223 & 1) == 0)
      {
        __break(1u);
LABEL_190:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of PathOrURL(v424, (uint64_t)v423, v200, 1);
      }
      return swift_willThrow();
    }
    *(_QWORD *)&v434 = MEMORY[0x1E0DEE9E0];
    v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v153 = v152;
    v154 = (unint64_t)v423;
    v155 = (uint64_t)v424;
    *(_QWORD *)&v439.st_dev = v424;
    v439.st_ino = (__darwin_ino64_t)v423;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v151, v153);
    object = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v157 = v156;
    URL.init(_fileManagerFailableFileURLWithPath:)(v155, v154, (uint64_t)&v439);
    if (*(_QWORD *)&v439.st_dev)
    {
      *(_QWORD *)v437 = *(_QWORD *)&v439.st_dev;
      *(_OWORD *)&v437[8] = *(_OWORD *)&v439.st_ino;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      memset(&v431, 0, 40);
    }
    specialized Dictionary.subscript.setter((uint64_t)&v431, object, v157);
    v9 = (__int128 *)v434;
    *(_QWORD *)&v438[0] = v434;
    swift_bridgeObjectRetain();
    v421 = v9;
    if ((_DWORD)v12 != 102)
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        goto LABEL_380;
      object = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v172 = v171;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v173 = (int)POSIXErrorCode.rawValue.getter();
      v174 = objc_allocWithZone((Class)NSError);
      v175 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v176 = objc_msgSend(v174, sel_initWithDomain_code_userInfo_, v175, v173, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v177 = objc_msgSend(v176, sel_domain);
      v10 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v177);
      v179 = v178;

      if ((id)v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
        && v179 == v180)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
        {
LABEL_375:
          __break(1u);
LABEL_376:
          __break(1u);
        }
      }
      *(_QWORD *)&v439.st_dev = v176;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v431, object, v172);
      v9 = *(__int128 **)&v438[0];
    }
    CocoaError.Code.init(fileErrno:reading:)(v12, 1);
    v224 = *((_QWORD *)v9 + 2);
    v420 = v430;
    if (v224)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v225 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v225 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v226 = *((_QWORD *)v9 + 8);
    v425 = v9 + 4;
    v227 = -1;
    v228 = -1 << *((_BYTE *)v9 + 32);
    v419 = ~v228;
    if (-v228 < 64)
      v227 = ~(-1 << -(char)v228);
    v229 = v227 & v226;
    v424 = (__int128 *)((unint64_t)(63 - v228) >> 6);
    p_st_uid = (uint64_t)&v431.f_bfree;
    p_f_bfree = (uint64_t)&v437[16];
    v230 = &v439.st_uid;
    v422 = (uint64_t)(v225 + 8);
    swift_bridgeObjectRetain();
    v427 = 0;
    v426 = MEMORY[0x1E0DEE9B8] + 8;
    v423 = &v439.st_uid;
    if (v229)
      goto LABEL_202;
LABEL_203:
    v236 = v427 + 1;
    if (__OFADD__(v427, 1))
      goto LABEL_341;
    if (v236 < (uint64_t)v424)
    {
      v237 = *((_QWORD *)v425 + v236);
      if (v237)
      {
LABEL_219:
        v427 = v236;
        v428 = (v237 - 1) & v237;
        for (j = __clz(__rbit64(v237)) + (v236 << 6); ; j = __clz(__rbit64(v229)) | (v427 << 6))
        {
          v239 = (uint64_t *)(*((_QWORD *)v9 + 6) + 16 * j);
          v241 = *v239;
          v240 = v239[1];
          outlined init with copy of AnyHashable(*((_QWORD *)v9 + 7) + 40 * j, p_st_uid);
          *(_QWORD *)&v431.f_bsize = v241;
          v431.f_blocks = v240;
          v242 = *(_OWORD *)(p_st_uid + 16);
          v434 = *(_OWORD *)p_st_uid;
          v435 = v242;
          v436 = *(_QWORD *)(p_st_uid + 32);
          *(_QWORD *)v437 = v241;
          *(_QWORD *)&v437[8] = v240;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v10 = *(_QWORD *)v437;
          v12 = *(_QWORD *)&v437[8];
          outlined init with take of Any((_OWORD *)p_f_bfree, v230);
          outlined init with take of Any(v230, v432);
          outlined init with take of Any(v432, &v439);
          v243 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
          object = v243;
          if ((v244 & 1) != 0)
          {
            v231 = p_st_uid;
            v232 = p_f_bfree;
            v233 = v9;
            v234 = (uint64_t *)(v225[6] + 16 * v243);
            swift_bridgeObjectRelease();
            *v234 = v10;
            v234[1] = v12;
            v9 = v233;
            p_f_bfree = v232;
            p_st_uid = v231;
            v230 = v423;
            object = v225[7] + 32 * object;
            __swift_destroy_boxed_opaque_existential_1(object);
            outlined init with take of Any(&v439, (_OWORD *)object);
            v229 = v428;
            if (!v428)
              goto LABEL_203;
          }
          else
          {
            if (v225[2] >= v225[3])
            {
LABEL_337:
              __break(1u);
LABEL_338:
              __break(1u);
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
LABEL_341:
              __break(1u);
LABEL_342:
              v381 = objc_msgSend((id)object, sel__parameterString);
              if (v381)
              {
                v382 = v381;
                v426 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v381);
                v19 = v383;

                if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State())
                {
                  v384 = objc_msgSend((id)object, sel_path);
                  if (v384)
                  {
                    v385 = v384;
                    v422 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v384);
                    v387 = v386;

                    *(_QWORD *)v437 = v422;
                    *(_QWORD *)&v437[8] = v387;
                    swift_bridgeObjectRetain();
                    v388._countAndFlagsBits = 59;
                    v388._object = (void *)0xE100000000000000;
                    String.append(_:)(v388);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    v389._countAndFlagsBits = v426;
                    v389._object = (void *)v19;
                    String.append(_:)(v389);
                    swift_bridgeObjectRelease();
                    v390 = v424;
                    swift_bridgeObjectRelease();
                    v391 = (uint64_t)v423;
                    outlined consume of PathOrURL(v390, (uint64_t)v423, p_st_uid, 1);
                    v422 = *(_QWORD *)v437;
                    v392 = *(_QWORD *)&v437[8];
                    outlined consume of PathOrURL(v390, v391, p_st_uid, 1);
                    swift_release();
                    v372 = v392;
                    goto LABEL_359;
                  }
                }
LABEL_355:
                *(_QWORD *)v437 = 59;
                *(_QWORD *)&v437[8] = 0xE100000000000000;
                v396._countAndFlagsBits = v426;
                v396._object = (void *)v19;
                String.append(_:)(v396);
                swift_bridgeObjectRelease();
                v397 = (uint64_t)v423;
                outlined consume of PathOrURL(v9, (uint64_t)v423, p_st_uid, 1);
                outlined consume of PathOrURL(v9, v397, p_st_uid, 1);
                v9 = *(__int128 **)v437;
                v398 = *(_QWORD *)&v437[8];
                swift_release();
                v372 = v398;
                swift_release();

LABEL_321:
                v373 = (uint64_t)v9;
                if ((v372 & 0x1000000000000000) == 0)
                  goto LABEL_322;
              }
              else
              {
                v399 = objc_msgSend((id)object, sel_path);
                if (!v399)
                  goto LABEL_370;
                v400 = v399;
                v422 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v399);
                v426 = v401;

                v402 = (uint64_t)v423;
                outlined consume of PathOrURL(v9, (uint64_t)v423, p_st_uid, 1);
                outlined consume of PathOrURL(v9, v402, p_st_uid, 1);
                swift_release();
                v372 = v426;
LABEL_359:
                swift_release();

                v373 = v422;
                if ((v372 & 0x1000000000000000) == 0)
                  goto LABEL_322;
              }
LABEL_367:
              v374 = String.UTF8View._foreignCount()();
              goto LABEL_325;
            }
            *(_QWORD *)(v422 + ((v243 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v243;
            v245 = (uint64_t *)(v225[6] + 16 * v243);
            *v245 = v10;
            v245[1] = v12;
            outlined init with take of Any(&v439, (_OWORD *)(v225[7] + 32 * v243));
            v246 = v225[2];
            v212 = __OFADD__(v246, 1);
            v247 = v246 + 1;
            if (v212)
              goto LABEL_339;
            v225[2] = v247;
            v229 = v428;
            if (!v428)
              goto LABEL_203;
          }
LABEL_202:
          v428 = (v229 - 1) & v229;
        }
      }
      v238 = v427 + 2;
      if (v427 + 2 < (uint64_t)v424)
      {
        v237 = *((_QWORD *)v425 + v238);
        if (v237)
          goto LABEL_218;
        v238 = v427 + 3;
        if (v427 + 3 < (uint64_t)v424)
        {
          v237 = *((_QWORD *)v425 + v238);
          if (v237)
            goto LABEL_218;
          v238 = v427 + 4;
          if (v427 + 4 < (uint64_t)v424)
          {
            v237 = *((_QWORD *)v425 + v238);
            if (v237)
              goto LABEL_218;
            v238 = v427 + 5;
            if (v427 + 5 < (uint64_t)v424)
            {
              v237 = *((_QWORD *)v425 + v238);
              if (v237)
                goto LABEL_218;
              v238 = v427 + 6;
              if (v427 + 6 < (uint64_t)v424)
              {
                v237 = *((_QWORD *)v425 + v238);
                if (!v237)
                {
                  v238 = v427 + 7;
                  if (v427 + 7 < (uint64_t)v424)
                  {
                    v237 = *((_QWORD *)v425 + v238);
                    if (!v237)
                    {
                      while (1)
                      {
                        v236 = v238 + 1;
                        if (__OFADD__(v238, 1))
                          goto LABEL_373;
                        if (v236 >= (uint64_t)v424)
                          goto LABEL_229;
                        v237 = *((_QWORD *)v425 + v236);
                        ++v238;
                        if (v237)
                          goto LABEL_219;
                      }
                    }
                    goto LABEL_218;
                  }
                  goto LABEL_229;
                }
LABEL_218:
                v236 = v238;
                goto LABEL_219;
              }
            }
          }
        }
      }
    }
LABEL_229:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v248 = objc_allocWithZone((Class)NSError);
    v249 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v250 = objc_msgSend(v248, sel_initWithDomain_code_userInfo_, v249, v420, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v251 = objc_msgSend(v250, sel_domain);
    v252 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
    v254 = v253;

    if (v252 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v254 != v255)
    {
      v257 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v257 & 1) != 0)
        return swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
LABEL_63:
  v81 = v426;
  if ((v426 & 2) != 0)
    MEMORY[0x186DA4130](st_dev, 48, 1);
  memset(&v439, 0, 28);
  memset(&v439.st_atimespec, 0, 112);
  v82 = fstat(st_dev, &v439);
  LODWORD(v416) = st_dev;
  if (v82)
  {
    v83 = MEMORY[0x186DA4118]();
    v84 = v424;
    if ((v427 & 1) != 0)
    {
      *(_QWORD *)&v434 = MEMORY[0x1E0DEE9E0];
      v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v87 = v86;
      *(_QWORD *)v437 = v84;
      v88 = (uint64_t)v423;
      *(_QWORD *)&v437[8] = v423;
      *(_QWORD *)&v437[16] = p_st_uid;
      lazy protocol witness table accessor for type URL and conformance URL();
      v89 = v84;
      swift_retain_n();
      swift_retain_n();
      v90 = v89;
LABEL_131:
      v167 = v90;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v85, v87);
      v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v170 = v169;
      *(_QWORD *)&v431.f_bsize = v167;
      v431.f_blocks = v88;
      v431.f_bfree = p_st_uid;
      *(Swift::String *)v437 = URL.path(percentEncoded:)(0);
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v168, v170);
      static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v83, 1, 0, 0, v434, &v431);
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v84, v88, p_st_uid, 1);
LABEL_144:
      swift_willThrow();
LABEL_145:
      v186 = v416;
      return close(v186);
    }
    *(_QWORD *)&v432[0] = MEMORY[0x1E0DEE9E0];
    v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v150 = v149;
    *(_QWORD *)v437 = v84;
    goto LABEL_140;
  }
  st_size = v439.st_size;
  v132 = (off_t)v421;
  if (v439.st_size < (uint64_t)v421)
    v132 = v439.st_size;
  if ((v422 & 1) == 0)
    st_size = v132;
  v428 = st_size;
  LODWORD(v12) = v439.st_mode;
  LOWORD(p_f_bfree) = S_IFMT.getter();
  v9 = v424;
  if ((v81 & 8) != 0)
  {
    IsSafeForMapping = 1;
    goto LABEL_121;
  }
  if ((v81 & 1) != 0 && (fcntl(_:_:)(st_dev, 63) & 0x80000000) == 0)
  {
    bzero(&v431, 0x878uLL);
    if (!fstatfs(st_dev, &v431) && (v431.f_flags & 0x1200) == 0x1000)
    {
      if ((v427 & 1) == 0)
      {
        v372 = (unint64_t)v423;
        swift_bridgeObjectRetain();
        goto LABEL_321;
      }
      swift_retain_n();
      v133 = v9;
      v134 = v423;
      swift_retain_n();
      object = v133;
      if ((_foundation_swift_url_feature_enabled() & 1) == 0)
        goto LABEL_342;
      *(_QWORD *)v437 = object;
      *(_QWORD *)&v437[8] = v134;
      *(_QWORD *)&v437[16] = p_st_uid;
      v421 = (id)object;
      swift_retain();
      swift_retain();
      v135 = URL.path(percentEncoded:)(1);
      *(Swift::String *)v437 = v135;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v135._countAndFlagsBits, (unint64_t)v135._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v414 = (uint64_t)v135._object;
      *(_QWORD *)&v434 = Set.init(minimumCapacity:)();
      v136 = specialized Set._Variant.insert(_:)(v432, 0x2FuLL);
      v137 = v434;
      v139 = *(_QWORD *)&v437[8];
      v138 = *(_QWORD *)v437;
      v140 = HIBYTE(*(_QWORD *)&v437[8]) & 0xFLL;
      if ((*(_QWORD *)&v437[8] & 0x2000000000000000) == 0)
        v140 = *(_QWORD *)v437 & 0xFFFFFFFFFFFFLL;
      if (v140)
      {
        v434 = *(_OWORD *)v437;
        MEMORY[0x1E0C80A78](v136);
        v411 = (uint64_t)&v434;
        v412 = v137;
        swift_bridgeObjectRetain();
        v141 = v138;
        v142 = v415;
        v422 = (uint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v410, v141, v139);
        v415 = v142;
        if (v143 == 1)
        {
          v144 = v434;
          swift_bridgeObjectRetain();
          v422 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v144, *((unint64_t *)&v144 + 1), v137);
          v146 = v145;
          swift_bridgeObjectRelease();
        }
        else
        {
          v146 = v143;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        p_st_uid = (uint64_t)v425;
        if (!v146)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v406 = (uint64_t)v423;
          v407 = v424;
          outlined consume of PathOrURL(v424, (uint64_t)v423, p_st_uid, 1);
          outlined consume of PathOrURL(v407, v406, p_st_uid, 1);
          swift_release();
          swift_release();
          v405 = v421;

          v422 = 0;
          v426 = 0xE000000000000000;
LABEL_366:
          swift_release();
          swift_release();

          v372 = v426;
          v373 = v422;
          if ((v426 & 0x1000000000000000) == 0)
            goto LABEL_322;
          goto LABEL_367;
        }
        v426 = v146;
      }
      else
      {
        swift_bridgeObjectRelease();
        v422 = 0;
        v426 = 0xE000000000000000;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v403 = (uint64_t)v423;
      v404 = v424;
      outlined consume of PathOrURL(v424, (uint64_t)v423, p_st_uid, 1);
      outlined consume of PathOrURL(v404, v403, p_st_uid, 1);
      swift_release();
      swift_release();
      v405 = v421;

      goto LABEL_366;
    }
  }
  IsSafeForMapping = 0;
  while (1)
  {
LABEL_121:
    v160 = (unsigned __int16)(p_f_bfree & v12);
    if (v160 != (unsigned __int16)S_IFREG.getter())
    {
      if (v160 == (unsigned __int16)S_IFDIR.getter())
        v83 = 21;
      else
        v83 = 13;
      if ((v427 & 1) != 0)
      {
        *(_QWORD *)&v434 = MEMORY[0x1E0DEE9E0];
        v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v87 = v165;
        *(_QWORD *)v437 = v9;
        v88 = (uint64_t)v423;
        *(_QWORD *)&v437[8] = v423;
        *(_QWORD *)&v437[16] = p_st_uid;
        lazy protocol witness table accessor for type URL and conformance URL();
        v166 = v9;
        swift_retain_n();
        swift_retain_n();
        v90 = v166;
        v84 = v9;
        goto LABEL_131;
      }
      *(_QWORD *)&v432[0] = MEMORY[0x1E0DEE9E0];
      v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v150 = v181;
      *(_QWORD *)v437 = v9;
      v84 = v9;
LABEL_140:
      v182 = (unint64_t)v423;
      *(_QWORD *)&v437[8] = v423;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v148, v150);
      v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v185 = v184;
      URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v84, v182, (uint64_t)v437);
      if (*(_QWORD *)v437)
      {
        *(_QWORD *)&v434 = *(_QWORD *)v437;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v10 + 64);
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        memset(&v431, 0, 40);
      }
      specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v183, v185);
      static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v83, 1, 0, 0, *(uint64_t *)&v432[0], &v431);
      swift_bridgeObjectRelease();
      goto LABEL_144;
    }
    v161 = v428;
    if ((v428 & 0x8000000000000000) == 0)
    {
      if ((v420 & 1) != 0)
      {
        v162 = (void *)objc_opt_self();
        v163 = objc_msgSend(v162, sel_currentProgress);

        if (v163)
        {
          v161 = v428;
          v164 = objc_msgSend(v162, sel_progressWithTotalUnitCount_, v428);
        }
        else
        {
          v164 = 0;
          v161 = v428;
        }
      }
      else
      {
        v164 = 0;
      }
      if (v161)
      {
        if (IsSafeForMapping)
        {
          v288 = (char *)mmap(0, v161, 1, 2, st_dev, 0);
          if (!v288 || (v289 = v288, (v290 = MAP_FAILED.getter()) != 0) && v289 == (char *)v290)
          {
            v291 = MEMORY[0x186DA4118]();
            if ((v427 & 1) != 0)
            {
              *(_QWORD *)&v434 = MEMORY[0x1E0DEE9E0];
              v292 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
              v294 = v293;
              *(_QWORD *)v437 = v9;
              v295 = (uint64_t)v423;
              *(_QWORD *)&v437[8] = v423;
              *(_QWORD *)&v437[16] = p_st_uid;
              lazy protocol witness table accessor for type URL and conformance URL();
              v296 = v9;
              swift_retain_n();
              swift_retain_n();
              v297 = v296;
              AnyHashable.init<A>(_:)();
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v292, v294);
              v298 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
              v300 = v299;
              *(_QWORD *)&v431.f_bsize = v297;
              v431.f_blocks = v295;
              v431.f_bfree = p_st_uid;
              *(Swift::String *)v437 = URL.path(percentEncoded:)(0);
              AnyHashable.init<A>(_:)();
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v298, v300);
              static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v291, 1, 0, 0, v434, &v431);
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(v424, v295, p_st_uid, 1);
            }
            else
            {
              *(_QWORD *)&v432[0] = MEMORY[0x1E0DEE9E0];
              v357 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
              v359 = v358;
              *(_QWORD *)v437 = v9;
              v360 = (uint64_t)v9;
              v361 = (unint64_t)v423;
              *(_QWORD *)&v437[8] = v423;
              swift_bridgeObjectRetain();
              AnyHashable.init<A>(_:)();
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v357, v359);
              v362 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
              v364 = v363;
              URL.init(_fileManagerFailableFileURLWithPath:)(v360, v361, (uint64_t)v437);
              if (*(_QWORD *)v437)
              {
                *(_QWORD *)&v434 = *(_QWORD *)v437;
                *(_OWORD *)(v10 + 8) = *(_OWORD *)(v10 + 64);
                lazy protocol witness table accessor for type URL and conformance URL();
                AnyHashable.init<A>(_:)();
              }
              else
              {
                memset(&v431, 0, 40);
              }
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v362, v364);
              static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v291, 1, 0, 0, *(uint64_t *)&v432[0], &v431);
              swift_bridgeObjectRelease();
            }
            swift_willThrow();

            goto LABEL_145;
          }
          v301 = 1;
          if (v164)
          {
            objc_msgSend(v164, sel_setTotalUnitCount_, 1);
            objc_msgSend(v164, sel_setCompletedUnitCount_, 1);
          }
        }
        else
        {
          v305 = (char *)malloc(v161);
          if (!v305)
          {
            if ((v427 & 1) != 0)
            {
              *(_QWORD *)&v434 = MEMORY[0x1E0DEE9E0];
              v313 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
              v315 = v314;
              *(_QWORD *)v437 = v9;
              v316 = v9;
              v317 = (uint64_t)v423;
              *(_QWORD *)&v437[8] = v423;
              *(_QWORD *)&v437[16] = p_st_uid;
              lazy protocol witness table accessor for type URL and conformance URL();
              v318 = v316;
              swift_retain_n();
              swift_retain_n();
              v319 = v318;
              AnyHashable.init<A>(_:)();
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v313, v315);
              v320 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
              v322 = v321;
              *(_QWORD *)&v431.f_bsize = v319;
              v431.f_blocks = v317;
              v431.f_bfree = p_st_uid;
              *(Swift::String *)v437 = URL.path(percentEncoded:)(0);
              AnyHashable.init<A>(_:)();
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v320, v322);
              static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(12, 1, 0, 0, v434, &v431);
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(v316, v317, p_st_uid, 1);
              v323 = v416;
            }
            else
            {
              *(_QWORD *)&v432[0] = MEMORY[0x1E0DEE9E0];
              v365 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
              v367 = v366;
              *(_QWORD *)v437 = v9;
              v368 = (unint64_t)v423;
              *(_QWORD *)&v437[8] = v423;
              swift_bridgeObjectRetain();
              AnyHashable.init<A>(_:)();
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v365, v367);
              v369 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
              v371 = v370;
              URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v9, v368, (uint64_t)v437);
              if (*(_QWORD *)v437)
              {
                *(_QWORD *)&v434 = *(_QWORD *)v437;
                *(_OWORD *)(v10 + 8) = *(_OWORD *)(v10 + 64);
                lazy protocol witness table accessor for type URL and conformance URL();
                AnyHashable.init<A>(_:)();
              }
              else
              {
                memset(&v431, 0, 40);
              }
              v323 = v416;
              specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v369, v371);
              static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(12, 1, 0, 0, *(uint64_t *)&v432[0], &v431);
              swift_bridgeObjectRelease();
            }
            swift_willThrow();

            goto LABEL_312;
          }
          v289 = v305;
          if (v164)
            objc_msgSend(v164, sel_becomeCurrentWithPendingUnitCount_, v161);
          *(_QWORD *)&v431.f_bsize = v9;
          v431.f_blocks = (uint64_t)v423;
          v431.f_bfree = p_st_uid;
          LOBYTE(v431.f_bavail) = v427;
          v306 = v415;
          readBytesFromFileDescriptor(_:path:buffer:length:readUntilLength:reportProgress:)(st_dev, (uint64_t)&v431, v289, v161, 1, v420 & 1);
          if (v306)
          {
            objc_msgSend(v164, sel_resignCurrent);
            free(v289);
            swift_willThrow();

            return close(st_dev);
          }
          v428 = v307;
          v415 = 0;
          objc_msgSend(v164, sel_resignCurrent);
          v301 = 2;
        }
      }
      else
      {
        if (v164)
        {
          objc_msgSend(v164, sel_setTotalUnitCount_, 1);
          objc_msgSend(v164, sel_setCompletedUnitCount_, 1);
        }
        v289 = 0;
        v428 = 0;
        v301 = 4;
      }
      v302 = (uint64_t)v418;
      if (specialized Array.count.getter(v418))
      {
        v303 = v417;
        swift_bridgeObjectRelease();
        v304 = readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(st_dev, v302);

        *v303 = v304;
      }
      else
      {

      }
      v308 = (_QWORD *)v419;
      v309 = v428;
      *(_QWORD *)v419 = v289;
      v308[1] = v309;
      v308[2] = v301;
      v308[3] = 0;
      return close(st_dev);
    }
    if ((v427 & 1) == 0)
    {
      *(_QWORD *)&v432[0] = MEMORY[0x1E0DEE9E0];
      v281 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v283 = v282;
      *(_QWORD *)v437 = v9;
      v284 = (unint64_t)v423;
      *(_QWORD *)&v437[8] = v423;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v281, v283);
      v285 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v287 = v286;
      URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v9, v284, (uint64_t)v437);
      if (*(_QWORD *)v437)
      {
        *(_QWORD *)&v434 = *(_QWORD *)v437;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v10 + 64);
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        memset(&v431, 0, 40);
      }
      v323 = v416;
      specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v285, v287);
      static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(12, 1, 0, 0, *(uint64_t *)&v432[0], &v431);
      swift_bridgeObjectRelease();
      goto LABEL_311;
    }
    *(_QWORD *)&v434 = MEMORY[0x1E0DEE9E0];
    v258 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v260 = v259;
    *(_QWORD *)v437 = v9;
    v261 = v9;
    v262 = (uint64_t)v423;
    *(_QWORD *)&v437[8] = v423;
    *(_QWORD *)&v437[16] = p_st_uid;
    lazy protocol witness table accessor for type URL and conformance URL();
    v263 = v261;
    swift_retain_n();
    swift_retain_n();
    v264 = v263;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v258, v260);
    v265 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v267 = v266;
    *(_QWORD *)&v431.f_bsize = v264;
    v431.f_blocks = v262;
    v431.f_bfree = p_st_uid;
    *(Swift::String *)v437 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v265, v267);
    v430 = v434;
    v418 = (__int128 *)v434;
    swift_bridgeObjectRetain();
    v268 = 12;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_382;
    v269 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v271 = v270;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v272 = (int)POSIXErrorCode.rawValue.getter();
    v273 = objc_allocWithZone((Class)NSError);
    v274 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v275 = objc_msgSend(v273, sel_initWithDomain_code_userInfo_, v274, v272, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v276 = objc_msgSend(v275, sel_domain);
    v277 = static String._unconditionallyBridgeFromObjectiveC(_:)(v276);
    v279 = v278;

    if (v277 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")))
      goto LABEL_264;
    if (v279 == v280)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
LABEL_264:
      v310 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v310 & 1) == 0)
        goto LABEL_376;
    }
    *(_QWORD *)v437 = v275;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v431, (uint64_t)v269, v271);
    CocoaError.Code.init(fileErrno:reading:)(12, 1);
    v426 = v430;
    v311 = *(_QWORD *)(v430 + 16);
    v417 = v429;
    if (v311)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v312 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v312 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v324 = *(_QWORD *)(v426 + 64);
    v421 = (id)(v426 + 64);
    v325 = -1;
    v326 = -1 << *(_BYTE *)(v426 + 32);
    v414 = ~v326;
    if (-v326 < 64)
      v325 = ~(-1 << -(char)v326);
    v327 = v325 & v324;
    p_f_bfree = (uint64_t)&v431.f_bfree;
    v9 = &v435;
    v10 = (uint64_t)&v437[16];
    v419 = (uint64_t)(v312 + 8);
    v420 = (unint64_t)(63 - v326) >> 6;
    swift_bridgeObjectRetain();
    v427 = 0;
    p_st_uid = 40;
    v422 = MEMORY[0x1E0DEE9B8] + 8;
    if (!v327)
      break;
    while (1)
    {
      while (1)
      {
        v428 = (v327 - 1) & v327;
        v333 = __clz(__rbit64(v327)) | (v427 << 6);
LABEL_295:
        v337 = (uint64_t *)(*(_QWORD *)(v426 + 48) + 16 * v333);
        v339 = *v337;
        v338 = v337[1];
        outlined init with copy of AnyHashable(*(_QWORD *)(v426 + 56) + 40 * v333, p_f_bfree);
        *(_QWORD *)&v431.f_bsize = v339;
        v431.f_blocks = v338;
        v340 = *(_OWORD *)(p_f_bfree + 16);
        v432[0] = *(_OWORD *)p_f_bfree;
        v432[1] = v340;
        v433 = *(_QWORD *)(p_f_bfree + 32);
        *(_QWORD *)&v434 = v339;
        *((_QWORD *)&v434 + 1) = v338;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v12 = *((_QWORD *)&v434 + 1);
        v341 = v434;
        outlined init with take of Any(v9, (_OWORD *)v10);
        outlined init with take of Any((_OWORD *)v10, v438);
        outlined init with take of Any(v438, v437);
        v342 = specialized __RawDictionaryStorage.find<A>(_:)(v341, v12);
        object = v342;
        if ((v343 & 1) == 0)
          break;
        v328 = p_f_bfree;
        v329 = v10;
        v330 = v9;
        v331 = (uint64_t *)(v312[6] + 16 * v342);
        swift_bridgeObjectRelease();
        *v331 = v341;
        v331[1] = v12;
        v9 = v330;
        v10 = v329;
        p_f_bfree = v328;
        p_st_uid = 40;
        v332 = (_OWORD *)(v312[7] + 32 * object);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v332);
        outlined init with take of Any(v437, v332);
        v327 = v428;
        if (!v428)
          goto LABEL_278;
      }
      if (v312[2] >= v312[3])
        break;
      *(_QWORD *)(v419 + ((v342 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v342;
      v344 = (uint64_t *)(v312[6] + 16 * v342);
      *v344 = v341;
      v344[1] = v12;
      outlined init with take of Any(v437, (_OWORD *)(v312[7] + 32 * v342));
      v345 = v312[2];
      v212 = __OFADD__(v345, 1);
      v346 = v345 + 1;
      if (v212)
        goto LABEL_369;
      v312[2] = v346;
      v327 = v428;
      if (!v428)
        goto LABEL_278;
    }
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    v408 = (uint64_t)v423;
    outlined consume of PathOrURL(v9, (uint64_t)v423, p_st_uid, 1);
    outlined consume of PathOrURL(v9, v408, p_st_uid, 1);
    swift_release();
    swift_release();

    v373 = 0;
    v372 = 0xE000000000000000;
LABEL_322:
    if ((v372 & 0x2000000000000000) != 0)
      v374 = HIBYTE(v372) & 0xF;
    else
      v374 = v373 & 0xFFFFFFFFFFFFLL;
LABEL_325:
    v375 = 3 * v374;
    if ((unsigned __int128)(v374 * (__int128)3) >> 64 != (3 * v374) >> 63)
    {
      __break(1u);
      goto LABEL_378;
    }
    if (v375 < -1)
      goto LABEL_379;
    v376 = v375 + 1;
    if (v375 < 1024 || (v374 = swift_stdlib_isStackAllocationSafe(), (v374 & 1) != 0))
    {
      v422 = (uint64_t)&v413;
      MEMORY[0x1E0C80A78](v374);
      v378 = (char *)&v413 - v377;
      swift_bridgeObjectRetain();
      IsSafeForMapping = 1;
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v378, v376, 1, v373, v372);
      v380 = v379;
      v426 = v372;
      swift_bridgeObjectRelease();
      if ((v380 & 1) == 0)
        IsSafeForMapping = _NSFileCompressionTypeIsSafeForMapping((uint64_t)v378);
    }
    else
    {
      v422 = v373;
      v393 = swift_slowAlloc();
      swift_bridgeObjectRetain();
      IsSafeForMapping = 1;
      String._decomposed(_:into:nullTerminated:)(1, v393, v376, 1, v422, v372);
      v395 = v394;
      swift_bridgeObjectRelease();
      if ((v395 & 1) == 0)
        IsSafeForMapping = _NSFileCompressionTypeIsSafeForMapping(v393);
      MEMORY[0x186DA9E78](v393, -1, -1);
    }
    swift_bridgeObjectRelease();
    v9 = v424;
    LODWORD(st_dev) = v416;
  }
LABEL_278:
  v334 = v427 + 1;
  if (__OFADD__(v427, 1))
  {
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
    goto LABEL_374;
  }
  v12 = (uint64_t)v425;
  if (v334 < v420)
  {
    v335 = *((_QWORD *)v421 + v334);
    if (v335)
    {
LABEL_294:
      v427 = v334;
      v428 = (v335 - 1) & v335;
      v333 = __clz(__rbit64(v335)) + (v334 << 6);
      goto LABEL_295;
    }
    v336 = v427 + 2;
    if (v427 + 2 < v420)
    {
      v335 = *((_QWORD *)v421 + v336);
      if (v335)
        goto LABEL_293;
      v336 = v427 + 3;
      if (v427 + 3 < v420)
      {
        v335 = *((_QWORD *)v421 + v336);
        if (v335)
          goto LABEL_293;
        v336 = v427 + 4;
        if (v427 + 4 < v420)
        {
          v335 = *((_QWORD *)v421 + v336);
          if (v335)
            goto LABEL_293;
          v336 = v427 + 5;
          if (v427 + 5 < v420)
          {
            v335 = *((_QWORD *)v421 + v336);
            if (v335)
              goto LABEL_293;
            v336 = v427 + 6;
            if (v427 + 6 < v420)
            {
              v335 = *((_QWORD *)v421 + v336);
              if (v335)
                goto LABEL_293;
              v336 = v427 + 7;
              if (v427 + 7 < v420)
              {
                v335 = *((_QWORD *)v421 + v336);
                if (v335)
                {
LABEL_293:
                  v334 = v336;
                  goto LABEL_294;
                }
                while (1)
                {
                  v334 = v336 + 1;
                  if (__OFADD__(v336, 1))
                    break;
                  if (v334 >= v420)
                    goto LABEL_304;
                  v335 = *((_QWORD *)v421 + v334);
                  ++v336;
                  if (v335)
                    goto LABEL_294;
                }
LABEL_378:
                __break(1u);
LABEL_379:
                __break(1u);
LABEL_380:
                *(_QWORD *)&v431.f_bsize = 0;
                v431.f_blocks = 0xE000000000000000;
                _StringGuts.grow(_:)(22);
                swift_bridgeObjectRelease();
                *(_QWORD *)&v431.f_bsize = 0xD000000000000014;
                v431.f_blocks = 0x8000000182306980;
                v439.st_dev = v12;
                while (1)
                {
                  v409._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  v268 = (int)v409._object;
                  String.append(_:)(v409);
                  swift_bridgeObjectRelease();
                  LODWORD(v412) = 0;
                  v411 = 99;
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_382:
                  *(_QWORD *)&v431.f_bsize = 0;
                  v431.f_blocks = 0xE000000000000000;
                  _StringGuts.grow(_:)(22);
                  swift_bridgeObjectRelease();
                  *(_QWORD *)&v431.f_bsize = 0xD000000000000014;
                  v431.f_blocks = 0x8000000182306980;
                  *(_DWORD *)v437 = v268;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_304:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v347 = objc_allocWithZone((Class)NSError);
  v348 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v349 = objc_msgSend(v347, sel_initWithDomain_code_userInfo_, v348, v417, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v350 = objc_msgSend(v349, sel_domain);
  v351 = static String._unconditionallyBridgeFromObjectiveC(_:)(v350);
  v353 = v352;

  if (v351 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v353 == v354)
  {
LABEL_310:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    outlined consume of PathOrURL(v424, (uint64_t)v423, v12, 1);
    v323 = v416;
  }
  else
  {
    v356 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v424, (uint64_t)v423, v12, 1);
    v323 = v416;
    if ((v356 & 1) == 0)
    {
      __break(1u);
      goto LABEL_310;
    }
  }
LABEL_311:
  swift_willThrow();
LABEL_312:
  v186 = v323;
  return close(v186);
}

uint64_t @objc static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, void *a4, _QWORD *a5, _QWORD *a6, BOOL *a7, uint64_t a8, unsigned __int8 a9)
{
  id v14;
  uint64_t v15;

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)((uint64_t)v14, v15, a4, a5, a6, a7, a8, a9);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t @objc static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, void *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, BOOL *a8, uint64_t a9, unsigned __int8 a10)
{
  id v15;
  uint64_t v16;

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)((uint64_t)v15, v16, a4, a5, a6, a7, a8, a9, a10);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(__int128 *a1, int a2, void *a3, char a4, uint64_t a5, __int128 *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t);
  _QWORD *v16;
  __int128 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t, uint64_t);
  uint64_t v24;

  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_BYTE *)a1 + 24);
  v18 = *a1;
  v19 = v9;
  v20 = v10;
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)((uint64_t)&v18, a2, a3, a4 & 1, a5, a6, a7, (uint64_t)&v21);
  if (!v8)
  {
    v12 = v22;
    v11 = (unint64_t)v23;
    if (v22)
    {
      v13 = v21;
      if (!v21)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x181A8E5D0);
      }
      v14 = 0;
      v15 = (void (*)(unint64_t, uint64_t))closure #1 in Data.Deallocator._deallocator.getter;
      switch((unint64_t)v23)
      {
        case 0uLL:
          v14 = 0;
          v15 = (void (*)(unint64_t, uint64_t))closure #4 in Data.Deallocator._deallocator.getter;
          goto LABEL_10;
        case 1uLL:
          goto LABEL_10;
        case 2uLL:
          v14 = 0;
          v15 = (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter;
          goto LABEL_10;
        case 3uLL:
          v14 = 0;
          v15 = (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError;
          goto LABEL_10;
        case 4uLL:
          goto LABEL_14;
        default:
          v15 = v23;
          v14 = v24;
LABEL_10:
          type metadata accessor for __DataStorage();
          swift_allocObject();
          outlined copy of Data.Deallocator?(v11);
          swift_retain();
          v16 = (_QWORD *)__DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v12, 0, v15, v14, 0);
          v7 = specialized Data._Representation.init(_:count:)(v16, v12);
          swift_release();
          break;
      }
    }
    else
    {
      v7 = 0;
    }
    outlined consume of Data.Deallocator?(v11);
  }
  return v7;
}

uint64_t closure #1 in readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  if (a1)
  {
    result = open(_:_:_:)();
    *a2 = result;
    return result;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v4 = objc_allocWithZone((Class)NSError);
  v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v5, 258, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v7 = objc_msgSend(v6, sel_domain);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v10 == v11)
    goto LABEL_9;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_bridgeObjectRelease_n();
  }
  return swift_willThrow();
}

void readBytesFromFileDescriptor(_:path:buffer:length:readUntilLength:reportProgress:)(int a1, uint64_t a2, char *a3, uint64_t a4, char a5, unint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  ssize_t v19;
  uint64_t v20;
  Swift::String v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  id v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 *v89;
  _OWORD *v90;
  __int128 *v91;
  _OWORD *v92;
  _OWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  _OWORD *v96;
  unint64_t i;
  int64_t v98;
  unint64_t v99;
  int64_t v100;
  int64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t *v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 *v128;
  _OWORD *v129;
  _OWORD *v130;
  __int128 *v131;
  _OWORD *v132;
  _OWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  _OWORD *v136;
  unint64_t j;
  int64_t v138;
  unint64_t v139;
  int64_t v140;
  int64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  id v154;
  id v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v161;
  Swift::String v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v173;
  int64_t v174;
  char v175;
  uint64_t v176;
  int64_t v177;
  int64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD v186[4];
  Swift::String v187;
  _QWORD v188[4];
  _OWORD v189[2];
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;

  v10 = *(_QWORD *)(a2 + 8);
  v168 = *(void **)a2;
  v11 = *(_QWORD *)(a2 + 16);
  v175 = *(_BYTE *)(a2 + 24);
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_currentProgress);

  v182 = 0;
  v14 = a4;
  if (v13)
  {
    if ((a6 & 1) != 0)
    {
      v182 = objc_msgSend(v12, sel_progressWithTotalUnitCount_, a4);
      v14 = 4096;
      if (a4 / 100 > 4096)
        v14 = a4 / 100;
    }
  }
  if (a4 < 1)
  {
    v16 = a4;
    goto LABEL_42;
  }
  v165 = v11;
  v166 = v10;
  if (v14 >= 0x7FFFFFFF)
    v15 = 0x7FFFFFFFLL;
  else
    v15 = v14;
  v176 = v14;
  v179 = v15;
  v16 = a4;
  v169 = v15;
LABEL_10:
  if (v182)
  {
    a6 = (unint64_t)v182;
    if (objc_msgSend((id)a6, sel_isCancelled))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v74 = objc_allocWithZone((Class)NSError);
      v75 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v76 = objc_msgSend(v74, sel_initWithDomain_code_userInfo_, v75, 3072, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v77 = objc_msgSend(v76, sel_domain);
      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      v80 = v79;

      if (v78 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v80 != v81)
      {
        v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v83 & 1) != 0)
          goto LABEL_85;
        __break(1u);
      }
LABEL_84:
      swift_bridgeObjectRelease_n();
      goto LABEL_85;
    }

    v14 = v176;
  }
  if (v14 < 0)
  {
    v18 = 0;
  }
  else
  {
    if ((unint64_t)v16 >= 0x7FFFFFFF)
      v17 = 0x7FFFFFFFLL;
    else
      v17 = v16;
    if (v16 < v15)
      v18 = (_OWORD *)v17;
    else
      v18 = (_OWORD *)v179;
  }
  while (1)
  {
    if (!v182)
      goto LABEL_23;
    a6 = (unint64_t)v182;
    if (objc_msgSend((id)a6, sel_isCancelled))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v31 = objc_allocWithZone((Class)NSError);
      v32 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v33 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, 3072, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v34 = objc_msgSend(v33, sel_domain);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

      if (v35 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v37 != v38)
      {
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
        {
          __break(1u);
          goto LABEL_55;
        }
LABEL_85:
        swift_willThrow();

        return;
      }
      goto LABEL_84;
    }

LABEL_23:
    v19 = read(a1, a3, (size_t)v18);
    if (v19 < (uint64_t)0xFFFFFFFF80000000)
      break;
    if (v19 > 0x7FFFFFFF)
      goto LABEL_172;
    if ((v19 & 0x80000000) == 0)
    {
      a6 = v19;
      if (!(_DWORD)v19)
        goto LABEL_42;
      v20 = v19;
      v16 -= v19;
      if (v16 < 0)
      {
        if (v182)
        {
          v16 = 0;
          goto LABEL_35;
        }
        goto LABEL_173;
      }
      if (!v182)
      {
        if ((a5 & 1) != 0)
          goto LABEL_38;
LABEL_37:
        if ((unint64_t)v18 <= a6)
          goto LABEL_38;
        goto LABEL_42;
      }
LABEL_35:
      if (__OFSUB__(a4, v16))
        goto LABEL_183;
      v164 = v19;
      objc_msgSend(v182, sel_setCompletedUnitCount_, a4 - v16);
      v20 = v164;
      if ((a5 & 1) == 0)
        goto LABEL_37;
LABEL_38:
      a3 += v20;
      v14 = v176;
      v15 = v169;
      if (!v16)
      {
LABEL_42:

        goto LABEL_43;
      }
      goto LABEL_10;
    }
    if (MEMORY[0x186DA4118]() != 4)
      goto LABEL_46;
  }
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  v16 = 0;
  if ((a5 & 1) != 0 || (unint64_t)v18 <= a6)
    goto LABEL_42;
LABEL_43:
  if (__OFSUB__(a4, v16))
  {
    __break(1u);
LABEL_46:
    LODWORD(v18) = MEMORY[0x186DA4118]();
    v21._countAndFlagsBits = 1684104562;
    v21._object = (void *)0xE400000000000000;
    logFileIOErrno(_:at:)((Swift::Int32)v18, v21);
    if ((v175 & 1) != 0)
    {
      v184 = MEMORY[0x1E0DEE9E0];
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v24 = v23;
      v188[0] = v165;
      lazy protocol witness table accessor for type URL and conformance URL();
      v25 = v168;
      swift_retain_n();
      swift_retain_n();
      v26 = v25;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v190, (uint64_t)v22, v24);
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v29 = v28;
      *(_QWORD *)&v190 = v26;
      *((_QWORD *)&v190 + 1) = v166;
      *(_QWORD *)&v191 = v165;
      v187 = URL.path(percentEncoded:)(0);
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v190, (uint64_t)v27, v29);
      v193 = v184;
      swift_bridgeObjectRetain();
      if ((_DWORD)v18 == 102)
      {
LABEL_48:
        v30 = 256;
      }
      else
      {
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_188;
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v49 = v48;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v50 = (int)POSIXErrorCode.rawValue.getter();
        v51 = objc_allocWithZone((Class)NSError);
        v52 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v53 = objc_msgSend(v51, sel_initWithDomain_code_userInfo_, v52, v50, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v54 = objc_msgSend(v53, sel_domain);
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v57 = v56;

        if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v57 == v58)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v72 & 1) == 0)
            goto LABEL_186;
        }
        v187._countAndFlagsBits = (uint64_t)v53;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v190, (uint64_t)v47, v49);
        v30 = 263;
        switch((int)v18)
        {
          case 1:
          case 13:
            v30 = 257;
            break;
          case 2:
            v30 = 260;
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
            goto LABEL_48;
          case 27:
            break;
          default:
            if ((_DWORD)v18 != 63)
              goto LABEL_48;
            v30 = 258;
            break;
        }
      }
      v84 = v193;
      v163 = v30;
      if (*(_QWORD *)(v193 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v85 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v85 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v170 = v84 + 64;
      v86 = -1;
      v87 = -1 << *(_BYTE *)(v84 + 32);
      if (-v87 < 64)
        v86 = ~(-1 << -(char)v87);
      v88 = v86 & *(_QWORD *)(v84 + 64);
      v173 = (unint64_t)(63 - v87) >> 6;
      v89 = &v191;
      v18 = v186;
      v90 = v188;
      swift_bridgeObjectRetain();
      v177 = 0;
      if (v88)
        goto LABEL_95;
LABEL_96:
      v98 = v177 + 1;
      if (__OFADD__(v177, 1))
        goto LABEL_181;
      if (v98 < v173)
      {
        v99 = *(_QWORD *)(v170 + 8 * v98);
        v100 = v177 + 1;
        if (v99)
          goto LABEL_115;
        v100 = v177 + 2;
        if (v177 + 2 < v173)
        {
          v99 = *(_QWORD *)(v170 + 8 * v100);
          if (v99)
            goto LABEL_115;
          v100 = v177 + 3;
          if (v177 + 3 < v173)
          {
            v99 = *(_QWORD *)(v170 + 8 * v100);
            if (v99)
              goto LABEL_115;
            v100 = v177 + 4;
            if (v177 + 4 < v173)
            {
              v99 = *(_QWORD *)(v170 + 8 * v100);
              if (v99)
                goto LABEL_115;
              v100 = v177 + 5;
              if (v177 + 5 < v173)
              {
                v99 = *(_QWORD *)(v170 + 8 * v100);
                if (v99)
                  goto LABEL_115;
                v100 = v177 + 6;
                if (v177 + 6 < v173)
                {
                  v99 = *(_QWORD *)(v170 + 8 * v100);
                  if (v99)
                    goto LABEL_115;
                  v101 = v177 + 7;
                  if (v177 + 7 < v173)
                  {
                    v99 = *(_QWORD *)(v170 + 8 * v101);
                    if (!v99)
                    {
                      while (1)
                      {
                        v100 = v101 + 1;
                        if (__OFADD__(v101, 1))
                          goto LABEL_184;
                        if (v100 >= v173)
                          goto LABEL_121;
                        v99 = *(_QWORD *)(v170 + 8 * v100);
                        ++v101;
                        if (v99)
                          goto LABEL_115;
                      }
                    }
                    v100 = v177 + 7;
LABEL_115:
                    v177 = v100;
                    v180 = (v99 - 1) & v99;
                    for (i = __clz(__rbit64(v99)) + (v100 << 6); ; i = __clz(__rbit64(v88)) | (v177 << 6))
                    {
                      v102 = (uint64_t *)(*(_QWORD *)(v84 + 48) + 16 * i);
                      v104 = *v102;
                      v103 = v102[1];
                      outlined init with copy of AnyHashable(*(_QWORD *)(v84 + 56) + 40 * i, (uint64_t)v89);
                      *(_QWORD *)&v190 = v104;
                      *((_QWORD *)&v190 + 1) = v103;
                      v185 = v103;
                      swift_bridgeObjectRetain();
                      swift_dynamicCast();
                      v105 = v104;
                      outlined init with take of Any(v18, v90);
                      outlined init with take of Any(v90, v189);
                      outlined init with take of Any(v189, &v187);
                      v106 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v185);
                      v107 = v106;
                      if ((v108 & 1) != 0)
                      {
                        v91 = v89;
                        v92 = v90;
                        v93 = v18;
                        v94 = v84;
                        v95 = (uint64_t *)(v85[6] + 16 * v106);
                        swift_bridgeObjectRelease();
                        *v95 = v105;
                        v95[1] = v185;
                        v84 = v94;
                        v18 = v93;
                        v90 = v92;
                        v89 = v91;
                        v96 = (_OWORD *)(v85[7] + 32 * v107);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
                        outlined init with take of Any(&v187, v96);
                        v88 = v180;
                        if (!v180)
                          goto LABEL_96;
                      }
                      else
                      {
                        if (v85[2] >= v85[3])
                        {
                          __break(1u);
                          goto LABEL_178;
                        }
                        *(_QWORD *)((char *)v85 + ((v106 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v106;
                        v109 = (uint64_t *)(v85[6] + 16 * v106);
                        *v109 = v105;
                        v109[1] = v185;
                        outlined init with take of Any(&v187, (_OWORD *)(v85[7] + 32 * v106));
                        v110 = v85[2];
                        v111 = __OFADD__(v110, 1);
                        v112 = v110 + 1;
                        if (v111)
                          goto LABEL_179;
                        v85[2] = v112;
                        v88 = v180;
                        if (!v180)
                          goto LABEL_96;
                      }
LABEL_95:
                      v180 = (v88 - 1) & v88;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_121:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v113 = objc_allocWithZone((Class)NSError);
      v114 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v115 = objc_msgSend(v113, sel_initWithDomain_code_userInfo_, v114, v163, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v116 = objc_msgSend(v115, sel_domain);
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
      v119 = v118;

      if (v117 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v119 != v120)
      {
        v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v168, v166, v165, 1);
        if ((v122 & 1) != 0)
        {
LABEL_170:
          swift_willThrow();

          return;
        }
        __break(1u);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      outlined consume of PathOrURL(v168, v166, v165, 1);
      goto LABEL_170;
    }
LABEL_55:
    v183 = MEMORY[0x1E0DEE9E0];
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v43 = v42;
    v187._countAndFlagsBits = (uint64_t)v168;
    v187._object = (void *)v166;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v190, (uint64_t)v41, v43);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v46 = v45;
    URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v168, v166, (uint64_t)&v187);
    if (v187._countAndFlagsBits)
    {
      v186[0] = v188[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v190 = 0u;
      v191 = 0u;
      v192 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v190, (uint64_t)v44, v46);
    v193 = v183;
    swift_bridgeObjectRetain();
    if ((_DWORD)v18 == 102)
    {
LABEL_63:
      v59 = 256;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        goto LABEL_188;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v62 = v61;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v63 = (int)POSIXErrorCode.rawValue.getter();
      v64 = objc_allocWithZone((Class)NSError);
      v65 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v66 = objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, v63, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v67 = objc_msgSend(v66, sel_domain);
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v70 = v69;

      if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v70 == v71)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v73 & 1) == 0)
          goto LABEL_187;
      }
      v187._countAndFlagsBits = (uint64_t)v66;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v190, (uint64_t)v60, v62);
      v59 = 263;
      switch((int)v18)
      {
        case 1:
        case 13:
          v59 = 257;
          break;
        case 2:
          v59 = 260;
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_63;
        case 27:
          break;
        default:
          if ((_DWORD)v18 != 63)
            goto LABEL_63;
          v59 = 258;
          break;
      }
    }
    v123 = v193;
    v167 = v59;
    if (*(_QWORD *)(v193 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v124 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v124 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v171 = v123 + 64;
    v125 = -1;
    v126 = -1 << *(_BYTE *)(v123 + 32);
    if (-v126 < 64)
      v125 = ~(-1 << -(char)v126);
    v127 = v125 & *(_QWORD *)(v123 + 64);
    v174 = (unint64_t)(63 - v126) >> 6;
    v128 = &v191;
    v129 = v186;
    v130 = v188;
    swift_bridgeObjectRetain();
    v178 = 0;
    if (v127)
      goto LABEL_137;
LABEL_138:
    v138 = v178 + 1;
    if (__OFADD__(v178, 1))
      goto LABEL_182;
    if (v138 < v174)
    {
      v139 = *(_QWORD *)(v171 + 8 * v138);
      v140 = v178 + 1;
      if (v139)
        goto LABEL_157;
      v140 = v178 + 2;
      if (v178 + 2 >= v174)
        goto LABEL_163;
      v139 = *(_QWORD *)(v171 + 8 * v140);
      if (v139)
        goto LABEL_157;
      v140 = v178 + 3;
      if (v178 + 3 >= v174)
        goto LABEL_163;
      v139 = *(_QWORD *)(v171 + 8 * v140);
      if (v139)
        goto LABEL_157;
      v140 = v178 + 4;
      if (v178 + 4 >= v174)
        goto LABEL_163;
      v139 = *(_QWORD *)(v171 + 8 * v140);
      if (v139)
        goto LABEL_157;
      v140 = v178 + 5;
      if (v178 + 5 >= v174)
        goto LABEL_163;
      v139 = *(_QWORD *)(v171 + 8 * v140);
      if (v139)
        goto LABEL_157;
      v140 = v178 + 6;
      if (v178 + 6 >= v174)
        goto LABEL_163;
      v139 = *(_QWORD *)(v171 + 8 * v140);
      if (v139)
      {
LABEL_157:
        v178 = v140;
        v181 = (v139 - 1) & v139;
        for (j = __clz(__rbit64(v139)) + (v140 << 6); ; j = __clz(__rbit64(v127)) | (v178 << 6))
        {
          v142 = (_QWORD *)(*(_QWORD *)(v123 + 48) + 16 * j);
          v144 = (_OWORD *)*v142;
          v143 = v142[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v123 + 56) + 40 * j, (uint64_t)v128);
          *(_QWORD *)&v190 = v144;
          *((_QWORD *)&v190 + 1) = v143;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v18 = v144;
          v145 = v143;
          outlined init with take of Any(v129, v130);
          outlined init with take of Any(v130, v189);
          outlined init with take of Any(v189, &v187);
          v146 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18, v143);
          v147 = v146;
          if ((v148 & 1) != 0)
          {
            v131 = v128;
            v132 = v130;
            v133 = v129;
            v134 = v123;
            v135 = (_QWORD *)(v124[6] + 16 * v146);
            swift_bridgeObjectRelease();
            *v135 = v18;
            v135[1] = v145;
            v123 = v134;
            v129 = v133;
            v130 = v132;
            v128 = v131;
            v136 = (_OWORD *)(v124[7] + 32 * v147);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
            outlined init with take of Any(&v187, v136);
            v127 = v181;
            if (!v181)
              goto LABEL_138;
          }
          else
          {
            if (v124[2] >= v124[3])
            {
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              *(_QWORD *)&v190 = 0;
              *((_QWORD *)&v190 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              *(_QWORD *)&v190 = 0xD000000000000014;
              *((_QWORD *)&v190 + 1) = 0x8000000182306980;
              LODWORD(v187._countAndFlagsBits) = (_DWORD)v18;
              v162._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v162);
              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181A8FC3CLL);
            }
            *(_QWORD *)((char *)v124 + ((v146 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v146;
            v149 = (_QWORD *)(v124[6] + 16 * v146);
            *v149 = v18;
            v149[1] = v145;
            outlined init with take of Any(&v187, (_OWORD *)(v124[7] + 32 * v146));
            v150 = v124[2];
            v111 = __OFADD__(v150, 1);
            v151 = v150 + 1;
            if (v111)
              goto LABEL_180;
            v124[2] = v151;
            v127 = v181;
            if (!v181)
              goto LABEL_138;
          }
LABEL_137:
          v181 = (v127 - 1) & v127;
        }
      }
      v141 = v178 + 7;
      if (v178 + 7 < v174)
      {
        v139 = *(_QWORD *)(v171 + 8 * v141);
        if (v139)
        {
          v140 = v178 + 7;
          goto LABEL_157;
        }
        while (1)
        {
          v140 = v141 + 1;
          if (__OFADD__(v141, 1))
            goto LABEL_185;
          if (v140 >= v174)
            break;
          v139 = *(_QWORD *)(v171 + 8 * v140);
          ++v141;
          if (v139)
            goto LABEL_157;
        }
      }
    }
LABEL_163:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v152 = objc_allocWithZone((Class)NSError);
    v153 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v154 = objc_msgSend(v152, sel_initWithDomain_code_userInfo_, v153, v167, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v155 = objc_msgSend(v154, sel_domain);
    v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
    v158 = v157;

    if (v156 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v158 != v159)
    {
      v161 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v161 & 1) != 0)
        goto LABEL_170;
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_170;
  }
}

unint64_t specialized static NSData._readBytes(fromPath:maxLength:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, _QWORD *a5, BOOL *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  _BOOL4 v14;
  void *v15;
  unint64_t result;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  char v20;
  _QWORD v21[3];
  uint64_t v22;

  v22 = MEMORY[0x1E0DEE9E0];
  v19[0] = a1;
  v19[1] = a2;
  v19[2] = 0;
  v20 = 0;
  v14 = a3 == (void *)0x7FFFFFFFFFFFFFFFLL;
  if (a3 == (void *)0x7FFFFFFFFFFFFFFFLL)
    v15 = 0;
  else
    v15 = a3;
  swift_bridgeObjectRetain();
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)((uint64_t)v19, a8, v15, v14, a7, MEMORY[0x1E0DEE9D8], &v22, (uint64_t)v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v8)
  {
    v17 = v21[1];
    v18 = v21[2];
    *a4 = v21[0];
    *a5 = v17;
    *a6 = v18 == 1;
    return outlined consume of Data.Deallocator?(v18);
  }
  return result;
}

uint64_t specialized static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, BOOL *a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;
  _BOOL4 v12;
  void *v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v34[3];
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = MEMORY[0x1E0DEE9E0];
  v34[0] = a1;
  v34[1] = a2;
  v34[2] = 0;
  v35 = 0;
  v12 = a3 == (void *)0x7FFFFFFFFFFFFFFFLL;
  if (a3 == (void *)0x7FFFFFFFFFFFFFFFLL)
    v13 = 0;
  else
    v13 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.TextEncoding"));
  *(_QWORD *)(inited + 40) = v15;
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)((uint64_t)v34, a9, v13, v12, a8, (__int128 *)inited, &v39, (uint64_t)&v36);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v9)
  {
    v16 = v36;
    v30 = v37;
    v17 = v38;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.TextEncoding"));
    v20 = v39;
    if (*(_QWORD *)(v39 + 16)
      && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18, v19), (v22 & 1) != 0))
    {
      v29 = v16;
      v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v21);
      v25 = *v23;
      v24 = v23[1];
      outlined copy of Data._Representation(*v23, v24);
      swift_bridgeObjectRelease();
      encodingFromDataForExtendedAttribute(_:)(v25, v24, (uint64_t)&v36);
      if ((v37 & 1) == 0)
      {
        *a4 = v36;
        outlined consume of Data._Representation(v25, v24);
        v16 = v29;
        v27 = v30;
        goto LABEL_11;
      }
      outlined consume of Data._Representation(v25, v24);
      v26 = a4;
      v16 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
      v26 = a4;
    }
    v27 = v30;
    *v26 = 0xFFFFFFFFLL;
LABEL_11:
    *a5 = v16;
    *a6 = v27;
    *a7 = v17 == 1;
    outlined consume of Data.Deallocator?(v17);
  }
  return swift_bridgeObjectRelease();
}

unint64_t outlined consume of Data.Deallocator?(unint64_t result)
{
  if (result != 4)
    return outlined consume of Data.Deallocator(result);
  return result;
}

unint64_t outlined consume of Data.Deallocator(unint64_t result)
{
  if (result >= 4)
    return swift_release();
  return result;
}

uint64_t outlined consume of PathOrURL(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    return swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type POSIXError and conformance POSIXError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXError and conformance POSIXError;
  if (!lazy protocol witness table cache variable for type POSIXError and conformance POSIXError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for POSIXError, &type metadata for POSIXError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXError and conformance POSIXError);
  }
  return result;
}

void partial apply for closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(char *a1)
{
  uint64_t v1;

  closure #1 in readExtendedAttributesFromFileDescriptor(_:attrsToRead:)(a1, *(_DWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t outlined copy of Data.Deallocator?(unint64_t result)
{
  if (result != 4)
    return outlined copy of Data.Deallocator(result);
  return result;
}

id NSFileHandle.readToEnd()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v9[0] = 0;
  v1 = objc_msgSend(v0, sel_readDataToEndOfFileAndReturnError_, v9);
  v2 = v9[0];
  if (v1)
  {
    v3 = v1;
    v4 = v2;
    specialized Data.init(referencing:)(v3);
    v6 = v5;

    __asm { BR              X10 }
  }
  if (v9[0])
  {
    v9[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v7 = (id)_nilObjCError;
  }
  swift_willThrow();
  return v2;
}

id NSFileHandle.read(upToCount:)(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v2 = objc_msgSend(v1, sel_readDataUpToLength_error_, a1, v10);
  v3 = v10[0];
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    specialized Data.init(referencing:)(v4);
    v7 = v6;

    __asm { BR              X10 }
  }
  if (v10[0])
  {
    v10[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v8 = (id)_nilObjCError;
  }
  swift_willThrow();
  return v3;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileHandle.offset()()
{
  return (Swift::UInt64)NSFileHandle.offset()((SEL *)&selRef_getOffset_error_);
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileHandle.seekToEnd()()
{
  return (Swift::UInt64)NSFileHandle.offset()((SEL *)&selRef_seekToEndReturningOffset_error_);
}

void *NSFileHandle.offset()(SEL *a1)
{
  void *v1;
  id v2;
  id v3;
  id v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = 0;
  if ((objc_msgSend(v1, *a1, v6, &v5) & 1) != 0)
  {
    v1 = (void *)v6[0];
    v2 = v5;
  }
  else
  {
    if (v5)
    {
      v5;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v3 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v1;
}

uint64_t specialized NSFileHandle.write<A>(contentsOf:)()
{
  void *v0;
  void *v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  id CanPerformWritingInSwiftOverlay;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *i;
  id v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v59;
  id v60;
  int64_t v61;
  uint64_t v62;
  __int128 v63;
  _OWORD v64[3];
  _OWORD v65[2];
  __int128 v66;
  _OWORD v67[2];
  _OWORD v68[2];
  _OWORD v69[2];
  _OWORD v70[2];
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;

  v1 = v0;
  v76 = *MEMORY[0x1E0C80C00];
  if ((_NSFileHandleIsClosed((uint64_t)v0) & 1) == 0)
  {
    CanPerformWritingInSwiftOverlay = (id)_NSFileHandleCanPerformWritingInSwiftOverlay(v0);
    if ((CanPerformWritingInSwiftOverlay & 1) == 0
      || (CanPerformWritingInSwiftOverlay = objc_msgSend(v0, sel_fileDescriptor),
          (CanPerformWritingInSwiftOverlay & 0x80000000) != 0))
    {
      *(_QWORD *)&v72 = MEMORY[0x1E0DEE9D8];
      MEMORY[0x1E0C80A78](CanPerformWritingInSwiftOverlay);
      DispatchData.enumerateBytes(_:)();
      v28 = *(_QWORD *)(v72 + 16);
      if (v28)
      {
        for (i = (uint64_t *)(v72 + 40); ; i += 3)
        {
          v33 = *(i - 1);
          if (v33)
          {
            v34 = *i;
            if (*i)
            {
              type metadata accessor for __DataStorage();
              v35 = swift_allocObject();
              if (v34 <= 0x3FFFFFFFFFFFFFFELL)
              {
                *(_QWORD *)(v35 + 32) = v34;
                *(_QWORD *)(v35 + 40) = 0;
                *(_BYTE *)(v35 + 64) = 0;
                *(_QWORD *)(v35 + 16) = v33;
                *(_QWORD *)(v35 + 24) = v34;
                *(_QWORD *)(v35 + 48) = destructiveProjectEnumData for PredicateCodableError;
                *(_QWORD *)(v35 + 56) = 0;
                specialized Data._Representation.init(_:count:)((_QWORD *)v35, v34);
                __asm { BR              X9 }
              }
              goto LABEL_76;
            }
            v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_init);
            outlined consume of Data._Representation(0, 0xC000000000000000);
            *(_QWORD *)&v72 = 0;
            v31 = objc_msgSend(v1, sel_writeData_error_, v30, &v72);

            if (!v31)
            {
              if (!(_QWORD)v72)
              {
                if (one-time initialization token for _nilObjCError != -1)
                  goto LABEL_80;
                goto LABEL_70;
              }
              (id)v72;
LABEL_71:
              swift_willThrow();
              return swift_bridgeObjectRelease();
            }
            v32 = (id)v72;
          }
          if (!--v28)
            return swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      type metadata accessor for DispatchData();
      lazy protocol witness table accessor for type DispatchData and conformance DispatchData();
      *(_QWORD *)&v69[0] = dispatch thunk of Collection.count.getter();
      v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v72 = MEMORY[0x1E0DEE9D8];
      MEMORY[0x1E0C80A78](*(_QWORD *)&v69[0]);
      DispatchData.enumerateBytes(_:)();
      v17 = v72;
      v18 = *(_QWORD *)(v72 + 16);
      if (v18)
      {
        *(_QWORD *)&v72 = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
        v19 = v16;
        v20 = v16[2];
        v21 = 2 * v20;
        v22 = (uint64_t *)(v17 + 40);
        do
        {
          v23 = *(v22 - 1);
          if (v23)
            v24 = *v22;
          else
            v24 = 0;
          *(_QWORD *)&v72 = v19;
          v25 = v19[3];
          v26 = v20 + 1;
          if (v20 >= v25 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v20 + 1, 1);
            v19 = (_QWORD *)v72;
          }
          v22 += 3;
          v19[2] = v26;
          v27 = &v19[v21];
          v27[4] = v23;
          v27[5] = v24;
          v21 += 2;
          v20 = v26;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      v59 = v19[2];
      *(_QWORD *)&v72 = v19 + 4;
      *((_QWORD *)&v72 + 1) = v59;
      closure #3 in NSFileHandle.write<A>(contentsOf:)((uint64_t)&v72, (uint64_t *)v69, v1);
    }
    return swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)&v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *((_QWORD *)&v72 + 1) = v3;
  v4 = MEMORY[0x1E0DEA968];
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = v4;
  *(_QWORD *)(inited + 72) = 0xD00000000000002ELL;
  *(_QWORD *)(inited + 80) = 0x80000001823069A0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v5 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v72);
  swift_retain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v72);
  if ((v7 & 1) != 0)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v62 = v5 + 64;
  *(_QWORD *)(v5 + 64 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  v8 = *(_QWORD *)(v5 + 48) + 40 * v6;
  v9 = v72;
  v10 = v73;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)&v74[0];
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  outlined init with take of Any((_OWORD *)((char *)v74 + 8), (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v6));
  v11 = *(_QWORD *)(v5 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
LABEL_78:
    __break(1u);
    JUMPOUT(0x181A90FC8);
  }
  *(_QWORD *)(v5 + 16) = v13;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v14 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v37 = -1;
  v38 = -1 << *(_BYTE *)(v5 + 32);
  if (-v38 < 64)
    v37 = ~(-1 << -(char)v38);
  v39 = v37 & *(_QWORD *)(v5 + 64);
  v61 = (unint64_t)(63 - v38) >> 6;
  swift_retain();
  v40 = 0;
  while (1)
  {
    if (v39)
    {
      v44 = (v39 - 1) & v39;
      v45 = __clz(__rbit64(v39)) | (v40 << 6);
      v46 = v40;
      goto LABEL_54;
    }
    v47 = v40 + 1;
    if (__OFADD__(v40, 1))
      goto LABEL_75;
    if (v47 >= v61)
      break;
    v48 = *(_QWORD *)(v62 + 8 * v47);
    v46 = v40 + 1;
    if (!v48)
    {
      v46 = v40 + 2;
      if (v40 + 2 >= v61)
        break;
      v48 = *(_QWORD *)(v62 + 8 * v46);
      if (!v48)
      {
        v46 = v40 + 3;
        if (v40 + 3 >= v61)
          break;
        v48 = *(_QWORD *)(v62 + 8 * v46);
        if (!v48)
        {
          v46 = v40 + 4;
          if (v40 + 4 >= v61)
            break;
          v48 = *(_QWORD *)(v62 + 8 * v46);
          if (!v48)
          {
            v46 = v40 + 5;
            if (v40 + 5 >= v61)
              break;
            v48 = *(_QWORD *)(v62 + 8 * v46);
            if (!v48)
            {
              v46 = v40 + 6;
              if (v40 + 6 >= v61)
                break;
              v48 = *(_QWORD *)(v62 + 8 * v46);
              if (!v48)
              {
                v49 = v40 + 7;
                if (v40 + 7 >= v61)
                  break;
                v48 = *(_QWORD *)(v62 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    v46 = v49 + 1;
                    if (__OFADD__(v49, 1))
                      break;
                    if (v46 >= v61)
                      goto LABEL_60;
                    v48 = *(_QWORD *)(v62 + 8 * v46);
                    ++v49;
                    if (v48)
                      goto LABEL_53;
                  }
                  __break(1u);
LABEL_80:
                  swift_once();
LABEL_70:
                  v60 = (id)_nilObjCError;
                  goto LABEL_71;
                }
                v46 = v40 + 7;
              }
            }
          }
        }
      }
    }
LABEL_53:
    v44 = (v48 - 1) & v48;
    v45 = __clz(__rbit64(v48)) + (v46 << 6);
LABEL_54:
    outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v45, (uint64_t)&v72);
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v45, (uint64_t)v74 + 8);
    v70[0] = v74[0];
    v70[1] = v74[1];
    v71 = v75;
    v69[0] = v72;
    v69[1] = v73;
    outlined init with copy of AnyHashable((uint64_t)v69, (uint64_t)v64);
    if (!swift_dynamicCast())
    {
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v69);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_61;
    }
    outlined init with copy of Any((uint64_t)v70 + 8, (uint64_t)v64);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v69);
    outlined init with take of Any(v64, v65);
    v66 = v63;
    outlined init with take of Any(v65, v67);
    v50 = v66;
    outlined init with take of Any(v67, v68);
    outlined init with take of Any(v68, &v66);
    v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50, *((uint64_t *)&v50 + 1));
    v52 = v51;
    if ((v53 & 1) != 0)
    {
      v41 = v5;
      v42 = (_OWORD *)(v14[6] + 16 * v51);
      swift_bridgeObjectRelease();
      *v42 = v50;
      v5 = v41;
      v43 = (_OWORD *)(v14[7] + 32 * v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      outlined init with take of Any(&v66, v43);
      goto LABEL_31;
    }
    if (v14[2] >= v14[3])
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    *(_QWORD *)((char *)v14 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v51;
    *(_OWORD *)(v14[6] + 16 * v51) = v50;
    outlined init with take of Any(&v66, (_OWORD *)(v14[7] + 32 * v51));
    v54 = v14[2];
    v12 = __OFADD__(v54, 1);
    v55 = v54 + 1;
    if (v12)
      goto LABEL_74;
    v14[2] = v55;
LABEL_31:
    v40 = v46;
    v39 = v44;
  }
LABEL_60:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_61:
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v56 = objc_allocWithZone((Class)NSError);
  v57 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

uint64_t specialized _convertToAnyHashable<A>(_:)()
{
  swift_bridgeObjectRetain();
  return AnyHashable.init<A>(_:)();
}

_BYTE *closure #1 in NSFileHandle.write<A>(contentsOf:)(_BYTE *result, _BYTE *a2, void *a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v8;
  unsigned int v9;
  id v10;
  id v11[3];

  v11[2] = *(id *)MEMORY[0x1E0C80C00];
  if (result)
  {
    v4 = (unint64_t)result;
    v5 = a2 - result;
    if (a2 != result)
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      v6 = (_QWORD *)__DataStorage.init(bytes:length:copy:deallocator:offset:)(v4, v5, 0, (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError, 0, 0);
      specialized Data._Representation.init(_:count:)(v6, v5);
      __asm { BR              X10 }
    }
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_init);
    outlined consume of Data._Representation(0, 0xC000000000000000);
    v11[0] = 0;
    v9 = objc_msgSend(a3, sel_writeData_error_, v8, v11);

    if (v9)
    {
      return v11[0];
    }
    else
    {
      if (v11[0])
      {
        v11[0];
      }
      else
      {
        if (one-time initialization token for _nilObjCError != -1)
          swift_once();
        v10 = (id)_nilObjCError;
      }
      return (_BYTE *)swift_willThrow();
    }
  }
  return result;
}

uint64_t closure #3 in NSFileHandle.write<A>(contentsOf:)(uint64_t result, uint64_t *a2, id a3)
{
  uint64_t v3;
  const iovec *v6;
  uint64_t v7;
  unint64_t v8;
  NSError *v9;
  const iovec *v10;
  size_t iov_len;
  BOOL v12;
  NSError *v13;
  char *v14;
  const iovec *v15;
  int v16;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v3 > 0x7FFFFFFF)
    goto LABEL_33;
  if (*a2 < 1)
    return result;
  v6 = *(const iovec **)result;
  do
  {
    while (1)
    {
      result = writev((int)objc_msgSend(a3, sel_fileDescriptor), v6, v3);
      if (result < 0)
        break;
      v7 = *a2 - result;
      if (__OFSUB__(*a2, result))
        goto LABEL_34;
      *a2 = v7;
      if (v7 < 1)
        return result;
      if ((v3 & 0x80000000) != 0)
        goto LABEL_35;
      v8 = 0;
      if ((_DWORD)v3)
      {
        v9 = 0;
        v10 = v6;
        while (1)
        {
          if (v3 == v8)
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          if (!v6)
            goto LABEL_39;
          iov_len = v10->iov_len;
          v12 = __OFADD__(v9, iov_len);
          v13 = (NSError *)((char *)v9 + iov_len);
          if (v12)
            goto LABEL_31;
          if (result < (uint64_t)v13)
            break;
          ++v8;
          ++v10;
          v9 = v13;
          if (v3 == v8)
          {
            v8 = v3;
            goto LABEL_22;
          }
        }
        if (!v10->iov_base)
          goto LABEL_41;
        v12 = __OFSUB__(result, v9);
        v14 = (char *)(result - (_QWORD)v9);
        if (v12)
          goto LABEL_38;
        v10->iov_base = (char *)v10->iov_base + (unint64_t)v14;
LABEL_22:
        if (v8 >> 31)
          goto LABEL_36;
      }
      v12 = __OFSUB__((_DWORD)v3, (_DWORD)v8);
      LODWORD(v3) = v3 - v8;
      if (v12)
        goto LABEL_37;
      v15 = &v6[v8];
      if (v6)
        v6 = v15;
      else
        v6 = 0;
    }
  }
  while (MEMORY[0x186DA4118]() == 35);
  v16 = MEMORY[0x186DA4118]();
  result = _NSErrorWithFilePathAndErrno(v16, 0, 0);
  if (result)
    return swift_willThrow();
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181A91514()
{
  uint64_t (*v0)(uint64_t *, char *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  return v0(&v4, (char *)&v4 + BYTE6(v2));
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x186DA53B4);
}

_BYTE *partial apply for closure #1 in NSFileHandle.write<A>(contentsOf:)(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;

  return closure #1 in NSFileHandle.write<A>(contentsOf:)(a1, a2, *(void **)(v2 + 16));
}

ssize_t partial apply for closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)(ssize_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)(a1, a2, *(_DWORD *)(v2 + 16));
}

uint64_t outlined init with copy of (AnyHashable, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: AnyHashable, value: Any)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in DispatchData.regions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in DispatchData.regions.getter(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

unint64_t lazy protocol witness table accessor for type DispatchData and conformance DispatchData()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchData and conformance DispatchData;
  if (!lazy protocol witness table cache variable for type DispatchData and conformance DispatchData)
  {
    v1 = type metadata accessor for DispatchData();
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF670], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation13JSONReferenceCG_So8NSStringC3key_AH5valuets5NeverOTg5061_s10Foundation10JSONWriterV15serializeObject_5depthySDySSAA13e11CG_SitKFSo8F31C3key_AG5valuetSSAK_AgLt_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v3 = a1;
    v28 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v28;
    v5 = specialized Dictionary.startIndex.getter(v3);
    v6 = 0;
    v7 = v3 + 64;
    v23 = v3 + 80;
    v24 = v1;
    v25 = v4;
    v26 = v3 + 64;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v3 + 32))
    {
      v10 = (unint64_t)v5 >> 6;
      if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(v3 + 36) != v4)
        goto LABEL_24;
      v27 = v6;
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5);
      v12 = String._bridgeToObjectiveCImpl()();
      v13 = v3;
      v15 = *(_QWORD *)(v28 + 16);
      v14 = *(_QWORD *)(v28 + 24);
      swift_retain();
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v28 + 16) = v15 + 1;
      v16 = v28 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v11;
      v8 = 1 << *(_BYTE *)(v13 + 32);
      if (v5 >= v8)
        goto LABEL_25;
      v7 = v26;
      v17 = *(_QWORD *)(v26 + 8 * v10);
      if ((v17 & (1 << v5)) == 0)
        goto LABEL_26;
      v3 = v13;
      v4 = v25;
      if (*(_DWORD *)(v13 + 36) != v25)
        goto LABEL_27;
      v18 = v17 & (-2 << (v5 & 0x3F));
      if (v18)
      {
        v8 = __clz(__rbit64(v18)) | v5 & 0xFFFFFFFFFFFFFFC0;
        v9 = v24;
      }
      else
      {
        v19 = v10 + 1;
        v20 = (unint64_t)(v8 + 63) >> 6;
        v9 = v24;
        if (v10 + 1 < v20)
        {
          v21 = *(_QWORD *)(v26 + 8 * v19);
          if (v21)
          {
LABEL_20:
            v8 = __clz(__rbit64(v21)) + (v19 << 6);
          }
          else
          {
            while (v20 - 2 != v10)
            {
              v21 = *(_QWORD *)(v23 + 8 * v10++);
              if (v21)
              {
                v19 = v10 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      v6 = v27 + 1;
      v5 = v8;
      if (v27 + 1 == v9)
        return v2;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    JUMPOUT(0x181A91B64);
  }
  return v2;
}

uint64_t specialized String.withUTF8<A>(_:)(uint64_t (*a1)(_QWORD *, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = *v1;
  v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v5 = v10;
    return a1(v5, v6);
  }
  v3 = static String._copying(_:)();
  v8 = v7;
  swift_bridgeObjectRelease();
  *v1 = v3;
  v1[1] = v8;
  v4 = v8;
  if ((v8 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v5 = (_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  return a1(v5, v6);
}

unint64_t specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  v34 = v7;
  v8 = 4 * v7;
  v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v28 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v29 = a4 & 0xFFFFFFFFFFFFFFLL;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v31 = v8;
  v32 = v11;
  v30 = 4 * v11;
  v12 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v26 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v27 = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = 15;
  v15 = 15;
  while (v31 != v15 >> 14)
  {
    v16 = v15 & 0xC;
    v17 = v15;
    if (v16 == v10)
      v17 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a3, a4);
    v18 = v17 >> 16;
    if (v17 >> 16 >= v34)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
      goto LABEL_50;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      v20 = String.UTF8View._foreignSubscript(position:)();
      if (v16 == v10)
        goto LABEL_19;
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v35 = a3;
      v36 = v29;
      v20 = *((_BYTE *)&v35 + v18);
      if (v16 == v10)
        goto LABEL_19;
    }
    else
    {
      v19 = v28;
      if ((a3 & 0x1000000000000000) == 0)
        v19 = _StringObject.sharedUTF8.getter();
      v20 = *(_BYTE *)(v19 + v18);
      if (v16 == v10)
      {
LABEL_19:
        v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a3, a4);
        if ((a4 & 0x1000000000000000) == 0)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_25;
    }
LABEL_20:
    if (v34 <= v15 >> 16)
      goto LABEL_60;
    v15 = String.UTF8View._foreignIndex(after:)();
LABEL_25:
    if (v30 == v14 >> 14)
      return 0;
    v18 = v14 & 0xC;
    v21 = v14;
    if (v18 == v13)
      v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
    v22 = v21 >> 16;
    if (v21 >> 16 >= v32)
      goto LABEL_59;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v24 = String.UTF8View._foreignSubscript(position:)();
      if (v18 == v13)
        goto LABEL_34;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v35 = a1;
      v36 = v27;
      v24 = *((_BYTE *)&v35 + v22);
      if (v18 == v13)
        goto LABEL_34;
    }
    else
    {
      v23 = v26;
      if ((a1 & 0x1000000000000000) == 0)
        v23 = _StringObject.sharedUTF8.getter();
      v24 = *(_BYTE *)(v23 + v22);
      if (v18 == v13)
      {
LABEL_34:
        v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_35;
        goto LABEL_39;
      }
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_35:
      if (v32 <= v14 >> 16)
        goto LABEL_61;
      v14 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_40;
    }
LABEL_39:
    v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_40:
    if (v20 < v24)
      return 1;
    if (v24 < v20)
      return 0;
  }
  if (v30 == v14 >> 14)
    return 0;
  v18 = v14 & 0xC;
  result = v14;
  if (v18 == v13)
    goto LABEL_62;
LABEL_50:
  if (v32 <= result >> 16)
  {
    __break(1u);
LABEL_64:
    result = String.UTF8View._foreignSubscript(position:)();
    if (v18 == v13)
      goto LABEL_65;
    goto LABEL_54;
  }
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_64;
  if (!(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    result = _StringObject.sharedUTF8.getter();
    if (v18 == v13)
      goto LABEL_65;
LABEL_54:
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_55;
    return 1;
  }
  if (v18 != v13)
    goto LABEL_54;
LABEL_65:
  result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  v14 = result;
  if ((a2 & 0x1000000000000000) == 0)
    return 1;
LABEL_55:
  if (v32 > v14 >> 16)
  {
    String.UTF8View._foreignIndex(after:)();
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  int v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  Swift::Int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  Swift::Int v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  unint64_t *__dst;
  char *v110;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  v108 = v3;
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if ((unint64_t)v3 >= 2)
    {
      v85 = *v2;
      v86 = -1;
      v87 = 1;
      v88 = v85;
      do
      {
        v89 = (unint64_t *)(v85 + 24 * v87);
        v90 = *v89;
        v91 = v89[1];
        v92 = v86;
        v93 = v88;
        do
        {
          result = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(_QWORD *)v93, *(_QWORD *)(v93 + 8), v90, v91);
          if ((result & 1) == 0)
            break;
          if (!v85)
            goto LABEL_143;
          v94 = *(_OWORD *)(v93 + 32);
          v95 = *(_QWORD *)(v93 + 16);
          v90 = *(_QWORD *)(v93 + 24);
          *(_OWORD *)(v93 + 24) = *(_OWORD *)v93;
          *(_QWORD *)(v93 + 40) = v95;
          *(_QWORD *)v93 = v90;
          *(_OWORD *)(v93 + 8) = v94;
          v91 = v94;
          v93 -= 24;
        }
        while (!__CFADD__(v92++, 1));
        ++v87;
        v88 += 24;
        --v86;
      }
      while (v87 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_148;
  v107 = result;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (unint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v97 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_105:
      v106 = v8;
      if (v11 >= 2)
      {
        v98 = *v2;
        do
        {
          v99 = v11 - 2;
          if (v11 < 2)
            goto LABEL_134;
          if (!v98)
            goto LABEL_147;
          v100 = v97;
          v101 = *(_QWORD *)&v97[16 * v99 + 32];
          v102 = *(_QWORD *)&v97[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((unint64_t *)(v98 + 24 * v101), (unint64_t *)(v98 + 24 * *(_QWORD *)&v97[16 * v11 + 16]), v98 + 24 * v102, __dst);
          if (v1)
            break;
          if (v102 < v101)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v100 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v100);
          if (v99 >= *((_QWORD *)v100 + 2))
            goto LABEL_136;
          v103 = &v100[16 * v99 + 32];
          *(_QWORD *)v103 = v101;
          *((_QWORD *)v103 + 1) = v102;
          v104 = *((_QWORD *)v100 + 2);
          if (v11 > v104)
            goto LABEL_137;
          memmove(&v100[16 * v11 + 16], &v100[16 * v11 + 32], 16 * (v104 - v11));
          v97 = v100;
          *((_QWORD *)v100 + 2) = v104 - 1;
          v11 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: JSONReference));
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v106 = v7;
    __dst = (unint64_t *)(v7 + 32);
  }
  v9 = 0;
  v105 = v2;
  v10 = *v2;
  v110 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(_QWORD *)(v10 + 24 * v12), *(_QWORD *)(v10 + 24 * v12 + 8), *(_QWORD *)(v10 + 24 * v9), *(_QWORD *)(v10 + 24 * v9 + 8));
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v14 = (unint64_t *)(v10 + 32 + 24 * v12);
        v15 = v14;
        while (1)
        {
          v16 = v15[3];
          v15 += 3;
          if (((v13 ^ specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(v14 - 1), *v14, v14[2], v16)) & 1) != 0)break;
          ++v9;
          v14 = v15;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if ((v13 & 1) != 0)
      {
        if (v9 < v12)
          goto LABEL_140;
        if (v12 < v9)
        {
          v17 = 24 * v9;
          v18 = 24 * v12;
          v19 = v9;
          v20 = v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_146;
              v21 = v10 + v18;
              v22 = v10 + v17;
              v23 = *(_QWORD *)(v10 + v18);
              v24 = *(_OWORD *)(v10 + v18 + 8);
              v25 = *(_OWORD *)(v10 + v17 - 24);
              *(_QWORD *)(v21 + 16) = *(_QWORD *)(v10 + v17 - 8);
              *(_OWORD *)v21 = v25;
              *(_QWORD *)(v22 - 24) = v23;
              *(_OWORD *)(v22 - 16) = v24;
            }
            ++v20;
            v17 -= 24;
            v18 += 24;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_138;
    if (v9 - v12 >= v107)
      goto LABEL_39;
    if (__OFADD__(v12, v107))
      goto LABEL_141;
    v26 = v12 + v107 >= v3 ? v3 : v12 + v107;
    if (v26 < v12)
      break;
    if (v9 != v26)
    {
      v77 = v10 - 24 + 24 * v9;
      v27 = v110;
      do
      {
        v78 = (unint64_t *)(v10 + 24 * v9);
        v79 = *v78;
        v80 = v78[1];
        v81 = v12;
        v82 = v77;
        do
        {
          if ((specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(_QWORD *)v82, *(_QWORD *)(v82 + 8), v79, v80) & 1) == 0)
            break;
          if (!v10)
            goto LABEL_144;
          v83 = *(_OWORD *)(v82 + 32);
          v84 = *(_QWORD *)(v82 + 16);
          v79 = *(_QWORD *)(v82 + 24);
          *(_OWORD *)(v82 + 24) = *(_OWORD *)v82;
          *(_QWORD *)(v82 + 40) = v84;
          *(_QWORD *)v82 = v79;
          *(_OWORD *)(v82 + 8) = v83;
          v80 = v83;
          v82 -= 24;
          ++v81;
        }
        while (v9 != v81);
        ++v9;
        v77 += 24;
      }
      while (v9 != v26);
      v9 = v26;
      if (v26 < v12)
        goto LABEL_133;
      goto LABEL_40;
    }
LABEL_39:
    v27 = v110;
    if (v9 < v12)
      goto LABEL_133;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v29 = *((_QWORD *)v27 + 2);
    v28 = *((_QWORD *)v27 + 3);
    v11 = v29 + 1;
    if (v29 >= v28 >> 1)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v27);
    *((_QWORD *)v27 + 2) = v11;
    v30 = v27 + 32;
    v31 = &v27[16 * v29 + 32];
    *(_QWORD *)v31 = v12;
    *((_QWORD *)v31 + 1) = v9;
    v110 = v27;
    if (v29)
    {
      while (1)
      {
        v32 = v11 - 1;
        if (v11 >= 4)
        {
          v37 = &v30[16 * v11];
          v38 = *((_QWORD *)v37 - 8);
          v39 = *((_QWORD *)v37 - 7);
          v43 = __OFSUB__(v39, v38);
          v40 = v39 - v38;
          if (v43)
            goto LABEL_122;
          v42 = *((_QWORD *)v37 - 6);
          v41 = *((_QWORD *)v37 - 5);
          v43 = __OFSUB__(v41, v42);
          v35 = v41 - v42;
          v36 = v43;
          if (v43)
            goto LABEL_123;
          v44 = v11 - 2;
          v45 = &v30[16 * v11 - 32];
          v47 = *(_QWORD *)v45;
          v46 = *((_QWORD *)v45 + 1);
          v43 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          if (v43)
            goto LABEL_125;
          v43 = __OFADD__(v35, v48);
          v49 = v35 + v48;
          if (v43)
            goto LABEL_128;
          if (v49 >= v40)
          {
            v67 = &v30[16 * v32];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v43 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v43)
              goto LABEL_132;
            v60 = v35 < v70;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v61 = *((_QWORD *)v27 + 4);
            v62 = *((_QWORD *)v27 + 5);
            v43 = __OFSUB__(v62, v61);
            v54 = v62 - v61;
            v55 = v43;
            goto LABEL_70;
          }
          v34 = *((_QWORD *)v27 + 4);
          v33 = *((_QWORD *)v27 + 5);
          v43 = __OFSUB__(v33, v34);
          v35 = v33 - v34;
          v36 = v43;
        }
        if ((v36 & 1) != 0)
          goto LABEL_124;
        v44 = v11 - 2;
        v50 = &v30[16 * v11 - 32];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v53 = __OFSUB__(v51, v52);
        v54 = v51 - v52;
        v55 = v53;
        if (v53)
          goto LABEL_127;
        v56 = &v30[16 * v32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v43 = __OFSUB__(v57, v58);
        v59 = v57 - v58;
        if (v43)
          goto LABEL_130;
        if (__OFADD__(v54, v59))
          goto LABEL_131;
        if (v54 + v59 >= v35)
        {
          v60 = v35 < v59;
LABEL_76:
          if (v60)
            v32 = v44;
          goto LABEL_78;
        }
LABEL_70:
        if ((v55 & 1) != 0)
          goto LABEL_126;
        v63 = &v30[16 * v32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v43 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v43)
          goto LABEL_129;
        if (v66 < v54)
          goto LABEL_15;
LABEL_78:
        v71 = v32 - 1;
        if (v32 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_145;
        v72 = &v30[16 * v71];
        v73 = *(_QWORD *)v72;
        v74 = &v30[16 * v32];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((unint64_t *)(v10 + 24 * *(_QWORD *)v72), (unint64_t *)(v10 + 24 * *(_QWORD *)v74), v10 + 24 * v75, __dst);
        if (v1)
          goto LABEL_95;
        if (v75 < v73)
          goto LABEL_119;
        if (v32 > *((_QWORD *)v110 + 2))
          goto LABEL_120;
        *(_QWORD *)v72 = v73;
        *(_QWORD *)&v30[16 * v71 + 8] = v75;
        v76 = *((_QWORD *)v110 + 2);
        if (v32 >= v76)
          goto LABEL_121;
        v27 = v110;
        v11 = v76 - 1;
        memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
        *((_QWORD *)v110 + 2) = v76 - 1;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v108;
    if (v9 >= v108)
    {
      v8 = v106;
      v97 = v110;
      v2 = v105;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t *__src, unint64_t *a2, unint64_t a3, unint64_t *__dst)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  __int128 v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t result;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v27 = __src;
  v26 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[3 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v16 = &v4[3 * v11];
      v25 = v16;
      v27 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v17 = a3 - 24;
        v18 = v6;
        while (1)
        {
          v19 = (unint64_t *)(v17 + 24);
          v20 = *(v18 - 3);
          v21 = *(v18 - 2);
          v18 -= 3;
          if ((specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(v20, v21, *(v16 - 3), *(v16 - 2)) & 1) != 0)
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              v22 = *(_OWORD *)v18;
              *(_QWORD *)(v17 + 16) = v18[2];
              *(_OWORD *)v17 = v22;
            }
            v27 = v18;
            if (v18 <= v7)
              goto LABEL_38;
          }
          else
          {
            v25 = v16 - 3;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              v23 = *(_OWORD *)(v16 - 3);
              *(_QWORD *)(v17 + 16) = *(v16 - 1);
              *(_OWORD *)v17 = v23;
            }
            v18 = v6;
            v16 -= 3;
            if (v6 <= v7)
              goto LABEL_38;
          }
          v17 -= 24;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[3 * v9];
    v25 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if ((specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*v4, v4[1], *v6, v6[1]) & 1) != 0)
        {
          v13 = v6 + 3;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            v14 = *(_OWORD *)v6;
            v7[2] = v6[2];
            *(_OWORD *)v7 = v14;
          }
        }
        else
        {
          if (v7 != v4)
          {
            v15 = *(_OWORD *)v4;
            v7[2] = v4[2];
            *(_OWORD *)v7 = v15;
          }
          v4 += 3;
          v26 = v4;
          v13 = v6;
        }
        v7 += 3;
        if (v4 >= v12)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v27 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **__dst)
{
  void **v4;
  id *v5;
  id *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void **v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id *v24;
  void **v25;
  id *v26;
  id *v27;
  void **v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  id *v33;
  uint64_t v34;
  uint64_t ObjectType;
  void *v36;
  id v37;
  uint64_t result;
  void **v39;
  id v40;
  void **v41;
  unint64_t v43;
  id *v44;
  id *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  void **v50;
  id *v51;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 4;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 4;
  v51 = __src;
  v50 = __dst;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (__dst != a2 || &a2[2 * v12] <= __dst)
        memmove(__dst, a2, 16 * v12);
      v25 = &v4[2 * v12];
      v49 = v25;
      v51 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        v39 = v4;
        v26 = (id *)(a3 - 16);
        v27 = v5;
        v44 = v6;
        while (1)
        {
          v45 = v5;
          v43 = (unint64_t)v25;
          v28 = v25 - 2;
          v29 = *(v27 - 2);
          v27 -= 2;
          v30 = *(v25 - 2);
          swift_retain();
          v40 = v29;
          swift_retain();
          v31 = objc_msgSend(v30, sel_length);
          if (one-time initialization token for cache != -1)
            swift_once();
          v32 = static LocaleCache.cache + 16;
          v19 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
          swift_retain_n();
          os_unfair_lock_lock(v19);
          closure #1 in LocaleCache.system.getter(v32, &v47);
          if (v46)
            goto LABEL_51;
          v33 = v26 + 2;
          os_unfair_lock_unlock(v19);
          swift_release_n();
          v34 = v48;
          ObjectType = swift_getObjectType();
          v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 496))(ObjectType, v34);
          v37 = objc_msgSend(v30, sel_compare_options_range_locale_, v40, 577, 0, v31, v36);
          swift_release();

          swift_release();
          swift_unknownObjectRelease();
          if (v37 == (id)-1)
          {
            v25 = (void **)v43;
            if (v33 != v45 || v26 >= v45)
              *(_OWORD *)v26 = *(_OWORD *)v27;
            v51 = v27;
          }
          else
          {
            v49 = v28;
            if ((unint64_t)v33 < v43 || (unint64_t)v26 >= v43 || v33 != (id *)v43)
              *(_OWORD *)v26 = *(_OWORD *)v28;
            v27 = v45;
            v25 = v28;
          }
          if (v27 > v44)
          {
            v26 -= 2;
            v5 = v27;
            if (v25 > v39)
              continue;
          }
          break;
        }
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v51, (const void **)&v50, &v49);
      return 1;
    }
  }
  else if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst)
      memmove(__dst, __src, 16 * v9);
    v41 = &v4[2 * v9];
    v49 = v41;
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      while (1)
      {
        v13 = *v4;
        v14 = v4;
        v15 = *v5;
        swift_retain();
        v16 = v13;
        swift_retain();
        v17 = objc_msgSend(v15, sel_length);
        if (one-time initialization token for cache != -1)
          swift_once();
        v18 = static LocaleCache.cache + 16;
        v19 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v19);
        closure #1 in LocaleCache.system.getter(v18, &v47);
        if (v46)
          break;
        os_unfair_lock_unlock(v19);
        swift_release_n();
        v20 = v48;
        v21 = swift_getObjectType();
        v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 496))(v21, v20);
        v23 = objc_msgSend(v15, sel_compare_options_range_locale_, v16, 577, 0, v17, v22);
        swift_release();

        swift_release();
        swift_unknownObjectRelease();
        if (v23 == (id)-1)
        {
          v24 = v5 + 2;
          v4 = v14;
          if (v6 < v5 || v6 >= v24 || v6 != v5)
            *(_OWORD *)v6 = *(_OWORD *)v5;
        }
        else
        {
          v24 = v5;
          if (v6 != v14)
            *(_OWORD *)v6 = *(_OWORD *)v14;
          v4 = v14 + 2;
          v50 = v14 + 2;
        }
        v6 += 2;
        if (v4 < v41)
        {
          v5 = v24;
          if ((unint64_t)v24 < a3)
            continue;
        }
        v51 = v6;
        goto LABEL_50;
      }
LABEL_51:
      os_unfair_lock_unlock(v19);
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_50;
  }
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Locale.forceTemperatureUnit.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 456))(ObjectType, v1);
}

uint64_t Locale.forceMeasurementSystem.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 448))(ObjectType, v1);
}

BOOL static Locale.IdentifierType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Locale.IdentifierType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Locale.IdentifierType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double Locale.init(components:)@<D0>(void *__src@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  double result;
  __int128 v6;
  uint64_t __dst[44];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for cache != -1)
    swift_once();
  v3 = static LocaleCache.cache + 16;
  v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.fixedComponents(_:)(v3, __dst, &v6);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  outlined release of Locale.Components(__dst);
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

double Locale.init(languageComponents:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;

  v2 = a1[1];
  v4 = a1[2];
  v3 = (void *)a1[3];
  v5 = a1[5];
  v19 = *a1;
  v20 = a1[4];
  v6 = a1[6];
  v7 = (void *)a1[7];
  v8 = a1[9];
  v21 = a1[8];
  v9 = a1[10];
  v10 = (void *)a1[11];
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = 0xE000000000000000;
  if (v2)
  {
    v11._countAndFlagsBits = v4;
    v11._object = v3;
    String.append(_:)(v11);
  }
  if (v5)
  {
    v12._countAndFlagsBits = 45;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = v6;
    v13._object = v7;
    String.append(_:)(v13);
  }
  if (v8)
  {
    v14._countAndFlagsBits = 95;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = v9;
    v15._object = v10;
    String.append(_:)(v15);
  }
  outlined consume of Locale.LanguageCode?(v19, v2);
  outlined consume of Locale.LanguageCode?(v20, v5);
  outlined consume of Locale.LanguageCode?(v21, v8);
  if (one-time initialization token for cache != -1)
    swift_once();
  v16 = static LocaleCache.cache + 16;
  v17 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v17);
  closure #1 in LocaleCache.fixed(_:)(v16, v23, *((uint64_t *)&v23 + 1), &v23);
  os_unfair_lock_unlock(v17);
  swift_bridgeObjectRelease();
  swift_release_n();
  result = *(double *)&v23;
  *a2 = v23;
  return result;
}

double Locale.init(languageCode:script:languageRegion:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  double result;
  __int128 v11;
  uint64_t __dst[44];
  _OWORD __src[22];

  v5 = a1[1];
  __src[0] = *a1;
  __src[1] = v5;
  v6 = a2[1];
  __src[2] = *a2;
  __src[3] = v6;
  v7 = a3[1];
  __src[4] = *a3;
  __src[5] = v7;
  LOBYTE(__src[6]) = 16;
  *(_OWORD *)((char *)&__src[6] + 8) = 0u;
  *(_OWORD *)((char *)&__src[7] + 8) = 0u;
  *(_OWORD *)((char *)&__src[8] + 8) = 0u;
  *(_OWORD *)((char *)&__src[9] + 8) = 0u;
  *(_OWORD *)((char *)&__src[10] + 8) = 0u;
  *(_OWORD *)((char *)&__src[11] + 8) = 0u;
  WORD4(__src[12]) = 1031;
  memset(&__src[13], 0, 144);
  memcpy(__dst, __src, sizeof(__dst));
  outlined retain of Locale.Components((uint64_t *)__src);
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static LocaleCache.cache + 16;
  v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in LocaleCache.fixedComponents(_:)(v8, __dst, &v11);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  outlined release of Locale.Components((uint64_t *)__src);
  outlined release of Locale.Components((uint64_t *)__src);
  result = *(double *)&v11;
  *a4 = v11;
  return result;
}

double Locale.init(identifier:preferences:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  double result;
  _BYTE v8[144];
  __int128 v9;
  _BYTE v10[144];

  outlined init with take of LocalePreferences?(a3, (uint64_t)v10);
  if (one-time initialization token for cache != -1)
    swift_once();
  outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v8);
  swift_retain();
  LocaleCache.localeWithPreferences(identifier:prefs:)(a1, a2, (uint64_t)v8, (uint64_t *)&v9);
  swift_release();
  swift_bridgeObjectRelease();
  outlined retain of LocalePreferences?((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  result = *(double *)&v9;
  *a4 = v9;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forIdentifier:)(Swift::String forIdentifier)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forIdentifier._object;
  countAndFlagsBits = forIdentifier._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 72))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forLanguageCode:)(Swift::String forLanguageCode)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forLanguageCode._object;
  countAndFlagsBits = forLanguageCode._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 80))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forRegionCode:)(Swift::String forRegionCode)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forRegionCode._object;
  countAndFlagsBits = forRegionCode._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 88))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forScriptCode:)(Swift::String forScriptCode)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forScriptCode._object;
  countAndFlagsBits = forScriptCode._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 96))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forVariantCode:)(Swift::String forVariantCode)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forVariantCode._object;
  countAndFlagsBits = forVariantCode._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 104))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCurrencyCode:)(Swift::String forCurrencyCode)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forCurrencyCode._object;
  countAndFlagsBits = forCurrencyCode._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 120))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCollationIdentifier:)(Swift::String forCollationIdentifier)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forCollationIdentifier._object;
  countAndFlagsBits = forCollationIdentifier._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 136))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(forCollatorIdentifier:)(Swift::String forCollatorIdentifier)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;

  object = forCollatorIdentifier._object;
  countAndFlagsBits = forCollatorIdentifier._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 144))(countAndFlagsBits, object, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

uint64_t Locale.scriptCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(ObjectType, v1);
}

uint64_t Locale.variantCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 168))(ObjectType, v1);
  if (v4)
  {
    v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v5 = result & 0xFFFFFFFFFFFFLL;
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t Locale.exemplarCharacterSet.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 184))(ObjectType, v1);
}

uint64_t Locale._calendarIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 200))(ObjectType, v1);
}

uint64_t Locale.collationIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 208))(ObjectType, v1);
}

uint64_t Locale.usesMetricSystem.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1) & 1;
}

uint64_t Locale.groupingSeparator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 232))(ObjectType, v1);
}

uint64_t Locale.currencySymbol.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 240))(ObjectType, v1);
}

uint64_t Locale.currencyCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 248))(ObjectType, v1);
}

uint64_t Locale.collatorIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 256))(ObjectType, v1);
}

uint64_t Locale.quotationBeginDelimiter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 264))(ObjectType, v1);
}

uint64_t Locale.quotationEndDelimiter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 272))(ObjectType, v1);
}

uint64_t Locale.alternateQuotationBeginDelimiter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 280))(ObjectType, v1);
}

uint64_t Locale.alternateQuotationEndDelimiter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 288))(ObjectType, v1);
}

uint64_t Locale.currency.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 304))(ObjectType, v1);
}

uint64_t Locale.numberingSystem.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 312))(ObjectType, v1);
}

uint64_t Locale.availableNumberingSystems.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 320))(ObjectType, v1);
}

uint64_t Locale.firstDayOfWeek.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 328))(ObjectType, v1);
}

Swift::String __swiftcall Locale.identifier(_:)(Foundation::Locale::IdentifierType a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  void *v6;
  Swift::String result;
  char v8;

  v2 = *(_BYTE *)a1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v8 = v2;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 416))(&v8, ObjectType, v3);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t Locale.hourCycle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 360))(ObjectType, v1);
}

uint64_t Locale.collation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 368))(ObjectType, v1);
}

uint64_t Locale.timeZone.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 384))(ObjectType, v1);
}

uint64_t Locale.subdivision.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 392))(ObjectType, v1);
}

uint64_t Locale.variant.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 400))(ObjectType, v1);
}

uint64_t Locale.forceHourCycle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 424))(ObjectType, v1);
}

uint64_t Locale.forceFirstWeekday(_:)(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t ObjectType;
  char v6;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 432))(&v6, ObjectType, v3);
}

Swift::Int_optional __swiftcall Locale.forceMinDaysInFirstWeek(_:)(Foundation::Calendar::Identifier a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t ObjectType;
  Swift::Int v5;
  char v6;
  Swift::Bool v7;
  char v8;
  Swift::Int_optional result;

  v2 = *(_BYTE *)a1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v8 = v2;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 440))(&v8, ObjectType, v3);
  v7 = v6 & 1;
  result.value = v5;
  result.is_nil = v7;
  return result;
}

uint64_t Locale.customDateFormat(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v6;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 504))(&v6, ObjectType, v3);
}

uint64_t Locale.temperatureUnit.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 408))(ObjectType, v1);
}

uint64_t Locale.prefs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 464))(ObjectType, v1);
}

uint64_t Locale.identifierCapturingPreferences.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 472))(ObjectType, v1);
}

id static Locale.canonicalIdentifier(from:)()
{
  const __CFAllocator *v0;
  const __CFString *v1;
  __CFString *CanonicalLocaleIdentifierFromString;
  id v3;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  v1 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v0, v1);
  swift_unknownObjectRelease();
  if (!CanonicalLocaleIdentifierFromString)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);

  return v3;
}

id static Locale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  return static Locale._canonicalLocaleIdentifier(from:)(a1, a2, MEMORY[0x1E0C987B0]);
}

Swift::Int Locale.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  Swift::UInt8 v3;
  void (*v4)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  Swift::UInt v33;
  Swift::UInt8 v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  _BYTE v38[144];
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  _QWORD v57[18];
  _BYTE v58[144];
  _BYTE v59[144];
  _BYTE v60[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1) & 1) != 0)
  {
    v3 = 1;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v4 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v4(v57, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v58);
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v59) == 1)
  {
    v3 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v39);
  Hasher._combine(_:)(1u);
  if (v39[0] == 2)
  {
    v5 = 0;
  }
  else
  {
    v5 = v39[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v5);
  v6 = v40;
  if (!v40)
  {
    Hasher._combine(_:)(0);
    v11 = v39;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v6 + 16));
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v38);
    v11 = v38;
LABEL_20:
    outlined retain of LocalePreferences(v11);
    if (!v41)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v8 = v6 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 += 16;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v42)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v9 = v43;
    if (!v43)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v9);
    swift_bridgeObjectRelease();
    v10 = v44;
    if (!v44)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = v43;
  if (v43)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v10 = v44;
  if (!v44)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v10);
  swift_bridgeObjectRelease();
LABEL_25:
  v13 = v45;
  v12 = v46;
  v15 = v47;
  v14 = v48;
  v16 = v49;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v17 = v12;
    v18 = v15;
    v19 = v14;
    v20 = v16;
    v21 = v13;
    _CFObject.hash(into:)();
    if (v12)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v26 = v16;
    v27 = v12;
    v28 = v15;
    v29 = v14;
    if (v12)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v22 = v12;
      _CFObject.hash(into:)();

      if (v15)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v15)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v15;
    _CFObject.hash(into:)();

    if (v14)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v16)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v14)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v24 = v14;
  _CFObject.hash(into:)();

  if (v16)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v16;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v25 = 0;
LABEL_36:

  v30 = v50;
  if (v30)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v30);
    swift_bridgeObjectRelease();
    v31 = v51;
    if (v51)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v52)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v31 = v51;
  if (!v51)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v60, v31);
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v53 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v32 = v53 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }
  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }
  if (v55 == 2)
  {
    v34 = 0;
  }
  else
  {
    v34 = v55 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v34);
  if (v56 == 2)
  {
    v35 = 0;
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    v35 = v36;
  }
  Hasher._combine(_:)(v35);
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  Swift::UInt8 v3;
  void (*v4)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  Swift::UInt v32;
  Swift::UInt8 v33;
  Swift::UInt8 v34;
  Swift::UInt8 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _QWORD v55[18];
  _BYTE v56[144];
  _BYTE v57[144];
  _BYTE v58[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1) & 1) != 0)
  {
    v3 = 1;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v4 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v4(v55, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)v56);
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v57) == 1)
  {
    v3 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)&v37);
  Hasher._combine(_:)(1u);
  if (v37 == 2)
  {
    v5 = 0;
  }
  else
  {
    v5 = v37 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v5);
  v6 = v38;
  if (!v38)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v37);
    if (!v39)
      goto LABEL_14;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v6 + 16));
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    goto LABEL_19;
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v8 = v6 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 += 16;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v40)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v9 = v41;
    if (!v41)
      goto LABEL_16;
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v58, v9);
    swift_bridgeObjectRelease();
    v10 = v42;
    if (!v42)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = v41;
  if (v41)
    goto LABEL_22;
LABEL_16:
  Hasher._combine(_:)(0);
  v10 = v42;
  if (!v42)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v10);
  swift_bridgeObjectRelease();
LABEL_24:
  v12 = v43;
  v11 = v44;
  v14 = v45;
  v13 = v46;
  v15 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v16 = v11;
    v17 = v14;
    v18 = v13;
    v19 = v15;
    v20 = v12;
    _CFObject.hash(into:)();
    if (v11)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(0);
    v25 = v15;
    v26 = v11;
    v27 = v14;
    v28 = v13;
    if (v11)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v21 = v11;
      _CFObject.hash(into:)();

      if (v14)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v14)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v14;
    _CFObject.hash(into:)();

    if (v13)
      goto LABEL_28;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v15)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v13)
    goto LABEL_33;
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v23 = v13;
  _CFObject.hash(into:)();

  if (v15)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v15;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v24 = 0;
LABEL_35:

  v29 = v48;
  if (v29)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v58, v29);
    swift_bridgeObjectRelease();
    v30 = v49;
    if (v49)
      goto LABEL_37;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v50)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v30 = v49;
  if (!v49)
    goto LABEL_40;
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v30);
  swift_bridgeObjectRelease();
  if (!v50)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v31 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v31);
  }
  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }
  if (v53 == 2)
  {
    v33 = 0;
  }
  else
  {
    v33 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v33);
  if (v54 == 2)
  {
    v34 = 0;
  }
  else
  {
    v35 = v54 & 1;
    Hasher._combine(_:)(1u);
    v34 = v35;
  }
  Hasher._combine(_:)(v34);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Locale.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v33[1] = a1;
  v33[0] = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v33[0] - 8);
  MEMORY[0x1E0C80A78](v33[0]);
  v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  ObjectType = swift_getObjectType();
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
  swift_unknownObjectRetain();
  v12 = v11(ObjectType, v9);
  v14 = v13;
  swift_unknownObjectRelease();
  v15 = MEMORY[0x1E0DEA968];
  v38 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v37 = v12;
  *((_QWORD *)&v37 + 1) = v14;
  v34 = xmmword_182069A60;
  outlined init with take of Any(&v37, &v35);
  v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v18 = v16[2];
  v17 = v16[3];
  if (v18 >= v17 >> 1)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
  v16[2] = v18 + 1;
  v19 = &v16[6 * v18];
  v20 = v34;
  v21 = v36;
  v19[3] = v35;
  v19[4] = v21;
  v19[2] = v20;
  *(_QWORD *)&v34 = v8;
  v22 = dispatch thunk of CustomStringConvertible.description.getter();
  v38 = v15;
  *(_QWORD *)&v37 = v22;
  *((_QWORD *)&v37 + 1) = v23;
  v34 = xmmword_182069A70;
  outlined init with take of Any(&v37, &v35);
  v25 = v16[2];
  v24 = v16[3];
  if (v25 >= v24 >> 1)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v16);
  v16[2] = v25 + 1;
  v26 = &v16[6 * v25];
  v27 = v34;
  v28 = v36;
  v26[3] = v35;
  v26[4] = v28;
  v26[2] = v27;
  *(_QWORD *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = v9;
  *(_QWORD *)&v37 = v16;
  v29 = *MEMORY[0x1E0DEDFB8];
  v30 = type metadata accessor for Mirror.DisplayStyle();
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v7, v29, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v7, 0, 1, v30);
  (*(void (**)(char *, _QWORD, _QWORD))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v33[0]);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Locale.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  v5._countAndFlagsBits = 10272;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v4;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Locale.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Locale.CodingKeys@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.CodingKeys()
{
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 56;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 56;
  v44 = __src;
  v43 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -55)
    {
      if (__dst != a2 || &a2[56 * v11] <= __dst)
        memmove(__dst, a2, 56 * v11);
      v24 = &v4[56 * v11];
      v42 = v24;
      v44 = v6;
      if (__src < v6 && v10 >= 56)
      {
        v25 = a3 - 56;
        do
        {
          outlined init with copy of (key: String, value: Encodable)((uint64_t)(v24 - 56), (uint64_t)&v40);
          v29 = v6 - 56;
          outlined init with copy of (key: String, value: Encodable)((uint64_t)(v6 - 56), (uint64_t)&v38);
          if (v40 == v38 && v41 == v39)
            v31 = 0;
          else
            v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v32 = (char *)(v25 + 56);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
          if ((v31 & 1) != 0)
          {
            if (v32 != v6 || v25 >= (unint64_t)v6)
            {
              v26 = *(_OWORD *)v29;
              v27 = *(_OWORD *)(v6 - 40);
              v28 = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(v25 + 48) = *((_QWORD *)v6 - 1);
              *(_OWORD *)(v25 + 16) = v27;
              *(_OWORD *)(v25 + 32) = v28;
              *(_OWORD *)v25 = v26;
            }
            v44 -= 56;
            v24 = v42;
            if (v42 <= v4)
              break;
          }
          else
          {
            v33 = v42;
            v24 = v42 - 56;
            v42 -= 56;
            if (v32 < v33 || v25 >= (unint64_t)v33 || v32 != v33)
            {
              v34 = *(_OWORD *)v24;
              v35 = *(_OWORD *)(v33 - 40);
              v36 = *(_OWORD *)(v33 - 24);
              *(_QWORD *)(v25 + 48) = *((_QWORD *)v33 - 1);
              *(_OWORD *)(v25 + 16) = v35;
              *(_OWORD *)(v25 + 32) = v36;
              *(_OWORD *)v25 = v34;
            }
            v29 = v6;
            if (v24 <= v4)
              break;
          }
          v25 -= 56;
          v6 = v29;
        }
        while (v29 > __src);
      }
LABEL_51:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v44, (const void **)&v43, &v42);
      return 1;
    }
  }
  else if (v8 >= -55)
  {
    if (__dst != __src || &__src[56 * v9] <= __dst)
      memmove(__dst, __src, 56 * v9);
    v12 = (unint64_t)&v4[56 * v9];
    v42 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 56)
    {
      while (1)
      {
        outlined init with copy of (key: String, value: Encodable)((uint64_t)v6, (uint64_t)&v40);
        outlined init with copy of (key: String, value: Encodable)((uint64_t)v4, (uint64_t)&v38);
        if (v40 == v38 && v41 == v39)
          break;
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
        if ((v14 & 1) == 0)
          goto LABEL_18;
        v15 = v44;
        v16 = (unint64_t)(v6 + 56);
        if (v44 >= v6 && (unint64_t)v44 < v16 && v44 == v6)
        {
          v15 = v6;
        }
        else
        {
          v17 = *(_OWORD *)v6;
          v18 = *((_OWORD *)v6 + 1);
          v19 = *((_OWORD *)v6 + 2);
          *((_QWORD *)v44 + 6) = *((_QWORD *)v6 + 6);
          v15[1] = v18;
          v15[2] = v19;
          *v15 = v17;
        }
LABEL_22:
        v44 = (char *)v15 + 56;
        v4 = v43;
        if ((unint64_t)v43 < v12)
        {
          v6 = (char *)v16;
          if (v16 < a3)
            continue;
        }
        goto LABEL_51;
      }
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v38);
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v40);
LABEL_18:
      v15 = v44;
      v20 = v43 + 56;
      if (v44 != v43 || v44 >= v20)
      {
        v21 = *(_OWORD *)v43;
        v22 = *((_OWORD *)v43 + 1);
        v23 = *((_OWORD *)v43 + 2);
        *((_QWORD *)v44 + 6) = *((_QWORD *)v43 + 6);
        v15[1] = v22;
        v15[2] = v23;
        *v15 = v21;
      }
      v43 = v20;
      v16 = (unint64_t)v6;
      goto LABEL_22;
    }
    goto LABEL_51;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  BOOL v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      v20 = 48 * v11;
      if (__dst != a2 || &a2[v20] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v21 = &v4[v20];
      v31 = v21;
      v33 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        v22 = (char *)(a3 - 48);
        while (!*(v21 - 32) && !*(v6 - 32))
        {
          v23 = v22 + 48;
          v24 = v6 - 48;
          v25 = *((_QWORD *)v21 - 6) == *((_QWORD *)v6 - 6) && *((_QWORD *)v21 - 5) == *((_QWORD *)v6 - 5);
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v31 = v21 - 48;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
            {
              v28 = *((_OWORD *)v21 - 3);
              v29 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v22 + 2) = v29;
              *(_OWORD *)v22 = v28;
            }
            v24 = v6;
            v21 -= 48;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v23 != v6 || v22 >= v6)
            {
              v26 = *(_OWORD *)v24;
              v27 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v22 + 2) = v27;
              *(_OWORD *)v22 = v26;
            }
            v33 = v6 - 48;
            if (v24 <= v7)
              goto LABEL_50;
          }
          v22 -= 48;
          v6 = v24;
          if (v21 <= v4)
            goto LABEL_50;
        }
        goto LABEL_51;
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v33, (const void **)&v32, &v31);
      return 1;
    }
  }
  else if (v8 >= -47)
  {
    v12 = 48 * v9;
    if (__dst != __src || &__src[v12] <= __dst)
      memmove(__dst, __src, v12);
    v13 = &v4[v12];
    v31 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      while (!v6[16] && !v4[16])
      {
        v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            v18 = *(_OWORD *)v4;
            v19 = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v4 + 1);
            *((_OWORD *)v7 + 2) = v19;
            *(_OWORD *)v7 = v18;
          }
          v4 += 48;
          v32 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 48;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            v16 = *(_OWORD *)v6;
            v17 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v7 + 2) = v17;
            *(_OWORD *)v7 = v16;
          }
        }
        v7 += 48;
        v33 = v7;
        if (v4 < v13)
        {
          v6 = v15;
          if ((unint64_t)v15 < a3)
            continue;
        }
        goto LABEL_50;
      }
LABEL_51:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_50;
  }
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *type metadata accessor for Locale.Current()
{
  return &unk_1E0F2FAD8;
}

uint64_t specialized Locale.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6572727563 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

CFMutableCharacterSetRef specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  CFMutableCharacterSetRef result;
  CFMutableCharacterSetRef v3;
  int v4;

  result = CFCharacterSetCreateMutable(0);
  if (result)
  {
    v3 = result;
    v4 = CFEqual(*(CFTypeRef *)(a1 + 16), result);

    return (CFMutableCharacterSetRef)(v4 != 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void __CharacterSetStorage.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  id v2;

  v2 = *(id *)(v0 + 16);
  v1 = CFHash(v2);
  Hasher._combine(_:)(v1);

}

uint64_t __CharacterSetStorage.mutableCopy()()
{
  uint64_t v0;
  char v1;
  const __CFCharacterSet *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = (const __CFCharacterSet *)*(id *)(v0 + 16);
  result = (uint64_t)CFCharacterSetCreateMutableCopy(0, v2);
  v4 = result;
  if ((v1 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v4;
      *(_BYTE *)(result + 24) = 1;
      return result;
    }
    __break(1u);
  }
  if (result)
    goto LABEL_5;
  __break(1u);
  return result;
}

CFDataRef __CharacterSetStorage.bitmapRepresentation.getter()
{
  uint64_t v0;
  char v1;
  const __CFCharacterSet *v2;
  CFDataRef result;
  CFDataRef v4;
  id v5;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = (const __CFCharacterSet *)*(id *)(v0 + 16);
  result = CFCharacterSetCreateBitmapRepresentation(0, v2);
  v4 = result;
  if ((v1 & 1) != 0)
  {
    if (result)
    {
LABEL_5:
      v5 = specialized Data.init(referencing:)(result);

      return (CFDataRef)v5;
    }
    __break(1u);
  }
  if (result)
    goto LABEL_5;
  __break(1u);
  return result;
}

void __CharacterSetStorage.subtract(_:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  const __CFCharacterSet *v3;
  CFCharacterSetRef InvertedSet;
  const __CFCharacterSet *v5;
  uint64_t v6;
  __CFCharacterSet *v7;
  const __CFCharacterSet *v8;
  CFMutableCharacterSetRef MutableCopy;
  __CFCharacterSet *v10;
  const __CFCharacterSet *v11;
  id v12;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = (const __CFCharacterSet *)*(id *)(a1 + 16);
  InvertedSet = CFCharacterSetCreateInvertedSet(0, v3);
  v5 = InvertedSet;
  if ((v2 & 1) != 0)
  {
    if (InvertedSet)
      goto LABEL_5;
    __break(1u);
  }
  if (!InvertedSet)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_5:

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  v7 = *(__CFCharacterSet **)(v1 + 16);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    CFCharacterSetIntersect(v7, v5);
    swift_release();
    return;
  }
  v8 = v7;
  MutableCopy = CFCharacterSetCreateMutableCopy(0, v8);
  if (MutableCopy)
  {
    v10 = MutableCopy;
    v11 = (const __CFCharacterSet *)*(id *)(v6 + 16);
    CFCharacterSetIntersect(v10, v11);

    v12 = *(id *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v10;
    *(_BYTE *)(v1 + 24) = 1;
    swift_release();

    return;
  }
LABEL_10:
  __break(1u);
}

BOOL __CharacterSetStorage.isSuperset(of:)(uint64_t a1)
{
  uint64_t v1;

  return CFCharacterSetIsSupersetOfSet(*(CFCharacterSetRef *)(v1 + 16), *(CFCharacterSetRef *)(a1 + 16)) != 0;
}

__CFString *__CharacterSetStorage.description.getter()
{
  uint64_t v0;
  char v1;
  id v2;
  __CFString *result;
  __CFString *v4;
  id v5;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = *(id *)(v0 + 16);
  result = (__CFString *)CFCopyDescription(v2);
  v4 = result;
  if ((v1 & 1) != 0)
  {
    if (result)
    {
LABEL_5:
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (__CFString *)v5;
    }
    __break(1u);
  }
  if (result)
    goto LABEL_5;
  __break(1u);
  return result;
}

Swift::Int __CharacterSetStorage.hashValue.getter()
{
  uint64_t v0;
  id v1;
  Swift::UInt v2;

  Hasher.init(_seed:)();
  v1 = *(id *)(v0 + 16);
  v2 = CFHash(v1);
  Hasher._combine(_:)(v2);

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __CharacterSetStorage()
{
  return __CharacterSetStorage.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance __CharacterSetStorage()
{
  __CharacterSetStorage.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __CharacterSetStorage()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  Swift::UInt v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + 16);
  v3 = CFHash(v2);
  Hasher._combine(_:)(v3);

  return Hasher._finalize()();
}

void CharacterSet.init(bitmapRepresentation:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_181A963F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  const __CFData *v3;
  CFCharacterSetRef v4;
  uint64_t result;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v1;
  v7 = v2;
  v8 = BYTE2(v2);
  v9 = BYTE3(v2);
  v10 = BYTE4(v2);
  v11 = BYTE5(v2);
  v3 = (const __CFData *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v6, BYTE6(v2));
  v4 = CFCharacterSetCreateWithBitmapRepresentation(0, v3);

  if (!v4)
    __break(1u);
  type metadata accessor for __CharacterSetStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_BYTE *)(result + 24) = 0;
  *v0 = result;
  return result;
}

void CharacterSet.init(contentsOfFile:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)v6);
  v2 = (void *)v6[0];
  v5[0] = v6[0];
  v5[1] = v6[1];
  v5[2] = v6[2];
  specialized Data.init(contentsOf:options:)((uint64_t)v5, 1);
  v4 = v3;

  swift_release();
  swift_release();
  __asm { BR              X10 }
}

CFCharacterSetRef static CharacterSet.controlCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetControl);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.letters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.lowercaseLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetLowercaseLetter);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.uppercaseLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetUppercaseLetter);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.illegalCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetIllegal);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.capitalizedLetters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetCapitalizedLetter);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.symbols.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static CharacterSet.urlUserAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E0C9A5F8], a1);
}

uint64_t static CharacterSet.urlPasswordAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E0C9A5E0], a1);
}

uint64_t static CharacterSet.urlHostAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E0C9A5D8], a1);
}

uint64_t static CharacterSet.urlFragmentAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E0C9A5D0], a1);
}

CFDataRef CharacterSet.bitmapRepresentation.getter()
{
  return __CharacterSetStorage.bitmapRepresentation.getter();
}

Swift::Bool __swiftcall CharacterSet.hasMember(inPlane:)(Swift::UInt8 inPlane)
{
  uint64_t v1;

  return CFCharacterSetHasMemberInPlane(*(CFCharacterSetRef *)(*(_QWORD *)v1 + 16), inPlane) != 0;
}

uint64_t CharacterSet.insert(charactersIn:)(uint64_t a1)
{
  return CharacterSet.insert(charactersIn:)(a1, (uint64_t)MEMORY[0x1E0C982A0], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

{
  return CharacterSet.insert(charactersIn:)(a1, (uint64_t)MEMORY[0x1E0C982A0], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

uint64_t CharacterSet.insert(charactersIn:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v3 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  return a3(a1, a2);
}

uint64_t CharacterSet.remove(charactersIn:)(uint64_t a1)
{
  return CharacterSet.insert(charactersIn:)(a1, (uint64_t)MEMORY[0x1E0C98338], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

{
  return CharacterSet.insert(charactersIn:)(a1, (uint64_t)MEMORY[0x1E0C98338], (uint64_t (*)(uint64_t, uint64_t))__CharacterSetStorage.insert(charactersIn:));
}

Swift::Void __swiftcall CharacterSet.remove(charactersIn:)(Swift::String charactersIn)
{
  CharacterSet.insert(charactersIn:)(charactersIn._countAndFlagsBits, (uint64_t)charactersIn._object, (void (*)(void))MEMORY[0x1E0C98340]);
}

Swift::Void __swiftcall CharacterSet.invert()()
{
  uint64_t *v0;
  uint64_t v1;
  __CFCharacterSet *v2;
  const __CFCharacterSet *v3;
  CFMutableCharacterSetRef MutableCopy;
  CFMutableCharacterSetRef v5;
  __CFCharacterSet *v6;
  void *v7;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v0 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  v1 = *v0;
  v2 = *(__CFCharacterSet **)(*v0 + 16);
  if ((*(_BYTE *)(*v0 + 24) & 1) != 0)
  {
    CFCharacterSetInvert(v2);
  }
  else
  {
    v3 = v2;
    MutableCopy = CFCharacterSetCreateMutableCopy(0, v3);
    if (MutableCopy)
    {
      v5 = MutableCopy;
      v6 = MutableCopy;
      CFCharacterSetInvert(v6);

      v7 = *(void **)(v1 + 16);
      *(_QWORD *)(v1 + 16) = v5;
      *(_BYTE *)(v1 + 24) = 1;

    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t CharacterSet.insert(_:)(unsigned int a1)
{
  uint64_t *v1;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), (void (*)(void))MEMORY[0x1E0C982A0]);
  return ((unint64_t)a1 << 32) | 1;
}

uint64_t CharacterSet.update(with:)(unsigned int a1)
{
  uint64_t *v1;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), (void (*)(void))MEMORY[0x1E0C982A0]);
  return a1;
}

uint64_t CharacterSet.intersection(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], a2);
}

void CharacterSet.formIntersection(_:)(uint64_t *a1)
{
  CharacterSet.formUnion(_:)(a1, (void (*)(void *, id))MEMORY[0x1E0C98310]);
}

void CharacterSet.subtract(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.subtract(_:)(v2);
}

uint64_t CharacterSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98348], &v6);
  __CharacterSetStorage.union(_:)(v3, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], &v5);
  __CharacterSetStorage.subtracting(_:)(v5, a2);
  swift_release();
  return swift_release();
}

uint64_t CharacterSet.formSymmetricDifference(_:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98348], &v5);
  __CharacterSetStorage.union(_:)(v2, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], &v4);
  __CharacterSetStorage.subtracting(_:)(v4, &v6);
  swift_release();
  swift_release();
  result = swift_release();
  *v1 = v6;
  return result;
}

BOOL CharacterSet.isSuperset(of:)(uint64_t a1)
{
  uint64_t v1;

  return CFCharacterSetIsSupersetOfSet(*(CFCharacterSetRef *)(*(_QWORD *)v1 + 16), *(CFCharacterSetRef *)(*(_QWORD *)a1 + 16)) != 0;
}

void CharacterSet.hash(into:)()
{
  uint64_t v0;
  void *v1;
  Swift::UInt v2;
  id v3;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  swift_retain();
  v3 = v1;
  v2 = CFHash(v3);
  Hasher._combine(_:)(v2);
  swift_release();

}

BOOL static CharacterSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(*(_QWORD *)a1 + 16), *(CFTypeRef *)(*(_QWORD *)a2 + 16)) != 0;
}

Swift::Int CharacterSet.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  Swift::UInt v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + 16);
  v3 = CFHash(v2);
  Hasher._combine(_:)(v3);

  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CharacterSet(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CharacterSetStorage.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hash(into:) in conformance CharacterSet()
{
  uint64_t v0;
  Swift::UInt v1;
  id v2;

  v2 = *(id *)(*(_QWORD *)v0 + 16);
  v1 = CFHash(v2);
  Hasher._combine(_:)(v1);

}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance CharacterSet(UTF32Char *a1)
{
  uint64_t v1;

  return CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(_QWORD *)v1 + 16), *a1) != 0;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98348], a2);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], a2);
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98348], &v6);
  __CharacterSetStorage.union(_:)(v3, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], &v5);
  __CharacterSetStorage.subtracting(_:)(v5, a2);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t protocol witness for SetAlgebra.remove(_:) in conformance CharacterSet@<X0>(UTF32Char *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = CharacterSet.remove(_:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void protocol witness for SetAlgebra.update(with:) in conformance CharacterSet(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(v4 | (v4 << 32), (void (*)(void))MEMORY[0x1E0C982A0]);
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = 0;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.formUnion(_:)(v2, (void (*)(void *, id))MEMORY[0x1E0C98348]);
  return swift_release();
}

void protocol witness for SetAlgebra.formIntersection(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.formUnion(_:)(v2, (void (*)(void *, id))MEMORY[0x1E0C98310]);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CharacterSet(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98348], &v5);
  __CharacterSetStorage.union(_:)(v2, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], &v4);
  __CharacterSetStorage.subtracting(_:)(v4, &v6);
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *v1 = v6;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CharacterSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __CharacterSetStorage.subtracting(_:)(*a1, a2);
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  v3 = *v1;
  swift_retain();
  __CharacterSetStorage.union(_:)(v2, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], &v5);
  swift_release();
  LOBYTE(v3) = specialized static __CharacterSetStorage.== infix(_:_:)(v5, v3);
  swift_release();
  return v3 & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v4;

  v1 = *a1;
  swift_retain();
  __CharacterSetStorage.union(_:)(v1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], &v4);
  swift_release();
  v2 = specialized SetAlgebra.isEmpty.getter(v4);
  swift_release();
  return v2 & 1;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CharacterSet(uint64_t *a1)
{
  return __CharacterSetStorage.isSuperset(of:)(*a1);
}

CFMutableCharacterSetRef protocol witness for SetAlgebra.isEmpty.getter in conformance CharacterSet()
{
  uint64_t *v0;

  return specialized SetAlgebra.isEmpty.getter(*v0);
}

void protocol witness for SetAlgebra.subtract(_:) in conformance CharacterSet(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.subtract(_:)(v2);
}

unint64_t static CharacterSet._getObjectiveCType()()
{
  return type metadata accessor for NSCharacterSet();
}

NSCharacterSet __swiftcall CharacterSet._bridgeToObjectiveC()()
{
  uint64_t v0;
  NSCharacterSet v2;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCharacterSet();
  swift_dynamicCast();
  return v2;
}

uint64_t static CharacterSet._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;

  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v5;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t static CharacterSet._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;

  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CharacterSet()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCharacterSet();
  swift_dynamicCast();
  return v2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CharacterSet(void *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;

  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v5;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

__CFString *CharacterSet.description.getter()
{
  return __CharacterSetStorage.description.getter();
}

__CFString *CharacterSet.debugDescription.getter()
{
  return __CharacterSetStorage.description.getter();
}

__CFString *protocol witness for CustomStringConvertible.description.getter in conformance CharacterSet()
{
  return __CharacterSetStorage.description.getter();
}

uint64_t NSCharacterSet._toCustomAnyHashable()()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v4;

  v1 = v0;
  objc_msgSend(v1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v4;
  *(_BYTE *)(v2 + 24) = 0;

  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSCharacterSet()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSCharacterSet._toCustomAnyHashable()();

}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CharacterSet.CodingKeys()
{
  return 0x70616D746962;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CharacterSet.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x70616D746962 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CharacterSet.CodingKeys()
{
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CharacterSet.CodingKeys()
{
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CharacterSet.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CharacterSet.CodingKeys>);
  MEMORY[0x1E0C80A78](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __asm { BR              X10 }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CharacterSet.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  CFDataRef v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CharacterSet.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v6 = __CharacterSetStorage.bitmapRepresentation.getter();
  v8 = v7;
  swift_release();
  v10[0] = v6;
  v10[1] = v8;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation((uint64_t)v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CharacterSet(_QWORD *a1)
{
  return CharacterSet.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CharacterSet(_QWORD *a1)
{
  return CharacterSet.encode(to:)(a1);
}

BOOL specialized static __CharacterSetStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
}

unint64_t type metadata accessor for NSCharacterSet()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSCharacterSet;
  if (!lazy cache variable for type metadata for NSCharacterSet)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSCharacterSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_1E0F17A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_1E0F17A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_1E0F17A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys;
  if (!lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet.CodingKeys, &unk_1E0F17A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet.CodingKeys and conformance CharacterSet.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CharacterSet(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[2] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[3] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  result = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet();
  a1[4] = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t assignWithTake for __CharacterSetStorage.Backing(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

void *type metadata accessor for __CharacterSetStorage.Backing()
{
  return &unk_1E0F24D38;
}

uint64_t storeEnumTagSinglePayload for CharacterSet.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181A98180 + 4 * byte_182069EA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181A981A0 + 4 * byte_182069EA5[v4]))();
}

_BYTE *sub_181A98180(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181A981A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A981A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A981B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181A981B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181A981C0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for CharacterSet.CodingKeys()
{
  return &unk_1E0F17A88;
}

unint64_t lazy protocol witness table accessor for type __CharacterSetStorage and conformance __CharacterSetStorage()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage;
  if (!lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage)
  {
    v1 = type metadata accessor for __CharacterSetStorage();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for __CharacterSetStorage, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __CharacterSetStorage and conformance __CharacterSetStorage);
  }
  return result;
}

uint64_t closure #1 in _TimeZoneICU.deinit(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (*a1)
    return ucal_close();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v4, v5)[2] >> 31)
    __break(1u);
  v6 = ucal_open();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v6)
  {
    *a1 = v6;
    return ucal_close();
  }
  return result;
}

uint64_t _TimeZoneICU.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  closure #1 in _TimeZoneICU.deinit((uint64_t *)(v1 + 16), v0);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall _TimeZoneICU.isDaylightSavingTime(for:)(Foundation::Date a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;

  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)((uint64_t *)(v2 + 16), v1, &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  return v4 != 0.0;
}

Swift::tuple_rawOffset_Int_daylightSavingOffset_Double __swiftcall _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(Foundation::Date a1, Foundation::TimeZone::DaylightSavingTimePolicy repeatedTimePolicy, Foundation::TimeZone::DaylightSavingTimePolicy skippedTimePolicy)
{
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  double v6;
  Swift::tuple_rawOffset_Int_daylightSavingOffset_Double result;
  _QWORD v8[2];

  v4 = *(_QWORD *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)((uint64_t *)(v4 + 16), v3, (uint64_t)v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  swift_release();
  v5 = v8[0];
  v6 = *(double *)&v8[1];
  result.daylightSavingOffset = v6;
  result.rawOffset = v5;
  return result;
}

uint64_t closure #1 in _TimeZoneICU.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*a1)
    goto LABEL_2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v6, v7)[2] >> 31)
    __break(1u);
  v8 = ucal_open();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v8)
  {
    *a1 = v8;
LABEL_2:
    ucal_getMillis();
    ucal_setMillis();
    ucal_getTimeZoneOffsetFromLocal();
    *(_QWORD *)a3 = 0;
    *(double *)(a3 + 8) = (double)0;
    return ucal_setMillis();
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t _TimeZoneICU.localizedName(for:locale:)(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v2;
  if (*a2)
  {
    v5 = a2[1];
    ObjectType = swift_getObjectType();
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    swift_unknownObjectRetain();
    v8 = v7(ObjectType, v5);
    v10 = v9;
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
    v10 = 0xE000000000000000;
  }
  v11 = *(_QWORD *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  closure #1 in _TimeZoneICU.localizedName(for:locale:)((uint64_t *)(v11 + 16), v3, a1, v8, v10, &v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

uint64_t closure #1 in _TimeZoneICU.localizedName(for:locale:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v7 = v6;
  v9 = a4;
  v31[2] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v14 = *a1;
  if (*a1)
    goto LABEL_2;
  v30 = a4;
  LODWORD(v31[0]) = 0;
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v13, v12)[2] >> 31)
    __break(1u);
  v14 = ucal_open();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (!v14)
  {
    *a6 = 0;
    a6[1] = 0;
    return result;
  }
  *a1 = v14;
  v9 = v30;
  if (a3 <= 5)
  {
LABEL_2:
    switch(a3)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
        v23 = swift_bridgeObjectRetain_n();
        MEMORY[0x1E0C80A78](v23);
        swift_bridgeObjectRetain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v29, v31);
        if (v7)
        {
          swift_bridgeObjectRelease_n();
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x181A98BC8);
        }
        v24 = v31[0];
        v25 = v31[1];
        result = swift_bridgeObjectRelease_n();
        *a6 = v24;
        a6[1] = v25;
        break;
      case 4uLL:
        goto LABEL_9;
      case 5uLL:
        swift_bridgeObjectRetain();
        v17 = v14;
        v18 = v13;
        v19 = v12;
        v20 = v9;
        v21 = a5;
        v22 = 1;
        goto LABEL_13;
      default:
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    type metadata accessor for NSTimeZoneNameStyle(0);
    v31[0] = a3;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
LABEL_9:
    swift_bridgeObjectRetain();
    v17 = v14;
    v18 = v13;
    v19 = v12;
    v20 = v9;
    v21 = a5;
    v22 = 0;
LABEL_13:
    v26 = specialized static _TimeZoneICU.timeZoneDisplayName(for:timeZoneName:localeName:isShort:isGeneric:isDaylight:)(v17, v18, v19, v20, v21, v22, 1);
    v28 = v27;
    result = swift_bridgeObjectRelease();
    *a6 = v26;
    a6[1] = v28;
  }
  return result;
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneICU()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *one-time initialization function for icuTZIdentifiers()
{
  _QWORD *result;

  result = specialized static _TimeZoneICU.timeZoneNamesFromICU()();
  icuTZIdentifiers._rawValue = result;
  return result;
}

uint64_t static TimeZone.knownTimeZoneIdentifiers.getter()
{
  if (one-time initialization token for icuTZIdentifiers != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static TimeZone.timeZoneDataVersion.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v0 = MEMORY[0x186DAA1FC](&v3);
  result = 0;
  if (v0 && v3 <= 0)
  {
    result = MEMORY[0x186DA4658](v0, 0xE000000000000000);
    if (!v2)
      return 0;
  }
  return result;
}

uint64_t specialized static _TimeZoneICU.timeZoneDisplayName(for:timeZoneName:localeName:isShort:isGeneric:isDaylight:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  if ((a7 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v10 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3);
    swift_bridgeObjectRelease();
    v11 = v10[2];
    LODWORD(v19[0]) = 0;
    if (v11 >> 31)
    {
      __break(1u);
    }
    else
    {
      String.utf8CString.getter();
      v12 = udat_open();
      swift_release();
      v13 = 0;
      if (!v12)
      {
LABEL_11:
        swift_release();
        return v13;
      }
      v14 = specialized _copyCollectionToContiguousArray<A>(_:)(1987475062, 0xE400000000000000);
      if ((a6 & 1) != 0)
        v15 = 1;
      else
        v15 = v14[2];
      if (v15 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v15 <= 0x7FFFFFFF)
        {
          udat_applyPattern();
          v13 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
          swift_release();
          udat_close();
          goto LABEL_11;
        }
LABEL_15:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  v16 = swift_bridgeObjectRetain_n();
  MEMORY[0x1E0C80A78](v16);
  swift_bridgeObjectRetain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, v19);
  v13 = v19[0];
  swift_bridgeObjectRelease_n();
  return v13;
}

_QWORD *specialized static _TimeZoneICU.timeZoneNamesFromICU()()
{
  uint64_t isStackAllocationSafe;
  _QWORD *v1;
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  ucal_openTimeZones();
  v13 = 0;
  isStackAllocationSafe = uenum_unext();
  v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (isStackAllocationSafe)
  {
    v2 = (unsigned __int16 *)isStackAllocationSafe;
    while (1)
    {
      v3 = v13;
      if ((int)v13 >= 1)
      {
        v4 = 3 * v13;
        if (v13 < 0x156
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe);
          closure #1 in String.init(_utf16:)((_BYTE *)&v12 - ((v4 + 15) & 0x7FFFFFFF0), v2, v3, &v15);
          v6 = v15;
          v5 = v16;
          if (v16)
            goto LABEL_9;
        }
        else
        {
          v7 = (_BYTE *)swift_slowAlloc();
          closure #1 in String.init(_utf16:)(v7, v2, v3, &v15);
          MEMORY[0x186DA9E78](v7, -1, -1);
          v6 = v15;
          v5 = v16;
          if (v16)
          {
LABEL_9:
            if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.starts<A>(with:)() & 1) != 0
              || (specialized Sequence<>.contains(_:)(v6, v5, outlined read-only object #0 of static _TimeZoneICU.timeZoneNamesFromICU()) & 1) != 0)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
              v9 = v1[2];
              v8 = v1[3];
              if (v9 >= v8 >> 1)
                v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v1);
              v1[2] = v9 + 1;
              v10 = &v1[2 * v9];
              v10[4] = v6;
              v10[5] = v5;
            }
          }
        }
      }
      isStackAllocationSafe = uenum_unext();
      if (isStackAllocationSafe)
      {
        v2 = (unsigned __int16 *)isStackAllocationSafe;
        if (v14 <= 0)
          continue;
      }
      break;
    }
  }
  uenum_close();
  return v1;
}

uint64_t (*Measurement.value.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Measurement.hash(into:)()
{
  uint64_t v0;
  void *v1;
  double v2;
  void *v3;
  id v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  id v9;

  v1 = *(void **)v0;
  v2 = *(double *)(v0 + 8);
  objc_opt_self();
  v3 = (void *)swift_dynamicCastObjCClass();
  v9 = v1;
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_converter);
    objc_msgSend(v4, sel_baseUnitValueFromValue_, v2);
    v6 = v5;

    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v6;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);

  }
  else
  {
    NSObject.hash(into:)();

    if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = *(_QWORD *)&v2;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
  }
}

Swift::Int Measurement.hashValue.getter()
{
  Hasher.init(_seed:)();
  Measurement.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>()
{
  Hasher.init(_seed:)();
  Measurement.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Measurement.description.getter()
{
  void **v0;
  void *v1;
  Swift::String v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  Swift::String v7;

  v1 = *v0;
  Double.write<A>(to:)();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3 = objc_msgSend(v1, sel_symbol);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = (uint64_t)v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Measurement.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v32 = a2;
  v33 = a1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)v2;
  v11 = *(_QWORD *)(v2 + 8);
  v38 = MEMORY[0x1E0DEB070];
  *(_QWORD *)&v37 = v11;
  v34 = xmmword_182060FD0;
  outlined init with take of Any(&v37, &v35);
  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[6 * v14];
  v16 = v34;
  v17 = v36;
  v15[3] = v35;
  v15[4] = v17;
  v15[2] = v16;
  v18 = objc_msgSend(v10, sel_symbol, v32, v33);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v38 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v37 = v19;
  *((_QWORD *)&v37 + 1) = v21;
  v34 = xmmword_18206A3B0;
  outlined init with take of Any(&v37, &v35);
  v23 = v12[2];
  v22 = v12[3];
  if (v23 >= v22 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v12);
  v12[2] = v23 + 1;
  v24 = &v12[6 * v23];
  v25 = v34;
  v26 = v36;
  v24[3] = v35;
  v24[4] = v26;
  v24[2] = v25;
  *(_QWORD *)&v34 = v10;
  *((_QWORD *)&v34 + 1) = v11;
  *(_QWORD *)&v37 = v12;
  v27 = *MEMORY[0x1E0DEDFB8];
  v28 = type metadata accessor for Mirror.DisplayStyle();
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v9, v27, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v9, 0, 1, v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEDFE8], v3);
  v30 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)], MEMORY[0x1E0DEAF50]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

double Measurement<>.convert(to:)(void *a1)
{
  uint64_t v1;
  void *v2;
  double result;
  double v4[2];

  v2 = *(void **)v1;
  Measurement<>.converted(to:)(a1, v4);

  result = v4[1];
  *(double *)v1 = v4[0];
  *(double *)(v1 + 8) = result;
  return result;
}

id static Measurement<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  id result;
  id v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;

  v4 = *(id *)a1;
  v5 = *(double *)(a1 + 8);
  v6 = *(void **)a2;
  v7 = *(double *)(a2 + 8);
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(_QWORD *)a2))
  {
    v8 = v5 + v7;
    result = v4;
  }
  else
  {
    v10 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v10, sel_baseUnitValueFromValue_, v5);
    v12 = v11;

    v13 = objc_msgSend(v6, sel_converter);
    objc_msgSend(v13, sel_baseUnitValueFromValue_, v7);
    v15 = v14;

    v8 = v12 + v15;
    swift_getObjectType();
    result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
  }
  *(_QWORD *)a3 = result;
  *(double *)(a3 + 8) = v8;
  return result;
}

id static Measurement<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  id result;
  id v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;

  v4 = *(void **)a1;
  v5 = *(double *)(a1 + 8);
  v6 = *(void **)a2;
  v7 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0)
  {
    v8 = v5 - v7;
    result = v4;
  }
  else
  {
    v10 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v10, sel_baseUnitValueFromValue_, v5);
    v12 = v11;

    v13 = objc_msgSend(v6, sel_converter);
    objc_msgSend(v13, sel_baseUnitValueFromValue_, v7);
    v15 = v14;

    v8 = v12 - v15;
    swift_getObjectType();
    result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
  }
  *(_QWORD *)a3 = result;
  *(double *)(a3 + 8) = v8;
  return result;
}

id static Measurement.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double v5;
  id result;
  id v7;

  v4 = *(double *)(a1 + 8);
  v5 = *(double *)(a2 + 8);
  v7 = *(id *)a1;
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(_QWORD *)a2))
  {
    *(_QWORD *)a3 = v7;
    *(double *)(a3 + 8) = v4 + v5;
    return v7;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id static Measurement.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double v5;
  id result;
  id v7;

  v4 = *(double *)(a1 + 8);
  v5 = *(double *)(a2 + 8);
  v7 = *(id *)a1;
  if (objc_msgSend(*(id *)a1, sel_isEqual_, *(_QWORD *)a2))
  {
    *(_QWORD *)a3 = v7;
    *(double *)(a3 + 8) = v4 - v5;
    return v7;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id static Measurement.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  void *v3;
  double v4;

  v3 = *(void **)a1;
  v4 = *(double *)(a1 + 8) * a3;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

{
  void *v3;
  double v4;

  v3 = *(void **)a1;
  v4 = *(double *)(a1 + 8) * a3;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

id static Measurement./ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  void *v3;
  double v4;

  v3 = *(void **)a1;
  v4 = *(double *)(a1 + 8) / a3;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

{
  void *v3;
  double v4;

  v3 = *(void **)a1;
  v4 = a3 / *(double *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(double *)(a2 + 8) = v4;
  return v3;
}

NSMeasurement __swiftcall Measurement._bridgeToObjectiveC()()
{
  uint64_t v0;
  objc_class *v1;
  NSUnit *v2;
  double v3;
  NSMeasurement result;

  v1 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)NSMeasurement), sel_initWithDoubleValue_unit_, *(_QWORD *)v0, *(double *)(v0 + 8));
  result._doubleValue = v3;
  result._unit = v2;
  result.super.isa = v1;
  return result;
}

uint64_t static Measurement._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t result;

  objc_msgSend(a1, sel_doubleValue);
  v5 = v4;
  v6 = objc_msgSend(a1, sel_unit);
  result = swift_dynamicCastUnknownClassUnconditional();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

BOOL static Measurement._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  v4 = objc_msgSend(a1, sel_unit);
  v5 = swift_dynamicCastUnknownClass();
  if (v5)
  {

    objc_msgSend(a1, sel_doubleValue);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
  }
  else
  {

  }
  return v5 != 0;
}

id static Measurement._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = result;
    v4 = objc_msgSend(result, sel_unit);
    v5 = swift_dynamicCastUnknownClassUnconditional();
    result = objc_msgSend(v2, sel_doubleValue);
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Measurement<A>(void *a1, uint64_t a2)
{
  return static Measurement._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Measurement<A>(void *a1, uint64_t a2)
{
  return static Measurement._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Measurement<A>@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  return static Measurement._unconditionallyBridgeFromObjectiveC(_:)(result, a2);
}

uint64_t NSMeasurement._toCustomAnyHashable()()
{
  void *v0;

  objc_msgSend(v0, sel_unit);
  objc_msgSend(v0, sel_doubleValue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnit> and conformance Measurement<A>, &demangling cache variable for type metadata for Measurement<NSUnit>, (uint64_t)&protocol conformance descriptor for Measurement<A>);
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSMeasurement()
{
  void **v0;
  void *v1;

  v1 = *v0;
  objc_msgSend(v1, sel_unit);
  objc_msgSend(v1, sel_doubleValue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnit> and conformance Measurement<A>, &demangling cache variable for type metadata for Measurement<NSUnit>, (uint64_t)&protocol conformance descriptor for Measurement<A>);
  AnyHashable.init<A>(_:)();

}

id NSMeasurementFormatter.string<A>(from:)(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSMeasurement), sel_initWithDoubleValue_unit_, *(_QWORD *)a1, *(double *)(a1 + 8));
  v3 = objc_msgSend(v1, sel_stringForObjectValue_, v2);

  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t Measurement.CodingKeys.init(rawValue:)(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t Measurement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t Measurement.CodingKeys.intValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t Measurement.CodingKeys.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t Measurement.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1953066613;
  else
    return 0x65756C6176;
}

uint64_t Measurement.UnitCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65747265766E6F63 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t Measurement.UnitCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65747265766E6F63;
  else
    return 0x6C6F626D7973;
}

uint64_t Measurement.LinearConverterCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6963696666656F63 && a2 == 0xEB00000000746E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6174736E6F63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t Measurement.LinearConverterCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E6174736E6F63;
  else
    return 0x6963696666656F63;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.CodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.CodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Measurement<A>.CodingKeys@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Measurement.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Measurement<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = Measurement.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.CodingKeys()
{
  char *v0;

  return Measurement.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Measurement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(a1, a2, (uint64_t (*)(_QWORD, _QWORD))Measurement.CodingKeys.intValue.getter);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Measurement<A>.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Measurement.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.UnitCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.UnitCodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.UnitCodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.UnitCodingKeys()
{
  char *v0;

  return Measurement.UnitCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.UnitCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Measurement.UnitCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(a1, a2, (uint64_t (*)(_QWORD, _QWORD))Measurement.UnitCodingKeys.intValue.getter);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.UnitCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A>.LinearConverterCodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A>.LinearConverterCodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A>.LinearConverterCodingKeys()
{
  char *v0;

  return Measurement.LinearConverterCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A>.LinearConverterCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Measurement.LinearConverterCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Measurement<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unsigned __int8 *v3;

  return a3(*v3, *(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A>.LinearConverterCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v40 = a5;
  v7 = type metadata accessor for Measurement.LinearConverterCodingKeys(255, a2, a3, a4);
  v42 = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, v7);
  v43 = v7;
  v41 = type metadata accessor for KeyedDecodingContainer();
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)&v38 - v8;
  v11 = type metadata accessor for Measurement.UnitCodingKeys(255, a2, v9, v10);
  v49 = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, v11);
  v48 = type metadata accessor for KeyedDecodingContainer();
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v47 = (char *)&v38 - v12;
  v45 = a2;
  v15 = type metadata accessor for Measurement.CodingKeys(255, a2, v13, v14);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys, v15);
  v16 = type metadata accessor for KeyedDecodingContainer();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v38 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    v24 = (uint64_t)a1;
  }
  else
  {
    v21 = v48;
    v50 = a1;
    v56 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v23 = v22;
    v55 = 1;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v54 = 0;
    v38 = KeyedDecodingContainer.decode(_:forKey:)();
    v49 = (uint64_t)v19;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDimension);
    if (swift_dynamicCastMetatype())
    {
      v53 = 1;
      v26 = v44;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v52 = 0;
      KeyedDecodingContainer.decode(_:forKey:)();
      v31 = v30;
      v51 = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      v33 = v32;
      swift_dynamicCastMetatypeUnconditional();
      v43 = v17;
      v34 = objc_msgSend(objc_allocWithZone((Class)NSUnitConverterLinear), sel_initWithCoefficient_constant_, v31, v33);
      v35 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      v36 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_initWithSymbol_converter_, v36, v34);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v41);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v21);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v16);
      v37 = (id)swift_dynamicCastUnknownClassUnconditional();
    }
    else
    {
      v27 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      v28 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v37 = objc_msgSend(v27, sel_initWithSymbol_, v28);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v21);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v49, v16);
    }
    v24 = (uint64_t)v50;
    v29 = v40;
    *v40 = v37;
    v29[1] = v23;
  }
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t Measurement.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id *v4;
  id *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  char *v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  id v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for Measurement.LinearConverterCodingKeys(255, v7, a3, a4);
  v39 = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.LinearConverterCodingKeys, v8);
  v40 = v8;
  v9 = type metadata accessor for KeyedEncodingContainer();
  v10 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  v42 = v10;
  MEMORY[0x1E0C80A78](v9);
  v38 = (char *)&v37 - v11;
  v14 = type metadata accessor for Measurement.UnitCodingKeys(255, v7, v12, v13);
  v44 = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.UnitCodingKeys, v14);
  v46 = type metadata accessor for KeyedEncodingContainer();
  v43 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v47 = (char *)&v37 - v15;
  v45 = v7;
  v18 = type metadata accessor for Measurement.CodingKeys(255, v7, v16, v17);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>.CodingKeys, v18);
  v19 = type metadata accessor for KeyedEncodingContainer();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v37 - v21;
  v48 = *v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v23 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v55 = 0;
  v24 = v49;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v24)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  v49 = v20;
  v54 = 1;
  v26 = v47;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v27 = v22;
  v28 = objc_msgSend(v48, sel_symbol);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v28);

  v53 = 0;
  v29 = v46;
  KeyedEncodingContainer.encode(_:forKey:)();
  v44 = (uint64_t)v27;
  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDimension);
  if (!swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v44, v23);
  }
  objc_opt_self();
  v30 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_converter);
  swift_getObjectType();

  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitConverterLinear);
  result = swift_dynamicCastMetatype();
  if (result)
  {
    objc_opt_self();
    v31 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_converter);
    objc_opt_self();
    v32 = (void *)swift_dynamicCastObjCClassUnconditional();
    v52 = 1;
    v33 = v38;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    objc_msgSend(v32, sel_coefficient);
    v51 = 0;
    v34 = v41;
    v35 = v33;
    KeyedEncodingContainer.encode(_:forKey:)();
    objc_msgSend(v32, sel_constant);
    v50 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v36 = v42;

    (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v34);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v47, v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v44, v23);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return Measurement.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement.encode(to:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for Measurement.LinearConverterCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement.LinearConverterCodingKeys);
}

uint64_t type metadata accessor for Measurement.UnitCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement.UnitCodingKeys);
}

uint64_t type metadata accessor for Measurement.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement.CodingKeys);
}

uint64_t instantiation function for generic protocol witness table for Measurement<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>, a2);
  a1[3] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A>, a2);
  a1[4] = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for Measurement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181A9B464 + 4 * byte_18206A3C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181A9B498 + 4 * byte_18206A3C0[v4]))();
}

uint64_t sub_181A9B498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A9B4A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A9B4A8);
  return result;
}

uint64_t sub_181A9B4B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181A9B4BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181A9B4C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A9B4C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Measurement<A>.LinearConverterCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in Measurement<A>.UnitCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in Measurement<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in Measurement<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A>.UnitCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in Measurement<A>.UnitCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A>.LinearConverterCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in Measurement<A>.LinearConverterCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t _LocaleBridged.copy(newCalendarIdentifier:)(char *a1)
{
  uint64_t v1;
  char v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v11[45];
  __int128 v12;
  _OWORD v13[22];
  uint64_t __dst[44];
  _OWORD __src[22];

  v2 = *a1;
  v3 = objc_msgSend(*(id *)(v1 + 16), sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  Locale.Components.init(identifier:)((uint64_t)v4, v6, v13);
  LOBYTE(v13[6]) = v2;
  __src[0] = v13[0];
  __src[1] = v13[1];
  __src[2] = v13[2];
  __src[3] = v13[3];
  __src[4] = v13[4];
  __src[5] = v13[5];
  LOBYTE(__src[6]) = v2;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)((char *)&v13[6] + 8);
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)((char *)&v13[7] + 8);
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)((char *)&v13[8] + 8);
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)((char *)&v13[9] + 8);
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)((char *)&v13[10] + 8);
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)((char *)&v13[11] + 8);
  WORD4(__src[12]) = WORD4(v13[12]);
  __src[13] = v13[13];
  __src[14] = v13[14];
  __src[15] = v13[15];
  __src[16] = v13[16];
  __src[17] = v13[17];
  __src[18] = v13[18];
  __src[19] = v13[19];
  __src[20] = v13[20];
  __src[21] = v13[21];
  memcpy(__dst, __src, sizeof(__dst));
  outlined retain of Locale.Components((uint64_t *)__src);
  if (one-time initialization token for cache != -1)
    swift_once();
  v7 = static LocaleCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.fixedComponents(_:)(v7, __dst, &v12);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  outlined release of Locale.Components((uint64_t *)__src);
  v9 = v12;
  memcpy(v11, v13, 0x160uLL);
  outlined release of Locale.Components(v11);
  return v9;
}

Swift::String_optional __swiftcall _LocaleBridged.calendarIdentifierDisplayName(for:)(Foundation::Calendar::Identifier a1)
{
  uint64_t v1;
  void *v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  const __CFLocale *v6;
  __CFString *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String_optional result;
  char v14;

  v2 = *(void **)(v1 + 16);
  v3 = (const __CFString *)*MEMORY[0x1E0C9B050];
  v14 = *(_BYTE *)a1;
  v4 = (void *)specialized static Calendar._toNSCalendarIdentifier(_:)(&v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  v6 = v2;
  swift_bridgeObjectRelease();
  v7 = (__CFString *)CFLocaleCopyDisplayNameForPropertyValue(v6, v3, v5);

  swift_unknownObjectRelease();
  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = (uint64_t)v8;
  v12 = v10;
  result.value._object = v12;
  result.value._countAndFlagsBits = v11;
  return result;
}

uint64_t _LocaleBridged.languageCode.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of LocalePreferences?((uint64_t)v4, (uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (v6)
  {
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
}

uint64_t _LocaleBridged.variantCode.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of LocalePreferences?((uint64_t)v6, (uint64_t)v7, &demangling cache variable for type metadata for Any?);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  result = v4;
  v3 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v3 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t _LocaleBridged.exemplarCharacterSet.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *MEMORY[0x1E0C997D0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of LocalePreferences?((uint64_t)v4, (uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    result = outlined destroy of Any?((uint64_t)v5);
    goto LABEL_8;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0)
LABEL_8:
    *a1 = 0;
  return result;
}

uint64_t _LocaleBridged.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;

  if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *MEMORY[0x1E0C99790]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)&v9, &demangling cache variable for type metadata for Any?);
  if (v10)
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      v4 = v7;
      goto LABEL_11;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v9);
  }
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = static CalendarCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.fixed(_:)(v5, 0, &v9);
  os_unfair_lock_unlock(v6);
  result = swift_release_n();
  v4 = v9;
LABEL_11:
  *a1 = v4;
  return result;
}

void _LocaleBridged.calendarIdentifier.getter(char *a1@<X8>)
{
  uint64_t v1;
  id v3;
  char v4;
  char v5;

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_calendarIdentifier);
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v3 = (id)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  static Calendar._fromNSCalendarIdentifier(_:)(v3, &v5);

  v4 = v5;
  if (v5 == 16)
    v4 = 0;
  *a1 = v4;
}

id _LocaleBridged.usesMetricSystem.getter()
{
  uint64_t v0;
  id v1;
  id v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_, *MEMORY[0x1E0C99840]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of LocalePreferences?((uint64_t)v4, (uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v1 = objc_msgSend(v3, sel_BOOLValue);

  return v1;
}

uint64_t _LocaleBridged.measurementSystem.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 296))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.currency.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 304))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.numberingSystem.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 312))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.availableNumberingSystems.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  __int128 v11;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v11);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v11 + 1);
  ObjectType = swift_getObjectType();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 320))(ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t _LocaleBridged.firstDayOfWeek.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 328))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.weekendRange.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 336))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.language.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 352))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.minimumDaysInFirstWeek.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  __int128 v11;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v11);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v11 + 1);
  ObjectType = swift_getObjectType();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 344))(ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

Swift::String __swiftcall _LocaleBridged.identifier(_:)(Foundation::Locale::IdentifierType a1)
{
  uint64_t v1;
  char v2;
  os_unfair_lock_s *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::String result;
  __int128 v17;

  v2 = *(_BYTE *)a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v3 = (os_unfair_lock_s *)static LocaleCache.cache;
  v4 = *(void **)(v1 + 16);
  swift_retain();
  v5 = objc_msgSend(v4, sel_localeIdentifier);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  swift_retain();
  os_unfair_lock_lock(v3 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v3[4], (uint64_t)v6, v8, &v17);
  os_unfair_lock_unlock(v3 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v9 = *((_QWORD *)&v17 + 1);
  ObjectType = swift_getObjectType();
  LOBYTE(v17) = v2;
  v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v9 + 416))(&v17, ObjectType, v9);
  v13 = v12;
  swift_unknownObjectRelease();
  v14 = v11;
  v15 = v13;
  result._object = v15;
  result._countAndFlagsBits = v14;
  return result;
}

uint64_t _LocaleBridged.hourCycle.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 360))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.collation.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 368))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.region.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 376))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.timeZone.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 384))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.subdivision.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 392))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.variant.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 400))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleBridged.temperatureUnit.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  v3 = objc_msgSend(v2, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_retain();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], (uint64_t)v4, v6, &v10);
  os_unfair_lock_unlock(v1 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 408))(ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for _LocaleBridged()
{
  return objc_opt_self();
}

void protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleBridged()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleBridged()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleBridged()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleBridged()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_localeIdentifier);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C997E0]);
}

id protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C997E8]);
}

id protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C997B0]);
}

id protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C99820]);
}

id protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C99848]);
}

id protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C997B8]);
}

id protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C997C0]);
}

id protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C997A0]);
}

id protocol witness for _LocaleProtocol.collatorIdentifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(a1, a2, a3, a4, MEMORY[0x1E0C997A8]);
}

id protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleBridged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  id v6;
  id v7;

  v6 = objc_msgSend(*(id *)(v5 + 16), sel_displayNameForKey_value_, *a5, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (!v6)
    return 0;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C997E8]);
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C99820]);
}

uint64_t protocol witness for _LocaleProtocol.variantCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.variantCode.getter(MEMORY[0x1E0C99848]);
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.variantCode.getter(MEMORY[0x1E0C997B0]);
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C997A0]);
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C997C8]);
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C997D8]);
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C997C0]);
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C997B8]);
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifier.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C997A8]);
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C99810]);
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C99818]);
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C99780]);
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleBridged()
{
  return _LocaleBridged.languageCode.getter(MEMORY[0x1E0C99788]);
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleBridged@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[9];

  _s10Foundation17LocalePreferencesVSgWOi0_(v3);
  return outlined init with take of LocalePreferences?((uint64_t)v3, a1, &demangling cache variable for type metadata for LocalePreferences?);
}

uint64_t protocol witness for _LocaleProtocol.doesNotRequireSpecialCaseHandling.getter in conformance _LocaleBridged()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  LOBYTE(v1) = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleBridged()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSLocale);
  swift_dynamicCast();
  return v2;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleBridged()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_debugDescription);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t instantiation function for generic protocol witness table for _LocaleBridged(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged;
  if (!lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged)
  {
    v1 = type metadata accessor for _LocaleBridged();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _LocaleBridged, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged);
  }
  return result;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(__int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::Bool v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if ((~*(_QWORD *)&a7 & 0x7FF0000000000000) != 0)
  {
    v20 = Double.description.getter();
    v22 = v21;
    v35 = v21;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = 12334;
    v23._object = (void *)0xE200000000000000;
    v24 = String.hasSuffix(_:)(v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      v22 = v35;
    }
    type metadata accessor for JSONReference();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v20;
    *(_QWORD *)(v19 + 24) = v22;
    *(_BYTE *)(v19 + 32) = 1;
  }
  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v36);
    v13 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v15 = v37;
      v14 = v38;
      v17 = v39;
      v16 = v40;
      type metadata accessor for JSONReference();
      if (a7 == INFINITY)
      {
        v18 = v36;
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = v13;
        *(_BYTE *)(v19 + 32) = 0;
        swift_bridgeObjectRetain();
      }
      else
      {
        v27 = swift_allocObject();
        v19 = v27;
        if (a7 == -INFINITY)
        {
          *(_QWORD *)(v27 + 16) = v15;
          *(_QWORD *)(v27 + 24) = v14;
        }
        else
        {
          *(_QWORD *)(v27 + 16) = v17;
          *(_QWORD *)(v27 + 24) = v16;
        }
        *(_BYTE *)(v27 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (a6 == -1)
      {
        _CodingPathNode.path.getter(a2);
      }
      else
      {
        outlined copy of _CodingKey(a3, a4, a5, a6);
        _CodingPathNode.path.getter(a2);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v26 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v26;
        *(_QWORD *)(v26 + 16) = a3;
        *(_QWORD *)(v26 + 24) = a4;
        *(_QWORD *)(v26 + 32) = a5;
        *(_BYTE *)(v26 + 40) = a6;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      v28 = type metadata accessor for EncodingError();
      v29 = swift_allocError();
      v31 = v30;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(_QWORD *)(v31 + 24) = MEMORY[0x1E0DEB070];
      *(double *)v31 = a7;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._object = (void *)0x8000000182306E90;
      v33._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v31, *MEMORY[0x1E0DEC4B0], v28);
      v19 = v29;
      swift_willThrow();
    }
  }
  return v19;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(__int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  Swift::Bool v31;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v47 = a2;
  v46 = a5;
  v55 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v46 - v18;
  if ((~*(_QWORD *)&a6 & 0x7FF0000000000000) != 0)
  {
    v27 = Double.description.getter();
    v29 = v28;
    v48 = v27;
    v49 = v28;
    swift_bridgeObjectRetain();
    v30._countAndFlagsBits = 12334;
    v30._object = (void *)0xE200000000000000;
    v31 = String.hasSuffix(_:)(v30);
    swift_bridgeObjectRelease();
    if (v31)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      v27 = v48;
      v29 = v49;
    }
    type metadata accessor for JSONReference();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v29;
    *(_BYTE *)(v26 + 32) = 1;
  }
  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v50);
    v20 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v22 = v51;
      v21 = v52;
      v24 = v53;
      v23 = v54;
      type metadata accessor for JSONReference();
      if (a6 == INFINITY)
      {
        v25 = v50;
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v25;
        *(_QWORD *)(v26 + 24) = v20;
        *(_BYTE *)(v26 + 32) = 0;
        swift_bridgeObjectRetain();
      }
      else
      {
        v34 = swift_allocObject();
        v26 = v34;
        if (a6 == -INFINITY)
        {
          *(_QWORD *)(v34 + 16) = v22;
          *(_QWORD *)(v34 + 24) = v21;
        }
        else
        {
          *(_QWORD *)(v34 + 16) = v24;
          *(_QWORD *)(v34 + 24) = v23;
        }
        *(_BYTE *)(v34 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      v32(v19, a3, v13);
      v32(v16, (uint64_t)v19, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, a4) == 1)
      {
        v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v16, v13);
        _CodingPathNode.path.getter(v47);
        v33(v19, v13);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a4);
        v35 = _CodingPathNode.path.getter(v47);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v37 = v46;
        *(_QWORD *)(inited + 56) = a4;
        *(_QWORD *)(inited + 64) = v37;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, a4);
        v48 = v35;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
      }
      v39 = type metadata accessor for EncodingError();
      v40 = swift_allocError();
      v42 = v41;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(_QWORD *)(v42 + 24) = MEMORY[0x1E0DEB070];
      *(double *)v42 = a6;
      v48 = 0;
      v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v48 = 0xD000000000000018;
      v49 = 0x8000000182306EB0;
      v43._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._object = (void *)0x8000000182306E90;
      v44._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v44);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v42, *MEMORY[0x1E0DEC4B0], v39);
      v26 = v40;
      swift_willThrow();
    }
  }
  return v26;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(__int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::Bool v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if ((~LODWORD(a7) & 0x7F800000) != 0)
  {
    v20 = Float.description.getter();
    v22 = v21;
    v35 = v21;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = 12334;
    v23._object = (void *)0xE200000000000000;
    v24 = String.hasSuffix(_:)(v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      v22 = v35;
    }
    type metadata accessor for JSONReference();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v20;
    *(_QWORD *)(v19 + 24) = v22;
    *(_BYTE *)(v19 + 32) = 1;
  }
  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v36);
    v13 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v15 = v37;
      v14 = v38;
      v17 = v39;
      v16 = v40;
      type metadata accessor for JSONReference();
      if (a7 == INFINITY)
      {
        v18 = v36;
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = v13;
        *(_BYTE *)(v19 + 32) = 0;
        swift_bridgeObjectRetain();
      }
      else
      {
        v27 = swift_allocObject();
        v19 = v27;
        if (a7 == -INFINITY)
        {
          *(_QWORD *)(v27 + 16) = v15;
          *(_QWORD *)(v27 + 24) = v14;
        }
        else
        {
          *(_QWORD *)(v27 + 16) = v17;
          *(_QWORD *)(v27 + 24) = v16;
        }
        *(_BYTE *)(v27 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (a6 == -1)
      {
        _CodingPathNode.path.getter(a2);
      }
      else
      {
        outlined copy of _CodingKey(a3, a4, a5, a6);
        _CodingPathNode.path.getter(a2);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v26 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v26;
        *(_QWORD *)(v26 + 16) = a3;
        *(_QWORD *)(v26 + 24) = a4;
        *(_QWORD *)(v26 + 32) = a5;
        *(_BYTE *)(v26 + 40) = a6;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      v28 = type metadata accessor for EncodingError();
      v29 = swift_allocError();
      v31 = v30;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(_QWORD *)(v31 + 24) = MEMORY[0x1E0DEB188];
      *(float *)v31 = a7;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = Float.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._object = (void *)0x8000000182306E90;
      v33._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v31, *MEMORY[0x1E0DEC4B0], v28);
      v19 = v29;
      swift_willThrow();
    }
  }
  return v19;
}

uint64_t specialized static JSONReference.number<A, B>(from:with:for:_:)(__int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  Swift::Bool v31;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v47 = a2;
  v46 = a5;
  v55 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v46 - v18;
  if ((~LODWORD(a6) & 0x7F800000) != 0)
  {
    v27 = Float.description.getter();
    v29 = v28;
    v48 = v27;
    v49 = v28;
    swift_bridgeObjectRetain();
    v30._countAndFlagsBits = 12334;
    v30._object = (void *)0xE200000000000000;
    v31 = String.hasSuffix(_:)(v30);
    swift_bridgeObjectRelease();
    if (v31)
    {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      v27 = v48;
      v29 = v49;
    }
    type metadata accessor for JSONReference();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v29;
    *(_BYTE *)(v26 + 32) = 1;
  }
  else
  {
    outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(a1, &v50);
    v20 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v22 = v51;
      v21 = v52;
      v24 = v53;
      v23 = v54;
      type metadata accessor for JSONReference();
      if (a6 == INFINITY)
      {
        v25 = v50;
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v25;
        *(_QWORD *)(v26 + 24) = v20;
        *(_BYTE *)(v26 + 32) = 0;
        swift_bridgeObjectRetain();
      }
      else
      {
        v34 = swift_allocObject();
        v26 = v34;
        if (a6 == -INFINITY)
        {
          *(_QWORD *)(v34 + 16) = v22;
          *(_QWORD *)(v34 + 24) = v21;
        }
        else
        {
          *(_QWORD *)(v34 + 16) = v24;
          *(_QWORD *)(v34 + 24) = v23;
        }
        *(_BYTE *)(v34 + 32) = 0;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      v32(v19, a3, v13);
      v32(v16, (uint64_t)v19, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, a4) == 1)
      {
        v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v16, v13);
        _CodingPathNode.path.getter(v47);
        v33(v19, v13);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a4);
        v35 = _CodingPathNode.path.getter(v47);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v37 = v46;
        *(_QWORD *)(inited + 56) = a4;
        *(_QWORD *)(inited + 64) = v37;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, a4);
        v48 = v35;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
      }
      v39 = type metadata accessor for EncodingError();
      v40 = swift_allocError();
      v42 = v41;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
      *(_QWORD *)(v42 + 24) = MEMORY[0x1E0DEB188];
      *(float *)v42 = a6;
      v48 = 0;
      v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v48 = 0xD000000000000017;
      v49 = 0x8000000182306E70;
      v43._countAndFlagsBits = Float.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._object = (void *)0x8000000182306E90;
      v44._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v44);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v42, *MEMORY[0x1E0DEC4B0], v39);
      v26 = v40;
      swift_willThrow();
    }
  }
  return v26;
}

uint64_t JSONEncoder.OutputFormatting.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Foundation::JSONEncoder::OutputFormatting __swiftcall JSONEncoder.OutputFormatting.init(rawValue:)(Foundation::JSONEncoder::OutputFormatting rawValue)
{
  Foundation::JSONEncoder::OutputFormatting *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t (*JSONEncoder.outputFormatting.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 136);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(_QWORD *)(v1 + 16);
  return PropertyListEncoder.outputFormat.modify;
}

uint64_t JSONEncoder.dateEncodingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = *(void **)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 16) = v6;
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONEncoder.dateEncodingStrategy.modify(_QWORD *a1))(void ***a1)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  void *v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *(os_unfair_lock_s **)(v1 + 136);
  v3[3] = v1;
  v3[4] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = *(void **)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  *v3 = v5;
  v3[1] = v6;
  v7 = *(_BYTE *)(v1 + 40);
  *((_BYTE *)v3 + 16) = v7;
  outlined copy of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  return JSONEncoder.dateEncodingStrategy.modify;
}

void JSONEncoder.dateEncodingStrategy.modify(void ***a1)
{
  void **v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;

  v1 = *a1;
  v2 = (*a1)[3];
  v3 = (os_unfair_lock_s *)(*a1)[4];
  v4 = **a1;
  v5 = (uint64_t)v1[1];
  v6 = (void *)*((_QWORD *)v2 + 3);
  v7 = *((_QWORD *)v2 + 4);
  v8 = *((_BYTE *)v1 + 16);
  *((_QWORD *)v2 + 3) = v4;
  *((_QWORD *)v2 + 4) = v5;
  v9 = *((_BYTE *)v2 + 40);
  *((_BYTE *)v2 + 40) = v8;
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v8);
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v9);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  outlined consume of JSONEncoder.DateEncodingStrategy(*v1, (uint64_t)v1[1], *((_BYTE *)v1 + 16));
  free(v1);
}

uint64_t JSONEncoder.dataEncodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v5 = v1[6];
  v4 = v1[7];
  *a1 = v5;
  a1[1] = v4;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

unint64_t (*JSONEncoder.dataEncodingStrategy.modify(unint64_t *a1))(unint64_t *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (os_unfair_lock_s *)v1[17];
  a1[2] = (unint64_t)v1;
  a1[3] = (unint64_t)v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = v1[6];
  v5 = v1[7];
  *a1 = v4;
  a1[1] = v5;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v4);
  return JSONEncoder.dataEncodingStrategy.modify;
}

unint64_t JSONEncoder.dataEncodingStrategy.modify(unint64_t *a1)
{
  unint64_t v1;
  os_unfair_lock_s *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = a1[2];
  v2 = (os_unfair_lock_s *)a1[3];
  v3 = *a1;
  v4 = a1[1];
  v5 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = *a1;
  *(_QWORD *)(v1 + 56) = v4;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  return outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
}

uint64_t JSONEncoder.dataEncodingStrategy.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  unint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = v1[6];
  v1[6] = v2;
  v1[7] = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t key path setter for JSONEncoder.nonConformingFloatEncodingStrategy : JSONEncoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t v10[6];

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = *a2;
  v10[0] = *a1;
  v10[1] = v2;
  v10[2] = v3;
  v10[3] = v4;
  v10[4] = v5;
  v10[5] = v6;
  v8 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v7 + 176);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v10[0], v2);
  return v8(v10);
}

uint64_t JSONEncoder.nonConformingFloatEncodingStrategy.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = v1[8];
  v5 = v1[9];
  v6 = v1[10];
  v7 = v1[11];
  v9 = v1[12];
  v8 = v1[13];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  swift_retain();
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONEncoder.nonConformingFloatEncodingStrategy.modify(_QWORD *a1))(uint64_t **a1)
{
  _QWORD *v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = (os_unfair_lock_s *)v1[17];
  v3[6] = v1;
  v3[7] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = v1[8];
  v6 = v1[9];
  v7 = v1[10];
  v8 = v1[11];
  v9 = v1[12];
  v10 = v1[13];
  *v3 = v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  v3[4] = v9;
  v3[5] = v10;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  return JSONEncoder.nonConformingFloatEncodingStrategy.modify;
}

void JSONEncoder.nonConformingFloatEncodingStrategy.modify(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = (_QWORD *)(*a1)[6];
  v3 = (os_unfair_lock_s *)(*a1)[7];
  v4 = **a1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v2[8];
  v11 = v2[9];
  v2[8] = v4;
  v2[9] = v5;
  v2[10] = v6;
  v2[11] = v7;
  v2[12] = v8;
  v2[13] = v9;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(*v1, v1[1]);
  free(v1);
}

uint64_t JSONEncoder.nonConformingFloatEncodingStrategy.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  v2 = *((_QWORD *)a1 + 2);
  v8 = *(__int128 *)((char *)a1 + 24);
  v9 = *a1;
  v3 = *((_QWORD *)a1 + 5);
  v4 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  *(_OWORD *)(v1 + 64) = v9;
  *(_QWORD *)(v1 + 80) = v2;
  *(_OWORD *)(v1 + 88) = v8;
  *(_QWORD *)(v1 + 104) = v3;
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t JSONEncoder.keyEncodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v5 = v1[14];
  v4 = v1[15];
  *a1 = v5;
  a1[1] = v4;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

unint64_t (*JSONEncoder.keyEncodingStrategy.modify(unint64_t *a1))(unint64_t *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (os_unfair_lock_s *)v1[17];
  a1[2] = (unint64_t)v1;
  a1[3] = (unint64_t)v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = v1[14];
  v5 = v1[15];
  *a1 = v4;
  a1[1] = v5;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v4);
  return JSONEncoder.keyEncodingStrategy.modify;
}

unint64_t JSONEncoder.keyEncodingStrategy.modify(unint64_t *a1)
{
  unint64_t v1;
  os_unfair_lock_s *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = a1[2];
  v2 = (os_unfair_lock_s *)a1[3];
  v3 = *a1;
  v4 = a1[1];
  v5 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = *a1;
  *(_QWORD *)(v1 + 120) = v4;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  return outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
}

uint64_t JSONEncoder.userInfo.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + 136);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  v2 = *(_QWORD *)(v0 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t (*JSONEncoder.userInfo.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 136);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(_QWORD *)(v1 + 128);
  swift_bridgeObjectRetain();
  return JSONEncoder.userInfo.modify;
}

uint64_t JSONEncoder.userInfo.modify(_QWORD *a1)
{
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)a1[2];
  *(_QWORD *)(a1[1] + 128) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t JSONEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(_QWORD *)(v1 + 128) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t JSONEncoder.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = 1;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v0 + 136) = v2;
  return v0;
}

uint64_t specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t result;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  unint64_t v44;
  Swift::String v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  Swift::String v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  Swift::String v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  int v99;
  int v100;
  int v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  __int16 v106;
  Swift::String v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t (*v121)(_BYTE *, char *, uint64_t);
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  _BYTE v135[24];
  char v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE v148[20];
  char *v149;
  uint64_t v150;
  uint64_t v151;

  v129 = a8;
  v8 = a7;
  LODWORD(v133) = a6;
  v132 = a5;
  v131 = (char *)a4;
  v11 = a1;
  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v121 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v121 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v121 - v22;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v23, v11, v8);
    swift_dynamicCast();
    v24 = v151;
    v25 = specialized __JSONEncoder.wrap<A>(_:for:_:)(a2, a3, (uint64_t)v131, v132, v133, *(double *)v135);
    if (!v24)
      return v25;
    return (uint64_t)v14;
  }
  v127 = v14;
  v26 = (uint64_t)v17;
  v128 = a2;
  v14 = v131;
  v27 = v132;
  v28 = v133;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v20, v11, v8);
    swift_dynamicCast();
    v29 = *(_OWORD *)v135;
    v14 = (char *)specialized __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v135, *(uint64_t *)&v135[8], v128, a3, (unint64_t)v14, v27, v28);
    outlined consume of Data._Representation(v29, *((unint64_t *)&v29 + 1));
    return (uint64_t)v14;
  }
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
    swift_dynamicCast();
    v31 = *(void **)v135;
    v32 = URL.absoluteString.getter();
    v34 = v33;

    swift_release();
    swift_release();
    type metadata accessor for JSONReference();
    v14 = (char *)swift_allocObject();
    *((_QWORD *)v14 + 2) = v32;
    *((_QWORD *)v14 + 3) = v34;
    v14[32] = 0;
    return (uint64_t)v14;
  }
  v35 = (uint64_t)v14;
  type metadata accessor for NSDecimal(0);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_conformsToProtocol2())
      v67 = v8;
    else
      v67 = 0;
    if (v67)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v127, v11, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
      swift_dynamicCast();
      v14 = (char *)specialized __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v135, v128, a3, (uint64_t)v14, v27, v133);
      swift_bridgeObjectRelease();
      return (uint64_t)v14;
    }
LABEL_42:
    v70 = swift_conformsToProtocol2();
    if (v70)
      v71 = v8;
    else
      v71 = 0;
    if (v71)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _JSONDirectArrayEncodable);
      swift_dynamicCast();
      v72 = v130;
      v73 = *(_QWORD *)(v130 + 24);
      v74 = v150;
      v131 = v149;
      v129 = __swift_project_boxed_opaque_existential_1(v148, (uint64_t)v149);
      v76 = *(void **)(v72 + 32);
      v75 = *(void **)(v72 + 40);
      v77 = *(unsigned __int8 *)(v72 + 48);
      v79 = *(_QWORD *)(v72 + 56);
      v78 = *(_QWORD *)(v72 + 64);
      v81 = *(_QWORD *)(v72 + 72);
      v80 = *(_QWORD *)(v72 + 80);
      v83 = *(_QWORD *)(v72 + 88);
      v82 = *(_QWORD *)(v72 + 96);
      v85 = *(_QWORD *)(v72 + 104);
      v84 = *(_QWORD *)(v72 + 112);
      v87 = *(_QWORD *)(v72 + 120);
      v86 = *(_QWORD *)(v72 + 128);
      v88 = *(_QWORD *)(v72 + 136);
      v133 = v88;
      v132 = v86;
      v128 = v81;
      LODWORD(v127) = v77;
      v126 = v74;
      *(_QWORD *)v135 = v73;
      *(_QWORD *)&v135[8] = v76;
      *(_QWORD *)&v135[16] = v75;
      v136 = v77;
      if ((v73 & 1) != 0)
      {
        v137 = v79;
        v138 = v78;
        v122 = v79;
        v139 = v81;
        v140 = v80;
        v141 = v83;
        v142 = v82;
        v143 = v85;
        v144 = v84;
        v145 = v87;
        v146 = v86;
        v147 = v88;
        v130 = *(_QWORD *)(v74 + 16);
        v111 = v80;
        v124 = v80;
        v123 = v75;
        outlined copy of JSONEncoder.DateEncodingStrategy(v76, (uint64_t)v75, v77);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v79);
        v112 = v128;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v128, v111);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRetain();
        v113 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v130)(v135, v131, v126);
        outlined consume of JSONEncoder.DateEncodingStrategy(v76, (uint64_t)v123, (char)v127);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v122);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v112, v124);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v97 = swift_allocObject();
        v14 = (char *)v97;
        *(_QWORD *)(v97 + 16) = v113;
        *(_QWORD *)(v97 + 24) = 0;
        v98 = 6;
      }
      else
      {
        v89 = v79;
        v137 = v79;
        v138 = v78;
        v125 = v78;
        v90 = v81;
        v139 = v81;
        v140 = v80;
        v141 = v83;
        v142 = v82;
        v143 = v85;
        v144 = v84;
        v145 = v87;
        v146 = v86;
        v147 = v88;
        v121 = *(uint64_t (**)(_BYTE *, char *, uint64_t))(v74 + 8);
        v130 = v87;
        v91 = v76;
        v123 = v76;
        v92 = v80;
        v93 = v89;
        outlined copy of JSONEncoder.DateEncodingStrategy(v91, (uint64_t)v75, v77);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v93);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v90, v92);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v130);
        swift_bridgeObjectRetain();
        v94 = v121(v135, v131, v126);
        v96 = v95;
        outlined consume of JSONEncoder.DateEncodingStrategy(v123, (uint64_t)v75, (char)v127);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v93);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v128, v92);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v130);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v97 = swift_allocObject();
        v14 = (char *)v97;
        *(_QWORD *)(v97 + 16) = v94;
        *(_QWORD *)(v97 + 24) = v96;
        v98 = 5;
      }
      *(_BYTE *)(v97 + 32) = v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
      return (uint64_t)v14;
    }
    MEMORY[0x1E0C80A78](v70);
    v118 = v8;
    v119 = v129;
    v120 = v11;
    v109 = v151;
    v25 = specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD))partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v121 - 6), v110, a3, v35, v27, v133);
    if (!v109)
      return v25;
    return (uint64_t)v14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
  swift_dynamicCast();
  v36 = *(_DWORD *)v135;
  v37 = *(unsigned __int16 *)&v135[4];
  v38 = *(unsigned __int16 *)&v135[6];
  v39 = *(_WORD *)&v135[8];
  v40 = *(_WORD *)&v135[10];
  v41 = *(_WORD *)&v135[12];
  v42 = *(_WORD *)&v135[14];
  v43 = *(_WORD *)&v135[16];
  LODWORD(v44) = *(unsigned __int16 *)&v135[18];
  if (!_So9NSDecimala__length_getter(v135))
  {
    *(_DWORD *)v135 = v36;
    *(_WORD *)&v135[4] = v37;
    *(_WORD *)&v135[6] = v38;
    *(_WORD *)&v135[8] = v39;
    *(_WORD *)&v135[10] = v40;
    *(_WORD *)&v135[12] = v41;
    *(_WORD *)&v135[14] = v42;
    *(_WORD *)&v135[16] = v43;
    *(_WORD *)&v135[18] = v44;
    if (_So9NSDecimala__isNegative_getter(v135))
    {
      v68 = 0xE300000000000000;
      v69 = 5136718;
LABEL_63:
      type metadata accessor for JSONReference();
      v14 = (char *)swift_allocObject();
      *((_QWORD *)v14 + 2) = v69;
      *((_QWORD *)v14 + 3) = v68;
      v14[32] = 1;
      return (uint64_t)v14;
    }
  }
  *(_DWORD *)v135 = v36;
  *(_WORD *)&v135[4] = v37;
  *(_WORD *)&v135[6] = v38;
  *(_WORD *)&v135[8] = v39;
  *(_WORD *)&v135[10] = v40;
  *(_WORD *)&v135[12] = v41;
  *(_WORD *)&v135[14] = v42;
  *(_WORD *)&v135[16] = v43;
  *(_WORD *)&v135[18] = v44;
  if (!_So9NSDecimala__length_getter(v135))
  {
    v68 = 0xE100000000000000;
    v69 = 48;
    goto LABEL_63;
  }
  *(_QWORD *)&v134 = 0;
  *((_QWORD *)&v134 + 1) = 0xE000000000000000;
  *(_DWORD *)v135 = v36;
  *(_WORD *)&v135[4] = v37;
  *(_WORD *)&v135[6] = v38;
  *(_WORD *)&v135[8] = v39;
  *(_WORD *)&v135[10] = v40;
  *(_WORD *)&v135[12] = v41;
  *(_WORD *)&v135[14] = v42;
  *(_WORD *)&v135[16] = v43;
  *(_WORD *)&v135[18] = v44;
  *(_DWORD *)v148 = v36;
  *(_WORD *)&v148[4] = v37;
  *(_WORD *)&v148[6] = v38;
  *(_WORD *)&v148[8] = v39;
  *(_WORD *)&v148[10] = v40;
  *(_WORD *)&v148[12] = v41;
  *(_WORD *)&v148[14] = v42;
  *(_WORD *)&v148[16] = v43;
  *(_WORD *)&v148[18] = v44;
  if ((int)_So9NSDecimala__exponent_getter(v148) >= 1)
  {
    do
    {
      LODWORD(v133) = v44;
      v45._countAndFlagsBits = 48;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      *(_DWORD *)v148 = v36;
      *(_WORD *)&v148[4] = v37;
      *(_WORD *)&v148[6] = v38;
      *(_WORD *)&v148[8] = v39;
      *(_WORD *)&v148[10] = v40;
      *(_WORD *)&v148[12] = v41;
      *(_WORD *)&v148[14] = v42;
      *(_WORD *)&v148[16] = v43;
      *(_WORD *)&v148[18] = v133;
      v46 = _So9NSDecimala__exponent_getter(v148);
      _So9NSDecimala__exponent_setter((v46 - 1), v135);
      v36 = *(_DWORD *)v135;
      v37 = *(unsigned __int16 *)&v135[4];
      v38 = *(unsigned __int16 *)&v135[6];
      v39 = *(_WORD *)&v135[8];
      v40 = *(_WORD *)&v135[10];
      v41 = *(_WORD *)&v135[12];
      v42 = *(_WORD *)&v135[14];
      v43 = *(_WORD *)&v135[16];
      LODWORD(v44) = *(unsigned __int16 *)&v135[18];
      *(_OWORD *)v148 = *(_OWORD *)v135;
      *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
    }
    while ((int)_So9NSDecimala__exponent_getter(v148) > 0);
  }
  *(_DWORD *)v148 = v36;
  *(_WORD *)&v148[4] = v37;
  *(_WORD *)&v148[6] = v38;
  *(_WORD *)&v148[8] = v39;
  *(_WORD *)&v148[10] = v40;
  *(_WORD *)&v148[12] = v41;
  *(_WORD *)&v148[14] = v42;
  *(_WORD *)&v148[16] = v43;
  *(_WORD *)&v148[18] = v44;
  if (!_So9NSDecimala__exponent_getter(v148))
  {
    _So9NSDecimala__exponent_setter(1, v135);
    v36 = *(_DWORD *)v135;
    v37 = *(unsigned __int16 *)&v135[4];
    v38 = *(unsigned __int16 *)&v135[6];
    v39 = *(_WORD *)&v135[8];
    v40 = *(_WORD *)&v135[10];
    v41 = *(_WORD *)&v135[12];
    v42 = *(_WORD *)&v135[14];
    v43 = *(_WORD *)&v135[16];
    LOWORD(v44) = *(_WORD *)&v135[18];
  }
  LODWORD(v133) = v36;
  *(_DWORD *)v148 = v36;
  v47 = v38;
  v48 = v37;
  *(_WORD *)&v148[4] = v37;
  LODWORD(v131) = v47;
  *(_WORD *)&v148[6] = v47;
  *(_WORD *)&v148[8] = v39;
  *(_WORD *)&v148[10] = v40;
  *(_WORD *)&v148[12] = v41;
  *(_WORD *)&v148[14] = v42;
  *(_WORD *)&v148[16] = v43;
  *(_WORD *)&v148[18] = v44;
  if (!_So9NSDecimala__length_getter(v148))
  {
    v49 = v133;
    v50 = v37;
    LOWORD(v51) = (_WORD)v131;
LABEL_49:
    *(_DWORD *)v148 = v49;
    *(_WORD *)&v148[4] = v50;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    v99 = v49;
    v100 = v50;
    v101 = _So9NSDecimala__exponent_getter(v148);
    v102 = v99;
    v103 = v100;
    if (v101 <= 0)
    {
      *(_DWORD *)v148 = v99;
      LODWORD(v132) = v100;
      *(_WORD *)&v148[4] = v100;
      *(_WORD *)&v148[6] = v51;
      *(_WORD *)&v148[8] = v39;
      *(_WORD *)&v148[10] = v40;
      *(_WORD *)&v148[12] = v41;
      *(_WORD *)&v148[14] = v42;
      *(_WORD *)&v148[16] = v43;
      *(_WORD *)&v148[18] = v44;
      v104 = _So9NSDecimala__exponent_getter(v148);
      LODWORD(v133) = v99;
      v105 = v51;
      if (v104)
      {
        v106 = v132;
        do
        {
          v107._countAndFlagsBits = 48;
          v107._object = (void *)0xE100000000000000;
          String.append(_:)(v107);
          *(_DWORD *)v148 = v133;
          *(_WORD *)&v148[4] = v106;
          *(_WORD *)&v148[6] = v105;
          *(_WORD *)&v148[8] = v39;
          *(_WORD *)&v148[10] = v40;
          *(_WORD *)&v148[12] = v41;
          *(_WORD *)&v148[14] = v42;
          *(_WORD *)&v148[16] = v43;
          *(_WORD *)&v148[18] = v44;
          v108 = _So9NSDecimala__exponent_getter(v148);
          _So9NSDecimala__exponent_setter((v108 + 1), v135);
          v106 = *(_WORD *)&v135[4];
          v105 = *(_WORD *)&v135[6];
          v39 = *(_WORD *)&v135[8];
          v40 = *(_WORD *)&v135[10];
          v41 = *(_WORD *)&v135[12];
          v42 = *(_WORD *)&v135[14];
          v43 = *(_WORD *)&v135[16];
          LOWORD(v44) = *(_WORD *)&v135[18];
          LODWORD(v133) = *(_DWORD *)v135;
          *(_OWORD *)v148 = *(_OWORD *)v135;
          *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
        }
        while (_So9NSDecimala__exponent_getter(v148));
      }
      else
      {
        v106 = v132;
      }
      v114._countAndFlagsBits = 46;
      v114._object = (void *)0xE100000000000000;
      String.append(_:)(v114);
      v115._countAndFlagsBits = 48;
      v115._object = (void *)0xE100000000000000;
      String.append(_:)(v115);
      LOWORD(v51) = v105;
      v102 = v133;
      v103 = v106;
    }
    *(_DWORD *)v148 = v102;
    *(_WORD *)&v148[4] = v103;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    if (_So9NSDecimala__isNegative_getter(v148))
    {
      v116._countAndFlagsBits = 45;
      v116._object = (void *)0xE100000000000000;
      String.append(_:)(v116);
    }
    *(_OWORD *)v148 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    v69 = String.init<A>(_:)();
    v68 = v117;
    goto LABEL_63;
  }
  v26 = 3435973837;
  v12 = 10;
  v49 = v133;
  v50 = v48;
  v51 = (int)v131;
  while (1)
  {
    LODWORD(v133) = v49;
    LODWORD(v132) = v50;
    *(_DWORD *)v148 = v49;
    *(_WORD *)&v148[4] = v50;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    if (!_So9NSDecimala__exponent_getter(v148))
    {
      LODWORD(v131) = v51;
      v52._countAndFlagsBits = 46;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
      LOWORD(v51) = (_WORD)v131;
    }
    *(_DWORD *)v148 = v133;
    *(_WORD *)&v148[4] = v132;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    v53 = _So9NSDecimala__exponent_getter(v148);
    _So9NSDecimala__exponent_setter((v53 + 1), v135);
    v54 = *(unsigned int *)v135;
    v55 = *(unsigned __int16 *)&v135[4];
    v27 = *(unsigned __int16 *)&v135[6];
    v56 = *(unsigned __int16 *)&v135[8];
    v130 = *(unsigned __int16 *)&v135[10];
    v129 = (_QWORD *)*(unsigned __int16 *)&v135[12];
    v11 = *(unsigned __int16 *)&v135[18];
    v127 = (char *)*(unsigned __int16 *)&v135[14];
    LODWORD(v128) = *(unsigned __int16 *)&v135[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v135 | ((unint64_t)*(unsigned __int16 *)&v135[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v135[6] << 48), *(unsigned __int16 *)&v135[8] | ((unint64_t)*(unsigned __int16 *)&v135[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v135[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v135[14] << 48), *(unsigned __int16 *)&v135[16] | (*(unsigned __int16 *)&v135[18] << 16));
    v14 = v57;
    a3 = *((_QWORD *)v57 + 2);
    v133 = v54;
    v132 = v55;
    v131 = (char *)v56;
    if (a3)
    {
      v58 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      v35 = v58 + 30;
      *(_QWORD *)(v58 + 16) = a3;
      bzero((void *)(v58 + 32), 2 * a3);
      v59 = *(unsigned __int16 *)&v14[2 * a3 + 30];
      v60 = v59 / 0xA;
      while (1)
      {
        *(_WORD *)(v35 + 2 * a3) = v60;
        v8 = v59 % 0xA;
        if (a3 == 1)
          break;
        v59 = *(unsigned __int16 *)&v14[2 * a3 + 28] | ((_DWORD)v8 << 16);
        v60 = v59 / 0xA;
        v61 = a3 - 2;
        --a3;
        if (v61 >= *(_QWORD *)(v58 + 16))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }
    else
    {
      LODWORD(v8) = 0;
      v58 = MEMORY[0x1E0DEE9D8];
    }
    v62 = *(_QWORD *)(v58 + 16);
    if (v62 && !*(_WORD *)(v58 + 2 * v62 + 30))
    {
      do
      {
        *(_QWORD *)(v58 + 16) = v62 - 1;
        if (v62 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v58 + 28 + 2 * v62--));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)v148 = v133;
    *(_WORD *)&v148[4] = v132;
    *(_WORD *)&v148[6] = v27;
    *(_WORD *)&v148[8] = (_WORD)v131;
    *(_WORD *)&v148[10] = v130;
    *(_WORD *)&v148[12] = (_WORD)v129;
    *(_WORD *)&v148[14] = (_WORD)v127;
    *(_WORD *)&v148[16] = v128;
    *(_WORD *)&v148[18] = v11;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v58);
    if (v64)
      break;
    v151 = 0;
    v44 = *(_QWORD *)(v58 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v44))
      goto LABEL_65;
    _So9NSDecimala__length_setter(v44, v148);
    *(_DWORD *)v135 = *(_DWORD *)v148;
    *(_OWORD *)&v135[4] = *(_OWORD *)&v148[4];
    *(_QWORD *)v148 = v8 | 0x30;
    v65._countAndFlagsBits = MEMORY[0x186DA46D0](v148, 1);
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    LODWORD(v133) = *(_DWORD *)v135;
    LODWORD(v132) = *(unsigned __int16 *)&v135[4];
    v51 = *(unsigned __int16 *)&v135[6];
    v39 = *(_WORD *)&v135[8];
    v40 = *(_WORD *)&v135[10];
    v41 = *(_WORD *)&v135[12];
    v42 = *(_WORD *)&v135[14];
    v43 = *(_WORD *)&v135[16];
    LOWORD(v44) = *(_WORD *)&v135[18];
    *(_OWORD *)v148 = *(_OWORD *)v135;
    *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
    v66 = _So9NSDecimala__length_getter(v148);
    v50 = v132;
    v49 = v133;
    if (!v66)
      goto LABEL_49;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_65:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, __int128 *a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t result;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  Swift::String v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  Swift::String v47;
  int v48;
  uint64_t v49;
  __int128 *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  Swift::String v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void *v73;
  void *v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  int v97;
  int v98;
  int v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  __int16 v104;
  Swift::String v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(_BYTE *, uint64_t, char *);
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(_BYTE *, uint64_t, char *);
  char *v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  _BYTE v136[24];
  char v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  __int128 *v147;
  uint64_t v148;
  _BYTE v149[20];
  uint64_t v150;
  char *v151;
  uint64_t v152;

  v133 = a7;
  v131 = a6;
  v132 = a5;
  v7 = a4;
  v10 = a1;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v122 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v122 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v122 - v21;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v22, v10, v7);
    swift_dynamicCast();
    *(_QWORD *)v149 = *(_QWORD *)v136;
    v23 = v152;
    v24 = __JSONEncoder.wrap<A>(_:for:_:)((double *)v149, a2, a3, v132, (uint64_t)v133);
    if (!v23)
      return v24;
    return a2;
  }
  v128 = v13;
  v129 = a2;
  v130 = a3;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v19, v10, v7);
    swift_dynamicCast();
    v25 = *(_OWORD *)v136;
    a2 = __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v136, *(uint64_t *)&v136[8], v129, v130, v132, (uint64_t)v133);
    outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
    return a2;
  }
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v10, v7);
    swift_dynamicCast();
    v27 = *(void **)v136;
    v28 = URL.absoluteString.getter();
    v30 = v29;

    swift_release();
    swift_release();
    type metadata accessor for JSONReference();
    a2 = swift_allocObject();
    *(_QWORD *)(a2 + 16) = v28;
    *(_QWORD *)(a2 + 24) = v30;
    *(_BYTE *)(a2 + 32) = 0;
    return a2;
  }
  type metadata accessor for NSDecimal(0);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_conformsToProtocol2())
      v65 = v7;
    else
      v65 = 0;
    if (v65)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v128, v10, v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
      swift_dynamicCast();
      a2 = __JSONEncoder.wrap<A>(_:for:_:)(*(uint64_t *)v136, v129, v130, v132, v133);
      swift_bridgeObjectRelease();
      return a2;
    }
LABEL_42:
    v68 = swift_conformsToProtocol2();
    if (v68)
      v69 = v7;
    else
      v69 = 0;
    if (v69)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(v11 + 16))(v16, v10, v7, v130, v132, v133);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _JSONDirectArrayEncodable);
      swift_dynamicCast();
      v70 = v134;
      v71 = *(_QWORD *)(v134 + 24);
      v72 = v151;
      v132 = v150;
      v131 = __swift_project_boxed_opaque_existential_1(v149, v150);
      v74 = *(void **)(v70 + 32);
      v73 = *(void **)(v70 + 40);
      v75 = *(unsigned __int8 *)(v70 + 48);
      v77 = *(_QWORD *)(v70 + 56);
      v76 = *(_QWORD *)(v70 + 64);
      v79 = *(_QWORD *)(v70 + 72);
      v78 = *(_QWORD *)(v70 + 80);
      v81 = *(_QWORD *)(v70 + 88);
      v80 = *(_QWORD *)(v70 + 96);
      v83 = *(_QWORD *)(v70 + 104);
      v82 = *(_QWORD *)(v70 + 112);
      v85 = *(_QWORD *)(v70 + 120);
      v84 = *(__int128 **)(v70 + 128);
      v86 = *(_QWORD *)(v70 + 136);
      v134 = v86;
      v133 = v84;
      v130 = v79;
      LODWORD(v129) = v75;
      v128 = v72;
      *(_QWORD *)v136 = v71;
      *(_QWORD *)&v136[8] = v74;
      *(_QWORD *)&v136[16] = v73;
      v137 = v75;
      if ((v71 & 1) != 0)
      {
        v138 = v77;
        v139 = v76;
        v123 = v77;
        v140 = v79;
        v141 = v78;
        v142 = v81;
        v143 = v80;
        v144 = v83;
        v145 = v82;
        v146 = v85;
        v147 = v84;
        v148 = v86;
        v127 = (uint64_t (*)(_BYTE *, uint64_t, char *))*((_QWORD *)v72 + 2);
        v112 = v78;
        v125 = v78;
        v124 = v73;
        outlined copy of JSONEncoder.DateEncodingStrategy(v74, (uint64_t)v73, v75);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v77);
        v113 = v130;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v130, v112);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v85);
        swift_bridgeObjectRetain();
        v114 = v127(v136, v132, v128);
        outlined consume of JSONEncoder.DateEncodingStrategy(v74, (uint64_t)v124, v129);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v123);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v113, v125);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v85);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v95 = swift_allocObject();
        a2 = v95;
        *(_QWORD *)(v95 + 16) = v114;
        *(_QWORD *)(v95 + 24) = 0;
        v96 = 6;
      }
      else
      {
        v87 = v77;
        v138 = v77;
        v139 = v76;
        v126 = v76;
        v88 = v79;
        v140 = v79;
        v141 = v78;
        v142 = v81;
        v143 = v80;
        v144 = v83;
        v145 = v82;
        v146 = v85;
        v147 = v84;
        v148 = v86;
        v122 = (uint64_t (*)(_BYTE *, uint64_t, char *))*((_QWORD *)v72 + 1);
        v127 = (uint64_t (*)(_BYTE *, uint64_t, char *))v85;
        v89 = v74;
        v124 = v74;
        v90 = v78;
        v91 = v87;
        outlined copy of JSONEncoder.DateEncodingStrategy(v89, (uint64_t)v73, v75);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v91);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v88, v90);
        outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v127);
        swift_bridgeObjectRetain();
        v92 = v122(v136, v132, v128);
        v94 = v93;
        outlined consume of JSONEncoder.DateEncodingStrategy(v124, (uint64_t)v73, v129);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v91);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v130, v90);
        outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v127);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v95 = swift_allocObject();
        a2 = v95;
        *(_QWORD *)(v95 + 16) = v92;
        *(_QWORD *)(v95 + 24) = v94;
        v96 = 5;
      }
      *(_BYTE *)(v95 + 32) = v96;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
      return a2;
    }
    MEMORY[0x1E0C80A78](v68);
    *(&v122 - 6) = (uint64_t (*)(_BYTE *, uint64_t, char *))v7;
    *(&v122 - 5) = (uint64_t (*)(_BYTE *, uint64_t, char *))v107;
    v119 = v131;
    v120 = v108;
    v121 = v10;
    v109 = v152;
    v24 = __JSONEncoder._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v122 - 8), v110, v111, v107, v108);
    if (!v109)
      return v24;
    return a2;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v10, v7);
  swift_dynamicCast();
  v31 = *(_DWORD *)v136;
  v32 = *(unsigned __int16 *)&v136[4];
  v33 = *(unsigned __int16 *)&v136[6];
  v34 = *(_WORD *)&v136[8];
  v35 = *(_WORD *)&v136[10];
  v36 = *(_WORD *)&v136[12];
  v37 = *(_WORD *)&v136[14];
  v38 = *(_WORD *)&v136[16];
  LODWORD(v39) = *(unsigned __int16 *)&v136[18];
  if (!_So9NSDecimala__length_getter(v136))
  {
    *(_DWORD *)v136 = v31;
    *(_WORD *)&v136[4] = v32;
    *(_WORD *)&v136[6] = v33;
    *(_WORD *)&v136[8] = v34;
    *(_WORD *)&v136[10] = v35;
    *(_WORD *)&v136[12] = v36;
    *(_WORD *)&v136[14] = v37;
    *(_WORD *)&v136[16] = v38;
    *(_WORD *)&v136[18] = v39;
    if (_So9NSDecimala__isNegative_getter(v136))
    {
      v66 = 0xE300000000000000;
      v67 = 5136718;
LABEL_63:
      type metadata accessor for JSONReference();
      a2 = swift_allocObject();
      *(_QWORD *)(a2 + 16) = v67;
      *(_QWORD *)(a2 + 24) = v66;
      *(_BYTE *)(a2 + 32) = 1;
      return a2;
    }
  }
  *(_DWORD *)v136 = v31;
  *(_WORD *)&v136[4] = v32;
  *(_WORD *)&v136[6] = v33;
  *(_WORD *)&v136[8] = v34;
  *(_WORD *)&v136[10] = v35;
  *(_WORD *)&v136[12] = v36;
  *(_WORD *)&v136[14] = v37;
  *(_WORD *)&v136[16] = v38;
  *(_WORD *)&v136[18] = v39;
  if (!_So9NSDecimala__length_getter(v136))
  {
    v66 = 0xE100000000000000;
    v67 = 48;
    goto LABEL_63;
  }
  *(_QWORD *)&v135 = 0;
  *((_QWORD *)&v135 + 1) = 0xE000000000000000;
  *(_DWORD *)v136 = v31;
  *(_WORD *)&v136[4] = v32;
  *(_WORD *)&v136[6] = v33;
  *(_WORD *)&v136[8] = v34;
  *(_WORD *)&v136[10] = v35;
  *(_WORD *)&v136[12] = v36;
  *(_WORD *)&v136[14] = v37;
  *(_WORD *)&v136[16] = v38;
  *(_WORD *)&v136[18] = v39;
  *(_DWORD *)v149 = v31;
  *(_WORD *)&v149[4] = v32;
  *(_WORD *)&v149[6] = v33;
  *(_WORD *)&v149[8] = v34;
  *(_WORD *)&v149[10] = v35;
  *(_WORD *)&v149[12] = v36;
  *(_WORD *)&v149[14] = v37;
  *(_WORD *)&v149[16] = v38;
  *(_WORD *)&v149[18] = v39;
  if ((int)_So9NSDecimala__exponent_getter(v149) >= 1)
  {
    do
    {
      LODWORD(v134) = v39;
      v40._countAndFlagsBits = 48;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      *(_DWORD *)v149 = v31;
      *(_WORD *)&v149[4] = v32;
      *(_WORD *)&v149[6] = v33;
      *(_WORD *)&v149[8] = v34;
      *(_WORD *)&v149[10] = v35;
      *(_WORD *)&v149[12] = v36;
      *(_WORD *)&v149[14] = v37;
      *(_WORD *)&v149[16] = v38;
      *(_WORD *)&v149[18] = v134;
      v41 = _So9NSDecimala__exponent_getter(v149);
      _So9NSDecimala__exponent_setter((v41 - 1), v136);
      v31 = *(_DWORD *)v136;
      v32 = *(unsigned __int16 *)&v136[4];
      v33 = *(unsigned __int16 *)&v136[6];
      v34 = *(_WORD *)&v136[8];
      v35 = *(_WORD *)&v136[10];
      v36 = *(_WORD *)&v136[12];
      v37 = *(_WORD *)&v136[14];
      v38 = *(_WORD *)&v136[16];
      LODWORD(v39) = *(unsigned __int16 *)&v136[18];
      *(_OWORD *)v149 = *(_OWORD *)v136;
      *(_DWORD *)&v149[16] = *(_DWORD *)&v136[16];
    }
    while ((int)_So9NSDecimala__exponent_getter(v149) > 0);
  }
  *(_DWORD *)v149 = v31;
  *(_WORD *)&v149[4] = v32;
  *(_WORD *)&v149[6] = v33;
  *(_WORD *)&v149[8] = v34;
  *(_WORD *)&v149[10] = v35;
  *(_WORD *)&v149[12] = v36;
  *(_WORD *)&v149[14] = v37;
  *(_WORD *)&v149[16] = v38;
  *(_WORD *)&v149[18] = v39;
  if (!_So9NSDecimala__exponent_getter(v149))
  {
    _So9NSDecimala__exponent_setter(1, v136);
    v31 = *(_DWORD *)v136;
    v32 = *(unsigned __int16 *)&v136[4];
    v33 = *(unsigned __int16 *)&v136[6];
    v34 = *(_WORD *)&v136[8];
    v35 = *(_WORD *)&v136[10];
    v36 = *(_WORD *)&v136[12];
    v37 = *(_WORD *)&v136[14];
    v38 = *(_WORD *)&v136[16];
    LOWORD(v39) = *(_WORD *)&v136[18];
  }
  LODWORD(v134) = v31;
  *(_DWORD *)v149 = v31;
  v42 = v33;
  v43 = v32;
  *(_WORD *)&v149[4] = v32;
  LODWORD(v132) = v42;
  *(_WORD *)&v149[6] = v42;
  *(_WORD *)&v149[8] = v34;
  *(_WORD *)&v149[10] = v35;
  *(_WORD *)&v149[12] = v36;
  *(_WORD *)&v149[14] = v37;
  *(_WORD *)&v149[16] = v38;
  *(_WORD *)&v149[18] = v39;
  if (!_So9NSDecimala__length_getter(v149))
  {
    v44 = v134;
    v45 = v32;
    LOWORD(v46) = v132;
LABEL_49:
    *(_DWORD *)v149 = v44;
    *(_WORD *)&v149[4] = v45;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    v97 = v44;
    v98 = v45;
    v99 = _So9NSDecimala__exponent_getter(v149);
    v100 = v97;
    v101 = v98;
    if (v99 <= 0)
    {
      *(_DWORD *)v149 = v97;
      LODWORD(v133) = v98;
      *(_WORD *)&v149[4] = v98;
      *(_WORD *)&v149[6] = v46;
      *(_WORD *)&v149[8] = v34;
      *(_WORD *)&v149[10] = v35;
      *(_WORD *)&v149[12] = v36;
      *(_WORD *)&v149[14] = v37;
      *(_WORD *)&v149[16] = v38;
      *(_WORD *)&v149[18] = v39;
      v102 = _So9NSDecimala__exponent_getter(v149);
      LODWORD(v134) = v97;
      v103 = v46;
      if (v102)
      {
        v104 = (__int16)v133;
        do
        {
          v105._countAndFlagsBits = 48;
          v105._object = (void *)0xE100000000000000;
          String.append(_:)(v105);
          *(_DWORD *)v149 = v134;
          *(_WORD *)&v149[4] = v104;
          *(_WORD *)&v149[6] = v103;
          *(_WORD *)&v149[8] = v34;
          *(_WORD *)&v149[10] = v35;
          *(_WORD *)&v149[12] = v36;
          *(_WORD *)&v149[14] = v37;
          *(_WORD *)&v149[16] = v38;
          *(_WORD *)&v149[18] = v39;
          v106 = _So9NSDecimala__exponent_getter(v149);
          _So9NSDecimala__exponent_setter((v106 + 1), v136);
          v104 = *(_WORD *)&v136[4];
          v103 = *(_WORD *)&v136[6];
          v34 = *(_WORD *)&v136[8];
          v35 = *(_WORD *)&v136[10];
          v36 = *(_WORD *)&v136[12];
          v37 = *(_WORD *)&v136[14];
          v38 = *(_WORD *)&v136[16];
          LOWORD(v39) = *(_WORD *)&v136[18];
          LODWORD(v134) = *(_DWORD *)v136;
          *(_OWORD *)v149 = *(_OWORD *)v136;
          *(_DWORD *)&v149[16] = *(_DWORD *)&v136[16];
        }
        while (_So9NSDecimala__exponent_getter(v149));
      }
      else
      {
        v104 = (__int16)v133;
      }
      v115._countAndFlagsBits = 46;
      v115._object = (void *)0xE100000000000000;
      String.append(_:)(v115);
      v116._countAndFlagsBits = 48;
      v116._object = (void *)0xE100000000000000;
      String.append(_:)(v116);
      LOWORD(v46) = v103;
      v100 = v134;
      v101 = v104;
    }
    *(_DWORD *)v149 = v100;
    *(_WORD *)&v149[4] = v101;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    if (_So9NSDecimala__isNegative_getter(v149))
    {
      v117._countAndFlagsBits = 45;
      v117._object = (void *)0xE100000000000000;
      String.append(_:)(v117);
    }
    *(_OWORD *)v149 = v135;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>, &demangling cache variable for type metadata for ReversedCollection<String>, MEMORY[0x1E0DECCF8]);
    v67 = String.init<A>(_:)();
    v66 = v118;
    goto LABEL_63;
  }
  v11 = 3435973837;
  v10 = 10;
  v44 = v134;
  v45 = v43;
  v46 = v132;
  while (1)
  {
    LODWORD(v134) = v44;
    LODWORD(v133) = v45;
    *(_DWORD *)v149 = v44;
    *(_WORD *)&v149[4] = v45;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    if (!_So9NSDecimala__exponent_getter(v149))
    {
      LODWORD(v132) = v46;
      v47._countAndFlagsBits = 46;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      LOWORD(v46) = v132;
    }
    *(_DWORD *)v149 = v134;
    *(_WORD *)&v149[4] = (_WORD)v133;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    v48 = _So9NSDecimala__exponent_getter(v149);
    _So9NSDecimala__exponent_setter((v48 + 1), v136);
    v49 = *(unsigned int *)v136;
    v50 = (__int128 *)*(unsigned __int16 *)&v136[4];
    v51 = *(_WORD *)&v136[6];
    v52 = *(unsigned __int16 *)&v136[8];
    v131 = (_QWORD *)*(unsigned __int16 *)&v136[10];
    v130 = *(unsigned __int16 *)&v136[12];
    v53 = *(_WORD *)&v136[18];
    v128 = (char *)*(unsigned __int16 *)&v136[14];
    LODWORD(v129) = *(unsigned __int16 *)&v136[16];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v136 | ((unint64_t)*(unsigned __int16 *)&v136[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v136[6] << 48), *(unsigned __int16 *)&v136[8] | ((unint64_t)*(unsigned __int16 *)&v136[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v136[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v136[14] << 48), *(unsigned __int16 *)&v136[16] | (*(unsigned __int16 *)&v136[18] << 16));
    a2 = v54;
    v55 = *(_QWORD *)(v54 + 16);
    v134 = v49;
    v133 = v50;
    v132 = v52;
    if (v55)
    {
      v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      v16 = (char *)(v7 + 30);
      *(_QWORD *)(v7 + 16) = v55;
      bzero((void *)(v7 + 32), 2 * v55);
      v56 = *(unsigned __int16 *)(2 * v55 + a2 + 30);
      v57 = v56 / 0xA;
      while (1)
      {
        *(_WORD *)&v16[2 * v55] = v57;
        v58 = v56 % 0xA;
        if (v55 == 1)
          break;
        v56 = *(unsigned __int16 *)(a2 + 28 + 2 * v55) | (v58 << 16);
        v57 = v56 / 0xA;
        v59 = v55 - 2;
        --v55;
        if (v59 >= *(_QWORD *)(v7 + 16))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }
    else
    {
      v58 = 0;
      v7 = MEMORY[0x1E0DEE9D8];
    }
    v60 = *(_QWORD *)(v7 + 16);
    if (v60 && !*(_WORD *)(v7 + 2 * v60 + 30))
    {
      do
      {
        *(_QWORD *)(v7 + 16) = v60 - 1;
        if (v60 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v7 + 28 + 2 * v60--));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)v149 = v134;
    *(_WORD *)&v149[4] = (_WORD)v133;
    *(_WORD *)&v149[6] = v51;
    *(_WORD *)&v149[8] = v132;
    *(_WORD *)&v149[10] = (_WORD)v131;
    *(_WORD *)&v149[12] = v130;
    *(_WORD *)&v149[14] = (_WORD)v128;
    *(_WORD *)&v149[16] = v129;
    *(_WORD *)&v149[18] = v53;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v7);
    if (v62)
      break;
    v152 = 0;
    v39 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39))
      goto LABEL_65;
    _So9NSDecimala__length_setter(v39, v149);
    *(_DWORD *)v136 = *(_DWORD *)v149;
    *(_OWORD *)&v136[4] = *(_OWORD *)&v149[4];
    *(_QWORD *)v149 = v58 | 0x30;
    v63._countAndFlagsBits = MEMORY[0x186DA46D0](v149, 1);
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    LODWORD(v134) = *(_DWORD *)v136;
    LODWORD(v133) = *(unsigned __int16 *)&v136[4];
    v46 = *(unsigned __int16 *)&v136[6];
    v34 = *(_WORD *)&v136[8];
    v35 = *(_WORD *)&v136[10];
    v36 = *(_WORD *)&v136[12];
    v37 = *(_WORD *)&v136[14];
    v38 = *(_WORD *)&v136[16];
    LOWORD(v39) = *(_WORD *)&v136[18];
    *(_OWORD *)v149 = *(_OWORD *)v136;
    *(_DWORD *)&v149[16] = *(_DWORD *)&v136[16];
    v64 = _So9NSDecimala__length_getter(v149);
    v45 = (int)v133;
    v44 = v134;
    if (!v64)
      goto LABEL_49;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_65:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void JSONEncoder.encode<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;

  v29 = *(_QWORD *)(v4 + 16);
  v22 = *(_QWORD *)(v4 + 32);
  v23 = *(void **)(v4 + 24);
  v5 = *(_QWORD *)(v4 + 88);
  v24 = *(_QWORD *)(v4 + 80);
  v25 = *(_QWORD *)(v4 + 56);
  v21 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(v4 + 104);
  v26 = *(_QWORD *)(v4 + 96);
  v27 = *(_QWORD *)(v4 + 72);
  v20 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD *)(v4 + 112);
  v28 = *(_QWORD *)(v4 + 120);
  v8 = *(_QWORD *)(v4 + 128);
  v9 = *(_BYTE *)(v4 + 40);
  type metadata accessor for __JSONEncoder();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 32) = v23;
  *(_QWORD *)(v10 + 40) = v22;
  *(_BYTE *)(v10 + 48) = v9;
  *(_QWORD *)(v10 + 56) = v20;
  *(_QWORD *)(v10 + 64) = v25;
  *(_QWORD *)(v10 + 72) = v21;
  *(_QWORD *)(v10 + 80) = v27;
  *(_QWORD *)(v10 + 88) = v24;
  *(_QWORD *)(v10 + 96) = v5;
  *(_QWORD *)(v10 + 104) = v26;
  *(_QWORD *)(v10 + 112) = v6;
  *(_QWORD *)(v10 + 120) = v7;
  *(_QWORD *)(v10 + 128) = v28;
  *(_QWORD *)(v10 + 136) = v8;
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 24) = v29;
  *(_OWORD *)(v10 + 144) = xmmword_182068780;
  v36 = a3;
  v37 = a4;
  v38 = a1;
  v39 = a2;
  outlined copy of JSONEncoder.DateEncodingStrategy(v23, v22, v9);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v20);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v21, v27);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  swift_bridgeObjectRetain();
  v11 = specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD))partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:), (uint64_t)v35, 0x8000000000000000, 0, 0, 0, 255);
  if (v32)
    goto LABEL_2;
  v12 = v11;
  if (!v11)
  {
    v14 = type metadata accessor for EncodingError();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v16[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
    v40 = 0;
    v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v40 = 0x6576656C2D706F54;
    v41 = 0xEA0000000000206CLL;
    v18._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x80000001823065E0;
    v19._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC4B0], v14);
    swift_willThrow();
LABEL_2:
    swift_release();
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 96))(&v40);
  v13 = v40;
  v40 = 0;
  LOBYTE(v41) = v13 & 1;
  BYTE1(v41) = (v13 & 2) != 0;
  BYTE2(v41) = (v13 & 8) != 0;
  v42 = xmmword_18206AAC0;
  JSONWriter.serializeJSON(_:depth:)(v12);
  swift_release();
  swift_release();
}

uint64_t JSONEncoder.encode<A, B>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v7 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t, __n128))(a6 + 16))(a4, a6, v15);
  v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 280))(a1, v17, a3, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
  return v18;
}

uint64_t JSONEncoder.deinit()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 112);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance __JSONEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t _JSONKeyedEncodingContainer.codingPath.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return _CodingPathNode.path.getter(a3);
}

uint64_t _JSONKeyedEncodingContainer.encodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t result;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52[5];

  v5 = v2[1];
  type metadata accessor for JSONReference();
  inited = swift_initStaticObject();
  v7 = *v2;
  v8 = v2[2];
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v52[3] = v10;
  v52[4] = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, a1, v10);
  v12 = _JSONKeyedEncodingContainer._converted(_:)(v52, v7, v5, v8);
  v14 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  if (*(_BYTE *)(v5 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v15 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 7;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v52[0] = v15;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
  v19 = *(_QWORD *)(v15 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v10) = v17;
    if (*(_QWORD *)(v15 + 24) < v21)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      v22 = v52[0];
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
      if ((v10 & 1) != (v24 & 1))
        goto LABEL_51;
      v18 = v23;
      if ((v10 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v25 = *(_QWORD *)(v22 + 56);
      swift_release();
      *(_QWORD *)(v25 + 8 * v18) = inited;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45 = *(_QWORD *)(v5 + 16);
      v46 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 16) = v22;
      *(_QWORD *)(v5 + 24) = 0;
      v47 = *(_BYTE *)(v5 + 32);
      *(_BYTE *)(v5 + 32) = 4;
      outlined consume of JSONReference.Backing(v45, v46, v47);
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v15;
      if ((v17 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v18, v12, v14, inited, v22);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v26 = static _DictionaryStorage.copy(original:)();
  v22 = v26;
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v27 = (void *)(v26 + 64);
  v28 = (unint64_t)((1 << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  if (v22 != v15 || (unint64_t)v27 >= v15 + 64 + 8 * v28)
    memmove(v27, (const void *)(v15 + 64), 8 * v28);
  v49 = v15 + 64;
  v29 = 0;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v15 + 16);
  v30 = 1 << *(_BYTE *)(v15 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & *(_QWORD *)(v15 + 64);
  v50 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v51 = v29;
      v34 = v33 | (v29 << 6);
      goto LABEL_19;
    }
    v41 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v41 >= v50)
      goto LABEL_45;
    v42 = *(_QWORD *)(v49 + 8 * v41);
    v43 = v29 + 1;
    if (!v42)
    {
      v43 = v29 + 2;
      if (v29 + 2 >= v50)
        goto LABEL_45;
      v42 = *(_QWORD *)(v49 + 8 * v43);
      if (!v42)
      {
        v43 = v29 + 3;
        if (v29 + 3 >= v50)
          goto LABEL_45;
        v42 = *(_QWORD *)(v49 + 8 * v43);
        if (!v42)
        {
          v43 = v29 + 4;
          if (v29 + 4 >= v50)
            goto LABEL_45;
          v42 = *(_QWORD *)(v49 + 8 * v43);
          if (!v42)
          {
            v43 = v29 + 5;
            if (v29 + 5 >= v50)
              goto LABEL_45;
            v42 = *(_QWORD *)(v49 + 8 * v43);
            if (!v42)
            {
              v43 = v29 + 6;
              if (v29 + 6 >= v50)
                goto LABEL_45;
              v42 = *(_QWORD *)(v49 + 8 * v43);
              if (!v42)
              {
                v43 = v29 + 7;
                if (v29 + 7 >= v50)
                  goto LABEL_45;
                v42 = *(_QWORD *)(v49 + 8 * v43);
                if (!v42)
                {
                  v43 = v29 + 8;
                  if (v29 + 8 >= v50)
                    goto LABEL_45;
                  v42 = *(_QWORD *)(v49 + 8 * v43);
                  if (!v42)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v32 = (v42 - 1) & v42;
    v51 = v43;
    v34 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    v35 = 16 * v34;
    v36 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v34);
    v37 = v36[1];
    v38 = 8 * v34;
    v39 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + v38);
    v40 = (_QWORD *)(*(_QWORD *)(v22 + 48) + v35);
    *v40 = *v36;
    v40[1] = v37;
    *(_QWORD *)(*(_QWORD *)(v22 + 56) + v38) = v39;
    swift_bridgeObjectRetain();
    swift_retain();
    v29 = v51;
  }
  v44 = v29 + 9;
  if (v29 + 9 >= v50)
    goto LABEL_45;
  v42 = *(_QWORD *)(v49 + 8 * v44);
  if (v42)
  {
    v43 = v29 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v43 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v43 >= v50)
      goto LABEL_45;
    v42 = *(_QWORD *)(v49 + 8 * v43);
    ++v44;
    if (v42)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57[5];

  v4 = v3;
  v7 = v3[1];
  LOBYTE(v57[0]) = a1;
  v8 = dispatch thunk of CustomStringConvertible.description.getter();
  v10 = v9;
  type metadata accessor for JSONReference();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  v12 = *v4;
  v13 = v4[2];
  v15 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v20 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  v24 = *(_QWORD *)(v20 + 16);
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(_QWORD *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      v27 = v57[0];
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1))
        goto LABEL_51;
      v23 = v28;
      if ((v15 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v30 = *(_QWORD *)(v27 + 56);
      swift_release();
      *(_QWORD *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = *(_QWORD *)(v7 + 16);
      v51 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 16) = v27;
      *(_QWORD *)(v7 + 24) = 0;
      v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v27 = v20;
      if ((v22 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v31 = static _DictionaryStorage.copy(original:)();
  v27 = v31;
  if (!*(_QWORD *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v32 = (void *)(v31 + 64);
  v33 = (unint64_t)((1 << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33)
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  v54 = v20 + 64;
  v34 = 0;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v20 + 16);
  v35 = 1 << *(_BYTE *)(v20 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & *(_QWORD *)(v20 + 64);
  v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v56 = v34;
      v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v46);
    v48 = v34 + 1;
    if (!v47)
    {
      v48 = v34 + 2;
      if (v34 + 2 >= v55)
        goto LABEL_45;
      v47 = *(_QWORD *)(v54 + 8 * v48);
      if (!v47)
      {
        v48 = v34 + 3;
        if (v34 + 3 >= v55)
          goto LABEL_45;
        v47 = *(_QWORD *)(v54 + 8 * v48);
        if (!v47)
        {
          v48 = v34 + 4;
          if (v34 + 4 >= v55)
            goto LABEL_45;
          v47 = *(_QWORD *)(v54 + 8 * v48);
          if (!v47)
          {
            v48 = v34 + 5;
            if (v34 + 5 >= v55)
              goto LABEL_45;
            v47 = *(_QWORD *)(v54 + 8 * v48);
            if (!v47)
            {
              v48 = v34 + 6;
              if (v34 + 6 >= v55)
                goto LABEL_45;
              v47 = *(_QWORD *)(v54 + 8 * v48);
              if (!v47)
              {
                v48 = v34 + 7;
                if (v34 + 7 >= v55)
                  goto LABEL_45;
                v47 = *(_QWORD *)(v54 + 8 * v48);
                if (!v47)
                {
                  v48 = v34 + 8;
                  if (v34 + 8 >= v55)
                    goto LABEL_45;
                  v47 = *(_QWORD *)(v54 + 8 * v48);
                  if (!v47)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v37 = (v47 - 1) & v47;
    v56 = v48;
    v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    v40 = 16 * v39;
    v41 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v39);
    v42 = v41[1];
    v43 = 8 * v39;
    v44 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + v43);
    v45 = (_QWORD *)(*(_QWORD *)(v27 + 48) + v40);
    *v45 = *v41;
    v45[1] = v42;
    *(_QWORD *)(*(_QWORD *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    v34 = v56;
  }
  v49 = v34 + 9;
  if (v34 + 9 >= v55)
    goto LABEL_45;
  v47 = *(_QWORD *)(v54 + 8 * v49);
  if (v47)
  {
    v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v48 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v48);
    ++v49;
    if (v47)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57[5];

  v4 = v3;
  v7 = v3[1];
  LOWORD(v57[0]) = a1;
  v8 = dispatch thunk of CustomStringConvertible.description.getter();
  v10 = v9;
  type metadata accessor for JSONReference();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  v12 = *v4;
  v13 = v4[2];
  v15 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v20 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  v24 = *(_QWORD *)(v20 + 16);
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(_QWORD *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      v27 = v57[0];
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1))
        goto LABEL_51;
      v23 = v28;
      if ((v15 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v30 = *(_QWORD *)(v27 + 56);
      swift_release();
      *(_QWORD *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = *(_QWORD *)(v7 + 16);
      v51 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 16) = v27;
      *(_QWORD *)(v7 + 24) = 0;
      v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v27 = v20;
      if ((v22 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v31 = static _DictionaryStorage.copy(original:)();
  v27 = v31;
  if (!*(_QWORD *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v32 = (void *)(v31 + 64);
  v33 = (unint64_t)((1 << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33)
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  v54 = v20 + 64;
  v34 = 0;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v20 + 16);
  v35 = 1 << *(_BYTE *)(v20 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & *(_QWORD *)(v20 + 64);
  v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v56 = v34;
      v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v46);
    v48 = v34 + 1;
    if (!v47)
    {
      v48 = v34 + 2;
      if (v34 + 2 >= v55)
        goto LABEL_45;
      v47 = *(_QWORD *)(v54 + 8 * v48);
      if (!v47)
      {
        v48 = v34 + 3;
        if (v34 + 3 >= v55)
          goto LABEL_45;
        v47 = *(_QWORD *)(v54 + 8 * v48);
        if (!v47)
        {
          v48 = v34 + 4;
          if (v34 + 4 >= v55)
            goto LABEL_45;
          v47 = *(_QWORD *)(v54 + 8 * v48);
          if (!v47)
          {
            v48 = v34 + 5;
            if (v34 + 5 >= v55)
              goto LABEL_45;
            v47 = *(_QWORD *)(v54 + 8 * v48);
            if (!v47)
            {
              v48 = v34 + 6;
              if (v34 + 6 >= v55)
                goto LABEL_45;
              v47 = *(_QWORD *)(v54 + 8 * v48);
              if (!v47)
              {
                v48 = v34 + 7;
                if (v34 + 7 >= v55)
                  goto LABEL_45;
                v47 = *(_QWORD *)(v54 + 8 * v48);
                if (!v47)
                {
                  v48 = v34 + 8;
                  if (v34 + 8 >= v55)
                    goto LABEL_45;
                  v47 = *(_QWORD *)(v54 + 8 * v48);
                  if (!v47)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v37 = (v47 - 1) & v47;
    v56 = v48;
    v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    v40 = 16 * v39;
    v41 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v39);
    v42 = v41[1];
    v43 = 8 * v39;
    v44 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + v43);
    v45 = (_QWORD *)(*(_QWORD *)(v27 + 48) + v40);
    *v45 = *v41;
    v45[1] = v42;
    *(_QWORD *)(*(_QWORD *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    v34 = v56;
  }
  v49 = v34 + 9;
  if (v34 + 9 >= v55)
    goto LABEL_45;
  v47 = *(_QWORD *)(v54 + 8 * v49);
  if (v47)
  {
    v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v48 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v48);
    ++v49;
    if (v47)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>()
{
  uint64_t v0;

  return _JSONKeyedEncodingContainer.codingPath.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _JSONKeyedEncodingContainer.encodeNil(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(char a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED908]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED928]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED910]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED938]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t _JSONUnkeyedEncodingContainer.encodeNil()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for JSONReference();
  result = swift_initStaticObject();
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    v6 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 7;
    MEMORY[0x186DA4AFC]();
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v6;
    *(_QWORD *)(v1 + 24) = 0;
    v5 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    return outlined consume of JSONReference.Backing(v3, v4, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *_JSONUnkeyedEncodingContainer.encode(_:)(float a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *result;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17[3];
  uint64_t v18;

  v6 = v1;
  v4 = *v1;
  v5 = v6[1];
  result = outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v4 + 72), v17);
  v8 = *(_QWORD *)(v4 + 144);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned __int8 *)(v5 + 32);
  if (v10 == 4)
  {
    v11 = *(_QWORD *)(v9 + 16);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
    goto LABEL_6;
  }
  if (v10 != 3)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!(v9 >> 62))
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v5 + 24);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  swift_retain();
  outlined copy of JSONReference.Backing(v9, v16, 3);
  v11 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v9, v16, 3);
LABEL_7:
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v17, v8, v11, 0, 0, 2, a1);
  swift_release();
  result = outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  if (v2)
    return result;
  if (*(_BYTE *)(v5 + 32) != 3)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v18 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 7;
  v12 = swift_retain();
  MEMORY[0x186DA4AFC](v12);
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = v18;
  *(_QWORD *)(v5 + 24) = 0;
  v15 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v5 + 32) = 3;
  outlined consume of JSONReference.Backing(v13, v14, v15);
  return (void *)swift_release();
}

void *_JSONUnkeyedEncodingContainer.encode(_:)(double a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *result;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17[3];
  uint64_t v18;

  v6 = v1;
  v4 = *v1;
  v5 = v6[1];
  result = outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v4 + 72), v17);
  v8 = *(_QWORD *)(v4 + 144);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned __int8 *)(v5 + 32);
  if (v10 == 4)
  {
    v11 = *(_QWORD *)(v9 + 16);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
    goto LABEL_6;
  }
  if (v10 != 3)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!(v9 >> 62))
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v5 + 24);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  swift_retain();
  outlined copy of JSONReference.Backing(v9, v16, 3);
  v11 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v9, v16, 3);
LABEL_7:
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v17, v8, v11, 0, 0, 2, a1);
  swift_release();
  result = outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  if (v2)
    return result;
  if (*(_BYTE *)(v5 + 32) != 3)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v18 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 7;
  v12 = swift_retain();
  MEMORY[0x186DA4AFC](v12);
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = v18;
  *(_QWORD *)(v5 + 24) = 0;
  v15 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v5 + 32) = 3;
  outlined consume of JSONReference.Backing(v13, v14, v15);
  return (void *)swift_release();
}

void _JSONUnkeyedEncodingContainer.nestedUnkeyedContainer()(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = v1[1];
  v6 = v4 + 16;
  v5 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned __int8 *)(v4 + 32);
  if (v7 == 4)
  {
    v8 = *(_QWORD *)(v5 + 16);
    goto LABEL_6;
  }
  if (v7 != 3)
    goto LABEL_19;
  if (v5 >> 62)
    goto LABEL_17;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  while (1)
  {
    type metadata accessor for JSONReference();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v9 + 24) = 0;
    *(_BYTE *)(v9 + 32) = 3;
    if (*(_BYTE *)(v4 + 32) != 3)
      break;
    v10 = v9;
    v19 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v4 + 32) = 7;
    v11 = swift_retain();
    MEMORY[0x186DA4AFC](v11);
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v12 = *(_QWORD *)(v4 + 16);
    v13 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 16) = v19;
    *(_QWORD *)(v4 + 24) = 0;
    v14 = *(_BYTE *)(v4 + 32);
    *(_BYTE *)(v4 + 32) = 3;
    outlined consume of JSONReference.Backing(v12, v13, v14);
    v5 = *v2;
    v6 = v2[2];
    v2 = (unint64_t *)swift_allocObject();
    v2[5] = (unint64_t)&type metadata for _CodingKey;
    v2[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v15 = swift_allocObject();
    v2[2] = v15;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 16) = v8;
    *(_BYTE *)(v15 + 40) = 2;
    v2[7] = v6;
    if (v6 >> 62)
    {
      v16 = 0;
      if (v6 >> 62 != 1)
        goto LABEL_14;
      v17 = (uint64_t *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v17 = (uint64_t *)(v6 + 64);
    }
    v16 = *v17;
    swift_retain();
LABEL_14:
    if (!__OFADD__(v16, 1))
    {
      v2[8] = v16 + 1;
      a1[3] = (unint64_t)&unk_1E0F27BD0;
      a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
      *a1 = v5;
      a1[1] = v10;
      a1[2] = (unint64_t)v2;
      swift_retain();
      return;
    }
    __break(1u);
LABEL_17:
    v18 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of JSONReference.Backing(v5, v18, 3);
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t protocol witness for UnkeyedEncodingContainer.codingPath.getter in conformance _JSONUnkeyedEncodingContainer()
{
  uint64_t v0;

  return _CodingPathNode.path.getter(*(_QWORD *)(v0 + 16));
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _JSONUnkeyedEncodingContainer()
{
  uint64_t v0;

  return specialized _JSONUnkeyedEncodingContainer.count.getter(*(_QWORD *)(v0 + 8));
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _JSONUnkeyedEncodingContainer()
{
  return _JSONUnkeyedEncodingContainer.encodeNil()();
}

void *protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(double a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

void *protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(float a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t __JSONEncoder.encode(_:)(float a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8[3];

  v3 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 208))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_4;
  }
  v5 = v1[18];
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v3 + 9), v8);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v8, v5, 0, 0, 0, 255, a1);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  result = swift_release();
  if (v2)
    return result;
  v7 = swift_retain();
  MEMORY[0x186DA4AFC](v7);
  if (*(_QWORD *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    goto LABEL_7;
LABEL_4:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __JSONEncoder()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_retain();
  v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(float a1)
{
  return __JSONEncoder.encode(_:)(a1);
}

unint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v10;
  uint64_t v11;
  int v12;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  double v47;
  _QWORD v48[5];

  v8 = (_QWORD *)v6;
  v10 = *(void **)(v6 + 32);
  v11 = *(_QWORD *)(v6 + 40);
  v12 = *(unsigned __int8 *)(v6 + 48);
  if (*(_BYTE *)(v6 + 48))
  {
    if (v12 != 1)
      __asm { BR              X10 }
    v17 = v8[2];
    v42 = v8 + 2;
    if (v17 >> 62)
    {
      outlined copy of JSONEncoder.DateEncodingStrategy(v10, v11, 1);
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    v44 = v7;
    v46 = v11;
    if (a5 == -1)
    {
      v31 = v8[18];
      v30 = v8[19];
      v8[18] = a1;
      if (a1 >> 62)
      {
        if (a1 >> 62 != 1)
        {
          v32 = 0;
          v35 = v43;
LABEL_19:
          v8[19] = v32;
          v47 = a6;
          v48[3] = type metadata accessor for __JSONEncoder();
          v48[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
          v48[0] = v8;
          swift_retain();
          ((void (*)(double *, _QWORD *))v10)(&v47, v48);
          if (v44)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
            v8[18] = v31;
            swift_retain();
            swift_release();
            v8[19] = v30;
            swift_release();
            swift_release();
            v29 = v8[2];
            if (v29 >> 62)
            {
              swift_bridgeObjectRetain();
              v36 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v36 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            if (v35 >= v36)
              goto LABEL_26;
            if (*v42 >> 62)
            {
              swift_bridgeObjectRetain();
              v40 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v40)
                goto LABEL_25;
            }
            else if (*(_QWORD *)((*v42 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_25:
              v29 = (unint64_t)v42;
              specialized RangeReplaceableCollection<>.popLast()();
              swift_release();
LABEL_26:
              swift_willThrow();
              outlined consume of JSONEncoder.DateEncodingStrategy(v10, v46, 1);
              return v29;
            }
            __break(1u);
            JUMPOUT(0x181AA4AE0);
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
          v8[18] = v31;
          swift_retain();
          swift_release();
          v8[19] = v30;
          swift_release();
          swift_release();
          v38 = v8[2];
          if (v38 >> 62)
          {
            swift_bridgeObjectRetain();
            v39 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v18 = (_QWORD *)v46;
          if (v35 < v39)
          {
            if (*v42 >> 62)
            {
              swift_bridgeObjectRetain();
              v41 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v41)
                goto LABEL_33;
            }
            else if (*(_QWORD *)((*v42 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_33:
              v29 = specialized RangeReplaceableCollection<>.popLast()();
              outlined consume of JSONEncoder.DateEncodingStrategy(v10, v46, 1);
              return v29;
            }
            __break(1u);
            JUMPOUT(0x181AA4B14);
          }
LABEL_36:
          outlined consume of JSONEncoder.DateEncodingStrategy(v10, (uint64_t)v18, 1);
          type metadata accessor for JSONReference();
          v29 = swift_allocObject();
          *(_QWORD *)(v29 + 16) = MEMORY[0x1E0DEE9E0];
          *(_QWORD *)(v29 + 24) = 0;
          *(_BYTE *)(v29 + 32) = 4;
          return v29;
        }
        v32 = *(_QWORD *)(a1 + 32);
        swift_retain();
LABEL_18:
        v35 = v43;
        swift_retain();
        goto LABEL_19;
      }
      v32 = *(_QWORD *)(a1 + 64);
      swift_retain();
      v20 = a4;
LABEL_17:
      outlined copy of _CodingKey?(a2, a3, v20, a5);
      goto LABEL_18;
    }
    v18 = (_QWORD *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v19 = swift_allocObject();
    v18[2] = v19;
    *(_QWORD *)(v19 + 16) = a2;
    *(_QWORD *)(v19 + 24) = a3;
    v20 = a4;
    *(_QWORD *)(v19 + 32) = a4;
    *(_BYTE *)(v19 + 40) = a5;
    v18[7] = a1;
    if (a1 >> 62)
    {
      if (a1 >> 62 != 1)
      {
        v32 = 1;
LABEL_16:
        v18[8] = v32;
        v31 = v8[18];
        v34 = v8[19];
        v8[18] = v18;
        v30 = v34;
        goto LABEL_17;
      }
      v21 = (uint64_t *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v21 = (uint64_t *)(a1 + 64);
    }
    v33 = *v21;
    swift_retain();
    v20 = a4;
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    goto LABEL_16;
  }
  v22 = objc_allocWithZone(MEMORY[0x1E0C99D68]);
  v23 = v10;
  v24 = objc_msgSend(v22, sel_initWithTimeIntervalSinceReferenceDate_, a6);
  v25 = objc_msgSend(v23, sel_stringFromDate_, v24);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;
  outlined consume of JSONEncoder.DateEncodingStrategy(v10, v11, 0);

  type metadata accessor for JSONReference();
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v26;
  *(_QWORD *)(v29 + 24) = v28;
  *(_BYTE *)(v29 + 32) = 0;
  return v29;
}

unint64_t __JSONEncoder.wrap<A>(_:for:_:)(double *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(double *, _QWORD *);
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  double v71[5];
  _QWORD v72[5];

  v65 = a5;
  v67 = a3;
  v68 = a2;
  v66 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v64 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v61 - v15;
  MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  v19 = *a1;
  v20 = *(_QWORD *)(v5 + 40);
  v69 = *(id *)(v5 + 32);
  if (*(_BYTE *)(v5 + 48))
  {
    if (*(_BYTE *)(v5 + 48) != 1)
      __asm { BR              X10 }
    v21 = (_QWORD *)v5;
    v22 = *(_QWORD *)(v5 + 16);
    v62 = (unint64_t *)(v5 + 16);
    v63 = v20;
    if (v22 >> 62)
    {
      outlined copy of JSONEncoder.DateEncodingStrategy(v69, v20, 1);
      swift_bridgeObjectRetain();
      v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    v24 = v70;
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v25(v16, v67, v10);
    v25(v13, (uint64_t)v16, v10);
    v26 = v66;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v13, 1, a4) == 1)
    {
      v27 = *(void (**)(char *, uint64_t))(v11 + 8);
      v27(v16, v10);
      v27(v13, v10);
      v28 = v21[18];
      v29 = v21[19];
      v30 = v68;
      v31 = v68 >> 62;
      v21[18] = v68;
      if (v30 >> 62)
      {
        v32 = (void (*)(double *, _QWORD *))v69;
        v33 = v23;
        if ((_DWORD)v31 != 1)
        {
          v52 = 0;
          goto LABEL_20;
        }
        v52 = *(_QWORD *)(v30 + 32);
        swift_retain();
      }
      else
      {
        v52 = *(_QWORD *)(v30 + 64);
        swift_retain();
        v32 = (void (*)(double *, _QWORD *))v69;
        v33 = v23;
      }
LABEL_19:
      swift_retain();
LABEL_20:
      v21[19] = v52;
      v71[0] = v19;
      v72[3] = type metadata accessor for __JSONEncoder();
      v72[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
      v72[0] = v21;
      swift_retain();
      v32(v71, v72);
      if (v24)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        v21[18] = v28;
        swift_retain();
        swift_release();
        v21[19] = v29;
        swift_release();
        swift_release();
        v43 = v21[2];
        if (v43 >> 62)
        {
          swift_bridgeObjectRetain();
          v57 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v33 >= v57)
            goto LABEL_26;
        }
        else if (v33 >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_26:
          swift_willThrow();
          outlined consume of JSONEncoder.DateEncodingStrategy(v32, v63, 1);
          return v43;
        }
        v43 = *v62;
        if (*v62 >> 62)
        {
          swift_bridgeObjectRetain();
          v59 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v59)
            goto LABEL_25;
        }
        else if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_25:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
          goto LABEL_26;
        }
        __break(1u);
        JUMPOUT(0x181AA5750);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
      v21[18] = v28;
      swift_retain();
      swift_release();
      v21[19] = v29;
      swift_release();
      swift_release();
      v56 = v21[2];
      if (v56 >> 62)
      {
        swift_bridgeObjectRetain();
        v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v33 < v58)
        {
LABEL_30:
          if (*v62 >> 62)
          {
            swift_bridgeObjectRetain();
            v60 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v60)
              goto LABEL_32;
          }
          else if (*(_QWORD *)((*v62 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_32:
            v43 = specialized RangeReplaceableCollection<>.popLast()();
            outlined consume of JSONEncoder.DateEncodingStrategy(v32, v63, 1);
            return v43;
          }
          __break(1u);
          JUMPOUT(0x181AA5784);
        }
      }
      else if (v33 < *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_30;
      }
      outlined consume of JSONEncoder.DateEncodingStrategy(v32, v63, 1);
      type metadata accessor for JSONReference();
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v43 + 24) = 0;
      *(_BYTE *)(v43 + 32) = 4;
      return v43;
    }
    v67 = v23;
    v44 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v45 = v64;
    v44(v64, v13, a4);
    v46 = (uint64_t *)swift_allocObject();
    v47 = v65;
    v46[5] = a4;
    v46[6] = v47;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46 + 2);
    v44((char *)boxed_opaque_existential_1, v45, a4);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v49 = v68;
    v46[7] = v68;
    v50 = v49 >> 62;
    if (v49 >> 62)
    {
      v32 = (void (*)(double *, _QWORD *))v69;
      if ((_DWORD)v50 != 1)
      {
        v52 = 1;
        if (!__OFSUB__((_DWORD)v50, 1))
          goto LABEL_18;
        goto LABEL_35;
      }
      v51 = (uint64_t *)((v49 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v51 = (uint64_t *)(v49 + 64);
      v32 = (void (*)(double *, _QWORD *))v69;
    }
    v53 = *v51;
    swift_retain();
    v54 = __OFADD__(v53, 1);
    v52 = v53 + 1;
    if (!v54)
    {
LABEL_18:
      v46[8] = v52;
      v28 = v21[18];
      v29 = v21[19];
      v21[18] = v46;
      v33 = v67;
      v24 = v70;
      goto LABEL_19;
    }
LABEL_35:
    __break(1u);
    JUMPOUT(0x181AA5370);
  }
  v34 = v20;
  v35 = objc_allocWithZone(MEMORY[0x1E0C99D68]);
  v36 = v69;
  v37 = v69;
  v38 = objc_msgSend(v35, sel_initWithTimeIntervalSinceReferenceDate_, v19);
  v39 = objc_msgSend(v37, sel_stringFromDate_, v38);

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v42 = v41;
  outlined consume of JSONEncoder.DateEncodingStrategy(v36, v34, 0);

  type metadata accessor for JSONReference();
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v40;
  *(_QWORD *)(v43 + 24) = v42;
  *(_BYTE *)(v43 + 32) = 0;
  return v43;
}

unint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  void *v69;
  unint64_t v70;
  uint64_t v71;

  v9 = v7;
  v71 = *MEMORY[0x1E0C80C00];
  v15 = (unint64_t *)v9[7];
  if (v15)
  {
    if (v15 == (unint64_t *)1)
      __asm { BR              X10 }
    v60 = a6;
    v21 = v9[2];
    v57 = v9 + 2;
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
      v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v59 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    v65 = a1;
    v67 = v8;
    if (a7 == -1)
    {
      v28 = v9[18];
      v56 = v9[19];
      v9[18] = a3;
      if (a3 >> 62)
      {
        v29 = a2;
        if (a3 >> 62 != 1)
        {
          v30 = 0;
LABEL_58:
          v9[19] = v30;
          v69 = (void *)type metadata accessor for __JSONEncoder();
          v70 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
          v68[0] = v9;
          swift_retain();
          ((void (*)(uint64_t, uint64_t, _QWORD *))v15)(v65, v29, v68);
          if (v67)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
            v9[18] = v28;
            swift_retain();
            swift_release();
            v9[19] = v56;
            swift_release();
            swift_release();
            a5 = v9[2];
            if (!(a5 >> 62))
            {
              v46 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_61;
            }
LABEL_83:
            swift_bridgeObjectRetain();
            v46 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
LABEL_61:
            if (v59 >= v46)
            {
LABEL_65:
              swift_willThrow();
              outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
              return a5;
            }
            a5 = *v57;
            if (!(*v57 >> 62))
            {
              if (*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_64:
                specialized RangeReplaceableCollection<>.popLast()();
                swift_release();
                goto LABEL_65;
              }
              goto LABEL_95;
            }
LABEL_94:
            swift_bridgeObjectRetain();
            v53 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v53)
              goto LABEL_64;
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
          v9[18] = v28;
          swift_retain();
          swift_release();
          v9[19] = v56;
          swift_release();
          swift_release();
          v47 = v9[2];
          if (!(v47 >> 62))
          {
            v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_68;
          }
LABEL_91:
          swift_bridgeObjectRetain();
          v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_68:
          if (v59 < v48)
          {
            if (*v57 >> 62)
            {
              swift_bridgeObjectRetain();
              v55 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v55)
                goto LABEL_71;
            }
            else if (*(_QWORD *)((*v57 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_71:
              a5 = specialized RangeReplaceableCollection<>.popLast()();
              outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
              return a5;
            }
            __break(1u);
            JUMPOUT(0x181AA64A0);
          }
LABEL_74:
          outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v15);
          type metadata accessor for JSONReference();
          a5 = swift_allocObject();
          *(_QWORD *)(a5 + 16) = MEMORY[0x1E0DEE9E0];
          *(_QWORD *)(a5 + 24) = 0;
          *(_BYTE *)(a5 + 32) = 4;
          return a5;
        }
        v30 = *(_QWORD *)(a3 + 32);
        swift_retain();
LABEL_57:
        swift_retain();
        goto LABEL_58;
      }
      v30 = *(_QWORD *)(a3 + 64);
      swift_retain();
      v24 = v60;
      v29 = a2;
LABEL_56:
      outlined copy of _CodingKey?(a4, a5, v24, a7);
      goto LABEL_57;
    }
    v22 = (_QWORD *)swift_allocObject();
    v22[5] = &type metadata for _CodingKey;
    v22[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v23 = swift_allocObject();
    v22[2] = v23;
    *(_QWORD *)(v23 + 16) = a4;
    *(_QWORD *)(v23 + 24) = a5;
    v24 = v60;
    *(_QWORD *)(v23 + 32) = v60;
    *(_BYTE *)(v23 + 40) = a7;
    v22[7] = a3;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        v30 = 1;
LABEL_55:
        v22[8] = v30;
        v28 = v9[18];
        v56 = v9[19];
        v9[18] = (unint64_t)v22;
        v29 = a2;
        goto LABEL_56;
      }
      v25 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v25 = (uint64_t *)(a3 + 64);
    }
    v45 = *v25;
    swift_retain();
    v24 = v60;
    v30 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    goto LABEL_55;
  }
  v15 = v9 + 2;
  v16 = v9[2];
  v66 = v8;
  if (v16 >> 62)
  {
    v51 = a6;
    swift_bridgeObjectRetain();
    v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    a6 = v51;
    v15 = v9 + 2;
  }
  else
  {
    v59 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v64 = a1;
  if (a7 != -1)
  {
    v58 = v15;
    v17 = a6;
    v18 = (_QWORD *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v19 = swift_allocObject();
    v18[2] = v19;
    *(_QWORD *)(v19 + 16) = a4;
    *(_QWORD *)(v19 + 24) = a5;
    *(_QWORD *)(v19 + 32) = v17;
    *(_BYTE *)(v19 + 40) = a7;
    v18[7] = a3;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        v32 = v17;
        v31 = 0;
        goto LABEL_25;
      }
      v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v20 = (uint64_t *)(a3 + 64);
    }
    v31 = *v20;
    swift_retain();
    v32 = v17;
LABEL_25:
    v27 = v31 + 1;
    v15 = v58;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_83;
    }
    v18[8] = v27;
    v26 = v9[19];
    v61 = v9[18];
    v9[18] = (unint64_t)v18;
    goto LABEL_27;
  }
  v26 = v9[19];
  v61 = v9[18];
  v9[18] = a3;
  if (!(a3 >> 62))
  {
    v27 = *(_QWORD *)(a3 + 64);
    v49 = a6;
    swift_retain();
    v32 = v49;
LABEL_27:
    outlined copy of _CodingKey?(a4, a5, v32, a7);
    goto LABEL_28;
  }
  if (a3 >> 62 == 1)
  {
    v27 = *(_QWORD *)(a3 + 32);
    swift_retain();
LABEL_28:
    swift_retain();
    goto LABEL_29;
  }
  v27 = 0;
LABEL_29:
  v9[19] = v27;
  v33 = *(uint64_t (**)(uint64_t))(*v9 + 208);
  v34 = swift_retain();
  if ((v33(v34) & 1) != 0)
  {
    type metadata accessor for JSONReference();
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v35 + 24) = 0;
    *(_BYTE *)(v35 + 32) = 3;
    v36 = swift_retain();
    MEMORY[0x186DA4AFC](v36);
    v37 = v64;
    if (*(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v38 = v26;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v39 = v66;
    goto LABEL_42;
  }
  v40 = *v15;
  v37 = v64;
  if (!(*v15 >> 62))
  {
    v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v39 = v66;
    if (v41)
      goto LABEL_35;
LABEL_86:
    v42 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_87;
  }
  swift_bridgeObjectRetain();
  v41 = _CocoaArrayWrapper.endIndex.getter();
  v39 = v66;
  if (!v41)
    goto LABEL_86;
LABEL_35:
  v42 = v41 - 1;
  if (__OFSUB__(v41, 1))
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if ((v40 & 0xC000000000000001) != 0)
  {
LABEL_88:
    v35 = MEMORY[0x186DA53A8](v42, v40);
    goto LABEL_40;
  }
  if ((v42 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v42 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  v35 = *(_QWORD *)(v40 + 8 * v42 + 32);
  swift_retain();
LABEL_40:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v35 + 32) != 3)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x181AA64BCLL);
  }
  v38 = v26;
LABEL_42:
  v43 = v9[18];
  v69 = &unk_1E0F27BD0;
  v68[0] = v9;
  v68[1] = v35;
  v70 = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  v68[2] = v43;
  swift_retain();
  swift_retain();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v37, a2);
  if (!v39)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    swift_release();
    v9[18] = v61;
    swift_retain();
    swift_release();
    v9[19] = v38;
    swift_release();
    swift_release();
    a5 = v9[2];
    if (a5 >> 62)
    {
      swift_bridgeObjectRetain();
      v52 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v52)
        return specialized RangeReplaceableCollection<>.popLast()();
    }
    else if (*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return specialized RangeReplaceableCollection<>.popLast()();
    }
    __break(1u);
    goto LABEL_94;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  swift_release();
  v9[18] = v61;
  swift_retain();
  swift_release();
  v9[19] = v38;
  swift_release();
  swift_release();
  a5 = v9[2];
  if (a5 >> 62)
  {
    swift_bridgeObjectRetain();
    v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v59 >= v44)
    goto LABEL_49;
  a5 = *v15;
  if (!(*v15 >> 62))
  {
    if (!*(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_97:
      __break(1u);
      JUMPOUT(0x181AA646CLL);
    }
    goto LABEL_48;
  }
LABEL_96:
  swift_bridgeObjectRetain();
  v54 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v54)
    goto LABEL_97;
LABEL_48:
  specialized RangeReplaceableCollection<>.popLast()();
  swift_release();
LABEL_49:
  swift_willThrow();
  return a5;
}

unint64_t __JSONEncoder.wrap<A>(_:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, __n128);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t *, char *, uint64_t);
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, _QWORD *);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD v102[3];
  void *v103;
  uint64_t v104;
  uint64_t v105;

  v94 = a6;
  v95 = a4;
  v97 = a3;
  v98 = a2;
  v99 = a1;
  v105 = *MEMORY[0x1E0C80C00];
  v96 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v88 - v11);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v88 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v88 - v21;
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v88 - v25;
  v100 = v6;
  v27 = v6[7];
  if (v27)
  {
    if (v27 == 1)
      __asm { BR              X10 }
    v33 = v100;
    v40 = v100[8];
    v41 = v100[2];
    v89 = v100 + 2;
    v91 = v40;
    v92 = v14;
    if (v41 >> 62)
    {
      outlined copy of JSONEncoder.KeyEncodingStrategy(v27);
      swift_bridgeObjectRetain();
      v90 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v14 = v92;
    }
    else
    {
      v90 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    v93 = (void (*)(uint64_t, uint64_t, _QWORD *))v27;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v42(v19, v95, v13);
    v42(v16, (uint64_t)v19, v13);
    v43 = v96;
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48))(v16, 1, a5);
    v45 = v97;
    v46 = v97 >> 62;
    if (v44 == 1)
    {
      v47 = *(void (**)(char *, uint64_t))(v92 + 8);
      v47(v19, v13);
      v47(v16, v13);
      v48 = v33[18];
      v49 = v33[19];
      v33[18] = v45;
      if ((_DWORD)v46)
      {
        v50 = v101;
        v51 = v99;
        if ((_DWORD)v46 != 1)
        {
          v52 = 0;
          goto LABEL_60;
        }
        v52 = *(_QWORD *)(v45 + 32);
        swift_retain();
      }
      else
      {
        v52 = *(_QWORD *)(v45 + 64);
        swift_retain();
        v50 = v101;
        v51 = v99;
      }
LABEL_59:
      swift_retain();
LABEL_60:
      v33[19] = v52;
      v103 = (void *)type metadata accessor for __JSONEncoder();
      v104 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
      v102[0] = v33;
      swift_retain();
      v93(v51, v98, v102);
      if (v50)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
        v33[18] = v48;
        swift_retain();
        swift_release();
        v33[19] = v49;
        swift_release();
        swift_release();
        v28 = v33[2];
        if (v28 >> 62)
        {
          swift_bridgeObjectRetain();
          v80 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v80 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v90 >= v80)
          goto LABEL_67;
        v28 = *v89;
        if (!(*v89 >> 62))
        {
          if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_66:
            specialized RangeReplaceableCollection<>.popLast()();
            swift_release();
LABEL_67:
            swift_willThrow();
            outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v93);
            return v28;
          }
          goto LABEL_92;
        }
LABEL_91:
        swift_bridgeObjectRetain();
        v85 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v85)
          goto LABEL_66;
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      v33[18] = v48;
      swift_retain();
      swift_release();
      v33[19] = v49;
      swift_release();
      swift_release();
      v81 = v33[2];
      if (!(v81 >> 62))
      {
        v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_70;
      }
LABEL_88:
      swift_bridgeObjectRetain();
      v82 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_70:
      if (v90 >= v82)
      {
        outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v93);
        type metadata accessor for JSONReference();
        v28 = swift_allocObject();
        *(_QWORD *)(v28 + 16) = MEMORY[0x1E0DEE9E0];
        *(_QWORD *)(v28 + 24) = 0;
        *(_BYTE *)(v28 + 32) = 4;
        return v28;
      }
      if (*v89 >> 62)
      {
        swift_bridgeObjectRetain();
        v87 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v87)
          goto LABEL_73;
      }
      else if (*(_QWORD *)((*v89 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_73:
        v28 = specialized RangeReplaceableCollection<>.popLast()();
        outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v93);
        return v28;
      }
      __break(1u);
      JUMPOUT(0x181AA72F4);
    }
    v60 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v60(v9, v16, a5);
    v61 = v45;
    v12 = (uint64_t *)swift_allocObject();
    v62 = v94;
    v12[5] = a5;
    v12[6] = v62;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12 + 2);
    v60((char *)boxed_opaque_existential_1, v9, a5);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v19, v13);
    v12[7] = v61;
    if ((_DWORD)v46)
    {
      v50 = v101;
      v51 = v99;
      if ((_DWORD)v46 != 1)
      {
        v52 = 1;
LABEL_58:
        v12[8] = v52;
        v48 = v33[18];
        v49 = v33[19];
        v33[18] = v12;
        goto LABEL_59;
      }
      v64 = (uint64_t *)((v97 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_57:
      v79 = *v64;
      swift_retain();
      v66 = __OFADD__(v79, 1);
      v52 = v79 + 1;
      if (v66)
      {
        __break(1u);
        JUMPOUT(0x181AA6F40);
      }
      goto LABEL_58;
    }
LABEL_56:
    v64 = (uint64_t *)(v97 + 64);
    v50 = v101;
    v51 = v99;
    goto LABEL_57;
  }
  v28 = (unint64_t)(v100 + 2);
  v29 = v100[2];
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    v93 = (void (*)(uint64_t, uint64_t, _QWORD *))_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v93 = *(void (**)(uint64_t, uint64_t, _QWORD *))((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v30(v26, v95, v13, v24);
  ((void (*)(char *, char *, uint64_t))v30)(v22, v26, v13);
  v31 = v96;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v22, 1, a5) != 1)
  {
    v53 = *(void (**)(uint64_t *, char *, uint64_t))(v31 + 32);
    v53(v12, v22, a5);
    v54 = (uint64_t *)swift_allocObject();
    v55 = v94;
    v54[5] = a5;
    v54[6] = v55;
    v56 = __swift_allocate_boxed_opaque_existential_1(v54 + 2);
    v53(v56, (char *)v12, a5);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
    v57 = v97;
    v54[7] = v97;
    v58 = v57 >> 62;
    if (v57 >> 62)
    {
      v33 = v100;
      v38 = v101;
      if ((_DWORD)v58 != 1)
      {
        v39 = 1;
        if (!__OFSUB__((_DWORD)v58, 1))
          goto LABEL_28;
        goto LABEL_55;
      }
      v59 = (uint64_t *)((v57 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v59 = (uint64_t *)(v57 + 64);
      v33 = v100;
      v38 = v101;
    }
    v65 = *v59;
    swift_retain();
    v66 = __OFADD__(v65, 1);
    v39 = v65 + 1;
    if (!v66)
    {
LABEL_28:
      v54[8] = v39;
      v35 = v33[18];
      v34 = v33[19];
      v33[18] = v54;
      goto LABEL_29;
    }
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v26, v13);
  v32(v22, v13);
  v33 = v100;
  v35 = v100[18];
  v34 = v100[19];
  v36 = v97;
  v37 = v97 >> 62;
  v100[18] = v97;
  if (v36 >> 62)
  {
    v38 = v101;
    if ((_DWORD)v37 != 1)
    {
      v39 = 0;
      goto LABEL_30;
    }
    v39 = *(_QWORD *)(v36 + 32);
    swift_retain();
  }
  else
  {
    v39 = *(_QWORD *)(v36 + 64);
    swift_retain();
    v38 = v101;
  }
LABEL_29:
  swift_retain();
LABEL_30:
  v33[19] = v39;
  v67 = *(uint64_t (**)(uint64_t))(*v33 + 208);
  v68 = swift_retain();
  if ((v67(v68) & 1) != 0)
  {
    type metadata accessor for JSONReference();
    v69 = swift_allocObject();
    *(_QWORD *)(v69 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v69 + 24) = 0;
    *(_BYTE *)(v69 + 32) = 3;
    v70 = swift_retain();
    MEMORY[0x186DA4AFC](v70);
    if (*(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_42;
  }
  v71 = *(_QWORD *)v28;
  if (!(*(_QWORD *)v28 >> 62))
  {
    v72 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v72)
      goto LABEL_36;
LABEL_83:
    v73 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_84;
  }
  swift_bridgeObjectRetain();
  v72 = _CocoaArrayWrapper.endIndex.getter();
  if (!v72)
    goto LABEL_83;
LABEL_36:
  v73 = v72 - 1;
  if (__OFSUB__(v72, 1))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if ((v71 & 0xC000000000000001) == 0)
  {
    if ((v73 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v73 < *(_QWORD *)((v71 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v69 = *(_QWORD *)(v71 + 8 * v73 + 32);
      swift_retain();
      goto LABEL_41;
    }
    __break(1u);
    goto LABEL_88;
  }
LABEL_85:
  v69 = MEMORY[0x186DA53A8](v73, v71);
LABEL_41:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v69 + 32) != 3)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x181AA7310);
  }
LABEL_42:
  v74 = v33[18];
  v103 = &unk_1E0F27BD0;
  v75 = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  v102[0] = v33;
  v102[1] = v69;
  v104 = v75;
  v102[2] = v74;
  swift_retain();
  swift_retain();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v99, v98);
  if (!v38)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    swift_release();
    v33[18] = v35;
    swift_retain();
    swift_release();
    v33[19] = v34;
    swift_release();
    swift_release();
    v78 = v33[2];
    if (v78 >> 62)
    {
      swift_bridgeObjectRetain();
      v84 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v84)
        return specialized RangeReplaceableCollection<>.popLast()();
    }
    else if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return specialized RangeReplaceableCollection<>.popLast()();
    }
    __break(1u);
    goto LABEL_91;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
  swift_release();
  v33[18] = v35;
  swift_retain();
  swift_release();
  v33[19] = v34;
  swift_release();
  swift_release();
  v76 = v33[2];
  if (v76 >> 62)
  {
    swift_bridgeObjectRetain();
    v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v77 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((uint64_t)v93 >= v77)
    goto LABEL_49;
  if (!(*(_QWORD *)v28 >> 62))
  {
    if (!*(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_94:
      __break(1u);
      JUMPOUT(0x181AA72C0);
    }
    goto LABEL_48;
  }
LABEL_93:
  swift_bridgeObjectRetain();
  v86 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v86)
    goto LABEL_94;
LABEL_48:
  specialized RangeReplaceableCollection<>.popLast()();
  swift_release();
LABEL_49:
  swift_willThrow();
  return v28;
}

uint64_t specialized __JSONEncoder.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  int64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  int64_t v90;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102[3];
  uint64_t v103;

  v8 = v7;
  LOBYTE(v9) = a6;
  v13 = *(_QWORD *)(v6 + 16);
  v88 = (unint64_t *)(v6 + 16);
  if (v13 >> 62)
    goto LABEL_110;
  v87 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    type metadata accessor for JSONReference();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9E0];
    v92 = (_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 24) = 0;
    *(_BYTE *)(v14 + 32) = 4;
    v15 = swift_retain();
    MEMORY[0x186DA4AFC](v15);
    if (*(_QWORD *)((*v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v93 = v14;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((_BYTE)v9 == 0xFF)
    {
      swift_retain();
      goto LABEL_13;
    }
    v16 = (_QWORD *)swift_allocObject();
    v16[5] = &type metadata for _CodingKey;
    v16[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v17 = swift_allocObject();
    v16[2] = v17;
    *(_QWORD *)(v17 + 16) = a3;
    *(_QWORD *)(v17 + 24) = a4;
    *(_QWORD *)(v17 + 32) = a5;
    *(_BYTE *)(v17 + 40) = v9;
    v16[7] = a2;
    if (a2 >> 62)
      break;
    v18 = (uint64_t *)(a2 + 64);
LABEL_11:
    v19 = *v18;
    swift_retain();
    v20 = v19 + 1;
    if (!__OFADD__(v19, 1))
      goto LABEL_12;
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    swift_bridgeObjectRetain();
    v87 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (a2 >> 62 == 1)
  {
    v18 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  v20 = 1;
LABEL_12:
  v16[8] = v20;
  a2 = (unint64_t)v16;
LABEL_13:
  v89 = a1 + 64;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v23 = v22 & *(_QWORD *)(a1 + 64);
  outlined copy of _CodingKey?(a3, a4, a5, v9);
  v90 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain();
  v24 = 0;
  a3 = v93;
  while (2)
  {
    if (v23)
    {
      v29 = __clz(__rbit64(v23));
      v30 = (v23 - 1) & v23;
      v31 = v29 | (v24 << 6);
      goto LABEL_21;
    }
    v35 = v24 + 1;
    if (__OFADD__(v24, 1))
      goto LABEL_109;
    if (v35 >= v90)
      goto LABEL_30;
    v36 = *(_QWORD *)(v89 + 8 * v35);
    if (v36)
      goto LABEL_25;
    v24 += 2;
    if (v35 + 1 >= v90)
    {
      v24 = v35;
      goto LABEL_30;
    }
    v36 = *(_QWORD *)(v89 + 8 * v24);
    if (v36)
    {
      ++v35;
      goto LABEL_25;
    }
    v55 = v35 + 2;
    if (v35 + 2 >= v90)
      goto LABEL_30;
    v36 = *(_QWORD *)(v89 + 8 * v55);
    if (v36)
    {
      v35 += 2;
LABEL_25:
      v30 = (v36 - 1) & v36;
      v31 = __clz(__rbit64(v36)) + (v35 << 6);
      v24 = v35;
LABEL_21:
      v32 = *(_QWORD *)(a1 + 56);
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v31);
      v34 = v33[1];
      v95 = v30;
      *(_QWORD *)&v96 = *v33;
      *((_QWORD *)&v96 + 1) = v34;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v32 + 40 * v31, (uint64_t)&v97);
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
    while (2)
    {
      v35 = v55 + 1;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
        goto LABEL_112;
      }
      if (v35 < v90)
      {
        v36 = *(_QWORD *)(v89 + 8 * v35);
        ++v55;
        if (v36)
          goto LABEL_25;
        continue;
      }
      break;
    }
    v24 = v90 - 1;
LABEL_30:
    v95 = 0;
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v96 = 0u;
LABEL_31:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v96, (uint64_t)&v100);
    v37 = v101;
    if (!v101)
    {
      swift_release();
      v76 = v88;
      if (!(*v88 >> 62))
      {
        v77 = *(_QWORD *)((*v88 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_92;
      }
LABEL_112:
      swift_bridgeObjectRetain();
      v77 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v76 = v88;
LABEL_92:
      if (v87 >= v77)
      {
        v78 = 0;
        goto LABEL_104;
      }
      v78 = *v76;
      if (*v76 >> 62)
      {
        swift_bridgeObjectRetain();
        v82 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v82)
          goto LABEL_95;
      }
      else if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_95:
        v78 = specialized RangeReplaceableCollection<>.popLast()();
LABEL_104:
        swift_release();
        swift_release();
        return v78;
      }
      __break(1u);
      goto LABEL_116;
    }
    a4 = v100;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v102, (uint64_t)&v96);
    v38 = *((_QWORD *)&v97 + 1);
    v39 = v98;
    v40 = __swift_project_boxed_opaque_existential_1(&v96, *((uint64_t *)&v97 + 1));
    swift_bridgeObjectRetain();
    v41 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(v40, a2, a4, v37, 0, 0, v38, v39);
    a5 = v8;
    if (v8)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
      swift_bridgeObjectRelease_n();
      swift_release();
      v79 = v88;
      v78 = *v88;
      if (*v88 >> 62)
      {
        swift_bridgeObjectRetain();
        v80 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v79 = v88;
      }
      else
      {
        v80 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v87 >= v80)
        goto LABEL_102;
      v78 = *v79;
      if (!(*v79 >> 62))
      {
        if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_101:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
LABEL_102:
          swift_willThrow();
          goto LABEL_104;
        }
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }
LABEL_116:
      swift_bridgeObjectRetain();
      v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v83)
        goto LABEL_101;
      goto LABEL_117;
    }
    v9 = v41;
    if (!v41)
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v9 + 24) = 0;
      *(_BYTE *)(v9 + 32) = 4;
    }
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(a3 + 32) != 4)
      goto LABEL_119;
    v42 = a3;
    a3 = *(_QWORD *)(a3 + 16);
    *v92 = 0;
    v92[1] = 0;
    *(_BYTE *)(v42 + 32) = 7;
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v103 = a3;
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a4, v37);
    v45 = *(_QWORD *)(a3 + 16);
    v46 = (v44 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
      goto LABEL_107;
    a5 = v44;
    if (*(_QWORD *)(a3 + 24) < v47)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
      v48 = v103;
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(a4, v37);
      if ((a5 & 1) != (v50 & 1))
        goto LABEL_121;
      v8 = v49;
      a3 = v93;
      if ((a5 & 1) != 0)
        goto LABEL_17;
LABEL_43:
      *(_QWORD *)(v48 + 8 * (v8 >> 6) + 64) |= 1 << v8;
      v51 = (uint64_t *)(*(_QWORD *)(v48 + 48) + 16 * v8);
      *v51 = a4;
      v51[1] = v37;
      *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v8) = v9;
      v52 = *(_QWORD *)(v48 + 16);
      v53 = __OFADD__(v52, 1);
      v54 = v52 + 1;
      if (v53)
        goto LABEL_108;
      *(_QWORD *)(v48 + 16) = v54;
      swift_bridgeObjectRetain();
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(a3 + 16);
      v27 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 16) = v48;
      *(_QWORD *)(a3 + 24) = 0;
      v28 = *(_BYTE *)(a3 + 32);
      *(_BYTE *)(a3 + 32) = 4;
      outlined consume of JSONReference.Backing(v26, v27, v28);
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
      v8 = 0;
      v23 = v95;
      continue;
    }
    break;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v48 = a3;
    a3 = v93;
    if ((v44 & 1) == 0)
      goto LABEL_43;
LABEL_17:
    v25 = *(_QWORD *)(v48 + 56);
    a5 = 8 * v8;
    swift_release();
    *(_QWORD *)(v25 + 8 * v8) = v9;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v56 = static _DictionaryStorage.copy(original:)();
  v48 = v56;
  v57 = *(_QWORD *)(a3 + 16);
  if (!v57)
  {
LABEL_88:
    swift_bridgeObjectRelease();
    a3 = v93;
    if ((a5 & 1) == 0)
      goto LABEL_43;
    goto LABEL_17;
  }
  v58 = (void *)(v56 + 64);
  v59 = (unint64_t)((1 << *(_BYTE *)(v48 + 32)) + 63) >> 6;
  if (v48 != a3 || (unint64_t)v58 >= a3 + 64 + 8 * v59)
  {
    memmove(v58, (const void *)(a3 + 64), 8 * v59);
    v57 = *(_QWORD *)(a3 + 16);
  }
  v84 = a3 + 64;
  v60 = 0;
  *(_QWORD *)(v48 + 16) = v57;
  v61 = 1 << *(_BYTE *)(a3 + 32);
  if (v61 < 64)
    v62 = ~(-1 << v61);
  else
    v62 = -1;
  v63 = v62 & *(_QWORD *)(a3 + 64);
  v85 = (unint64_t)(v61 + 63) >> 6;
  while (2)
  {
    if (v63)
    {
      v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v86 = v60;
      v65 = v64 | (v60 << 6);
LABEL_62:
      v66 = 16 * v65;
      v67 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v65);
      v68 = v67[1];
      v69 = 8 * v65;
      v70 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + v69);
      v71 = (_QWORD *)(*(_QWORD *)(v48 + 48) + v66);
      *v71 = *v67;
      v71[1] = v68;
      *(_QWORD *)(*(_QWORD *)(v48 + 56) + v69) = v70;
      swift_bridgeObjectRetain();
      swift_retain();
      v60 = v86;
      continue;
    }
    break;
  }
  v72 = v60 + 1;
  if (__OFADD__(v60, 1))
    goto LABEL_118;
  if (v72 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v72);
  v74 = v60 + 1;
  if (v73)
    goto LABEL_87;
  v74 = v60 + 2;
  if (v60 + 2 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v74);
  if (v73)
    goto LABEL_87;
  v74 = v60 + 3;
  if (v60 + 3 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v74);
  if (v73)
    goto LABEL_87;
  v74 = v60 + 4;
  if (v60 + 4 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v74);
  if (v73)
    goto LABEL_87;
  v74 = v60 + 5;
  if (v60 + 5 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v74);
  if (v73)
    goto LABEL_87;
  v74 = v60 + 6;
  if (v60 + 6 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v74);
  if (v73)
    goto LABEL_87;
  v74 = v60 + 7;
  if (v60 + 7 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v74);
  if (v73)
    goto LABEL_87;
  v74 = v60 + 8;
  if (v60 + 8 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v74);
  if (v73)
  {
LABEL_87:
    v63 = (v73 - 1) & v73;
    v86 = v74;
    v65 = __clz(__rbit64(v73)) + (v74 << 6);
    goto LABEL_62;
  }
  v75 = v60 + 9;
  if (v60 + 9 >= v85)
    goto LABEL_88;
  v73 = *(_QWORD *)(v84 + 8 * v75);
  if (v73)
  {
    v74 = v60 + 9;
    goto LABEL_87;
  }
  while (1)
  {
    v74 = v75 + 1;
    if (__OFADD__(v75, 1))
      break;
    if (v74 >= v85)
      goto LABEL_88;
    v73 = *(_QWORD *)(v84 + 8 * v74);
    ++v75;
    if (v73)
      goto LABEL_87;
  }
LABEL_120:
  __break(1u);
LABEL_121:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t __JSONEncoder.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(char *, int64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  void (*v22)(__int128 *, char *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  __int128 *v25;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  char **v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int64_t v83;
  unint64_t v84;
  int64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  __int128 *v104;
  uint64_t v105;
  _QWORD *v106;
  __int128 *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;

  v111 = a3;
  v107 = a5;
  v6 = a4;
  v110 = a2;
  v105 = a1;
  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v104 = (__int128 *)((char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v95 - v14;
  v108 = v5;
  v16 = *(_QWORD *)(v5 + 16);
  v100 = (_QWORD *)(v5 + 16);
  if (v16 >> 62)
    goto LABEL_115;
  v99 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v102 = type metadata accessor for JSONReference();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = MEMORY[0x1E0DEE9E0];
    v106 = (_QWORD *)(v17 + 16);
    *(_QWORD *)(v17 + 24) = 0;
    *(_BYTE *)(v17 + 32) = 4;
    v18 = swift_retain();
    v19 = v100;
    MEMORY[0x186DA4AFC](v18);
    if (*(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v109 = v17;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v20 = *(void (**)(char *, int64_t, uint64_t))(v10 + 16);
    v20(v15, v111, v9);
    v20(v12, (int64_t)v15, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
    {
      v21 = *(void (**)(char *, uint64_t))(v10 + 8);
      v21(v15, v9);
      v21(v12, v9);
      swift_retain();
      v6 = v112;
      v10 = v109;
      goto LABEL_13;
    }
    v22 = *(void (**)(__int128 *, char *, uint64_t))(v7 + 32);
    v23 = (uint64_t)v104;
    v22(v104, v12, v6);
    v24 = (uint64_t *)swift_allocObject();
    v25 = v107;
    v24[5] = v6;
    v24[6] = (uint64_t)v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24 + 2);
    v22((__int128 *)boxed_opaque_existential_1, (char *)v23, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v27 = v110;
    v24[7] = v110;
    v28 = v27 >> 62;
    if ((_DWORD)v28)
      break;
    v10 = v109;
    v29 = (uint64_t *)(v110 + 64);
    v6 = v112;
LABEL_11:
    v30 = *v29;
    swift_retain();
    v31 = v30 + 1;
    if (!__OFADD__(v30, 1))
      goto LABEL_12;
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    swift_bridgeObjectRetain();
    v99 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v6 = v112;
  v10 = v109;
  if ((_DWORD)v28 == 1)
  {
    v29 = (uint64_t *)((v110 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  v31 = 1;
LABEL_12:
  v24[8] = v31;
  v110 = (uint64_t)v24;
LABEL_13:
  v32 = *(_QWORD *)(v105 + 64);
  v101 = v105 + 64;
  v33 = 1 << *(_BYTE *)(v105 + 32);
  if (v33 < 64)
    v34 = ~(-1 << v33);
  else
    v34 = -1;
  v7 = v34 & v32;
  v104 = &v114;
  v107 = (__int128 *)&v119;
  v103 = (unint64_t)(v33 + 63) >> 6;
  v98 = v103 - 1;
  swift_bridgeObjectRetain();
  v35 = 0;
  while (2)
  {
    if (v7)
    {
      v40 = __clz(__rbit64(v7));
      v41 = (v7 - 1) & v7;
      v42 = v40 | (v35 << 6);
      goto LABEL_21;
    }
    v46 = v35 + 1;
    if (__OFADD__(v35, 1))
      goto LABEL_114;
    if (v46 >= v103)
    {
LABEL_30:
      v41 = 0;
      v116 = 0;
      v114 = 0u;
      v115 = 0u;
      v113 = 0u;
      goto LABEL_31;
    }
    v47 = *(_QWORD *)(v101 + 8 * v46);
    if (!v47)
    {
      v35 += 2;
      if (v46 + 1 >= v103)
      {
        v35 = v46;
      }
      else
      {
        v47 = *(_QWORD *)(v101 + 8 * v35);
        if (v47)
        {
          ++v46;
          goto LABEL_25;
        }
        if (v46 + 2 < v103)
        {
          v47 = *(_QWORD *)(v101 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2;
            goto LABEL_25;
          }
          v66 = v46 + 3;
          if (v46 + 3 >= v103)
          {
            v35 = v46 + 2;
          }
          else
          {
            v47 = *(_QWORD *)(v101 + 8 * v66);
            if (v47)
            {
              v46 += 3;
              goto LABEL_25;
            }
            while (1)
            {
              v46 = v66 + 1;
              if (__OFADD__(v66, 1))
                goto LABEL_122;
              if (v46 >= v103)
                break;
              v47 = *(_QWORD *)(v101 + 8 * v46);
              ++v66;
              if (v47)
                goto LABEL_25;
            }
            v35 = v98;
          }
        }
      }
      goto LABEL_30;
    }
LABEL_25:
    v41 = (v47 - 1) & v47;
    v42 = __clz(__rbit64(v47)) + (v46 << 6);
    v35 = v46;
LABEL_21:
    v43 = *(_QWORD *)(v105 + 56);
    v44 = (_QWORD *)(*(_QWORD *)(v105 + 48) + 16 * v42);
    v45 = v44[1];
    *(_QWORD *)&v113 = *v44;
    *((_QWORD *)&v113 + 1) = v45;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v43 + 40 * v42, (uint64_t)v104);
    swift_bridgeObjectRetain();
LABEL_31:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v113, (uint64_t)&v117);
    v12 = v118;
    if (!v118)
    {
      swift_release();
      v87 = v100;
      if (*v100 >> 62)
      {
        swift_bridgeObjectRetain();
        v88 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v88 = *(_QWORD *)((*v100 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v99 >= v88)
      {
        v89 = 0;
        goto LABEL_108;
      }
      v89 = *v87;
      if (*v87 >> 62)
      {
        swift_bridgeObjectRetain();
        v93 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v93)
          goto LABEL_99;
      }
      else if (*(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_99:
        v89 = specialized RangeReplaceableCollection<>.popLast()();
LABEL_108:
        swift_release();
        swift_release();
        return v89;
      }
      __break(1u);
      goto LABEL_120;
    }
    v15 = v117;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v107, (uint64_t)&v113);
    v48 = *((_QWORD *)&v114 + 1);
    v49 = (_QWORD *)v115;
    v50 = __swift_project_boxed_opaque_existential_1(&v113, *((uint64_t *)&v114 + 1));
    swift_bridgeObjectRetain();
    v51 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)((uint64_t)v50, v110, (uint64_t)v15, (uint64_t)v12, 0, 0, v48, v49);
    v9 = v6;
    if (v6)
    {
      swift_bridgeObjectRelease_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v113);
      swift_release();
      v90 = v100;
      v89 = *v100;
      if (*v100 >> 62)
      {
        swift_bridgeObjectRetain();
        v91 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v91 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v99 >= v91)
        goto LABEL_106;
      v89 = *v90;
      if (!(*v90 >> 62))
      {
        if (*(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_105:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
LABEL_106:
          swift_willThrow();
          swift_release();
          swift_release();
          return v89;
        }
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
LABEL_120:
      swift_bridgeObjectRetain();
      v94 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v94)
        goto LABEL_105;
      goto LABEL_121;
    }
    v6 = v51;
    v111 = v35;
    if (!v51)
    {
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v6 + 24) = 0;
      *(_BYTE *)(v6 + 32) = 4;
    }
    swift_bridgeObjectRelease();
    v112 = 0;
    if (*(_BYTE *)(v10 + 32) != 4)
      goto LABEL_124;
    v52 = v41;
    v7 = *(_QWORD *)(v10 + 16);
    v53 = v106;
    *v106 = 0;
    v53[1] = 0;
    *(_BYTE *)(v10 + 32) = 7;
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v120 = v7;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, (uint64_t)v12);
    v56 = *(_QWORD *)(v7 + 16);
    v57 = (v55 & 1) == 0;
    v58 = v56 + v57;
    if (__OFADD__(v56, v57))
      goto LABEL_112;
    v9 = v55;
    if (*(_QWORD *)(v7 + 24) < v58)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, isUniquelyReferenced_nonNull_native);
      v59 = v120;
      v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, (uint64_t)v12);
      if ((v9 & 1) != (v61 & 1))
        goto LABEL_126;
      v10 = v60;
      v7 = v52;
      if ((v9 & 1) == 0)
      {
LABEL_43:
        *(_QWORD *)(v59 + 8 * (v10 >> 6) + 64) |= 1 << v10;
        v62 = (char **)(*(_QWORD *)(v59 + 48) + 16 * v10);
        *v62 = v15;
        v62[1] = v12;
        *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v10) = v6;
        v63 = *(_QWORD *)(v59 + 16);
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_113;
        *(_QWORD *)(v59 + 16) = v65;
        swift_bridgeObjectRetain();
        goto LABEL_18;
      }
LABEL_17:
      v36 = *(_QWORD *)(v59 + 56);
      v9 = 8 * v10;
      swift_release();
      *(_QWORD *)(v36 + 8 * v10) = v6;
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v109;
      v37 = *(_QWORD *)(v109 + 16);
      v38 = *(_QWORD *)(v109 + 24);
      *(_QWORD *)(v109 + 16) = v59;
      *(_QWORD *)(v10 + 24) = 0;
      v39 = *(_BYTE *)(v10 + 32);
      *(_BYTE *)(v10 + 32) = 4;
      outlined consume of JSONReference.Backing(v37, v38, v39);
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v113);
      v35 = v111;
      v6 = v112;
      continue;
    }
    break;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v59 = v7;
    v7 = v52;
    if ((v55 & 1) == 0)
      goto LABEL_43;
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v67 = static _DictionaryStorage.copy(original:)();
  v59 = v67;
  v68 = *(_QWORD *)(v7 + 16);
  if (!v68)
  {
LABEL_92:
    swift_bridgeObjectRelease();
    v7 = v52;
    if ((v9 & 1) == 0)
      goto LABEL_43;
    goto LABEL_17;
  }
  v69 = (void *)(v67 + 64);
  v70 = (unint64_t)((1 << *(_BYTE *)(v59 + 32)) + 63) >> 6;
  if (v59 != v7 || (unint64_t)v69 >= v7 + 64 + 8 * v70)
  {
    memmove(v69, (const void *)(v7 + 64), 8 * v70);
    v68 = *(_QWORD *)(v7 + 16);
  }
  v95 = v7 + 64;
  v71 = 0;
  *(_QWORD *)(v59 + 16) = v68;
  v72 = 1 << *(_BYTE *)(v7 + 32);
  if (v72 < 64)
    v73 = ~(-1 << v72);
  else
    v73 = -1;
  v74 = v73 & *(_QWORD *)(v7 + 64);
  v96 = (unint64_t)(v72 + 63) >> 6;
  while (2)
  {
    if (v74)
    {
      v75 = __clz(__rbit64(v74));
      v74 &= v74 - 1;
      v97 = v71;
      v76 = v75 | (v71 << 6);
LABEL_65:
      v77 = 16 * v76;
      v78 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v76);
      v79 = v78[1];
      v80 = 8 * v76;
      v81 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + v80);
      v82 = (_QWORD *)(*(_QWORD *)(v59 + 48) + v77);
      *v82 = *v78;
      v82[1] = v79;
      *(_QWORD *)(*(_QWORD *)(v59 + 56) + v80) = v81;
      swift_bridgeObjectRetain();
      swift_retain();
      v71 = v97;
      continue;
    }
    break;
  }
  v83 = v71 + 1;
  if (__OFADD__(v71, 1))
    goto LABEL_123;
  if (v83 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v83);
  v85 = v71 + 1;
  if (v84)
    goto LABEL_90;
  v85 = v71 + 2;
  if (v71 + 2 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v85);
  if (v84)
    goto LABEL_90;
  v85 = v71 + 3;
  if (v71 + 3 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v85);
  if (v84)
    goto LABEL_90;
  v85 = v71 + 4;
  if (v71 + 4 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v85);
  if (v84)
    goto LABEL_90;
  v85 = v71 + 5;
  if (v71 + 5 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v85);
  if (v84)
    goto LABEL_90;
  v85 = v71 + 6;
  if (v71 + 6 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v85);
  if (v84)
    goto LABEL_90;
  v85 = v71 + 7;
  if (v71 + 7 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v85);
  if (v84)
    goto LABEL_90;
  v85 = v71 + 8;
  if (v71 + 8 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v85);
  if (v84)
  {
LABEL_90:
    v74 = (v84 - 1) & v84;
    v97 = v85;
    v76 = __clz(__rbit64(v84)) + (v85 << 6);
    goto LABEL_65;
  }
  v86 = v71 + 9;
  if (v71 + 9 >= v96)
    goto LABEL_92;
  v84 = *(_QWORD *)(v95 + 8 * v86);
  if (v84)
  {
    v85 = v71 + 9;
    goto LABEL_90;
  }
  while (1)
  {
    v85 = v86 + 1;
    if (__OFADD__(v86, 1))
      break;
    if (v85 >= v96)
      goto LABEL_92;
    v84 = *(_QWORD *)(v95 + 8 * v85);
    ++v86;
    if (v84)
      goto LABEL_90;
  }
LABEL_125:
  __break(1u);
LABEL_126:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  _QWORD v3[5];

  v3[3] = type metadata accessor for __JSONEncoder();
  v3[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  _QWORD v3[5];

  v3[3] = type metadata accessor for __JSONEncoder();
  v3[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)(void (*a1)(_QWORD), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v15)(_QWORD);
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  _QWORD *v37;

  v9 = v7;
  v11 = a6;
  v12 = a5;
  v15 = a1;
  v16 = v7 + 2;
  v17 = v7[2];
  if (v17 >> 62)
  {
    v36 = a5;
    swift_bridgeObjectRetain();
    v18 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v15 = a1;
    v11 = a6;
    v12 = v36;
  }
  else
  {
    v18 = *(_QWORD **)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v19 = a3 >> 62;
  v37 = v16;
  if (a7 != -1)
  {
    v35 = v15;
    v33 = v18;
    v34 = v8;
    v18 = (_QWORD *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v20 = swift_allocObject();
    v18[2] = v20;
    *(_QWORD *)(v20 + 16) = a4;
    *(_QWORD *)(v20 + 24) = v12;
    *(_QWORD *)(v20 + 32) = v11;
    *(_BYTE *)(v20 + 40) = a7;
    v18[7] = a3;
    if ((_DWORD)v19)
    {
      if ((_DWORD)v19 != 1)
      {
        v23 = 1;
        goto LABEL_12;
      }
      v21 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v21 = (uint64_t *)(a3 + 64);
    }
    v8 = *v21;
    swift_retain();
    v23 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
LABEL_12:
      v18[8] = v23;
      v16 = (_QWORD *)v9[18];
      v36 = v9[19];
      v9[18] = v18;
      v18 = v33;
LABEL_13:
      outlined copy of _CodingKey?(a4, v12, v11, a7);
      v8 = v34;
      goto LABEL_14;
    }
    __break(1u);
LABEL_32:
    v35 = v15;
    v34 = v8;
    v23 = *(_QWORD *)(a3 + 64);
    swift_retain();
    goto LABEL_13;
  }
  v16 = (_QWORD *)v9[18];
  v22 = v9[19];
  v9[18] = a3;
  v36 = v22;
  if (!(_DWORD)v19)
    goto LABEL_32;
  if ((_DWORD)v19 == 1)
  {
    v35 = v15;
    v23 = *(_QWORD *)(a3 + 32);
    swift_retain();
LABEL_14:
    swift_retain();
    v15 = v35;
    goto LABEL_15;
  }
  v23 = 0;
LABEL_15:
  v9[19] = v23;
  v15(v9);
  if (v8)
  {
    v9[18] = v16;
    swift_retain();
    swift_release();
    v9[19] = v36;
    swift_release();
    swift_release();
    v24 = v9[2];
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if ((uint64_t)v18 >= v25)
      goto LABEL_22;
    if (*v37 >> 62)
    {
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31)
        goto LABEL_21;
    }
    else if (*(_QWORD *)((*v37 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_21:
      specialized RangeReplaceableCollection<>.popLast()();
      swift_release();
LABEL_22:
      swift_willThrow();
      return 0;
    }
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v32)
      goto LABEL_40;
    return specialized RangeReplaceableCollection<>.popLast()();
  }
  v9[18] = v16;
  swift_retain();
  swift_release();
  v9[19] = v36;
  swift_release();
  result = swift_release();
  v27 = v9[2];
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((uint64_t)v18 >= v28)
    return 0;
  if (*v37 >> 62)
    goto LABEL_39;
  if (*(_QWORD *)((*v37 & 0xFFFFFFFFFFFFF8) + 0x10))
    return specialized RangeReplaceableCollection<>.popLast()();
LABEL_40:
  __break(1u);
  return result;
}

unint64_t __JSONEncoder._wrapGeneric<A>(_:for:_:)(void (*a1)(_QWORD *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(_QWORD *);
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t result;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void (*v45)(_QWORD *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v45 = a1;
  v7 = v6;
  v43 = a6;
  v50 = a4;
  v48 = a2;
  v49 = a3;
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v42 - v18;
  v20 = v7[2];
  v44 = v7 + 2;
  if (v20 >> 62)
    goto LABEL_35;
  v47 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v21(v19, v50, v12, v17);
    ((void (*)(uint64_t, char *, uint64_t))v21)(v15, v19, v12);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v15, 1, a5) == 1)
      break;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    v29(v11, v15, a5);
    v9 = swift_allocObject();
    v30 = v43;
    *(_QWORD *)(v9 + 40) = a5;
    *(_QWORD *)(v9 + 48) = v30;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 16));
    v29((char *)boxed_opaque_existential_1, (uint64_t)v11, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    v32 = v49;
    *(_QWORD *)(v9 + 56) = v49;
    if (v32 >> 62)
    {
      if (v32 >> 62 != 1)
      {
        v15 = 1;
LABEL_14:
        *(_QWORD *)(v9 + 64) = v15;
        v24 = v7[18];
        v23 = v7[19];
        v7[18] = v9;
LABEL_15:
        v27 = v45;
        v28 = v46;
        goto LABEL_16;
      }
      v33 = (uint64_t *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v33 = (uint64_t *)(v32 + 64);
    }
    v34 = *v33;
    swift_retain();
    v15 = v34 + 1;
    if (!__OFADD__(v34, 1))
      goto LABEL_14;
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v19, v12);
  v22((char *)v15, v12);
  v24 = v7[18];
  v23 = v7[19];
  v25 = v49;
  v26 = v49 >> 62;
  v7[18] = v49;
  if (!(v25 >> 62))
  {
    v15 = *(_QWORD *)(v25 + 64);
    swift_retain();
    goto LABEL_15;
  }
  v27 = v45;
  v28 = v46;
  if ((_DWORD)v26 != 1)
  {
    v15 = 0;
    goto LABEL_17;
  }
  v15 = *(_QWORD *)(v25 + 32);
  swift_retain();
LABEL_16:
  swift_retain();
LABEL_17:
  v7[19] = v15;
  v27(v7);
  if (v28)
  {
    v7[18] = v24;
    swift_retain();
    swift_release();
    v7[19] = v23;
    swift_release();
    swift_release();
    v35 = v7[2];
    if (v35 >> 62)
    {
      swift_bridgeObjectRetain();
      v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v47 >= v36)
      return swift_willThrow();
    if (*v44 >> 62)
    {
      swift_bridgeObjectRetain();
      v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v40)
        goto LABEL_23;
    }
    else if (*(_QWORD *)((*v44 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_23:
      specialized RangeReplaceableCollection<>.popLast()();
      swift_release();
      return swift_willThrow();
    }
    __break(1u);
    goto LABEL_40;
  }
  v7[18] = v24;
  swift_retain();
  swift_release();
  v7[19] = v23;
  swift_release();
  result = swift_release();
  v38 = v7[2];
  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v47 < v39)
  {
    if (!(*v44 >> 62))
    {
      if (!*(_QWORD *)((*v44 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_41:
        __break(1u);
        return result;
      }
      return specialized RangeReplaceableCollection<>.popLast()();
    }
LABEL_40:
    swift_bridgeObjectRetain();
    v41 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v41)
      goto LABEL_41;
    return specialized RangeReplaceableCollection<>.popLast()();
  }
  return 0;
}

uint64_t specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD v11[5];

  v11[3] = type metadata accessor for __JSONEncoder();
  v11[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v11[0] = a1;
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  v9(v11, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t __JSONReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)(v4 + 160) = a1;
  *(_QWORD *)(v4 + 168) = a4;
  *(_QWORD *)(v4 + 176) = a2;
  *(_QWORD *)(v4 + 184) = 0;
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v42 = *(_QWORD *)(a1 + 72);
  v40 = *(_QWORD *)(a1 + 24);
  v41 = *(_QWORD *)(a1 + 80);
  v37 = *(_QWORD *)(a1 + 96);
  v38 = *(_QWORD *)(a1 + 88);
  v35 = *(_QWORD *)(a1 + 112);
  v36 = *(_QWORD *)(a1 + 104);
  v33 = *(_QWORD *)(a1 + 128);
  v34 = *(_QWORD *)(a1 + 120);
  v39 = *(_QWORD *)(a1 + 136);
  v12 = (_QWORD *)swift_allocObject();
  v12[5] = &type metadata for _CodingKey;
  v12[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  v12[2] = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  v14 = a3 >> 62;
  v12[7] = a3;
  if (a3 >> 62)
  {
    v15 = 0;
    if ((_DWORD)v14 != 1)
      goto LABEL_6;
    v16 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v16 = (uint64_t *)(a3 + 64);
  }
  v15 = *v16;
  result = swift_retain();
LABEL_6:
  if (__OFADD__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    v12[8] = v15 + 1;
    v31 = v8;
    v32 = v7;
    v30 = v9;
    v28 = v11;
    v29 = v10;
    if ((_DWORD)v14)
    {
      v17 = v40;
      if ((_DWORD)v14 == 1)
      {
        v26 = *(_QWORD *)(a3 + 32);
        outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
        v19 = v37;
        v18 = v38;
        v21 = v35;
        v20 = v36;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v42, v41);
        v23 = v33;
        v22 = v34;
        outlined copy of JSONEncoder.KeyEncodingStrategy(v34);
        v24 = v39;
        swift_bridgeObjectRetain();
        swift_release();
        v25 = v26;
      }
      else
      {
        outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
        v19 = v37;
        v18 = v38;
        v21 = v35;
        v20 = v36;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v42, v41);
        v23 = v33;
        v22 = v34;
        outlined copy of JSONEncoder.KeyEncodingStrategy(v34);
        v24 = v39;
        swift_bridgeObjectRetain();
        v25 = 0;
      }
    }
    else
    {
      v27 = *(_QWORD *)(a3 + 64);
      outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v10);
      v19 = v37;
      v18 = v38;
      v21 = v35;
      v20 = v36;
      outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v42, v41);
      v23 = v33;
      v22 = v34;
      outlined copy of JSONEncoder.KeyEncodingStrategy(v34);
      swift_bridgeObjectRetain();
      v24 = v39;
      swift_release();
      v25 = v27;
      v17 = v40;
    }
    *(_QWORD *)(v4 + 32) = v32;
    *(_QWORD *)(v4 + 40) = v31;
    *(_BYTE *)(v4 + 48) = v30;
    *(_QWORD *)(v4 + 56) = v29;
    *(_QWORD *)(v4 + 64) = v28;
    *(_QWORD *)(v4 + 72) = v42;
    *(_QWORD *)(v4 + 80) = v41;
    *(_QWORD *)(v4 + 88) = v18;
    *(_QWORD *)(v4 + 96) = v19;
    *(_QWORD *)(v4 + 104) = v20;
    *(_QWORD *)(v4 + 112) = v21;
    *(_QWORD *)(v4 + 120) = v22;
    *(_QWORD *)(v4 + 128) = v23;
    *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v4 + 24) = v17;
    *(_QWORD *)(v4 + 136) = v24;
    *(_QWORD *)(v4 + 144) = v12;
    *(_QWORD *)(v4 + 152) = v25;
    return v4;
  }
  return result;
}

uint64_t __JSONReferencingEncoder.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  return outlined consume of __JSONReferencingEncoder.Reference(*(_QWORD *)(v0 + 168));
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int16()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int64()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int128()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt16()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt32()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt64()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance UInt128()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)(uint64_t a1)
{
  uint64_t *v1;

  return specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:configuration:for:_:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

_QWORD *sub_181AA9910@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 96))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_181AA9950(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 104))(&v4);
}

double sub_181AA998C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double result;
  __int128 v5;
  char v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 120))(&v5);
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_181AA99D4(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(id *);
  id v7[2];
  char v8;

  v2 = *(void **)(a1 + 8);
  v3 = *a2;
  v4 = *(_BYTE *)(a1 + 16);
  v7[0] = *(id *)a1;
  v7[1] = v2;
  v8 = v4;
  v5 = *(uint64_t (**)(id *))(*(_QWORD *)v3 + 128);
  outlined copy of JSONEncoder.DateEncodingStrategy(v7[0], (uint64_t)v2, v4);
  return v5(v7);
}

double sub_181AA9A24@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 144))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181AA9A64(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(unint64_t *);
  unint64_t v6[2];

  v2 = a1[1];
  v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  v4 = *(uint64_t (**)(unint64_t *))(*(_QWORD *)v3 + 152);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

double sub_181AA9AAC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a1 + 168))(v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

double sub_181AA9AF8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 192))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181AA9B38(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(unint64_t *);
  unint64_t v6[2];

  v2 = a1[1];
  v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  v4 = *(uint64_t (**)(unint64_t *))(*(_QWORD *)v3 + 200);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

uint64_t sub_181AA9B80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_181AA9BB0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 224);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for JSONEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of JSONEncoder.dataEncodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of JSONEncoder.userInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of JSONEncoder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of JSONEncoder.encode<A, B>(_:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of JSONEncoder.DateEncodingStrategy);
}

void destroy for JSONEncoder.DateEncodingStrategy(uint64_t a1)
{
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of JSONEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONEncoder.DateEncodingStrategy);
}

uint64_t *assignWithTake for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONEncoder.DateEncodingStrategy);
}

uint64_t getEnumTagSinglePayload for JSONEncoder.DateEncodingStrategy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.DateEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for JSONEncoder.DateEncodingStrategy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

ValueMetadata *type metadata accessor for JSONEncoder.DataEncodingStrategy()
{
  return &type metadata for JSONEncoder.DataEncodingStrategy;
}

unint64_t destroy for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for JSONEncoder.NonConformingFloatEncodingStrategy(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)a2;
    v6 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v6;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

ValueMetadata *type metadata accessor for JSONEncoder.NonConformingFloatEncodingStrategy()
{
  return &type metadata for JSONEncoder.NonConformingFloatEncodingStrategy;
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DataEncodingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for JSONEncoder.DataEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for JSONEncoder.DataEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder.DataEncodingStrategy(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for JSONEncoder.DataEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for JSONEncoder.KeyEncodingStrategy(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined copy of __JSONReferencingEncoder.Reference(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
    return swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for __JSONReferencingEncoder.Reference(uint64_t *a1)
{
  return outlined consume of __JSONReferencingEncoder.Reference(*a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  outlined copy of __JSONReferencingEncoder.Reference(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  outlined copy of __JSONReferencingEncoder.Reference(*a2);
  v6 = *a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  outlined consume of __JSONReferencingEncoder.Reference(v6);
  return a1;
}

uint64_t *assignWithTake for __JSONReferencingEncoder.Reference(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  outlined consume of __JSONReferencingEncoder.Reference(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __JSONReferencingEncoder.Reference(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for __JSONReferencingEncoder.Reference(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for __JSONReferencingEncoder.Reference(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *destructiveProjectEnumData for __JSONReferencingEncoder.Reference(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for __JSONReferencingEncoder.Reference(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

void *type metadata accessor for __JSONReferencingEncoder.Reference()
{
  return &unk_1E0F26020;
}

uint64_t initializeBufferWithCopyOfBuffer for JSONReference.Backing(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of JSONReference.Backing);
}

uint64_t destroy for JSONReference.Backing(uint64_t a1)
{
  return outlined consume of JSONReference.Backing(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for JSONEncoder.DateEncodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for JSONReference.Backing(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of JSONReference.Backing, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONReference.Backing);
}

uint64_t *assignWithCopy for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for JSONReference.Backing(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for JSONEncoder.DateEncodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of JSONReference.Backing);
}

uint64_t *assignWithTake for JSONEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONReference.Backing(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONReference.Backing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for JSONReference.Backing(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 6u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t destructiveInjectEnumTag for JSONReference.Backing(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONReference.Backing()
{
  return &type metadata for JSONReference.Backing;
}

void *type metadata accessor for _JSONEncodingStorage()
{
  return &unk_1E0F248E0;
}

uint64_t destroy for JSONEncoder._Options(uint64_t a1)
{
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  if (*(_QWORD *)(a1 + 32) >= 2uLL)
    swift_release();
  if (*(_QWORD *)(a1 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 96) >= 2uLL)
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  if (v7 >= 2)
  {
    v11 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v11;
    swift_retain();
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
LABEL_3:
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v8;
      v9 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v9;
      v10 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  v12 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_6:
  v13 = *(_QWORD *)(a2 + 96);
  if (v13 >= 2)
  {
    v14 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  v7 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) < 2uLL)
  {
    if (v10 >= 2)
    {
      v11 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  v13 = (_OWORD *)(a1 + 48);
  v14 = (_OWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(a1 + 48);
      v17 = *(_OWORD *)(a2 + 64);
      v16 = *(_OWORD *)(a2 + 80);
      *v13 = *v14;
      *(_OWORD *)(a1 + 64) = v17;
      *(_OWORD *)(a1 + 80) = v16;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *v14;
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    *v13 = v18;
  }
  v20 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) >= 2uLL)
  {
    if (v20 >= 2)
    {
      v22 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v20;
      *(_QWORD *)(a1 + 104) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
    goto LABEL_20;
  }
  if (v20 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v21;
  swift_retain();
LABEL_22:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for JSONEncoder._Options(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(void **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  v9 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) < 2uLL)
  {
    if (v9 >= 2)
    {
      v10 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v11;
  swift_release();
LABEL_8:
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = *(_QWORD *)(a2 + 56);
    if (v12)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(a1 + 48);
  }
  v15 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_13:
  v16 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) >= 2uLL)
  {
    if (v16 >= 2)
    {
      v18 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v16;
      *(_QWORD *)(a1 + 104) = v18;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
    goto LABEL_18;
  }
  if (v16 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
LABEL_20:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONEncoder._Options(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONEncoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for JSONEncoder._Options()
{
  return &unk_1E0F16EA0;
}

uint64_t outlined copy of _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 3 || a4 == 0)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _CodingKey, &type metadata for _CodingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _CodingKey, &type metadata for _CodingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey;
  if (!lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _CodingKey, &type metadata for _CodingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CodingKey and conformance _CodingKey);
  }
  return result;
}

uint64_t sub_181AAAE20()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t outlined consume of _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 3 || a4 == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  id v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *boxed_opaque_existential_1;
  void (*v46)(char *, uint64_t);
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD v84[6];

  v71 = a8;
  v84[3] = &type metadata for _CodingKey;
  v65 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v84[4] = v65;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)(v17 + 32) = a4;
  *(_BYTE *)(v17 + 40) = a5;
  v72 = a9;
  *(_QWORD *)(a10 + 160) = a1;
  *(_QWORD *)(a10 + 168) = a9 | 0x8000000000000000;
  *(_QWORD *)(a10 + 176) = a6;
  *(_QWORD *)(a10 + 184) = a7;
  v66 = *(_QWORD *)(a1 + 24);
  v18 = *(void **)(a1 + 32);
  v83 = *(_QWORD *)(a1 + 40);
  v84[0] = v17;
  v82 = *(unsigned __int8 *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v80 = *(_QWORD *)(a1 + 64);
  v81 = v19;
  v20 = *(_QWORD *)(a1 + 72);
  v78 = *(_QWORD *)(a1 + 80);
  v79 = v20;
  v21 = *(_QWORD *)(a1 + 88);
  v76 = *(_QWORD *)(a1 + 96);
  v77 = v21;
  v75 = *(_QWORD *)(a1 + 104);
  v22 = *(_QWORD *)(a1 + 112);
  v73 = v18;
  v74 = v22;
  v23 = *(_QWORD *)(a1 + 128);
  v69 = *(_QWORD *)(a1 + 120);
  v70 = v23;
  v68 = *(_QWORD *)(a1 + 136);
  v24 = __swift_project_boxed_opaque_existential_1(v84, (uint64_t)&type metadata for _CodingKey);
  v25 = type metadata accessor for Optional();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v26 + 64);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  initializeWithCopy for _CodingKey((uint64_t)v28, (uint64_t)v24);
  v29 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v28, 0, 1u);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v32);
  v34 = v25;
  v67 = v26;
  (*(void (**)(char *, char *, uint64_t, __n128))(v26 + 16))(v28, v28, v25, v33);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v28, 1u) == 1)
  {
    swift_retain();
    swift_retain();
    outlined copy of JSONEncoder.DateEncodingStrategy(v73, v83, v82);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v81);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v79, v78);
    v35 = v69;
    v36 = v70;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v69);
    v37 = *(void (**)(char *, uint64_t))(v67 + 8);
    v38 = v68;
    swift_bridgeObjectRetain();
    v37(v28, v34);
    v37(v28, v34);
    v39 = v71;
    swift_retain();
    swift_release();
    swift_release();
    v40 = v39 >> 62;
    v41 = (uint64_t *)v39;
    v42 = v73;
    if (v39 >> 62)
    {
LABEL_3:
      if ((_DWORD)v40 != 1)
      {
        v48 = 0;
LABEL_14:
        v52 = v66;
        v53 = v83;
        v54 = v82;
        v56 = v80;
        v55 = v81;
        v58 = v78;
        v57 = v79;
        v60 = v76;
        v59 = v77;
        v61 = v74;
        v62 = v75;
        *(_QWORD *)(a10 + 32) = v42;
        *(_QWORD *)(a10 + 40) = v53;
        *(_BYTE *)(a10 + 48) = v54;
        *(_QWORD *)(a10 + 56) = v55;
        *(_QWORD *)(a10 + 64) = v56;
        *(_QWORD *)(a10 + 72) = v57;
        *(_QWORD *)(a10 + 80) = v58;
        *(_QWORD *)(a10 + 88) = v59;
        *(_QWORD *)(a10 + 96) = v60;
        *(_QWORD *)(a10 + 104) = v62;
        *(_QWORD *)(a10 + 112) = v61;
        v63 = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a10 + 120) = v35;
        *(_QWORD *)(a10 + 128) = v36;
        *(_QWORD *)(a10 + 16) = v63;
        *(_QWORD *)(a10 + 24) = v52;
        *(_QWORD *)(a10 + 136) = v38;
        *(_QWORD *)(a10 + 144) = v41;
        *(_QWORD *)(a10 + 152) = v48;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
        return a10;
      }
      v43 = (uint64_t *)((v39 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      v48 = *v43;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    v43 = (uint64_t *)(v39 + 64);
    goto LABEL_13;
  }
  __swift_memcpy25_8((uint64_t)v31, (uint64_t)v28);
  v41 = (uint64_t *)swift_allocObject();
  v44 = v65;
  v41[5] = (uint64_t)&type metadata for _CodingKey;
  v41[6] = v44;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v31);
  swift_retain();
  swift_retain();
  v42 = v73;
  outlined copy of JSONEncoder.DateEncodingStrategy(v73, v83, v82);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v81);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v79, v78);
  v35 = v69;
  v36 = v70;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v69);
  v46 = *(void (**)(char *, uint64_t))(v67 + 8);
  v38 = v68;
  swift_bridgeObjectRetain();
  v46(v28, v34);
  v39 = v71;
  v41[7] = v71;
  v40 = v39 >> 62;
  if (v39 >> 62)
  {
    if ((_DWORD)v40 != 1)
    {
      v51 = 1;
LABEL_11:
      v41[8] = v51;
      swift_release();
      swift_release();
      if ((_DWORD)v40)
        goto LABEL_3;
      goto LABEL_12;
    }
    v47 = (uint64_t *)((v39 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v47 = (uint64_t *)(v39 + 64);
  }
  v49 = *v47;
  result = swift_retain();
  v51 = v49 + 1;
  if (!__OFADD__(v49, 1))
    goto LABEL_11;
  __break(1u);
  return result;
}

uint64_t specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *boxed_opaque_existential_1;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  uint64_t *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t *v52;
  void (*v53)(char *, uint64_t);
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93[3];
  __int128 v94;

  v82 = a5;
  *(_QWORD *)&v94 = a8;
  *((_QWORD *)&v94 + 1) = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v93);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 32))(boxed_opaque_existential_1, a2, a8);
  v81 = a6;
  *(_QWORD *)(a7 + 160) = a1;
  *(_QWORD *)(a7 + 168) = a6 | 0x8000000000000000;
  *(_QWORD *)(a7 + 176) = a3;
  *(_QWORD *)(a7 + 184) = a4;
  v74 = *(_QWORD *)(a1 + 24);
  v17 = *(void **)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v92 = *(unsigned __int8 *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v90 = *(_QWORD *)(a1 + 64);
  v91 = v19;
  v20 = *(_QWORD *)(a1 + 72);
  v88 = *(_QWORD *)(a1 + 80);
  v89 = v20;
  v21 = *(_QWORD *)(a1 + 88);
  v86 = *(_QWORD *)(a1 + 96);
  v87 = v21;
  v85 = *(_QWORD *)(a1 + 104);
  v22 = *(_QWORD *)(a1 + 112);
  v83 = v17;
  v84 = v22;
  v79 = *(_QWORD *)(a1 + 120);
  v80 = v18;
  v78 = *(_QWORD *)(a1 + 128);
  v73 = v94;
  v23 = v94;
  v77 = *(_QWORD *)(a1 + 136);
  v24 = __swift_project_boxed_opaque_existential_1(v93, v94);
  v25 = type metadata accessor for Optional();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v26 + 64);
  v28 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v30 + 16))(v29, v24, v23, v28);
  v31 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v29, 0, 1, v23);
  MEMORY[0x1E0C80A78](v31);
  v72 = (char *)&v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v33);
  v35 = v29;
  v75 = v26;
  v36 = *(void (**)(char *, char *, uint64_t, __n128))(v26 + 16);
  v76 = v25;
  v36(v29, v29, v25, v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    v37 = v80;
    outlined copy of JSONEncoder.DateEncodingStrategy(v83, v80, v92);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v91);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v89, v88);
    v39 = v78;
    v38 = v79;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v79);
    v40 = *(void (**)(char *, uint64_t))(v75 + 8);
    v41 = v77;
    swift_bridgeObjectRetain();
    v42 = v29;
    v43 = v76;
    v40(v42, v76);
    v40(v35, v43);
    v44 = v82;
    swift_retain();
    swift_release();
    swift_release();
    v45 = v44 >> 62;
    v46 = v44;
    v47 = v83;
    v48 = v44;
    if (v44 >> 62)
    {
LABEL_3:
      if ((_DWORD)v45 != 1)
      {
        v56 = 0;
LABEL_14:
        v60 = v74;
        v61 = v92;
        v63 = v90;
        v62 = v91;
        v65 = v88;
        v64 = v89;
        v67 = v86;
        v66 = v87;
        v69 = v84;
        v68 = v85;
        *(_QWORD *)(a7 + 32) = v47;
        *(_QWORD *)(a7 + 40) = v37;
        *(_BYTE *)(a7 + 48) = v61;
        *(_QWORD *)(a7 + 56) = v62;
        *(_QWORD *)(a7 + 64) = v63;
        *(_QWORD *)(a7 + 72) = v64;
        *(_QWORD *)(a7 + 80) = v65;
        *(_QWORD *)(a7 + 88) = v66;
        *(_QWORD *)(a7 + 96) = v67;
        *(_QWORD *)(a7 + 104) = v68;
        *(_QWORD *)(a7 + 112) = v69;
        v70 = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a7 + 120) = v38;
        *(_QWORD *)(a7 + 128) = v39;
        *(_QWORD *)(a7 + 16) = v70;
        *(_QWORD *)(a7 + 24) = v60;
        *(_QWORD *)(a7 + 136) = v41;
        *(_QWORD *)(a7 + 144) = v46;
        *(_QWORD *)(a7 + 152) = v56;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
        return a7;
      }
      v49 = (uint64_t *)((v48 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      v56 = *v49;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    v49 = (uint64_t *)(v48 + 64);
    goto LABEL_13;
  }
  v50 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v51 = v72;
  v50(v72, v29, v23);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 40) = v73;
  v52 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v46 + 16));
  v50((char *)v52, v51, v23);
  swift_retain();
  swift_retain();
  v47 = v83;
  v37 = v80;
  outlined copy of JSONEncoder.DateEncodingStrategy(v83, v80, v92);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v91);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v89, v88);
  v39 = v78;
  v38 = v79;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v79);
  v53 = *(void (**)(char *, uint64_t))(v75 + 8);
  v41 = v77;
  swift_bridgeObjectRetain();
  v53(v29, v76);
  v54 = v82;
  *(_QWORD *)(v46 + 56) = v82;
  v45 = v54 >> 62;
  if (v54 >> 62)
  {
    if ((_DWORD)v45 != 1)
    {
      v59 = 1;
LABEL_11:
      *(_QWORD *)(v46 + 64) = v59;
      swift_release();
      swift_release();
      v48 = v82;
      if ((_DWORD)v45)
        goto LABEL_3;
      goto LABEL_12;
    }
    v55 = (uint64_t *)((v54 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v55 = (uint64_t *)(v54 + 64);
  }
  v57 = *v55;
  result = swift_retain();
  v59 = v57 + 1;
  if (!__OFADD__(v57, 1))
    goto LABEL_11;
  __break(1u);
  return result;
}

uint64_t outlined copy of _CodingKey?(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return outlined copy of _CodingKey(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_181AAB77C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t partial apply for closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for _JSONKeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _JSONKeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _JSONKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for _JSONUnkeyedEncodingContainer()
{
  return &unk_1E0F27BD0;
}

uint64_t associated type witness table accessor for KeyedEncodingContainerProtocol.Key : CodingKey in _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50122_s10Foundation11JSONEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_12768CA107A31EF2DCE034FD75B541C9LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      String.subscript.getter();
      v5 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(Swift::String *)(v9 + 16 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _JSONUnkeyedEncodingContainer.count.getter(uint64_t result)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(unsigned __int8 *)(result + 32);
  if (v2 == 4)
    return *(_QWORD *)(v1 + 16);
  if (v2 == 3)
  {
    if (v1 >> 62)
    {
      v3 = *(_QWORD *)(result + 24);
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v1, v3, 3);
      return v4;
    }
    else
    {
      return *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void NSCoder.decodeTopLevelObject()(_OWORD *a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = v1;
  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v9 = 0;
  v4 = (id)__NSCoderDecodeObject(v2, (const char *)&v9);
  v5 = (void *)v9;
  if (v4)
  {
    v6 = (id)v9;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
    v7 = v5;
  }
  outlined init with take of Any?((uint64_t)&v9, (uint64_t)v11);
  if (v5)
  {
    v8 = v5;
    if (objc_msgSend(v8, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);

      return;
    }

  }
  outlined init with copy of Any?((uint64_t)v11, (uint64_t)&v9);
  if (*((_QWORD *)&v10 + 1))
  {
    outlined init with take of Any(&v9, a1);
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);

}

id NSCoder.decodeTopLevelObject(forKey:)()
{
  void *v0;
  const char *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  __int128 v14;
  __int128 v15;
  _BYTE v16[32];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = (const char *)String._bridgeToObjectiveCImpl()();
  *(_QWORD *)&v14 = 0;
  v2 = (id)__NSCoderDecodeObjectForKey(v0, v1, (uint64_t)&v14);
  swift_unknownObjectRelease();
  v3 = (void *)v14;
  if (v2)
  {
    v4 = (id)v14;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    v5 = v3;
  }
  outlined init with take of Any?((uint64_t)&v14, (uint64_t)v16);
  if (v3)
  {
    v6 = v3;
    if (objc_msgSend(v6, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);

      return v2;
    }

  }
  outlined init with copy of Any?((uint64_t)v16, (uint64_t)&v14);
  v7 = *((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v15 + 1));
    v9 = *(_QWORD *)(v7 - 8);
    v10 = MEMORY[0x1E0C80A78](v8);
    v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v9 + 16))(v12, v10);
    v2 = (id)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);
    v2 = 0;
  }

  return v2;
}

void NSCoder.decodeTopLevelObject(forKey:)(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  const char *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _OWORD v10[2];
  _BYTE v11[32];
  uint64_t v12;

  v2 = v1;
  v12 = *MEMORY[0x1E0C80C00];
  v4 = (const char *)String._bridgeToObjectiveCImpl()();
  *(_QWORD *)&v10[0] = 0;
  v5 = (id)__NSCoderDecodeObjectForKey(v2, v4, (uint64_t)v10);
  swift_unknownObjectRelease();
  v6 = *(void **)&v10[0];
  if (v5)
  {
    v7 = *(id *)&v10[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v8 = v6;
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v6)
    goto LABEL_7;
  v9 = v6;
  if (objc_msgSend(v9, sel_code) == (id)4865)
  {

LABEL_7:
    outlined init with take of Any?((uint64_t)v11, a1);

    return;
  }
  swift_willThrow();
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);

}

uint64_t NSCoder.decodeTopLevelObject<A>(of:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  const char *ObjCClassFromMetadata;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  uint64_t v19;

  v5 = v4;
  v19 = *MEMORY[0x1E0C80C00];
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  v8 = String._bridgeToObjectiveCImpl()();
  *(_QWORD *)&v16 = 0;
  v9 = (id)__NSCoderDecodeObjectOfClassForKey(v5, ObjCClassFromMetadata, v8, (uint64_t)&v16);
  swift_unknownObjectRelease();
  v10 = (void *)v16;
  if (v9)
  {
    v11 = (id)v16;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
    v12 = v10;
  }
  outlined init with take of Any?((uint64_t)&v16, (uint64_t)v18);
  if (v10)
  {
    v13 = v10;
    if (objc_msgSend(v13, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for Any?);

      return a4;
    }

  }
  outlined init with take of Any?((uint64_t)v18, (uint64_t)&v16);
  if (*((_QWORD *)&v17 + 1))
  {
    if (swift_dynamicCast())
      a4 = v15;
    else
      a4 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
    a4 = 0;
  }

  return a4;
}

void NSCoder.decodeTopLevelObject(of:forKey:)(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  const char *ObjCClassFromMetadata;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[32];
  uint64_t v17;

  v3 = v2;
  v4 = a1;
  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1[2] == 1)
    {
      ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
      v7 = String._bridgeToObjectiveCImpl()();
      *(_QWORD *)&v14 = 0;
      v8 = (id)__NSCoderDecodeObjectOfClassForKey(v3, ObjCClassFromMetadata, v7, (uint64_t)&v14);
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    v4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  v9 = String._bridgeToObjectiveCImpl()();
  *(_QWORD *)&v14 = 0;
  v8 = (id)__NSCoderDecodeObjectOfClassesForKey(v3, (uint64_t)v4, v9, (uint64_t)&v14);

LABEL_6:
  swift_unknownObjectRelease();
  v10 = (void *)v14;
  if (v8)
  {
    v11 = (id)v14;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    v12 = v10;
  }
  outlined init with take of Any?((uint64_t)&v14, (uint64_t)v16);
  if (v10)
  {
    v13 = v10;
    if (objc_msgSend(v13, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);

      return;
    }

  }
  outlined init with copy of Any?((uint64_t)v16, (uint64_t)&v14);
  if (*((_QWORD *)&v15 + 1))
  {
    outlined init with take of Any(&v14, a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Any?);

}

Swift::OpaquePointer_optional __swiftcall NSCoder.decodeArrayOfObjects(ofClasses:forKey:)(Swift::OpaquePointer ofClasses, Swift::String forKey)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  Swift::Bool v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::OpaquePointer_optional result;

  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  v3 = _ContiguousArrayBuffer._asCocoaArray()();
  v4 = String._bridgeToObjectiveCImpl()();
  v5 = (id)__NSCoderDecodeArrayOfObjectsOfClassesForKey(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v5)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = v7;

    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v5, sel_copy);
      v9 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v8 = specialized _arrayForceCast<A, B>(_:)(v9);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = (void *)v8;
  result.value._rawValue = v10;
  result.is_nil = v6;
  return result;
}

Swift::OpaquePointer_optional __swiftcall NSCoder.decodeDictionary(withKeysOfClasses:objectsOfClasses:forKey:)(Swift::OpaquePointer withKeysOfClasses, Swift::OpaquePointer objectsOfClasses, Swift::String forKey)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::Bool v9;
  uint64_t v10;
  void *v11;
  Swift::OpaquePointer_optional result;

  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  v5 = _ContiguousArrayBuffer._asCocoaArray()();
  specialized _arrayForceCast<A, B>(_:)((uint64_t)objectsOfClasses._rawValue);
  v6 = _ContiguousArrayBuffer._asCocoaArray()();
  v7 = String._bridgeToObjectiveCImpl()();
  v8 = (id)__NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey(v3, v5, v6, v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v8)
  {
    v10 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8);

  }
  else
  {
    v10 = 0;
  }
  v11 = (void *)v10;
  result.value._rawValue = v11;
  result.is_nil = v9;
  return result;
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t result;
  char *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void (*v93)(char *, uint64_t, uint64_t, uint64_t);
  void (*v94)(char *, char *, uint64_t);
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  void *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  id v130;
  unint64_t v131;
  id v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t, uint64_t, uint64_t);
  void (*v137)(char *, char *, uint64_t);
  char *v138;
  uint64_t v139;
  char v140;
  _QWORD *v141;
  void (*v142)(char *, uint64_t, uint64_t, uint64_t);
  void (*v143)(char *, char *, uint64_t);
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *i;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t TupleTypeMetadata2;
  uint64_t v189;
  _QWORD *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;

  v189 = a4;
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v183 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v186 = (char *)&v166 - v11;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v166 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v192 = (char *)&v166 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v181 = (char *)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  i = (char *)&v166 - v20;
  v187 = swift_getTupleTypeMetadata2();
  v21 = MEMORY[0x1E0C80A78](v187);
  v180 = (char *)&v166 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v176 = (char *)&v166 - v24;
  v197 = a3;
  v195 = *(_QWORD **)(a3 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v194 = (char *)&v166 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v179 = (char *)&v166 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v178 = (char *)&v166 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v175 = (char *)&v166 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v174 = (char *)&v166 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v173 = (char *)&v166 - v36;
  v196 = *(_QWORD *)(a2 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v193 = (char *)&v166 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v185 = (char *)&v166 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v177 = (char *)&v166 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v172 = (char *)&v166 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v191 = (char *)&v166 - v46;
  MEMORY[0x1E0C80A78](v45);
  v171 = (char *)&v166 - v47;
  v48 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v49 = __CocoaSet.count.getter();
    v184 = (uint64_t)v16;
    if (v49)
    {
LABEL_3:
      type metadata accessor for _DictionaryStorage();
      v50 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_6;
    }
  }
  else
  {
    v51 = *(_QWORD *)(a1 + 16);
    v184 = (uint64_t)v16;
    if (v51)
      goto LABEL_3;
  }
  v50 = MEMORY[0x1E0DEE9E0];
LABEL_6:
  v168 = v7;
  v167 = v8;
  v170 = v12;
  v169 = v13;
  v190 = (_QWORD *)v50;
  if (a2 == MEMORY[0x1E0DEA968])
  {
    if (v48)
    {
      v56 = __CocoaDictionary.makeIterator()();
      v181 = 0;
      v57 = 0;
      v58 = 0;
      v59 = v56 | 0x8000000000000000;
    }
    else
    {
      v111 = -1 << *(_BYTE *)(a1 + 32);
      v57 = ~v111;
      v112 = *(_QWORD *)(a1 + 64);
      v181 = (char *)(a1 + 64);
      v113 = -v111;
      if (v113 < 64)
        v114 = ~(-1 << v113);
      else
        v114 = -1;
      v58 = v114 & v112;
      v59 = a1;
    }
    v178 = (char *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
    v177 = (char *)v57;
    v179 = (char *)((unint64_t)(v57 + 64) >> 6);
    v180 = (char *)(v50 + 64);
    result = swift_bridgeObjectRetain();
    v115 = 0;
    v183 = (char *)v59;
    v184 = MEMORY[0x1E0DEE9B0] + 8;
    v116 = 0x1E0DE7910uLL;
    v118 = v191;
    v117 = v192;
    v185 = 0;
    if ((v59 & 0x8000000000000000) == 0)
      goto LABEL_63;
LABEL_59:
    v119 = __CocoaDictionary.Iterator.next()();
    if (v119)
    {
      v121 = v120;
      v198 = v119;
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      swift_dynamicCast();
      v200 = v121;
      v122 = v115;
      v123 = v199;
      v193 = (char *)v58;
      v194 = v122;
      while (1)
      {
        v198 = (uint64_t)v123;
        v131 = v116;
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v132 = v123;
        v133 = MEMORY[0x1E0DEA968];
        v134 = swift_dynamicCast();
        v135 = v196;
        v136 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v196 + 56);
        if (!v134)
          break;
        v136(v117, 0, 1, v133);
        v137 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
        v137(v118, v117, v133);
        v198 = v121;

        v138 = v186;
        v139 = v197;
        v140 = swift_dynamicCast();
        v141 = v195;
        v142 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v195[7];
        if ((v140 & 1) == 0)
        {
          v142(v138, 1, 1, v139);
          (*(void (**)(char *, _QWORD))(v196 + 8))(v118, MEMORY[0x1E0DEA968]);
          (*(void (**)(char *, uint64_t))(v167 + 8))(v138, v168);
          goto LABEL_90;
        }
        v142(v138, 0, 1, v139);
        v143 = (void (*)(char *, char *, uint64_t))v141[4];
        v144 = v174;
        v143(v174, v138, v139);
        v145 = i;
        v146 = &i[*(int *)(TupleTypeMetadata2 + 48)];
        v137(i, v118, v133);
        v143(v146, v144, v139);
        v147 = v187;
        v148 = v176;
        v149 = &v176[*(int *)(v187 + 48)];
        v150 = v145;
        v151 = v175;
        v137(v176, v150, v133);
        v143(v149, v146, v197);
        v152 = &v148[*(int *)(v147 + 48)];
        v153 = v171;
        v137(v171, v148, v133);
        v154 = v173;
        v143(v173, v152, v197);
        v155 = (uint64_t)v172;
        v156 = v153;
        v157 = v197;
        v137(v172, v156, v133);
        v143(v151, v154, v157);
        v158 = v190;
        result = __RawDictionaryStorage.find<A>(_:)(v155, v133, v189);
        v159 = result;
        v160 = v133;
        if ((v161 & 1) != 0)
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v196 + 40))(v158[6] + *(_QWORD *)(v196 + 72) * result, v155, v133);
          result = ((uint64_t (*)(unint64_t, char *, uint64_t))v141[5])(v158[7] + v141[9] * v159, v151, v157);
          v58 = (unint64_t)v193;
          v115 = v194;
          v118 = v191;
          v117 = v192;
          v59 = (unint64_t)v183;
          v50 = (uint64_t)v158;
        }
        else
        {
          v162 = v196;
          if (v158[2] >= v158[3])
          {
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
            goto LABEL_100;
          }
          v50 = (uint64_t)v158;
          *(_QWORD *)&v180[(result >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << result;
          v137((char *)(v158[6] + *(_QWORD *)(v162 + 72) * result), (char *)v155, v160);
          result = ((uint64_t (*)(unint64_t, char *, uint64_t))v143)(v158[7] + v195[9] * v159, v151, v157);
          v163 = v158[2];
          v164 = __OFADD__(v163, 1);
          v165 = v163 + 1;
          if (v164)
            goto LABEL_97;
          v158[2] = v165;
          v58 = (unint64_t)v193;
          v115 = v194;
          v118 = v191;
          v117 = v192;
          v59 = (unint64_t)v183;
        }
        v116 = v131;
        v185 = v115;
        if ((v59 & 0x8000000000000000) != 0)
          goto LABEL_59;
LABEL_63:
        if (v58)
        {
          v193 = (char *)((v58 - 1) & v58);
          v194 = v115;
          v124 = __clz(__rbit64(v58)) | ((_QWORD)v115 << 6);
        }
        else
        {
          v125 = (uint64_t)(v115 + 1);
          if (__OFADD__(v115, 1))
            goto LABEL_99;
          if (v125 >= (uint64_t)v179)
            goto LABEL_93;
          v126 = *(_QWORD *)&v181[8 * v125];
          v127 = (uint64_t)(v115 + 1);
          if (!v126)
          {
            v127 = (uint64_t)(v115 + 2);
            if ((uint64_t)(v115 + 2) >= (uint64_t)v179)
              goto LABEL_93;
            v126 = *(_QWORD *)&v181[8 * v127];
            if (!v126)
            {
              v127 = (uint64_t)(v115 + 3);
              if ((uint64_t)(v115 + 3) >= (uint64_t)v179)
                goto LABEL_93;
              v126 = *(_QWORD *)&v181[8 * v127];
              if (!v126)
              {
                v127 = (uint64_t)(v115 + 4);
                if ((uint64_t)(v115 + 4) >= (uint64_t)v179)
                  goto LABEL_93;
                v126 = *(_QWORD *)&v181[8 * v127];
                if (!v126)
                {
                  v128 = v115 + 5;
                  if ((uint64_t)(v115 + 5) >= (uint64_t)v179)
                    goto LABEL_93;
                  v126 = *(_QWORD *)&v181[8 * (_QWORD)v128];
                  if (!v126)
                  {
                    while (1)
                    {
                      v127 = (uint64_t)(v128 + 1);
                      if (__OFADD__(v128, 1))
                        goto LABEL_101;
                      if (v127 >= (uint64_t)v179)
                        goto LABEL_93;
                      v126 = *(_QWORD *)&v181[8 * v127];
                      ++v128;
                      if (v126)
                        goto LABEL_80;
                    }
                  }
                  v127 = (uint64_t)(v115 + 5);
                }
              }
            }
          }
LABEL_80:
          v193 = (char *)((v126 - 1) & v126);
          v194 = (char *)v127;
          v124 = __clz(__rbit64(v126)) + (v127 << 6);
        }
        v129 = 8 * v124;
        v123 = *(void **)(*(_QWORD *)(v59 + 48) + v129);
        v121 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + v129);
        v199 = v123;
        v200 = v121;
        v130 = v123;
        swift_unknownObjectRetain();
      }
      v136(v117, 1, 1, MEMORY[0x1E0DEA968]);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v169 + 8))(v117, v170);
LABEL_90:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_91:
      swift_release();
      return 0;
    }
LABEL_93:
    v199 = 0;
    v200 = 0;
LABEL_94:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    return v50;
  }
  if (v48)
  {
    v52 = __CocoaDictionary.makeIterator()();
    v175 = 0;
    v53 = 0;
    v54 = 0;
    v55 = v52 | 0x8000000000000000;
  }
  else
  {
    v60 = -1 << *(_BYTE *)(a1 + 32);
    v53 = ~v60;
    v61 = *(_QWORD *)(a1 + 64);
    v175 = (char *)(a1 + 64);
    v62 = -v60;
    if (v62 < 64)
      v63 = ~(-1 << v62);
    else
      v63 = -1;
    v54 = v63 & v61;
    v55 = a1;
  }
  v64 = v185;
  v173 = (char *)(v55 & 0x7FFFFFFFFFFFFFFFLL);
  v172 = (char *)v53;
  v174 = (char *)((unint64_t)(v53 + 64) >> 6);
  v65 = v50 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v67 = 0;
  v176 = (char *)(MEMORY[0x1E0DEE9B0] + 8);
  v68 = v195;
  for (i = (char *)v55; ; v55 = (unint64_t)i)
  {
    v186 = (char *)v54;
    if ((v55 & 0x8000000000000000) == 0)
      break;
    v71 = v67;
    v72 = __CocoaDictionary.Iterator.next()();
    if (!v72)
      goto LABEL_92;
    v74 = v73;
    v198 = v72;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_dynamicCast();
    v200 = v74;
    v75 = v199;
    v191 = v186;
    v192 = v71;
LABEL_40:
    v198 = (uint64_t)v75;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v83 = v75;
    v84 = v184;
    v85 = swift_dynamicCast();
    v86 = v196;
    v87 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v196 + 56);
    if (!v85)
    {
      v87(v84, 1, 1, a2);
      swift_unknownObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v84, v170);
LABEL_53:
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      goto LABEL_91;
    }
    v87(v84, 0, 1, a2);
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 32);
    v88(v64, v84, a2);
    v198 = v74;

    v89 = v183;
    v90 = a2;
    v91 = v197;
    v92 = swift_dynamicCast();
    v93 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v68[7];
    if ((v92 & 1) == 0)
    {
      v93(v89, 1, 1, v91);
      (*(void (**)(char *, uint64_t))(v196 + 8))(v64, v90);
      (*(void (**)(char *, uint64_t))(v167 + 8))(v89, v168);
      goto LABEL_53;
    }
    v93(v89, 0, 1, v91);
    v94 = (void (*)(char *, char *, uint64_t))v68[4];
    v95 = v179;
    v94(v179, v89, v91);
    v96 = v181;
    v97 = &v181[*(int *)(TupleTypeMetadata2 + 48)];
    v88(v181, (uint64_t)v64, v90);
    v94(v97, v95, v91);
    v98 = v187;
    v99 = v180;
    v100 = &v180[*(int *)(v187 + 48)];
    v88(v180, (uint64_t)v96, v90);
    v94(v100, v97, v91);
    v101 = &v99[*(int *)(v98 + 48)];
    v102 = v177;
    v88(v177, (uint64_t)v99, v90);
    v103 = v178;
    v94(v178, v101, v91);
    v88(v193, (uint64_t)v102, v90);
    v94(v194, v103, v91);
    v50 = (uint64_t)v190;
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v104 = -1 << *(_BYTE *)(v50 + 32);
    v105 = result & ~v104;
    v106 = v105 >> 6;
    a2 = v90;
    if (((-1 << v105) & ~*(_QWORD *)(v65 + 8 * (v105 >> 6))) != 0)
    {
      v69 = __clz(__rbit64((-1 << v105) & ~*(_QWORD *)(v65 + 8 * (v105 >> 6)))) | v105 & 0x7FFFFFFFFFFFFFC0;
      v68 = v195;
      v64 = v185;
    }
    else
    {
      v107 = 0;
      v108 = (unint64_t)(63 - v104) >> 6;
      v68 = v195;
      v64 = v185;
      do
      {
        if (++v106 == v108 && (v107 & 1) != 0)
        {
          __break(1u);
          goto LABEL_96;
        }
        v109 = v106 == v108;
        if (v106 == v108)
          v106 = 0;
        v107 |= v109;
        v110 = *(_QWORD *)(v65 + 8 * v106);
      }
      while (v110 == -1);
      v69 = __clz(__rbit64(~v110)) + (v106 << 6);
    }
    *(_QWORD *)(v65 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v69;
    v88((char *)(*(_QWORD *)(v50 + 48) + *(_QWORD *)(v196 + 72) * v69), (uint64_t)v193, v90);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v94)(*(_QWORD *)(v50 + 56) + v68[9] * v69, v194, v197);
    ++*(_QWORD *)(v50 + 16);
    v54 = (unint64_t)v191;
    v67 = v192;
  }
  if (v54)
  {
    v191 = (char *)((v54 - 1) & v54);
    v192 = v67;
    v70 = __clz(__rbit64(v54)) | ((_QWORD)v67 << 6);
LABEL_39:
    v80 = 8 * v70;
    v81 = *(_QWORD *)(v55 + 56);
    v75 = *(void **)(*(_QWORD *)(v55 + 48) + v80);
    v74 = *(_QWORD *)(v81 + v80);
    v199 = v75;
    v200 = v74;
    v82 = v75;
    swift_unknownObjectRetain();
    goto LABEL_40;
  }
  v76 = (uint64_t)(v67 + 1);
  if (__OFADD__(v67, 1))
    goto LABEL_98;
  if (v76 >= (uint64_t)v174)
  {
LABEL_92:
    v199 = 0;
    v200 = 0;
    swift_release();
    goto LABEL_94;
  }
  v77 = *(_QWORD *)&v175[8 * v76];
  v78 = (uint64_t)(v67 + 1);
  if (v77)
    goto LABEL_38;
  v78 = (uint64_t)(v67 + 2);
  if ((uint64_t)(v67 + 2) >= (uint64_t)v174)
    goto LABEL_92;
  v77 = *(_QWORD *)&v175[8 * v78];
  if (v77)
    goto LABEL_38;
  v78 = (uint64_t)(v67 + 3);
  if ((uint64_t)(v67 + 3) >= (uint64_t)v174)
    goto LABEL_92;
  v77 = *(_QWORD *)&v175[8 * v78];
  if (v77)
    goto LABEL_38;
  v78 = (uint64_t)(v67 + 4);
  if ((uint64_t)(v67 + 4) >= (uint64_t)v174)
    goto LABEL_92;
  v77 = *(_QWORD *)&v175[8 * v78];
  if (v77)
    goto LABEL_38;
  v79 = v67 + 5;
  if ((uint64_t)(v67 + 5) >= (uint64_t)v174)
    goto LABEL_92;
  v77 = *(_QWORD *)&v175[8 * (_QWORD)v79];
  if (v77)
  {
    v78 = (uint64_t)(v67 + 5);
LABEL_38:
    v191 = (char *)((v77 - 1) & v77);
    v192 = (char *)v78;
    v70 = __clz(__rbit64(v77)) + (v78 << 6);
    goto LABEL_39;
  }
  while (1)
  {
    v78 = (uint64_t)(v79 + 1);
    if (__OFADD__(v79, 1))
      break;
    if (v78 >= (uint64_t)v174)
      goto LABEL_92;
    v77 = *(_QWORD *)&v175[8 * v78];
    ++v79;
    if (v77)
      goto LABEL_38;
  }
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

uint64_t NSKeyedArchiver.encodeEncodable<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v12;
  uint64_t v13[4];

  v7 = v5;
  type metadata accessor for __PlistDictionaryEncoder();
  result = static __PlistDictionaryEncoder.encodeToTopLevelContainer<A>(_:)(a1, a4, a5, v13);
  if (!v6)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    objc_msgSend(v7, sel_encodeObject_forKey_, v12, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

id static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(const char *a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyedUnarchiver.Type);
  v2 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  *(_QWORD *)&v15 = 0;
  v3 = (id)__NSKeyedUnarchiverUnarchiveObject(v2, a1, (uint64_t)&v15);
  swift_unknownObjectRelease();
  v4 = (void *)v15;
  if (v3)
  {
    v5 = (id)v15;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
    v6 = v4;
  }
  outlined init with take of Any?((uint64_t)&v15, (uint64_t)v17);
  if (v4)
  {
    v7 = v4;
    if (objc_msgSend(v7, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Any?);

      return v3;
    }

  }
  outlined init with copy of Any?((uint64_t)v17, (uint64_t)&v15);
  v8 = *((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v9 = __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
    v10 = *(_QWORD *)(v8 - 8);
    v11 = MEMORY[0x1E0C80A78](v9);
    v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v10 + 16))(v13, v11);
    v3 = (id)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    v3 = 0;
  }

  return v3;
}

uint64_t one-time initialization function for __plistClasses()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_182065B80;
  *(_QWORD *)(v0 + 32) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v0 + 40) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  *(_QWORD *)(v0 + 48) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
  *(_QWORD *)(v0 + 56) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDictionary);
  *(_QWORD *)(v0 + 64) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  result = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v0 + 72) = result;
  static NSKeyedUnarchiver.__plistClasses = (_UNKNOWN *)v0;
  return result;
}

uint64_t NSKeyedUnarchiver.decodeDecodable<A>(_:forKey:)@<X0>(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  void *v2;
  const char *ObjCClassFromMetadata;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];

  if (one-time initialization token for __plistClasses != -1)
    swift_once();
  if (*((_QWORD *)static NSKeyedUnarchiver.__plistClasses + 2) == 1)
  {
    ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
    v6 = String._bridgeToObjectiveCImpl()();
    v7 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v6, 0);
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    v8 = _ContiguousArrayBuffer._asCocoaArray()();
    v9 = String._bridgeToObjectiveCImpl()();
    v7 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, v8, v9, 0);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  outlined init with take of Any?((uint64_t)v13, (uint64_t)&v14);
  if (v15)
  {
    outlined init with take of Any(&v14, v16);
    type metadata accessor for PropertyListDecoder();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = MEMORY[0x1E0DEE9E0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    v11 = swift_allocObject();
    *(_DWORD *)(v11 + 16) = 0;
    *(_QWORD *)(inited + 24) = v11;
    PropertyListDecoder.decode<A>(_:fromTopLevel:)(a1, v16, (uint64_t)a1, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_release();
    return (*((uint64_t (**)(uint64_t, _QWORD, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 0, 1, a1);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v14, &demangling cache variable for type metadata for Any?);
    return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 1, 1, a1);
  }
}

void NSKeyedUnarchiver.decodeTopLevelDecodable<A>(_:forKey:)(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  const char *ObjCClassFromMetadata;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t inited;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[32];
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (one-time initialization token for __plistClasses != -1)
    swift_once();
  if (*((_QWORD *)static NSKeyedUnarchiver.__plistClasses + 2) == 1)
  {
    ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
    v7 = String._bridgeToObjectiveCImpl()();
    *(_QWORD *)&v18 = 0;
    v8 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v7, (uint64_t)&v18);
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    v9 = _ContiguousArrayBuffer._asCocoaArray()();
    v10 = String._bridgeToObjectiveCImpl()();
    *(_QWORD *)&v18 = 0;
    v8 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, v9, v10, (uint64_t)&v18);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  v11 = (void *)v18;
  if (v8)
  {
    v12 = (id)v18;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v13 = v11;
  }
  outlined init with take of Any?((uint64_t)&v18, (uint64_t)v20);
  if (v11)
  {
    v14 = v11;
    if (objc_msgSend(v14, sel_code) != (id)4865)
    {
      swift_willThrow();
      outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Any?);

      return;
    }

  }
  outlined init with copy of Any?((uint64_t)v20, (uint64_t)&v18);
  if (*((_QWORD *)&v19 + 1))
  {
    outlined init with take of Any(&v18, &v21);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Any?);

  if (*((_QWORD *)&v22 + 1))
  {
    outlined init with take of Any(&v21, v23);
    type metadata accessor for PropertyListDecoder();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = MEMORY[0x1E0DEE9E0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    v16 = swift_allocObject();
    *(_DWORD *)(v16 + 16) = 0;
    *(_QWORD *)(inited + 24) = v16;
    PropertyListDecoder.decode<A>(_:fromTopLevel:)(a1, v23, (uint64_t)a1, a2);
    if (v3)
    {
      v17 = v3;
      objc_msgSend(v2, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
      swift_unknownObjectRelease();
      swift_willThrow();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      swift_setDeallocating();
      swift_bridgeObjectRelease();
      swift_release();
      (*((void (**)(uint64_t, _QWORD, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 0, 1, a1);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
    (*((void (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a1[-1].Description + 7))(a2, 1, 1, a1);
  }
}

void static NSKeyedUnarchiver.unarchivedArrayOfObjects<A>(ofClass:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18205C850;
  *(_QWORD *)(v5 + 32) = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }
}

NSArray *sub_181AAEB70()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSArray *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v13;
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v13 = v2;
  v14 = v3;
  v15 = BYTE2(v3);
  v16 = BYTE3(v3);
  v17 = BYTE4(v3);
  v18 = BYTE5(v3);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v13, BYTE6(v3));
  v13 = 0;
  v5 = __NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(v1, (uint64_t)v4, (uint64_t)&v13);
  swift_unknownObjectRelease();

  v6 = v13;
  if (!v5)
  {
    v10 = v13;
    if (!v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_10:
    v11 = v6;
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_bridgeObjectRelease();

    return v5;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    -[NSArray copy](v5, sel_copy);
    v8 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v7 = specialized _arrayForceCast<A, B>(_:)(v8);
    swift_bridgeObjectRelease();
  }
  v9 = v6;

  if (v9)
    goto LABEL_10;
  swift_bridgeObjectRelease();
  if (!v7)
    return 0;
  v5 = (NSArray *)specialized _arrayConditionalCast<A, B>(_:)(v7, v0);
  swift_bridgeObjectRelease();
  return v5;
}

void static NSKeyedUnarchiver.unarchivedArrayOfObjects(ofClasses:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }
}

uint64_t sub_181AAEEAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSArray *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v13;
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v13 = v1;
  v14 = v2;
  v15 = BYTE2(v2);
  v16 = BYTE3(v2);
  v17 = BYTE4(v2);
  v18 = BYTE5(v2);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v13, BYTE6(v2));
  v13 = 0;
  v4 = __NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(v0, (uint64_t)v3, (uint64_t)&v13);
  swift_unknownObjectRelease();

  v5 = v13;
  if (!v4)
  {
    v8 = v13;
    v7 = 0;
    if (!v5)
      return v7;
    goto LABEL_10;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v6 = swift_dynamicCastClass();
  if (v6)
  {
    v7 = v6;
  }
  else
  {
    swift_unknownObjectRelease();
    -[NSArray copy](v4, sel_copy);
    v9 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v7 = specialized _arrayForceCast<A, B>(_:)(v9);
    swift_bridgeObjectRelease();
  }
  v10 = v5;

  if (v5)
  {
LABEL_10:
    v11 = v5;
    swift_bridgeObjectRelease();
    swift_willThrow();

  }
  return v7;
}

void static NSKeyedUnarchiver.unarchivedDictionary<A, B>(ofKeyClass:objectClass:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18205C850;
  *(_QWORD *)(v7 + 32) = a1;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18205C850;
  *(_QWORD *)(v8 + 32) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  _ContiguousArrayBuffer._asCocoaArray()();
  swift_bridgeObjectRetain();
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }
}

NSDictionary *sub_181AAF228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  NSDictionary *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  id v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v15 = v3;
  v16 = v0;
  v17 = BYTE2(v0);
  v18 = BYTE3(v0);
  v19 = BYTE4(v0);
  v20 = BYTE5(v0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v15, BYTE6(v0));
  v15 = 0;
  v5 = __NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses(v1, v2, (uint64_t)v4, (uint64_t)&v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v6 = v15;
  if (v5)
  {
    v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v6;

    if (v6)
    {
LABEL_3:
      v9 = v6;
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v5;
    }
  }
  else
  {
    v10 = v15;
    v7 = 0;
    if (v6)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
    return 0;
  v11 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEFCF8]);
  v5 = (NSDictionary *)specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v7, v13, v14, v11);
  swift_bridgeObjectRelease();
  return v5;
}

void static NSKeyedUnarchiver.unarchivedDictionary(keysOfClasses:objectsOfClasses:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  _ContiguousArrayBuffer._asCocoaArray()();
  swift_bridgeObjectRetain();
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }
}

uint64_t sub_181AAF520()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSDictionary *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v11;
  id v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v12 = v2;
  v13 = v3;
  v14 = BYTE2(v3);
  v15 = BYTE3(v3);
  v16 = BYTE4(v3);
  v17 = BYTE5(v3);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v12, BYTE6(v3));
  v12 = 0;
  v5 = __NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses(v0, v1, (uint64_t)v4, (uint64_t)&v12);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v6 = v12;
  if (!v5)
  {
    v11 = v12;
    v7 = 0;
    if (!v6)
      return v7;
    goto LABEL_3;
  }
  v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v6;

  if (v6)
  {
LABEL_3:
    v9 = v6;
    swift_bridgeObjectRelease();
    swift_willThrow();

  }
  return v7;
}

uint64_t String._deletingLastPathComponent()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v3 = String.index(before:)();
  if (String.subscript.getter() != 47 || v4 != 0xE100000000000000)
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      goto LABEL_18;
    if (v3 < 0x4000)
      return 0;
    while (1)
    {
      v3 = String.index(before:)();
      if (String.subscript.getter() == 47 && v7 == 0xE100000000000000)
        break;
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
        goto LABEL_18;
      v10 = 0;
      if (v3 < 0x4000)
        return v10;
    }
  }
  swift_bridgeObjectRelease();
LABEL_18:
  if (v3 >= 0x4000)
  {
    v11 = String.index(before:)() ^ v3;
    v12 = String.subscript.getter();
    if (v11 >> 14)
    {
      v10 = MEMORY[0x186DA4634](v12, v13, v14, v15);
    }
    else
    {
      v16 = v12 >> 14;
      if (v12 >> 14 == v13 >> 14)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return 0;
      }
      v17 = Substring.index(before:)();
      if (Substring.subscript.getter() == 47 && v18 == 0xE100000000000000)
      {
LABEL_27:
        swift_bridgeObjectRelease();
      }
      else
      {
        while (1)
        {
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v19 & 1) != 0)
            break;
          if (v16 == v17 >> 14)
            goto LABEL_22;
          v17 = Substring.index(before:)();
          if (Substring.subscript.getter() == 47 && v20 == 0xE100000000000000)
            goto LABEL_27;
        }
      }
      swift_bridgeObjectRelease();
      v22 = String.subscript.getter();
      v10 = MEMORY[0x186DA4634](v22);
    }
    swift_bridgeObjectRelease();
    return v10;
  }
  return 47;
}

uint64_t String._appendingPathComponent(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String_optional v20;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v23;
  unint64_t v24;
  Swift::String_optional v25;

  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    if ((a4 & 0x2000000000000000) != 0)
      v9 = HIBYTE(a4) & 0xF;
    else
      v9 = a3 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    if (!v9)
      goto LABEL_24;
    if (String.count.getter() == 1)
    {
      swift_bridgeObjectRetain();
      v10 = specialized Collection.first.getter(a3, a4);
      v12 = v11;
      result = swift_bridgeObjectRelease();
      if (!v12)
      {
        __break(1u);
        return result;
      }
      if (v10 == 47 && v12 == 0xE100000000000000)
        goto LABEL_12;
    }
    else
    {
      if (String.count.getter() != 2)
        goto LABEL_23;
      if (String.subscript.getter() == 92 && v14 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
          goto LABEL_23;
      }
      String.index(after:)();
      if (String.subscript.getter() == 92 && v16 == 0xE100000000000000)
      {
LABEL_12:
        swift_bridgeObjectRelease();
LABEL_24:
        swift_bridgeObjectRetain();
        v19._countAndFlagsBits = a1;
        v19._object = (void *)a2;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_24;
LABEL_23:
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = 47;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
LABEL_25:
  swift_bridgeObjectRetain_n();
  v20 = String.Iterator.next()();
  if (v20.value._object)
  {
    countAndFlagsBits = v20.value._countAndFlagsBits;
    object = v20.value._object;
    do
    {
      if (countAndFlagsBits == 47 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v23 = 47;
        v24 = 0xE100000000000000;
      }
      else
      {
        v23 = countAndFlagsBits;
        v24 = (unint64_t)object;
      }
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
      v25 = String.Iterator.next()();
      countAndFlagsBits = v25.value._countAndFlagsBits;
      object = v25.value._object;
    }
    while (v25.value._object);
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t String.lastPathComponent.getter(uint64_t a1, unint64_t a2)
{
  unint64_t Path;

  swift_bridgeObjectRetain();
  Path = String._lastPathComponent.getter(a1, a2);
  swift_bridgeObjectRelease();
  return Path;
}

unint64_t String._lastPathComponent.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v2 = a1;
  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    goto LABEL_17;
  v4 = String.index(before:)();
  if (String.subscript.getter() != 47 || v5 != 0xE100000000000000)
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      goto LABEL_19;
    while (v4 >= 0x4000)
    {
      v4 = String.index(before:)();
      if (String.subscript.getter() == 47 && v8 == 0xE100000000000000)
        goto LABEL_18;
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
        goto LABEL_19;
    }
LABEL_17:
    swift_bridgeObjectRetain();
    return v2;
  }
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  v11 = 4 * v3;
  if (!(v4 >> 14))
  {
    if (String.count.getter() == 1)
      return 47;
    if (v11 >= (unint64_t)String.index(after:)() >> 14)
    {
LABEL_29:
      v16 = String.subscript.getter();
      v2 = MEMORY[0x186DA4634](v16);
LABEL_30:
      swift_bridgeObjectRelease();
      return v2;
    }
    __break(1u);
  }
  if ((String.index(before:)() ^ v4) >> 14)
  {
    if (v11 >= (unint64_t)String.index(after:)() >> 14)
      goto LABEL_29;
    __break(1u);
    return 47;
  }
  v12 = (unint64_t)String.subscript.getter() >> 14;
  if (v12 == v13 >> 14)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return 47;
  }
  v14 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v15 == 0xE100000000000000)
    goto LABEL_35;
LABEL_36:
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    while (v12 != v14 >> 14)
    {
      v14 = Substring.index(before:)();
      if (Substring.subscript.getter() != 47 || v19 != 0xE100000000000000)
        goto LABEL_36;
LABEL_35:
      swift_bridgeObjectRelease();
    }
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  v21 = (unint64_t)String.subscript.getter() >> 14;
  if (v21 == v22 >> 14)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
LABEL_58:
    v28 = String.subscript.getter();
    v30 = v29;
    v32 = v31;
    v34 = v33;
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x186DA4634](v28, v30, v32, v34);
    goto LABEL_30;
  }
  v23 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v24 == 0xE100000000000000)
  {
LABEL_47:
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = v21;
    while (1)
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
        break;
      if (v35 == v23 >> 14)
        goto LABEL_44;
      v23 = Substring.index(before:)();
      if (Substring.subscript.getter() == 47 && v26 == 0xE100000000000000)
        goto LABEL_47;
    }
  }
  swift_bridgeObjectRelease();
  result = String.index(after:)();
  if (v14 >> 14 >= result >> 14)
  {
    swift_bridgeObjectRetain();
    String.index(after:)();
    goto LABEL_58;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in String._lastPathComponent.getter(_QWORD *a1)
{
  if (*a1 == 47 && a1[1] == 0xE100000000000000)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t one-time initialization function for invalidExtensionScalars()
{
  uint64_t result;
  int v1;
  uint64_t v2;

  v2 = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v1, 0x20uLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2FuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x61CuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x200EuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x200FuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202AuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202BuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202CuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202DuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x202EuLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2066uLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2067uLL);
  specialized Set._Variant.insert(_:)(&v1, 0x2068uLL);
  result = specialized Set._Variant.insert(_:)(&v1, 0x2069uLL);
  static String.invalidExtensionScalars = v2;
  return result;
}

uint64_t String.pathExtension.getter(uint64_t a1, unint64_t a2)
{
  unint64_t Path;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[5];
  char v29;

  swift_bridgeObjectRetain();
  Path = String._lastPathComponent.getter(a1, a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((specialized BidirectionalCollection.last.getter(Path, v6) & 0x1FF) == 0x2E
    || (v7 = specialized Sequence<>.starts<A>(with:)((unint64_t)&outlined read-only object #0 of String.pathExtension.getter, Path, v6), (v7 & 1) != 0)|| (v29 = 46, MEMORY[0x1E0C80A78](v7), v28[2] = &v29, v10 = specialized BidirectionalCollection.lastIndex(where:)((unint64_t)closure #1 in BidirectionalCollection<>.lastIndex(of:)specialized partial apply, (uint64_t)v28, Path, v6), (v11 & 1) != 0)|| (v12 = v10, v10 < 0x4000))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v13 = String._lastPathComponent.getter(a1, a2);
  v15 = v14;
  result = swift_bridgeObjectRelease();
  v16 = (Path >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0)
    LOBYTE(v16) = 1;
  if ((v12 & 0xC) == 4 << v16)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, Path, v6);
    v12 = result;
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((v6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    v17 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_12;
  }
  v27 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v27 = Path & 0xFFFFFFFFFFFFLL;
  if (v27 > v12 >> 16)
  {
    v17 = String.UTF8View._foreignIndex(after:)();
LABEL_12:
    v18 = specialized Collection.suffix(from:)(v17, v13, v15);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x186DA4634](v18, v20, v22, v24);
    v26 = v25;
    swift_bridgeObjectRelease();
    LOBYTE(v20) = specialized String.validatePathExtension(_:)(v8, v26);
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      return v8;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t String._removingDotSegments.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v5 = (a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0)
      LOBYTE(v5) = 1;
    v6 = 4 << v5;
    swift_bridgeObjectRetain();
    v7 = 15;
    v8 = 15;
    if (v6 == 12)
      v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(0xFuLL, a1, a2);
    if (v8 >> 16 >= v2)
    {
      __break(1u);
      goto LABEL_25;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      String.UTF8View._foreignSubscript(position:)();
      if (v6 == 12)
        goto LABEL_15;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      if (v6 == 12)
        goto LABEL_15;
    }
    else
    {
      if ((a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      if (v6 == 12)
      {
LABEL_15:
        v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(0xFuLL, a1, a2);
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_20;
LABEL_16:
        if (v2 > v7 >> 16)
        {
          String.UTF8View._foreignIndex(after:)();
          goto LABEL_20;
        }
LABEL_25:
        __break(1u);
        JUMPOUT(0x181AB1154);
      }
    }
    if ((a2 & 0x1000000000000000) == 0)
LABEL_20:
      __asm { BR              X9 }
    goto LABEL_16;
  }
  return 0;
}

unint64_t static String.homeDirectoryPath(forUser:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  passwd *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uid_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  if (issetugid() || !getenv("CFFIXED_USER_HOME"))
  {
    if (a2)
    {
      v3 = String.utf8CString.getter();
      v4 = getpwnam((const char *)(v3 + 32));
      swift_release();
      if (!v4)
        goto LABEL_16;
    }
    else
    {
      v10 = specialized static Platform.getUGIDs(allowEffectiveRootUID:)(0);
      v4 = getpwuid(v10);
      if (!v4)
        goto LABEL_16;
    }
    if (v4->pw_dir)
    {
      v5 = String.init(cString:)();
      v7 = v11;
      swift_bridgeObjectRetain();
      v12 = specialized Collection.first.getter(v5, v7);
      if (!v13)
        goto LABEL_45;
      if (v12 == 126 && v13 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
          goto LABEL_45;
      }
      v19 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v5, v7);
      if ((v20 & 1) != 0)
      {
        v25 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0)
          v25 = v5;
        v26 = v25 << 16;
        if ((v7 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0)
          v21 = v26 | 7;
        else
          v21 = v26 | 0xB;
      }
      else
      {
        v21 = v19;
      }
      v29 = String.index(after:)();
      if (v21 >> 14 == v29 >> 14)
        goto LABEL_57;
      if (v21 >> 14 >= v29 >> 14)
        goto LABEL_60;
      __break(1u);
      goto LABEL_42;
    }
LABEL_16:
    v14 = 0x706D652F7261762FLL;
    if (a2 || !getenv("HOME"))
      return v14;
    v5 = String.init(cString:)();
    v7 = v15;
    swift_bridgeObjectRetain();
    v16 = specialized Collection.first.getter(v5, v7);
    if (!v17)
      goto LABEL_45;
    if (v16 == 126 && v17 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
LABEL_42:
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
      goto LABEL_45;
LABEL_43:
    v31 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v5, v7);
    if ((v32 & 1) == 0)
    {
      v21 = v31;
LABEL_56:
      result = String.index(after:)();
      if (v21 >> 14 == result >> 14)
      {
LABEL_57:
        v38 = 0;
        v39 = 0;
LABEL_61:
        v42 = static String.homeDirectoryPath(forUser:)(v38, v39);
        v44 = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        specialized Collection.suffix(from:)(v21, v5, v7);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        swift_bridgeObjectRetain();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v42;
        v33 = v44;
        goto LABEL_62;
      }
      if (v21 >> 14 < result >> 14)
      {
        __break(1u);
        return result;
      }
LABEL_60:
      v40 = String.subscript.getter();
      v38 = MEMORY[0x186DA4634](v40);
      v39 = v41;
      swift_bridgeObjectRelease();
      goto LABEL_61;
    }
LABEL_50:
    v35 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v35 = v5;
    v36 = v35 << 16;
    if ((v7 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0)
      v21 = v36 | 7;
    else
      v21 = v36 | 0xB;
    goto LABEL_56;
  }
  v5 = String.init(cString:)();
  v7 = v6;
  swift_bridgeObjectRetain();
  v8 = specialized Collection.first.getter(v5, v7);
  if (v9)
  {
    if (v8 == 126 && v9 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      v23 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v5, v7);
      if ((v24 & 1) != 0)
      {
        v27 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0)
          v27 = v5;
        v28 = v27 << 16;
        if ((v7 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0)
          v21 = v28 | 7;
        else
          v21 = v28 | 0xB;
      }
      else
      {
        v21 = v23;
      }
      v34 = String.index(after:)();
      if (v21 >> 14 == v34 >> 14)
        goto LABEL_57;
      if (v21 >> 14 >= v34 >> 14)
        goto LABEL_60;
      __break(1u);
      goto LABEL_50;
    }
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_26;
  }
LABEL_45:
  v33 = v7;
LABEL_62:
  v14 = String._standardizingPath.getter(v5, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t static String.temporaryDirectoryPath.getter()
{
  uint64_t isStackAllocationSafe;
  size_t v1;
  char *v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  isStackAllocationSafe = confstr(65537, 0, 0);
  if (isStackAllocationSafe >= 1)
  {
    v1 = isStackAllocationSafe;
    if ((unint64_t)isStackAllocationSafe <= 0x400
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      confstr(65537, (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
    }
    else
    {
      v2 = (char *)swift_slowAlloc();
      confstr(65537, v2, v1);
      MEMORY[0x186DA9E78](v2, -1, -1);
    }
  }
  v3 = 0x2F706D742FLL;
  if (!issetugid())
  {
    if (getenv("TMPDIR"))
    {
      v3 = String.init(cString:)();
      v6 = v5;
      if ((specialized BidirectionalCollection.last.getter(v3, v5) & 0x1FF) != 0x2F)
      {
        v9 = v3;
        v10 = v6;
        swift_bridgeObjectRetain();
        v7._countAndFlagsBits = 47;
        v7._object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        return v9;
      }
    }
  }
  return v3;
}

unint64_t closure #1 in String._transmutingCompressingSlashes()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t result;
  unint64_t v15;
  char v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if ((a4 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a4) & 0xF;
  else
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  v5 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if (!v4)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = 4 * v4;
  v11 = 4 << v5;
  v29 = a4 & 0xFFFFFFFFFFFFFFLL;
  v26 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v12 = 15;
LABEL_9:
  v13 = v12 & 0xC;
  result = v12;
  if (v13 == v11)
  {
    v17 = v8;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    v8 = v17;
  }
  v15 = result >> 16;
  if (result >> 16 >= v4)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    v18 = v8;
    result = String.UTF8View._foreignSubscript(position:)();
    v8 = v18;
    v16 = result;
    if (v13 == v11)
      goto LABEL_23;
LABEL_19:
    if ((a4 & 0x1000000000000000) == 0)
      goto LABEL_20;
LABEL_24:
    if (v4 <= v12 >> 16)
      goto LABEL_52;
    v20 = v8;
    result = String.UTF8View._foreignIndex(after:)();
    v12 = result;
    if (!v20)
      goto LABEL_26;
    while (1)
    {
      while (1)
      {
LABEL_29:
        if (v16 != 47)
        {
          *(_BYTE *)(a1 + v9) = v16;
          v21 = __OFADD__(v9++, 1);
          if (v21)
            goto LABEL_54;
          v8 = 0;
LABEL_8:
          if (v10 == v12 >> 14)
            return v9;
          goto LABEL_9;
        }
        if (v10 == v12 >> 14)
          return v9;
        v22 = v12 & 0xC;
        result = v12;
        if (v22 == v11)
          result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
        v23 = result >> 16;
        if (result >> 16 >= v4)
          goto LABEL_51;
        if ((a4 & 0x1000000000000000) == 0)
          break;
        result = String.UTF8View._foreignSubscript(position:)();
        v16 = result;
        if (v22 == v11)
          goto LABEL_45;
LABEL_41:
        if ((a4 & 0x1000000000000000) != 0)
          goto LABEL_42;
LABEL_28:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      if ((a4 & 0x2000000000000000) != 0)
      {
        v27 = a3;
        v28 = v29;
        v16 = *((_BYTE *)&v27 + v23);
        if (v22 == v11)
          goto LABEL_45;
        goto LABEL_41;
      }
      result = v26;
      if ((a3 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v16 = *(_BYTE *)(result + v23);
      if (v22 != v11)
        goto LABEL_41;
LABEL_45:
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
      v12 = result;
      if ((a4 & 0x1000000000000000) == 0)
        goto LABEL_28;
LABEL_42:
      if (v4 <= v12 >> 16)
        goto LABEL_52;
      result = String.UTF8View._foreignIndex(after:)();
      v12 = result;
    }
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v27 = a3;
    v28 = v29;
    v16 = *((_BYTE *)&v27 + v15);
    if (v13 == v11)
      goto LABEL_23;
    goto LABEL_19;
  }
  result = v26;
  if ((a3 & 0x1000000000000000) == 0)
  {
    v24 = v8;
    result = _StringObject.sharedUTF8.getter();
    v8 = v24;
  }
  v16 = *(_BYTE *)(result + v15);
  if (v13 != v11)
    goto LABEL_19;
LABEL_23:
  v19 = v8;
  result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
  v8 = v19;
  v12 = result;
  if ((a4 & 0x1000000000000000) != 0)
    goto LABEL_24;
LABEL_20:
  v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
  if (v8)
    goto LABEL_29;
LABEL_26:
  *(_BYTE *)(a1 + v9) = v16;
  v21 = __OFADD__(v9++, 1);
  if (!v21)
  {
    v8 = v16 == 47;
    goto LABEL_8;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t String._droppingTrailingSlashes.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v7;
  unint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1;
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = String.index(before:)();
    if (String.subscript.getter() == 47 && v5 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
LABEL_21:
        swift_bridgeObjectRetain();
        String.index(after:)();
        v12 = String.subscript.getter();
        v14 = v13;
        v16 = v15;
        v18 = v17;
        swift_bridgeObjectRelease();
        v2 = MEMORY[0x186DA4634](v12, v14, v16, v18);
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    if (v4 >= 0x4000)
    {
      do
      {
        v8 = String.index(before:)();
        if (String.subscript.getter() == 47 && v9 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v11 & 1) == 0)
            goto LABEL_21;
        }
      }
      while (v8 >= 0x4000);
      return 47;
    }
    else
    {
      return 47;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v2;
}

uint64_t String._standardizingPath.getter(Swift::Int a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  char v31;
  Swift::String v32;
  char v33;
  Swift::String v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v49;
  char v50;
  id v51;
  unsigned int v52;

  v2 = a2;
  v3 = a1;
  if ((a2 & 0x1000000000000000) != 0)
  {
    if (String.UTF8View._foreignCount()() > 1)
    {
      a1 = String.UTF8View._foreignCount()();
LABEL_5:
      MEMORY[0x1E0C80A78](a1);
      swift_bridgeObjectRetain();
      v3 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
      v6 = v5;
      swift_bridgeObjectRelease();
      v2 = v6;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = HIBYTE(a2) & 0xE;
    if ((a2 & 0x2000000000000000) == 0)
      v4 = a1 & 0xFFFFFFFFFFFELL;
    if (v4)
      goto LABEL_5;
  }
  swift_bridgeObjectRetain();
LABEL_9:
  v7 = String._droppingTrailingSlashes.getter(v3, v2);
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v10 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v11 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v7, v9);
    v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      v14 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v14 = v7;
      v15 = v14 << 16;
      if ((v9 & 0x1000000000000000) == 0 || (v7 & 0x800000000000000) != 0)
        v11 = v15 | 7;
      else
        v11 = v15 | 0xB;
    }
  }
  else
  {
    v11 = 15;
  }
  swift_bridgeObjectRetain();
  v16 = specialized Collection.suffix(from:)(v11, v7, v9);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_bridgeObjectRelease();
  LOBYTE(v16) = specialized StringProtocol._hasDotDotComponent()(v16, v18, v20, v22);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
    goto LABEL_24;
  v23 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v23 = v7 & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    swift_bridgeObjectRetain();
    v24 = specialized String.withFileSystemRepresentation<A>(_:)(v7, v9, v7, v9);
    v26 = v25;
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_bridgeObjectRelease();
      v7 = v24;
      v9 = v26;
    }
  }
  else
  {
LABEL_24:
    swift_bridgeObjectRelease();
  }
  v27 = String._removingDotSegments.getter(v7, v9);
  v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = 47;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
    goto LABEL_28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 47;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v33 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
    goto LABEL_28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v34._countAndFlagsBits = 47;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35 = specialized Sequence<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
  {
LABEL_28:
    v36 = String.count.getter();
    swift_bridgeObjectRelease();
    v37 = specialized Collection.dropFirst(_:)(v36, v27, v29);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x186DA4634](v37, v39, v41, v43);
    v46 = v45;
    swift_bridgeObjectRelease();
    v47 = 0;
    while (v44 != *(_QWORD *)((char *)&outlined read-only object #0 of String._standardizingPath.getter + v47 + 32)
         || v46 != *(_QWORD *)((char *)&outlined read-only object #0 of String._standardizingPath.getter + v47 + 40))
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      swift_bridgeObjectRetain_n();
      v49._countAndFlagsBits = 47;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      v50 = specialized Sequence<>.starts<A>(with:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
        break;
      v47 += 16;
      if (v47 == 192)
      {
        v51 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
        v52 = objc_msgSend(v51, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

        swift_unknownObjectRelease();
        if (v52)
          v27 = v44;
        break;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t specialized StringProtocol._hasDotDotComponent()(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if ((uint64_t)specialized Collection.count.getter(a1, a2, a3, a4) >= 2 && a2 >> 14 != a1 >> 14)
  {
    v9 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v9) = 1;
    v10 = 4 << v9;
    v11 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v11 = a3 & 0xFFFFFFFFFFFFLL;
    v13 = v11;
    swift_bridgeObjectRetain();
    v12 = a1;
    Substring.UTF8View.subscript.getter();
    if ((a1 & 0xC) == v10)
    {
      v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
      if ((a4 & 0x1000000000000000) == 0)
        goto LABEL_14;
    }
    else if ((a4 & 0x1000000000000000) == 0)
    {
      goto LABEL_14;
    }
    if (v13 <= v12 >> 16)
    {
      __break(1u);
      JUMPOUT(0x181AB23E4);
    }
    String.UTF8View._foreignIndex(after:)();
LABEL_14:
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t static String._resolvingSymlinksInPathUsingFullPathAttribute(_:)(const char *a1)
{
  int v2;
  uint64_t result;
  _BYTE v4[8];
  int v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  v6[1] = 0;
  v6[2] = 0;
  v6[0] = 0x800000000000005;
  bzero(v4, 0x40CuLL);
  v2 = getattrlist(a1, v6, v4, 0x40CuLL, 0);
  result = 0;
  if (!v2)
  {
    if (v5)
      return String.init(cString:)();
  }
  return result;
}

uint64_t closure #1 in String._resolvingSymlinksInPath()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, size_t *a4@<X8>)
{
  void *v4;
  char *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t isStackAllocationSafe;
  char *v14;
  char v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!result)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  v8 = (char *)result;
  if ((specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(a2, a3) & 0x1FF) == 0x7E)
  {
    swift_bridgeObjectRetain();
    v9 = static String._resolvingSymlinksInPathUsingFullPathAttribute(_:)(v8);
    if (v10)
    {
      v11 = v9;
      v12 = v10;
      result = swift_bridgeObjectRelease();
      *a4 = v11;
      a4[1] = v12;
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    v14 = (char *)&v16;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    closure #1 in closure #1 in String._resolvingSymlinksInPath()(&v15, v8, 0x402uLL, (size_t *)&v16);
    if (!v4)
    {
      result = swift_bridgeObjectRelease();
      *(_OWORD *)a4 = v16;
      return result;
    }
    swift_willThrow();

    __break(1u);
  }
  else
  {
    v14 = (char *)swift_slowAlloc();
    closure #1 in closure #1 in String._resolvingSymlinksInPath()(v14, v8, 0x402uLL, a4);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x186DA9E78](v14, -1, -1);
    }
  }

  result = MEMORY[0x186DA9E78](v14, -1, -1);
  __break(1u);
  return result;
}

size_t closure #1 in closure #1 in String._resolvingSymlinksInPath()@<X0>(char *__dst@<X0>, char *__source@<X2>, size_t a3@<X1>, size_t *a4@<X8>)
{
  void *v4;
  size_t v9;
  uint64_t isStackAllocationSafe;
  char *v11;
  size_t result;
  char v13;
  uint64_t v14;
  size_t v15;
  size_t v16[3];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!__dst)
LABEL_14:
    __break(1u);
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a3)
    bzero(__dst, a3);
  v9 = strlcpy(__dst, __source, 0x402uLL);
  if (__OFADD__(v9, 1))
    goto LABEL_13;
  v15 = v9 + 1;
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    v11 = (char *)&v14;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    result = closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()(&v13, __dst, 0x402uLL, a3, &v15, v16);
    if (!v4)
    {
      *(_OWORD *)a4 = *(_OWORD *)v16;
      return result;
    }
    swift_willThrow();

    __break(1u);
    goto LABEL_16;
  }
  v11 = (char *)swift_slowAlloc();
  closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()(v11, __dst, 0x402uLL, a3, &v15, a4);
  a4 = (size_t *)v4;
  if (v4)
  {
LABEL_16:

    result = MEMORY[0x186DA9E78](v11, -1, -1);
    __break(1u);
    return result;
  }
  return MEMORY[0x186DA9E78](v11, -1, -1);
}

size_t closure #1 in closure #1 in closure #1 in String._resolvingSymlinksInPath()@<X0>(char *a1@<X0>, char *a2@<X2>, size_t a3@<X1>, uint64_t a4@<X3>, _QWORD *a5@<X4>, size_t *a6@<X8>)
{
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  size_t result;
  char *v19;
  int st_mode;
  int v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  size_t v36;
  size_t *v37;
  _QWORD *v38;
  char *v40;
  stat v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((a3 & 0x8000000000000000) != 0)
      goto LABEL_64;
    if (a3)
      bzero(a1, a3);
  }
  v37 = a6;
  if (!a2)
LABEL_66:
    __break(1u);
  v10 = 0;
  v11 = a2;
  v12 = a2;
  v38 = a5;
  while (1)
  {
    while (1)
    {
      v13 = *v11;
      if (v13 == 47)
      {
        v12 = v11;
        do
        {
          v14 = *++v12;
          v13 = v14;
        }
        while (v14 == 47);
      }
      if (v13)
      {
        do
        {
          v16 = *++v12;
          v15 = v16;
        }
        while (v16 != 47 && v15 != 0);
      }
      else
      {
        v15 = 0;
      }
      *v12 = 0;
      memset(&v41, 0, 28);
      memset(&v41.st_atimespec, 0, 112);
      result = lstat(a2, &v41);
      if ((result & 0x80000000) != 0)
      {
LABEL_53:
        *v37 = 0;
        v37[1] = 0;
        return result;
      }
      v19 = a2;
      st_mode = v41.st_mode;
      v21 = S_IFMT.getter() & st_mode;
      result = S_IFLNK.getter();
      if (v21 == (unsigned __int16)result)
        break;
      *v12 = v15;
      a2 = v19;
      if (!v15)
        goto LABEL_54;
LABEL_34:
      v11 = v12;
    }
    if (v10 >= 33)
      goto LABEL_53;
    v40 = v11;
    if (!a1)
      goto LABEL_65;
    v22 = v10;
    a2 = v19;
    result = readlink(v19, a1, 0x401uLL);
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_53;
    v23 = result;
    v24 = &a1[result];
    a1[result] = 0;
    *v12 = v15;
    if (!result)
      break;
    if (*a1 == 47)
    {
      v25 = 0;
    }
    else
    {
      v25 = v40 - v19 + 1;
      if (__OFADD__(v40 - v19, 1))
        goto LABEL_63;
    }
    v26 = v12 - v19;
    v27 = *a5;
    v28 = *a5 - (v12 - v19);
    if (__OFSUB__(*a5, v12 - v19))
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    v29 = v25 + result;
    if (__OFADD__(v25, result))
      goto LABEL_56;
    if (__OFADD__(v29, v28))
      goto LABEL_57;
    if (v29 + v28 >= 1027)
      goto LABEL_53;
    v30 = __OFADD__(v26, v28);
    v31 = v26 + v28;
    if (v30)
      goto LABEL_58;
    if (v27 < v26)
      goto LABEL_59;
    if (a4 < v29)
      goto LABEL_59;
    v32 = v31 - v26;
    if (v31 < v26)
      goto LABEL_59;
    if (a4 - v29 < v32)
      goto LABEL_60;
    if (v29 != v26 || v29 >= v31)
    {
      v33 = &a1[result];
      memmove(&v19[v29], &v19[v26], v31 - v26);
      v24 = v33;
    }
    v30 = __OFADD__(v29, v32);
    v34 = v29 + v32;
    if (v30)
      goto LABEL_61;
    if (v29 < v25)
      goto LABEL_62;
    v35 = &v19[v25];
    if (&v19[v25] != a1 || v35 >= v24)
      memmove(v35, a1, v23);
    v10 = v22 + 1;
    a5 = v38;
    *v38 = v34;
    a2 = v19;
    if (*a1 == 47)
      v12 = v19;
    else
      v12 = v40;
    v11 = v12;
  }
  v10 = v22;
  if (v15)
    goto LABEL_34;
LABEL_54:
  result = String.init(cString:)();
  *v37 = result;
  v37[1] = v36;
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t partial apply for closure #1 in String._transmutingCompressingSlashes()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in String._transmutingCompressingSlashes()(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t specialized String.validatePathExtension(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  Swift::UInt32 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t j;
  uint64_t v50;
  Swift::UInt32 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[5];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = specialized BidirectionalCollection.last.getter(a1, a2);
  if ((v4 & 0x1FF) == 0x2E)
    return 0;
  LOBYTE(v64) = 46;
  MEMORY[0x1E0C80A78](v4);
  v60[2] = &v64;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)((unint64_t)partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v60, a1, a2);
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
      v33 = HIBYTE(a2) & 0xF;
    else
      v33 = a1 & 0xFFFFFFFFFFFFLL;
    if (!v33)
      return 1;
    v62 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v63 = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    for (i = 0; i < v33; i += v38)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v36 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        v38 = v37;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v64 = a1;
          v65 = v63;
          v36 = *((unsigned __int8 *)&v64 + i);
          if (*((char *)&v64 + i) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v35 = v62;
          if ((a1 & 0x1000000000000000) == 0)
            v35 = _StringObject.sharedUTF8.getter();
          v36 = *(unsigned __int8 *)(v35 + i);
          if (*(char *)(v35 + i) < 0)
            __asm { BR              X9 }
        }
        v38 = 1;
      }
      if (one-time initialization token for invalidExtensionScalars != -1)
        swift_once();
      v39 = static String.invalidExtensionScalars;
      if (*(_QWORD *)(static String.invalidExtensionScalars + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v36);
        v40 = Hasher._finalize()();
        v41 = -1 << *(_BYTE *)(v39 + 32);
        v42 = v40 & ~v41;
        v43 = v39 + 56;
        if (((*(_QWORD *)(v39 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
        {
          v44 = *(_QWORD *)(v39 + 48);
          if (*(_DWORD *)(v44 + 4 * v42) == v36)
            goto LABEL_48;
          v45 = ~v41;
          v46 = (v42 + 1) & v45;
          if (((*(_QWORD *)(v43 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
          {
            if (*(_DWORD *)(v44 + 4 * v46) == v36)
            {
LABEL_48:
              v5 = 0;
              goto LABEL_51;
            }
            while (1)
            {
              v46 = (v46 + 1) & v45;
              if (((*(_QWORD *)(v43 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) == 0)
                break;
              if (*(_DWORD *)(v44 + 4 * v46) == v36)
                goto LABEL_48;
            }
          }
        }
      }
    }
    v5 = 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = String.subscript.getter();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease();
    v64 = v8;
    v65 = v10;
    v66 = v12;
    v67 = v14;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    v15 = String.init<A>(_:)();
    v17 = v16;
    v18 = String.index(after:)();
    swift_bridgeObjectRetain();
    v19 = specialized Collection.suffix(from:)(v18, a1, a2);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    swift_bridgeObjectRelease();
    v64 = v19;
    v65 = v21;
    v66 = v23;
    v67 = v25;
    v63 = String.init<A>(_:)();
    v27 = v26;
    if ((v17 & 0x2000000000000000) != 0)
      v28 = HIBYTE(v17) & 0xF;
    else
      v28 = v15 & 0xFFFFFFFFFFFFLL;
    if (v28)
    {
      v29 = 0;
      while (1)
      {
        if ((v17 & 0x1000000000000000) != 0)
        {
          v31 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v17 & 0x2000000000000000) != 0)
          {
            v64 = v15;
            v65 = v17 & 0xFFFFFFFFFFFFFFLL;
            v31 = *((unsigned __int8 *)&v64 + v29);
            if (*((char *)&v64 + v29) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v30 = (v17 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v15 & 0x1000000000000000) == 0)
              v30 = _StringObject.sharedUTF8.getter();
            v31 = *(unsigned __int8 *)(v30 + v29);
            if (*(char *)(v30 + v29) < 0)
              __asm { BR              X10 }
          }
          v32 = 1;
        }
        if (v31 == 47)
          break;
        v29 += v32;
        if (v29 >= v28)
          goto LABEL_53;
      }
      v5 = 0;
    }
    else
    {
LABEL_53:
      if ((v27 & 0x2000000000000000) != 0)
        v48 = HIBYTE(v27) & 0xF;
      else
        v48 = v63 & 0xFFFFFFFFFFFFLL;
      if (v48)
      {
        v61 = (v27 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v62 = v27 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        for (j = 0; j < v48; j += v53)
        {
          if ((v27 & 0x1000000000000000) != 0)
          {
            v51 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            v53 = v52;
          }
          else
          {
            if ((v27 & 0x2000000000000000) != 0)
            {
              v64 = v63;
              v65 = v62;
              v51 = *((unsigned __int8 *)&v64 + j);
              if (*((char *)&v64 + j) < 0)
                __asm { BR              X9 }
            }
            else
            {
              v50 = v61;
              if ((v63 & 0x1000000000000000) == 0)
                v50 = _StringObject.sharedUTF8.getter();
              v51 = *(unsigned __int8 *)(v50 + j);
              if (*(char *)(v50 + j) < 0)
                __asm { BR              X9 }
            }
            v53 = 1;
          }
          if (one-time initialization token for invalidExtensionScalars != -1)
            swift_once();
          v54 = static String.invalidExtensionScalars;
          if (*(_QWORD *)(static String.invalidExtensionScalars + 16))
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v51);
            v55 = Hasher._finalize()();
            v56 = -1 << *(_BYTE *)(v54 + 32);
            v57 = v55 & ~v56;
            if (((*(_QWORD *)(v54 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) != 0)
            {
              v58 = *(_QWORD *)(v54 + 48);
              if (*(_DWORD *)(v58 + 4 * v57) == v51)
              {
LABEL_78:
                v5 = 0;
                goto LABEL_79;
              }
              v59 = ~v56;
              while (1)
              {
                v57 = (v57 + 1) & v59;
                if (((*(_QWORD *)(v54 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
                  break;
                if (*(_DWORD *)(v58 + 4 * v57) == v51)
                  goto LABEL_78;
              }
            }
          }
        }
        v5 = 1;
LABEL_79:
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = 1;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_51:
  swift_bridgeObjectRelease();
  return v5;
}

BOOL partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys(a1, *(unsigned __int8 **)(v1 + 16));
}

BOOL closure #1 in BidirectionalCollection<>.lastIndex(of:)specialized partial apply(unsigned __int8 *a1)
{
  return partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1);
}

uint64_t BPlistMap.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  result = *(_QWORD *)(v1 + 32);
  if (!result)
    goto LABEL_4;
  if (result == *(_QWORD *)(v1 + 16))
  {
    MEMORY[0x186DA9E78]();
LABEL_4:
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 40));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_deallocClassInstance();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BPlistMap()
{
  return objc_opt_self();
}

uint64_t BPlistMap.loadValue(at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  __int128 *v11;
  __int128 v12;

  v4 = v1[8];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 40));
  v5 = v1[7];
  if (specialized Array.count.getter(v5) <= a1)
  {
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    v12 = xmmword_18206B440;
LABEL_9:
    *v11 = v12;
    goto LABEL_10;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a1, 1, v5);
  v6 = *(_QWORD *)(v5 + 8 * a1 + 32);
  if (v6 < 0)
  {
    lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
    swift_allocError();
    v12 = xmmword_18206B460;
    goto LABEL_9;
  }
  if (*(_QWORD *)(v4 + 24) - v6 < 1)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = v1[5];
  v8 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, *(_QWORD *)(v4 + 16) + v6);
  if (v7 < 0)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x181AB4784);
  }
  v9 = specialized BPlistTypeMarker.init(_:)(v8);
  if (v9 != 13)
    __asm { BR              X10 }
  lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
  swift_allocError();
  *v10 = 0;
  v10[1] = 0;
LABEL_10:
  swift_willThrow();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 40));
  swift_release();
  return v2;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.ArrayIterator : PlistArrayIterator in BPlistMap()
{
  return &protocol witness table for BPlistMap.ArrayIterator;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.DictionaryIterator : PlistDictionaryIterator in BPlistMap()
{
  return &protocol witness table for BPlistMap.DictionaryIterator;
}

void protocol witness for PlistArrayIterator.next() in conformance BPlistMap.ArrayIterator(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    v4 = 0;
LABEL_5:
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = v2 == v3;
    return;
  }
  if (v2 < v3)
  {
    v4 = *(_QWORD *)(*v1 + 8 * v2 + 32);
    v1[1] = v2 + 1;
    goto LABEL_5;
  }
  __break(1u);
}

void protocol witness for static PlistDecodingMap.nullValue.getter in conformance BPlistMap(_QWORD *a1@<X8>)
{
  *a1 = 0x9000000000000008;
}

uint64_t protocol witness for PlistDecodingMap.topObject.getter in conformance BPlistMap@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = BPlistMap.loadValue(at:)(*(_QWORD *)(v1 + 48));
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for PlistDecodingMap.value(from:) in conformance BPlistMap@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = BPlistMap.loadValue(at:)(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t BPlistMap.Value.dataValue<A>(in:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[12];

  v36 = a6;
  v38 = a2;
  v39[11] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v35 - v17;
  if (v18 >> 60 == 4)
  {
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(a1 + 64);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    v24 = *(_QWORD *)(v23 + 24);
    v25 = v24 < v21 + v22 || v24 < v21;
    if (v25 || (v21 | v22) < 0 || v24 <= v22)
      __break(1u);
    v26 = v37;
    closure #1 in BPlistMap.Value.dataValue<A>(in:for:_:)((_BYTE *)(*(_QWORD *)(v23 + 16) + v22), v21, v39);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
    if (v26)
    {
      result = swift_release();
      __break(1u);
    }
    else
    {
      swift_release();
      return v39[0];
    }
  }
  else
  {
    v37 = v18;
    v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v28((char *)&v35 - v17, a3, v12, v19);
    ((void (*)(char *, char *, uint64_t))v28)(v15, v20, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, a5) == 1)
    {
      v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v15, v12);
      _CodingPathNode.path.getter(v38);
      v29(v20, v12);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a5);
      v30 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v32 = v36;
      *(_QWORD *)(inited + 56) = a5;
      *(_QWORD *)(inited + 64) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a5);
      v39[0] = v30;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Data, v37, v34);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in BPlistMap.Value.dataValue<A>(in:for:_:)@<X0>(_BYTE *__src@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;

  if (a2)
  {
    if (a2 <= 14)
    {
      result = specialized Data.InlineData.init(_:)(__src, &__src[a2]);
      v8 = v9 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      v6 = (unint64_t)__DataStorage.init(bytes:length:)((unint64_t)__src, a2);
      if ((unint64_t)a2 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = a2;
        v8 = v6 | 0x8000000000000000;
      }
      else
      {
        result = a2 << 32;
        v8 = v6 | 0x4000000000000000;
      }
    }
  }
  else
  {
    result = 0;
    v8 = 0xC000000000000000;
  }
  *a3 = result;
  a3[1] = v8;
  return result;
}

void BPlistMap.Value.dateValue<A>(in:for:_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v30 = a5;
  v32 = a2;
  v34 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v28 - v16;
  if (v17 >> 60 == 5)
  {
    *a6 = *(_QWORD *)(v17 + 16);
  }
  else
  {
    v29 = v17;
    v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
    v20((char *)&v28 - v16, a3, v11, v18);
    ((void (*)(char *, char *, uint64_t))v20)(v14, v19, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, a4) == 1)
    {
      v21 = *(void (**)(char *, uint64_t))(v12 + 8);
      v21(v14, v11);
      _CodingPathNode.path.getter(v32);
      v21(v19, v11);
    }
    else
    {
      v22 = v31;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v31, v14, a4);
      v23 = _CodingPathNode.path.getter(v32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v25 = v30;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v22, a4);
      v33 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v22, a4);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Date, v29, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

uint64_t BPlistMap.Value.debugDataTypeDescription.getter(unint64_t a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181AB5FC4 + 4 * byte_18206B4D0[a1 >> 60]))(0x676E697274732061, 0xE800000000000000);
}

uint64_t sub_181AB5FC4()
{
  return 0x7961727261206E61;
}

uint64_t sub_181AB5FD8()
{
  return 0x7465732061;
}

uint64_t sub_181AB5FEC()
{
  return 0x6F69746369642061;
}

uint64_t sub_181AB600C()
{
  return 0x7620617461642061;
}

uint64_t sub_181AB602C()
{
  return 0x657461642061;
}

uint64_t sub_181AB6040()
{
  return 0x61656C6F6F622061;
}

uint64_t sub_181AB605C()
{
  return 0x6E206C6165722061;
}

uint64_t sub_181AB6080()
{
  return 0x6765746E69206E61;
}

uint64_t sub_181AB609C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  if (a1 == 0x9000000000000008)
    v1 = 0x76206C6C756E2061;
  else
    v1 = 0xD000000000000012;
  if (a1 == 0x9000000000000000)
    return 0x6469752061;
  else
    return v1;
}

unint64_t BufferReader.getSizedInt(at:endIndex:size:)(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (a2 - (uint64_t)a1 < a3)
    return 0;
  v4 = a3;
  switch(a3)
  {
    case 0:
      return v4;
    case 1:
      v12 = v3[2];
      v13 = v3[4];
      if (v13 < v12)
        goto LABEL_48;
      if ((uint64_t)(v12 - *v3) < 0)
        goto LABEL_49;
      if ((uint64_t)(v13 - v12) < 0)
        goto LABEL_50;
      if ((uint64_t)(*v3 + v3[1] - v13) < 0)
        goto LABEL_51;
      return *(unsigned __int8 *)a1;
    case 2:
      v14 = v3[2];
      v15 = v3[4];
      if (v15 < v14)
        goto LABEL_52;
      if ((uint64_t)(v14 - *v3) < 0)
        goto LABEL_53;
      if ((uint64_t)(v15 - v14) < 0)
        goto LABEL_54;
      if ((uint64_t)(*v3 + v3[1] - v15) < 0)
        goto LABEL_55;
      return __rev16(*(unsigned __int16 *)a1);
    case 3:
    case 5:
    case 6:
    case 7:
      v5 = v3[2];
      v6 = v3[4];
      if (v6 < v5)
      {
        __break(1u);
        goto LABEL_40;
      }
      if ((uint64_t)(v5 - *v3) < 0)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if ((uint64_t)(v6 - v5) < 0)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      if ((uint64_t)(*v3 + v3[1] - v6) < 0)
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        JUMPOUT(0x181AB6340);
      }
      v4 = 0;
      v7 = a3;
      do
      {
        v8 = *(unsigned __int8 *)a1;
        a1 = (unsigned int *)((char *)a1 + 1);
        v4 = v8 | (v4 << 8);
        --v7;
      }
      while (v7);
      return v4;
    case 4:
      v16 = v3[2];
      v17 = v3[4];
      if (v17 < v16)
        goto LABEL_56;
      if ((uint64_t)(v16 - *v3) < 0)
        goto LABEL_57;
      if ((uint64_t)(v17 - v16) < 0)
        goto LABEL_58;
      if ((uint64_t)(*v3 + v3[1] - v17) < 0)
        goto LABEL_59;
      return bswap32(*a1);
    case 8:
      v18 = v3[2];
      v19 = v3[4];
      if (v19 < v18)
        goto LABEL_60;
      if ((uint64_t)(v18 - *v3) < 0)
        goto LABEL_61;
      if ((uint64_t)(v19 - v18) < 0)
        goto LABEL_62;
      if ((uint64_t)(*v3 + v3[1] - v19) < 0)
        goto LABEL_63;
      v11 = *(_QWORD *)a1;
      return bswap64(v11);
    default:
      if (__OFSUB__(a2 - (_QWORD)a1, a3))
        goto LABEL_43;
      v9 = v3[2];
      v10 = v3[4];
      if (v10 < v9)
        goto LABEL_44;
      if ((uint64_t)(v9 - *v3) < 0)
        goto LABEL_45;
      if ((uint64_t)(v10 - v9) < 0)
        goto LABEL_46;
      if ((uint64_t)(*v3 + v3[1] - v10) < 0)
        goto LABEL_47;
      v11 = *(_QWORD *)((char *)a1 + a3);
      return bswap64(v11);
  }
}

uint64_t BPlistError.debugDescription.getter(uint64_t a1, void *a2)
{
  Swift::String v5;
  Swift::String v6;

  if (!a2)
    return 0x2064696C61766E49;
  if (a2 == (void *)1)
    return 0xD000000000000016;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x65756C617620;
  v6._object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  return 0x2074707572726F43;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BPlistError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return !v4;
  if (v3 == 1)
    return v4 == 1;
  if (v4 < 2)
    return 0;
  if (*a1 != *a2 || v3 != v4)
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  return 1;
}

uint64_t specialized BPlistTypeMarker.init(_:)(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = (a1 >> 4) ^ 8;
  result = 3;
  switch(v1)
  {
    case 0:
      result = 9;
      break;
    case 2:
      result = 10;
      break;
    case 4:
      result = 11;
      break;
    case 5:
      result = 12;
      break;
    case 8:
      if ((_BYTE)a1)
      {
        if (a1 == 9)
        {
          result = 2;
        }
        else
        {
          if (a1 != 8)
            goto LABEL_14;
          result = 1;
        }
      }
      else
      {
        result = a1;
      }
      break;
    case 9:
      return result;
    case 10:
      result = 4;
      break;
    case 11:
      if (a1 != 51)
        goto LABEL_14;
      result = 5;
      break;
    case 12:
      result = 6;
      break;
    case 13:
      result = 7;
      break;
    case 14:
      result = 8;
      break;
    default:
LABEL_14:
      result = 13;
      break;
  }
  return result;
}

_DWORD *specialized static BPlistScanner.parseTopLevelInfo(from:)@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;

  if (a2 < 41 || (*result == 1768714338 ? (v4 = *(_DWORD *)((char *)result + 3) == 812938089) : (v4 = 0), !v4))
  {
LABEL_6:
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 1;
    goto LABEL_7;
  }
  v5 = 0;
  v10 = (uint64_t)result + a2;
  v11 = *(_QWORD *)((char *)result + a2 - 24);
  v9 = 1;
  if (!v11)
    goto LABEL_34;
  v12 = bswap64(v11);
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_34;
  v13 = bswap64(*(_QWORD *)(v10 - 8));
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_34;
  v14 = bswap64(*(_QWORD *)(v10 - 16));
  if (v14 >= v12)
    goto LABEL_34;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (v13 < 9)
    goto LABEL_7;
  v5 = 0;
  if (v13 >= a2 - 32)
    goto LABEL_34;
  v15 = *(unsigned __int8 *)(v10 - 26);
  if (!*(_BYTE *)(v10 - 26))
    goto LABEL_34;
  v16 = *(unsigned __int8 *)(v10 - 25);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (!*(_BYTE *)(v10 - 25))
    goto LABEL_7;
  v5 = 0;
  if (!is_mul_ok(v12, v15))
    goto LABEL_34;
  v17 = v12 * v15;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (!(v12 * v15))
    goto LABEL_7;
  v18 = v13 + v17;
  if (__CFADD__(v13, v17))
    goto LABEL_20;
  v5 = 0;
  v19 = v18 + 32;
  if (v18 >= 0xFFFFFFFFFFFFFFE0)
    goto LABEL_34;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (v19 != a2)
    goto LABEL_7;
  if ((v20 = *(unsigned int *)(v10 - 32),
        v21 = *(unsigned __int8 *)(v10 - 28),
        v22 = *(unsigned __int8 *)(v10 - 27),
        v16 <= 7)
    && v12 >> (8 * (v16 & 7u))
    || v15 <= 7 && v13 >> (8 * (v15 & 7u))
    || (v23 = v14 * v15,
        ((uint64_t)v14 * (unsigned __int128)*(unsigned __int8 *)(v10 - 26)) >> 64 != (uint64_t)(v14 * v15) >> 63))
  {
LABEL_20:
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_7;
  }
  v5 = 0;
  v24 = v13 + v23;
  if (__OFADD__(v13, v23))
    goto LABEL_34;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (v24 >= a2)
    goto LABEL_7;
  result = (_DWORD *)BufferReader.getSizedInt(at:endIndex:size:)((_DWORD *)((char *)result + v24), v10, v15);
  if ((v25 & 1) != 0)
    goto LABEL_6;
  v5 = 0;
  v9 = 1;
  if ((unint64_t)result < 8)
  {
LABEL_34:
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_7;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if ((unint64_t)result < v13)
  {
    v9 = 0;
    v5 = v20 | (v21 << 32) | (v22 << 40) | (v15 << 48) | (v16 << 56);
    v6 = v12;
    v7 = v14;
    v8 = v13;
  }
LABEL_7:
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  *(_BYTE *)(a3 + 32) = v9;
  return result;
}

uint64_t specialized static BPlistScanner.scanBinaryPropertyList(from:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _BYTE v40[40];
  int v41;
  __int16 v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  __int16 v50;

  specialized static BPlistScanner.parseTopLevelInfo(from:)(a1, a2, (uint64_t)v40);
  outlined init with take of BPlistTrailer?((uint64_t)v40, (uint64_t)&v41);
  if ((v48 & 1) == 0)
  {
    v49 = v41;
    v50 = v42;
    v4 = v45;
    if (v45 < 0)
      goto LABEL_41;
    v5 = v43;
    v6 = v44;
    v7 = v46;
    v2 = v47;
    v8 = 0x40000;
    if (v45 < 0x40000)
      v8 = v45;
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16) <= v8)
      v9 = v8;
    else
      v9 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0, MEMORY[0x1E0DEE9D8]);
    if (v2 < 0)
    {
LABEL_42:
      __break(1u);
    }
    else
    {
      v12 = v2 - 1;
      if (v2)
      {
        v13 = v10;
        v35 = v6;
        v37 = v7;
        v38 = a1;
        v36 = v2;
        if (v4)
        {
          v14 = 0;
          v15 = a2;
          v16 = (char *)a1 + a2;
          v17 = (_DWORD *)((char *)a1 + v2);
          v18 = v5 - 8;
          v19 = v5;
          while (v16 - (char *)v17 >= v5)
          {
            v20 = v5;
            switch((int)v5)
            {
              case 0:
                goto LABEL_30;
              case 1:
                if (v15 < 0)
                  goto LABEL_45;
                v20 = *(unsigned __int8 *)v17;
                goto LABEL_29;
              case 2:
                if (v15 < 0)
                  goto LABEL_46;
                v20 = __rev16(*(unsigned __int16 *)v17);
                goto LABEL_29;
              case 3:
              case 5:
              case 6:
              case 7:
                if (v15 < 0)
                {
                  __break(1u);
LABEL_41:
                  __break(1u);
                  goto LABEL_42;
                }
                v20 = 0;
                v21 = 0;
                do
                  v20 = *((unsigned __int8 *)v17 + v21++) | (v20 << 8);
                while (v5 != v21);
LABEL_29:
                if (v12 < v20)
                  goto LABEL_34;
LABEL_30:
                v24 = v13[2];
                v23 = v13[3];
                v2 = v24 + 1;
                if (v24 >= v23 >> 1)
                {
                  v25 = v13;
                  v32 = v12;
                  v33 = v19;
                  v34 = v18;
                  v26 = v11;
                  v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v25);
                  v11 = v26;
                  v19 = v33;
                  v18 = v34;
                  v12 = v32;
                  v15 = a2;
                  v13 = v27;
                }
                ++v14;
                v13[2] = v2;
                v13[v24 + 4] = v20;
                v17 = (unsigned int *)((char *)v17 + v5);
                if (v14 == v4)
                  goto LABEL_37;
                break;
              case 4:
                if (v15 < 0)
                  goto LABEL_47;
                v20 = bswap32(*v17);
                goto LABEL_29;
              case 8:
                if (v15 < 0)
                  goto LABEL_48;
                v22 = *(_QWORD *)v17;
                goto LABEL_28;
              default:
                if (v15 < 0)
                  goto LABEL_44;
                v22 = *(_QWORD *)((char *)v17 + v18);
LABEL_28:
                v20 = bswap64(v22);
                goto LABEL_29;
            }
          }
LABEL_34:
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
        v15 = a2;
LABEL_37:
        v29 = v15;
        type metadata accessor for BPlistMap();
        v2 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
        v30 = swift_allocObject();
        *(_DWORD *)(v30 + 40) = 0;
        *(_QWORD *)(v30 + 16) = v38;
        *(_QWORD *)(v30 + 24) = v29;
        *(_QWORD *)(v30 + 32) = 0;
        *(_QWORD *)(v2 + 64) = v30;
        *(_DWORD *)(v2 + 16) = v49;
        *(_WORD *)(v2 + 20) = v50;
        *(_BYTE *)(v2 + 22) = v5;
        *(_BYTE *)(v2 + 23) = v35;
        *(_QWORD *)(v2 + 24) = v4;
        *(_QWORD *)(v2 + 32) = v37;
        *(_QWORD *)(v2 + 40) = v36;
        if ((v37 & 0x8000000000000000) == 0)
        {
          *(_QWORD *)(v2 + 48) = v37;
          *(_QWORD *)(v2 + 56) = v13;
          return v2;
        }
LABEL_49:
        __break(1u);
        JUMPOUT(0x181AB6AC4);
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_35:
  lazy protocol witness table accessor for type BPlistError and conformance BPlistError();
  swift_allocError();
  *v28 = xmmword_18205FD60;
  swift_willThrow();
  return v2;
}

