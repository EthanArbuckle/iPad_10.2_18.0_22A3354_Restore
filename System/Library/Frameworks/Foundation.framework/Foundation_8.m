uint64_t static NSString.localizedStringWithFormat(_:_:)()
{
  uint64_t v1;

  withVaList<A>(_:_:)();
  return v1;
}

id closure #1 in static NSString.localizedStringWithFormat(_:_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  _QWORD v10[4];

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v7 = v6;
  v10[3] = &type metadata for Locale;
  if (one-time initialization token for cache != -1)
    swift_once();
  v10[0] = LocaleCache.current.getter();
  v10[1] = v8;
  result = NSString.__allocating_init(format:locale:arguments:)((uint64_t)v5, v7, v10, a1);
  *a3 = result;
  return result;
}

id partial apply for closure #1 in static NSString.localizedStringWithFormat(_:_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static NSString.localizedStringWithFormat(_:_:)(a1, *(void **)(v2 + 16), a2);
}

void specialized withVaList<A>(_:_:)(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  type metadata accessor for __VaListBuilder();
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = 8;
  v4[3] = 0;
  v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_25:
    v25 = __VaListBuilder.va_list()();
    static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v26 = objc_allocWithZone((Class)NSString);
    v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v26, sel_initWithFormat_arguments_, v27, v25);
    swift_unknownObjectRelease();
    objc_msgSend(a2, sel_appendString_, v28);

    swift_release();
    return;
  }
  v7 = 0;
  v8 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v8 + 40 * v7, (uint64_t)v31);
    v9 = v32;
    v10 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    v11 = MEMORY[0x186DA5FA8](v9, v10);
    v12 = *v5;
    v13 = *(_QWORD *)(v11 + 16);
    v14 = __OFADD__(*v5, v13);
    v15 = *v5 + v13;
    if (v14)
      break;
    v16 = v11;
    v17 = v4[4];
    if (v17 >= v15)
      goto LABEL_18;
    if (v17 + 0x4000000000000000 < 0)
      goto LABEL_28;
    v18 = (char *)v4[5];
    if (2 * v17 > v15)
      v15 = 2 * v17;
    v4[4] = v15;
    if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_29;
    v19 = (char *)swift_slowAlloc();
    v4[5] = v19;
    if (v18)
    {
      if (v19 != v18 || v19 >= &v18[8 * v12])
        memmove(v19, v18, 8 * v12);
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      v19 = (char *)v4[5];
    }
    if (!v19)
      goto LABEL_30;
    v21 = *(_QWORD *)(v16 + 16);
    if (v21)
    {
      v22 = (uint64_t *)(v16 + 32);
      v23 = *v5;
      while (1)
      {
        v24 = *v22++;
        *(_QWORD *)&v19[8 * v23] = v24;
        v23 = *v5 + 1;
        if (__OFADD__(*v5, 1))
          break;
        *v5 = v23;
        if (!--v21)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v7;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    if (v7 == v6)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  type metadata accessor for __VaListBuilder();
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = 8;
  v4[3] = 0;
  v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = 0;
    v8 = a1 + 32;
    while (1)
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v8 + 40 * v7, (uint64_t)v32);
      v9 = v33;
      v10 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      v11 = MEMORY[0x186DA5FA8](v9, v10);
      v12 = *v5;
      v13 = *(_QWORD *)(v11 + 16);
      v14 = __OFADD__(*v5, v13);
      v15 = *v5 + v13;
      if (v14)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
      v16 = v11;
      v17 = v4[4];
      if (v17 >= v15)
        goto LABEL_18;
      if (v17 + 0x4000000000000000 < 0)
        goto LABEL_29;
      v18 = (char *)v4[5];
      if (2 * v17 > v15)
        v15 = 2 * v17;
      v4[4] = v15;
      if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_30;
      v19 = (char *)swift_slowAlloc();
      v4[5] = v19;
      if (v18)
        break;
LABEL_19:
      if (!v19)
        goto LABEL_31;
      v21 = *(_QWORD *)(v16 + 16);
      if (v21)
      {
        v22 = (uint64_t *)(v16 + 32);
        v23 = *v5;
        while (1)
        {
          v24 = *v22++;
          *(_QWORD *)&v19[8 * v23] = v24;
          v23 = *v5 + 1;
          if (__OFADD__(*v5, 1))
            break;
          *v5 = v23;
          if (!--v21)
            goto LABEL_3;
        }
        __break(1u);
        goto LABEL_28;
      }
LABEL_3:
      ++v7;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v7 == v6)
        goto LABEL_25;
    }
    if (v19 != v18 || v19 >= &v18[8 * v12])
      memmove(v19, v18, 8 * v12);
    __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
    v19 = (char *)v4[5];
    goto LABEL_19;
  }
LABEL_25:
  v25 = __VaListBuilder.va_list()();
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v26 = objc_allocWithZone((Class)NSString);
  v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v26, sel_initWithFormat_arguments_, v27, v25);
  swift_unknownObjectRelease();
  v29 = objc_msgSend(a2, sel_stringByAppendingString_, v28);

  if (!v29)
    goto LABEL_32;
  swift_release();
}

uint64_t NSString.appendingFormat(_:_:)(void *a1, uint64_t a2)
{
  void *v2;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  v6 = a1;
  specialized withVaList<A>(_:_:)(a2, v5, v6);
  v8 = v7;

  return v8;
}

void NSMutableString.appendFormat(_:_:)(void *a1, uint64_t a2)
{
  void *v2;

  specialized withVaList<A>(_:_:)(a2, v2, a1);
}

id NSString.customPlaygroundQuickLook.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

id protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSString@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  id result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t base witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral in NSString()
{
  return lazy protocol witness table accessor for type NSString and conformance NSString(&lazy protocol witness table cache variable for type NSString and conformance NSString, (uint64_t)&protocol conformance descriptor for NSString);
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in NSString()
{
  return MEMORY[0x1E0DEC350];
}

uint64_t base witness table accessor for ExpressibleByUnicodeScalarLiteral in NSString()
{
  return lazy protocol witness table accessor for type NSString and conformance NSString(&lazy protocol witness table cache variable for type NSString and conformance NSString, (uint64_t)&protocol conformance descriptor for NSString);
}

uint64_t lazy protocol witness table accessor for type NSString and conformance NSString(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NSString();
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in NSString()
{
  return MEMORY[0x1E0DEC368];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in NSString()
{
  return MEMORY[0x1E0DEC360];
}

uint64_t Expression.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t TupleTypeMetadata;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  uint64_t *v43;
  int *v44;
  int *v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char **v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v7 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = 8 * v8;
  v65 = v8;
  v61 = a5;
  if (v8 == 1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v10, a3, a4);
    v12 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v14 = (char *)&v55 - v13;
    type metadata accessor for PredicateExpressions.Variable(255, *v10, v15, v16);
    v17 = v12;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v19 = TupleTypeMetadata2;
  }
  else
  {
    v63 = (char **)v5;
    MEMORY[0x1E0C80A78](a1);
    v22 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (v8)
    {
      v23 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v24 = (uint64_t *)((char *)&v55 - v22);
      v25 = v65;
      do
      {
        v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255, v26, v20, v21);
        --v25;
      }
      while (v25);
    }
    v27 = v65;
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v62 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v64 = (char *)&v55 - v28;
    v60 = &v55;
    MEMORY[0x1E0C80A78](v29);
    if (v27)
    {
      v32 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v33 = (uint64_t *)((char *)&v55 - v22);
      v34 = v65;
      do
      {
        v35 = *v32++;
        type metadata accessor for PredicateExpressions.Variable(255, v35, v30, v31);
        *v33++ = swift_getTupleTypeMetadata2();
        --v34;
      }
      while (v34);
    }
    v8 = v65;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata();
    v19 = TupleTypeMetadata2;
    v5 = (uint64_t)v63;
    v14 = v64;
    v17 = v62;
  }
  v60 = &v55;
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v64 = (char *)&v55 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v67);
  v57 = v69;
  v58 = v68;
  v56 = __swift_project_boxed_opaque_existential_1(v67, v68);
  v59 = &v55;
  v37 = MEMORY[0x1E0C80A78](v56);
  v63 = (char **)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = v5 + *(int *)(a2 + 44);
  v39 = v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v14, v38, TupleTypeMetadata, v37);
  v62 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    v42 = v63;
    v43 = (uint64_t *)(v62 & 0xFFFFFFFFFFFFFFFELL);
    v44 = (int *)(TupleTypeMetadata + 32);
    v45 = (int *)(v19 + 32);
    v46 = v8;
    do
    {
      if (v8 == 1)
        v51 = 0;
      else
        v51 = *v45;
      v52 = *v43;
      type metadata accessor for PredicateExpressions.Variable(255, *v43, v40, v41);
      v53 = swift_getTupleTypeMetadata2();
      if (v65 == 1)
        v47 = 0;
      else
        v47 = *v44;
      v48 = &v64[v51];
      v49 = &v48[*(int *)(v53 + 48)];
      *(_QWORD *)v48 = *(_QWORD *)&v39[v47];
      v50 = *v7++;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v49, v50, v52);
      *v42++ = v48;
      v44 += 4;
      v45 += 4;
      ++v43;
      --v46;
      v8 = v65;
    }
    while (v46);
  }
  PredicateBindings.init<each A>(_:)((uint64_t)v63, v8, v62, v41, &v70);
  v66 = v70;
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v57 + 8) + 16))(&v66, v58);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
}

uint64_t Expression.expression.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v1, a1);
}

uint64_t Expression.variable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD **a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  int *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFELL), a2, a3);
    v9 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v7)
    {
      v13 = (uint64_t *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v14 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      v15 = v7;
      do
      {
        v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255, v16, v10, v11);
        --v15;
      }
      while (v15);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v9 = TupleTypeMetadata;
  }
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v19, v4 + *(int *)(a1 + 44), v9, v17);
  if (v7)
  {
    v22 = (int *)(v9 + 32);
    v23 = v7;
    do
    {
      if (v7 == 1)
        v24 = 0;
      else
        v24 = *v22;
      v25 = *a4++;
      *v25 = *(_QWORD *)&v19[v24];
      v22 += 4;
      --v23;
    }
    while (v23);
  }
  return result;
}

uint64_t Expression.init(_:)@<X0>(void (*a1)(__int128 *__return_ptr, char **)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  char **v34;
  int *v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD v41[4];
  void (*v42)(__int128 *__return_ptr, char **);
  __int128 v43[2];

  v41[3] = a2;
  v42 = a1;
  v10 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  v11 = 8 * a3;
  if (a3 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v10, 1, a4);
    v13 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (a3)
    {
      v16 = (_QWORD *)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      v17 = a3;
      do
      {
        v18 = *v10++;
        *v16++ = type metadata accessor for PredicateExpressions.Variable(255, v18, v14, v15);
        --v17;
      }
      while (v17);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v13 = TupleTypeMetadata;
  }
  v19 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[2] = v41;
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v41 - v23;
  v41[1] = v41;
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)v41 - v26;
  if (a3)
  {
    if (one-time initialization token for nextID != -1)
      swift_once();
    v28 = 0;
    do
    {
      if (a3 == 1)
        v29 = 0;
      else
        v29 = *(_DWORD *)(v13 + 16 * v28 + 32);
      do
        v30 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v30 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(_QWORD *)&v27[v29] = v30;
      ++v28;
    }
    while (v28 != a3);
  }
  v31 = a6 + *(int *)(type metadata accessor for Expression(0, a3, a4, a5) + 44);
  v32 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v31, v27, v13);
  v33 = MEMORY[0x1E0C80A78](v32);
  v34 = (char **)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v21, v31, v13, v33);
  if (a3)
  {
    v35 = (int *)(v13 + 32);
    v36 = v34;
    v37 = a3;
    do
    {
      if (a3 == 1)
      {
        LODWORD(v38) = 0;
        v39 = v24;
      }
      else
      {
        v38 = *v35;
        v39 = &v24[v38];
      }
      *(_QWORD *)v39 = *(_QWORD *)&v21[(int)v38];
      *v36++ = v39;
      v35 += 4;
      --v37;
    }
    while (v37);
  }
  v42(v43, v34);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v43, a6);
}

uint64_t type metadata accessor for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Expression);
}

uint64_t type metadata completion function for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];

  v18[0] = "(";
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(319, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    if (v7 > 0x3F)
      return TupleTypeMetadata;
    TupleTypeMetadata = swift_checkMetadataState();
    if (v8 > 0x3F)
      return TupleTypeMetadata;
LABEL_9:
    v18[1] = *(_QWORD *)(TupleTypeMetadata - 8) + 64;
    swift_initStructMetadata();
    return 0;
  }
  MEMORY[0x1E0C80A78](a1);
  if (v5)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
    v13 = (_QWORD *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    v14 = v5;
    do
    {
      v15 = *v12++;
      *v13++ = type metadata accessor for PredicateExpressions.Variable(255, v15, v9, v10);
      --v14;
    }
    while (v14);
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  if (v16 <= 0x3F)
    goto LABEL_9;
  return TupleTypeMetadata;
}

_QWORD *initializeBufferWithCopyOfBuffer for Expression(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    v8 = (**(uint64_t (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v11 = *(int *)(a3 + 44);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14 == 1)
    {
      TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v9, v10);
    }
    else
    {
      MEMORY[0x1E0C80A78](v8);
      if (v14)
      {
        v20 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        v21 = (uint64_t *)((char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
        v22 = v14;
        do
        {
          v23 = *v20++;
          *v21++ = type metadata accessor for PredicateExpressions.Variable(255, v23, v17, v18);
          --v22;
        }
        while (v22);
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(v12, v13);
  }
  return v4;
}

uint64_t initializeWithCopy for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = (**(uint64_t (***)(void))(v6 - 8))();
  v10 = *(int *)(a3 + 44);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v8, v9);
  }
  else
  {
    MEMORY[0x1E0C80A78](v7);
    if (v11)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      v18 = v11;
      do
      {
        v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255, v19, v13, v14);
        --v18;
      }
      while (v18);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for Expression(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = __swift_assign_boxed_opaque_existential_1(a1, a2);
  v9 = *(int *)(a3 + 44);
  v10 = *(_QWORD *)(a3 + 16);
  if (v10 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v7, v8);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    if (v10)
    {
      v15 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v16 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      v17 = v10;
      do
      {
        v18 = *v15++;
        *v16++ = type metadata accessor for PredicateExpressions.Variable(255, v18, v12, v13);
        --v17;
      }
      while (v17);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(char *, char *))(*(_QWORD *)(TupleTypeMetadata - 8) + 24))((char *)a1 + v9, (char *)a2 + v9);
  return a1;
}

uint64_t initializeWithTake for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 44);
  v8 = *(_QWORD *)(a3 + 16);
  if (v8 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v8)
    {
      v13 = (uint64_t *)(*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v14 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      v15 = v8;
      do
      {
        v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255, v16, v10, v11);
        --v15;
      }
      while (v15);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 32))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = __swift_destroy_boxed_opaque_existential_1(a1);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(int *)(a3 + 44);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v7, v8);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    if (v11)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      v18 = v11;
      do
      {
        v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255, v19, v13, v14);
        --v18;
      }
      while (v18);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 40))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Expression()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C0B30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t TupleTypeMetadata;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 16);
    if (v9 == 1)
    {
      TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    }
    else
    {
      MEMORY[0x1E0C80A78](a1);
      if (v9)
      {
        v14 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        v15 = (uint64_t *)((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
        v16 = v9;
        do
        {
          v17 = *v14++;
          *v15++ = type metadata accessor for PredicateExpressions.Variable(255, v17, v11, v12);
          --v16;
        }
        while (v16);
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 44), a2);
  }
}

uint64_t storeEnumTagSinglePayload for Expression()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C0B43C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  if ((_DWORD)a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = *(_QWORD *)(a4 + 16);
    if (v7 == 1)
    {
      TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a4 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    }
    else
    {
      MEMORY[0x1E0C80A78](result);
      if (v7)
      {
        v12 = (uint64_t *)(*(_QWORD *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL);
        v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
        v14 = v7;
        do
        {
          v15 = *v12++;
          *v13++ = type metadata accessor for PredicateExpressions.Variable(255, v15, v9, v10);
          --v14;
        }
        while (v14);
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2);
  }
  return result;
}

unint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  char v17;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  _QWORD v23[2];
  char v24;

  v3 = HIBYTE(a2) & 0xF;
  v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v7 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = a1;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            v7 = (BYTE1(a1) - 48);
            v14 = v3 - 2;
            if (v14)
            {
              v15 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v16 = *v15 - 48;
                if (v16 > 9)
                  goto LABEL_36;
                if (!is_mul_ok(v7, 0xAuLL))
                  goto LABEL_36;
                v13 = __CFADD__(10 * v7, v16);
                v7 = 10 * v7 + v16;
                if (v13)
                  goto LABEL_36;
                ++v15;
                if (!--v14)
                  goto LABEL_43;
              }
            }
            goto LABEL_43;
          }
          goto LABEL_36;
        }
        goto LABEL_56;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          if ((a1 - 48) <= 9u)
          {
            v7 = (a1 - 48);
            v19 = v3 - 1;
            if (v19)
            {
              v20 = (unsigned __int8 *)v23 + 1;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  goto LABEL_36;
                if (!is_mul_ok(v7, 0xAuLL))
                  goto LABEL_36;
                v13 = __CFADD__(10 * v7, v21);
                v7 = 10 * v7 + v21;
                if (v13)
                  goto LABEL_36;
                ++v20;
                if (!--v19)
                  goto LABEL_43;
              }
            }
            goto LABEL_43;
          }
LABEL_36:
          v7 = 0;
          v9 = 1;
LABEL_37:
          v24 = v9;
LABEL_38:
          v17 = v24;
          goto LABEL_39;
        }
        goto LABEL_55;
      }
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(a1) - 48);
            if (BYTE1(a1) == 48)
            {
              v10 = v3 - 2;
              if (v10)
              {
                v11 = (unsigned __int8 *)v23 + 2;
                do
                {
                  v12 = *v11 - 48;
                  if (v12 > 9)
                    goto LABEL_36;
                  if (!is_mul_ok(v7, 0xAuLL))
                    goto LABEL_36;
                  v13 = 10 * v7 >= v12;
                  v7 = 10 * v7 - v12;
                  if (!v13)
                    goto LABEL_36;
                  ++v11;
                }
                while (--v10);
              }
LABEL_43:
              v24 = 0;
              goto LABEL_38;
            }
          }
          goto LABEL_36;
        }
LABEL_56:
        v24 = v3;
        v7 = 0;
        goto LABEL_38;
      }
      __break(1u);
    }
    __break(1u);
LABEL_55:
    LOBYTE(v3) = 1;
    goto LABEL_56;
  }
  v7 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
  v17 = v22;
LABEL_39:
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
    return 0;
  else
    return v7;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD v24[2];
  char v25;

  v3 = HIBYTE(a2) & 0xF;
  v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10);
    swift_bridgeObjectRelease();
    if ((v8 & 0x100000000) == 0)
      goto LABEL_39;
LABEL_48:
    LODWORD(v8) = 0;
    v19 = 1;
    return v8 | ((unint64_t)v19 << 32);
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v24[0] = a1;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LODWORD(v8) = (BYTE1(a1) - 48);
          if (v8 <= 9)
          {
            v13 = v3 - 2;
            if (v13)
            {
              v14 = (unsigned __int8 *)v24 + 2;
              while (1)
              {
                v15 = *v14 - 48;
                if (v15 > 9)
                  goto LABEL_35;
                v16 = 10 * v8;
                if ((v16 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_35;
                LODWORD(v8) = v16 + v15;
                if (__CFADD__((_DWORD)v16, v15))
                  goto LABEL_35;
                ++v14;
                if (!--v13)
                  goto LABEL_37;
              }
            }
            goto LABEL_37;
          }
          goto LABEL_35;
        }
        goto LABEL_54;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LODWORD(v8) = (a1 - 48);
          if (v8 <= 9)
          {
            v17 = v3 - 1;
            if (v17)
            {
              v20 = (unsigned __int8 *)v24 + 1;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  goto LABEL_35;
                v22 = 10 * v8;
                if ((v22 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_35;
                LODWORD(v8) = v22 + v21;
                if (__CFADD__((_DWORD)v22, v21))
                  goto LABEL_35;
                ++v20;
                if (!--v17)
                  goto LABEL_37;
              }
            }
            goto LABEL_37;
          }
LABEL_35:
          LODWORD(v8) = 0;
          v25 = 1;
          goto LABEL_38;
        }
        goto LABEL_53;
      }
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            LODWORD(v8) = -(BYTE1(a1) - 48);
            if (BYTE1(a1) == 48)
            {
              v9 = v3 - 2;
              if (v9)
              {
                v10 = (unsigned __int8 *)v24 + 2;
                do
                {
                  v11 = *v10 - 48;
                  if (v11 > 9)
                    goto LABEL_35;
                  v12 = 10 * v8;
                  if ((v12 & 0xFFFFFFFF00000000) != 0)
                    goto LABEL_35;
                  LODWORD(v8) = v12 - v11;
                  if (v12 < v11)
                    goto LABEL_35;
                  ++v10;
                }
                while (--v9);
              }
LABEL_37:
              v25 = 0;
              goto LABEL_38;
            }
          }
          goto LABEL_35;
        }
LABEL_54:
        v25 = v3;
        LODWORD(v8) = 0;
        goto LABEL_38;
      }
      __break(1u);
    }
    __break(1u);
LABEL_53:
    LOBYTE(v3) = 1;
    goto LABEL_54;
  }
  if ((a1 & 0x1000000000000000) != 0)
    v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
  v25 = BYTE4(v7) & 1;
  LODWORD(v8) = (_DWORD)v7;
LABEL_38:
  v18 = v25;
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    goto LABEL_48;
LABEL_39:
  v19 = 0;
  return v8 | ((unint64_t)v19 << 32);
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  _QWORD v25[2];
  char v26;

  v3 = HIBYTE(a2) & 0xF;
  v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_35;
    }
    v25[0] = a1;
    v25[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            v7 = (BYTE1(a1) - 48);
            v14 = v3 - 2;
            if (v14)
            {
              v15 = (unsigned __int8 *)v25 + 2;
              while (1)
              {
                v16 = *v15 - 48;
                if (v16 > 9)
                  goto LABEL_34;
                v17 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v17 + v16;
                if (__OFADD__(v17, v16))
                  goto LABEL_34;
                ++v15;
                if (!--v14)
                  goto LABEL_41;
              }
            }
            goto LABEL_41;
          }
          goto LABEL_34;
        }
        goto LABEL_54;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          if ((a1 - 48) <= 9u)
          {
            v7 = (a1 - 48);
            v20 = v3 - 1;
            if (v20)
            {
              v21 = (unsigned __int8 *)v25 + 1;
              while (1)
              {
                v22 = *v21 - 48;
                if (v22 > 9)
                  goto LABEL_34;
                v23 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v23 + v22;
                if (__OFADD__(v23, v22))
                  goto LABEL_34;
                ++v21;
                if (!--v20)
                  goto LABEL_41;
              }
            }
            goto LABEL_41;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
LABEL_35:
          v26 = v9;
LABEL_36:
          v18 = v26;
          goto LABEL_37;
        }
        goto LABEL_53;
      }
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(a1) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v25 + 2;
              do
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                ++v11;
              }
              while (--v10);
            }
LABEL_41:
            v26 = 0;
            goto LABEL_36;
          }
          goto LABEL_34;
        }
LABEL_54:
        v26 = v3;
        v7 = 0;
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
LABEL_53:
    LOBYTE(v3) = 1;
    goto LABEL_54;
  }
  v7 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
  v18 = v24;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    return 0;
  else
    return v7;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  char v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  _QWORD v22[2];
  char v23;

  v3 = HIBYTE(a2) & 0xF;
  v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10);
    swift_bridgeObjectRelease();
    if ((v8 & 0x10000) == 0)
      goto LABEL_38;
LABEL_49:
    LOWORD(v8) = 0;
    v17 = 1;
    return (unsigned __int16)v8 | (v17 << 16);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
    LOWORD(v8) = v7;
    v9 = HIWORD(v7) & 1;
    goto LABEL_36;
  }
  v22[0] = a1;
  v22[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v3)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v3 == 1)
      goto LABEL_55;
    v8 = (BYTE1(a1) - 48);
    if (v8 > 9)
      goto LABEL_35;
    v13 = v3 - 2;
    if (v13)
    {
      v14 = (unsigned __int8 *)v22 + 2;
      do
      {
        v15 = *v14 - 48;
        if (v15 > 9)
          goto LABEL_35;
        if (((10 * (unsigned __int16)v8) & 0xF0000) != 0)
          goto LABEL_35;
        v8 = (unsigned __int16)(10 * v8) + v15;
        if ((v8 & 0x10000) != 0)
          goto LABEL_35;
        ++v14;
      }
      while (--v13);
    }
LABEL_40:
    v23 = 0;
    goto LABEL_37;
  }
  if (a1 != 45)
  {
    if (!v3)
    {
LABEL_54:
      LOBYTE(v3) = 1;
      goto LABEL_55;
    }
    v8 = (a1 - 48);
    if (v8 > 9)
      goto LABEL_35;
    v18 = v3 - 1;
    if (v18)
    {
      v19 = (unsigned __int8 *)v22 + 1;
      while (1)
      {
        v20 = *v19 - 48;
        if (v20 > 9)
          goto LABEL_35;
        if (((10 * (unsigned __int16)v8) & 0xF0000) != 0)
          goto LABEL_35;
        v8 = (unsigned __int16)(10 * v8) + v20;
        if ((v8 & 0x10000) != 0)
          goto LABEL_35;
        ++v19;
        if (!--v18)
          goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  if (!v3)
  {
    __break(1u);
    goto LABEL_53;
  }
  if (v3 != 1)
  {
    if ((BYTE1(a1) - 48) <= 9u)
    {
      v8 = -(BYTE1(a1) - 48);
      if ((v8 & 0xFFFF0000) == 0)
      {
        v10 = v3 - 2;
        if (v10)
        {
          v11 = (unsigned __int8 *)v22 + 2;
          while (1)
          {
            v12 = *v11 - 48;
            if (v12 > 9)
              goto LABEL_35;
            if (((10 * (unsigned __int16)v8) & 0xF0000) != 0)
              goto LABEL_35;
            v8 = (unsigned __int16)(10 * v8) - v12;
            if ((v8 & 0xFFFF0000) != 0)
              goto LABEL_35;
            ++v11;
            if (!--v10)
              goto LABEL_40;
          }
        }
        goto LABEL_40;
      }
    }
LABEL_35:
    LOWORD(v8) = 0;
    LOBYTE(v9) = 1;
LABEL_36:
    v23 = v9;
    goto LABEL_37;
  }
LABEL_55:
  v23 = v3;
  LOWORD(v8) = 0;
LABEL_37:
  v16 = v23;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
    goto LABEL_49;
LABEL_38:
  v17 = 0;
  return (unsigned __int16)v8 | (v17 << 16);
}

uint64_t LocalePreferences.metricUnits.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t LocalePreferences.metricUnits.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t LocalePreferences.languages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.languages.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*LocalePreferences.languages.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.locale.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t LocalePreferences.collationOrder.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalePreferences.collationOrder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t LocalePreferences.firstWeekday.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.firstWeekday.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*LocalePreferences.firstWeekday.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.minDaysInFirstWeek.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.minDaysInFirstWeek.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*LocalePreferences.minDaysInFirstWeek.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.ICUSymbolsAndStrings.hash(into:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v2 = v1;
    _CFObject.hash(into:)();

    v3 = *(void **)(v0 + 8);
    if (v3)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    v3 = *(void **)(v0 + 8);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v4 = v3;
      _CFObject.hash(into:)();

      v5 = *(void **)(v0 + 16);
      if (v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  v5 = *(void **)(v0 + 16);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v6 = v5;
    _CFObject.hash(into:)();

    v7 = *(void **)(v0 + 24);
    if (v7)
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    v9 = *(void **)(v0 + 32);
    if (v9)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_9:
  Hasher._combine(_:)(0);
  v7 = *(void **)(v0 + 24);
  if (!v7)
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v8 = v7;
  _CFObject.hash(into:)();

  v9 = *(void **)(v0 + 32);
  if (v9)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v10 = v9;
    _CFObject.hash(into:)();

    return;
  }
LABEL_11:
  Hasher._combine(_:)(0);
}

Swift::Int LocalePreferences.ICUSymbolsAndStrings.hashValue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  Hasher.init(_seed:)();
  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v2 = v1;
    _CFObject.hash(into:)();

    v3 = *(void **)(v0 + 8);
    if (v3)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    v3 = *(void **)(v0 + 8);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v4 = v3;
      _CFObject.hash(into:)();

      v5 = *(void **)(v0 + 16);
      if (v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  v5 = *(void **)(v0 + 16);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v6 = v5;
    _CFObject.hash(into:)();

    v7 = *(void **)(v0 + 24);
    if (v7)
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    v9 = *(void **)(v0 + 32);
    if (v9)
      goto LABEL_6;
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  v7 = *(void **)(v0 + 24);
  if (!v7)
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v8 = v7;
  _CFObject.hash(into:)();

  v9 = *(void **)(v0 + 32);
  if (!v9)
    goto LABEL_11;
LABEL_6:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v10 = v9;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalePreferences.ICUSymbolsAndStrings()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v6 = v1;
    _CFObject.hash(into:)();

    if (v2)
      goto LABEL_3;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v7 = v2;
      _CFObject.hash(into:)();

      if (v4)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v8 = v4;
    _CFObject.hash(into:)();

    if (v3)
      goto LABEL_5;
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5)
      goto LABEL_6;
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_10;
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v9 = v3;
  _CFObject.hash(into:)();

  if (!v5)
    goto LABEL_11;
LABEL_6:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v10 = v5;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return specialized static LocalePreferences.ICUSymbolsAndStrings.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t LocalePreferences.dateFormats.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.dateFormats.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*LocalePreferences.dateFormats.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.numberSymbols.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.numberSymbols.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = a1;
  return result;
}

uint64_t (*LocalePreferences.numberSymbols.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.country.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalePreferences.country.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return result;
}

uint64_t (*LocalePreferences.country.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.measurementUnits.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 136);
}

_BYTE *LocalePreferences.measurementUnits.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 136) = *result;
  return result;
}

uint64_t (*LocalePreferences.measurementUnits.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.temperatureUnit.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 137);
}

_BYTE *LocalePreferences.temperatureUnit.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 137) = *result;
  return result;
}

uint64_t (*LocalePreferences.temperatureUnit.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.force24Hour.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t LocalePreferences.force24Hour.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 138) = result;
  return result;
}

uint64_t (*LocalePreferences.force24Hour.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.force12Hour.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 139);
}

uint64_t LocalePreferences.force12Hour.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 139) = result;
  return result;
}

uint64_t (*LocalePreferences.force12Hour.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double LocalePreferences.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 33686018;
  return result;
}

double LocalePreferences.init(metricUnits:languages:locale:collationOrder:firstWeekday:minDaysInFirstWeek:country:measurementUnits:temperatureUnit:force24Hour:force12Hour:numberSymbols:dateFormats:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char *a12, char *a13, __int16 a14, uint64_t a15, uint64_t a16)
{
  char v16;
  char v17;
  double result;

  v16 = *a12;
  v17 = *a13;
  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  result = 0.0;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  *(_QWORD *)(a9 + 96) = 0;
  *(_QWORD *)(a9 + 104) = a16;
  *(_QWORD *)(a9 + 112) = a15;
  *(_QWORD *)(a9 + 120) = a10;
  *(_QWORD *)(a9 + 128) = a11;
  *(_BYTE *)(a9 + 136) = v16;
  *(_BYTE *)(a9 + 137) = v17;
  *(_WORD *)(a9 + 138) = a14;
  return result;
}

void LocalePreferences.apply(_:)(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  if (v2 != 2)
    *(_BYTE *)v1 = v2;
  v30 = a1[136];
  v31 = a1[137];
  v32 = a1[138];
  v4 = a1[139];
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v9 = *((_QWORD *)a1 + 6);
  v8 = *((_QWORD *)a1 + 7);
  v10 = (void *)*((_QWORD *)a1 + 8);
  v24 = (void *)*((_QWORD *)a1 + 9);
  v25 = (void *)*((_QWORD *)a1 + 10);
  v26 = (void *)*((_QWORD *)a1 + 11);
  v27 = (void *)*((_QWORD *)a1 + 12);
  v11 = *((_QWORD *)a1 + 14);
  v22 = *((_QWORD *)a1 + 2);
  v23 = *((_QWORD *)a1 + 15);
  v28 = *((_QWORD *)a1 + 13);
  v29 = *((_QWORD *)a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 8) = v3;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 16) = v22;
    *(_QWORD *)(v1 + 24) = v5;
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 32) = v6;
    *(_QWORD *)(v1 + 40) = v7;
  }
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 48) = v9;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 56) = v8;
  }
  if (v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 112) = v11;
  }
  if (v10)
  {
    v12 = *(void **)(v1 + 64);
    v13 = v10;

    *(_QWORD *)(v1 + 64) = v10;
  }
  if (v24)
  {
    v14 = *(void **)(v1 + 72);
    v15 = v24;

    *(_QWORD *)(v1 + 72) = v24;
  }
  if (v25)
  {
    v16 = *(void **)(v1 + 80);
    v17 = v25;

    *(_QWORD *)(v1 + 80) = v25;
  }
  if (v26)
  {
    v18 = *(void **)(v1 + 88);
    v19 = v26;

    *(_QWORD *)(v1 + 88) = v26;
  }
  if (v27)
  {
    v20 = *(void **)(v1 + 96);
    v21 = v27;

    *(_QWORD *)(v1 + 96) = v27;
  }
  if (v28)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 104) = v28;
  }
  if (v29)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 120) = v23;
    *(_QWORD *)(v1 + 128) = v29;
  }
  if (v30 != 2)
    *(_BYTE *)(v1 + 136) = v30;
  if (v31 == 2)
  {
    if (v32 == 2)
      goto LABEL_33;
  }
  else
  {
    *(_BYTE *)(v1 + 137) = v31;
    if (v32 == 2)
    {
LABEL_33:
      if (v4 == 2)
        return;
      goto LABEL_34;
    }
  }
  *(_BYTE *)(v1 + 138) = v32;
  if (v4 == 2)
    return;
LABEL_34:
  *(_BYTE *)(v1 + 139) = v4;
}

void LocalePreferences.hourCycle.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;

  if ((*(_BYTE *)(v1 + 139) & 1) != 0)
    v2 = 1;
  else
    v2 = 4;
  if ((*(_BYTE *)(v1 + 138) & 1) != 0)
    v3 = 2;
  else
    v3 = v2;
  *a1 = v3;
}

void LocalePreferences.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  Swift::UInt8 v30;
  Swift::UInt8 v31;
  int v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 1);
  v5 = *((_QWORD *)v1 + 3);
  v7 = *((_QWORD *)v1 + 5);
  v6 = *((_QWORD *)v1 + 6);
  v8 = *((_QWORD *)v1 + 7);
  v35 = (void *)*((_QWORD *)v1 + 8);
  v36 = (void *)*((_QWORD *)v1 + 9);
  v9 = (void *)*((_QWORD *)v1 + 12);
  v37 = (void *)*((_QWORD *)v1 + 10);
  v38 = (void *)*((_QWORD *)v1 + 11);
  v39 = *((_QWORD *)v1 + 13);
  v40 = *((_QWORD *)v1 + 14);
  v41 = *((_QWORD *)v1 + 16);
  v43 = v1[139];
  v33 = v1[138];
  v32 = v1[137];
  v42 = v1[136];
  if (v3 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v3 & 1;
    Hasher._combine(_:)(1u);
  }
  v34 = v9;
  Hasher._combine(_:)(v10);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v4 + 16));
    v11 = *(_QWORD *)(v4 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      v12 = v4 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v12 += 16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    if (v5)
      goto LABEL_10;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v5)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  Hasher._combine(_:)(0);
LABEL_13:
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 = v35;
    if (v6)
      goto LABEL_15;
  }
  else
  {
    Hasher._combine(_:)(0);
    v13 = v35;
    if (v6)
    {
LABEL_15:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v6);
      swift_bridgeObjectRelease();
      v14 = v36;
      if (v8)
        goto LABEL_16;
      goto LABEL_24;
    }
  }
  Hasher._combine(_:)(0);
  v14 = v36;
  if (v8)
  {
LABEL_16:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v8);
    swift_bridgeObjectRelease();
    v16 = v37;
    v15 = v38;
    if (v13)
      goto LABEL_17;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
  v16 = v37;
  v15 = v38;
  if (v13)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v17 = v14;
    v18 = v16;
    v19 = v15;
    v20 = v34;
    v21 = v13;
    _CFObject.hash(into:)();
    if (v14)
      goto LABEL_18;
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  v26 = v34;
  v27 = v14;
  v28 = v16;
  v29 = v15;
  if (v14)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v22 = v14;
    _CFObject.hash(into:)();

    if (v16)
      goto LABEL_19;
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_19:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v23 = v16;
    _CFObject.hash(into:)();

    if (v15)
      goto LABEL_20;
LABEL_28:
    Hasher._combine(_:)(0);
    if (v34)
      goto LABEL_21;
    goto LABEL_29;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v15)
    goto LABEL_28;
LABEL_20:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v24 = v15;
  _CFObject.hash(into:)();

  if (v34)
  {
LABEL_21:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v25 = v34;
    _CFObject.hash(into:)();

    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  v25 = 0;
LABEL_30:

  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
    if (v40)
      goto LABEL_32;
LABEL_35:
    Hasher._combine(_:)(0);
    if (v41)
      goto LABEL_33;
    goto LABEL_36;
  }
  Hasher._combine(_:)(0);
  if (!v40)
    goto LABEL_35;
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (v41)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
LABEL_37:
  if (v42 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42 & 1);
  }
  if (v32 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32 & 1);
  }
  if (v33 == 2)
  {
    v30 = 0;
  }
  else
  {
    v30 = v33 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v43 == 2)
  {
    v31 = 0;
  }
  else
  {
    v31 = v43 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
}

Swift::Int LocalePreferences.hashValue.getter()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  int v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  int v38;
  int v39;
  int v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  void *v48;
  _BYTE v49[80];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 3);
  v5 = *((_QWORD *)v0 + 5);
  v4 = *((_QWORD *)v0 + 6);
  v6 = *((_QWORD *)v0 + 7);
  v7 = (void *)*((_QWORD *)v0 + 9);
  v41 = (void *)*((_QWORD *)v0 + 8);
  v42 = (void *)*((_QWORD *)v0 + 10);
  v47 = (void *)*((_QWORD *)v0 + 11);
  v48 = (void *)*((_QWORD *)v0 + 12);
  v43 = *((_QWORD *)v0 + 13);
  v44 = *((_QWORD *)v0 + 14);
  v45 = *((_QWORD *)v0 + 16);
  v46 = v0[136];
  v39 = v0[137];
  v40 = v0[138];
  v8 = v0[139];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = v1 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v2 + 16));
    v10 = *(_QWORD *)(v2 + 16);
    if (v10)
    {
      v38 = v8;
      swift_bridgeObjectRetain();
      v11 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v11 += 16;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v8 = v38;
    }
    if (v3)
      goto LABEL_10;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  Hasher._combine(_:)(0);
LABEL_13:
  v12 = v7;
  v13 = v41;
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v14 = v42;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v15 = v47;
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v17 = v43;
  v16 = v44;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v18 = v7;
    v19 = v42;
    v20 = v47;
    v21 = v48;
    v22 = v41;
    _CFObject.hash(into:)();
    if (v7)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v48;
    v32 = v7;
    v33 = v42;
    v34 = v47;
    if (v7)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v23 = v7;
      _CFObject.hash(into:)();

      if (v42)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v42)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v24 = v42;
    _CFObject.hash(into:)();

    if (v47)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    v26 = v48;
    if (v48)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v47)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v25 = v47;
  _CFObject.hash(into:)();

  v26 = v48;
  if (v48)
  {
LABEL_27:
    v27 = v8;
    v28 = v26;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v28;
    v8 = v27;
    v13 = v41;
    v16 = v44;
    v17 = v43;
    v14 = v42;
    v15 = v47;
    v30 = v29;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v30 = 0;
LABEL_33:

  if (v17)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v17);
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v45)
      goto LABEL_36;
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  if (!v16)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v49, v16);
  swift_bridgeObjectRelease();
  if (v45)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
LABEL_40:
  if (v46 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46 & 1);
  }
  if (v39 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39 & 1);
  }
  if (v40 == 2)
  {
    v35 = 0;
  }
  else
  {
    v35 = v40 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v35);
  if (v8 == 2)
  {
    v36 = 0;
  }
  else
  {
    v36 = v8 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalePreferences()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  Swift::UInt8 v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  int v28;
  int v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  int v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  void *v49;
  _BYTE v50[80];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 3);
  v5 = *((_QWORD *)v0 + 5);
  v4 = *((_QWORD *)v0 + 6);
  v6 = *((_QWORD *)v0 + 7);
  v42 = (void *)*((_QWORD *)v0 + 8);
  v43 = (void *)*((_QWORD *)v0 + 9);
  v48 = (void *)*((_QWORD *)v0 + 11);
  v49 = (void *)*((_QWORD *)v0 + 12);
  v7 = *((_QWORD *)v0 + 14);
  v44 = (void *)*((_QWORD *)v0 + 10);
  v45 = *((_QWORD *)v0 + 13);
  v46 = *((_QWORD *)v0 + 16);
  v47 = v0[136];
  v41 = v0[137];
  v8 = v0[138];
  v9 = v0[139];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v1 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    v11 = *(_QWORD *)(v2 + 16);
    Hasher._combine(_:)(v11);
    if (v11)
    {
      v40 = v8;
      swift_bridgeObjectRetain();
      v12 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v12 += 16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      v8 = v40;
    }
    if (v3)
      goto LABEL_10;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  Hasher._combine(_:)(0);
LABEL_13:
  v13 = v7;
  v14 = v42;
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v15 = v43;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v16 = v44;
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v17 = v48;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v18 = v43;
    v19 = v44;
    v20 = v48;
    v21 = v49;
    v22 = v42;
    _CFObject.hash(into:)();
    if (v43)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v33 = v49;
    v34 = v43;
    v35 = v44;
    v36 = v48;
    if (v43)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v23 = v43;
      _CFObject.hash(into:)();

      if (v44)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v44)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v24 = v44;
    _CFObject.hash(into:)();

    if (v48)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    v26 = v49;
    if (v49)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v48)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v25 = v48;
  _CFObject.hash(into:)();

  v26 = v49;
  if (v49)
  {
LABEL_27:
    v27 = v13;
    v28 = v8;
    v29 = v9;
    v30 = v26;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v31 = v30;
    v9 = v29;
    v8 = v28;
    v13 = v27;
    v14 = v42;
    v15 = v43;
    v16 = v44;
    v17 = v48;
    v32 = v31;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v32 = 0;
LABEL_33:

  if (v45)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v45);
    swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v46)
      goto LABEL_36;
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  if (!v13)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v50, v13);
  swift_bridgeObjectRelease();
  if (v46)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
LABEL_40:
  if (v47 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47 & 1);
  }
  if (v41 == 2)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2)
    {
LABEL_45:
      v37 = v8 & 1;
      Hasher._combine(_:)(1u);
      goto LABEL_48;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41 & 1);
    if (v8 != 2)
      goto LABEL_45;
  }
  v37 = 0;
LABEL_48:
  Hasher._combine(_:)(v37);
  if (v9 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v9 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  return Hasher._finalize()();
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

{
  return specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FFFF;
}

{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a1;
  v39 = a2;
  swift_bridgeObjectRetain();
  result = String.init<A>(_:)();
  v6 = result;
  v7 = v5;
  if ((v5 & 0x1000000000000000) != 0)
  {
    v6 = static String._copying(_:)();
    v12 = v11;
    result = swift_bridgeObjectRelease();
    v7 = v12;
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_3;
  }
  else if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v6 & 0x1000000000000000) != 0)
    {
      v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    v10 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v9, a3);
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  v13 = HIBYTE(v7) & 0xF;
  v38 = v6;
  v39 = v7 & 0xFFFFFFFFFFFFFFLL;
  if (v6 == 43)
  {
    if (v13)
    {
      v23 = v13 - 1;
      if (v23)
      {
        v15 = 0;
        v24 = a3 + 48;
        v25 = a3 + 55;
        v26 = a3 + 87;
        if (a3 > 10)
        {
          v24 = 58;
        }
        else
        {
          v26 = 97;
          v25 = 65;
        }
        v27 = (unsigned __int8 *)&v38 + 1;
        do
        {
          v28 = *v27;
          if (v28 < 0x30 || v28 >= v24)
          {
            if (v28 < 0x41 || v28 >= v25)
            {
              v10 = 0;
              if (v28 < 0x61 || v28 >= v26)
                goto LABEL_66;
              v29 = -87;
            }
            else
            {
              v29 = -55;
            }
          }
          else
          {
            v29 = -48;
          }
          v30 = v15 * a3;
          if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63)
            goto LABEL_65;
          v15 = v30 + (v28 + v29);
          if (__OFADD__(v30, (v28 + v29)))
            goto LABEL_65;
          ++v27;
          --v23;
        }
        while (v23);
LABEL_64:
        v10 = (unsigned __int8 *)v15;
        goto LABEL_66;
      }
LABEL_65:
      v10 = 0;
LABEL_66:
      swift_bridgeObjectRelease();
      return (uint64_t)v10;
    }
  }
  else
  {
    if (v6 != 45)
    {
      if (v13)
      {
        v15 = 0;
        v31 = a3 + 48;
        v32 = a3 + 55;
        v33 = a3 + 87;
        if (a3 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        v34 = &v38;
        while (1)
        {
          v35 = *(unsigned __int8 *)v34;
          if (v35 < 0x30 || v35 >= v31)
          {
            if (v35 < 0x41 || v35 >= v32)
            {
              v10 = 0;
              if (v35 < 0x61 || v35 >= v33)
                goto LABEL_66;
              v36 = -87;
            }
            else
            {
              v36 = -55;
            }
          }
          else
          {
            v36 = -48;
          }
          v37 = v15 * a3;
          if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63)
            goto LABEL_65;
          v15 = v37 + (v35 + v36);
          if (__OFADD__(v37, (v35 + v36)))
            goto LABEL_65;
          v34 = (uint64_t *)((char *)v34 + 1);
          if (!--v13)
            goto LABEL_64;
        }
      }
      goto LABEL_65;
    }
    if (v13)
    {
      v14 = v13 - 1;
      if (v14)
      {
        v15 = 0;
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        v19 = (unsigned __int8 *)&v38 + 1;
        while (1)
        {
          v20 = *v19;
          if (v20 < 0x30 || v20 >= v16)
          {
            if (v20 < 0x41 || v20 >= v17)
            {
              v10 = 0;
              if (v20 < 0x61 || v20 >= v18)
                goto LABEL_66;
              v21 = -87;
            }
            else
            {
              v21 = -55;
            }
          }
          else
          {
            v21 = -48;
          }
          v22 = v15 * a3;
          if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63)
            goto LABEL_65;
          v15 = v22 - (v20 + v21);
          if (__OFSUB__(v22, (v20 + v21)))
            goto LABEL_65;
          ++v19;
          if (!--v14)
            goto LABEL_64;
        }
      }
      goto LABEL_65;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = &v15;
    goto LABEL_7;
  }
  v7 = static String._copying(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t specialized static LocalePreferences.ICUSymbolsAndStrings.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  char v28;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1)
  {
    if (!v5)
      return 0;
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v6 = v5;
    v7 = v4;
    v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  if (v9)
  {
    if (!v10)
      return 0;
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v11 = v10;
    v12 = v9;
    v13 = static _CFObject.== infix(_:_:)();

    if ((v13 & 1) == 0)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v14 = *(void **)(a1 + 16);
  v15 = *(void **)(a2 + 16);
  if (v14)
  {
    if (!v15)
      return 0;
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v16 = v15;
    v17 = v14;
    v18 = static _CFObject.== infix(_:_:)();

    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v19 = *(void **)(a1 + 24);
  v20 = *(void **)(a2 + 24);
  if (v19)
  {
    if (!v20)
      return 0;
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v21 = v20;
    v22 = v19;
    v23 = static _CFObject.== infix(_:_:)();

    if ((v23 & 1) == 0)
      return 0;
  }
  else if (v20)
  {
    return 0;
  }
  v24 = *(void **)(a1 + 32);
  v25 = *(void **)(a2 + 32);
  if (v24)
  {
    if (v25)
    {
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v26 = v25;
      v27 = v24;
      v28 = static _CFObject.== infix(_:_:)();

      if ((v28 & 1) != 0)
        return 1;
    }
  }
  else if (!v25)
  {
    return 1;
  }
  return 0;
}

uint64_t specialized static LocalePreferences.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t result;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  void *v46;
  int v47;
  char v48;
  char v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  void *v55;
  int v56;
  char v57;
  char v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char v75;
  id v76;
  void *v77;
  int v78;
  id v79;
  char v80;
  void *v81;
  int v82;
  id v83;
  void *v84;
  int v85;
  id v86;
  char v87;
  int v88;
  int v89;
  int v90;
  id v91;
  id v92;
  char v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  id v98;
  id v99;
  char v100;
  id v101;
  id v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  BOOL v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  char v114;
  char v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  uint64_t v217;
  void *v218;
  void *v219;
  void *v220;
  int v221;
  int v222;

  v3 = *a1;
  v4 = (_QWORD *)*((_QWORD *)a1 + 1);
  v200 = *((_QWORD *)a1 + 2);
  v217 = *((_QWORD *)a1 + 3);
  v197 = *((_QWORD *)a1 + 4);
  v209 = *((_QWORD *)a1 + 5);
  v5 = *((_QWORD *)a1 + 7);
  v195 = *((_QWORD *)a1 + 6);
  v192 = (void *)*((_QWORD *)a1 + 8);
  v6 = (void *)*((_QWORD *)a1 + 10);
  v190 = (void *)*((_QWORD *)a1 + 9);
  v7 = (void *)*((_QWORD *)a1 + 11);
  v8 = (void *)*((_QWORD *)a1 + 12);
  v10 = *((_QWORD *)a1 + 13);
  v9 = *((_QWORD *)a1 + 14);
  v11 = *((_QWORD *)a1 + 15);
  v12 = *((_QWORD *)a1 + 16);
  v13 = a1[136];
  v14 = a1[137];
  v15 = a1[138];
  v16 = a1[139];
  v17 = *a2;
  v18 = (_QWORD *)*((_QWORD *)a2 + 1);
  v198 = *((_QWORD *)a2 + 2);
  v213 = *((_QWORD *)a2 + 3);
  v196 = *((_QWORD *)a2 + 4);
  v206 = *((_QWORD *)a2 + 5);
  v193 = *((_QWORD *)a2 + 7);
  v194 = *((_QWORD *)a2 + 6);
  v191 = (void *)*((_QWORD *)a2 + 8);
  v19 = (void *)*((_QWORD *)a2 + 10);
  v189 = (void *)*((_QWORD *)a2 + 9);
  v21 = (void *)*((_QWORD *)a2 + 11);
  v20 = (void *)*((_QWORD *)a2 + 12);
  v23 = *((_QWORD *)a2 + 13);
  v22 = *((_QWORD *)a2 + 14);
  v25 = *((_QWORD *)a2 + 15);
  v24 = *((_QWORD *)a2 + 16);
  v26 = a2[136];
  v27 = a2[137];
  v28 = a2[138];
  v29 = a2[139];
  if (v3 == 2)
  {
    if (v17 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v17 == 2 || ((((v3 & 1) == 0) ^ v17) & 1) == 0)
      return result;
  }
  if (v4)
  {
    if (!v18)
      return 0;
    v175 = *((_QWORD *)a2 + 15);
    v182 = v8;
    v127 = v15;
    v31 = a2[139];
    v139 = (void *)*((_QWORD *)a2 + 12);
    v145 = *((_QWORD *)a2 + 13);
    v32 = a2[138];
    v33 = v13;
    v129 = (void *)*((_QWORD *)a2 + 11);
    v132 = (void *)*((_QWORD *)a2 + 10);
    v34 = a2[137];
    v151 = *((_QWORD *)a2 + 14);
    v157 = v9;
    v163 = v10;
    v169 = v6;
    v35 = v16;
    v133 = *((_QWORD *)a2 + 16);
    v36 = a2[136];
    v37 = v11;
    v38 = v7;
    v39 = v12;
    v40 = specialized static Array<A>.== infix(_:_:)(v4, v18);
    v12 = v39;
    v7 = v38;
    v11 = v37;
    v19 = v132;
    v24 = v133;
    v26 = v36;
    v16 = v35;
    v10 = v163;
    v6 = v169;
    v22 = v151;
    v9 = v157;
    v27 = v34;
    v21 = v129;
    v13 = v33;
    v25 = v175;
    v8 = v182;
    v28 = v32;
    v20 = v139;
    v23 = v145;
    v29 = v31;
    v15 = v127;
    if ((v40 & 1) == 0)
      return 0;
  }
  else if (v18)
  {
    return 0;
  }
  if (!v217)
  {
    if (v213)
      return 0;
LABEL_18:
    if (v209)
    {
      if (!v206)
        return 0;
      if (v197 != v196 || v209 != v206)
      {
        v135 = v24;
        v202 = v11;
        v123 = v12;
        v219 = v7;
        v50 = v29;
        v177 = v25;
        v184 = v8;
        v51 = v28;
        v141 = v20;
        v147 = v23;
        v52 = v13;
        v53 = v27;
        v153 = v22;
        v159 = v9;
        v165 = v10;
        v171 = v6;
        v54 = v16;
        v55 = v21;
        v56 = v26;
        v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v12 = v123;
        v11 = v202;
        v24 = v135;
        v26 = v56;
        v21 = v55;
        v16 = v54;
        v10 = v165;
        v6 = v171;
        v22 = v153;
        v9 = v159;
        v27 = v53;
        v13 = v52;
        v20 = v141;
        v23 = v147;
        v28 = v51;
        v25 = v177;
        v8 = v184;
        v29 = v50;
        v7 = v219;
        v58 = v57;
        result = 0;
        if ((v58 & 1) == 0)
          return result;
      }
    }
    else if (v206)
    {
      return 0;
    }
    if (v195)
    {
      if (!v194)
        return 0;
      v207 = v29;
      v210 = v28;
      v178 = v25;
      v142 = v20;
      v148 = v23;
      v59 = v13;
      v214 = v27;
      v154 = v22;
      v160 = v9;
      v166 = v10;
      v172 = v6;
      v60 = v16;
      v130 = v21;
      v61 = v26;
      v185 = v8;
      v62 = v24;
      v63 = v11;
      v64 = v19;
      v65 = v12;
      v66 = specialized static Dictionary<>.== infix(_:_:)(v195, v194);
      v12 = v65;
      v19 = v64;
      v11 = v63;
      v24 = v62;
      v25 = v178;
      v8 = v185;
      v26 = v61;
      v21 = v130;
      v16 = v60;
      v10 = v166;
      v6 = v172;
      v22 = v154;
      v9 = v160;
      v27 = v214;
      v13 = v59;
      v20 = v142;
      v23 = v148;
      v28 = v210;
      v29 = v207;
      if ((v66 & 1) == 0)
        return 0;
    }
    else if (v194)
    {
      return 0;
    }
    if (v5)
    {
      if (!v193)
        return 0;
      v220 = v7;
      v67 = v29;
      v211 = v28;
      v179 = v25;
      v143 = v20;
      v149 = v23;
      v68 = v13;
      v215 = v27;
      v155 = v22;
      v161 = v9;
      v167 = v10;
      v173 = v6;
      v69 = v16;
      v131 = v21;
      v70 = v26;
      v186 = v8;
      v71 = v24;
      v72 = v11;
      v73 = v19;
      v74 = v12;
      v75 = specialized static Dictionary<>.== infix(_:_:)(v5, v193);
      v12 = v74;
      v19 = v73;
      v11 = v72;
      v24 = v71;
      v25 = v179;
      v8 = v186;
      v26 = v70;
      v21 = v131;
      v16 = v69;
      v10 = v167;
      v6 = v173;
      v22 = v155;
      v9 = v161;
      v27 = v215;
      v13 = v68;
      v20 = v143;
      v23 = v149;
      v28 = v211;
      v29 = v67;
      v7 = v220;
      if ((v75 & 1) == 0)
        return 0;
    }
    else if (v193)
    {
      return 0;
    }
    if (v192)
    {
      if (!v191)
        return 0;
      v168 = v10;
      v174 = v6;
      v156 = v22;
      v162 = v9;
      v216 = v27;
      v199 = v13;
      v212 = v28;
      v208 = v29;
      v221 = v16;
      v119 = v26;
      v136 = v24;
      v203 = v11;
      v180 = v25;
      v124 = v12;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v128 = v14;
      v76 = v191;
      v77 = v20;
      v78 = v15;
      v79 = v192;
      v80 = static _CFObject.== infix(_:_:)();

      v15 = v78;
      v20 = v77;

      v12 = v124;
      v25 = v180;
      v11 = v203;
      v24 = v136;
      v26 = v119;
      v14 = v128;
      v16 = v221;
      if ((v80 & 1) == 0)
        return 0;
    }
    else
    {
      v168 = v10;
      v174 = v6;
      v156 = v22;
      v162 = v9;
      v216 = v27;
      v199 = v13;
      v212 = v28;
      v208 = v29;
      if (v191)
        return 0;
    }
    if (v190)
    {
      if (!v189)
        return 0;
      v150 = v23;
      v181 = v25;
      v187 = v8;
      v222 = v16;
      v120 = v26;
      v137 = v24;
      v204 = v11;
      v125 = v12;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v81 = v21;
      v82 = v14;
      v83 = v189;
      v84 = v20;
      v85 = v15;
      v86 = v190;
      v87 = static _CFObject.== infix(_:_:)();

      v15 = v85;
      v20 = v84;

      v12 = v125;
      v11 = v204;
      v24 = v137;
      v26 = v120;
      v14 = v82;
      v21 = v81;
      v16 = v222;
      v8 = v187;
      if ((v87 & 1) == 0)
        return 0;
    }
    else
    {
      v150 = v23;
      v181 = v25;
      if (v189)
        return 0;
    }
    v121 = v26;
    v138 = v24;
    v144 = v20;
    v126 = v12;
    v188 = v8;
    if (v174)
    {
      v205 = v11;
      if (!v19)
        return 0;
      v88 = v14;
      v89 = v15;
      v90 = v16;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v91 = v19;
      v92 = v174;
      v93 = static _CFObject.== infix(_:_:)();

      v16 = v90;
      v15 = v89;
      v14 = v88;
      v11 = v205;
      if ((v93 & 1) == 0)
        return 0;
    }
    else if (v19)
    {
      return 0;
    }
    if (v7)
    {
      if (!v21)
        return 0;
      v94 = v11;
      v95 = v14;
      v96 = v15;
      v97 = v16;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v98 = v21;
      v99 = v7;
      v100 = static _CFObject.== infix(_:_:)();

      if ((v100 & 1) == 0)
        return 0;
    }
    else
    {
      v94 = v11;
      v95 = v14;
      v96 = v15;
      v97 = v16;
      if (v21)
        return 0;
    }
    if (v188)
    {
      if (!v144)
        return 0;
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v101 = v144;
      v102 = v188;
      v103 = static _CFObject.== infix(_:_:)();

      if ((v103 & 1) == 0)
        return 0;
    }
    else if (v144)
    {
      return 0;
    }
    if (v168)
    {
      if (!v150)
        return 0;
      swift_bridgeObjectRetain();
      v104 = swift_bridgeObjectRetain();
      v105 = specialized static Dictionary<>.== infix(_:_:)(v104, v150);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v105 & 1) == 0)
        return 0;
    }
    else if (v150)
    {
      return 0;
    }
    if (v162)
    {
      if (!v156)
        return 0;
      swift_bridgeObjectRetain();
      v106 = swift_bridgeObjectRetain();
      v107 = specialized static Dictionary<>.== infix(_:_:)(v106, v156);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v107 & 1) == 0)
        return 0;
    }
    else if (v156)
    {
      return 0;
    }
    if (v126)
    {
      if (v138)
      {
        v108 = v94 == v181;
        v109 = v208;
        v110 = v212;
        v111 = v199;
        v112 = v216;
        v113 = v121;
        if (!v108 || v126 != v138)
        {
          v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v113 = v121;
          v115 = v114;
          result = 0;
          if ((v115 & 1) == 0)
            return result;
        }
LABEL_78:
        if (v111 == 2)
        {
          v116 = v95;
          if (v113 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v113 == 2)
            return result;
          v116 = v95;
          if (((v113 ^ v111) & 1) != 0)
            return result;
        }
        if (v116 == 2)
        {
          v117 = v96;
          if (v112 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v112 == 2)
            return result;
          v117 = v96;
          if (((v112 ^ v95) & 1) != 0)
            return result;
        }
        if (v117 == 2)
        {
          v118 = v97;
          if (v110 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v110 == 2)
            return result;
          v118 = v97;
          if (((((v96 & 1) == 0) ^ v110) & 1) == 0)
            return result;
        }
        if (v118 == 2)
        {
          if (v109 != 2)
            return 0;
        }
        else if (v109 == 2 || ((((v97 & 1) == 0) ^ v109) & 1) == 0)
        {
          return 0;
        }
        return 1;
      }
    }
    else
    {
      v109 = v208;
      v110 = v212;
      v111 = v199;
      v112 = v216;
      v113 = v121;
      if (!v138)
        goto LABEL_78;
    }
    return 0;
  }
  if (!v213)
    return 0;
  if (v200 == v198 && v217 == v213)
    goto LABEL_18;
  v134 = v24;
  v201 = v11;
  v122 = v12;
  v218 = v7;
  v41 = v29;
  v176 = v25;
  v183 = v8;
  v42 = v28;
  v140 = v20;
  v146 = v23;
  v43 = v13;
  v44 = v27;
  v152 = v22;
  v158 = v9;
  v164 = v10;
  v170 = v6;
  v45 = v16;
  v46 = v21;
  v47 = v26;
  v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v12 = v122;
  v11 = v201;
  v24 = v134;
  v26 = v47;
  v21 = v46;
  v16 = v45;
  v10 = v164;
  v6 = v170;
  v22 = v152;
  v9 = v158;
  v27 = v44;
  v13 = v43;
  v20 = v140;
  v23 = v146;
  v28 = v42;
  v25 = v176;
  v8 = v183;
  v29 = v41;
  v7 = v218;
  v49 = v48;
  result = 0;
  if ((v49 & 1) != 0)
    goto LABEL_18;
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit;
  if (!lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalePreferences.MeasurementUnit, &type metadata for LocalePreferences.MeasurementUnit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit;
  if (!lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalePreferences.TemperatureUnit, &type metadata for LocalePreferences.TemperatureUnit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences and conformance LocalePreferences()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences;
  if (!lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalePreferences, &type metadata for LocalePreferences);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences);
  }
  return result;
}

uint64_t destroy for LocalePreferences(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocalePreferences(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v8 = *(void **)(a2 + 72);
  v7 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v7;
  v10 = *(void **)(a2 + 88);
  v9 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v9;
  v18 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v18;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v6;
  v13 = v8;
  v14 = v7;
  v15 = v10;
  v16 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocalePreferences(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 64);
  v5 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = v5;

  v7 = *(void **)(a1 + 72);
  v8 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 80);
  v11 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 88);
  v14 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  v15 = v14;

  v16 = *(void **)(a1 + 96);
  v17 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  v18 = v17;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  return a1;
}

__n128 __swift_memcpy140_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for LocalePreferences(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  v7 = *(void **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalePreferences(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 140))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalePreferences(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 140) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 140) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.MeasurementUnit()
{
  return &type metadata for LocalePreferences.MeasurementUnit;
}

uint64_t storeEnumTagSinglePayload for LocalePreferences.MeasurementUnit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C10314 + 4 * byte_1820FB315[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C10348 + 4 * byte_1820FB310[v4]))();
}

uint64_t sub_181C10348(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C10350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C10358);
  return result;
}

uint64_t sub_181C10364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C1036CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C10370(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C10378(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.TemperatureUnit()
{
  return &type metadata for LocalePreferences.TemperatureUnit;
}

void destroy for LocalePreferences.ICUSymbolsAndStrings(id *a1)
{

}

_QWORD *initializeWithCopy for LocalePreferences.ICUSymbolsAndStrings(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = *(void **)(a2 + 32);
  a1[4] = v7;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = v7;
  return a1;
}

uint64_t assignWithCopy for LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = v17;

  return a1;
}

uint64_t assignWithTake for LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for LocalePreferences.ICUSymbolsAndStrings(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalePreferences.ICUSymbolsAndStrings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.ICUSymbolsAndStrings()
{
  return &type metadata for LocalePreferences.ICUSymbolsAndStrings;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings;
  if (!lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalePreferences.ICUSymbolsAndStrings, &type metadata for LocalePreferences.ICUSymbolsAndStrings);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings);
  }
  return result;
}

uint64_t UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  return UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *DynamicType;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t MetatypeMetadata;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 v121;
  char v122;

  v106 = a8;
  v107 = a6;
  v104 = a5;
  v100 = a2;
  v108 = a7;
  v109 = a1;
  v10 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  v112 = 8 * a4;
  if (a4 == 1)
  {
    v113 = &v96;
    MetatypeMetadata = swift_getMetatypeMetadata();
    MEMORY[0x1E0C80A78](MetatypeMetadata);
    v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = type metadata accessor for PredicateExpressions.Variable(0, *v10, v13, v14);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      v18 = v10;
      v19 = (uint64_t *)((char *)&v96 - v17);
      v20 = a4;
      do
      {
        ++v18;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }
      while (v20);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v113 = &v96;
    MetatypeMetadata = TupleTypeMetadata;
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v12 = (char *)&v96 - v22;
    MEMORY[0x1E0C80A78](v23);
    v26 = (uint64_t *)((char *)&v96 - v17);
    if (a4)
    {
      v27 = v10;
      v28 = v26;
      v29 = a4;
      do
      {
        v30 = *v27++;
        *v28++ = type metadata accessor for PredicateExpressions.Variable(255, v30, v24, v25);
        --v29;
      }
      while (v29);
    }
    v15 = swift_getTupleTypeMetadata();
  }
  v103 = &v96;
  v98 = v15;
  MEMORY[0x1E0C80A78](v15);
  v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v102 = &v96;
  v111 = v33;
  v101 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)a3;
  v36 = *(_QWORD *)(a3 + 8);
  v38 = *(_BYTE *)(a3 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v110 = v35;
  v39 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  v106 = &v96;
  MEMORY[0x1E0C80A78](v39);
  v42 = (uint64_t **)((char *)&v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a4)
  {
    v43 = 0;
    v44 = (int *)(v98 + 32);
    v45 = v100;
    do
    {
      if (a4 == 1)
        v46 = 0;
      else
        v46 = *v44;
      *(_QWORD *)&v32[v46] = **(_QWORD **)(v45 + 8 * v43);
      v42[v43++] = (uint64_t *)&v32[v46];
      v44 += 4;
    }
    while (a4 != v43);
    v105 = &v96;
    v119 = v37;
    v120 = v36;
    v121 = v38;
    MEMORY[0x1E0C80A78](v40);
    v48 = (char *)&v96 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    v49 = 0;
    v50 = (int *)(MetatypeMetadata + 32);
    do
    {
      if (a4 == 1)
        v51 = 0;
      else
        v51 = *v50;
      v52 = &v12[v51];
      *(_QWORD *)v52 = v10[v49];
      *(_QWORD *)&v48[8 * v49++] = v52;
      v50 += 4;
    }
    while (a4 != v49);
  }
  else
  {
    v105 = &v96;
    v119 = v37;
    v120 = v36;
    v48 = &v122;
    v121 = v38;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v48, a4, v108);
  v53 = v107;
  v117 = v107;
  v54 = __swift_allocate_boxed_opaque_existential_1(&v114);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v54, v109, v53);
  __swift_project_boxed_opaque_existential_1(&v114, v117);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  v57 = v119;
  v56 = v120;
  v114 = v119;
  v115 = v120;
  LODWORD(v104) = v121;
  v116 = v121;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  v61 = v110;
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = _typeName(_:qualified:)();
    v75 = v74;
    v114 = 47;
    v115 = 0xE100000000000000;
    v118 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v76._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    v77 = v114;
    v78 = v115;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v79 = v73;
    *(_QWORD *)(v79 + 8) = v75;
    *(_QWORD *)(v79 + 16) = v77;
    *(_QWORD *)(v79 + 24) = v78;
    *(_BYTE *)(v79 + 32) = 0;
    swift_willThrow();
    goto LABEL_27;
  }
  v112 = v56;
  if ((v60 & 1) != 0)
  {
    v96 = (uint64_t)v58;
    MetatypeMetadata = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v98 = MEMORY[0x1E0DEE9D8];
    v72 = v97;
  }
  else
  {
    v62 = (uint64_t)v58;
    v63 = v59;
    v64 = Type.genericArguments2.getter();
    v66 = v65;
    v68 = v67;
    swift_bridgeObjectRetain();
    LOBYTE(v95) = 0;
    v69 = v64;
    v70 = v97;
    v71 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v69, v66, v68, v57, v112, v104, MEMORY[0x1E0DEE9D8], v62, v63);
    v72 = v70;
    if (v70)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v80 = v101;
      return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
    }
    v98 = v71;
    v96 = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MetatypeMetadata = v63;
    swift_bridgeObjectRelease();
  }
  v81 = v113;
  LOBYTE(v118) = 0;
  v82 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v113 = v81;
  v100 = v57;
  if (a4)
  {
    v83 = a4;
    while (1)
    {
      v84 = *v10;
      v118 = **v42;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v114, v117);
      v87 = type metadata accessor for PredicateExpressions.Variable(0, v84, v85, v86);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v87);
      v82 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v72)
        break;
      ++v42;
      ++v10;
      if (!--v83)
        goto LABEL_34;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
    v80 = v101;
    v61 = v110;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }
LABEL_34:
  MEMORY[0x1E0C80A78](v82);
  v88 = v107;
  *(&v96 - 10) = a4;
  *(&v96 - 9) = v88;
  *(&v96 - 8) = v108;
  *(&v96 - 7) = v89;
  v61 = v110;
  *(&v96 - 6) = v90;
  *(&v96 - 5) = (uint64_t)v61;
  v91 = MetatypeMetadata;
  *(&v96 - 4) = v96;
  *(&v96 - 3) = v91;
  v94 = v98;
  v95 = v109;
  specialized _withPredicateArchivingState<A>(_:_:)(v100, v112, v104, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  if (v72)
  {
    v80 = v101;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v61, v111);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t MetatypeMetadata;
  uint64_t v12;
  char *v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t k;
  int v42;
  _QWORD **v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t m;
  int v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t n;
  int v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  Swift::String v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char **v80;
  char **v81;
  char **v82;
  char **v83;
  _QWORD v84[4];
  uint64_t v85[5];
  __int128 v86;
  uint64_t v87;
  __int128 v88[2];
  _BYTE v89[40];
  _QWORD v90[2];
  char v91;
  __int128 v92[2];
  _QWORD v93[8];

  v74 = a8;
  v75 = a6;
  v69 = a3;
  v79 = a2;
  v73 = a1;
  if (a5 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (i = 0; i < a5; ++i)
      *(_QWORD *)&v13[8 * i] = swift_getMetatypeMetadata();
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v93[7] = &v62;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v65 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = a7;
  v67 = v15;
  if (a5 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(a7 & 0xFFFFFFFFFFFFFFFELL), v16, v17);
  }
  else
  {
    MEMORY[0x1E0C80A78](v15);
    v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (j = 0; j < a5; ++j)
      *(_QWORD *)&v23[8 * j] = type metadata accessor for PredicateExpressions.Variable(255, *(_QWORD *)((a7 & 0xFFFFFFFFFFFFFFFELL) + 8 * j), v20, v21);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v68 = TupleTypeMetadata;
  v63 = *(_QWORD *)(TupleTypeMetadata - 8);
  v83 = &v62;
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v66 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = &v62;
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v62 - v27;
  v81 = &v62;
  MEMORY[0x1E0C80A78](v29);
  v62 = (char *)&v62 - v30;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v77 = *(_QWORD *)(v78 - 8);
  v80 = &v62;
  MEMORY[0x1E0C80A78](v78);
  v32 = (char *)&v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *a4;
  v34 = a4[1];
  v35 = *((_BYTE *)a4 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v36 = v64;
  result = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  if (!v36)
  {
    v72 = &v62;
    MEMORY[0x1E0C80A78](result);
    v40 = (char *)&v62 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (k = 0; k != a5; ++k)
    {
      if (a5 == 1)
        v42 = 0;
      else
        v42 = *(_DWORD *)(v68 + 24 + 16 * k + 8);
      *(_QWORD *)&v40[8 * k] = &v28[v42];
    }
    v70 = &v62;
    MEMORY[0x1E0C80A78](v38);
    v46 = (char *)&v62 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (m = 0; m != a5; ++m)
    {
      if (a5 == 1)
        v48 = 0;
      else
        v48 = *(_DWORD *)(v44 + 24 + 16 * m + 8);
      v49 = &v65[v48];
      *(_QWORD *)v49 = **(_QWORD **)(v69 + 8 * m);
      *(_QWORD *)&v46[8 * m] = v49;
    }
    v90[0] = v33;
    v90[1] = v34;
    v91 = v35 & 1;
    KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)((uint64_t)v92, v43, (uint64_t)v46, MEMORY[0x1E0DEAFA0], (uint64_t)v90, a5, v71, MEMORY[0x1E0DEAFA0]);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v92, (uint64_t)v93);
    v50 = v63;
    v51 = v62;
    v52 = v68;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v28, v68);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v93, (uint64_t)v88);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v88, (uint64_t)&v86);
    if (v87)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v86, (uint64_t)v89);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v89, v73);
      v53 = v66;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v66, v51, v52);
      for (n = 0; n != a5; ++n)
      {
        if (a5 == 1)
          v55 = 0;
        else
          v55 = *(_DWORD *)(v52 + 24 + 16 * n + 8);
        **(_QWORD **)(v79 + 8 * n) = *(_QWORD *)&v53[v55];
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
      return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v32, v78);
    }
    else
    {
      v56 = v75;
      v85[3] = v75;
      v85[4] = v74;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v85);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(boxed_opaque_existential_1, v76, v56);
      v84[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v84[3] = v58;
      v59 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("This expression has an unsupported output type of ", 0x32uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v59);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v93, v93[3]);
      swift_getDynamicType();
      static PredicateExpression.outputType.getter();
      default argument 1 of _typeName(_:qualified:)();
      v84[0] = _typeName(_:qualified:)();
      v84[1] = v60;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String((uint64_t)v84);
      v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" (expected Bool)", 0x10uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v61);
      swift_bridgeObjectRelease();
      String.init(stringInterpolation:)();
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
      return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v32, v78);
    }
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpression<A, each B>(input:output:predicateConfiguration:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v16;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t TupleTypeMetadata2;
  uint64_t v32;
  uint64_t v33;
  uint64_t MetatypeMetadata;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t result;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD **v91;
  char *v92;
  int *v93;
  uint64_t v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119[2];
  char v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  char v127;

  v102 = a1;
  v111 = a8;
  v16 = (uint64_t *)(a8 & 0xFFFFFFFFFFFFFFFELL);
  v105 = a9;
  *(_QWORD *)&v121 = a9;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v107 = a2;
  v116 = a7;
  v117 = v11;
  v114 = a10;
  v115 = v10;
  if (a6 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *v16, v18, v19);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    v21 = v16;
    MEMORY[0x1E0C80A78](ExtendedExistentialTypeMetadata);
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      v26 = v16;
      v27 = (uint64_t *)((char *)&v97 - v25);
      v28 = a6;
      do
      {
        v29 = *v26++;
        *v27++ = type metadata accessor for PredicateExpressions.Variable(255, v29, v22, v23);
        --v28;
      }
      while (v28);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v16 = v21;
  }
  v30 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v103 = (__int128 *)((char *)&v97 - v33);
  v118 = &v97;
  v101 = TupleTypeMetadata;
  v104 = v32;
  v110 = a6;
  v112 = v16;
  if (a6 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](v32);
    v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      v37 = v112;
      v38 = (uint64_t *)((char *)&v97 - v36);
      v39 = a6;
      do
      {
        ++v37;
        *v38++ = swift_getMetatypeMetadata();
        --v39;
      }
      while (v39);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v106 = MetatypeMetadata;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v41 = (char *)&v97 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v43 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v45 = (char *)&v97 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46);
  v48 = (char *)&v97 - v47;
  v109 = *(_QWORD *)v30;
  *(_QWORD *)&v113 = *(_QWORD *)(v30 + 8);
  LODWORD(v108) = *(unsigned __int8 *)(v30 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v49 = v117;
  result = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  if (v49)
    return result;
  v51 = v108;
  v99 = v45;
  v114 = 0;
  v100 = v43;
  v115 = &v97;
  v116 = &v97;
  v117 = &v97;
  v52 = v110;
  v53 = 8 * v110;
  MEMORY[0x1E0C80A78](result);
  v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0;
  v98 = (char *)&v97 - v54;
  if (v52)
  {
    memcpy((char *)&v97 - v54, v107, 8 * v52);
    v107 = &v97;
    v124 = v109;
    v125 = v113;
    v126 = v51;
    MEMORY[0x1E0C80A78](v109);
    v55 = (char *)&v97 - v54;
    v56 = 0;
    v57 = (int *)(v106 + 32);
    v59 = v111;
    v58 = v112;
    do
    {
      if (v52 == 1)
        v60 = 0;
      else
        v60 = *v57;
      v61 = &v41[v60];
      *(_QWORD *)v61 = v58[v56];
      *(_QWORD *)&v55[8 * v56++] = v61;
      v57 += 4;
    }
    while (v52 != v56);
  }
  else
  {
    v107 = &v97;
    v124 = v109;
    v125 = v113;
    v55 = &v127;
    v126 = v51;
    v59 = v111;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v55, v52, v59);
  LOBYTE(v119[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  v62 = v42;
  v63 = v48;
  v64 = v114;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v64)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v65 = v100;
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v63, v62);
  }
  *(_QWORD *)&v113 = v48;
  v66 = v121;
  v67 = (uint64_t *)v122;
  v68 = v125;
  LODWORD(v109) = v126;
  v69 = *(_QWORD *)(v125 + 16);
  v114 = v124;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v69)
    goto LABEL_29;
  swift_bridgeObjectRetain();
  v70 = specialized __RawDictionaryStorage.find<A>(_:)(v66, *((uint64_t *)&v66 + 1));
  if ((v71 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    v112 = v67;
    *(_QWORD *)&v121 = 47;
    *((_QWORD *)&v121 + 1) = 0xE100000000000000;
    v119[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v77._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    v78 = v121;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)v79 = v66;
    *(_OWORD *)(v79 + 16) = v78;
    *(_BYTE *)(v79 + 32) = 1;
    swift_willThrow();
    v65 = v100;
    goto LABEL_30;
  }
  v108 = &v97;
  v72 = *(_QWORD *)(v68 + 56) + 16 * v70;
  v106 = *(_QWORD *)v72;
  v73 = *(_BYTE *)(v72 + 8);
  swift_bridgeObjectRelease();
  if ((v73 & 1) != 0)
  {
    v74 = v114;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v75 = swift_bridgeObjectRetain();
    v76 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v75, v74, v68, v109, MEMORY[0x1E0DEE9D8], v66, *((uint64_t *)&v66 + 1));
    v112 = v67;
    v84 = v76;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = PartialType.create2(with:)();
    if (v85)
    {
      v86 = v85;
      swift_bridgeObjectRelease();
      v97 = v68;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v80 = v86;
      v63 = (char *)v113;
      goto LABEL_34;
    }
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v90 = v106;
    *(_QWORD *)(v90 + 8) = v84;
    *(_QWORD *)(v90 + 16) = 0;
    *(_QWORD *)(v90 + 24) = 0;
    *(_BYTE *)(v90 + 32) = 2;
    swift_willThrow();
    v65 = v100;
LABEL_30:
    v63 = (char *)v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v63, v62);
  }
  swift_bridgeObjectRelease();
  v97 = v68;
  swift_bridgeObjectRelease();
  v63 = (char *)v113;
  v80 = v106;
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v119[0] = v80;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v123 = v105;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v121) = 2;
    v65 = v100;
    v83 = v99;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v99, v63, v62);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>, MEMORY[0x1E0DED060]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v83, v62);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v63, v62);
  }
  v113 = v121;
  v81 = v122;
  LOBYTE(v119[0]) = 0;
  v82 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v119[0] = v114;
  v119[1] = v97;
  v120 = v109;
  MEMORY[0x1E0C80A78](v82);
  v87 = v111;
  *(&v97 - 8) = v52;
  *(&v97 - 7) = v87;
  *(&v97 - 6) = v105;
  *(&v97 - 5) = (uint64_t)&v121;
  *((_OWORD *)&v97 - 2) = v113;
  *(&v97 - 2) = v81;
  *(&v97 - 1) = (uint64_t)v63;
  v88 = v103;
  v89 = v104;
  _withPredicateArchivingState<A>(_:_:)(v119, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v88, v102);
  v91 = (_QWORD **)v98;
  if (v52)
  {
    v92 = (char *)v88 + *(int *)(v89 + 48);
    v93 = (int *)(v101 + 32);
    v94 = v52;
    do
    {
      if (v52 == 1)
        v95 = 0;
      else
        v95 = *v93;
      v96 = *v91++;
      *v96 = *(_QWORD *)&v92[v95];
      v93 += 4;
      --v94;
    }
    while (v94);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
  return (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v63, v62);
}

uint64_t KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *DynamicType;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t MetatypeMetadata;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 v121;
  char v122;

  v107 = a7;
  v105 = a5;
  v100 = a3;
  v104 = a2;
  v108 = a8;
  v109 = a1;
  v10 = (uint64_t *)(a8 & 0xFFFFFFFFFFFFFFFELL);
  v112 = 8 * a6;
  if (a6 == 1)
  {
    v113 = &v96;
    MetatypeMetadata = swift_getMetatypeMetadata();
    MEMORY[0x1E0C80A78](MetatypeMetadata);
    v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = type metadata accessor for PredicateExpressions.Variable(0, *v10, v13, v14);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      v18 = v10;
      v19 = (uint64_t *)((char *)&v96 - v17);
      v20 = a6;
      do
      {
        ++v18;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }
      while (v20);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v113 = &v96;
    MetatypeMetadata = TupleTypeMetadata;
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v12 = (char *)&v96 - v22;
    MEMORY[0x1E0C80A78](v23);
    v26 = (uint64_t *)((char *)&v96 - v17);
    if (a6)
    {
      v27 = v10;
      v28 = v26;
      v29 = a6;
      do
      {
        v30 = *v27++;
        *v28++ = type metadata accessor for PredicateExpressions.Variable(255, v30, v24, v25);
        --v29;
      }
      while (v29);
    }
    v15 = swift_getTupleTypeMetadata();
  }
  v103 = &v96;
  v98 = v15;
  MEMORY[0x1E0C80A78](v15);
  v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v102 = &v96;
  v111 = v33;
  v101 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)a4;
  v36 = *(_QWORD *)(a4 + 8);
  v38 = *(_BYTE *)(a4 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v110 = v35;
  v39 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v106 = &v96;
  MEMORY[0x1E0C80A78](v39);
  v42 = (uint64_t **)((char *)&v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a6)
  {
    v43 = 0;
    v44 = (int *)(v98 + 32);
    v45 = v100;
    do
    {
      if (a6 == 1)
        v46 = 0;
      else
        v46 = *v44;
      *(_QWORD *)&v32[v46] = **(_QWORD **)(v45 + 8 * v43);
      v42[v43++] = (uint64_t *)&v32[v46];
      v44 += 4;
    }
    while (a6 != v43);
    v105 = &v96;
    v119 = v37;
    v120 = v36;
    v121 = v38;
    MEMORY[0x1E0C80A78](v40);
    v48 = (char *)&v96 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    v49 = 0;
    v50 = (int *)(MetatypeMetadata + 32);
    do
    {
      if (a6 == 1)
        v51 = 0;
      else
        v51 = *v50;
      v52 = &v12[v51];
      *(_QWORD *)v52 = v10[v49];
      *(_QWORD *)&v48[8 * v49++] = v52;
      v50 += 4;
    }
    while (a6 != v49);
  }
  else
  {
    v105 = &v96;
    v119 = v37;
    v120 = v36;
    v48 = &v122;
    v121 = v38;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v48, a6, v108);
  v53 = v107;
  v117 = v107;
  v54 = __swift_allocate_boxed_opaque_existential_1(&v114);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v54, v109, v53);
  __swift_project_boxed_opaque_existential_1(&v114, v117);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  v57 = v119;
  v56 = v120;
  v114 = v119;
  v115 = v120;
  LODWORD(v104) = v121;
  v116 = v121;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  v61 = v110;
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = _typeName(_:qualified:)();
    v75 = v74;
    v114 = 47;
    v115 = 0xE100000000000000;
    v118 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v76._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    v77 = v114;
    v78 = v115;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v79 = v73;
    *(_QWORD *)(v79 + 8) = v75;
    *(_QWORD *)(v79 + 16) = v77;
    *(_QWORD *)(v79 + 24) = v78;
    *(_BYTE *)(v79 + 32) = 0;
    swift_willThrow();
    goto LABEL_27;
  }
  v112 = v56;
  if ((v60 & 1) != 0)
  {
    v96 = (uint64_t)v58;
    MetatypeMetadata = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v98 = MEMORY[0x1E0DEE9D8];
    v72 = v97;
  }
  else
  {
    v62 = (uint64_t)v58;
    v63 = v59;
    v64 = Type.genericArguments2.getter();
    v66 = v65;
    v68 = v67;
    swift_bridgeObjectRetain();
    LOBYTE(v95) = 0;
    v69 = v64;
    v70 = v97;
    v71 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v69, v66, v68, v57, v112, v104, MEMORY[0x1E0DEE9D8], v62, v63);
    v72 = v70;
    if (v70)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v80 = v101;
      return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
    }
    v98 = v71;
    v96 = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MetatypeMetadata = v63;
    swift_bridgeObjectRelease();
  }
  v81 = v113;
  LOBYTE(v118) = 0;
  v82 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v113 = v81;
  v100 = v57;
  if (a6)
  {
    v83 = a6;
    while (1)
    {
      v84 = *v10;
      v118 = **v42;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v114, v117);
      v87 = type metadata accessor for PredicateExpressions.Variable(0, v84, v85, v86);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v87);
      v82 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v72)
        break;
      ++v42;
      ++v10;
      if (!--v83)
        goto LABEL_34;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
    v80 = v101;
    v61 = v110;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }
LABEL_34:
  MEMORY[0x1E0C80A78](v82);
  v88 = v107;
  *(&v96 - 10) = a6;
  *(&v96 - 9) = v88;
  *(&v96 - 8) = v108;
  *(&v96 - 7) = v89;
  v61 = v110;
  *(&v96 - 6) = v90;
  *(&v96 - 5) = (uint64_t)v61;
  v91 = MetatypeMetadata;
  *(&v96 - 4) = v96;
  *(&v96 - 3) = v91;
  v94 = v98;
  v95 = v109;
  specialized _withPredicateArchivingState<A>(_:_:)(v100, v112, v104, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  if (v72)
  {
    v80 = v101;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v61, v111);
}

uint64_t KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t *v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  int *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t *DynamicType;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(uint64_t);
  uint64_t v112;
  char *v113;
  _QWORD v114[2];
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned __int8 v146;
  char v147;

  v125 = a8;
  v11 = (uint64_t *)(a8 & 0xFFFFFFFFFFFFFFFELL);
  v122 = a5;
  v121 = a2;
  v136 = a4;
  v137 = a1;
  if (a6 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v13 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      v16 = v11;
      v17 = (_QWORD *)((char *)v114 - v15);
      v18 = a6;
      do
      {
        ++v16;
        *v17++ = swift_getMetatypeMetadata();
        --v18;
      }
      while (v18);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v13 = MetatypeMetadata;
  }
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v20 = (char *)v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  MEMORY[0x1E0C80A78](v126);
  v134 = v114;
  v135 = v25;
  v118 = v26;
  v127 = v11;
  v128 = (char *)v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = v20;
  v116 = v13;
  if (a6 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v11, v22, v23);
  }
  else
  {
    MEMORY[0x1E0C80A78](v21);
    v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      v32 = v127;
      v33 = (_QWORD *)((char *)v114 - v31);
      v34 = a6;
      do
      {
        v35 = *v32++;
        *v33++ = type metadata accessor for PredicateExpressions.Variable(255, v35, v28, v29);
        --v34;
      }
      while (v34);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v124 = (_QWORD *)TupleTypeMetadata;
  v133 = v114;
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v37 = (char *)v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = v114;
  MEMORY[0x1E0C80A78](v38);
  v40 = (char *)v114 - v39;
  v41 = type metadata accessor for Optional();
  v131 = v114;
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)v114 - v43;
  v130 = v114;
  v45 = *(_QWORD *)(a7 - 8);
  v47 = MEMORY[0x1E0C80A78](v46);
  v138 = (char *)v114 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = *(_QWORD *)v136;
  v120 = *(_QWORD *)(v136 + 8);
  LODWORD(v136) = *(unsigned __int8 *)(v136 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v42 + 16))(v44, v137, v41, v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v44, 1, a7) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  v137 = v45;
  v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 32))(v138, v44, a7);
  v114[1] = v114;
  MEMORY[0x1E0C80A78](v50);
  v51 = (8 * a6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v115 = v51;
  v52 = (char *)v114 - v51;
  v53 = v128;
  if (a6)
  {
    v54 = (int *)(v124 + 4);
    v55 = (_QWORD *)((char *)v114 - v51);
    v56 = a6;
    do
    {
      if (a6 == 1)
        v57 = 0;
      else
        v57 = *v54;
      v58 = *a3++;
      *(_QWORD *)&v40[v57] = *v58;
      *v55++ = &v40[v57];
      v54 += 4;
      --v56;
    }
    while (v56);
  }
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v59 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  MEMORY[0x1E0C80A78](v59);
  v60 = (uint64_t **)((char *)v114 - v115);
  if (a6)
  {
    v61 = 0;
    v62 = (int *)(v124 + 4);
    v63 = v120;
    v64 = v119;
    v65 = v136;
    do
    {
      if (a6 == 1)
        v66 = 0;
      else
        v66 = *v62;
      *(_QWORD *)&v37[v66] = **(_QWORD **)&v52[8 * v61];
      v60[v61++] = (uint64_t *)&v37[v66];
      v62 += 4;
    }
    while (a6 != v61);
    v124 = v114;
    v144 = v64;
    v145 = v63;
    v146 = v65;
    MEMORY[0x1E0C80A78](v64);
    v68 = (char *)v114 - ((8 * a6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v69 = 0;
    v70 = (int *)(v116 + 32);
    v71 = v137;
    v72 = v127;
    do
    {
      if (a6 == 1)
        v73 = 0;
      else
        v73 = *v70;
      v74 = (_QWORD *)(v67 + v73);
      *v74 = v72[v69];
      *(_QWORD *)&v68[8 * v69++] = v74;
      v70 += 4;
    }
    while (a6 != v69);
  }
  else
  {
    v124 = v114;
    v144 = v119;
    v145 = v120;
    v68 = &v147;
    v146 = v136;
    v71 = v137;
    v72 = v127;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v68, a6, v125);
  v142 = a7;
  v75 = __swift_allocate_boxed_opaque_existential_1(&v139);
  (*(void (**)(uint64_t *, char *, uint64_t))(v71 + 16))(v75, v138, a7);
  __swift_project_boxed_opaque_existential_1(&v139, v142);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  v78 = v144;
  v77 = v145;
  v139 = v144;
  v140 = v145;
  LODWORD(v122) = v146;
  v141 = v146;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v80)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v92 = _typeName(_:qualified:)();
    v94 = v93;
    v139 = 47;
    v140 = 0xE100000000000000;
    v143 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v95._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    v96 = v139;
    v97 = v140;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v98 = v92;
    *(_QWORD *)(v98 + 8) = v94;
    *(_QWORD *)(v98 + 16) = v96;
    *(_QWORD *)(v98 + 24) = v97;
    *(_BYTE *)(v98 + 32) = 0;
    swift_willThrow();
    goto LABEL_38;
  }
  v123 = v77;
  v136 = v78;
  if ((v81 & 1) != 0)
  {
    v119 = (uint64_t)v79;
    v121 = v80;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v82 = (uint64_t)v79;
    v83 = v80;
    v84 = Type.genericArguments2.getter();
    v86 = v85;
    v88 = v87;
    swift_bridgeObjectRetain();
    LOBYTE(v113) = 0;
    v89 = v84;
    v90 = v129;
    v91 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v89, v86, v88, v136, v123, v122, MEMORY[0x1E0DEE9D8], v82, v83);
    if (v90)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v53 = v128;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v99 = v118;
LABEL_49:
      (*(void (**)(char *, uint64_t))(v99 + 8))(v53, v126);
      return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v138, a7);
    }
    v120 = v91;
    v119 = v82;
    v129 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v121 = v83;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v143) = 0;
  v100 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v114[0] = a7;
  if (a6)
  {
    v101 = a6;
    v102 = v129;
    while (1)
    {
      v103 = *v72;
      v143 = **v60;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v139, v142);
      v106 = type metadata accessor for PredicateExpressions.Variable(0, v103, v104, v105);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v106);
      v100 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v102)
        break;
      ++v60;
      ++v72;
      if (!--v101)
        goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
    a7 = v114[0];
    v99 = v118;
    v53 = v128;
    goto LABEL_49;
  }
  v102 = v129;
LABEL_47:
  MEMORY[0x1E0C80A78](v100);
  a7 = v114[0];
  v114[-10] = a6;
  v114[-9] = a7;
  v114[-8] = v125;
  v114[-7] = v107;
  v53 = v128;
  v114[-6] = v108;
  v114[-5] = v53;
  v109 = v121;
  v114[-4] = v119;
  v114[-3] = v109;
  v110 = v138;
  v112 = v120;
  v113 = v138;
  specialized _withPredicateArchivingState<A>(_:_:)(v136, v123, v122, v111);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  if (v102)
  {
    v99 = v118;
    goto LABEL_49;
  }
  (*(void (**)(char *, uint64_t))(v118 + 8))(v53, v126);
  return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v110, a7);
}

uint64_t static PredicateExpression.outputType.getter()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t KeyedDecodingContainer.decodePredicateExpression<A>(forKey:input:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t MetatypeMetadata;
  uint64_t v15;
  char *v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t j;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t k;
  int v49;
  _QWORD **v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t m;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t n;
  int v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD v84[2];
  char v85;
  __int128 v86[2];
  _BYTE v87[32];
  uint64_t v88;

  v9 = v8;
  v80 = a4;
  v70 = a3;
  v88 = a2;
  v82 = a1;
  if (a7 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (i = 0; i < a7; ++i)
      *(_QWORD *)&v16[8 * i] = swift_getMetatypeMetadata();
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v83 = &v64;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v73 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = a8;
  v78 = v18;
  if (a7 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(a8 & 0xFFFFFFFFFFFFFFFELL), v19, v20);
  }
  else
  {
    MEMORY[0x1E0C80A78](v18);
    v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (j = 0; j < a7; ++j)
      *(_QWORD *)&v26[8 * j] = type metadata accessor for PredicateExpressions.Variable(255, *(_QWORD *)((a8 & 0xFFFFFFFFFFFFFFFELL) + 8 * j), v23, v24);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v76 = TupleTypeMetadata;
  v67 = *(_QWORD *)(TupleTypeMetadata - 8);
  v79 = &v64;
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v71 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = &v64;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v64 - v30;
  v75 = &v64;
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v64 - v33;
  v35 = *(_QWORD *)(a6 - 8);
  v74 = &v64;
  MEMORY[0x1E0C80A78](v36);
  v38 = (char *)&v64 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v66 = *(_QWORD *)(v68 - 8);
  v69 = &v64;
  v39 = MEMORY[0x1E0C80A78](v68);
  v41 = (char *)&v64 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = *a5;
  v64 = a5[1];
  v42 = *((_BYTE *)a5 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v35 + 16))(v38, v9, a6, v39);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v43 = v72;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v43)
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, a6);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, a6);
  MEMORY[0x1E0C80A78](v44);
  v47 = (char *)&v64 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  for (k = 0; k != a7; ++k)
  {
    if (a7 == 1)
      v49 = 0;
    else
      v49 = *(_DWORD *)(v76 + 24 + 16 * k + 8);
    *(_QWORD *)&v47[8 * k] = &v31[v49];
  }
  MEMORY[0x1E0C80A78](v45);
  v53 = (char *)&v64 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  for (m = 0; m != a7; ++m)
  {
    if (a7 == 1)
      v55 = 0;
    else
      v55 = *(_DWORD *)(v51 + 24 + 16 * m + 8);
    v56 = &v73[v55];
    *(_QWORD *)v56 = **(_QWORD **)(v80 + 8 * m);
    *(_QWORD *)&v53[8 * m] = v56;
  }
  v84[0] = v65;
  v84[1] = v64;
  v85 = v42 & 1;
  KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)((uint64_t)v86, v50, (uint64_t)v53, MEMORY[0x1E0DEAFA0], (uint64_t)v84, a7, v81, MEMORY[0x1E0DEAFA0]);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v86, (uint64_t)v87);
  v57 = v67;
  v58 = v76;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v34, v31, v76);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v87, v82);
  v59 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v60 = v71;
  v59(v71, v34, v58);
  for (n = 0; n != a7; ++n)
  {
    if (a7 == 1)
      v62 = 0;
    else
      v62 = *(_DWORD *)(v58 + 24 + 16 * n + 8);
    **(_QWORD **)(v88 + 8 * n) = *(_QWORD *)&v60[v62];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v41, v68);
}

uint64_t KeyedDecodingContainer.decodePredicateExpressionIfPresent<A>(forKey:input:predicateConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v12;
  uint64_t v13;
  uint64_t MetatypeMetadata;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t TupleTypeMetadata2;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  int *v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  char v78;
  char v79;
  int v80;

  v8 = v7;
  v75 = a1;
  v76 = a4;
  v74 = a7;
  v73 = a6;
  v12 = (uint64_t *)(a6 & 0xFFFFFFFFFFFFFFFELL);
  v13 = 8 * a5;
  if (a5 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v15 = MetatypeMetadata;
  }
  else
  {
    v71 = v7;
    v72.n128_u64[0] = (unint64_t)v68;
    MEMORY[0x1E0C80A78](a1);
    v16 = v13;
    v17 = (_QWORD *)((char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (a5)
    {
      v18 = v12;
      v19 = v17;
      v20 = a5;
      do
      {
        ++v18;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }
      while (v20);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v15 = MetatypeMetadata;
    v8 = v71;
    v13 = v16;
  }
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v22 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = *a3;
  v23 = a3[1].n128_u8[0];
  v24 = KeyedDecodingContainer.contains(_:)();
  if ((v24 & 1) != 0)
  {
    v80 = v23;
    MEMORY[0x1E0C80A78](v24);
    v25 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v70 = v26;
    if (a5)
    {
      v27 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      v69 = v13;
      if (a5 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255, *v12, v28, v29);
        TupleTypeMetadata = swift_checkMetadataState();
      }
      else
      {
        v71 = v8;
        v68[1] = v68;
        v68[2] = v27;
        MEMORY[0x1E0C80A78](v27);
        v48 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
        v49 = 0;
        do
        {
          *(_QWORD *)&v48[8 * v49] = type metadata accessor for PredicateExpressions.Variable(255, v12[v49], v46, v47);
          ++v49;
        }
        while (a5 != v49);
        TupleTypeMetadata = swift_getTupleTypeMetadata();
        v8 = v71;
      }
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v51 = 0;
      v52 = v74 + *(int *)(TupleTypeMetadata2 + 48);
      v53 = (int *)(TupleTypeMetadata + 32);
      v13 = v69;
      do
      {
        if (a5 == 1)
          v54 = 0;
        else
          v54 = *v53;
        *(_QWORD *)&v25[8 * v51++] = v52 + v54;
        v53 += 4;
      }
      while (a5 != v51);
      v45 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
      v42 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      v55 = 0;
      v56 = (int *)(v15 + 32);
      do
      {
        if (a5 == 1)
          v57 = 0;
        else
          v57 = *v56;
        v58 = &v22[v57];
        *(_QWORD *)v58 = **(_QWORD **)(a2 + 8 * v55);
        *(_QWORD *)&v42[8 * v55++] = v58;
        v56 += 4;
      }
      while (a5 != v55);
      v43 = v74;
    }
    else
    {
      v42 = &v79;
      v43 = v74;
      v44 = v73;
      v45 = v72;
    }
    v77 = v45;
    v78 = v80;
    result = KeyedDecodingContainer.decodePredicateExpression<A>(forKey:input:predicateConfiguration:)(v43, (uint64_t)v25, v75, (uint64_t)v42, (uint64_t *)&v77, v76, a5, v44);
    if (!v8)
    {
      v59 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a5 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255, *v12, v60, v61);
        swift_checkMetadataState();
      }
      else
      {
        MEMORY[0x1E0C80A78](v59);
        if (a5)
        {
          v64 = (_QWORD *)((char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
          v65 = a5;
          do
          {
            v66 = *v12++;
            *v64++ = type metadata accessor for PredicateExpressions.Variable(255, v66, v62, v63);
            --v65;
          }
          while (v65);
        }
        swift_getTupleTypeMetadata();
      }
      v67 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v43, 0, 1, v67);
    }
  }
  else
  {
    v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
    if (a5 == 1)
    {
      type metadata accessor for PredicateExpressions.Variable(255, *v12, v32, v33);
      swift_checkMetadataState();
      v34 = v74;
    }
    else
    {
      MEMORY[0x1E0C80A78](v31);
      v34 = v74;
      if (a5)
      {
        v37 = (_QWORD *)((char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
        v38 = a5;
        do
        {
          v39 = *v12++;
          *v37++ = type metadata accessor for PredicateExpressions.Variable(255, v39, v35, v36);
          --v38;
        }
        while (v38);
      }
      swift_getTupleTypeMetadata();
    }
    v40 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v34, 1, 1, v40);
  }
  return result;
}

uint64_t UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)(char *a1, _QWORD **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t *v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, __n128);
  char *v51;
  char *v52;
  uint64_t (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *DynamicType;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  void (*v119)(uint64_t);
  uint64_t v120;
  char *v121;
  _QWORD v122[2];
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 v154;
  char v155;

  v146 = a6;
  v11 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  v142 = a8;
  v140 = a5;
  v143 = a3;
  v144 = a1;
  if (a4 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v13 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      v16 = v11;
      v17 = (_QWORD *)((char *)v122 - v15);
      v18 = a4;
      do
      {
        ++v16;
        *v17++ = swift_getMetatypeMetadata();
        --v18;
      }
      while (v18);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v13 = MetatypeMetadata;
  }
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v20 = (char *)v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  MEMORY[0x1E0C80A78](v131);
  v145 = (char *)v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = v25;
  v139 = v122;
  v126 = v26;
  v130 = a7;
  v132 = v11;
  v124 = v20;
  v123 = v13;
  if (a4 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v11, v22, v23);
  }
  else
  {
    MEMORY[0x1E0C80A78](v21);
    if (a4)
    {
      v31 = v132;
      v32 = (_QWORD *)((char *)v122 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
      v33 = a4;
      do
      {
        v34 = *v31++;
        *v32++ = type metadata accessor for PredicateExpressions.Variable(255, v34, v28, v29);
        --v33;
      }
      while (v33);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v127 = TupleTypeMetadata;
  v137 = v122;
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v36 = (char *)v122 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = v122;
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)v122 - v38;
  v40 = v146;
  v41 = type metadata accessor for Optional();
  v135 = v122;
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)v122 - v43;
  v134 = v122;
  v45 = *(_QWORD *)(v40 - 8);
  v47 = MEMORY[0x1E0C80A78](v46);
  v49 = (char *)v122 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = *v143;
  v129 = v143[1];
  LODWORD(v143) = *((unsigned __int8 *)v143 + 16);
  v50 = *(void (**)(char *, char *, __n128))(v42 + 16);
  v51 = v144;
  v144 = v52;
  v50(v44, v51, v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v44, 1, v40) == 1)
  {
    (*(void (**)(char *, char *))(v42 + 8))(v44, v144);
    return dispatch thunk of UnkeyedEncodingContainer.encodeNil()();
  }
  v125 = v45;
  v54 = *(uint64_t (**)(char *, char *, uint64_t))(v45 + 32);
  v144 = v49;
  v55 = v54(v49, v44, v40);
  v122[1] = v122;
  MEMORY[0x1E0C80A78](v55);
  v56 = (8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v57 = v127;
  if (a4)
  {
    v58 = (int *)(v127 + 32);
    v59 = (_QWORD *)((char *)v122 - v56);
    v60 = a4;
    do
    {
      if (a4 == 1)
        v61 = 0;
      else
        v61 = *v58;
      v62 = *a2++;
      *(_QWORD *)&v39[v61] = *v62;
      *v59++ = &v39[v61];
      v58 += 4;
      --v60;
    }
    while (v60);
  }
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v63 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1E0C80A78](v63);
  v64 = (uint64_t **)((char *)v122 - v56);
  if (a4)
  {
    v65 = 0;
    v66 = (int *)(v57 + 32);
    v67 = v129;
    v68 = v128;
    v69 = v143;
    do
    {
      if (a4 == 1)
        v70 = 0;
      else
        v70 = *v66;
      *(_QWORD *)&v36[v70] = **(_QWORD **)((char *)&v122[v65] - v56);
      v64[v65++] = (uint64_t *)&v36[v70];
      v66 += 4;
    }
    while (a4 != v65);
    v152 = v68;
    v153 = v67;
    v154 = v69;
    MEMORY[0x1E0C80A78](v68);
    v72 = (char *)v122 - ((8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v73 = 0;
    v74 = (int *)(v123 + 32);
    v75 = v125;
    v76 = v144;
    v77 = v132;
    do
    {
      if (a4 == 1)
        v78 = 0;
      else
        v78 = *v74;
      v79 = (_QWORD *)(v71 + v78);
      *v79 = v77[v73];
      *(_QWORD *)&v72[8 * v73++] = v79;
      v74 += 4;
    }
    while (a4 != v73);
  }
  else
  {
    v152 = v128;
    v153 = v129;
    v72 = &v155;
    v154 = v143;
    v75 = v125;
    v76 = v144;
    v77 = v132;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v72, a4, v130);
  v80 = v146;
  v150 = v146;
  v81 = __swift_allocate_boxed_opaque_existential_1(&v147);
  (*(void (**)(uint64_t *, char *, uint64_t))(v75 + 16))(v81, v76, v80);
  __swift_project_boxed_opaque_existential_1(&v147, v150);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  v83 = v152;
  v84 = v153;
  v147 = v152;
  v148 = v153;
  LODWORD(v141) = v154;
  v149 = v154;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v85 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  v142 = v87;
  v143 = v122;
  if (!v87)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v99 = _typeName(_:qualified:)();
    v101 = v100;
    v147 = 47;
    v148 = 0xE100000000000000;
    v151 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v102._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v102);
    swift_bridgeObjectRelease();
    v103 = v147;
    v104 = v148;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v105 = v99;
    *(_QWORD *)(v105 + 8) = v101;
    *(_QWORD *)(v105 + 16) = v103;
    *(_QWORD *)(v105 + 24) = v104;
    *(_BYTE *)(v105 + 32) = 0;
    swift_willThrow();
    v98 = v145;
    goto LABEL_38;
  }
  v140 = v85;
  if ((v86 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v106 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v88 = (uint64_t)v85;
    v89 = Type.genericArguments2.getter();
    v91 = v90;
    v93 = v92;
    v94 = v142;
    swift_bridgeObjectRetain();
    LOBYTE(v121) = 0;
    v95 = v89;
    v96 = v133;
    v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v95, v91, v93, v83, v84, v141, MEMORY[0x1E0DEE9D8], v88, v94);
    if (v96)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v98 = v145;
      v80 = v146;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_50:
      (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v131);
      return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v144, v80);
    }
    v106 = v97;
    v133 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  LOBYTE(v151) = 0;
  v107 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v129 = v83;
  v128 = v84;
  v127 = v106;
  if (a4)
  {
    v108 = a4;
    v109 = v133;
    while (1)
    {
      v110 = v109;
      v111 = *v77;
      v151 = **v64;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v147, v150);
      v114 = type metadata accessor for PredicateExpressions.Variable(0, v111, v112, v113);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v114);
      v107 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      v109 = v110;
      if (v110)
        break;
      ++v64;
      ++v77;
      if (!--v108)
        goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
    v98 = v145;
    v80 = v146;
    goto LABEL_50;
  }
  v109 = v133;
LABEL_47:
  MEMORY[0x1E0C80A78](v107);
  v98 = v145;
  v80 = v146;
  v122[-10] = a4;
  v122[-9] = v80;
  v122[-8] = v130;
  v122[-7] = v115;
  v122[-6] = v116;
  v122[-5] = v98;
  v117 = v142;
  v122[-4] = v140;
  v122[-3] = v117;
  v118 = v144;
  v120 = v127;
  v121 = v144;
  specialized _withPredicateArchivingState<A>(_:_:)(v129, v128, v141, v119);
  if (v109)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
    goto LABEL_50;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v131);
  return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v118, v80);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpressionIfPresent<A>(input:predicateConfiguration:)@<X0>(uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v12;
  uint64_t MetatypeMetadata;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t TupleTypeMetadata;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t TupleTypeMetadata2;
  char *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  char v84;
  char v85;
  int v86;

  v9 = a6;
  v81 = a7;
  v82 = a4;
  v76 = a1;
  v78 = a5;
  v12 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v14 = MetatypeMetadata;
  }
  else
  {
    v79 = a6;
    v80 = v7;
    MEMORY[0x1E0C80A78](a1);
    v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a3)
    {
      v17 = v12;
      v18 = (_QWORD *)((char *)v73 - v16);
      v19 = a3;
      do
      {
        ++v17;
        *v18++ = swift_getMetatypeMetadata();
        --v19;
      }
      while (v19);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v14 = MetatypeMetadata;
    v9 = v79;
    v7 = v80;
  }
  v20 = v73;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v22 = (char *)v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = *a2;
  v23 = a2[1].n128_u8[0];
  result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v8)
  {
    v86 = v23;
    if ((result & 1) != 0)
    {
      v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a3 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255, *v12, v26, v27);
        swift_checkMetadataState();
        v28 = v81;
      }
      else
      {
        MEMORY[0x1E0C80A78](v25);
        v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
        if (a3)
        {
          v40 = (_QWORD *)((char *)v73 - v39);
          v41 = a3;
          do
          {
            v42 = *v12++;
            *v40++ = type metadata accessor for PredicateExpressions.Variable(255, v42, v36, v37);
            --v41;
          }
          while (v41);
        }
        swift_getTupleTypeMetadata();
        v28 = v81;
      }
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v28, 1, 1, TupleTypeMetadata2);
    }
    else
    {
      v79 = v9;
      v80 = v7;
      MEMORY[0x1E0C80A78](result);
      v75 = v29;
      v30 = (char *)v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      v31 = v81;
      if (a3)
      {
        v74 = v73;
        v32 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
        v73[2] = v32;
        if (a3 == 1)
        {
          type metadata accessor for PredicateExpressions.Variable(255, *v12, v33, v34);
          TupleTypeMetadata = swift_checkMetadataState();
        }
        else
        {
          v73[0] = v73;
          v73[1] = v73;
          MEMORY[0x1E0C80A78](v32);
          v53 = (char *)v73 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
          v54 = 0;
          do
          {
            *(_QWORD *)&v53[8 * v54] = type metadata accessor for PredicateExpressions.Variable(255, v12[v54], v50, v51);
            ++v54;
          }
          while (a3 != v54);
          TupleTypeMetadata = swift_getTupleTypeMetadata();
          v31 = v81;
        }
        v55 = swift_getTupleTypeMetadata2();
        v56 = 0;
        v57 = v31 + *(int *)(v55 + 48);
        v58 = (int *)(TupleTypeMetadata + 32);
        v20 = v74;
        do
        {
          if (a3 == 1)
            v59 = 0;
          else
            v59 = *v58;
          *(_QWORD *)&v30[8 * v56++] = v57 + v59;
          v58 += 4;
        }
        while (a3 != v56);
        v46 = MEMORY[0x1E0C80A78](v55);
        v44 = (char *)v73 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
        v62 = 0;
        v63 = (int *)(v14 + 32);
        do
        {
          if (a3 == 1)
            v64 = 0;
          else
            v64 = *v63;
          v65 = &v22[v64];
          *(_QWORD *)v65 = **(_QWORD **)(v60 + 8 * v62);
          *(_QWORD *)&v44[8 * v62++] = v65;
          v63 += 4;
        }
        while (a3 != v62);
      }
      else
      {
        v44 = &v85;
        v45 = v78;
        v46 = v77;
      }
      v83 = v46;
      v84 = v86;
      UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)(v31, (uint64_t)v30, (uint64_t)v44, (uint64_t *)&v83, a3, v82, v45, v79);
      v47 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a3 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255, *v12, v48, v49);
        swift_checkMetadataState();
      }
      else
      {
        v74 = v20;
        MEMORY[0x1E0C80A78](v47);
        if (a3)
        {
          v69 = (_QWORD *)((char *)v73 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
          v70 = a3;
          do
          {
            v71 = *v12++;
            *v69++ = type metadata accessor for PredicateExpressions.Variable(255, v71, v66, v67);
            --v70;
          }
          while (v70);
        }
        swift_getTupleTypeMetadata();
        v31 = v81;
      }
      v72 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v31, 0, 1, v72);
    }
  }
  return result;
}

uint64_t KeyedDecodingContainer.decodePredicateExpression<A, each B>(forKey:input:output:predicateConfiguration:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata2;
  uint64_t v29;
  uint64_t v30;
  uint64_t MetatypeMetadata;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t result;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  int *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD **v92;
  char *v93;
  int *v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  __int128 v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120[2];
  char v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char v127;
  char v128;

  *(_QWORD *)&v114 = a6;
  v112 = a9;
  *(_QWORD *)&v122 = a10;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v118 = a9 & 0xFFFFFFFFFFFFFFFELL;
  v109 = a2;
  v116 = a7;
  v117 = v10;
  v115 = a3;
  if (a8 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFFELL), v17, v18);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1E0C80A78](ExtendedExistentialTypeMetadata);
    v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a8)
    {
      v24 = (uint64_t *)v118;
      v25 = (uint64_t *)((char *)&v98 - v23);
      v26 = a8;
      do
      {
        v27 = *v24++;
        *v25++ = type metadata accessor for PredicateExpressions.Variable(255, v27, v20, v21);
        --v26;
      }
      while (v26);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v105 = (__int128 *)((char *)&v98 - v30);
  v119 = &v98;
  v104 = a1;
  v107 = a10;
  v103 = TupleTypeMetadata;
  v106 = v29;
  v111 = a8;
  if (a8 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](v29);
    v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a8)
    {
      v34 = v118;
      v35 = (uint64_t *)((char *)&v98 - v33);
      v36 = a8;
      do
      {
        v34 += 8;
        *v35++ = swift_getMetatypeMetadata();
        --v36;
      }
      while (v36);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v108 = (uint64_t *)MetatypeMetadata;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v38 = (char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v42 = (char *)&v98 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43);
  v45 = (char *)&v98 - v44;
  v110 = *(_QWORD *)v114;
  v113 = *(char **)(v114 + 8);
  LODWORD(v114) = *(unsigned __int8 *)(v114 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v46 = v117;
  result = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v46)
    return result;
  v48 = v114;
  v100 = v42;
  v102 = 0;
  v101 = v40;
  v115 = &v98;
  v116 = &v98;
  v117 = &v98;
  v49 = v111;
  v50 = 8 * v111;
  MEMORY[0x1E0C80A78](result);
  v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0;
  v99 = (char *)&v98 - v51;
  if (v49)
  {
    memcpy((char *)&v98 - v51, v109, 8 * v49);
    v109 = &v98;
    v125 = v110;
    v126 = (uint64_t)v113;
    v127 = v48;
    MEMORY[0x1E0C80A78](v110);
    v52 = (char *)&v98 - v51;
    v53 = 0;
    v54 = (int *)(v108 + 4);
    v55 = v118;
    v56 = v112;
    do
    {
      if (v49 == 1)
        v57 = 0;
      else
        v57 = *v54;
      v58 = &v38[v57];
      *(_QWORD *)v58 = *(_QWORD *)(v55 + 8 * v53);
      *(_QWORD *)&v52[8 * v53++] = v58;
      v54 += 4;
    }
    while (v49 != v53);
  }
  else
  {
    v109 = &v98;
    v56 = v112;
    v125 = v110;
    v126 = (uint64_t)v113;
    v52 = &v128;
    v127 = v48;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v52, v49, v56);
  LOBYTE(v120[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  v59 = v39;
  v60 = v45;
  v61 = v102;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v61)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62 = v101;
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v60, v59);
  }
  v113 = v45;
  v63 = v122;
  *(_QWORD *)&v114 = v123;
  v64 = v126;
  v65 = v127;
  v66 = *(_QWORD *)(v126 + 16);
  v118 = v125;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v110 = v64;
  if (!v66)
    goto LABEL_29;
  swift_bridgeObjectRetain();
  v67 = specialized __RawDictionaryStorage.find<A>(_:)(v63, *((uint64_t *)&v63 + 1));
  if ((v68 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    *(_QWORD *)&v122 = 47;
    *((_QWORD *)&v122 + 1) = 0xE100000000000000;
    v120[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v73._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    v75 = *((_QWORD *)&v122 + 1);
    v74 = v122;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)v76 = v63;
    *(_QWORD *)(v76 + 16) = v74;
    *(_QWORD *)(v76 + 24) = v75;
    *(_BYTE *)(v76 + 32) = 1;
    swift_willThrow();
    v62 = v101;
    goto LABEL_30;
  }
  v108 = &v98;
  v69 = *(_QWORD *)(v64 + 56) + 16 * v67;
  v102 = *(_QWORD *)v69;
  v70 = *(_BYTE *)(v69 + 8);
  swift_bridgeObjectRelease();
  if ((v70 & 1) != 0)
  {
    v71 = v118;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72 = swift_bridgeObjectRetain();
    v85 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v72, v71, v64, v65, MEMORY[0x1E0DEE9D8], v63, *((uint64_t *)&v63 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v86 = PartialType.create2(with:)();
    if (v86)
    {
      v87 = v86;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v79 = v87;
      v77 = v107;
      v78 = v100;
      goto LABEL_34;
    }
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v91 = v102;
    *(_QWORD *)(v91 + 8) = v85;
    *(_QWORD *)(v91 + 16) = 0;
    *(_QWORD *)(v91 + 24) = 0;
    *(_BYTE *)(v91 + 32) = 2;
    swift_willThrow();
    v62 = v101;
LABEL_30:
    v60 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v60, v59);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v77 = v107;
  v78 = v100;
  v79 = v102;
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v120[0] = v79;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v124 = v77;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v122) = 2;
    v62 = v101;
    v83 = v78;
    v84 = v78;
    v60 = v113;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v83, v113, v59);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>, MEMORY[0x1E0DED060]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v84, v59);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v60, v59);
  }
  v114 = v122;
  v80 = v123;
  LOBYTE(v120[0]) = 0;
  v81 = v113;
  v82 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v120[0] = v118;
  v120[1] = v110;
  v121 = v65;
  MEMORY[0x1E0C80A78](v82);
  v88 = v112;
  *(&v98 - 8) = v49;
  *(&v98 - 7) = v88;
  *(&v98 - 6) = v77;
  *(&v98 - 5) = (uint64_t)&v122;
  *((_OWORD *)&v98 - 2) = v114;
  *(&v98 - 2) = v80;
  *(&v98 - 1) = (uint64_t)v81;
  v89 = v105;
  v90 = v106;
  _withPredicateArchivingState<A>(_:_:)(v120, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v89, v104);
  v92 = (_QWORD **)v99;
  if (v49)
  {
    v93 = (char *)v89 + *(int *)(v90 + 48);
    v94 = (int *)(v103 + 32);
    v95 = v49;
    do
    {
      if (v49 == 1)
        v96 = 0;
      else
        v96 = *v94;
      v97 = *v92++;
      *v97 = *(_QWORD *)&v93[v96];
      v94 += 4;
      --v95;
    }
    while (v95);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v81, v59);
}

uint64_t KeyedDecodingContainer.decodePredicateExpressionIfPresent<A, each B>(forKey:input:output:predicateConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t *v11;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t MetatypeMetadata;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t result;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t v89;
  _QWORD **v90;
  char *v91;
  int *v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  _QWORD v96[3];
  __int128 *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t TupleTypeMetadata2;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117[2];
  char v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  char v125;
  int v126;

  v114 = a1;
  v115 = a3;
  v107 = a7;
  *(_QWORD *)&v119 = a6;
  v11 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v99 = a6;
  v102 = a5;
  if (a4 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *v11, v13, v14);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1E0C80A78](ExtendedExistentialTypeMetadata);
    v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      v20 = v11;
      v21 = (_QWORD *)((char *)v96 - v19);
      v22 = a4;
      do
      {
        v23 = *v20++;
        *v21++ = type metadata accessor for PredicateExpressions.Variable(255, v23, v16, v17);
        --v22;
      }
      while (v22);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v104 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v105 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v97 = (__int128 *)((char *)v96 - v24);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v100 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  *(_QWORD *)&v98 = (char *)v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = v96;
  MEMORY[0x1E0C80A78](v26);
  v106 = (char *)v96 - v28;
  v111 = v96;
  v112 = v96;
  if (a4 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v30 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](v27);
    v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a4)
    {
      v33 = v11;
      v34 = (_QWORD *)((char *)v96 - v32);
      v35 = a4;
      do
      {
        ++v33;
        *v34++ = swift_getMetatypeMetadata();
        --v35;
      }
      while (v35);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v30 = MetatypeMetadata;
  }
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v37 = (char *)v96 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = v96;
  v38 = *(_QWORD *)a2;
  v101 = *(_QWORD **)(a2 + 8);
  v39 = *(unsigned __int8 *)(a2 + 16);
  v40 = KeyedDecodingContainer.contains(_:)();
  if ((v40 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v107, 1, 1, TupleTypeMetadata2);
  v126 = v39;
  v96[1] = v96;
  v41 = 8 * a4;
  MEMORY[0x1E0C80A78](v40);
  if (a4)
  {
    v42 = v107 + *(int *)(TupleTypeMetadata2 + 48);
    v43 = (int *)(v104 + 32);
    v44 = (_QWORD *)((char *)v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    v45 = a4;
    do
    {
      if (a4 == 1)
        v46 = 0;
      else
        v46 = *v43;
      *v44++ = v42 + v46;
      v43 += 4;
      --v45;
    }
    while (v45);
  }
  v96[2] = v96;
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v48 = v113;
  result = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v48)
    return result;
  v113 = 0;
  v116 = v96;
  MEMORY[0x1E0C80A78](result);
  v49 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  v115 = (char *)v96 - v49;
  if (a4)
  {
    v50 = memcpy((char *)v96 - v49, (char *)v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * a4);
    v122 = v38;
    v123 = v101;
    v124 = v126;
    MEMORY[0x1E0C80A78](v50);
    v51 = (char *)v96 - v49;
    v52 = 0;
    v53 = (int *)(v30 + 32);
    v54 = v103;
    v55 = v102;
    do
    {
      if (a4 == 1)
        v56 = 0;
      else
        v56 = *v53;
      v57 = &v37[v56];
      *(_QWORD *)v57 = v11[v52];
      *(_QWORD *)&v51[8 * v52++] = v57;
      v53 += 4;
    }
    while (a4 != v52);
  }
  else
  {
    v122 = v38;
    v123 = v101;
    v51 = &v125;
    v124 = v126;
    v54 = v103;
    v55 = v102;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v51, a4, v55);
  LOBYTE(v117[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  v58 = v106;
  v59 = v113;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v59)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = v100;
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v58, v54);
  }
  v61 = v119;
  v63 = v122;
  v62 = (uint64_t)v123;
  v64 = v124;
  v65 = v123[2];
  swift_bridgeObjectRetain();
  v114 = v62;
  swift_bridgeObjectRetain();
  v101 = v96;
  if (!v65)
    goto LABEL_37;
  v113 = 0;
  swift_bridgeObjectRetain();
  v66 = v114;
  v67 = specialized __RawDictionaryStorage.find<A>(_:)(v61, *((uint64_t *)&v61 + 1));
  if ((v68 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_37:
    *(_QWORD *)&v119 = 47;
    *((_QWORD *)&v119 + 1) = 0xE100000000000000;
    v117[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v75._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    v76 = v119;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)v77 = v61;
    *(_OWORD *)(v77 + 16) = v76;
    v78 = 1;
    goto LABEL_38;
  }
  v69 = *(_QWORD *)(v66 + 56) + 16 * v67;
  v70 = *(_QWORD *)v69;
  v71 = *(_BYTE *)(v69 + 8);
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72 = swift_bridgeObjectRetain();
    v73 = v113;
    v74 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v72, v63, v66, v64, MEMORY[0x1E0DEE9D8], v61, *((uint64_t *)&v61 + 1));
    v113 = v73;
    if (v73)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v54 = v103;
      v60 = v100;
      v58 = v106;
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v58, v54);
    }
    v84 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = PartialType.create2(with:)();
    if (v85)
    {
      v86 = v85;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v70 = v86;
      goto LABEL_43;
    }
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v77 = v70;
    *(_QWORD *)(v77 + 8) = v84;
    *(_QWORD *)(v77 + 16) = 0;
    *(_QWORD *)(v77 + 24) = 0;
    v78 = 2;
LABEL_38:
    *(_BYTE *)(v77 + 32) = v78;
    swift_willThrow();
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117[0] = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v79 = v99;
  v121 = v99;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v119) = 2;
    v60 = v100;
    v83 = v98;
    v58 = v106;
    v54 = v103;
    (*(void (**)(_QWORD, char *, uint64_t))(v100 + 16))(v98, v106, v103);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>, MEMORY[0x1E0DED060]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v83, v54);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v58, v54);
  }
  v98 = v119;
  v80 = v120;
  LOBYTE(v117[0]) = 0;
  v54 = v103;
  v58 = v106;
  v81 = v113;
  v82 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v81)
    goto LABEL_30;
  v117[0] = v63;
  v117[1] = v114;
  v118 = v64;
  MEMORY[0x1E0C80A78](v82);
  v87 = v102;
  v96[-8] = a4;
  v96[-7] = v87;
  v96[-6] = v79;
  v96[-5] = &v119;
  *(_OWORD *)&v96[-4] = v98;
  v96[-2] = v80;
  v96[-1] = v58;
  v88 = v97;
  v89 = TupleTypeMetadata2;
  _withPredicateArchivingState<A>(_:_:)(v117, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  v113 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v88, v107);
  v90 = (_QWORD **)v115;
  if (a4)
  {
    v91 = (char *)v88 + *(int *)(v89 + 48);
    v92 = (int *)(v104 + 32);
    v93 = a4;
    do
    {
      if (a4 == 1)
        v94 = 0;
      else
        v94 = *v92;
      v95 = *v90++;
      *v95 = *(_QWORD *)&v91[v94];
      v92 += 4;
      --v93;
    }
    while (v93);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v119);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v58, v54);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v105 + 56))(v107, 0, 1, v89);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpressionIfPresent<A, each B>(input:output:predicateConfiguration:)@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X3>, char *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t *v12;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t MetatypeMetadata;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  char *v45;
  unsigned __int8 v46;
  uint64_t v47;
  int *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  _QWORD **v89;
  char *v90;
  int *v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  __int128 *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t TupleTypeMetadata2;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120[2];
  char v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unsigned __int8 v127;
  char v128;

  v109 = a7;
  v102 = a5;
  *(_QWORD *)&v122 = a5;
  v12 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v111 = 8 * a2;
  v104 = a4;
  v116 = (uint64_t)v12;
  v117 = a3;
  v119 = a6;
  if (a2 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *v12, v14, v15);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1E0C80A78](ExtendedExistentialTypeMetadata);
    if (a2)
    {
      v20 = (uint64_t *)v116;
      v21 = (uint64_t *)((char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
      v22 = a2;
      do
      {
        v23 = *v20++;
        *v21++ = type metadata accessor for PredicateExpressions.Variable(255, v23, v17, v18);
        --v22;
      }
      while (v22);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v106 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v107 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v100 = (__int128 *)((char *)&v95 - v24);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v103 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  *(_QWORD *)&v101 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v108 = (char *)&v95 - v28;
  v114 = &v95;
  v115 = &v95;
  v113 = v29;
  if (a2 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](v27);
    if (a2)
    {
      v32 = v116;
      v33 = (uint64_t *)((char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
      v34 = a2;
      do
      {
        v32 += 8;
        *v33++ = swift_getMetatypeMetadata();
        --v34;
      }
      while (v34);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v36 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *a1;
  v37 = (uint64_t *)a1[1];
  v39 = *((_BYTE *)a1 + 16);
  v40 = v112;
  v42 = v41;
  result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v40)
  {
    v96 = v42;
    v97 = v38;
    v98 = v37;
    v99 = &v95;
    v112 = &v95;
    if ((result & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v109, 1, 1, TupleTypeMetadata2);
    MEMORY[0x1E0C80A78](result);
    v45 = (char *)&v95 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
    v46 = v39;
    if (a2)
    {
      v47 = v109 + *(int *)(TupleTypeMetadata2 + 48);
      v48 = (int *)(v106 + 32);
      v49 = (uint64_t *)((char *)&v95 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
      v50 = a2;
      do
      {
        if (a2 == 1)
          v51 = 0;
        else
          v51 = *v48;
        *v49++ = v47 + v51;
        v48 += 4;
        --v50;
      }
      while (v50);
    }
    lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
    v52 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
    v118 = &v95;
    v119 = &v95;
    v53 = v111;
    MEMORY[0x1E0C80A78](v52);
    v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0;
    v117 = (char *)&v95 - v54;
    if (a2)
    {
      memcpy((char *)&v95 - v54, v45, v53);
      v125 = v97;
      v126 = v98;
      v127 = v46;
      MEMORY[0x1E0C80A78](v97);
      v55 = (char *)&v95 - v54;
      v56 = 0;
      v57 = (int *)(v96 + 32);
      v58 = v116;
      do
      {
        if (a2 == 1)
          v59 = 0;
        else
          v59 = *v57;
        v60 = &v36[v59];
        *(_QWORD *)v60 = *(_QWORD *)(v58 + 8 * v56);
        *(_QWORD *)&v55[8 * v56++] = v60;
        v57 += 4;
      }
      while (a2 != v56);
    }
    else
    {
      v125 = v97;
      v126 = v98;
      v55 = &v128;
      v127 = v46;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v55, a2, v104);
    LOBYTE(v120[0]) = 2;
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v61 = v122;
    v62 = (uint64_t)v126;
    v63 = v127;
    v64 = v126[2];
    v116 = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v64)
    {
      LODWORD(v111) = v63;
      swift_bridgeObjectRetain();
      v65 = specialized __RawDictionaryStorage.find<A>(_:)(v61, *((uint64_t *)&v61 + 1));
      if ((v66 & 1) != 0)
      {
        v98 = &v95;
        v67 = *(_QWORD *)(v62 + 56) + 16 * v65;
        v68 = *(_QWORD *)v67;
        v69 = *(_BYTE *)(v67 + 8);
        swift_bridgeObjectRelease();
        if ((v69 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_40:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v120[0] = v68;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
          v124 = v102;
          swift_getExtendedExistentialTypeMetadata();
          v78 = swift_dynamicCast();
          v75 = v105;
          if (v78)
          {
            v101 = v122;
            v79 = v123;
            LOBYTE(v120[0]) = 0;
            v80 = v108;
            v81 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
            v120[0] = v116;
            v120[1] = v62;
            v121 = v111;
            MEMORY[0x1E0C80A78](v81);
            v86 = v104;
            *(&v95 - 8) = a2;
            *(&v95 - 7) = v86;
            *(&v95 - 6) = v102;
            *(&v95 - 5) = (uint64_t)&v122;
            *((_OWORD *)&v95 - 2) = v101;
            *(&v95 - 2) = v79;
            *(&v95 - 1) = (uint64_t)v80;
            v87 = v100;
            _withPredicateArchivingState<A>(_:_:)(v120, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined init with take of any PredicateExpression<Self.Output == B1>(v87, v109);
            v89 = (_QWORD **)v117;
            if (a2)
            {
              v90 = (char *)v87 + *(int *)(TupleTypeMetadata2 + 48);
              v91 = (int *)(v106 + 32);
              v92 = a2;
              do
              {
                if (a2 == 1)
                  v93 = 0;
                else
                  v93 = *v91;
                v94 = *v89++;
                *v94 = *(_QWORD *)&v90[v93];
                v91 += 4;
                --v92;
              }
              while (v92);
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
            (*(void (**)(char *, uint64_t))(v103 + 8))(v80, v75);
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56))(v109, 0, 1, TupleTypeMetadata2);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          LOBYTE(v122) = 2;
          v76 = v103;
          v82 = v101;
          v77 = v108;
          (*(void (**)(_QWORD, char *, uint64_t))(v103 + 16))(v101, v108, v75);
          type metadata accessor for DecodingError();
          swift_allocError();
          lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>, MEMORY[0x1E0DED060]);
          static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v82, v75);
          swift_willThrow();
          return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v77, v75);
        }
        v70 = v116;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v71 = swift_bridgeObjectRetain();
        v83 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v71, v70, v62, v111, MEMORY[0x1E0DEE9D8], v61, *((uint64_t *)&v61 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v84 = PartialType.create2(with:)();
        if (v84)
        {
          v85 = v84;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v68 = v85;
          goto LABEL_40;
        }
        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(_QWORD *)v88 = v68;
        *(_QWORD *)(v88 + 8) = v83;
        *(_QWORD *)(v88 + 16) = 0;
        *(_QWORD *)(v88 + 24) = 0;
        *(_BYTE *)(v88 + 32) = 2;
        swift_willThrow();
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v75 = v105;
        v76 = v103;
        v77 = v108;
        return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v77, v75);
      }
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)&v122 = 47;
    *((_QWORD *)&v122 + 1) = 0xE100000000000000;
    v120[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v72._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73 = v122;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)v74 = v61;
    *(_OWORD *)(v74 + 16) = v73;
    *(_BYTE *)(v74 + 32) = 1;
    swift_willThrow();
    goto LABEL_36;
  }
  return result;
}

id NSExpression.init(format:_:)()
{
  uint64_t v0;
  void *ObjCClassFromMetadata;
  id v2;

  v0 = getVaList(_:)();
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v2 = objc_msgSend(ObjCClassFromMetadata, sel_expressionWithFormat_arguments_, String._bridgeToObjectiveCImpl()(), v0);
  swift_unknownObjectRelease();
  return v2;
}

unint64_t protocol witness for AttributedStringProtocol.runs.getter in conformance AttributedString@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  unint64_t result;
  uint64_t v4;

  v2 = BigString.startIndex.getter();
  result = BigString.endIndex.getter();
  if (result >> 10 < v2 >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = swift_retain();
    return AttributedString.Runs.init(_:in:)(v4, a1);
  }
  return result;
}

unint64_t *AttributedString.Runs.subscript.getter@<X0>(unint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE v42[48];
  _QWORD v43[5];
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = *result;
  v5 = *result >> 10;
  if (v5 < v2[17] >> 10 || v5 >= v2[21] >> 10)
    goto LABEL_59;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 64);
  v8 = v4 >> 11;
  if (v7)
    v9 = *(_QWORD *)(*v2 + 80);
  else
    v9 = 0;
  if (v9 < v8)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v40 = v4 >> 11;
  v41 = *(_QWORD *)(v6 + 88);
  v39 = *(_QWORD *)(v6 + 72);
  if (!v7 || (v8 < *(_QWORD *)(*v2 + 80) ? (v10 = *(unsigned __int16 *)(v7 + 16) == 0) : (v10 = 1), v10))
  {
    v11 = swift_unknownObjectRetain_n();
    v12 = specialized Rope._endPath.getter(v11);
    result = (unint64_t *)swift_unknownObjectRelease();
    v13 = 0;
    v8 = 0;
    if (!v7)
    {
      v14 = 0;
LABEL_50:
      if (!__OFSUB__(v40, v8))
      {
        v43[0] = v41;
        v43[1] = v12;
        v43[2] = v13;
        v43[3] = v14;
        v43[4] = v40 - v8;
        v31 = *(_OWORD *)(v6 + 32);
        v44 = *(_OWORD *)(v6 + 16);
        v45 = v31;
        v46 = *(_OWORD *)(v6 + 48);
        result = (unint64_t *)BigString.utf8.getter();
        if (!__OFSUB__(0, v8))
        {
          v32 = BigString.UTF8View.index(_:offsetBy:)();
          v34 = v33;
          v36 = v35;
          v38 = v37;
          outlined release of Locale((uint64_t)v42);
          return (unint64_t *)AttributedString.Runs.subscript.getter((uint64_t)v43, v32, v34, v36, v38, a2);
        }
        goto LABEL_62;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
LABEL_14:
    swift_unknownObjectRetain();
    v14 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v41, v12, v13, v7, v39);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_50;
  }
  v15 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    result = (unint64_t *)swift_unknownObjectRetain_n();
    v13 = v7;
    while (1)
    {
      v17 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        v18 = *(_QWORD *)(v13 + 40);
        v19 = __OFSUB__(v8, v18);
        v20 = v8 - v18;
        if (v19)
          goto LABEL_57;
        if (__OFADD__(v20, 1))
          goto LABEL_58;
        if (v20 + 1 < 1)
        {
          v17 = 0;
          goto LABEL_19;
        }
        if ((_DWORD)v17 != 1)
        {
          v21 = (uint64_t *)(v13 + 64);
          v22 = 1;
          while (1)
          {
            v23 = *v21;
            v21 += 3;
            v8 = v20 - v23;
            if (__OFSUB__(v20, v23))
              break;
            if (__OFADD__(v8, 1))
              goto LABEL_55;
            if (v8 + 1 < 1)
            {
              v17 = v22;
              v8 = v20;
              goto LABEL_19;
            }
            ++v22;
            v20 = v8;
            if (v17 == v22)
              goto LABEL_18;
          }
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        v8 = v20;
      }
LABEL_18:
      if (v8)
        goto LABEL_56;
LABEL_19:
      v16 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      v15 = ((-15 << v16) - 1) & v15 | (v17 << v16);
      v13 = *(_QWORD *)(v13 + 24 + 24 * v17);
      swift_unknownObjectRetain();
      result = (unint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v13 + 18))
      {
        v24 = v15 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_35;
      }
    }
  }
  result = (unint64_t *)swift_unknownObjectRetain_n();
  v24 = 0;
  v13 = v7;
LABEL_35:
  v25 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16))
  {
    v26 = *(_QWORD *)(v13 + 24);
    v19 = __OFSUB__(v8, v26);
    v27 = v8 - v26;
    if (v19)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    if (__OFADD__(v27, 1))
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v27 + 1 < 1)
    {
      v25 = 0;
LABEL_48:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v12 = v24 | (v25 << 8);
      goto LABEL_14;
    }
    if ((_DWORD)v25 != 1)
    {
      v28 = (uint64_t *)(v13 + 48);
      v29 = 1;
      while (1)
      {
        v30 = *v28;
        v28 += 3;
        v8 = v27 - v30;
        if (__OFSUB__(v27, v30))
          goto LABEL_63;
        if (__OFADD__(v8, 1))
          goto LABEL_64;
        if (v8 + 1 < 1)
        {
          v25 = v29;
          v8 = v27;
          goto LABEL_48;
        }
        ++v29;
        v27 = v8;
        if (v25 == v29)
          goto LABEL_47;
      }
    }
    v8 = v27;
  }
LABEL_47:
  if (!v8)
    goto LABEL_48;
LABEL_67:
  __break(1u);
  return result;
}

unint64_t *AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  _QWORD v102[5];
  char v103[48];
  _OWORD v104[6];
  _QWORD v105[5];
  __int128 v106[3];
  _BYTE v107[56];

  v6 = *result;
  v7 = *(_QWORD *)(v4 + 136);
  v8 = *result >> 10;
  if (v7 >> 10 >= v8 || *(_QWORD *)(v4 + 168) >> 10 < v8)
    goto LABEL_72;
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v10 = *(_QWORD *)v4;
  v11 = *(_QWORD *)(*(_QWORD *)v4 + 64);
  if (v11)
    v12 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  else
    v12 = 0;
  if (v6 < 0x800)
    goto LABEL_74;
  v13 = (v6 >> 11) - 1;
  if (v12 < v13)
    goto LABEL_74;
  v14 = result[3];
  v15 = *(_QWORD *)(v4 + 152);
  v86 = *(_QWORD *)(v4 + 144);
  v84 = v15;
  v85 = *(_QWORD *)(v4 + 160);
  v16 = *(_QWORD *)(v10 + 72);
  v17 = *(_QWORD *)(v10 + 88);
  v72 = a4;
  v76 = *result >> 10;
  v77 = v7 >> 10;
  v82 = *(_QWORD *)(v4 + 136);
  v74 = result[2];
  v75 = result[1];
  v73 = *result;
  v80 = v6 >> 11;
  v78 = *(_OWORD *)(v4 + 184);
  v79 = *(_OWORD *)(v4 + 168);
  v83 = (v6 >> 11) - 1;
  if (v11)
  {
    if ((int64_t)(v6 >> 11) <= *(_QWORD *)(*(_QWORD *)v4 + 80) && *(_WORD *)(v11 + 16) != 0)
    {
      v69 = *(_QWORD *)(v10 + 88);
      v70 = *(_QWORD *)(v10 + 72);
      v25 = *(unsigned __int8 *)(v11 + 18);
      if (*(_BYTE *)(v11 + 18))
      {
        result = (unint64_t *)swift_unknownObjectRetain_n();
        v21 = v11;
        while (1)
        {
          v27 = *(unsigned __int16 *)(v21 + 16);
          if (*(_WORD *)(v21 + 16))
          {
            v28 = *(_QWORD *)(v21 + 40);
            v29 = __OFSUB__(v13, v28);
            v30 = v13 - v28;
            if (v29)
              goto LABEL_70;
            if (__OFADD__(v30, 1))
              goto LABEL_71;
            if (v30 + 1 < 1)
            {
              v27 = 0;
              goto LABEL_24;
            }
            if ((_DWORD)v27 != 1)
            {
              v31 = (uint64_t *)(v21 + 64);
              v32 = 1;
              while (1)
              {
                v33 = *v31;
                v31 += 3;
                v13 = v30 - v33;
                if (__OFSUB__(v30, v33))
                  break;
                if (__OFADD__(v13, 1))
                  goto LABEL_68;
                if (v13 + 1 < 1)
                {
                  v27 = v32;
                  v13 = v30;
                  goto LABEL_24;
                }
                ++v32;
                v30 = v13;
                if (v27 == v32)
                  goto LABEL_23;
              }
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            v13 = v30;
          }
LABEL_23:
          if (v13)
            goto LABEL_69;
LABEL_24:
          v26 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
          v25 = ((-15 << v26) - 1) & v25 | (v27 << v26);
          v21 = *(_QWORD *)(v21 + 24 + 24 * v27);
          swift_unknownObjectRetain();
          result = (unint64_t *)swift_unknownObjectRelease();
          if (!*(_BYTE *)(v21 + 18))
          {
            v34 = v25 & 0xFFFFFFFFFFFFF0FFLL;
            goto LABEL_40;
          }
        }
      }
      result = (unint64_t *)swift_unknownObjectRetain_n();
      v34 = 0;
      v21 = v11;
LABEL_40:
      v35 = *(unsigned __int16 *)(v21 + 16);
      v16 = v70;
      if (*(_WORD *)(v21 + 16))
      {
        v36 = *(_QWORD *)(v21 + 24);
        v29 = __OFSUB__(v13, v36);
        v37 = v13 - v36;
        if (v29)
        {
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        if (__OFADD__(v37, 1))
        {
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }
        if (v37 + 1 < 1)
        {
          v35 = 0;
LABEL_53:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v20 = v34 | (v35 << 8);
          v15 = v84;
          v17 = v69;
          goto LABEL_19;
        }
        if ((_DWORD)v35 != 1)
        {
          v38 = (uint64_t *)(v21 + 48);
          v39 = 1;
          while (1)
          {
            v40 = *v38;
            v38 += 3;
            v13 = v37 - v40;
            if (__OFSUB__(v37, v40))
              goto LABEL_78;
            if (__OFADD__(v13, 1))
              goto LABEL_79;
            if (v13 + 1 < 1)
            {
              v35 = v39;
              v13 = v37;
              goto LABEL_53;
            }
            ++v39;
            v37 = v13;
            if (v35 == v39)
              goto LABEL_52;
          }
        }
        v13 = v37;
      }
LABEL_52:
      if (v13)
      {
LABEL_82:
        __break(1u);
        return result;
      }
      goto LABEL_53;
    }
  }
  v19 = swift_unknownObjectRetain_n();
  v20 = specialized Rope._endPath.getter(v19);
  result = (unint64_t *)swift_unknownObjectRelease();
  v21 = 0;
  v13 = 0;
  if (v11)
  {
LABEL_19:
    swift_unknownObjectRetain();
    v22 = v16;
    v23 = v17;
    v24 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v17, v20, v21, v11, v22);
    result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_55;
  }
  v23 = v17;
  v24 = 0;
LABEL_55:
  if (__OFSUB__(v83, v13))
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v41 = *(_OWORD *)(v4 + 88);
  v92 = *(_OWORD *)(v4 + 72);
  v93 = v41;
  v42 = *(_OWORD *)(v4 + 120);
  v94 = *(_OWORD *)(v4 + 104);
  v95 = v42;
  v43 = *(_OWORD *)(v4 + 24);
  v88 = *(_OWORD *)(v4 + 8);
  v89 = v43;
  v44 = *(_OWORD *)(v4 + 56);
  v90 = *(_OWORD *)(v4 + 40);
  v105[0] = v23;
  v105[1] = v20;
  v105[2] = v21;
  v105[3] = v24;
  v105[4] = v83 - v13;
  v87 = v10;
  v91 = v44;
  v96 = v82;
  v97 = v86;
  v98 = v15;
  v99 = v85;
  v100 = v79;
  v101 = v78;
  AttributedString.Runs._firstOfMatchingRuns(with:comparing:)(v105, a2, v102);
  v45 = *(_OWORD *)(v10 + 32);
  v104[3] = *(_OWORD *)(v10 + 16);
  v104[4] = v45;
  v104[5] = *(_OWORD *)(v10 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v102[4], v80))
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v46 = (__int128 *)(v10 + 16);
  v47 = BigString.UTF8View.index(_:offsetBy:)();
  v49 = v48;
  v51 = v50;
  v53 = v52;
  result = (unint64_t *)outlined release of Locale((uint64_t)v103);
  if (v77 >= v47 >> 10)
    v54 = v82;
  else
    v54 = v47;
  v55 = *v46;
  v56 = v46[2];
  v104[1] = v46[1];
  v104[2] = v56;
  v104[0] = v55;
  if (v76 < v54 >> 10)
    goto LABEL_77;
  v57 = v85;
  v58 = v86;
  if (v77 < v47 >> 10)
  {
    v57 = v53;
    v58 = v49;
  }
  v87 = v54;
  *(_QWORD *)&v88 = v58;
  v59 = v84;
  if (v77 < v47 >> 10)
    v59 = v51;
  *((_QWORD *)&v88 + 1) = v59;
  *(_QWORD *)&v89 = v57;
  *((_QWORD *)&v89 + 1) = v73;
  *(_QWORD *)&v90 = v75;
  *((_QWORD *)&v90 + 1) = v74;
  *(_QWORD *)&v91 = v14;
  v60 = *v46;
  v61 = v46[2];
  v106[1] = v46[1];
  v106[2] = v61;
  v106[0] = v60;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v106, (uint64_t)v107);
  outlined retain of Locale((uint64_t)v107);
  v62 = BigString._lastConstraintBreak(in:with:)(&v87, a3);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  result = (unint64_t *)outlined release of Locale((uint64_t)v104);
  *v72 = v62;
  v72[1] = v64;
  v72[2] = v66;
  v72[3] = v68;
  return result;
}

unint64_t *AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104[48];
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char v108[48];
  __int128 v109;
  uint64_t v110;
  char v111[8];
  _OWORD v112[6];
  uint64_t v113[5];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118[3];
  _BYTE v119[48];

  v5 = *result;
  v6 = *result >> 10;
  if (v6 < (unint64_t)v4[17] >> 10 || (v7 = v4, v86 = v4[21], v6 >= v86 >> 10))
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 64);
  v10 = v5 >> 11;
  if (v9)
    v11 = *(_QWORD *)(*v4 + 80);
  else
    v11 = 0;
  if (v11 < v10)
    goto LABEL_73;
  v85 = result[2];
  v84 = result[3];
  v83 = v4[22];
  v82 = v4[23];
  v78 = *result;
  v79 = result[1];
  v71 = v86 >> 10;
  v72 = *result >> 10;
  v76 = v4[17];
  v74 = v4[19];
  v75 = v4[18];
  v73 = v4[20];
  v80 = *(_QWORD *)(v8 + 88);
  v81 = v4[24];
  v68 = *(_QWORD *)(v8 + 72);
  if (!v9 || v10 >= *(_QWORD *)(*v4 + 80) || !*(_WORD *)(v9 + 16))
  {
    v23 = swift_unknownObjectRetain_n();
    v24 = specialized Rope._endPath.getter(v23);
    swift_unknownObjectRelease();
    v15 = 0;
    v12 = 0;
    if (!v9)
      goto LABEL_62;
    goto LABEL_30;
  }
  v5 = *(unsigned __int8 *)(v9 + 18);
  if (*(_BYTE *)(v9 + 18))
  {
    result = (unint64_t *)swift_unknownObjectRetain_n();
    v12 = v10;
    v13 = v9;
    while (1)
    {
      v16 = *(unsigned __int16 *)(v13 + 16);
      if (!*(_WORD *)(v13 + 16))
        goto LABEL_14;
      v17 = *(_QWORD *)(v13 + 40);
      v18 = __OFSUB__(v12, v17);
      v19 = v12 - v17;
      if (v18)
        goto LABEL_69;
      if (__OFADD__(v19, 1))
        goto LABEL_70;
      if (v19 + 1 < 1)
      {
        v16 = 0;
        goto LABEL_15;
      }
      if ((_DWORD)v16 == 1)
        break;
      v20 = (uint64_t *)(v13 + 64);
      v21 = 1;
      while (1)
      {
        v22 = *v20;
        v20 += 3;
        v12 = v19 - v22;
        if (__OFSUB__(v19, v22))
        {
          __break(1u);
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        if (__OFADD__(v12, 1))
          goto LABEL_67;
        if (v12 + 1 < 1)
          break;
        ++v21;
        v19 = v12;
        if (v16 == v21)
          goto LABEL_14;
      }
      v16 = v21;
      v12 = v19;
LABEL_15:
      v14 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      v5 = ((-15 << v14) - 1) & v5 | (v16 << v14);
      v15 = *(_QWORD *)(v13 + 24 + 24 * v16);
      swift_unknownObjectRetain();
      result = (unint64_t *)swift_unknownObjectRelease();
      v13 = v15;
      if (!*(_BYTE *)(v15 + 18))
        goto LABEL_47;
    }
    v12 = v19;
LABEL_14:
    if (!v12)
      goto LABEL_15;
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  result = (unint64_t *)swift_unknownObjectRetain_n();
  v12 = v10;
  v15 = v9;
LABEL_47:
  v64 = *(unsigned __int16 *)(v15 + 16);
  if (*(_WORD *)(v15 + 16))
  {
    v65 = *(_QWORD *)(v15 + 24);
    v18 = __OFSUB__(v12, v65);
    v27 = v12 - v65;
    if (v18)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if (__OFADD__(v27, 1))
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v27 + 1 < 1)
    {
      v64 = 0;
      goto LABEL_61;
    }
    if ((_DWORD)v64 != 1)
    {
      v66 = (uint64_t *)(v15 + 48);
      v25 = 1;
      while (1)
      {
        v67 = *v66;
        v66 += 3;
        v12 = v27 - v67;
        if (__OFSUB__(v27, v67))
          goto LABEL_79;
        if (__OFADD__(v12, 1))
          goto LABEL_80;
        if (v12 + 1 < 1)
          goto LABEL_65;
        ++v25;
        v27 = v12;
        if (v64 == v25)
          goto LABEL_60;
      }
    }
    v12 = v27;
  }
LABEL_60:
  if (v12)
  {
LABEL_83:
    __break(1u);
    return result;
  }
LABEL_61:
  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v24 = v5 & 0xFFFFFFFFFFFFF0FFLL | (v64 << 8);
    v5 = v78;
    if (!v9)
      break;
LABEL_30:
    swift_unknownObjectRetain();
    v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v24, v15, v9, v68);
    swift_unknownObjectRelease_n();
    v27 = v10 - v12;
    if (!__OFSUB__(v10, v12))
      goto LABEL_31;
LABEL_64:
    __break(1u);
LABEL_65:
    v64 = v25;
    v12 = v27;
  }
LABEL_62:
  v26 = 0;
  v27 = v10 - v12;
  if (__OFSUB__(v10, v12))
    goto LABEL_64;
LABEL_31:
  v113[0] = v80;
  v113[1] = v24;
  v113[2] = v15;
  v113[3] = v26;
  v113[4] = v27;
  v28 = *(_OWORD *)(v8 + 32);
  v114 = *(_OWORD *)(v8 + 16);
  v115 = v28;
  v116 = *(_OWORD *)(v8 + 48);
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(0, v12))
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v29 = BigString.UTF8View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)v104);
  v30 = *(_OWORD *)(v7 + 11);
  v92 = *(_OWORD *)(v7 + 9);
  v93 = v30;
  v31 = *(_OWORD *)(v7 + 15);
  v94 = *(_OWORD *)(v7 + 13);
  v95 = v31;
  v32 = *(_OWORD *)(v7 + 3);
  v88 = *(_OWORD *)(v7 + 1);
  v89 = v32;
  v33 = *(_OWORD *)(v7 + 7);
  v90 = *(_OWORD *)(v7 + 5);
  v87 = v8;
  v91 = v33;
  v96 = v76;
  v97 = v75;
  v98 = v74;
  v99 = v73;
  v100 = v86;
  v101 = v83;
  v102 = v82;
  v103 = v81;
  result = (unint64_t *)AttributedString.Runs._lastOfMatchingRuns(with:comparing:)(v113, a2, &v105);
  v34 = *(_QWORD *)(v8 + 64);
  v35 = *(_QWORD *)(v8 + 88);
  v109 = v105;
  v110 = v106;
  if ((_QWORD)v105 != v35)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v110, (uint64_t)v111);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v111, (uint64_t)&v117);
  if (v117)
  {
    v36 = *(_QWORD *)(v117 + 24 * ((*((_QWORD *)&v109 + 1) >> ((4 * *(_BYTE *)(v117 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v37 = *((_QWORD *)&v109 + 1);
    swift_unknownObjectRetain();
    v36 = specialized Rope._Node.subscript.getter(v37, v34);
    swift_unknownObjectRelease();
  }
  v38 = v107;
  swift_bridgeObjectRelease();
  result = (unint64_t *)swift_bridgeObjectRelease();
  if (__OFADD__(v38, v36))
    goto LABEL_76;
  v40 = *(_OWORD *)(v8 + 16);
  v41 = *(_OWORD *)(v8 + 32);
  v39 = (__int128 *)(v8 + 16);
  v112[3] = v40;
  v112[4] = v41;
  v112[5] = v39[2];
  result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v38 + v36, v29 >> 11))
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v42 = BigString.UTF8View.index(_:offsetBy:)();
  v44 = v43;
  v46 = v45;
  v48 = v47;
  result = (unint64_t *)outlined release of Locale((uint64_t)v108);
  v49 = v86;
  if (v71 >= v42 >> 10)
    v49 = v42;
  v50 = *v39;
  v51 = v39[2];
  v112[1] = v39[1];
  v112[2] = v51;
  v112[0] = v50;
  if (v72 > v49 >> 10)
    goto LABEL_78;
  v52 = v81;
  v53 = v82;
  if (v71 >= v42 >> 10)
  {
    v52 = v48;
    v53 = v46;
  }
  v87 = v78;
  *(_QWORD *)&v88 = v79;
  v54 = v83;
  if (v71 >= v42 >> 10)
    v54 = v44;
  *((_QWORD *)&v88 + 1) = v85;
  *(_QWORD *)&v89 = v84;
  *((_QWORD *)&v89 + 1) = v49;
  *(_QWORD *)&v90 = v54;
  *((_QWORD *)&v90 + 1) = v53;
  *(_QWORD *)&v91 = v52;
  v55 = *v39;
  v56 = v39[2];
  v118[1] = v39[1];
  v118[2] = v56;
  v118[0] = v55;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v118, (uint64_t)v119);
  outlined retain of Locale((uint64_t)v119);
  v57 = BigString._firstConstraintBreak(in:with:)(&v87, a3);
  v59 = v58;
  v61 = v60;
  v63 = v62;
  result = (unint64_t *)outlined release of Locale((uint64_t)v112);
  *a4 = v57;
  a4[1] = v59;
  a4[2] = v61;
  a4[3] = v63;
  return result;
}

unint64_t AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  char v78;
  char v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  char v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  int v109;
  void (*v110)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 v114;
  unint64_t v115;
  __int128 *v116;
  __int128 *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 *v123;
  __int128 v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  __int128 *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 *v153;
  unint64_t v154;
  unint64_t v155;
  __int128 *v156;
  unint64_t *v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  int v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  __int128 *v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  __int128 *v191;
  unint64_t v192;
  unint64_t v193;
  __int128 *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __int128 *v214;
  uint64_t v215;
  uint64_t *v216;
  unint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  _QWORD v223[9];
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE v243[48];
  _BYTE v244[48];
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD v249[3];
  uint64_t v250;
  uint64_t v251;
  _OWORD v252[3];
  _OWORD v253[7];

  v6 = *a2;
  v7 = v5[17];
  v8 = *a2 >> 10;
  if (v8 < v7 >> 10 || v5[21] >> 10 < v8)
  {
LABEL_182:
    __break(1u);
    goto LABEL_183;
  }
  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }
  v211 = *(_QWORD *)(a3 + 16);
  v215 = a4;
  v10 = *v5;
  v11 = *(_QWORD *)(*v5 + 64);
  v12 = *(_QWORD *)(*v5 + 80);
  v13 = v6 >> 11;
  if (v11)
    v14 = *(_QWORD *)(*v5 + 80);
  else
    v14 = 0;
  if (v14 < v13)
    goto LABEL_184;
  v16 = (__int128 *)a2[1];
  v15 = a2[2];
  v17 = a2[3];
  v195 = v5[1];
  v18 = v5[9];
  v19 = (__int128 *)v5[18];
  v20 = v5[19];
  v21 = v5[20];
  v22 = *(_QWORD *)(v10 + 72);
  v23 = *(_QWORD *)(v10 + 88);
  v213 = v10;
  v202 = (_QWORD *)result;
  v203 = a5;
  v209 = v17;
  v210 = v6;
  v192 = v7 >> 10;
  v193 = v7;
  v208 = v15;
  v190 = v20;
  v191 = v19;
  v189 = v21;
  v204 = a3;
  v217 = v18;
  if (!v11 || (v13 < v12 ? (v24 = *(unsigned __int16 *)(v11 + 16) == 0) : (v24 = 1), v24))
  {
    v25 = swift_unknownObjectRetain_n();
    v212 = specialized Rope._endPath.getter(v25);
    result = swift_unknownObjectRelease();
    v26 = 0;
    v27 = 0;
    if (!v11)
    {
      v28 = 0;
LABEL_54:
      v207 = v13 - v27;
      if (__OFSUB__(v13, v27))
      {
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
        goto LABEL_189;
      }
      v46 = *(_OWORD *)(v213 + 32);
      v253[3] = *(_OWORD *)(v213 + 16);
      v253[4] = v46;
      v253[5] = *(_OWORD *)(v213 + 48);
      result = BigString.utf8.getter();
      if (__OFSUB__(0, v27))
        goto LABEL_186;
      v47 = v209;
      v48 = BigString.UTF8View.index(_:offsetBy:)();
      v50 = v49;
      v187 = v52;
      v188 = v51;
      result = outlined release of Locale((uint64_t)&v240);
      v200 = v28;
      v201 = v26;
      if (v28 == v217)
      {
        v53 = v210;
        v54 = v16;
        v55 = v208;
        goto LABEL_173;
      }
      v194 = v16;
      v56 = v213;
      if (v23 != *(_QWORD *)(v213 + 88))
      {
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }
      v183 = v50;
      v184 = v48;
      if (v26)
      {
        v57 = v26 + 24 * ((v212 >> ((4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C)) & 0xF);
        v59 = *(_QWORD *)(v57 + 32);
        v58 = *(_QWORD *)(v57 + 40);
        swift_bridgeObjectRetain();
        v182 = v58;
        result = swift_bridgeObjectRetain();
      }
      else
      {
        v60 = *(_QWORD *)(v213 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v212, v60);
        v59 = v61;
        v182 = v62;
        result = swift_unknownObjectRelease();
      }
      v63 = v211;
      v198 = v23;
      if (v195 >= v28)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v112 = v207;
LABEL_121:
        v113 = (_OWORD *)(v56 + 16);
        v114 = *(_OWORD *)(v56 + 32);
        v218 = *(_OWORD *)(v56 + 16);
        v219 = v114;
        v220 = *(_OWORD *)(v56 + 48);
        BigString.utf8.getter();
        result = v184;
        if (__OFSUB__(v112, v184 >> 11))
          goto LABEL_190;
        v115 = BigString.UTF8View.index(_:offsetBy:)();
        v117 = v116;
        v119 = v118;
        v121 = v120;
        outlined release of Locale((uint64_t)&v241);
        if (v192 >= v115 >> 10)
          v122 = v193;
        else
          v122 = v115;
        if (v192 >= v115 >> 10)
          v123 = v191;
        else
          v123 = v117;
        if (v192 < v115 >> 10)
        {
          v47 = v121;
        }
        else
        {
          v119 = v190;
          v47 = v189;
        }
        v124 = *(_OWORD *)(v56 + 32);
        v253[0] = *v113;
        v253[1] = v124;
        v253[2] = *(_OWORD *)(v56 + 48);
        BigString.unicodeScalars.getter();
        v125 = BigString.UnicodeScalarView.index(after:)();
        v127 = v126;
        v129 = v128;
        v131 = v130;
        result = outlined release of Locale((uint64_t)&v242);
        v132 = *v113;
        v133 = v113[2];
        v252[1] = v113[1];
        v252[2] = v133;
        v252[0] = v132;
        if (v125 >> 10 < v122 >> 10)
          goto LABEL_191;
        v53 = v122;
        *(_QWORD *)&v235 = v122;
        *((_QWORD *)&v235 + 1) = v123;
        *(_QWORD *)&v236 = v119;
        *((_QWORD *)&v236 + 1) = v47;
        *(_QWORD *)&v237 = v125;
        *((_QWORD *)&v237 + 1) = v127;
        *(_QWORD *)&v238 = v129;
        *((_QWORD *)&v238 + 1) = v131;
        v54 = v123;
        v55 = v119;
        if (v122 >> 10 != v125 >> 10)
        {
          v134 = v129;
          v135 = *(_QWORD *)(v215 + 16);
          if (v135)
          {
            v213 = v53;
            v214 = v123;
            v216 = (uint64_t *)v131;
            v217 = v47;
            v211 = v125 >> 10;
            v136 = v55;
            outlined retain of Locale((uint64_t)v252);
            swift_bridgeObjectRetain();
            v137 = 40;
            v138 = v135;
            while (*(_QWORD *)(v215 + v137))
            {
              swift_bridgeObjectRelease();
              v137 += 16;
              if (!--v138)
              {
                v139 = v215;
                result = swift_bridgeObjectRelease();
LABEL_144:
                v149 = v213;
                v147 = v214;
                v148 = v136;
                v47 = v217;
                goto LABEL_145;
              }
            }
            v139 = v215;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            result = BigString.startIndex.getter();
            v140 = v211;
            if (v211 <= result >> 10)
              goto LABEL_144;
            BigString.utf8.getter();
            v210 = v134;
            v141 = (uint64_t)v216;
            v142 = BigString.UTF8View.index(before:)();
            v208 = v144;
            v209 = v143;
            v206 = v145;
            outlined release of Locale((uint64_t)v243);
            BigString.utf8.getter();
            BigString.UTF8View.subscript.getter();
            result = outlined release of Locale((uint64_t)v244);
            if (v140 < v142 >> 10)
              goto LABEL_201;
            *(_QWORD *)&v230 = v142;
            *((_QWORD *)&v230 + 1) = v209;
            *(_QWORD *)&v231 = v208;
            *((_QWORD *)&v231 + 1) = v206;
            *(_QWORD *)&v232 = v125;
            *((_QWORD *)&v232 + 1) = v127;
            v146 = v210;
            *(_QWORD *)&v233 = v210;
            *((_QWORD *)&v233 + 1) = v141;
            specialized BidirectionalCollection<>._getBlock(for:in:)(1, &v230, &v224);
            result = outlined release of Locale((uint64_t)&v245);
            v147 = v214;
            v139 = v215;
            v148 = v136;
            v47 = v217;
            v134 = v146;
            v149 = v213;
            if (v227 != 2)
            {
              v149 = v224;
              if (v211 < v224 >> 10)
                goto LABEL_203;
              v147 = (__int128 *)v225;
              v148 = v226;
              v47 = v227;
            }
LABEL_145:
            v150 = 0;
            v223[0] = v149;
            v223[1] = v147;
            v223[2] = v148;
            v223[3] = v47;
            v223[4] = v125;
            v223[5] = v127;
            v151 = 40;
            v223[6] = v134;
            v223[7] = v216;
            while (1)
            {
              v152 = v150 + 1;
              if (__OFADD__(v150, 1))
                break;
              if (*(_QWORD *)(v139 + v151))
              {
                v155 = v149;
                v217 = v47;
                v156 = v147;
                swift_bridgeObjectRetain();
                v157 = (unint64_t *)(v139 + 40);
                v158 = (char *)MEMORY[0x1E0DEE9D8];
                do
                {
                  v159 = *v157;
                  if (*v157)
                  {
                    v160 = *(v157 - 1);
                    if ((v159 & 0x2000000000000000) != 0 ? HIBYTE(v159) & 0xF : v160 & 0xFFFFFFFFFFFFLL)
                    {
                      if ((v159 & 0x1000000000000000) != 0)
                      {
                        v162 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                      }
                      else
                      {
                        if ((v159 & 0x2000000000000000) != 0)
                        {
                          v224 = *(v157 - 1);
                          v225 = v159 & 0xFFFFFFFFFFFFFFLL;
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          if ((v160 & 0x1000000000000000) == 0)
                            _StringObject.sharedUTF8.getter();
                          swift_bridgeObjectRetain();
                        }
                        v162 = _decodeScalar(_:startingAt:)();
                        swift_bridgeObjectRelease();
                      }
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v158 + 2) + 1, 1, v158);
                      v164 = *((_QWORD *)v158 + 2);
                      v163 = *((_QWORD *)v158 + 3);
                      if (v164 >= v163 >> 1)
                        v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v163 > 1), v164 + 1, 1, v158);
                      *((_QWORD *)v158 + 2) = v164 + 1;
                      *(_DWORD *)&v158[4 * v164 + 32] = v162;
                    }
                  }
                  v157 += 2;
                  --v135;
                }
                while (v135);
                swift_bridgeObjectRelease();
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)v249);
                v165 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v158);
                v167 = v166;
                v169 = v168;
                v171 = v170;
                swift_bridgeObjectRelease();
                outlined release of Locale((uint64_t)&v224);
                result = outlined release of Locale((uint64_t)v252);
                v23 = v198;
                v54 = v156;
                v55 = v148;
                v47 = v217;
                v53 = v155;
                if (v171 != 2)
                {
                  if (v211 < v165 >> 10)
                    goto LABEL_202;
                  v53 = v165;
                  v54 = v167;
                  v55 = v169;
                  v47 = v171;
                }
                goto LABEL_173;
              }
              v151 += 16;
              ++v150;
              if (v152 == v135)
              {
                v153 = v147;
                v154 = v149;
                result = outlined release of Locale((uint64_t)v252);
                v53 = v154;
                v55 = v148;
                v54 = v153;
                v23 = v198;
                goto LABEL_173;
              }
            }
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
        }
        v23 = v198;
LABEL_173:
        v172 = v202;
        *v202 = v53;
        v172[1] = v54;
        v172[2] = v55;
        v172[3] = v47;
        v173 = v203;
        v174 = v212;
        *v203 = v23;
        v173[1] = v174;
        v175 = v200;
        v173[2] = v201;
        v173[3] = v175;
        v173[4] = v207;
        return result;
      }
      v216 = &v228;
      v214 = (__int128 *)&v247;
      v178 = (uint64_t *)(v204 + 40);
      v185 = v207;
      v186 = v28;
      v64 = v212;
      v65 = v26;
      v199 = v59;
LABEL_64:
      v66 = *(_QWORD *)(v56 + 64);
      v68 = *(_QWORD *)(v56 + 80);
      v67 = *(_QWORD *)(v56 + 88);
      v224 = v23;
      v225 = v64;
      v226 = v65;
      if (v23 != v67)
        goto LABEL_192;
      v217 = v68;
      v69 = v56;
      if (v66)
      {
        v70 = *(unsigned __int8 *)(v66 + 18);
        v71 = v64;
        v72 = v65;
        result = swift_unknownObjectRetain();
        v65 = v72;
        v64 = v71;
        if (v71 <= v70)
          goto LABEL_193;
      }
      else if (!v64)
      {
LABEL_193:
        __break(1u);
        goto LABEL_194;
      }
      if (v65)
      {
        v73 = (4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C;
        if (((v64 >> v73) & 0xF) != 0)
        {
          v74 = ((((v64 >> v73) & 0xF) - 1) << v73) | ((-15 << v73) - 1) & v64;
          v225 = v74;
          v56 = v69;
LABEL_76:
          v79 = (4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C;
          v181 = v74;
          v179 = v65;
          v80 = *(_QWORD *)(v65 + 24 * ((v74 >> v79) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v81 = 0;
LABEL_80:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if (__OFSUB__(v185, v80))
          {
LABEL_195:
            __break(1u);
            goto LABEL_196;
          }
          if (v23 != *(_QWORD *)(v56 + 88))
          {
LABEL_196:
            __break(1u);
            goto LABEL_197;
          }
          v177 = v185 - v80;
          if ((v81 & 1) != 0)
          {
            v82 = *(_QWORD *)(v56 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v181, v82);
            v180 = v83;
            v85 = v84;
            swift_unknownObjectRelease();
          }
          else
          {
            v86 = v179 + 24 * ((v181 >> ((4 * *(_BYTE *)(v179 + 18) + 8) & 0x3C)) & 0xF);
            v85 = *(_QWORD *)(v86 + 32);
            v87 = *(_QWORD *)(v86 + 40);
            swift_bridgeObjectRetain();
            v180 = v87;
            swift_bridgeObjectRetain();
          }
          v88 = v199;
          --v186;
          result = swift_bridgeObjectRetain();
          v89 = 0;
          v90 = v178;
          v217 = v85;
          while (1)
          {
            v92 = v89 + 1;
            if (__OFADD__(v89, 1))
              goto LABEL_177;
            v93 = *(v90 - 1);
            v94 = *v90;
            if (*(_QWORD *)(v88 + 16))
            {
              swift_bridgeObjectRetain_n();
              v95 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v94);
              if ((v96 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v88 + 56) + 72 * v95, (uint64_t)&v235);
              }
              else
              {
                v239 = 0;
                v237 = 0u;
                v238 = 0u;
                v235 = 0u;
                v236 = 0u;
              }
              swift_bridgeObjectRelease();
              v85 = v217;
              if (!*(_QWORD *)(v217 + 16))
              {
LABEL_95:
                v234 = 0;
                v232 = 0u;
                v233 = 0u;
                v230 = 0u;
                v231 = 0u;
                goto LABEL_102;
              }
            }
            else
            {
              v239 = 0;
              v237 = 0u;
              v238 = 0u;
              v235 = 0u;
              v236 = 0u;
              swift_bridgeObjectRetain();
              if (!*(_QWORD *)(v85 + 16))
                goto LABEL_95;
            }
            swift_bridgeObjectRetain();
            v97 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v94);
            if ((v98 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v85 + 56) + 72 * v97, (uint64_t)&v230);
            }
            else
            {
              v234 = 0;
              v232 = 0u;
              v233 = 0u;
              v230 = 0u;
              v231 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_102:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v235, (uint64_t)&v224, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v230, (uint64_t)v216, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v227)
            {
              if (v229)
                goto LABEL_119;
              outlined destroy of Any?((uint64_t)&v224, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v230, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              result = outlined destroy of Any?((uint64_t)&v235, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_89;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v224, (uint64_t)v223, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v229)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v223);
LABEL_119:
              outlined destroy of Any?((uint64_t)&v224, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v230, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v235, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_120:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v112 = v185;
              goto LABEL_121;
            }
            v99 = *((_OWORD *)v216 + 3);
            v220 = *((_OWORD *)v216 + 2);
            v221 = v99;
            v222 = v216[8];
            v100 = *((_OWORD *)v216 + 1);
            v218 = *(_OWORD *)v216;
            v219 = v100;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v223, (uint64_t)v253);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v218, (uint64_t)v252);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v253, (uint64_t)&v245, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v252, (uint64_t)v214, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v246)
            {
              if (!v248)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v245);
LABEL_87:
                v91 = 0;
                goto LABEL_88;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v245, (uint64_t)v249);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v214, (uint64_t)v244);
              v101 = v250;
              v197 = v251;
              v196 = __swift_project_boxed_opaque_existential_1(v249, v250);
              v206 = &v176;
              v102 = *(_QWORD *)(v101 - 8);
              MEMORY[0x1E0C80A78](v196);
              v104 = (char *)&v176 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v244, (uint64_t)v243);
              v105 = type metadata accessor for Optional();
              v205 = &v176;
              v106 = *(_QWORD *)(v105 - 8);
              MEMORY[0x1E0C80A78](v105);
              v108 = (char *)&v176 - v107;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v109 = swift_dynamicCast();
              v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56);
              if (v109)
              {
                v110(v108, 0, 1, v101);
                (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v104, v108, v101);
                v91 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v102 + 8))(v104, v101);
              }
              else
              {
                v110(v108, 1, 1, v101);
                (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
                v91 = 0;
              }
              v56 = v213;
              v63 = v211;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v244);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v249);
              v88 = v199;
            }
            else
            {
              if (v248)
              {
                outlined destroy of Any?((uint64_t)v214, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_87;
              }
              v91 = 1;
            }
LABEL_88:
            outlined destroy of Any?((uint64_t)v252, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v253, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v218);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v223);
            outlined destroy of Any?((uint64_t)&v224, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v230, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = outlined destroy of Any?((uint64_t)&v235, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v91 & 1) == 0)
              goto LABEL_120;
LABEL_89:
            v90 += 2;
            ++v89;
            v85 = v217;
            if (v92 == v63)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v111 = v177;
              v185 = v177;
              v23 = v198;
              v64 = v181;
              v65 = v179;
              if (v195 < v186)
                goto LABEL_64;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v112 = v111;
              goto LABEL_121;
            }
          }
        }
      }
      v75 = *(unsigned __int8 *)(v66 + 18);
      v76 = (4 * v75 + 8) & 0x3C;
      v77 = (v64 >> v76) & 0xF;
      *(_QWORD *)&v245 = v77;
      v56 = v69;
      if (v75)
      {
        swift_unknownObjectRetain();
        v78 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v66 + 16, v66 + 24, (uint64_t *)&v245, (uint64_t)&v224, v75);
        result = swift_unknownObjectRelease();
        if ((v78 & 1) != 0)
        {
          if (v224 != v23)
          {
LABEL_194:
            __break(1u);
            goto LABEL_195;
          }
          v74 = v225;
          v65 = v226;
          v63 = v211;
          if (v226)
            goto LABEL_76;
          goto LABEL_79;
        }
      }
      else if (v77)
      {
        v74 = ((v77 - 1) << v76) | ((-15 << v76) - 1) & v64;
        v225 = v74;
        v226 = v66;
        v65 = v66;
        if (v66)
          goto LABEL_76;
LABEL_79:
        swift_unknownObjectRetain();
        v181 = v74;
        v80 = specialized Rope._Node.subscript.getter(v74, v66);
        swift_unknownObjectRelease();
        v179 = 0;
        v81 = 1;
        goto LABEL_80;
      }
LABEL_197:
      __break(1u);
      goto LABEL_198;
    }
LABEL_18:
    swift_unknownObjectRetain();
    v28 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v23, v212, v26, v11, v22);
    result = swift_unknownObjectRelease_n();
    goto LABEL_54;
  }
  v216 = (uint64_t *)v22;
  v194 = v16;
  v198 = v23;
  v29 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v27 = v13;
    v30 = v11;
    while (1)
    {
      v33 = *(unsigned __int16 *)(v30 + 16);
      if (!*(_WORD *)(v30 + 16))
        break;
      v34 = *(_QWORD *)(v30 + 40);
      v35 = __OFSUB__(v27, v34);
      v36 = v27 - v34;
      if (v35)
        goto LABEL_180;
      if (__OFADD__(v36, 1))
        goto LABEL_181;
      if (v36 + 1 < 1)
      {
        v33 = 0;
        goto LABEL_23;
      }
      if ((_DWORD)v33 == 1)
      {
        v27 = v36;
        break;
      }
      v37 = (uint64_t *)(v30 + 64);
      v38 = 1;
      while (1)
      {
        v39 = *v37;
        v37 += 3;
        v27 = v36 - v39;
        if (__OFSUB__(v36, v39))
        {
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
          goto LABEL_178;
        }
        if (__OFADD__(v27, 1))
          goto LABEL_176;
        if (v27 + 1 < 1)
          break;
        ++v38;
        v36 = v27;
        if (v33 == v38)
          goto LABEL_22;
      }
      v33 = v38;
      v27 = v36;
LABEL_23:
      v31 = (4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C;
      v29 = ((-15 << v31) - 1) & v29 | (v33 << v31);
      v32 = *(_QWORD *)(v30 + 24 + 24 * v33);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v30 = v32;
      if (!*(_BYTE *)(v32 + 18))
        goto LABEL_38;
    }
LABEL_22:
    if (!v27)
      goto LABEL_23;
    goto LABEL_179;
  }
  result = swift_unknownObjectRetain_n();
  v27 = v13;
  v32 = v11;
LABEL_38:
  v40 = *(unsigned __int16 *)(v32 + 16);
  v26 = v32;
  if (!*(_WORD *)(v32 + 16))
  {
    v23 = v198;
LABEL_51:
    if (v27)
    {
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }
    goto LABEL_52;
  }
  v41 = *(_QWORD *)(v32 + 24);
  v35 = __OFSUB__(v27, v41);
  v42 = v27 - v41;
  v23 = v198;
  if (v35)
  {
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  if (!__OFADD__(v42, 1))
  {
    if (v42 + 1 < 1)
    {
      v40 = 0;
    }
    else
    {
      if ((_DWORD)v40 == 1)
      {
        v27 = v42;
        goto LABEL_51;
      }
      v43 = (uint64_t *)(v32 + 48);
      v44 = 1;
      while (1)
      {
        v45 = *v43;
        v43 += 3;
        v27 = v42 - v45;
        if (__OFSUB__(v42, v45))
          goto LABEL_187;
        if (__OFADD__(v27, 1))
          goto LABEL_188;
        if (v27 + 1 < 1)
          break;
        ++v44;
        v42 = v27;
        if (v40 == v44)
          goto LABEL_51;
      }
      v40 = v44;
      v27 = v42;
    }
LABEL_52:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v212 = v29 & 0xFFFFFFFFFFFFF0FFLL | (v40 << 8);
    v16 = v194;
    v22 = (uint64_t)v216;
    goto LABEL_18;
  }
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
  return result;
}

uint64_t AttributedString.Runs.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  unint64_t object;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t countAndFlagsBits;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  int64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  void *v96;
  uint64_t v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  uint64_t v106;
  void *v107;
  __int128 *v108;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  Swift::String v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  Swift::String v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  Swift::String v146;
  Swift::String v147;
  uint64_t v148[8];
  Swift::String v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[24];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  char v165[48];
  char v166;
  char v167;
  char v168[48];
  char v169[112];
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;

  v1 = *v0;
  v163 = 0;
  v164 = 0xE000000000000000;
  v2 = swift_retain();
  AttributedString.Runs.init(_:in:)(v2, &v190);
  v3 = v191;
  v4 = v190;
  v122 = v199;
  v5 = v199;
  if (v191 == (void *)v199)
  {
    v6 = 0;
    goto LABEL_151;
  }
  v120 = v193;
  v121 = v192;
  v7 = v194;
  v8 = v195;
  v118 = v197;
  v119 = v196;
  v113 = v201;
  v114 = v200;
  v112 = v202;
  v9 = v198;
  v10 = v203;
  v125 = v205;
  v126 = v204;
  v124 = v206;
  v117 = v207;
  v108 = (__int128 *)(v1 + 16);
  v110 = v208;
  result = outlined retain of AttributedString.Runs((uint64_t)&v190);
  v127 = v10;
  v109 = v10 >> 10;
  v123 = (__int128 *)(v4 + 16);
  v12 = v120;
  v133 = v7;
  v134._countAndFlagsBits = v121;
  v115 = v8;
  v116 = v7;
  v130 = v119;
  v131 = v8;
  v129 = v118;
  v111 = v9;
  v137 = v9;
  v13 = (uint64_t)v3;
  v132 = (_QWORD *)v4;
  v106 = v5;
  v107 = v3;
  while (2)
  {
    if (v13 >= v5)
      goto LABEL_156;
    v149._countAndFlagsBits = v4;
    v149._object = v3;
    *(_QWORD *)&v150 = v121;
    *((_QWORD *)&v150 + 1) = v120;
    *(_QWORD *)&v151 = v116;
    *((_QWORD *)&v151 + 1) = v115;
    *(_QWORD *)&v152 = v119;
    *((_QWORD *)&v152 + 1) = v118;
    *(_OWORD *)&v153[8] = v122;
    v154 = v114;
    v155 = v113;
    v156 = v112;
    *(_QWORD *)v153 = v111;
    v157 = v127;
    v158 = v126;
    v159 = v125;
    v160 = v124;
    v161 = v117;
    v162 = v110;
    v148[0] = v13;
    v148[1] = v134._countAndFlagsBits;
    v148[2] = v12;
    v148[3] = v133;
    v148[4] = v131;
    v148[5] = v130;
    v148[6] = v129;
    v148[7] = v137;
    result = (uint64_t)AttributedString.Runs._resolve(_:)(v148, &v140._countAndFlagsBits);
    if (v140._countAndFlagsBits != *(_QWORD *)(v4 + 88))
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }
    v134._object = (void *)v12;
    v138 = v13;
    object = (unint64_t)v140._object;
    v16 = *((_QWORD *)&v142 + 1);
    v18 = v143;
    v17 = v144;
    if ((_QWORD)v141)
    {
      v19 = v141 + 24 * (((unint64_t)v140._object >> ((4 * *(_BYTE *)(v141 + 18) + 8) & 0x3C)) & 0xF);
      v20 = *(_QWORD *)(v19 + 24);
      v21 = *(_QWORD *)(v19 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v22 = v132[8];
      v23 = v144;
      swift_retain();
      swift_unknownObjectRetain();
      v17 = v23;
      v20 = specialized Rope._Node.subscript.getter(object, v22);
      v21 = v24;
      result = swift_unknownObjectRelease();
    }
    if (v109 >= v16 >> 10)
      v25 = v127;
    else
      v25 = v16;
    if (v109 >= v16 >> 10)
      v26 = v126;
    else
      v26 = v18;
    if (v109 >= v16 >> 10)
      v27 = v125;
    else
      v27 = *((_QWORD *)&v18 + 1);
    if (v109 >= v16 >> 10)
      v28 = v124;
    else
      v28 = v17;
    if (__OFADD__(v20, v16 >> 11))
      goto LABEL_158;
    if ((uint64_t)((unint64_t)v117 >> 11) >= (uint64_t)(v20 + (v16 >> 11)))
      v29 = v20 + (v16 >> 11);
    else
      v29 = (unint64_t)v117 >> 11;
    v30 = v123[1];
    v187 = *v123;
    v188 = v30;
    v189 = v123[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v29, v25 >> 11))
      goto LABEL_159;
    v31 = BigString.UTF8View.index(_:offsetBy:)();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    result = outlined release of Locale((uint64_t)v165);
    if (v31 >> 10 < v25 >> 10)
    {
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    v170 = v25;
    v171 = v26;
    v172 = v27;
    v173 = v28;
    v174 = v31;
    v175 = v33;
    v176 = v35;
    v177 = v37;
    v38 = v133;
    v40 = v132[8];
    v39 = v132[9];
    countAndFlagsBits = v134._countAndFlagsBits;
    v128 = v132[10];
    v136 = v132[11];
    if (v133 == 1 || v134._countAndFlagsBits != v132[11])
    {
      v135 = v132[9];
      if (v40)
        v44 = v132[9];
      else
        v44 = 0;
      v45 = v138;
      if (v138 < 0 || v44 < v138)
      {
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }
      if (v40 && v138 < v135 && *(_WORD *)(v40 + 16))
      {
        v46 = *(unsigned __int8 *)(v40 + 18);
        if (*(_BYTE *)(v40 + 18))
        {
          swift_unknownObjectRetain_n();
          result = swift_retain();
          v47 = v40;
          while (1)
          {
            v50 = *(unsigned __int16 *)(v47 + 16);
            if (*(_WORD *)(v47 + 16))
            {
              v51 = *(_QWORD *)(v47 + 32);
              v52 = __OFSUB__(v45, v51);
              v53 = v45 - v51;
              if (v52)
                goto LABEL_154;
              if (__OFADD__(v53, 1))
                goto LABEL_155;
              if (v53 + 1 <= 0)
              {
                v50 = 0;
                goto LABEL_45;
              }
              if ((_DWORD)v50 != 1)
              {
                v54 = *(_QWORD *)(v47 + 56);
                v45 = v53 - v54;
                if (__OFSUB__(v53, v54))
                  goto LABEL_168;
                if (__OFADD__(v45, 1))
                  goto LABEL_169;
                if (v45 + 1 < 1)
                {
                  v50 = 1;
                  v45 = v53;
                  goto LABEL_45;
                }
                if ((_DWORD)v50 == 2)
                  goto LABEL_44;
                v55 = *(_QWORD *)(v47 + 80);
                v52 = __OFSUB__(v45, v55);
                v53 = v45 - v55;
                if (v52)
                  goto LABEL_172;
                if (__OFADD__(v53, 1))
                  goto LABEL_173;
                if (v53 + 1 < 1)
                {
                  v50 = 2;
                  goto LABEL_45;
                }
                if ((_DWORD)v50 != 3)
                {
                  v56 = 3;
                  if (v50 > 3)
                    v56 = *(unsigned __int16 *)(v47 + 16);
                  v57 = (_QWORD *)(v47 + 104);
                  v58 = 3;
                  while (1)
                  {
                    if (v56 == v58)
                      goto LABEL_164;
                    v45 = v53 - *v57;
                    if (__OFSUB__(v53, *v57))
                      goto LABEL_165;
                    if (__OFADD__(v45, 1))
                      goto LABEL_166;
                    if (v45 + 1 < 1)
                      break;
                    ++v58;
                    v57 += 3;
                    v53 = v45;
                    if (v50 == v58)
                      goto LABEL_44;
                  }
                  v50 = v58;
                  v45 = v53;
                  goto LABEL_45;
                }
              }
              v45 = v53;
            }
LABEL_44:
            if (v45)
            {
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
              goto LABEL_157;
            }
LABEL_45:
            v48 = (4 * *(_BYTE *)(v47 + 18) + 8) & 0x3C;
            v46 = ((-15 << v48) - 1) & v46 | (v50 << v48);
            v49 = *(_QWORD *)(v47 + 24 + 24 * v50);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v47 = v49;
            if (!*(_BYTE *)(v49 + 18))
              goto LABEL_77;
          }
        }
        swift_unknownObjectRetain_n();
        result = swift_retain();
        v49 = v40;
LABEL_77:
        v59 = *(unsigned __int16 *)(v49 + 16);
        v38 = v49;
        if (*(_WORD *)(v49 + 16))
        {
          v60 = v45 - 1;
          if (__OFSUB__(v45, 1))
          {
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
            goto LABEL_180;
          }
          if (__OFADD__(v60, 1))
            goto LABEL_176;
          if (v45 <= 0)
          {
            v59 = 0;
          }
          else
          {
            if ((_DWORD)v59 == 1)
              goto LABEL_103;
            v52 = __OFSUB__(v60, 1);
            v60 = v45 - 2;
            if (v52)
              goto LABEL_179;
            if (__OFADD__(v60, 1))
            {
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
              goto LABEL_182;
            }
            if (v45 - 1 < 1)
            {
              v59 = 1;
            }
            else
            {
              if ((_DWORD)v59 == 2)
                goto LABEL_103;
              v52 = __OFSUB__(v60, 1);
              v60 = v45 - 3;
              if (v52)
                goto LABEL_181;
              if (__OFADD__(v60, 1))
              {
LABEL_182:
                __break(1u);
                return result;
              }
              if (v45 - 2 < 1)
              {
                v59 = 2;
              }
              else
              {
                if ((_DWORD)v59 == 3)
                  goto LABEL_103;
                v61 = 0;
                v62 = 3;
                if (v59 > 3)
                  v62 = *(unsigned __int16 *)(v49 + 16);
                v63 = v62 - 3;
                if (v60 >= v59 - 4)
                  v64 = v59 - 4;
                else
                  v64 = v45 - 3;
                if (v64 >= v45 + 0x7FFFFFFFFFFFFFFDLL)
                  v64 = v45 + 0x7FFFFFFFFFFFFFFDLL;
                while (1)
                {
                  if (v63 <= v64)
                    goto LABEL_177;
                  if (v45 + 0x7FFFFFFFFFFFFFFDLL == v61)
                    goto LABEL_178;
                  if (v60 == v61)
                    break;
                  if (v59 - 3 == ++v61)
                  {
                    v60 -= v61;
                    goto LABEL_103;
                  }
                }
                v59 = v45;
              }
            }
          }
        }
        else
        {
          v60 = v45;
LABEL_103:
          if (v60)
          {
LABEL_174:
            __break(1u);
            goto LABEL_175;
          }
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v42 = v46 & 0xFFFFFFFFFFFFF0FFLL | (v59 << 8);
        v39 = v135;
      }
      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        v39 = v135;
        v42 = specialized Rope._endPath.getter(v40);
        result = swift_unknownObjectRelease();
        v38 = 0;
        if (!v40)
        {
          v43 = 0;
          countAndFlagsBits = v136;
          goto LABEL_111;
        }
      }
      swift_unknownObjectRetain();
      countAndFlagsBits = v136;
      v43 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v136, v42, v38, v40, v39, v128);
      result = swift_unknownObjectRelease_n();
      goto LABEL_111;
    }
    if (v137 == 2)
    {
      v42 = (unint64_t)v134._object;
      if (v40)
      {
        swift_retain();
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v134._countAndFlagsBits, (unint64_t)v134._object, v133, v40, v39, v128);
        v43 = result;
      }
      else
      {
        result = swift_retain();
        v43 = 0;
      }
    }
    else
    {
      v43 = v131 >> 11;
      swift_unknownObjectRetain();
      result = swift_retain();
      v42 = (unint64_t)v134._object;
    }
LABEL_111:
    v149._countAndFlagsBits = countAndFlagsBits;
    v149._object = (void *)v42;
    *(_QWORD *)&v150 = v38;
    v52 = __OFADD__(v138, 1);
    v139 = v138 + 1;
    if (v52)
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if (countAndFlagsBits != v136)
    {
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    if (v38)
    {
      v65 = *(_QWORD *)(v38 + 24 * ((v42 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v66 = v128;
    }
    else
    {
      swift_unknownObjectRetain();
      v67 = v42;
      v66 = v128;
      v65 = specialized Rope._Node.subscript.getter(v67, v40);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v52 = __OFADD__(v43, v65);
    v68 = v43 + v65;
    if (v52)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v149, v40, v39, v66, v136);
    swift_unknownObjectRelease_n();
    v134 = v149;
    v69 = v150;
    if (v137 != 2)
    {
      v76 = v123[1];
      v181 = *v123;
      v182 = v76;
      v183 = v123[2];
      BigString.utf8.getter();
      result = v131;
      if (!__OFSUB__(v68, v131 >> 11))
      {
        v71 = BigString.UTF8View.index(_:offsetBy:)();
        v129 = v78;
        v130 = v77;
        v137 = v79;
        v75 = &v166;
        goto LABEL_121;
      }
      goto LABEL_171;
    }
    v70 = v123[1];
    v184 = *v123;
    v185 = v70;
    v186 = v123[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v71 = BigString.UTF8View.index(_:offsetBy:)();
    v129 = v73;
    v130 = v72;
    v137 = v74;
    v75 = &v167;
LABEL_121:
    outlined release of Locale((uint64_t)v75);
    swift_release();
    v133 = v69;
    v131 = v71;
    v80 = v108[1];
    v178 = *v108;
    v179 = v80;
    v180 = v108[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v168);
    v81 = MEMORY[0x186DA46DC](v169);
    v83 = v82;
    v84 = v163 & 0xFFFFFFFFFFFFLL;
    if ((v164 & 0x2000000000000000) != 0)
      v84 = HIBYTE(v164) & 0xF;
    if (v84)
    {
      v85._countAndFlagsBits = 10;
      v85._object = (void *)0xE100000000000000;
      String.append(_:)(v85);
    }
    v147._countAndFlagsBits = v81;
    v147._object = v83;
    v86._countAndFlagsBits = 32;
    v86._object = (void *)0xE100000000000000;
    String.append(_:)(v86);
    v146._countAndFlagsBits = 0;
    v146._object = (void *)0xE000000000000000;
    v87 = v21 + 64;
    v88 = 1 << *(_BYTE *)(v21 + 32);
    if (v88 < 64)
      v89 = ~(-1 << v88);
    else
      v89 = -1;
    v90 = v89 & *(_QWORD *)(v21 + 64);
    v91 = (unint64_t)(v88 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    result = swift_bridgeObjectRetain();
    v92 = 0;
    while (1)
    {
      if (v90)
      {
        v93 = __clz(__rbit64(v90));
        v90 &= v90 - 1;
        v94 = v93 | (v92 << 6);
        goto LABEL_130;
      }
      v103 = v92 + 1;
      if (__OFADD__(v92, 1))
      {
        __break(1u);
        goto LABEL_153;
      }
      if (v103 >= v91)
        break;
      v104 = *(_QWORD *)(v87 + 8 * v103);
      ++v92;
      if (!v104)
      {
        v92 = v103 + 1;
        if (v103 + 1 >= v91)
          break;
        v104 = *(_QWORD *)(v87 + 8 * v92);
        if (!v104)
        {
          v92 = v103 + 2;
          if (v103 + 2 >= v91)
            break;
          v104 = *(_QWORD *)(v87 + 8 * v92);
          if (!v104)
          {
            v92 = v103 + 3;
            if (v103 + 3 >= v91)
              break;
            v104 = *(_QWORD *)(v87 + 8 * v92);
            if (!v104)
            {
              v92 = v103 + 4;
              if (v103 + 4 >= v91)
                break;
              v104 = *(_QWORD *)(v87 + 8 * v92);
              if (!v104)
              {
                v105 = v103 + 5;
                if (v105 >= v91)
                  break;
                v104 = *(_QWORD *)(v87 + 8 * v105);
                if (!v104)
                {
                  while (1)
                  {
                    v92 = v105 + 1;
                    if (__OFADD__(v105, 1))
                      goto LABEL_167;
                    if (v92 >= v91)
                      goto LABEL_4;
                    v104 = *(_QWORD *)(v87 + 8 * v92);
                    ++v105;
                    if (v104)
                      goto LABEL_149;
                  }
                }
                v92 = v105;
              }
            }
          }
        }
      }
LABEL_149:
      v90 = (v104 - 1) & v104;
      v94 = __clz(__rbit64(v104)) + (v92 << 6);
LABEL_130:
      v95 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v94);
      v97 = *v95;
      v96 = (void *)v95[1];
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v21 + 56) + 72 * v94, (uint64_t)&v150);
      v149._countAndFlagsBits = v97;
      v149._object = v96;
      v142 = v151;
      v143 = v152;
      v144 = *(_OWORD *)v153;
      v145 = *(_QWORD *)&v153[16];
      v140 = v149;
      v141 = v150;
      v98 = v149;
      swift_bridgeObjectRetain();
      String.append(_:)(v98);
      v99._countAndFlagsBits = 2112800;
      v99._object = (void *)0xE300000000000000;
      String.append(_:)(v99);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v141, (uint64_t)v148);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v100._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._countAndFlagsBits = 10;
      v101._object = (void *)0xE100000000000000;
      String.append(_:)(v101);
      v102._countAndFlagsBits = 9;
      v102._object = (void *)0xE100000000000000;
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      result = outlined destroy of Any?((uint64_t)&v140, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_4:
    swift_release();
    v149._countAndFlagsBits = 2683;
    v149._object = (void *)0xE200000000000000;
    String.append(_:)(v146);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 125;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    String.append(_:)(v149);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v147);
    v4 = (uint64_t)v132;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v5 = v106;
    v3 = v107;
    v13 = v139;
    v12 = (uint64_t)v134._object;
    if (v139 != v106)
      continue;
    break;
  }
  outlined release of AttributedString.Runs((uint64_t)&v190);
  v6 = v163;
LABEL_151:
  swift_release();
  return v6;
}

BOOL static AttributedString.Runs.Index.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL static AttributedString.Runs.Index.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t AttributedString.Runs.Index.distance(to:)(_QWORD *a1)
{
  _QWORD *v1;
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a1, *v1);
  result = *a1 - *v1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t AttributedString.Runs.Index.advanced(by:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFADD__(*v2, result))
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2 + result;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
    a2[7] = 2;
  }
  return result;
}

_QWORD *protocol witness for Strideable.distance(to:) in conformance AttributedString.Runs.Index@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFSUB__(*result, *v2))
    __break(1u);
  else
    *a2 = *result - *v2;
  return result;
}

_QWORD *protocol witness for Strideable.advanced(by:) in conformance AttributedString.Runs.Index@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFADD__(*v2, *result))
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2 + *result;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
    a2[7] = 2;
  }
  return result;
}

_QWORD *protocol witness for static Strideable._step(after:from:by:) in conformance AttributedString.Runs.Index(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *result = *a4 + *a6;
    result[1] = 0;
    result[2] = 0;
    result[3] = 1;
    result[4] = 0;
    result[5] = 0;
    result[6] = 0;
    result[7] = 2;
    return 0;
  }
  return result;
}

uint64_t *AttributedString.Runs._resolveRun(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[5];

  v4 = *result;
  if (*result >= v2[1] && v2[9] >= v4)
  {
    v6 = result[3];
    v7 = (_QWORD *)*v2;
    if (v6 == 1)
    {
      v8 = v7[11];
    }
    else
    {
      v9 = result[1];
      v8 = v7[11];
      if (v9 == v8)
      {
        v10 = result[2];
        if (result[7] != 2)
        {
          v14 = (unint64_t)result[4] >> 11;
          goto LABEL_13;
        }
        v11 = v7[8];
        if (!v11)
        {
          v14 = 0;
          goto LABEL_13;
        }
        v13 = v7[9];
        v12 = v7[10];
        swift_unknownObjectRetain();
        v14 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v10, v6, v11, v13, v12);
LABEL_12:
        result = (uint64_t *)swift_unknownObjectRelease();
LABEL_13:
        *a2 = v9;
        a2[1] = v10;
        a2[2] = v6;
        a2[3] = v4;
        a2[4] = v14;
        return result;
      }
    }
    v15 = v7[8];
    v16 = v7[9];
    v17 = v7[10];
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.index(atRunOffset:)(v4, v15, v16, v17, v8, v18);
    v9 = v18[0];
    v10 = v18[1];
    v6 = v18[2];
    v4 = v18[3];
    v14 = v18[4];
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

__n128 AttributedString.Runs.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 40);
  v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 AttributedString.Runs.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 104);
  v4 = *(_OWORD *)(v1 + 120);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t AttributedString.Runs.index(after:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68[8];
  uint64_t v69[3];

  v4 = *(_QWORD *)result;
  v5 = v2[1];
  v6 = v2[9];
  if (*(_QWORD *)result < v5 || v4 >= v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 48);
  v10 = *(_QWORD *)(result + 56);
  v11 = *v2;
  v12 = v2[16];
  v13 = v2[8];
  v14 = *(_QWORD *)(result + 24);
  v15 = *(_QWORD *)(result + 32);
  v16 = *(_QWORD *)(*v2 + 64);
  v40 = *(_QWORD *)(*v2 + 72);
  v17 = *(_QWORD *)(*v2 + 88);
  v39 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)&v48 = *v2;
  *((_QWORD *)&v48 + 1) = v5;
  v18 = *((_OWORD *)v2 + 2);
  v49 = *((_OWORD *)v2 + 1);
  v50 = v18;
  v51 = *((_OWORD *)v2 + 3);
  v52 = v13;
  v53 = v6;
  v19 = *((_OWORD *)v2 + 6);
  v54 = *((_OWORD *)v2 + 5);
  v55 = v19;
  v56 = *((_OWORD *)v2 + 7);
  v57 = v12;
  v20 = *(_OWORD *)(v2 + 17);
  v21 = *(_OWORD *)(v2 + 19);
  v22 = *(_OWORD *)(v2 + 21);
  v61 = *(_OWORD *)(v2 + 23);
  v60 = v22;
  v59 = v21;
  v58 = v20;
  v41 = v4;
  v42 = *(_OWORD *)(result + 8);
  v43 = v14;
  v44 = v15;
  v45 = v9;
  v46 = v8;
  v47 = v10;
  swift_unknownObjectRetain();
  result = (uint64_t)AttributedString.Runs._resolveRun(_:)(&v41, (uint64_t *)&v62);
  v66 = v62;
  v67 = v63;
  v23 = v65;
  v48 = v62;
  *(_QWORD *)&v49 = v63;
  if (__OFADD__(v64, 1))
    goto LABEL_16;
  if ((_QWORD)v66 != v17)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v38 = v64 + 1;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v67, (uint64_t)v68);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v68, (uint64_t)v69);
  if (v69[0])
  {
    v24 = *(_QWORD *)(v69[0] + 24 * ((*((_QWORD *)&v66 + 1) >> ((4 * *(_BYTE *)(v69[0] + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = *((_QWORD *)&v66 + 1);
    swift_unknownObjectRetain();
    v24 = specialized Rope._Node.subscript.getter(v25, v16);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v23, v24))
    goto LABEL_18;
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v48, v16, v40, v39, v17);
  swift_unknownObjectRelease_n();
  v26 = v48;
  v27 = (__int128 *)(v11 + 16);
  v28 = v49;
  if (v10 == 2)
  {
    v29 = v27[1];
    v48 = *v27;
    v49 = v29;
    v50 = v27[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
LABEL_15:
    v31 = BigString.UTF8View.index(_:offsetBy:)();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    result = outlined release of Locale((uint64_t)&v41);
    *(_QWORD *)a2 = v38;
    *(_OWORD *)(a2 + 8) = v26;
    *(_QWORD *)(a2 + 24) = v28;
    *(_QWORD *)(a2 + 32) = v31;
    *(_QWORD *)(a2 + 40) = v33;
    *(_QWORD *)(a2 + 48) = v35;
    *(_QWORD *)(a2 + 56) = v37;
    return result;
  }
  v30 = v27[1];
  v48 = *v27;
  v49 = v30;
  v50 = v27[2];
  result = BigString.utf8.getter();
  if (!__OFSUB__(v23 + v24, v15 >> 11))
    goto LABEL_15;
LABEL_19:
  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs.index(before:)@<X0>(uint64_t *result@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char v65[48];
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v4 = *result;
  if (v2[1] >= *result)
    goto LABEL_94;
  if (v2[9] < v4)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v5 = result[3];
  v6 = (_QWORD *)*v2;
  v7 = *(_QWORD *)(*v2 + 64);
  v8 = v6[9];
  v9 = v6[11];
  v63 = result[7];
  v64 = v6[10];
  v60 = result[4];
  if (v5 != 1)
  {
    v10 = result[1];
    if (v10 == v9)
    {
      v11 = result[2];
      if (result[7] == 2)
      {
        if (v7)
        {
          swift_unknownObjectRetain_n();
          v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v11, v5, v7, v8, v64);
          result = (uint64_t *)swift_unknownObjectRelease();
        }
        else
        {
          v12 = 0;
        }
      }
      else
      {
        v12 = (unint64_t)result[4] >> 11;
        result = (uint64_t *)swift_unknownObjectRetain();
      }
LABEL_67:
      *(_QWORD *)&v66 = v10;
      *((_QWORD *)&v66 + 1) = v11;
      *(_QWORD *)&v67 = v5;
      v22 = __OFSUB__(v4, 1);
      v37 = v4 - 1;
      if (!v22)
      {
        if (v10 == v9)
        {
          if (v7)
          {
            v38 = *(unsigned __int8 *)(v7 + 18);
            swift_unknownObjectRetain();
            if (v38 < v11)
            {
LABEL_71:
              v61 = v37;
              v62 = (uint64_t *)a2;
              if (v5)
              {
                v39 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
                if (((v11 >> v39) & 0xF) != 0)
                {
                  a2 = v6;
                  v40 = v63;
                  v11 = ((((v11 >> v39) & 0xF) - 1) << v39) | ((-15 << v39) - 1) & v11;
LABEL_78:
                  v42 = *(_QWORD *)(v5 + 24 * ((v11 >> ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_unknownObjectRelease();
                  goto LABEL_82;
                }
              }
              swift_unknownObjectRetain();
              v41 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v66, v7);
              result = (uint64_t *)swift_unknownObjectRelease();
              if ((v41 & 1) == 0)
              {
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
                goto LABEL_104;
              }
              if ((_QWORD)v66 == v9)
              {
                a2 = v6;
                v11 = *((_QWORD *)&v66 + 1);
                v5 = v67;
                if ((_QWORD)v67)
                {
                  v40 = v63;
                  goto LABEL_78;
                }
LABEL_81:
                v40 = v63;
                swift_unknownObjectRetain();
                v42 = specialized Rope._Node.subscript.getter(v11, v7);
                swift_unknownObjectRelease_n();
LABEL_82:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                result = (uint64_t *)swift_bridgeObjectRelease();
                v22 = __OFSUB__(v12, v42);
                v43 = v12 - v42;
                if (!v22)
                {
                  v44 = a2 + 1;
                  if (v40 == 2)
                  {
                    v45 = a2[2];
                    v66 = *v44;
                    v67 = v45;
                    v68 = a2[3];
                    BigString.utf8.getter();
                    BigString.startIndex.getter();
                    v46 = BigString.UTF8View.index(_:offsetBy:)();
                    v48 = v47;
                    v50 = v49;
                    v52 = v51;
                    v54 = v61;
                    v53 = v62;
LABEL_87:
                    result = (uint64_t *)outlined release of Locale((uint64_t)v65);
                    *v53 = v54;
                    v53[1] = v9;
                    v53[2] = v11;
                    v53[3] = v5;
                    v53[4] = v46;
                    v53[5] = v48;
                    v53[6] = v50;
                    v53[7] = v52;
                    return result;
                  }
                  v55 = a2[2];
                  v66 = *v44;
                  v67 = v55;
                  v68 = a2[3];
                  BigString.utf8.getter();
                  result = (uint64_t *)v60;
                  v54 = v61;
                  v53 = v62;
                  if (!__OFSUB__(v43, v60 >> 11))
                  {
                    v46 = BigString.UTF8View.index(_:offsetBy:)();
                    v48 = v56;
                    v50 = v57;
                    v52 = v58;
                    goto LABEL_87;
                  }
                  goto LABEL_102;
                }
                goto LABEL_99;
              }
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }
          }
          else if (v11)
          {
            goto LABEL_71;
          }
          __break(1u);
          goto LABEL_81;
        }
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  if (v7)
    v13 = v6[9];
  else
    v13 = 0;
  if (v4 < 0 || v13 < v4)
    goto LABEL_101;
  if (!v7 || (v4 < v8 ? (v14 = *(unsigned __int16 *)(v7 + 16) == 0) : (v14 = 1), v14))
  {
    v15 = swift_unknownObjectRetain_n();
    v11 = specialized Rope._endPath.getter(v15);
    result = (uint64_t *)swift_unknownObjectRelease();
    v5 = 0;
    if (!v7)
    {
      v12 = 0;
      goto LABEL_66;
    }
LABEL_20:
    swift_unknownObjectRetain();
    v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v11, v5, v7, v8, v64);
    result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_66:
    v10 = v9;
    goto LABEL_67;
  }
  v61 = v6[9];
  v59 = v6[11];
  v16 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v17 = v4;
    v18 = v7;
    while (1)
    {
      v20 = *(unsigned __int16 *)(v18 + 16);
      if (*(_WORD *)(v18 + 16))
      {
        v21 = *(_QWORD *)(v18 + 32);
        v22 = __OFSUB__(v17, v21);
        v23 = v17 - v21;
        if (v22)
          goto LABEL_92;
        if (__OFADD__(v23, 1))
          goto LABEL_93;
        if (v23 + 1 < 1)
        {
          v20 = 0;
          goto LABEL_26;
        }
        if ((_DWORD)v20 != 1)
        {
          v24 = (uint64_t *)(v18 + 56);
          v25 = 1;
          while (1)
          {
            v26 = *v24;
            v24 += 3;
            v17 = v23 - v26;
            if (__OFSUB__(v23, v26))
              break;
            if (__OFADD__(v17, 1))
              goto LABEL_90;
            if (v17 + 1 < 1)
            {
              v20 = v25;
              v17 = v23;
              goto LABEL_26;
            }
            ++v25;
            v23 = v17;
            if (v20 == v25)
              goto LABEL_25;
          }
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
        v17 = v23;
      }
LABEL_25:
      if (v17)
        goto LABEL_91;
LABEL_26:
      v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      v16 = ((-15 << v19) - 1) & v16 | (v20 << v19);
      v5 = *(_QWORD *)(v18 + 24 + 24 * v20);
      swift_unknownObjectRetain();
      result = (uint64_t *)swift_unknownObjectRelease();
      v18 = v5;
      if (!*(_BYTE *)(v5 + 18))
        goto LABEL_42;
    }
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v17 = v4;
  v5 = v7;
LABEL_42:
  v27 = *(unsigned __int16 *)(v5 + 16);
  if (*(_WORD *)(v5 + 16))
  {
    v28 = v17 - 1;
    if (__OFSUB__(v17, 1))
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    v8 = v61;
    if (__OFADD__(v28, 1))
    {
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    if (v17 < 1)
    {
      v27 = 0;
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v11 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      v9 = v59;
      goto LABEL_20;
    }
    if ((_DWORD)v27 != 1)
    {
      v29 = v27 - 2;
      if (v28 < v27 - 2)
        v29 = v17 - 1;
      if (v29 >= v17 + 0x7FFFFFFFFFFFFFFFLL)
        v29 = v17 + 0x7FFFFFFFFFFFFFFFLL;
      v30 = v29 + 1;
      if (v30 >= 5)
      {
        v32 = v30 & 3;
        if ((v30 & 3) == 0)
          v32 = 4;
        v33 = v30 - v32;
        v31 = v33 + 1;
        v34 = 0uLL;
        v35 = (int64x2_t)(unint64_t)(v17 - 1);
        v36.i64[0] = -1;
        v36.i64[1] = -1;
        do
        {
          v35 = vaddq_s64(v35, v36);
          v34 = vaddq_s64(v34, v36);
          v33 -= 4;
        }
        while (v33);
        v28 = vaddvq_s64(vaddq_s64(v34, v35));
      }
      else
      {
        v31 = 1;
      }
      while (v17 + 0x8000000000000000 != v31)
      {
        if (v17 == v31)
        {
          v27 = v17;
          goto LABEL_64;
        }
        ++v31;
        --v28;
        if (v27 == v31)
          goto LABEL_63;
      }
      goto LABEL_103;
    }
  }
  else
  {
    v28 = v17;
    v8 = v61;
  }
LABEL_63:
  if (!v28)
    goto LABEL_64;
LABEL_106:
  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs._index(_:offsetBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64[6];
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = *result;
  if (*result < v3[1] || v3[9] < v4)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v5 = a2;
  v6 = result[3];
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 64);
  v9 = *(_QWORD *)(*v3 + 72);
  v10 = *(_QWORD *)(*v3 + 80);
  v11 = *(_QWORD *)(v7 + 88);
  v54 = result[4];
  v60 = (_OWORD *)v7;
  v61 = result[7];
  v62 = *result;
  if (v6 != 1)
  {
    v12 = result[1];
    if (v12 == v11)
    {
      v13 = v10;
      v14 = result[2];
      if (result[7] == 2)
      {
        if (v8)
        {
          swift_unknownObjectRetain();
          v57 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v14, v6, v8, v9, v13);
        }
        else
        {
          v57 = 0;
        }
      }
      else
      {
        v57 = (unint64_t)result[4] >> 11;
        swift_unknownObjectRetain();
      }
      v18 = v11;
LABEL_67:
      *(_QWORD *)&v65 = v12;
      *((_QWORD *)&v65 + 1) = v14;
      *(_QWORD *)&v66 = v6;
      v64[0] = v5;
      swift_unknownObjectRetain();
      specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v65, v64, 0, v8, v9, v13, v18);
      swift_unknownObjectRelease();
      v40 = v65;
      v41 = v14;
      v42 = v66;
      swift_unknownObjectRetain();
      v56 = v42;
      v43 = specialized Rope.distance<A>(from:to:in:)(v12, v41, v6, v40, *((unint64_t *)&v40 + 1), v42, v8, v9, v13, v18);
      result = (uint64_t *)swift_unknownObjectRelease_n();
      if (!__OFADD__(v62, a2))
      {
        if (!__OFADD__(v57, v43))
        {
          v44 = v60 + 1;
          if (v61 == 2)
          {
            v45 = v60[2];
            v65 = *v44;
            v66 = v45;
            v67 = v60[3];
            BigString.utf8.getter();
            BigString.startIndex.getter();
LABEL_72:
            v47 = BigString.UTF8View.index(_:offsetBy:)();
            v49 = v48;
            v51 = v50;
            v53 = v52;
            result = (uint64_t *)outlined release of Locale((uint64_t)v64);
            *(_QWORD *)a3 = v62 + a2;
            *(_OWORD *)(a3 + 8) = v40;
            *(_QWORD *)(a3 + 24) = v56;
            *(_QWORD *)(a3 + 32) = v47;
            *(_QWORD *)(a3 + 40) = v49;
            *(_QWORD *)(a3 + 48) = v51;
            *(_QWORD *)(a3 + 56) = v53;
            return result;
          }
          v46 = v60[2];
          v65 = *v44;
          v66 = v46;
          v67 = v60[3];
          BigString.utf8.getter();
          result = (uint64_t *)v54;
          if (!__OFSUB__(v57 + v43, v54 >> 11))
            goto LABEL_72;
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        goto LABEL_81;
      }
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
  }
  if (v8)
    v15 = v9;
  else
    v15 = 0;
  if (v4 < 0 || v15 < v4)
    goto LABEL_82;
  v55 = v10;
  if (!v8 || (v4 < v9 ? (v16 = *(unsigned __int16 *)(v8 + 16) == 0) : (v16 = 1), v16))
  {
    v17 = swift_unknownObjectRetain_n();
    v14 = specialized Rope._endPath.getter(v17);
    swift_unknownObjectRelease();
    v6 = 0;
    if (!v8)
    {
      v57 = 0;
      v18 = v11;
      v12 = v11;
      v13 = v55;
      goto LABEL_67;
    }
LABEL_20:
    swift_unknownObjectRetain();
    v18 = v11;
    v13 = v55;
    v57 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v6, v8, v9, v55);
    swift_unknownObjectRelease_n();
    v12 = v11;
    goto LABEL_67;
  }
  v58 = v9;
  v19 = *(unsigned __int8 *)(v8 + 18);
  if (!*(_BYTE *)(v8 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v29 = 0;
    v20 = v4;
    v6 = v8;
    v30 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16))
      goto LABEL_43;
LABEL_54:
    v31 = v20;
    goto LABEL_64;
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v20 = v4;
  v6 = v8;
  do
  {
    v22 = *(unsigned __int16 *)(v6 + 16);
    if (*(_WORD *)(v6 + 16))
    {
      v23 = *(_QWORD *)(v6 + 32);
      v24 = __OFSUB__(v20, v23);
      v25 = v20 - v23;
      if (v24)
        goto LABEL_77;
      if (__OFADD__(v25, 1))
        goto LABEL_78;
      if (v25 + 1 < 1)
      {
        v22 = 0;
        goto LABEL_26;
      }
      if ((_DWORD)v22 != 1)
      {
        v26 = (uint64_t *)(v6 + 56);
        v27 = 1;
        while (1)
        {
          v28 = *v26;
          v26 += 3;
          v20 = v25 - v28;
          if (__OFSUB__(v25, v28))
            break;
          if (__OFADD__(v20, 1))
            goto LABEL_75;
          if (v20 + 1 < 1)
          {
            v22 = v27;
            v20 = v25;
            goto LABEL_26;
          }
          ++v27;
          v25 = v20;
          if (v22 == v27)
            goto LABEL_25;
        }
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      v20 = v25;
    }
LABEL_25:
    if (v20)
      goto LABEL_76;
LABEL_26:
    v21 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
    v19 = ((-15 << v21) - 1) & v19 | (v22 << v21);
    v6 = *(_QWORD *)(v6 + 24 + 24 * v22);
    swift_unknownObjectRetain();
    result = (uint64_t *)swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v6 + 18));
  v29 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  v30 = *(unsigned __int16 *)(v6 + 16);
  if (!*(_WORD *)(v6 + 16))
    goto LABEL_54;
LABEL_43:
  v31 = v20 - 1;
  if (__OFSUB__(v20, 1))
    goto LABEL_85;
  if (__OFADD__(v31, 1))
    goto LABEL_87;
  if (v20 < 1)
  {
    v30 = 0;
LABEL_65:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v14 = v29 | (v30 << 8);
    v5 = a2;
    v9 = v58;
    goto LABEL_20;
  }
  if ((_DWORD)v30 == 1)
  {
LABEL_64:
    if (v31)
      goto LABEL_86;
    goto LABEL_65;
  }
  v32 = v30 - 2;
  if (v31 < v30 - 2)
    v32 = v20 - 1;
  if (v32 >= v20 + 0x7FFFFFFFFFFFFFFFLL)
    v32 = v20 + 0x7FFFFFFFFFFFFFFFLL;
  v33 = v32 + 1;
  if (v33 >= 5)
  {
    v35 = v33 & 3;
    if ((v33 & 3) == 0)
      v35 = 4;
    v36 = v33 - v35;
    v34 = v36 + 1;
    v37 = 0uLL;
    v38 = (int64x2_t)(unint64_t)(v20 - 1);
    v39.i64[0] = -1;
    v39.i64[1] = -1;
    do
    {
      v38 = vaddq_s64(v38, v39);
      v37 = vaddq_s64(v37, v39);
      v36 -= 4;
    }
    while (v36);
    v31 = vaddvq_s64(vaddq_s64(v37, v38));
  }
  else
  {
    v34 = 1;
  }
  while (v20 + 0x8000000000000000 != v34)
  {
    if (v20 == v34)
    {
      v30 = v20;
      goto LABEL_65;
    }
    ++v34;
    --v31;
    if (v30 == v34)
      goto LABEL_64;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
  return result;
}

uint64_t *AttributedString.Runs.index(_:offsetBy:limitedBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, _QWORD *a4@<X2>)
{
  uint64_t v4;

  v4 = *a4 - *result;
  if (__OFSUB__(*a4, *result))
  {
    __break(1u);
  }
  else
  {
    if (a2 < 1)
    {
      if (v4 <= 0 && v4 > a2)
        goto LABEL_5;
    }
    else if ((v4 & 0x8000000000000000) == 0 && v4 < (unint64_t)a2)
    {
LABEL_5:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 2;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      return result;
    }
    return AttributedString.Runs._index(_:offsetBy:)(result, a2, a3);
  }
  return result;
}

uint64_t AttributedString.Runs.subscript.getter@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v6;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v44;
  _BYTE v45[48];
  __int128 v46;
  uint64_t v47;
  _BYTE v48[8];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v8 = (_OWORD *)*v6;
  v10 = v6[17];
  v9 = v6[18];
  v11 = v6[19];
  v12 = v6[20];
  v13 = v6[21];
  v14 = *(_QWORD *)(*v6 + 64);
  v15 = *(_QWORD *)(*v6 + 88);
  v46 = *(_OWORD *)result;
  v47 = *(_QWORD *)(result + 16);
  if ((_QWORD)v46 != v15)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v39 = v12;
  v40 = v11;
  v38 = v13;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v47, (uint64_t)v48);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v48, (uint64_t)&v52);
  if (v52)
  {
    v18 = (_QWORD *)(v52 + 24 * ((*((_QWORD *)&v46 + 1) >> ((4 * *(_BYTE *)(v52 + 18) + 8) & 0x3C)) & 0xFLL));
    v19 = v18[3];
    v20 = v18[4];
    v21 = v18[5];
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v19 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v46 + 1), v14);
    v20 = v22;
    v21 = v23;
    result = swift_unknownObjectRelease();
  }
  v24 = v10 >> 10 >= a2 >> 10;
  if (v10 >> 10 >= a2 >> 10)
    v25 = v10;
  else
    v25 = a2;
  if (v10 >> 10 >= a2 >> 10)
    v26 = v9;
  else
    v26 = a3;
  if (v24)
    v27 = v40;
  else
    v27 = a4;
  if (v24)
    v28 = v39;
  else
    v28 = a5;
  if (__OFADD__(v19, a2 >> 11))
    goto LABEL_25;
  if ((uint64_t)(v38 >> 11) >= (uint64_t)(v19 + (a2 >> 11)))
    v29 = v19 + (a2 >> 11);
  else
    v29 = v38 >> 11;
  v30 = v8[2];
  v49 = v8[1];
  v50 = v30;
  v51 = v8[3];
  result = BigString.utf8.getter();
  if (__OFSUB__(v29, v25 >> 11))
    goto LABEL_26;
  v42 = v20;
  v44 = v21;
  v31 = BigString.UTF8View.index(_:offsetBy:)();
  v33 = v32;
  v35 = v34;
  v37 = v36;
  result = outlined release of Locale((uint64_t)v45);
  if (v31 >> 10 >= v25 >> 10)
  {
    *a6 = v42;
    a6[1] = v44;
    a6[2] = v25;
    a6[3] = v26;
    a6[4] = v27;
    a6[5] = v28;
    a6[6] = v31;
    a6[7] = v33;
    a6[8] = v35;
    a6[9] = v37;
    a6[10] = v8;
    return swift_retain();
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs(uint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[48];
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v2 = *result;
  if (v1[1] >= *result)
    goto LABEL_93;
  if (v1[9] < v2)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v3 = result;
  v4 = (_QWORD *)*v1;
  v5 = result[3];
  v6 = result[7];
  v7 = *(_QWORD *)(*v1 + 64);
  v8 = v4[9];
  v9 = v4[11];
  v61 = v4[10];
  v62 = v9;
  v59 = result[4];
  if (v5 != 1)
  {
    v10 = result[1];
    if (v10 == v9)
    {
      v11 = result[2];
      if (v6 != 2)
      {
        v12 = (unint64_t)result[4] >> 11;
        result = (uint64_t *)swift_unknownObjectRetain();
        goto LABEL_66;
      }
      if (v7)
      {
        swift_unknownObjectRetain_n();
        v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v11, v5, v7, v8, v61);
        result = (uint64_t *)swift_unknownObjectRelease();
        goto LABEL_66;
      }
LABEL_65:
      v12 = 0;
LABEL_66:
      *(_QWORD *)&v64 = v10;
      *((_QWORD *)&v64 + 1) = v11;
      *(_QWORD *)&v65 = v5;
      v22 = __OFSUB__(v2, 1);
      v37 = v2 - 1;
      if (!v22)
      {
        if (v10 == v62)
        {
          if (v7)
          {
            v38 = *(unsigned __int8 *)(v7 + 18);
            swift_unknownObjectRetain();
            if (v38 < v11)
            {
LABEL_70:
              v60 = v37;
              if (v5)
              {
                v39 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
                if (((v11 >> v39) & 0xF) != 0)
                {
                  v8 = (uint64_t)v4;
                  v40 = v6;
                  v11 = ((((v11 >> v39) & 0xF) - 1) << v39) | ((-15 << v39) - 1) & v11;
LABEL_77:
                  v42 = *(_QWORD *)(v5 + 24 * ((v11 >> ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_unknownObjectRelease();
                  goto LABEL_81;
                }
              }
              swift_unknownObjectRetain();
              v41 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v64, v7);
              result = (uint64_t *)swift_unknownObjectRelease();
              if ((v41 & 1) == 0)
              {
LABEL_99:
                __break(1u);
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
                goto LABEL_103;
              }
              if ((_QWORD)v64 == v62)
              {
                v8 = (uint64_t)v4;
                v11 = *((_QWORD *)&v64 + 1);
                v5 = v65;
                if ((_QWORD)v65)
                {
                  v40 = v6;
                  goto LABEL_77;
                }
LABEL_80:
                v40 = v6;
                swift_unknownObjectRetain();
                v42 = specialized Rope._Node.subscript.getter(v11, v7);
                swift_unknownObjectRelease_n();
LABEL_81:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                result = (uint64_t *)swift_bridgeObjectRelease();
                v22 = __OFSUB__(v12, v42);
                v43 = v12 - v42;
                if (!v22)
                {
                  v44 = (__int128 *)(v8 + 16);
                  if (v40 == 2)
                  {
                    v45 = *(_OWORD *)(v8 + 32);
                    v64 = *v44;
                    v65 = v45;
                    v66 = *(_OWORD *)(v8 + 48);
                    BigString.utf8.getter();
                    BigString.startIndex.getter();
                    v46 = BigString.UTF8View.index(_:offsetBy:)();
                    v48 = v47;
                    v50 = v49;
                    v52 = v51;
                    v53 = v60;
LABEL_86:
                    result = (uint64_t *)outlined release of Locale((uint64_t)v63);
                    *v3 = v53;
                    v3[1] = v62;
                    v3[2] = v11;
                    v3[3] = v5;
                    v3[4] = v46;
                    v3[5] = v48;
                    v3[6] = v50;
                    v3[7] = v52;
                    return result;
                  }
                  v54 = *(_OWORD *)(v8 + 32);
                  v64 = *v44;
                  v65 = v54;
                  v66 = *(_OWORD *)(v8 + 48);
                  BigString.utf8.getter();
                  result = (uint64_t *)v59;
                  v53 = v60;
                  if (!__OFSUB__(v43, v59 >> 11))
                  {
                    v46 = BigString.UTF8View.index(_:offsetBy:)();
                    v48 = v55;
                    v50 = v56;
                    v52 = v57;
                    goto LABEL_86;
                  }
                  goto LABEL_101;
                }
                goto LABEL_98;
              }
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
              goto LABEL_99;
            }
          }
          else if (v11)
          {
            goto LABEL_70;
          }
          __break(1u);
          goto LABEL_80;
        }
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
  }
  if (v7)
    v13 = v4[9];
  else
    v13 = 0;
  if (v2 < 0 || v13 < v2)
    goto LABEL_100;
  if (!v7 || (v2 < v8 ? (v14 = *(unsigned __int16 *)(v7 + 16) == 0) : (v14 = 1), v14))
  {
    v15 = swift_unknownObjectRetain_n();
    v11 = specialized Rope._endPath.getter(v15);
    result = (uint64_t *)swift_unknownObjectRelease();
    v5 = 0;
    if (!v7)
    {
      v10 = v9;
      goto LABEL_65;
    }
LABEL_20:
    swift_unknownObjectRetain();
    v10 = v9;
    v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v11, v5, v7, v8, v61);
    result = (uint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_66;
  }
  v58 = v4[9];
  v60 = result[7];
  v16 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v17 = v2;
    v18 = v7;
    while (1)
    {
      v20 = *(unsigned __int16 *)(v18 + 16);
      if (*(_WORD *)(v18 + 16))
      {
        v21 = *(_QWORD *)(v18 + 32);
        v22 = __OFSUB__(v17, v21);
        v23 = v17 - v21;
        if (v22)
          goto LABEL_91;
        if (__OFADD__(v23, 1))
          goto LABEL_92;
        if (v23 + 1 <= 0)
        {
          v20 = 0;
          goto LABEL_26;
        }
        if ((_DWORD)v20 != 1)
        {
          v24 = (uint64_t *)(v18 + 56);
          v25 = 1;
          while (1)
          {
            v26 = *v24;
            v24 += 3;
            v17 = v23 - v26;
            if (__OFSUB__(v23, v26))
              break;
            if (__OFADD__(v17, 1))
              goto LABEL_89;
            if (v17 + 1 < 1)
            {
              v20 = v25;
              v17 = v23;
              goto LABEL_26;
            }
            ++v25;
            v23 = v17;
            if (v20 == v25)
              goto LABEL_25;
          }
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
        v17 = v23;
      }
LABEL_25:
      if (v17)
        goto LABEL_90;
LABEL_26:
      v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      v16 = ((-15 << v19) - 1) & v16 | (v20 << v19);
      v5 = *(_QWORD *)(v18 + 24 + 24 * v20);
      swift_unknownObjectRetain();
      result = (uint64_t *)swift_unknownObjectRelease();
      v18 = v5;
      if (!*(_BYTE *)(v5 + 18))
        goto LABEL_41;
    }
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v17 = v2;
  v5 = v7;
LABEL_41:
  v27 = *(unsigned __int16 *)(v5 + 16);
  if (*(_WORD *)(v5 + 16))
  {
    v28 = v17 - 1;
    if (__OFSUB__(v17, 1))
    {
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    if (__OFADD__(v28, 1))
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    if (v17 <= 0)
    {
      v27 = 0;
LABEL_63:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v11 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      v9 = v62;
      v8 = v58;
      goto LABEL_20;
    }
    if ((_DWORD)v27 != 1)
    {
      v29 = v27 - 2;
      if (v28 < v27 - 2)
        v29 = v17 - 1;
      if (v29 >= v17 + 0x7FFFFFFFFFFFFFFFLL)
        v29 = v17 + 0x7FFFFFFFFFFFFFFFLL;
      v30 = v29 + 1;
      if (v30 >= 5)
      {
        v32 = v30 & 3;
        if ((v30 & 3) == 0)
          v32 = 4;
        v33 = v30 - v32;
        v31 = v33 + 1;
        v34 = 0uLL;
        v35 = (int64x2_t)(unint64_t)(v17 - 1);
        v36.i64[0] = -1;
        v36.i64[1] = -1;
        do
        {
          v35 = vaddq_s64(v35, v36);
          v34 = vaddq_s64(v34, v36);
          v33 -= 4;
        }
        while (v33);
        v28 = vaddvq_s64(vaddq_s64(v34, v35));
      }
      else
      {
        v31 = 1;
      }
      while (v17 + 0x8000000000000000 != v31)
      {
        if (v17 == v31)
        {
          v27 = v17;
          goto LABEL_63;
        }
        ++v31;
        --v28;
        if (v27 == v31)
          goto LABEL_62;
      }
      goto LABEL_102;
    }
  }
  else
  {
    v28 = v17;
  }
LABEL_62:
  if (!v28)
    goto LABEL_63;
LABEL_105:
  __break(1u);
  return result;
}

__int128 *protocol witness for Collection.subscript.getter in conformance AttributedString.Runs@<X0>(__int128 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v3 = *result;
  v4 = result[1];
  v5 = result[2];
  v6 = result[3];
  v7 = result[4];
  v8 = result[5];
  v9 = result[6];
  v10 = result[7];
  v11 = *(_OWORD *)(v2 + 176);
  v30 = *(_OWORD *)(v2 + 160);
  v31 = v11;
  v32 = *(_QWORD *)(v2 + 192);
  v12 = *(_OWORD *)(v2 + 112);
  v26 = *(_OWORD *)(v2 + 96);
  v27 = v12;
  v13 = *(_OWORD *)(v2 + 144);
  v28 = *(_OWORD *)(v2 + 128);
  v29 = v13;
  v14 = *(_OWORD *)(v2 + 48);
  v23[2] = *(_OWORD *)(v2 + 32);
  v23[3] = v14;
  v15 = *(_OWORD *)(v2 + 80);
  v24 = *(_OWORD *)(v2 + 64);
  v25 = v15;
  v16 = *(_OWORD *)(v2 + 16);
  v23[0] = *(_OWORD *)v2;
  v23[1] = v16;
  if (*((uint64_t *)&v24 + 1) < *((uint64_t *)&v23[0] + 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((uint64_t)v3 < *((uint64_t *)&v23[0] + 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*((uint64_t *)&v24 + 1) >= (uint64_t)v7)
  {
    v17 = *(_OWORD *)(v2 + 176);
    *(_OWORD *)(a2 + 288) = *(_OWORD *)(v2 + 160);
    *(_OWORD *)(a2 + 304) = v17;
    *(_QWORD *)(a2 + 320) = *(_QWORD *)(v2 + 192);
    v18 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(a2 + 240) = v18;
    v19 = *(_OWORD *)(v2 + 144);
    *(_OWORD *)(a2 + 256) = *(_OWORD *)(v2 + 128);
    *(_OWORD *)(a2 + 272) = v19;
    v20 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(a2 + 176) = v20;
    v21 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 208) = v21;
    v22 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 144) = v22;
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)(a2 + 48) = v6;
    *(_OWORD *)(a2 + 64) = v7;
    *(_OWORD *)(a2 + 80) = v8;
    *(_OWORD *)(a2 + 96) = v9;
    *(_OWORD *)(a2 + 112) = v10;
    return (__int128 *)outlined retain of AttributedString.Runs((uint64_t)v23);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.Runs@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v22[144];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v2 = *(_OWORD *)(v1 + 144);
  v3 = *(_OWORD *)(v1 + 176);
  v24 = *(_OWORD *)(v1 + 160);
  v25 = v3;
  v4 = *(_OWORD *)(v1 + 80);
  v5 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)&v22[96] = *(_OWORD *)(v1 + 96);
  v6 = *(_OWORD *)&v22[96];
  *(_OWORD *)&v22[112] = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v22[128] = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)&v22[128];
  v23 = v8;
  v10 = *(_OWORD *)(v1 + 16);
  v11 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)&v22[32] = *(_OWORD *)(v1 + 32);
  v12 = *(_OWORD *)&v22[32];
  *(_OWORD *)&v22[48] = v11;
  v13 = *(_OWORD *)(v1 + 48);
  v14 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)&v22[64] = *(_OWORD *)(v1 + 64);
  v15 = *(_OWORD *)&v22[64];
  *(_OWORD *)&v22[80] = v14;
  v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v1;
  v17 = *(_OWORD *)v22;
  *(_OWORD *)&v22[16] = v16;
  v18 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v4;
  v26 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(v1 + 192);
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v22[8];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v22[24];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v22[40];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)&v22[56];
  v19 = *(_OWORD *)&v22[88];
  *(_OWORD *)(a1 + 264) = *(_OWORD *)&v22[72];
  *(_OWORD *)(a1 + 280) = v19;
  v20 = *(_OWORD *)&v22[120];
  *(_OWORD *)(a1 + 296) = *(_OWORD *)&v22[104];
  *(_OWORD *)(a1 + 312) = v20;
  return outlined retain of AttributedString.Runs((uint64_t)v22);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString.Runs()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) == *(_QWORD *)(v0 + 72);
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString.Runs@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 3;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.Runs(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.Runs(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[8];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString.Runs(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[8] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[8] < result[8])
    __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(v1 + 17);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(v1 + 19);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 21);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v1 + 23);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v1 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 11);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v1 + 13);
  result = *(__n128 *)(v1 + 15);
  *(__n128 *)(a1 + 120) = result;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 200) = v3;
  *(_QWORD *)(a1 + 208) = v4;
  *(_QWORD *)(a1 + 216) = v5;
  *(_QWORD *)(a1 + 224) = v6;
  *(_QWORD *)(a1 + 232) = v7;
  *(_QWORD *)(a1 + 240) = v8;
  *(_QWORD *)(a1 + 248) = v9;
  *(_QWORD *)(a1 + 256) = v10;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.Runs()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 72);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[12];
  uint64_t v10;

  v1 = *(_OWORD *)(v0 + 176);
  v9[10] = *(_OWORD *)(v0 + 160);
  v9[11] = v1;
  v10 = *(_QWORD *)(v0 + 192);
  v2 = *(_OWORD *)(v0 + 112);
  v9[6] = *(_OWORD *)(v0 + 96);
  v9[7] = v2;
  v3 = *(_OWORD *)(v0 + 144);
  v9[8] = *(_OWORD *)(v0 + 128);
  v9[9] = v3;
  v4 = *(_OWORD *)(v0 + 48);
  v9[2] = *(_OWORD *)(v0 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(v0 + 80);
  v9[4] = *(_OWORD *)(v0 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(v0 + 16);
  v9[0] = *(_OWORD *)v0;
  v9[1] = v6;
  v7 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v9);
  outlined release of AttributedString.Runs((uint64_t)v9);
  return v7;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.Runs(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

_QWORD *AttributedString.Runs._firstOfMatchingRuns(with:comparing:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_40;
  v5 = result;
  v6 = *v3;
  v35 = *(_QWORD *)(*v3 + 88);
  if (*result == v35)
  {
    v33 = v3[1];
    v7 = result[1];
    v8 = result[2];
    if (v8)
    {
      v32 = *(_QWORD *)(v8 + 24 * ((v7 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 32);
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_bridgeObjectRetain();
    }
    else
    {
      v9 = *(_QWORD *)(v6 + 64);
      swift_unknownObjectRetain();
      v8 = 0;
      specialized Rope._Node.subscript.getter(v7, v9);
      v32 = v10;
      result = (_QWORD *)swift_unknownObjectRelease();
    }
    v11 = v5[3];
    v34 = v5[4];
    if (v33 < v11)
    {
      v29 = a3;
      while (1)
      {
        v12 = *(_QWORD *)(v6 + 64);
        v13 = *(_QWORD *)(v6 + 88);
        v37 = v35;
        v38 = v7;
        v39 = v8;
        if (v35 != v13)
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v12)
        {
          v14 = *(unsigned __int8 *)(v12 + 18);
          result = (_QWORD *)swift_unknownObjectRetain_n();
          if (v7 <= v14)
            goto LABEL_35;
        }
        else if (!v7)
        {
          goto LABEL_35;
        }
        v30 = v8;
        if (v8)
        {
          v15 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
          if (((v7 >> v15) & 0xF) != 0)
            break;
        }
        v18 = *(unsigned __int8 *)(v12 + 18);
        v19 = (4 * v18 + 8) & 0x3C;
        v20 = (v7 >> v19) & 0xF;
        v36 = v20;
        if (v18)
        {
          swift_unknownObjectRetain();
          v21 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v12 + 16, v12 + 24, &v36, (uint64_t)&v37, v18);
          result = (_QWORD *)swift_unknownObjectRelease();
          if ((v21 & 1) == 0)
            goto LABEL_39;
          if (v37 != v35)
            goto LABEL_36;
          v16 = v38;
          v17 = v39;
          if (v39)
            goto LABEL_20;
        }
        else
        {
          if (!v20)
            goto LABEL_39;
          v16 = ((v20 - 1) << v19) | ((-15 << v19) - 1) & v7;
          v38 = v16;
          v17 = v12;
          if (v12)
            goto LABEL_20;
        }
        swift_unknownObjectRetain();
        v22 = specialized Rope._Node.subscript.getter(v16, v12);
        swift_unknownObjectRelease_n();
        v23 = 1;
LABEL_24:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v24 = v34 - v22;
        if (__OFSUB__(v34, v22))
          goto LABEL_37;
        if (v35 != *(_QWORD *)(v6 + 88))
          goto LABEL_38;
        if ((v23 & 1) != 0)
        {
          v25 = *(_QWORD *)(v6 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v16, v25);
          v27 = v26;
          swift_unknownObjectRelease();
        }
        else
        {
          v27 = *(_QWORD *)(v17 + 24 * ((v16 >> ((4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C)) & 0xF) + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v28 = specialized AttributedString._AttributeStorage.isEqual(to:comparing:)(v27, a2, v32);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          a3 = v29;
          v8 = v30;
          goto LABEL_33;
        }
        --v11;
        v34 -= v22;
        v7 = v16;
        v8 = v17;
        if (v33 >= v11)
        {
          v34 = v24;
          v11 = v33;
          v7 = v16;
          v8 = v17;
          a3 = v29;
          goto LABEL_33;
        }
      }
      v16 = ((((v7 >> v15) & 0xF) - 1) << v15) | ((-15 << v15) - 1) & v7;
      v38 = v16;
      v17 = v8;
LABEL_20:
      v22 = *(_QWORD *)(v17 + 24 * ((v16 >> ((4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      v23 = 0;
      goto LABEL_24;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    *a3 = v35;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v11;
    a3[4] = v34;
  }
  else
  {
LABEL_41:
    __break(1u);
  }
  return result;
}

uint64_t *AttributedString.Runs._lastOfMatchingRuns(with:comparing:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  __int128 *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[40];
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[40];
  _BYTE v105[40];
  _OWORD v106[4];
  uint64_t v107;
  _BYTE v108[72];
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char v127[8];
  uint64_t v128[3];

  v4 = result[3];
  v5 = v3[9];
  v6 = *(_QWORD *)(a2 + 16);
  v80 = v5;
  if (v6)
    v7 = v4 < v5;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_81;
  v88 = v6;
  v8 = *result;
  v9 = result[1];
  v10 = (_BYTE *)result[2];
  v11 = result[4];
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 64);
  v84 = v12;
  v14 = *(_QWORD *)(v12 + 88);
  v125 = *(_OWORD *)result;
  v126 = result[2];
  if ((_QWORD)v125 != v14)
  {
LABEL_82:
    __break(1u);
    return result;
  }
  v83 = v8;
  v69 = a3;
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)&v126, (uint64_t)v127);
  outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?((uint64_t)v127, (uint64_t)v128);
  if (v128[0])
  {
    v16 = v128[0] + 24 * ((*((_QWORD *)&v125 + 1) >> ((4 * *(_BYTE *)(v128[0] + 18) + 8) & 0x3C)) & 0xFLL);
    v17 = *(_QWORD *)(v16 + 40);
    v89 = *(_QWORD *)(v16 + 32);
    swift_bridgeObjectRetain();
    v68 = v17;
    result = (uint64_t *)swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(*((unint64_t *)&v125 + 1), v13);
    v89 = v18;
    v68 = v19;
    result = (uint64_t *)swift_unknownObjectRelease();
  }
  v20 = v83;
  v21 = *(_BYTE **)(v84 + 64);
  v85 = v4 + 1;
  v22 = *(_QWORD *)(v84 + 88);
  v92 = (__int128 *)&v102;
  v93 = &v113;
  v78 = a2;
  v79 = (uint64_t *)(a2 + 40);
  v109 = v83;
  v110 = v9;
  v111 = v10;
LABEL_11:
  if (v20 != v22)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v82 = v22;
  if (v10)
  {
    v23 = *(_QWORD *)&v10[24 * ((v9 >> ((4 * v10[18] + 8) & 0x3C)) & 0xF) + 24];
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v23 = specialized Rope._Node.subscript.getter(v9, (uint64_t)v21);
  }
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_bridgeObjectRelease();
  if (__OFADD__(v11, v23))
    goto LABEL_78;
  v73 = v11 + v23;
  if (v21)
  {
    v24 = ((-15 << ((4 * v21[18] + 8) & 0x3C)) - 1) & (unint64_t)v21[18] | ((unint64_t)*((unsigned __int16 *)v21 + 8) << ((4 * v21[18] + 8) & 0x3C));
    result = (uint64_t *)swift_unknownObjectRetain();
  }
  else
  {
    v24 = 0;
  }
  v25 = v82;
  if (v9 >= v24)
    goto LABEL_79;
  if (v10)
  {
    v26 = (4 * v10[18] + 8) & 0x3C;
    v27 = ((v9 >> v26) & 0xF) + 1;
    if (v27 < *((unsigned __int16 *)v10 + 8))
    {
      v28 = (v27 << v26) | ((-15 << v26) - 1) & v9;
      result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_26:
      v21 = v111;
      goto LABEL_33;
    }
  }
  v29 = v21[18];
  v30 = (4 * v29 + 8) & 0x3C;
  v31 = (v9 >> v30) & 0xF;
  *(_QWORD *)&v100 = v31;
  if (v29)
  {
    swift_unknownObjectRetain();
    v32 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v21 + 24), (uint64_t *)&v100, (uint64_t)&v109, (uint64_t)v21, v29);
    result = (uint64_t *)swift_unknownObjectRelease();
    if ((v32 & 1) != 0)
    {
      result = (uint64_t *)swift_unknownObjectRelease_n();
      v28 = v110;
      goto LABEL_26;
    }
  }
  else
  {
    v33 = v31 + 1;
    if (v31 + 1 < (unint64_t)*((unsigned __int16 *)v21 + 8))
    {
      result = (uint64_t *)swift_unknownObjectRelease_n();
      v28 = (v33 << v30) | ((-15 << v30) - 1) & v9;
      goto LABEL_33;
    }
  }
  if (v21)
  {
    v34 = v21[18];
    v35 = *((unsigned __int16 *)v21 + 8);
    result = (uint64_t *)swift_unknownObjectRelease_n();
    v28 = ((-15 << ((4 * v34 + 8) & 0x3C)) - 1) & v34 | (unint64_t)(v35 << ((4 * v34 + 8) & 0x3C));
  }
  else
  {
    v28 = 0;
  }
  v21 = 0;
  v109 = v25;
LABEL_33:
  if (v85 != v80)
  {
    if (v109 == *(_QWORD *)(v84 + 88))
    {
      v83 = v109;
      v76 = v11;
      v77 = v4;
      v74 = v9;
      v75 = v10;
      v71 = v21;
      v72 = v28;
      if (v21)
      {
        v36 = &v21[24 * ((v28 >> ((4 * v21[18] + 8) & 0x3C)) & 0xF)];
        v37 = *((_QWORD *)v36 + 4);
        v38 = *((_QWORD *)v36 + 5);
        swift_bridgeObjectRetain();
        v81 = v38;
        swift_bridgeObjectRetain();
      }
      else
      {
        v39 = *(_QWORD *)(v84 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v28, v39);
        v81 = v40;
        v37 = v41;
        swift_unknownObjectRelease();
      }
      v70 = v85;
      result = (uint64_t *)swift_bridgeObjectRetain();
      v42 = 0;
      v43 = v79;
      v44 = v88;
      v45 = v89;
      v94 = v37;
      while (1)
      {
        v47 = v42 + 1;
        if (__OFADD__(v42, 1))
        {
          __break(1u);
          goto LABEL_77;
        }
        v49 = *(v43 - 1);
        v48 = *v43;
        if (*(_QWORD *)(v45 + 16))
        {
          swift_bridgeObjectRetain_n();
          v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
          if ((v51 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v45 + 56) + 72 * v50, (uint64_t)&v120);
          }
          else
          {
            v124 = 0;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
          }
          swift_bridgeObjectRelease();
          v37 = v94;
          if (!*(_QWORD *)(v94 + 16))
          {
LABEL_48:
            v119 = 0;
            v117 = 0u;
            v118 = 0u;
            v115 = 0u;
            v116 = 0u;
            goto LABEL_55;
          }
        }
        else
        {
          v124 = 0;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          swift_bridgeObjectRetain();
          if (!*(_QWORD *)(v37 + 16))
            goto LABEL_48;
        }
        swift_bridgeObjectRetain();
        v52 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
        if ((v53 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v37 + 56) + 72 * v52, (uint64_t)&v115);
        }
        else
        {
          v119 = 0;
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
        }
        swift_bridgeObjectRelease();
LABEL_55:
        swift_bridgeObjectRelease();
        v21 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v120, (uint64_t)&v109, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v115, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v112)
        {
          if (v114)
            goto LABEL_72;
          outlined destroy of Any?((uint64_t)&v109, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v115, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          result = (uint64_t *)outlined destroy of Any?((uint64_t)&v120, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          goto LABEL_42;
        }
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v109, (uint64_t)v108, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v114)
          goto LABEL_71;
        v54 = *((_OWORD *)v93 + 3);
        v106[2] = *((_OWORD *)v93 + 2);
        v106[3] = v54;
        v107 = v93[8];
        v55 = *((_OWORD *)v93 + 1);
        v106[0] = *(_OWORD *)v93;
        v106[1] = v55;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v108, (uint64_t)v105);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v106, (uint64_t)v104);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v105, (uint64_t)&v100, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v104, (uint64_t)v92, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        if (v101)
        {
          if (!v103)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
LABEL_40:
            v46 = 0;
            goto LABEL_41;
          }
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)v97);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v92, (uint64_t)v96);
          v56 = v98;
          v87 = v99;
          v86 = __swift_project_boxed_opaque_existential_1(v97, v98);
          v91 = &v68;
          v57 = *(_QWORD *)(v56 - 8);
          MEMORY[0x1E0C80A78](v86);
          v59 = (char *)&v68 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v96, (uint64_t)&v95);
          v60 = type metadata accessor for Optional();
          v90 = &v68;
          v61 = *(_QWORD *)(v60 - 8);
          MEMORY[0x1E0C80A78](v60);
          v63 = (char *)&v68 - v62;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          v64 = swift_dynamicCast();
          v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
          if (v64)
          {
            v65(v63, 0, 1, v56);
            (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v59, v63, v56);
            v46 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
          }
          else
          {
            v65(v63, 1, 1, v56);
            (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v60);
            v46 = 0;
          }
          v44 = v88;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
          v45 = v89;
        }
        else
        {
          if (v103)
          {
            outlined destroy of Any?((uint64_t)v92, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            goto LABEL_40;
          }
          v46 = 1;
        }
LABEL_41:
        outlined destroy of Any?((uint64_t)v104, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v105, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v106);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v108);
        outlined destroy of Any?((uint64_t)&v109, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v115, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        result = (uint64_t *)outlined destroy of Any?((uint64_t)&v120, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v46 & 1) == 0)
          goto LABEL_73;
LABEL_42:
        v43 += 2;
        ++v42;
        v37 = v94;
        if (v47 == v44)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = (uint64_t *)swift_bridgeObjectRelease();
          v20 = v83;
          v21 = *(_BYTE **)(v84 + 64);
          v22 = *(_QWORD *)(v84 + 88);
          v9 = v72;
          v11 = v73;
          v4 = v70;
          v109 = v83;
          v110 = v72;
          v10 = v71;
          v111 = v71;
          if (!__OFADD__(v85++, 1))
            goto LABEL_11;
          __break(1u);
LABEL_71:
          outlined destroy of AttributedString._AttributeValue((uint64_t)v108);
LABEL_72:
          outlined destroy of Any?((uint64_t)&v109, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
          outlined destroy of Any?((uint64_t)&v115, (uint64_t *)v21);
          outlined destroy of Any?((uint64_t)&v120, (uint64_t *)v21);
LABEL_73:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = (uint64_t *)swift_bridgeObjectRelease();
          v11 = v76;
          v4 = v77;
          v9 = v74;
          v10 = v75;
          v25 = v82;
          goto LABEL_74;
        }
      }
    }
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_bridgeObjectRelease();
LABEL_74:
  v67 = v69;
  *v69 = v25;
  v67[1] = v9;
  v67[2] = v10;
  v67[3] = v4;
  v67[4] = v11;
  return result;
}

uint64_t BigString._firstConstraintBreak(in:with:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[48];
  _BYTE v35[112];
  _BYTE v36[48];
  unint64_t v37[4];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[9];

  v3 = a1[4];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    if ((unint64_t)*a1 >> 10 != v3 >> 10)
    {
      v29 = (unint64_t)*a1 >> 10;
      v31 = a1[7];
      v32 = a1[6];
      v33 = a1[5];
      v6 = a1[1];
      v30 = a1[2];
      v7 = a1[3];
      swift_bridgeObjectRetain();
      v8 = 40;
      v9 = v4;
      while (*(_QWORD *)(a2 + v8))
      {
        swift_bridgeObjectRelease();
        v8 += 16;
        if (!--v9)
        {
          result = swift_bridgeObjectRelease();
          v12 = v32;
          v11 = v33;
          v14 = v30;
          v13 = v31;
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BigString.utf8.getter();
      BigString.UTF8View.subscript.getter();
      outlined release of Locale((uint64_t)v34);
      v50[0] = v5;
      v50[1] = v6;
      v14 = v30;
      v50[2] = v30;
      v50[3] = v7;
      v50[4] = v5;
      v50[5] = v6;
      v50[6] = v30;
      v50[7] = v7;
      specialized BidirectionalCollection<>._getBlock(for:in:)(2, v50, v37);
      result = outlined release of Locale((uint64_t)v35);
      v12 = v32;
      v11 = v33;
      v13 = v31;
      if (v41 != 2)
      {
        v3 = v38;
        if (v29 > v38 >> 10)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        v11 = v39;
        v12 = v40;
        v13 = v41;
      }
LABEL_10:
      v15 = 0;
      v42 = v5;
      v43 = v6;
      v44 = v14;
      v45 = v7;
      v46 = v3;
      v47 = v11;
      v16 = 40;
      v48 = v12;
      v49 = v13;
      while (1)
      {
        v17 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          goto LABEL_40;
        }
        if (*(_QWORD *)(a2 + v16))
          break;
        v16 += 16;
        ++v15;
        if (v17 == v4)
          return v3;
      }
      swift_bridgeObjectRetain();
      v18 = (unint64_t *)(a2 + 40);
      v19 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v20 = *v18;
        if (*v18)
        {
          v21 = *(v18 - 1);
          if ((v20 & 0x2000000000000000) != 0 ? HIBYTE(v20) & 0xF : v21 & 0xFFFFFFFFFFFFLL)
          {
            if ((v20 & 0x1000000000000000) != 0)
            {
              v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v20 & 0x2000000000000000) != 0)
              {
                v37[0] = *(v18 - 1);
                v37[1] = v20 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v21 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
              }
              v23 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
            v25 = *((_QWORD *)v19 + 2);
            v24 = *((_QWORD *)v19 + 3);
            if (v25 >= v24 >> 1)
              v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v19);
            *((_QWORD *)v19 + 2) = v25 + 1;
            *(_DWORD *)&v19[4 * v25 + 32] = v23;
          }
        }
        v18 += 2;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v36);
      v26 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v19);
      v28 = v27;
      swift_bridgeObjectRelease();
      result = outlined release of Locale((uint64_t)v37);
      if (v28 != 2)
      {
        if (v29 > v26 >> 10)
          goto LABEL_41;
        return v26;
      }
    }
  }
  return v3;
}

unint64_t BigString._lastConstraintBreak(in:with:)(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43[48];
  char v44[48];
  char v45[112];
  char v46[48];
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD v59[9];

  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = a1[4];
    if (v5 >> 10 != v3 >> 10)
    {
      v39 = a1[3];
      v40 = a1[2];
      v38 = v5 >> 10;
      v42 = a1[1];
      v6 = a1[5];
      v7 = a1[6];
      v8 = a1[7];
      swift_bridgeObjectRetain();
      v9 = 40;
      v10 = v4;
      v41 = v3;
      while (*(_QWORD *)(a2 + v9))
      {
        swift_bridgeObjectRelease();
        v9 += 16;
        if (!--v10)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      result = BigString.startIndex.getter();
      if (v38 > result >> 10)
      {
        BigString.utf8.getter();
        v12 = BigString.UTF8View.index(before:)();
        v36 = v13;
        v37 = v7;
        v14 = v12;
        v34 = v16;
        v35 = v15;
        outlined release of Locale((uint64_t)v43);
        BigString.utf8.getter();
        BigString.UTF8View.subscript.getter();
        result = outlined release of Locale((uint64_t)v44);
        if (v38 < v14 >> 10)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }
        else
        {
          v59[0] = v14;
          v59[1] = v36;
          v59[2] = v35;
          v59[3] = v34;
          v59[4] = v5;
          v59[5] = v6;
          v7 = v37;
          v59[6] = v37;
          v59[7] = v8;
          specialized BidirectionalCollection<>._getBlock(for:in:)(1, v59, &v47);
          result = outlined release of Locale((uint64_t)v45);
          v17 = v42;
          v19 = v39;
          v18 = v40;
          if (v50 == 2)
            goto LABEL_13;
          v41 = v47;
          if (v38 >= v47 >> 10)
          {
            v17 = v48;
            v18 = v49;
            v19 = v50;
            goto LABEL_13;
          }
        }
        __break(1u);
        return result;
      }
LABEL_12:
      v17 = v42;
      v19 = v39;
      v18 = v40;
LABEL_13:
      v20 = 0;
      v3 = v41;
      v51 = v41;
      v52 = v17;
      v53 = v18;
      v54 = v19;
      v55 = v5;
      v56 = v6;
      v21 = 40;
      v57 = v7;
      v58 = v8;
      while (1)
      {
        v22 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        if (*(_QWORD *)(a2 + v21))
          break;
        v21 += 16;
        ++v20;
        if (v22 == v4)
          return v3;
      }
      swift_bridgeObjectRetain();
      v23 = (unint64_t *)(a2 + 40);
      v24 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v25 = *v23;
        if (*v23)
        {
          v26 = *(v23 - 1);
          if ((v25 & 0x2000000000000000) != 0 ? HIBYTE(v25) & 0xF : v26 & 0xFFFFFFFFFFFFLL)
          {
            if ((v25 & 0x1000000000000000) != 0)
            {
              v28 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v25 & 0x2000000000000000) != 0)
              {
                v47 = *(v23 - 1);
                v48 = v25 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }
              else
              {
                if ((v26 & 0x1000000000000000) == 0)
                  _StringObject.sharedUTF8.getter();
                swift_bridgeObjectRetain();
              }
              v28 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            v30 = *((_QWORD *)v24 + 2);
            v29 = *((_QWORD *)v24 + 3);
            if (v30 >= v29 >> 1)
              v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v24);
            *((_QWORD *)v24 + 2) = v30 + 1;
            *(_DWORD *)&v24[4 * v30 + 32] = v28;
          }
        }
        v23 += 2;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v46);
      v31 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v24);
      v33 = v32;
      swift_bridgeObjectRelease();
      result = outlined release of Locale((uint64_t)&v47);
      if (v33 != 2)
      {
        if (v38 < v31 >> 10)
          goto LABEL_44;
        return v31;
      }
    }
  }
  return v3;
}

unint64_t BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 80) >> 10;
  if (v2 <= *(_QWORD *)(v1 + 48) >> 10)
    return 0;
  v4 = BigSubstring.UnicodeScalarView.subscript.getter();
  v5 = specialized Sequence<>.contains(_:)(v4, a1);
  result = BigSubstring.UnicodeScalarView.index(after:)();
  if ((v5 & 1) != 0)
    return result;
  if (v2 <= result >> 10)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = result;
  while (1)
  {
    result = BigSubstring.UnicodeScalarView.subscript.getter();
    if (v7)
    {
      if (*(_DWORD *)(a1 + 32) == (_DWORD)result)
        return v8;
      if (v7 != 1)
      {
        if (*(_DWORD *)(a1 + 36) == (_DWORD)result)
          return v8;
        if (v7 != 2)
          break;
      }
    }
LABEL_5:
    v8 = BigSubstring.UnicodeScalarView.index(after:)();
    result = 0;
    if (v2 <= v8 >> 10)
      return result;
  }
  v9 = 10;
  while (1)
  {
    v10 = v9 - 7;
    if (__OFADD__(v9 - 8, 1))
      break;
    if (*(_DWORD *)(a1 + 4 * v9) == (_DWORD)result)
      return v8;
    ++v9;
    if (v10 == v7)
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + 48) >> 10;
  if (v3 == *(_QWORD *)(v1 + 80) >> 10)
    return 0;
  v4 = BigSubstring.UnicodeScalarView.index(before:)();
  v5 = BigSubstring.UnicodeScalarView.subscript.getter();
  v11 = a1;
  if ((specialized Sequence<>.contains(_:)(v5, a1) & 1) != 0)
    return v4;
  if (v3 >= v4 >> 10)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v8 = BigSubstring.UnicodeScalarView.index(before:)();
    result = BigSubstring.UnicodeScalarView.subscript.getter();
    if (v7)
    {
      if (*(_DWORD *)(v11 + 32) == (_DWORD)result)
        return v4;
      if (v7 != 1)
      {
        if (*(_DWORD *)(v11 + 36) == (_DWORD)result)
          return v4;
        if (v7 != 2)
          break;
      }
    }
LABEL_6:
    result = 0;
    v4 = v8;
    if (v3 >= v8 >> 10)
      return result;
  }
  v9 = 10;
  while (1)
  {
    v10 = v9 - 7;
    if (__OFADD__(v9 - 8, 1))
      break;
    if (*(_DWORD *)(v11 + 4 * v9) == (_DWORD)result)
      return v4;
    ++v9;
    if (v10 == v7)
      goto LABEL_6;
  }
  __break(1u);
  return result;
}

__int128 *specialized static AttributedString.Runs.== infix(_:_:)(__int128 *result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  _OWORD v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v2 = result[11];
  v35 = result[10];
  v36 = v2;
  v37 = *((_QWORD *)result + 24);
  v3 = result[7];
  v31 = result[6];
  v32 = v3;
  v4 = result[9];
  v33 = result[8];
  v34 = v4;
  v5 = result[3];
  v27 = result[2];
  v28 = v5;
  v6 = result[5];
  v29 = result[4];
  v30 = v6;
  v7 = result[1];
  v25 = *result;
  v26 = v7;
  v8 = *(_OWORD *)(a2 + 176);
  v22 = *(_OWORD *)(a2 + 160);
  v23 = v8;
  v24 = *(_QWORD *)(a2 + 192);
  v9 = *(_OWORD *)(a2 + 112);
  v18 = *(_OWORD *)(a2 + 96);
  v19 = v9;
  v10 = *(_OWORD *)(a2 + 144);
  v20 = *(_OWORD *)(a2 + 128);
  v21 = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  v12 = *(_OWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 64);
  v17 = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v13;
  if ((*((_QWORD *)&v35 + 1) >> 11) - (*((_QWORD *)&v33 + 1) >> 11) != (*((_QWORD *)&v22 + 1) >> 11)
                                                                      - (*((_QWORD *)&v20 + 1) >> 11))
    goto LABEL_6;
  if (__OFSUB__(*((_QWORD *)&v29 + 1), *((_QWORD *)&v25 + 1)))
  {
    __break(1u);
  }
  else if (!__OFSUB__(*((_QWORD *)&v16 + 1), *((_QWORD *)&v15[0] + 1)))
  {
    if (*((_QWORD *)&v29 + 1) - *((_QWORD *)&v25 + 1) == *((_QWORD *)&v16 + 1) - *((_QWORD *)&v15[0] + 1))
    {
      v14 = specialized Sequence<>.elementsEqual<A>(_:)((uint64_t)v15);
      return (__int128 *)(v14 & 1);
    }
LABEL_6:
    v14 = 0;
    return (__int128 *)(v14 & 1);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.Index, &type metadata for AttributedString.Runs.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs.Index, &type metadata for AttributedString.Runs.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index);
  }
  return result;
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in AttributedString.Runs.Index()
{
  return MEMORY[0x1E0DEB468];
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs>, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString.Runs> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs>, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
    result = MEMORY[0x186DA9D64](a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.Runs> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.Runs>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString.Runs> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>, MEMORY[0x1E0DEC908]);
}

uint64_t assignWithCopy for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v8 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 200))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 200) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.Index(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t NSNotificationCenter.Notifications.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 280) = a1;
  *(_QWORD *)(v2 + 288) = v1;
  return swift_task_switch();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  if (a2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = **(_QWORD **)(v0 + 24);
  return swift_task_switch();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY1_()
{
  uint64_t v0;
  _QWORD *v1;

  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *v1 = v0;
  v1[1] = _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ2_;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ2_()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY3_()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NSNotificationCenter.Notifications.init(center:name:object:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  id v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v10 = MEMORY[0x1E0DEE9D8];
  v11 = 0u;
  v12 = 0u;
  v13 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSNotificationCenter.Notifications.State, os_unfair_lock_s>);
  v7 = (os_unfair_lock_s *)swift_allocObject();
  v7[16]._os_unfair_lock_opaque = 0;
  outlined init with copy of NSNotificationCenter.Notifications.State(&v10, (uint64_t)&v7[4]);
  outlined destroy of NSNotificationCenter.Notifications.State((uint64_t)&v10);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v7;
  v8 = a1;
  swift_retain();
  os_unfair_lock_lock(v7 + 16);
  closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)((uint64_t)&v7[4], v8, (uint64_t)a2, a3);
  os_unfair_lock_unlock(v7 + 16);
  swift_release();

  swift_unknownObjectRelease();
  return v3;
}

uint64_t closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v12[3];
  void *ObjectType;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v8 = swift_allocObject();
  swift_weakInit();
  v14 = partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:);
  v15 = v8;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  ObjectType = &block_descriptor_11;
  v9 = _Block_copy(v12);
  swift_release();
  v10 = objc_msgSend(a2, sel__addObserverForName_object_queue_usingBlock_, a3, a4, 0, v9);
  _Block_release(v9);
  ObjectType = (void *)swift_getObjectType();
  v12[0] = v10;
  return outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?((uint64_t)v12, a1 + 8, &demangling cache variable for type metadata for Sendable?);
}

uint64_t closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[6];

  result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with copy of Notification(a1, v3);
    NSNotificationCenter.Notifications.send(_:)((uint64_t)v3);
    swift_release();
    return outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper((uint64_t)v3);
  }
  return result;
}

uint64_t NSNotificationCenter.Notifications.send(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _BYTE v10[48];
  uint64_t v11;
  _BYTE v12[56];
  _BYTE v13[56];

  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = v3 + 4;
  v5 = v3 + 16;
  os_unfair_lock_lock(v3 + 16);
  closure #1 in NSNotificationCenter.Notifications.send(_:)(v4, a1, (uint64_t)v13);
  os_unfair_lock_unlock(v5);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v13, (uint64_t)&v9, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
  v6 = v9;
  if (v9)
  {
    v11 = v9;
    outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v12, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    v9 = v6;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    outlined init with take of LocalePreferences?((uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 40), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    swift_continuation_resume();
    outlined destroy of Any?((uint64_t)&v11, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?));
    v7 = (uint64_t *)v13;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
    v7 = &v9;
  }
  return outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for (UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>, NSNotificationCenter.Notifications.NotificationWrapper?)?);
}

uint64_t NSNotificationCenter.Notifications.deinit()
{
  uint64_t v0;

  NSNotificationCenter.Notifications.teardown()();

  swift_release();
  return v0;
}

Swift::Void __swiftcall NSNotificationCenter.Notifications.teardown()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[3];
  uint64_t v19;
  _BYTE v20[32];

  v1 = v0;
  v2 = *(os_unfair_lock_s **)(v0 + 24);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 16;
  os_unfair_lock_lock(v2 + 16);
  closure #1 in NSNotificationCenter.Notifications.teardown()(v3, (uint64_t)&v12);
  os_unfair_lock_unlock(v4);
  outlined init with take of LocalePreferences?((uint64_t)&v12, (uint64_t)v20, &demangling cache variable for type metadata for Sendable?);
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = v16;
  v19 = v17;
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v20, (uint64_t)&v10, &demangling cache variable for type metadata for Sendable?);
  if (v11)
  {
    outlined init with take of Any(&v10, &v12);
    v5 = *(void **)(v1 + 16);
    __swift_project_boxed_opaque_existential_1(&v12, v13);
    objc_msgSend(v5, sel_removeObserver_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for Sendable?);
  }
  v6 = *(_QWORD *)&v18[0];
  v7 = *(_QWORD *)(*(_QWORD *)&v18[0] + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8++ + 32);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v18 + 8, (uint64_t)&v12, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      outlined init with take of LocalePreferences?((uint64_t)&v12, *(_QWORD *)(*(_QWORD *)(v9 + 64) + 40), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      swift_continuation_resume();
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  outlined destroy of NSNotificationCenter.Notifications.Resumption((uint64_t)v18);
  outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Sendable?);
}

uint64_t NSNotificationCenter.Notifications.__deallocating_deinit()
{
  uint64_t v0;

  NSNotificationCenter.Notifications.teardown()();

  swift_release();
  return swift_deallocClassInstance();
}

double closure #1 in NSNotificationCenter.Notifications.send(_:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  outlined init with copy of (Hashable & Sendable)?((uint64_t)(a1 + 1), (uint64_t)&v25, &demangling cache variable for type metadata for Sendable?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for Sendable?);
  if (v6)
  {
    v7 = (_QWORD *)*a1;
    v8 = *(_QWORD *)(*a1 + 16);
    if (v8)
    {
      if (v8 >= 7)
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, &v25);
      v9 = (_QWORD *)*a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v11 = v9[2];
      v10 = v9[3];
      if (v11 >= v10 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
      v9[2] = v11 + 1;
      v7 = v9 + 4;
      v12 = &v9[6 * v11 + 4];
      v13 = v25;
      v14 = v27;
      v12[1] = v26;
      v12[2] = v14;
      *v12 = v13;
      *a1 = v9;
      v15 = a1[5];
      if (!*(_QWORD *)(v15 + 16))
        goto LABEL_18;
      v16 = *(_QWORD *)(v15 + 32);
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      *(_QWORD *)a3 = v16;
      if (v9[2])
      {
        outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper((uint64_t)(v9 + 4), (_QWORD *)(a3 + 8));
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        return result;
      }
      __break(1u);
    }
    else
    {
      v18 = a1[5];
      if (*(_QWORD *)(v18 + 16))
      {
        v19 = *(_QWORD *)(v18 + 32);
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        *(_QWORD *)a3 = v19;
        outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, (_QWORD *)(a3 + 8));
        return result;
      }
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(a2, &v25);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_15;
    }
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v7);
LABEL_15:
    v21 = v7[2];
    v20 = v7[3];
    if (v21 >= v20 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v7);
    v7[2] = v21 + 1;
    v22 = &v7[6 * v21];
    v23 = v25;
    v24 = v27;
    v22[3] = v26;
    v22[4] = v24;
    v22[2] = v23;
    *a1 = v7;
  }
LABEL_18:
  *(_QWORD *)(a3 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

uint64_t closure #1 in closure #1 in NSNotificationCenter.Notifications.next()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[6];
  _BYTE v19[56];

  v6 = a1 + 5;
  v7 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v7[2] = v9 + 1;
  v7[v9 + 4] = a2;
  a1[5] = v7;
  outlined init with copy of (Hashable & Sendable)?((uint64_t)(a1 + 1), (uint64_t)v19, &demangling cache variable for type metadata for Sendable?);
  v10 = *(_QWORD *)&v19[24];
  result = outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for Sendable?);
  if (!v10)
  {
    v15 = *v6;
    memset(&v19[8], 0, 48);
    *(_QWORD *)v19 = v15;
    swift_bridgeObjectRetain();
    outlined destroy of Any?((uint64_t)&v19[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    memset(&v19[8], 0, 48);
    v16 = *(_OWORD *)&v19[16];
    *(_OWORD *)a3 = *(_OWORD *)v19;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[32];
    *(_QWORD *)(a3 + 48) = *(_QWORD *)&v19[48];
    result = swift_bridgeObjectRelease();
    *v6 = MEMORY[0x1E0DEE9D8];
    return result;
  }
  v12 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    memset(&v19[8], 0, 48);
    *(_QWORD *)v19 = MEMORY[0x1E0DEE9D8];
    result = outlined destroy of Any?((uint64_t)&v19[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    memset(&v19[8], 0, 48);
    goto LABEL_12;
  }
  if (*(_QWORD *)(*v6 + 16))
  {
    v13 = *(_QWORD *)(*v6 + 32);
    result = (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    if (*(_QWORD *)(v12 + 16))
    {
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(v12 + 32, v18);
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      memset(&v19[8], 0, 48);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>>);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_18205C850;
      *(_QWORD *)(v14 + 32) = v13;
      *(_QWORD *)v19 = v14;
      result = outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?((uint64_t)v18, (uint64_t)&v19[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
LABEL_12:
      v17 = *(_OWORD *)&v19[16];
      *(_OWORD *)a3 = *(_OWORD *)v19;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[32];
      *(_QWORD *)(a3 + 48) = *(_QWORD *)&v19[48];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in NSNotificationCenter.Notifications.teardown()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  _BYTE v7[56];
  _BYTE v8[32];

  outlined init with take of LocalePreferences?(a1 + 8, (uint64_t)v8, &demangling cache variable for type metadata for Sendable?);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v8, a2, &demangling cache variable for type metadata for Sendable?);
  v4 = *(_QWORD *)(a1 + 40);
  memset(&v7[8], 0, 48);
  *(_QWORD *)v7 = v4;
  swift_bridgeObjectRetain();
  outlined destroy of Any?((uint64_t)&v7[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  memset(&v7[8], 0, 48);
  v5 = *(_OWORD *)&v7[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v7[32];
  *(_QWORD *)(a2 + 80) = *(_QWORD *)&v7[48];
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = MEMORY[0x1E0DEE9D8];
  return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Sendable?);
}

unint64_t lazy protocol witness table accessor for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator;
  if (!lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator, &type metadata for NSNotificationCenter.Notifications.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator);
  }
  return result;
}

uint64_t method lookup function for NSNotificationCenter.Notifications()
{
  return swift_lookUpClassMethod();
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSNotificationCenter.Notifications.State(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()partial apply(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return closure #1 in NSNotificationCenter.Notifications.Iterator.next()(a1, v1);
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1)
{
  destroy for NSNotificationCenter.Notifications.NotificationWrapper(a1);
  return a1;
}

_QWORD *outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for NSNotificationCenter.Notifications.NotificationWrapper(a2, a1);
  return a2;
}

uint64_t sub_181C1F078()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(uint64_t a1)
{
  return closure #1 in closure #1 in NSNotificationCenter.Notifications.init(center:name:object:)(a1);
}

uint64_t outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  void *v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 40);
    v8 = v6;
    if (v7)
    {
      *(_QWORD *)(a1 + 40) = v7;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16, v7);
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v10;
    }
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = v5[1];
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 40) = v5[2];
  }
  return a1;
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  void *v5;
  void *v6;
  _OWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v6 = *(void **)(a2 + 8);
  if (v5)
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = v6;
      v8 = v6;

      v9 = *(_QWORD *)(a2 + 40);
      if (*(_QWORD *)(a1 + 40))
      {
        if (v9)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_15:
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        __swift_destroy_boxed_opaque_existential_1(a1 + 16);
      }
      else if (v9)
      {
        *(_QWORD *)(a1 + 40) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 16, a2 + 16);
        goto LABEL_15;
      }
      v16 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v16;
      goto LABEL_15;
    }
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(a1 + 8);
    v13 = *(_OWORD *)(a2 + 24);
    v12 = *(_OWORD *)(a2 + 40);
    *v4 = *v7;
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 40) = v12;
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = v6;
    v10 = *(_QWORD *)(a2 + 40);
    v11 = v6;
    if (v10)
    {
      *(_QWORD *)(a1 + 40) = v10;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8))(a1 + 16, a2 + 16, v10);
    }
    else
    {
      v17 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v17;
    }
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *v7;
    v15 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v15;
    *v4 = v14;
  }
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NSNotificationCenter.Notifications.Resumption(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
    goto LABEL_7;
  if (!v5)
  {
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(a1 + 8);
LABEL_7:
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  *(_QWORD *)(a1 + 8) = v5;

  if (*(_QWORD *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSNotificationCenter.Notifications.Resumption(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSNotificationCenter.Notifications.Resumption(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.Resumption()
{
  return &type metadata for NSNotificationCenter.Notifications.Resumption;
}

uint64_t assignWithCopy for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.NotificationWrapper()
{
  return &type metadata for NSNotificationCenter.Notifications.NotificationWrapper;
}

double parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  unint64_t v8;
  double result;
  char v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = qword_1820FB988[*a1];
  if (*(_QWORD *)(a2 + 16)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(qword_1820FB988[*a1]), (v10 & 1) != 0))
  {
    v11 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v8);
    v12 = v11[1];
    *a4 = *v11;
    a4[1] = v12;
    swift_bridgeObjectRetain();
  }
  else if ((v6 & a3) != 0)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a4 = xmmword_18205FD60;
  }
  return result;
}

unint64_t parseStrategyForPort #1 () in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)@<X0>(unint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  char v32;

  if (*(_QWORD *)(result + 16))
  {
    v5 = result;
    result = specialized __RawDictionaryStorage.find<A>(_:)(16);
    if ((v6 & 1) != 0)
    {
      v7 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * result);
      v8 = *v7;
      v9 = v7[1];
      v10 = HIBYTE(v9) & 0xF;
      v11 = *v7 & 0xFFFFFFFFFFFFLL;
      if ((v9 & 0x2000000000000000) != 0 ? HIBYTE(v9) & 0xF : *v7 & 0xFFFFFFFFFFFFLL)
      {
        if ((v9 & 0x1000000000000000) == 0)
        {
          if ((v9 & 0x2000000000000000) == 0)
          {
            if ((v8 & 0x1000000000000000) != 0)
              v13 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
            else
              v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            result = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v13, v11, 10);
            v14 = result;
            v16 = v15 & 1;
            goto LABEL_34;
          }
          v31[0] = *v7;
          v31[1] = v9 & 0xFFFFFFFFFFFFFFLL;
          if (v8 == 43)
          {
            if (!v10)
              goto LABEL_63;
            if (v10 == 1)
              goto LABEL_61;
            if ((BYTE1(v8) - 48) >= 0xAu)
              goto LABEL_33;
            v14 = (BYTE1(v8) - 48);
            if (v10 != 2)
            {
              if ((BYTE2(v8) - 48) > 9u)
                goto LABEL_33;
              v14 = 10 * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
              v17 = v10 - 3;
              if (v10 != 3)
              {
                v18 = (unsigned __int8 *)v31 + 3;
                do
                {
                  v19 = *v18 - 48;
                  if (v19 > 9)
                    goto LABEL_33;
                  v20 = 10 * v14;
                  if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63)
                    goto LABEL_33;
                  v14 = v20 + v19;
                  if (__OFADD__(v20, v19))
                    goto LABEL_33;
                  ++v18;
                }
                while (--v17);
              }
            }
          }
          else
          {
            if (v8 == 45)
            {
              if (v10)
              {
                if (v10 != 1)
                {
                  if ((BYTE1(v8) - 48) < 0xAu)
                  {
                    if (v10 == 2)
                    {
                      v14 = -(uint64_t)(BYTE1(v8) - 48);
                      v32 = 0;
                      goto LABEL_35;
                    }
                    if ((BYTE2(v8) - 48) <= 9u)
                    {
                      v14 = -10 * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
                      v25 = v10 - 3;
                      if (v10 == 3)
                        goto LABEL_48;
                      v26 = (unsigned __int8 *)v31 + 3;
                      while (1)
                      {
                        v27 = *v26 - 48;
                        if (v27 > 9)
                          break;
                        v28 = 10 * v14;
                        if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63)
                          break;
                        v14 = v28 - v27;
                        if (__OFSUB__(v28, v27))
                          break;
                        ++v26;
                        if (!--v25)
                          goto LABEL_48;
                      }
                    }
                  }
LABEL_33:
                  v14 = 0;
                  v16 = 1;
LABEL_34:
                  v32 = v16;
                  goto LABEL_35;
                }
LABEL_61:
                v32 = 1;
                v14 = 0;
LABEL_35:
                if ((v32 & 1) == 0)
                {
LABEL_36:
                  *(_QWORD *)a3 = v14;
                  *(_BYTE *)(a3 + 8) = 0;
                  return result;
                }
                goto LABEL_56;
              }
              __break(1u);
LABEL_63:
              __break(1u);
              return result;
            }
            if (!v10)
              goto LABEL_61;
            if ((v8 - 48) >= 0xAu)
              goto LABEL_33;
            v14 = (v8 - 48);
            if (v10 != 1)
            {
              if ((BYTE1(v8) - 48) > 9u)
                goto LABEL_33;
              v14 = 10 * (v8 - 48) + (BYTE1(v8) - 48);
              v21 = v10 - 2;
              if (v10 != 2)
              {
                v22 = (unsigned __int8 *)v31 + 2;
                do
                {
                  v23 = *v22 - 48;
                  if (v23 > 9)
                    goto LABEL_33;
                  v24 = 10 * v14;
                  if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63)
                    goto LABEL_33;
                  v14 = v24 + v23;
                  if (__OFADD__(v24, v23))
                    goto LABEL_33;
                  ++v22;
                }
                while (--v21);
              }
            }
          }
LABEL_48:
          v32 = 0;
          goto LABEL_35;
        }
        swift_bridgeObjectRetain();
        v14 = specialized _parseInteger<A, B>(ascii:radix:)(v8, v9, 10);
        v30 = v29;
        result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
          goto LABEL_36;
      }
    }
  }
LABEL_56:
  *(_QWORD *)a3 = (a2 & 0x10) == 0;
  *(_BYTE *)(a3 + 8) = 1;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.components.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];

  v2 = a1[7];
  v3 = a1[5];
  v19 = a1[6];
  v20 = v2;
  v4 = a1[7];
  v21[0] = a1[8];
  *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)((char *)a1 + 138);
  v5 = a1[3];
  v7 = a1[1];
  v15 = a1[2];
  v6 = v15;
  v16 = v5;
  v8 = a1[3];
  v9 = a1[5];
  v17 = a1[4];
  v10 = v17;
  v18 = v9;
  v11 = a1[1];
  v14[0] = *a1;
  v12 = v14[0];
  v14[1] = v11;
  a2[6] = v19;
  a2[7] = v4;
  a2[8] = a1[8];
  *(_OWORD *)((char *)a2 + 138) = *(_OWORD *)((char *)a1 + 138);
  a2[2] = v6;
  a2[3] = v8;
  a2[4] = v10;
  a2[5] = v3;
  *a2 = v12;
  a2[1] = v7;
  return outlined retain of URLComponents((uint64_t)v14);
}

id _NSSwiftURLComponents.init(string:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  char *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  objc_super v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  _BYTE v23[160];
  uint64_t v24[5];
  _OWORD v25[8];
  _OWORD v26[2];
  _BYTE v27[160];

  v5 = v2;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(a1, a2, 1, (uint64_t)v24);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v27, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v25, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v25) == 1)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for _NSSwiftURLComponents();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    v20 = v25[6];
    v21 = v25[7];
    v22[0] = v26[0];
    *(_OWORD *)((char *)v22 + 10) = *(_OWORD *)((char *)v26 + 10);
    v16 = v25[2];
    v17 = v25[3];
    v18 = v25[4];
    v19 = v25[5];
    v14 = v25[0];
    v15 = v25[1];
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
    v7 = swift_allocObject();
    *(_DWORD *)(v7 + 172) = 0;
    v8 = v21;
    *(_OWORD *)(v7 + 112) = v20;
    *(_OWORD *)(v7 + 128) = v8;
    *(_OWORD *)(v7 + 144) = v22[0];
    *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
    v9 = v17;
    *(_OWORD *)(v7 + 48) = v16;
    *(_OWORD *)(v7 + 64) = v9;
    v10 = v19;
    *(_OWORD *)(v7 + 80) = v18;
    *(_OWORD *)(v7 + 96) = v10;
    v11 = v15;
    *(_OWORD *)(v7 + 16) = v14;
    *(_OWORD *)(v7 + 32) = v11;
    *(_QWORD *)&v5[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
    outlined init with take of LocalePreferences?((uint64_t)v27, (uint64_t)v23, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v23);

    v13.receiver = v5;
    v13.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
    v6 = objc_msgSendSuper2(&v13, sel_init);
    outlined release of URLComponents?(v24);
  }
  return v6;
}

uint64_t _NSSwiftURLComponents.init(url:resolvingAgainstBaseURL:)(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t result;
  id v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  objc_super v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  _BYTE v31[160];
  _BYTE v32[160];
  uint64_t v33[20];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];

  v3 = v2;
  v5 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&v34 = *(_QWORD *)a1;
    *((_QWORD *)&v34 + 1) = v4;
    *(_QWORD *)&v35 = v6;
    v7 = v2;
    v8 = URL.absoluteString.getter();
    v10 = v9;

LABEL_7:
    swift_release();
    goto LABEL_8;
  }
  v11 = v2;
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v13 = objc_msgSend(v5, sel_relativeString);
    v8 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v10 = v14;

    goto LABEL_7;
  }
  if (!v4)
  {
    __break(1u);
    return result;
  }
  v8 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  swift_bridgeObjectRetain();
  swift_release();

LABEL_8:
  swift_release();
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v8, v10, 1, (uint64_t)v33);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v32, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)&v34, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v34) == 1)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for _NSSwiftURLComponents();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    v28 = v40;
    v29 = v41;
    v30[0] = v42[0];
    *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)((char *)v42 + 10);
    v24 = v36;
    v25 = v37;
    v26 = v38;
    v27 = v39;
    v22 = v34;
    v23 = v35;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
    v16 = swift_allocObject();
    *(_DWORD *)(v16 + 172) = 0;
    v17 = v29;
    *(_OWORD *)(v16 + 112) = v28;
    *(_OWORD *)(v16 + 128) = v17;
    *(_OWORD *)(v16 + 144) = v30[0];
    *(_OWORD *)(v16 + 154) = *(_OWORD *)((char *)v30 + 10);
    v18 = v25;
    *(_OWORD *)(v16 + 48) = v24;
    *(_OWORD *)(v16 + 64) = v18;
    v19 = v27;
    *(_OWORD *)(v16 + 80) = v26;
    *(_OWORD *)(v16 + 96) = v19;
    v20 = v23;
    *(_OWORD *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 32) = v20;
    *(_QWORD *)&v3[OBJC_IVAR____NSSwiftURLComponents_lock] = v16;
    outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v31, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v31);

    v21.receiver = v3;
    v21.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
    v15 = objc_msgSendSuper2(&v21, sel_init);
    outlined release of URLComponents?(v33);
  }
  return (uint64_t)v15;
}

uint64_t _NSSwiftURLComponents.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  id v46;
  uint64_t result;
  __int128 v48[8];
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  char v68;
  __int128 v69;
  _BYTE v70[80];
  _OWORD v71[4];
  _OWORD v72[8];
  _OWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];

  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v83, &demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v84 + 1))
  {
    type metadata accessor for _NSSwiftURLComponents();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = (char *)v74;
      v4 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 172));
      v5 = *(_OWORD *)(v4 + 16);
      v6 = *(_OWORD *)(v4 + 32);
      v7 = *(_OWORD *)(v4 + 48);
      v8 = *(_OWORD *)(v4 + 64);
      v9 = *(_OWORD *)(v4 + 96);
      v87 = *(_OWORD *)(v4 + 80);
      v88 = v9;
      v85 = v7;
      v86 = v8;
      v10 = *(_OWORD *)(v4 + 112);
      v11 = *(_OWORD *)(v4 + 128);
      v12 = *(_OWORD *)(v4 + 144);
      *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)(v4 + 154);
      v90 = v11;
      v91[0] = v12;
      v89 = v10;
      v83 = v5;
      v84 = v6;
      v13 = *(_OWORD *)(v4 + 128);
      v80 = *(_OWORD *)(v4 + 112);
      v81 = v13;
      v82[0] = *(_OWORD *)(v4 + 144);
      *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)(v4 + 154);
      v14 = *(_OWORD *)(v4 + 64);
      v76 = *(_OWORD *)(v4 + 48);
      v77 = v14;
      v15 = *(_OWORD *)(v4 + 96);
      v78 = *(_OWORD *)(v4 + 80);
      v79 = v15;
      v16 = *(_OWORD *)(v4 + 32);
      v74 = *(_OWORD *)(v4 + 16);
      v75 = v16;
      outlined retain of URLComponents((uint64_t)&v83);
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 172));
      v72[6] = v80;
      v72[7] = v81;
      v73[0] = v82[0];
      *(_OWORD *)((char *)v73 + 10) = *(_OWORD *)((char *)v82 + 10);
      v72[2] = v76;
      v72[3] = v77;
      v72[4] = v78;
      v72[5] = v79;
      v72[0] = v74;
      v72[1] = v75;
      v71[0] = v80;
      v71[1] = v81;
      v71[2] = v82[0];
      *(_OWORD *)((char *)&v71[2] + 10) = *(_OWORD *)((char *)v82 + 10);
      *(_OWORD *)&v70[16] = v76;
      *(_OWORD *)&v70[32] = v77;
      *(_OWORD *)&v70[48] = v78;
      *(_OWORD *)&v70[64] = v79;
      v69 = v74;
      *(_OWORD *)v70 = v75;
      v17 = *(_QWORD *)&v3[OBJC_IVAR____NSSwiftURLComponents_lock];
      os_unfair_lock_lock((os_unfair_lock_t)(v17 + 172));
      v18 = *(_OWORD *)(v17 + 16);
      v19 = *(_OWORD *)(v17 + 32);
      v20 = *(_OWORD *)(v17 + 48);
      v21 = *(_OWORD *)(v17 + 64);
      v22 = *(_OWORD *)(v17 + 96);
      v87 = *(_OWORD *)(v17 + 80);
      v88 = v22;
      v85 = v20;
      v86 = v21;
      v23 = *(_OWORD *)(v17 + 112);
      v24 = *(_OWORD *)(v17 + 128);
      v25 = *(_OWORD *)(v17 + 144);
      *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)(v17 + 154);
      v90 = v24;
      v91[0] = v25;
      v89 = v23;
      v83 = v18;
      v84 = v19;
      v26 = *(_OWORD *)(v17 + 128);
      v65 = *(_OWORD *)(v17 + 112);
      v66 = v26;
      v67[0] = *(_OWORD *)(v17 + 144);
      *(_OWORD *)((char *)v67 + 10) = *(_OWORD *)(v17 + 154);
      v27 = *(_OWORD *)(v17 + 64);
      v61 = *(_OWORD *)(v17 + 48);
      v62 = v27;
      v28 = *(_OWORD *)(v17 + 96);
      v63 = *(_OWORD *)(v17 + 80);
      v64 = v28;
      v29 = *(_OWORD *)(v17 + 32);
      v59 = *(_OWORD *)(v17 + 16);
      v60 = v29;
      outlined retain of URLComponents((uint64_t)&v83);
      os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 172));
      v89 = v65;
      v90 = v66;
      v91[0] = v67[0];
      *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)((char *)v67 + 10);
      v85 = v61;
      v86 = v62;
      v87 = v63;
      v88 = v64;
      v83 = v59;
      v84 = v60;
      v56 = v65;
      v57 = v66;
      v58[0] = v67[0];
      *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)((char *)v67 + 10);
      v52 = v61;
      v53 = v62;
      v54 = v63;
      v55 = v64;
      v50 = v59;
      v51 = v60;
      v30 = specialized static URLComponents.== infix(_:_:)(&v69, &v50);

      outlined release of URLComponents((uint64_t)&v83);
      outlined release of URLComponents((uint64_t)v72);
      return v30 & 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v83);
  }
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v83, &demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v84 + 1))
  {
    outlined destroy of Any?((uint64_t)&v83);
    goto LABEL_10;
  }
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLComponents);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    v30 = 0;
    return v30 & 1;
  }
  v31 = (void *)v74;
  v32 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 172));
  v33 = *(_OWORD *)(v32 + 16);
  v34 = *(_OWORD *)(v32 + 32);
  v35 = *(_OWORD *)(v32 + 48);
  v36 = *(_OWORD *)(v32 + 64);
  v37 = *(_OWORD *)(v32 + 96);
  v87 = *(_OWORD *)(v32 + 80);
  v88 = v37;
  v85 = v35;
  v86 = v36;
  v38 = *(_OWORD *)(v32 + 112);
  v39 = *(_OWORD *)(v32 + 128);
  v40 = *(_OWORD *)(v32 + 144);
  *(_OWORD *)((char *)v91 + 10) = *(_OWORD *)(v32 + 154);
  v90 = v39;
  v91[0] = v40;
  v89 = v38;
  v83 = v33;
  v84 = v34;
  v41 = *(_OWORD *)(v32 + 128);
  v80 = *(_OWORD *)(v32 + 112);
  v81 = v41;
  v82[0] = *(_OWORD *)(v32 + 144);
  *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)(v32 + 154);
  v42 = *(_OWORD *)(v32 + 64);
  v76 = *(_OWORD *)(v32 + 48);
  v77 = v42;
  v43 = *(_OWORD *)(v32 + 96);
  v78 = *(_OWORD *)(v32 + 80);
  v79 = v43;
  v44 = *(_OWORD *)(v32 + 32);
  v74 = *(_OWORD *)(v32 + 16);
  v75 = v44;
  outlined retain of URLComponents((uint64_t)&v83);
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 172));
  v65 = v80;
  v66 = v81;
  v67[0] = v82[0];
  *(_OWORD *)((char *)v67 + 10) = *(_OWORD *)((char *)v82 + 10);
  v61 = v76;
  v62 = v77;
  v63 = v78;
  v64 = v79;
  v59 = v74;
  v60 = v75;
  v56 = v80;
  v57 = v81;
  v58[0] = v82[0];
  *(_OWORD *)((char *)v58 + 10) = *(_OWORD *)((char *)v82 + 10);
  v52 = v76;
  v53 = v77;
  v54 = v78;
  v55 = v79;
  v50 = v74;
  v51 = v75;
  v68 = 1;
  v69 = 0uLL;
  v70[0] = 0;
  memset(&v70[8], 0, 72);
  LOBYTE(v71[0]) = 1;
  memset((char *)v71 + 8, 0, 50);
  destructiveProjectEnumData for PredicateCodableError(&v69, v45);
  outlined init with take of LocalePreferences?((uint64_t)&v69, (uint64_t)v48, &demangling cache variable for type metadata for URLComponents?);
  v46 = v31;
  static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)(v46, (uint64_t)v48);
  outlined init with take of LocalePreferences?((uint64_t)v48, (uint64_t)v72, &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)&v83, &demangling cache variable for type metadata for URLComponents?);
  result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v83);
  if ((_DWORD)result != 1)
  {

    v48[6] = v89;
    v48[7] = v90;
    v49[0] = v91[0];
    *(_OWORD *)((char *)v49 + 10) = *(_OWORD *)((char *)v91 + 10);
    v48[2] = v85;
    v48[3] = v86;
    v48[4] = v87;
    v48[5] = v88;
    v48[0] = v83;
    v48[1] = v84;
    v30 = specialized static URLComponents.== infix(_:_:)(&v50, v48);

    outlined release of URLComponents?((uint64_t *)v72);
    outlined release of URLComponents((uint64_t)&v59);
    return v30 & 1;
  }
  __break(1u);
  return result;
}

id _NSSwiftURLComponents.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  objc_class *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id result;
  objc_super v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  _OWORD v30[8];
  _OWORD v31[2];

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 172));
  v4 = *(_OWORD *)(v3 + 128);
  v30[6] = *(_OWORD *)(v3 + 112);
  v30[7] = v4;
  v31[0] = *(_OWORD *)(v3 + 144);
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)(v3 + 154);
  v5 = *(_OWORD *)(v3 + 64);
  v30[2] = *(_OWORD *)(v3 + 48);
  v30[3] = v5;
  v6 = *(_OWORD *)(v3 + 96);
  v30[4] = *(_OWORD *)(v3 + 80);
  v30[5] = v6;
  v7 = *(_OWORD *)(v3 + 32);
  v30[0] = *(_OWORD *)(v3 + 16);
  v30[1] = v7;
  v8 = *(_OWORD *)(v3 + 128);
  v27 = *(_OWORD *)(v3 + 112);
  v28 = v8;
  v29[0] = *(_OWORD *)(v3 + 144);
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)(v3 + 154);
  v9 = *(_OWORD *)(v3 + 64);
  v23 = *(_OWORD *)(v3 + 48);
  v24 = v9;
  v10 = *(_OWORD *)(v3 + 96);
  v25 = *(_OWORD *)(v3 + 80);
  v26 = v10;
  v11 = *(_OWORD *)(v3 + 32);
  v21 = *(_OWORD *)(v3 + 16);
  v22 = v11;
  outlined retain of URLComponents((uint64_t)v30);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 172));
  v12 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  v13 = (char *)objc_allocWithZone(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 172) = 0;
  v15 = v28;
  *(_OWORD *)(v14 + 112) = v27;
  *(_OWORD *)(v14 + 128) = v15;
  *(_OWORD *)(v14 + 144) = v29[0];
  *(_OWORD *)(v14 + 154) = *(_OWORD *)((char *)v29 + 10);
  v16 = v24;
  *(_OWORD *)(v14 + 48) = v23;
  *(_OWORD *)(v14 + 64) = v16;
  v17 = v26;
  *(_OWORD *)(v14 + 80) = v25;
  *(_OWORD *)(v14 + 96) = v17;
  v18 = v22;
  *(_OWORD *)(v14 + 16) = v21;
  *(_OWORD *)(v14 + 32) = v18;
  *(_QWORD *)&v13[OBJC_IVAR____NSSwiftURLComponents_lock] = v14;
  v20.receiver = v13;
  v20.super_class = v12;
  result = objc_msgSendSuper2(&v20, sel_init);
  a1[3] = v12;
  *a1 = result;
  return result;
}

void _NSSwiftURLComponents.url.getter(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const __CFString *v12;
  __CFString *v13;
  CFURLRef v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[26];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  if (_foundation_swift_url_feature_enabled())
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR____NSSwiftURLComponents_lock];
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 172));
    v4 = *(_OWORD *)(v3 + 16);
    v5 = *(_OWORD *)(v3 + 32);
    v6 = *(_OWORD *)(v3 + 48);
    v7 = *(_OWORD *)(v3 + 64);
    v8 = *(_OWORD *)(v3 + 96);
    v29 = *(_OWORD *)(v3 + 80);
    v30 = v8;
    v27 = v6;
    v28 = v7;
    v9 = *(_OWORD *)(v3 + 112);
    v10 = *(_OWORD *)(v3 + 128);
    v11 = *(_OWORD *)(v3 + 144);
    *(_OWORD *)((char *)v33 + 10) = *(_OWORD *)(v3 + 154);
    v32 = v10;
    v33[0] = v11;
    v31 = v9;
    *(_OWORD *)v26 = v4;
    *(_OWORD *)&v26[16] = v5;
    v23 = *(_OWORD *)(v3 + 112);
    v24 = *(_OWORD *)(v3 + 128);
    *(_OWORD *)v25 = *(_OWORD *)(v3 + 144);
    *(_OWORD *)&v25[10] = *(_OWORD *)(v3 + 154);
    v19 = *(_OWORD *)(v3 + 48);
    v20 = *(_OWORD *)(v3 + 64);
    v21 = *(_OWORD *)(v3 + 80);
    v22 = *(_OWORD *)(v3 + 96);
    v17 = *(_OWORD *)(v3 + 16);
    v18 = *(_OWORD *)(v3 + 32);
    outlined retain of URLComponents((uint64_t)v26);
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 172));
    v31 = v23;
    v32 = v24;
    v33[0] = *(_OWORD *)v25;
    *(_OWORD *)((char *)v33 + 10) = *(_OWORD *)&v25[10];
    v27 = v19;
    v28 = v20;
    v29 = v21;
    v30 = v22;
    *(_OWORD *)v26 = v17;
    *(_OWORD *)&v26[16] = v18;
    URLComponents.url.getter((uint64_t *)a1);
    outlined release of URLComponents((uint64_t)v26);
  }
  else
  {
    v12 = (const __CFString *)objc_msgSend(v1, sel_string);
    if (v12)
    {
      v13 = (__CFString *)v12;
      v14 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, 0);

      if (v14)
      {
        URL.init(reference:)(v14, v26);

        v15 = *(_QWORD *)v26;
        v16 = *(_OWORD *)&v26[8];
      }
      else
      {
        v15 = 0;
        v16 = 0uLL;
      }
      *(_QWORD *)a1 = v15;
      *(_OWORD *)(a1 + 8) = v16;
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

void _NSSwiftURLComponents.url(relativeTo:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __CFString *v20;
  __CFString *v21;
  const __CFAllocator *v22;
  CFURLRef v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[3];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];

  v5 = *(id *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v7 = *(_QWORD *)&v2[OBJC_IVAR____NSSwiftURLComponents_lock];
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 172));
    v8 = *(_OWORD *)(v7 + 16);
    v9 = *(_OWORD *)(v7 + 32);
    v10 = *(_OWORD *)(v7 + 48);
    v11 = *(_OWORD *)(v7 + 64);
    v12 = *(_OWORD *)(v7 + 96);
    v48 = *(_OWORD *)(v7 + 80);
    v49 = v12;
    v46 = v10;
    v47 = v11;
    v45[1] = v9;
    v13 = *(_OWORD *)(v7 + 112);
    v14 = *(_OWORD *)(v7 + 128);
    v15 = *(_OWORD *)(v7 + 144);
    *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)(v7 + 154);
    v51 = v14;
    v52[0] = v15;
    v50 = v13;
    v45[0] = v8;
    v16 = *(_OWORD *)(v7 + 128);
    v42 = *(_OWORD *)(v7 + 112);
    v43 = v16;
    v44[0] = *(_OWORD *)(v7 + 144);
    *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v7 + 154);
    v17 = *(_OWORD *)(v7 + 64);
    v38 = *(_OWORD *)(v7 + 48);
    v39 = v17;
    v18 = *(_OWORD *)(v7 + 96);
    v40 = *(_OWORD *)(v7 + 80);
    v41 = v18;
    v19 = *(_OWORD *)(v7 + 32);
    v36 = *(_OWORD *)(v7 + 16);
    v37 = v19;
    outlined retain of URLComponents((uint64_t)v45);
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 172));
    v50 = v42;
    v51 = v43;
    v52[0] = v44[0];
    *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)((char *)v44 + 10);
    v46 = v38;
    v47 = v39;
    v48 = v40;
    v49 = v41;
    v45[0] = v36;
    v45[1] = v37;
    v32 = v41;
    v33 = v42;
    v34 = v43;
    v35[0] = v44[0];
    *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v44 + 10);
    v29 = v38;
    v30 = v39;
    v31 = v40;
    v27 = v36;
    v28 = v37;
    v26[0] = v5;
    v26[1] = v4;
    v26[2] = v6;
    URLComponents.url(relativeTo:)((uint64_t)v26, (uint64_t *)a2);
    outlined release of URLComponents((uint64_t)v45);
  }
  else
  {
    v20 = (__CFString *)objc_msgSend(v2, sel_string);
    if (v20)
    {
      v21 = v20;
      v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (v5)
        v5 = v5;
      v23 = CFURLCreateWithString(v22, v21, (CFURLRef)v5);

      if (v23)
      {
        URL.init(reference:)(v23, v45);

        v24 = *(_QWORD *)&v45[0];
        v25 = *(_OWORD *)((char *)v45 + 8);
      }
      else
      {
        v24 = 0;
        v25 = 0uLL;
      }
      *(_QWORD *)a2 = v24;
      *(_OWORD *)(a2 + 8) = v25;
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
}

uint64_t _NSSwiftURLComponents.string.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v16[8];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v31 = *(_OWORD *)(v1 + 80);
  v32 = v6;
  v29 = v4;
  v30 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v1 + 154);
  v34 = v8;
  v35[0] = v9;
  v33 = v7;
  v27 = v2;
  v28 = v3;
  v10 = *(_OWORD *)(v1 + 128);
  v24 = *(_OWORD *)(v1 + 112);
  v25 = v10;
  v26[0] = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)(v1 + 154);
  v11 = *(_OWORD *)(v1 + 64);
  v20 = *(_OWORD *)(v1 + 48);
  v21 = v11;
  v12 = *(_OWORD *)(v1 + 96);
  v22 = *(_OWORD *)(v1 + 80);
  v23 = v12;
  v13 = *(_OWORD *)(v1 + 32);
  v18 = *(_OWORD *)(v1 + 16);
  v19 = v13;
  outlined retain of URLComponents((uint64_t)&v27);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v16[6] = v24;
  v16[7] = v25;
  v17[0] = v26[0];
  *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)v26 + 10);
  v16[2] = v20;
  v16[3] = v21;
  v16[4] = v22;
  v16[5] = v23;
  v16[0] = v18;
  v16[1] = v19;
  v33 = v24;
  v34 = v25;
  v35[0] = v26[0];
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v26 + 10);
  v29 = v20;
  v30 = v21;
  v31 = v22;
  v32 = v23;
  v27 = v18;
  v28 = v19;
  if (BYTE8(v18) == 1)
  {
    if (*(_QWORD *)&v16[0])
    {
      v14 = *(_QWORD *)(*(_QWORD *)&v16[0] + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v14 = URLComponents._URLComponents.computedString.getter();
  }
  outlined release of URLComponents((uint64_t)v16);
  return v14;
}

uint64_t _NSSwiftURLComponents._scheme.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[26];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v26 = *(_OWORD *)(v1 + 80);
  v27 = v6;
  v24 = v4;
  v25 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  v29 = v8;
  v30[0] = v9;
  v28 = v7;
  v22 = v2;
  v23 = v3;
  v19 = *(_OWORD *)(v1 + 112);
  v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  v15 = *(_OWORD *)(v1 + 48);
  v16 = *(_OWORD *)(v1 + 64);
  v17 = *(_OWORD *)(v1 + 80);
  v18 = *(_OWORD *)(v1 + 96);
  v13 = *(_OWORD *)(v1 + 16);
  v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v28 = v19;
  v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  v24 = v15;
  v25 = v16;
  v26 = v17;
  v27 = v18;
  v22 = v13;
  v23 = v14;
  if ((_QWORD)v15)
  {
    v10 = *((_QWORD *)&v23 + 1);
  }
  else if ((BYTE9(v22) & 1) != 0 && (_QWORD)v22 && (*(_BYTE *)(v22 + 48) & 1) == 0)
  {
    v12 = String.subscript.getter();
    v10 = MEMORY[0x186DA4634](v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents.user.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  unsigned __int16 *v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  if (!a3)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 40) = a2;
    *(_QWORD *)(a1 + 48) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v27 = a2;
    v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 2u, 0);
    }
    else
    {
      v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 2);
    }
    v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v27 = a2;
      v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    v9 = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
  }
  v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v17 = a2 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a2;
    v28 = a3;
    MEMORY[0x1E0C80A78](v9);
    v25[2] = &v27;
    v26 = 2;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a2, a3);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = v21;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.password.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  unsigned __int16 *v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 11) = 0;
  if (!a3)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 56) = a2;
    *(_QWORD *)(a1 + 64) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v27 = a2;
    v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 2u, 0);
    }
    else
    {
      v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 2);
    }
    v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v27 = a2;
      v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    v9 = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
  }
  v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v17 = a2 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a2;
    v28 = a3;
    MEMORY[0x1E0C80A78](v9);
    v25[2] = &v27;
    v26 = 2;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a2, a3);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  return result;
}

uint64_t _NSSwiftURLComponents.host.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD v49[4];
  uint64_t v50;
  int32_t (__cdecl **v51)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v52;
  uint64_t v53[2];
  int32_t (__cdecl *v54)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v55;
  int32_t (__cdecl *v56)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v57;
  _OWORD v58[4];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[3];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v77 = *(_OWORD *)(v1 + 80);
  v78 = v6;
  v75 = v4;
  v76 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)(v1 + 154);
  v80 = v8;
  v81[0] = v9;
  v79 = v7;
  v73 = v2;
  v74 = v3;
  v10 = *(_OWORD *)(v1 + 128);
  v70 = *(_OWORD *)(v1 + 112);
  v71 = v10;
  v72[0] = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)(v1 + 154);
  v11 = *(_OWORD *)(v1 + 64);
  v66 = *(_OWORD *)(v1 + 48);
  v67 = v11;
  v12 = *(_OWORD *)(v1 + 96);
  v68 = *(_OWORD *)(v1 + 80);
  v69 = v12;
  v13 = *(_OWORD *)(v1 + 32);
  v64 = *(_OWORD *)(v1 + 16);
  v65 = v13;
  outlined retain of URLComponents((uint64_t)&v73);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v61 = v70;
  v62 = v71;
  v63[0] = v72[0];
  *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v72 + 10);
  v58[2] = v66;
  v58[3] = v67;
  v59 = v68;
  v60 = v69;
  v58[0] = v64;
  v58[1] = v65;
  v79 = v70;
  v80 = v71;
  v81[0] = v72[0];
  *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)((char *)v72 + 10);
  v75 = v66;
  v76 = v67;
  v77 = v68;
  v78 = v69;
  v73 = v64;
  v74 = v65;
  if ((_QWORD)v69)
  {
    v15 = *((_QWORD *)&v59 + 1);
    v16 = v60;
  }
  else if ((BYTE12(v58[0]) & 1) != 0 && *(_QWORD *)&v58[0] && (*(_BYTE *)(*(_QWORD *)&v58[0] + 120) & 1) == 0)
  {
    v38 = String.subscript.getter();
    v15 = MEMORY[0x186DA4634](v38);
    v16 = v39;
    v14 = swift_bridgeObjectRelease();
  }
  else
  {
    v14 = URLComponents._URLComponents.port.getter();
    if ((v17 & 1) != 0)
    {
      v18 = URLComponents._URLComponents.percentEncodedUser.getter();
      v20 = v19;
      v14 = swift_bridgeObjectRelease();
      if (!v20)
      {
        outlined release of URLComponents((uint64_t)v58);
        return v18;
      }
    }
    v15 = 0;
    v16 = 0xE000000000000000;
  }
  v21 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0)
    v22 = HIBYTE(v16) & 0xF;
  else
    v22 = v15 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    if ((BYTE8(v63[1]) & 1) != 0)
    {
      v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
      v57 = v16;
      MEMORY[0x1E0C80A78](v14);
      v51 = &v56;
      v52 = MEMORY[0x1E0DEE9E8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)&v50, v15, v16);
      if (v24 == 1)
      {
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
        v26 = v57;
        swift_bridgeObjectRetain();
        v18 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v25, v26, MEMORY[0x1E0DEE9E8]);
        swift_bridgeObjectRelease_n();
LABEL_40:
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      v18 = (uint64_t)v23;
LABEL_27:
      swift_bridgeObjectRelease_n();
LABEL_41:
      outlined release of URLComponents((uint64_t)v58);
      return v18;
    }
    if ((v16 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v16 & 0x2000000000000000) != 0)
      {
        v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
        v57 = v16 & 0xFFFFFFFFFFFFFFLL;
        v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v55 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v56, HIBYTE(v16) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, (unsigned __int8 *)&v56, HIBYTE(v16) & 0xF, v53);
        v18 = v53[0];
        v29 = v53[1];
        swift_release();
      }
      else
      {
        if ((v15 & 0x1000000000000000) != 0)
        {
          v27 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          v21 = v45;
        }
        v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        v57 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v18 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v27, v21, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, 0, v27, v21);
        v29 = v28;
      }
      swift_bridgeObjectRelease();
      if (v29 != 1)
        goto LABEL_27;
    }
    v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
    v57 = v16;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v30, sel__fastCharacterContents);
    v32 = v30;
    if (v31)
    {
      v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
      v57 = v16;
      StringProtocol._ephemeralString.getter();
      v33 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v33, sel_length);
      v35 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v35);
      LOBYTE(v51) = 0;
      MEMORY[0x1E0C80A78](v36);
      v49[2] = v31;
      v49[3] = v34;
      v18 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v31, (uint64_t)v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v37, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v49);
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)v58);
      return v18;
    }
    v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v15;
    v57 = v16;
    swift_bridgeObjectRetain();
    v41 = String.init<A>(_:)();
    v42 = v40;
    if ((v40 & 0x1000000000000000) != 0)
    {
      v41 = static String._copying(_:)();
      v47 = v46;
      swift_bridgeObjectRelease();
      v42 = v47;
      if ((v47 & 0x2000000000000000) == 0)
        goto LABEL_32;
    }
    else if ((v40 & 0x2000000000000000) == 0)
    {
LABEL_32:
      if ((v41 & 0x1000000000000000) != 0)
      {
        v43 = (unsigned __int8 *)((v42 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v44 = v41 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v43 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v56 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      v57 = 0;
      v18 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v43, v44, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, 0, v43, v44);
      goto LABEL_39;
    }
    v56 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v41;
    v57 = v42 & 0xFFFFFFFFFFFFFFLL;
    v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    v55 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v56, HIBYTE(v42) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, (unsigned __int8 *)&v56, HIBYTE(v42) & 0xF, v53);
    v18 = v53[0];
    swift_release();
LABEL_39:
    swift_bridgeObjectRelease_n();
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)v58);
  return 0;
}

id _NSSwiftURLComponents._port.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  _BYTE v13[24];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[26];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v27 = *(_OWORD *)(v1 + 80);
  v28 = v6;
  v25 = v4;
  v26 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)(v1 + 154);
  v30 = v8;
  v31[0] = v9;
  v29 = v7;
  v23 = v2;
  v24 = v3;
  v20 = *(_OWORD *)(v1 + 112);
  v21 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)v22 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v22[10] = *(_OWORD *)(v1 + 154);
  v16 = *(_OWORD *)(v1 + 48);
  v17 = *(_OWORD *)(v1 + 64);
  v18 = *(_OWORD *)(v1 + 80);
  v19 = *(_OWORD *)(v1 + 96);
  v14 = *(_OWORD *)(v1 + 16);
  v15 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v23);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v29 = v20;
  v30 = v21;
  v31[0] = *(_OWORD *)v22;
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)&v22[10];
  v25 = v16;
  v26 = v17;
  v27 = v18;
  v28 = v19;
  v23 = v14;
  v24 = v15;
  *(_WORD *)v13 = *(_WORD *)&v22[8];
  *(_OWORD *)&v13[2] = *(_OWORD *)&v22[10];
  v10 = URLComponents.port.getter();
  LOBYTE(v1) = v11;
  outlined release of URLComponents((uint64_t)&v23);
  if ((v1 & 1) != 0)
    return 0;
  else
    return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v10, v14, v15, v16, v17, v18, v19, v20, v21, *(_QWORD *)v22, *(_QWORD *)v13, (unint64_t)(*(_OWORD *)&v22[10] >> 48), *(_QWORD *)&v13[16]);
}

uint64_t closure #1 in _NSSwiftURLComponents._setPort(_:)(uint64_t a1, id a2)
{
  uint64_t result;
  _BYTE *v5;

  if (a2)
  {
    result = (uint64_t)objc_msgSend(a2, sel_integerValue);
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 13) = 0;
    if (result < 0)
    {
      lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
      swift_allocError();
      *v5 = 4;
      return swift_willThrow();
    }
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 13) = 0;
  }
  *(_QWORD *)(a1 + 88) = result;
  *(_BYTE *)(a1 + 96) = a2 == 0;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.path.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  if (a3)
    v4 = a2;
  else
    v4 = 0;
  if (a3)
    v5 = a3;
  else
    v5 = 0xE000000000000000;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  if ((v5 & 0x2000000000000000) != 0)
    v6 = HIBYTE(v5) & 0xF;
  else
    v6 = v4 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  if (v6)
  {
    v6 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v4, v5);
    v8 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 112) = v8;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents.query.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  unsigned __int16 *v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 15) = 0;
  if (!a3)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 120) = a2;
    *(_QWORD *)(a1 + 128) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v27 = a2;
    v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 0x40u, 0);
    }
    else
    {
      v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 64);
    }
    v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v27 = a2;
      v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    v9 = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
  }
  v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v17 = a2 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a2;
    v28 = a3;
    MEMORY[0x1E0C80A78](v9);
    v25[2] = &v27;
    v26 = 64;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a2, a3);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = v20;
  *(_QWORD *)(a1 + 128) = v21;
  return result;
}

uint64_t @objc _NSSwiftURLComponents.user.setter(void *a1, uint64_t a2, void *a3, void (*a4)(os_unfair_lock_s *))
{
  id v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  id v10;

  if (a3)
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  else
    v6 = 0;
  MEMORY[0x1E0C80A78](v6);
  v8 = v7 + 4;
  v9 = v7 + 43;
  v10 = a1;
  os_unfair_lock_lock(v9);
  a4(v8);
  os_unfair_lock_unlock(v9);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in _NSSwiftURLComponents.fragment.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  unsigned __int16 *v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (!a3)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 136) = a2;
    *(_QWORD *)(a1 + 144) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v27 = a2;
    v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 0x40u, 0);
    }
    else
    {
      v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 64);
    }
    v9 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v27 = a2;
      v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    v9 = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
  }
  v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v17 = a2 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a2;
    v28 = a3;
    MEMORY[0x1E0C80A78](v9);
    v25[2] = &v27;
    v26 = 64;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v25, a2, a3);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = v20;
  *(_QWORD *)(a1 + 144) = v21;
  return result;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 40) = a2;
    *(_QWORD *)(a1 + 48) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v17 = a2;
    v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 2u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v17 = a2;
      v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1))
      goto LABEL_8;
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v16 = 1;
  return swift_willThrow();
}

uint64_t @objc _NSSwiftURLComponents._setPercentEncodedFragment(_:)(void *a1, uint64_t a2, void *a3, void (*a4)(os_unfair_lock_s *))
{
  id v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  id v10;

  if (a3)
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  else
    v6 = 0;
  MEMORY[0x1E0C80A78](v6);
  v8 = v7 + 4;
  v9 = v7 + 43;
  v10 = a1;
  os_unfair_lock_lock(v9);
  a4(v8);
  os_unfair_lock_unlock(v9);

  swift_bridgeObjectRelease();
  return 1;
}

uint64_t _NSSwiftURLComponents._percentEncodedPassword.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[26];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v26 = *(_OWORD *)(v1 + 80);
  v27 = v6;
  v24 = v4;
  v25 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  v29 = v8;
  v30[0] = v9;
  v28 = v7;
  v22 = v2;
  v23 = v3;
  v19 = *(_OWORD *)(v1 + 112);
  v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  v15 = *(_OWORD *)(v1 + 48);
  v16 = *(_OWORD *)(v1 + 64);
  v17 = *(_OWORD *)(v1 + 80);
  v18 = *(_OWORD *)(v1 + 96);
  v13 = *(_OWORD *)(v1 + 16);
  v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v28 = v19;
  v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  v24 = v15;
  v25 = v16;
  v26 = v17;
  v27 = v18;
  v22 = v13;
  v23 = v14;
  if ((_QWORD)v17)
  {
    v10 = *((_QWORD *)&v25 + 1);
  }
  else if ((BYTE11(v22) & 1) != 0 && (_QWORD)v22 && (*(_BYTE *)(v22 + 96) & 1) == 0)
  {
    v12 = String.subscript.getter();
    v10 = MEMORY[0x186DA4634](v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 11) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 56) = a2;
    *(_QWORD *)(a1 + 64) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v17 = a2;
    v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 2u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v17 = a2;
      v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1))
      goto LABEL_8;
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v16 = 2;
  return swift_willThrow();
}

uint64_t @objc _NSSwiftURLComponents._setScheme(_:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  id v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  id v10;

  if (a3)
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  else
    v6 = 0;
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t)&v7[4];
  v9 = v7 + 43;
  v10 = a1;
  os_unfair_lock_lock(v9);
  partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)(v8, a4);
  os_unfair_lock_unlock(v9);

  swift_bridgeObjectRelease();
  return 1;
}

id @objc _NSSwiftURLComponents.user.getter(char *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  _OWORD *v5;
  os_unfair_lock_s *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _OWORD v20[8];
  _OWORD v21[3];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[10];
  _OWORD v31[2];

  v4 = *(_QWORD *)&a1[OBJC_IVAR____NSSwiftURLComponents_lock];
  v5 = (_OWORD *)(v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + 172);
  v7 = a1;
  os_unfair_lock_lock(v6);
  closure #1 in _NSSwiftURLComponents.components.getter(v5, &v22);
  os_unfair_lock_unlock(v6);
  v20[6] = v28;
  v20[7] = v29;
  v21[0] = v30[0];
  *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)((char *)v30 + 10);
  v30[8] = v28;
  v30[9] = v29;
  v31[0] = v30[0];
  *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)((char *)v30 + 10);
  v30[4] = v24;
  v30[5] = v25;
  v30[6] = v26;
  v30[7] = v27;
  v30[2] = v22;
  v30[3] = v23;
  a3(v8, v9, v10, v11, v12, v13, v14, v15, v22, *((_QWORD *)&v22 + 1), v23, *((_QWORD *)&v23 + 1), v24, *((_QWORD *)&v24 + 1), v25, *((_QWORD *)&v25 + 1), v26, *((_QWORD *)&v26 + 1), v27,
    *((_QWORD *)&v27 + 1));
  v17 = v16;
  outlined release of URLComponents((uint64_t)v20);

  if (!v17)
    return 0;
  v18 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  unsigned __int16 *v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  char v26;
  _QWORD v27[4];
  unint64_t v28;
  uint64_t v29;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 152) = 0;
  if (!a3)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 72) = a2;
    *(_QWORD *)(a1 + 80) = 0;
    return result;
  }
  v6 = specialized Collection.first.getter(a2, a3);
  if ((v6 & 0x1FF) != 0x5B)
    goto LABEL_23;
  if ((a3 & 0x1000000000000000) == 0)
  {
    v7 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    if (!v7)
    {
      __break(1u);
      goto LABEL_35;
    }
    v6 = (v7 << 16) - 65532;
    LOBYTE(v8) = 1;
LABEL_8:
    if ((v6 & 0xC) != 4 << v8)
    {
LABEL_9:
      v9 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000) == 0)
        v9 = a2 & 0xFFFFFFFFFFFFLL;
      v10 = v6 >> 16;
      if (v6 >> 16 >= v9)
      {
        __break(1u);
        goto LABEL_37;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        v12 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((a3 & 0x2000000000000000) != 0)
      {
        v28 = a2;
        v29 = a3 & 0xFFFFFFFFFFFFFFLL;
        v12 = *((_BYTE *)&v28 + v10);
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
          v11 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        else
          v11 = _StringObject.sharedUTF8.getter();
        v12 = *(_BYTE *)(v11 + v10);
      }
      if (v12 == 93)
      {
        swift_bridgeObjectRetain();
        v14 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a2, a3);
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
        {
LABEL_22:
          lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
          swift_allocError();
          *v15 = 3;
          return swift_willThrow();
        }
        goto LABEL_29;
      }
LABEL_23:
      if ((a3 & 0x1000000000000000) != 0)
      {
        v28 = a2;
        v29 = a3;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain_n();
        StringProtocol._ephemeralString.getter();
        v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        v22 = v20;
        if (v21)
        {
          v28 = a2;
          v29 = a3;
          StringProtocol._ephemeralString.getter();
          v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 4u, 1);
        }
        else
        {
          v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 4u, 1);
        }
        v26 = v25;
        swift_bridgeObjectRelease_n();
        if ((v26 & 1) == 0)
          goto LABEL_22;
LABEL_29:
        swift_bridgeObjectRetain();
        v18 = swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 72) = a2;
        *(_QWORD *)(a1 + 80) = a3;
        LOBYTE(v28) = 37;
        MEMORY[0x1E0C80A78](v18);
        v27[2] = &v28;
        swift_bridgeObjectRetain();
        v19 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v27, a2, a3);
        result = swift_bridgeObjectRelease();
        *(_BYTE *)(a1 + 152) = v19 & 1;
        return result;
      }
      if ((a3 & 0x2000000000000000) != 0)
      {
        v17 = HIBYTE(a3) & 0xF;
        v28 = a2;
        v29 = a3 & 0xFFFFFFFFFFFFFFLL;
        v16 = (char *)&v28;
        goto LABEL_28;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v16 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v17 = a2 & 0xFFFFFFFFFFFFLL;
        goto LABEL_28;
      }
LABEL_37:
      v16 = (char *)_StringObject.sharedUTF8.getter();
LABEL_28:
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v16, v17, 4u, 1))
        goto LABEL_22;
      goto LABEL_29;
    }
LABEL_35:
    v6 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a2, a3);
    goto LABEL_9;
  }
  result = String.UTF8View._foreignCount()();
  if (!__OFSUB__(result, 1))
  {
    v8 = (a2 >> 59) & 1;
    v6 = MEMORY[0x186DA485C](15, result - 1, a2, a3);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents._percentEncodedPath.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[26];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v26 = *(_OWORD *)(v1 + 80);
  v27 = v6;
  v24 = v4;
  v25 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  v29 = v8;
  v30[0] = v9;
  v28 = v7;
  v22 = v2;
  v23 = v3;
  v19 = *(_OWORD *)(v1 + 112);
  v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  v15 = *(_OWORD *)(v1 + 48);
  v16 = *(_OWORD *)(v1 + 64);
  v17 = *(_OWORD *)(v1 + 80);
  v18 = *(_OWORD *)(v1 + 96);
  v13 = *(_OWORD *)(v1 + 16);
  v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v28 = v19;
  v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  v24 = v15;
  v25 = v16;
  v26 = v17;
  v27 = v18;
  v22 = v13;
  v23 = v14;
  if ((_QWORD)v20)
  {
    v10 = *((_QWORD *)&v28 + 1);
  }
  else if ((BYTE14(v22) & 1) != 0 && (_QWORD)v22)
  {
    if ((*(_BYTE *)(v22 + 168) & 1) != 0)
      v11 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v11 = String.subscript.getter();
    v10 = MEMORY[0x186DA4634](v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  char v16;
  _BYTE *v17;
  _QWORD v18[2];

  if (a3)
    v4 = a2;
  else
    v4 = 0;
  if (a3)
    v5 = a3;
  else
    v5 = 0xE000000000000000;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  if ((v5 & 0x1000000000000000) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents, v4, v5);
    v12 = v10;
    if (v11)
    {
      StringProtocol._ephemeralString.getter();
      v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v13, sel_length, v4, v5);
      swift_unknownObjectRelease();
      v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 0x10u, 1);
    }
    else
    {
      v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v5, 0x10u, 1);
    }
    v16 = v15;
    swift_bridgeObjectRelease_n();
    if ((v16 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(v5) & 0xF;
      v18[0] = v4;
      v18[1] = v5 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)v18;
    }
    else if ((v4 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x10u, 1);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_13:
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = v4;
      *(_QWORD *)(a1 + 112) = v5;
      return result;
    }
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v17 = 5;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t _NSSwiftURLComponents._percentEncodedQuery.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[26];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v26 = *(_OWORD *)(v1 + 80);
  v27 = v6;
  v24 = v4;
  v25 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)(v1 + 154);
  v29 = v8;
  v30[0] = v9;
  v28 = v7;
  v22 = v2;
  v23 = v3;
  v19 = *(_OWORD *)(v1 + 112);
  v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  v15 = *(_OWORD *)(v1 + 48);
  v16 = *(_OWORD *)(v1 + 64);
  v17 = *(_OWORD *)(v1 + 80);
  v18 = *(_OWORD *)(v1 + 96);
  v13 = *(_OWORD *)(v1 + 16);
  v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v28 = v19;
  v29 = v20;
  v30[0] = *(_OWORD *)v21;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v21[10];
  v24 = v15;
  v25 = v16;
  v26 = v17;
  v27 = v18;
  v22 = v13;
  v23 = v14;
  if (*(_QWORD *)v21)
  {
    v10 = *((_QWORD *)&v29 + 1);
  }
  else if ((HIBYTE(v22) & 1) != 0 && (_QWORD)v22 && (*(_BYTE *)(v22 + 192) & 1) == 0)
  {
    v12 = String.subscript.getter();
    v10 = MEMORY[0x186DA4634](v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 15) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 120) = a2;
    *(_QWORD *)(a1 + 128) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v17 = a2;
    v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 0x40u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v17 = a2;
      v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1))
      goto LABEL_8;
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v16 = 6;
  return swift_willThrow();
}

id @objc _NSSwiftURLComponents.string.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a1;
  a3();
  v6 = v5;

  if (v6)
  {
    v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

uint64_t _NSSwiftURLComponents._percentEncodedFragment.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[26];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[26];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLComponents_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 172));
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  v6 = *(_OWORD *)(v1 + 96);
  v26 = *(_OWORD *)(v1 + 80);
  v27 = v6;
  v24 = v4;
  v25 = v5;
  v7 = *(_OWORD *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v30[10] = *(_OWORD *)(v1 + 154);
  v29 = v8;
  *(_OWORD *)v30 = v9;
  v28 = v7;
  v22 = v2;
  v23 = v3;
  v19 = *(_OWORD *)(v1 + 112);
  v20 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)v21 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v21[10] = *(_OWORD *)(v1 + 154);
  v15 = *(_OWORD *)(v1 + 48);
  v16 = *(_OWORD *)(v1 + 64);
  v17 = *(_OWORD *)(v1 + 80);
  v18 = *(_OWORD *)(v1 + 96);
  v13 = *(_OWORD *)(v1 + 16);
  v14 = *(_OWORD *)(v1 + 32);
  outlined retain of URLComponents((uint64_t)&v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 172));
  v28 = v19;
  v29 = v20;
  *(_OWORD *)v30 = *(_OWORD *)v21;
  *(_OWORD *)&v30[10] = *(_OWORD *)&v21[10];
  v24 = v15;
  v25 = v16;
  v26 = v17;
  v27 = v18;
  v22 = v13;
  v23 = v14;
  if ((unint64_t)(*(_OWORD *)&v21[10] >> 48))
  {
    v10 = *(_QWORD *)&v30[8];
  }
  else if ((v23 & 1) != 0 && (_QWORD)v22 && (*(_BYTE *)(v22 + 216) & 1) == 0)
  {
    v12 = String.subscript.getter();
    v10 = MEMORY[0x186DA4634](v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v22);
  return v10;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (!a3)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 136) = a2;
    *(_QWORD *)(a1 + 144) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v17 = a2;
    v18 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents, v17, v18);
    v11 = v9;
    if (v10)
    {
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length, a2, a3);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a2, a3, 0x40u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a3) & 0xF;
      v17 = a2;
      v18 = a3 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v17;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1))
      goto LABEL_8;
  }
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v16 = 8;
  return swift_willThrow();
}

id @objc _NSSwiftURLComponents.queryItems.getter(char *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _OWORD *v5;
  os_unfair_lock_s *v6;
  char *v7;
  unint64_t v8;
  void *v9;
  _OWORD v11[8];
  _OWORD v12[3];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[10];
  _OWORD v22[2];

  v4 = *(_QWORD *)&a1[OBJC_IVAR____NSSwiftURLComponents_lock];
  v5 = (_OWORD *)(v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + 172);
  v7 = a1;
  os_unfair_lock_lock(v6);
  closure #1 in _NSSwiftURLComponents.components.getter(v5, &v13);
  os_unfair_lock_unlock(v6);
  v11[6] = v19;
  v11[7] = v20;
  v12[0] = v21[0];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v21 + 10);
  v11[2] = v15;
  v11[3] = v16;
  v11[4] = v17;
  v11[5] = v18;
  v11[0] = v13;
  v11[1] = v14;
  v21[8] = v19;
  v21[9] = v20;
  v22[0] = v21[0];
  *(_OWORD *)((char *)v22 + 10) = *(_OWORD *)((char *)v21 + 10);
  v21[4] = v15;
  v21[5] = v16;
  v21[6] = v17;
  v21[7] = v18;
  v21[2] = v13;
  v21[3] = v14;
  v8 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(a3 & 1);
  outlined release of URLComponents((uint64_t)v11);

  if (v8)
    v9 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  else
    v9 = 0;
  return v9;
}

uint64_t closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  Swift::String v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unsigned __int16 *v22;
  id v23;
  void *v24;
  id v25;
  char v26;
  void *v27;
  unsigned __int16 *v28;
  id v29;
  void *v30;
  id v31;
  char v32;
  char v33;
  char v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 15) = 0;
  if (!a2)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    return result;
  }
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    result = swift_bridgeObjectRelease();
    *(_OWORD *)(a1 + 120) = xmmword_182060F30;
    return result;
  }
  v45 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v5 = (unint64_t *)(a2 + 56);
  while (1)
  {
    v7 = *(v5 - 3);
    v6 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    if ((v6 & 0x1000000000000000) != 0)
    {
      v43 = *(v5 - 3);
      v44 = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v21 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v22 = (unsigned __int16 *)objc_msgSend(v21, sel__fastCharacterContents);
      v23 = v21;
      if (v22)
      {
        v43 = v7;
        v44 = v6;
        v40 = v22;
        StringProtocol._ephemeralString.getter();
        v24 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v25 = objc_msgSend(v24, sel_length);
        swift_unknownObjectRelease();
        v26 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v40, (uint64_t)v25, 0x80u, 1);
      }
      else
      {
        v26 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v6, 0x80u, 1);
      }
      v33 = v26;
      swift_bridgeObjectRelease_n();
      if ((v33 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v11 = HIBYTE(v6) & 0xF;
        v43 = *(v5 - 3);
        v44 = v6 & 0xFFFFFFFFFFFFFFLL;
        v10 = (char *)&v43;
      }
      else if ((v7 & 0x1000000000000000) != 0)
      {
        v10 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v11 = v7 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v10 = (char *)_StringObject.sharedUTF8.getter();
      }
      v12 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v11, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v12)
        goto LABEL_37;
    }
    v43 = v7;
    v44 = v6;
    if (v8)
      break;
    swift_bridgeObjectRelease();
LABEL_19:
    v17 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
      v17 = v45;
    }
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(_QWORD *)(v17 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v17 = v45;
    }
    v5 += 4;
    *(_QWORD *)(v17 + 16) = v19 + 1;
    v20 = v17 + 16 * v19;
    *(_QWORD *)(v20 + 32) = v7;
    *(_QWORD *)(v20 + 40) = v6;
    if (!--v4)
    {
      v43 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v36 = BidirectionalCollection<>.joined(separator:)();
      v38 = v37;
      swift_release();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = v36;
      *(_QWORD *)(a1 + 128) = v38;
      return result;
    }
  }
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) != 0)
    {
      v14 = HIBYTE(v8) & 0xF;
      v42._countAndFlagsBits = v9;
      v42._object = (void *)(v8 & 0xFFFFFFFFFFFFFFLL);
      v13 = (char *)&v42;
    }
    else if ((v9 & 0x1000000000000000) != 0)
    {
      v13 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v13 = (char *)_StringObject.sharedUTF8.getter();
    }
    v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v13, v14, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v15)
      goto LABEL_36;
    goto LABEL_18;
  }
  v42._countAndFlagsBits = v9;
  v42._object = (void *)v8;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  v27 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v28 = (unsigned __int16 *)objc_msgSend(v27, sel__fastCharacterContents);
  v29 = v27;
  if (v28)
  {
    v42._countAndFlagsBits = v9;
    v42._object = (void *)v8;
    v41 = v28;
    StringProtocol._ephemeralString.getter();
    v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v30, sel_length);
    swift_unknownObjectRelease();
    v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v41, (uint64_t)v31, 0x40u, 1);
  }
  else
  {
    v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x40u, 1);
  }
  v34 = v32;
  swift_bridgeObjectRelease_n();
  if ((v34 & 1) != 0)
  {
LABEL_18:
    v42._countAndFlagsBits = 61;
    v42._object = (void *)0xE100000000000000;
    v16._countAndFlagsBits = v9;
    v16._object = (void *)v8;
    String.append(_:)(v16);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v43;
    v6 = v44;
    goto LABEL_19;
  }
LABEL_36:
  swift_bridgeObjectRelease();
LABEL_37:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v35 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _NSSwiftURLComponents.rangeOfScheme.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 48);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 48);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents.rangeOfUser.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 72);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 72);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents.rangeOfPassword.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 96);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 96);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents.rangeOfHost.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 120);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 120);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents.rangeOfPort.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 144);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 144);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents.rangeOfPath.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 168);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 168);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents.rangeOfQuery.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 192);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 192);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

uint64_t _NSSwiftURLComponents.rangeOfFragment.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _OWORD v25[8];
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 172));
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v40 = *(_OWORD *)(v2 + 80);
  v41 = v7;
  v38 = v5;
  v39 = v6;
  v8 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)(v2 + 154);
  v43 = v9;
  v44[0] = v10;
  v42 = v8;
  v36 = v3;
  v37 = v4;
  v11 = *(_OWORD *)(v2 + 128);
  v33 = *(_OWORD *)(v2 + 112);
  v34 = v11;
  v35[0] = *(_OWORD *)(v2 + 144);
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(v2 + 154);
  v12 = *(_OWORD *)(v2 + 64);
  v29 = *(_OWORD *)(v2 + 48);
  v30 = v12;
  v13 = *(_OWORD *)(v2 + 96);
  v31 = *(_OWORD *)(v2 + 80);
  v32 = v13;
  v14 = *(_OWORD *)(v2 + 32);
  v27 = *(_OWORD *)(v2 + 16);
  v28 = v14;
  outlined retain of URLComponents((uint64_t)&v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 172));
  v25[6] = v33;
  v25[7] = v34;
  v26[0] = v35[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v35 + 10);
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = v32;
  v25[0] = v27;
  v25[1] = v28;
  v42 = v33;
  v43 = v34;
  v44[0] = v35[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v35 + 10);
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  if ((_QWORD)v27)
  {
    if (BYTE8(v27))
    {
      v15 = *(_BYTE *)(*(_QWORD *)&v25[0] + 216);
      goto LABEL_9;
    }
  }
  else if ((BYTE8(v27) & 1) != 0)
  {
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v16 = URLComponents._URLComponents.computedString.getter();
  if (!v17)
    goto LABEL_8;
  v15 = 1;
  v18 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v15 = *(_BYTE *)(v18 + 216);
    swift_release();
  }
LABEL_9:
  outlined release of URLComponents((uint64_t)v25);
  v19 = objc_msgSend(v1, sel_string);
  if (!v19)
    return 0x7FFFFFFFFFFFFFFFLL;
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  lazy protocol witness table accessor for type String and conformance String();
  v21 = StringProtocol._toUTF16Offsets(_:)();
  v23 = v22;
  result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21))
    return v21;
  __break(1u);
  return result;
}

id _NSSwiftURLComponents.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftURLComponents();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _NSSwiftURLComponents()
{
  return objc_opt_self();
}

uint64_t _NSSwiftURLQueryItem.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  _BYTE v28[24];
  uint64_t v29;

  swift_getObjectType();
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)v28, &demangling cache variable for type metadata for Any?);
  if (!v29)
  {
    outlined destroy of Any?((uint64_t)v28);
LABEL_16:
    outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)v28, &demangling cache variable for type metadata for Any?);
    if (v29)
    {
      type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLQueryItem);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v13 = *(id *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
        v14 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
        v16 = *(id *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
        v15 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
        v17 = objc_msgSend(v27, sel_name);
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        v21 = objc_msgSend(v27, sel_value);
        if (v21)
        {
          v22 = v21;
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          v25 = v24;

          if (v13 != v18)
          {
LABEL_27:
            v11 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
LABEL_35:
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              return v11 & 1;
            }
LABEL_28:
            v11 = (v15 | v25) == 0;
            if (v15 && v25)
            {
              if (v16 == v23 && v15 == v25)
                v11 = 1;
              else
                v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            goto LABEL_35;
          }
        }
        else
        {
          v23 = 0;
          v25 = 0;
          if (v13 != v18)
            goto LABEL_27;
        }
        if (v14 == v20)
          goto LABEL_28;
        goto LABEL_27;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v28);
    }
LABEL_23:
    v11 = 0;
    return v11 & 1;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_16;
  v3 = v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16];
  v8 = *(_QWORD *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24];
  v10 = v4 == *(_QWORD *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem]
     && v5 == *(_QWORD *)&v27[OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8];
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_22;
  v11 = v8 == 0;
  if (!v6)
  {

    return v11 & 1;
  }
  if (!v8)
  {
LABEL_22:

    goto LABEL_23;
  }
  if (v7 == v9 && v6 == v8)
  {

    v11 = 1;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();

  }
  return v11 & 1;
}

uint64_t @objc _NSSwiftURLComponents.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

void _NSSwiftURLQueryItem.copy(with:)(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  objc_super v14;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 8);
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 16);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
  v9 = (char *)objc_allocWithZone(ObjectType);
  v10 = &v9[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(_QWORD *)v10 = v6;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = v8;
  *((_QWORD *)v10 + 3) = v7;
  v11 = String._bridgeToObjectiveCImpl()();
  if (v7)
    v12 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v12 = 0;
  v14.receiver = v9;
  v14.super_class = ObjectType;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = objc_msgSendSuper2(&v14, sel_initWithName_value_, v11, v12);
  swift_unknownObjectRelease();

  a1[3] = ObjectType;
  *a1 = v13;
}

uint64_t @objc _NSSwiftURLComponents.copy(with:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr))
{
  id v5;
  uint64_t v6;
  _QWORD v8[4];

  v5 = a1;
  a4(v8);

  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

Swift::Int _NSSwiftURLQueryItem.hash.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftURLQueryItem_queryItem + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t _NSSwiftURLQueryItem.init(coder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  char *v54;
  uint64_t v55;
  void *v56;
  char v57;
  id v58;
  objc_super v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = v1;
  if (objc_msgSend(a1, sel_allowsKeyedCoding))
  {
    v5 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x656D616E2E534ELL, 0xE700000000000000);
    if (v5)
    {
      v6 = v5;
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v9 = v8;

      v10 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x65756C61762E534ELL, 0xE800000000000000);
      if (v10)
      {
        v11 = v10;
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v14 = v13;

      }
      else
      {
        v12 = 0;
        v14 = 0;
      }
      v52 = objc_msgSend(a1, sel_error);
      if (!v52)
      {
        v54 = &v4[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
        *(_QWORD *)v54 = v7;
        *((_QWORD *)v54 + 1) = v9;
        *((_QWORD *)v54 + 2) = v12;
        *((_QWORD *)v54 + 3) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();

        v55 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v14)
        {
          v56 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
        }
        else
        {
          v56 = 0;
        }
        v59.receiver = v4;
        v59.super_class = ObjectType;
        v58 = objc_msgSendSuper2(&v59, sel_initWithName_value_, v55, v56);
        swift_unknownObjectRelease();

        return (unint64_t)v58;
      }
      v53 = v52;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_23:
      swift_deallocPartialClassInstance();
      return 0;
    }
    goto LABEL_11;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 48) = 0xD000000000000026;
  *(_QWORD *)(inited + 56) = 0x80000001823084C0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v60, &demangling cache variable for type metadata for (String, Any));
  v18 = v60;
  v19 = v61;
  swift_retain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
  if ((v21 & 1) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v17[(result >> 6) + 8] |= 1 << result;
  v22 = (uint64_t *)(v17[6] + 16 * result);
  *v22 = v18;
  v22[1] = v19;
  result = (unint64_t)outlined init with take of Any(v62, (_OWORD *)(v17[7] + 32 * result));
  v23 = v17[2];
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v17[2] = v25;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v26 = objc_allocWithZone((Class)NSError);
  v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v29 = objc_msgSend(v28, sel_domain);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v32 == v33)
    goto LABEL_15;
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
  {
LABEL_22:
    objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
    swift_unknownObjectRelease();

    goto LABEL_23;
  }
  __break(1u);
LABEL_11:

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_18205C850;
  *(_QWORD *)(v35 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(v35 + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v35 + 40) = v36;
  *(_QWORD *)(v35 + 48) = 0xD00000000000001DLL;
  *(_QWORD *)(v35 + 56) = 0x80000001823084F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v37 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(v35 + 32, (uint64_t)&v60, &demangling cache variable for type metadata for (String, Any));
  v38 = v60;
  v39 = v61;
  swift_retain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
  if ((v40 & 1) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v37[(result >> 6) + 8] |= 1 << result;
  v41 = (uint64_t *)(v37[6] + 16 * result);
  *v41 = v38;
  v41[1] = v39;
  result = (unint64_t)outlined init with take of Any(v62, (_OWORD *)(v37[7] + 32 * result));
  v42 = v37[2];
  v24 = __OFADD__(v42, 1);
  v43 = v42 + 1;
  if (v24)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v37[2] = v43;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v44 = objc_allocWithZone((Class)NSError);
  v45 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v46 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v47 = objc_msgSend(v46, sel_domain);
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v50 = v49;

  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v50 == v51)
  {
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v57 & 1) != 0)
    goto LABEL_22;
LABEL_31:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _NSSwiftURLQueryItem()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setPercentEncodedQueryItems(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.queryItems.setter()
{
  Swift::OpaquePointer_optional v1;

  v1.value._rawValue = (void *)swift_bridgeObjectRetain();
  URLComponents._URLComponents.setQueryItems(_:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setPercentEncodedFragment(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setPercentEncodedQuery(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setPercentEncodedPath(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setEncodedHost(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setPercentEncodedPassword(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setPercentEncodedUser(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.fragment.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents.fragment.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.query.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents.query.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.path.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents.path.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPort(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents._setPort(_:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.host.setter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return URLComponents.host.setter(v2, v1);
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.password.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents.password.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.user.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftURLComponents.user.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents._setPercentEncodedHost(_:)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;

  return a2(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

id specialized static NSURLComponents._componentsWith(url:resolvingAgainstBaseURL:)(uint64_t a1, char a2)
{
  objc_class *v3;
  char *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  objc_super v10;
  _BYTE v11[160];
  _BYTE v12[160];
  _BYTE v13[32];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];

  *(_QWORD *)v13 = *(_QWORD *)a1;
  *(_OWORD *)&v13[8] = *(_OWORD *)(a1 + 8);
  URLComponents.init(url:resolvingAgainstBaseURL:)((uint64_t)v13, a2, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v13) == 1)
    return 0;
  v3 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  v4 = (char *)objc_allocWithZone(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 172) = 0;
  v6 = v19;
  *(_OWORD *)(v5 + 112) = v18;
  *(_OWORD *)(v5 + 128) = v6;
  *(_OWORD *)(v5 + 144) = v20[0];
  *(_OWORD *)(v5 + 154) = *(_OWORD *)((char *)v20 + 10);
  v7 = v15;
  *(_OWORD *)(v5 + 48) = v14;
  *(_OWORD *)(v5 + 64) = v7;
  v8 = v17;
  *(_OWORD *)(v5 + 80) = v16;
  *(_OWORD *)(v5 + 96) = v8;
  v9 = *(_OWORD *)&v13[16];
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v13;
  *(_OWORD *)(v5 + 32) = v9;
  *(_QWORD *)&v4[OBJC_IVAR____NSSwiftURLComponents_lock] = v5;
  v10.receiver = v4;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t specialized static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  uint64_t v73;
  char v74;
  uint64_t v75[5];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  LOBYTE(v75[0]) = 0;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)v75, a4, a3, &v76);
  v33 = *((_QWORD *)&v76 + 1);
  v34 = v76;
  LOBYTE(v64) = 1;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v64, a4, a3, v75);
  v31 = v75[1];
  v32 = v75[0];
  LOBYTE(v55) = 2;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v55, a4, a3, &v64);
  v29 = *((_QWORD *)&v64 + 1);
  v30 = v64;
  LOBYTE(v46) = 3;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v46, a4, a3, &v55);
  v27 = *((_QWORD *)&v55 + 1);
  v28 = v55;
  parseStrategyForPort #1 () in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)(a4, a3, (uint64_t)&v73);
  v9 = v73;
  v10 = v74;
  LOBYTE(v36) = 5;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v36, a4, a3, &v46);
  v11 = v46;
  LOBYTE(v85) = 6;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v85, a4, a3, &v36);
  v12 = v36;
  LOBYTE(v85) = 7;
  parseStrategy #1 (for:) in static NSURLComponents._matchWith(string:requiredComponents:defaultValues:urlPtr:)((char *)&v85, a4, a3, &v45);
  *(_QWORD *)&v85 = v34;
  *((_QWORD *)&v85 + 1) = v33;
  *(_QWORD *)&v86 = v32;
  *((_QWORD *)&v86 + 1) = v31;
  *(_QWORD *)&v87 = v30;
  *((_QWORD *)&v87 + 1) = v29;
  *(_QWORD *)&v88 = v28;
  *((_QWORD *)&v88 + 1) = v27;
  *(_QWORD *)&v89 = v9;
  BYTE8(v89) = v10;
  v90 = v11;
  v91 = v12;
  if ((a2 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a2) & 0xF;
  else
    v13 = a1 & 0xFFFFFFFFFFFFLL;
  v92 = v45;
  if (v13)
  {
    do
    {
      String.subscript.getter();
      v14 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
    }
    while ((v14 & 1) == 0 && 4 * v13 != (unint64_t)String.index(after:)() >> 14);
  }
  *(_QWORD *)&v76 = String.subscript.getter();
  *((_QWORD *)&v76 + 1) = v15;
  *(_QWORD *)&v77 = v16;
  *((_QWORD *)&v77 + 1) = v17;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v18 = String.init<A>(_:)();
  v20 = v19;
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v18, v20, 1, (uint64_t)v75);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)&v76, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v76) == 1)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    outlined release of URL.ParseStrategy((uint64_t *)&v85);
    *a5 = 0;
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  v61 = v82;
  v62 = v83;
  v63[0] = v84[0];
  *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v84 + 10);
  v57 = v78;
  v58 = v79;
  v59 = v80;
  v60 = v81;
  v55 = v76;
  v56 = v77;
  swift_bridgeObjectRelease();
  v52 = v61;
  v53 = v62;
  v54[0] = v63[0];
  *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)((char *)v63 + 10);
  v48 = v57;
  v49 = v58;
  v50 = v59;
  v51 = v60;
  v46 = v55;
  v47 = v56;
  v70 = v61;
  v71 = v62;
  v72[0] = v63[0];
  *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)((char *)v63 + 10);
  v66 = v57;
  v67 = v58;
  v68 = v59;
  v69 = v60;
  v64 = v55;
  v65 = v56;
  v40 = v89;
  v41 = v90;
  v42 = v91;
  v43 = v92;
  v36 = v85;
  v37 = v86;
  v38 = v87;
  v39 = v88;
  if ((URL.ParseStrategy.validate(_:)(&v46) & 1) == 0)
  {
LABEL_15:
    outlined release of URLComponents?(v75);
    goto LABEL_16;
  }
  v50 = v89;
  v51 = v90;
  v52 = v91;
  v53 = v92;
  v46 = v85;
  v47 = v86;
  v48 = v87;
  v49 = v88;
  URL.ParseStrategy.fillDefaultValues(for:)(&v64);
  v52 = v70;
  v53 = v71;
  v54[0] = v72[0];
  *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)((char *)v72 + 10);
  v48 = v66;
  v49 = v67;
  v50 = v68;
  v51 = v69;
  v46 = v64;
  v47 = v65;
  v42 = v70;
  v43 = v71;
  v44[0] = v72[0];
  *(_OWORD *)((char *)v44 + 10) = *(_OWORD *)((char *)v72 + 10);
  v38 = v66;
  v39 = v67;
  v40 = v68;
  v41 = v69;
  v36 = v64;
  v37 = v65;
  URLComponents.url.getter((uint64_t *)&v45);
  outlined release of URLComponents((uint64_t)&v46);
  outlined release of URL.ParseStrategy((uint64_t *)&v85);
  v21 = (void *)v45;
  if ((_QWORD)v45)
    v22 = (id)v45;
  *a5 = v21;
  *(_QWORD *)&v36 = a1;
  *((_QWORD *)&v36 + 1) = a2;
  lazy protocol witness table accessor for type String and conformance String();
  v23 = StringProtocol._toUTF16Offsets(_:)();
  v25 = v24;
  outlined consume of URL?(v21);
  if (__OFSUB__(v25, v23))
  {
    __break(1u);
    goto LABEL_15;
  }
  return v23;
}

uint64_t *outlined release of URL.ParseStrategy(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v14 = a1[14];
  v12 = a1[13];
  v13 = a1[15];
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(*a1, a1[1]);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v2, v3);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v4, v5);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v6, v7);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v8, v9);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v10, v12);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v14, v13);
  return a1;
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  char v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - v7;
  dispatch thunk of static FloatingPoint.infinity.getter();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, AssociatedTypeWitness);
  v10 = dispatch thunk of static Comparable.> infix(_:_:)();
  v9(v8, AssociatedTypeWitness);
  if ((v10 & 1) != 0)
  {
    dispatch thunk of FloatingPoint.nextDown.getter();
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v11, 1, AssociatedTypeWitness);
}

uint64_t DiscreteFormatStyle<>.input(after:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = (char *)&v9 - v4;
  dispatch thunk of static FloatingPoint.infinity.getter();
  v6 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if ((v6 & 1) != 0)
  {
    dispatch thunk of FloatingPoint.nextUp.getter();
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v7, 1, AssociatedTypeWitness);
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return DiscreteFormatStyle<>.input(before:)(a1, a2, MEMORY[0x1E0DECA30], (uint64_t (*)(uint64_t, char *, uint64_t, _QWORD))MEMORY[0x1E0DEA3B8], (void (*)(uint64_t, char *, uint64_t, _QWORD))MEMORY[0x1E0DECC18], a3);
}

uint64_t DiscreteFormatStyle<>.input(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return DiscreteFormatStyle<>.input(before:)(a1, a2, (void (*)(__n128))MEMORY[0x1E0DECA28], (uint64_t (*)(uint64_t, char *, uint64_t, _QWORD))MEMORY[0x1E0DEA3C0], (void (*)(uint64_t, char *, uint64_t, _QWORD))MEMORY[0x1E0DECC10], a3);
}

uint64_t DiscreteFormatStyle<>.input(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, void (*a3)(__n128)@<X4>, uint64_t (*a4)(uint64_t, char *, uint64_t, _QWORD)@<X5>, void (*a5)(uint64_t, char *, uint64_t, _QWORD)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t, _QWORD);
  void (*v26)(__n128);
  uint64_t (*v27)(uint64_t, char *, uint64_t, _QWORD);
  uint64_t v28;

  v25 = a5;
  v26 = a3;
  v27 = a4;
  v28 = a6;
  v7 = *(_QWORD *)(a2 + 8);
  v24 = *(_QWORD *)(v7 + 24);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = swift_checkMetadataState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - v12;
  v26(v11);
  v14 = *(_QWORD *)(v7 + 32);
  v15 = a1;
  v16 = v27(a1, v13, v9, *(_QWORD *)(v14 + 8));
  v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  if ((v16 & 1) != 0)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&qword_1820FB9D8, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v19 = v28;
    v25(v15, v13, v9, *(_QWORD *)(v24 + 8));
    v17(v13, v9);
    v20 = 0;
    v21 = v19;
  }
  else
  {
    v20 = 1;
    v21 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v21, v20, 1, v9);
}

double *DiscreteFormatStyle<>.input(before:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;

  v2 = *result;
  v3 = 0.0;
  if (*result > -6.31140768e10)
  {
    v4 = 0.0 - v2;
    if (0.0 - v2 < INFINITY)
      *(_QWORD *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
    v3 = -v4;
  }
  *(double *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v2 <= -6.31140768e10;
  return result;
}

double Date.nextDown.getter@<D0>(double *a1@<X8>)
{
  double *v1;
  double v2;
  double result;

  v2 = 0.0 - *v1;
  if (v2 < INFINITY)
    *(_QWORD *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  result = -v2;
  *a1 = result;
  return result;
}

double *DiscreteFormatStyle<>.input(after:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;

  v2 = *result;
  v3 = 0.0;
  if (*result < 6.3113904e10)
  {
    v3 = v2 + 0.0;
    if (v2 + 0.0 < INFINITY)
      *(_QWORD *)&v3 += (*(uint64_t *)&v3 >> 63) | 1;
  }
  *(double *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v2 >= 6.3113904e10;
  return result;
}

void Date.nextUp.getter(double *a1@<X8>)
{
  double *v1;
  double v2;

  v2 = *v1 + 0.0;
  if (v2 < INFINITY)
    *(_QWORD *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  *a1 = v2;
}

uint64_t DiscreteFormatStyle<>.input(before:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = static Duration.< infix(_:_:)();
  result = 0;
  if ((v4 & 1) != 0)
  {
    v6 = Duration.init(secondsComponent:attosecondsComponent:)();
    return MEMORY[0x186DA6158](a1, a2, v6, v7);
  }
  return result;
}

uint64_t Duration.nextDown.getter(uint64_t a1, uint64_t a2)
{
  return Duration.nextDown.getter(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE7A0]);
}

uint64_t DiscreteFormatStyle<>.input(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((static Duration.< infix(_:_:)() & 1) == 0)
    return 0;
  v4 = Duration.init(secondsComponent:attosecondsComponent:)();
  return MEMORY[0x186DA614C](a1, a2, v4, v5);
}

uint64_t Duration.nextUp.getter(uint64_t a1, uint64_t a2)
{
  return Duration.nextDown.getter(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE798]);
}

uint64_t Duration.nextDown.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = Duration.init(secondsComponent:attosecondsComponent:)();
  return a3(a1, a2, v5, v6);
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = static Duration.< infix(_:_:)();
  result = 0;
  v7 = 0;
  if ((v5 & 1) != 0)
  {
    v8 = Duration.init(secondsComponent:attosecondsComponent:)();
    result = MEMORY[0x186DA6158](v3, v4, v8, v9);
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = (v5 & 1) == 0;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = static Duration.< infix(_:_:)();
  if ((v5 & 1) != 0)
  {
    v6 = Duration.init(secondsComponent:attosecondsComponent:)();
    result = MEMORY[0x186DA614C](v3, v4, v6, v7);
  }
  else
  {
    result = 0;
    v9 = 0;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = (v5 & 1) == 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter(a1);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char *v6;

  v2 = (char *)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
              + 48);
  *a1 = 0;
  v3 = *MEMORY[0x1E0DED4E8];
  v4 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  v6 = (char *)a1 + *(int *)(result + 20);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  return result;
}

__n128 Duration.TimeFormatStyle.init(pattern:locale:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 result;

  v6 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(_BYTE *)(a3 + *(int *)(v6 + 20)) = 0;
  outlined init with take of ICUNumberFormatter.Signature(a1, a3, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  result = *a2;
  *(__n128 *)(a3 + *(int *)(v6 + 24)) = *a2;
  return result;
}

unint64_t Duration.TimeFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _BYTE v20[48];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[48];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[7];
  _OWORD v35[3];
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[3];
  _OWORD v45[4];
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  Duration.TimeFormatStyle.Attributed.format(_:)(a1, a2, (unint64_t *)&v19);
  v2 = v19;
  v3 = v19[1];
  v4 = v19[3];
  v44[1] = v19[2];
  v44[2] = v4;
  v44[0] = v3;
  v5 = BigString.startIndex.getter();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  result = BigString.endIndex.getter();
  v36 = v5;
  v37 = v7;
  v38 = v9;
  v39 = v11;
  v40 = result;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  if (result >> 10 < v5 >> 10)
  {
    __break(1u);
  }
  else
  {
    swift_retain_n();
    outlined retain of Locale((uint64_t)v44);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v44);
    outlined release of Locale((uint64_t)v20);
    swift_release_n();
    v30 = v21;
    v31 = v22;
    v32 = v23;
    v33 = v24;
    v45[0] = v21;
    v45[1] = v22;
    v45[2] = v23;
    v45[3] = v24;
    v47 = v21;
    v48 = v22;
    v49 = v23;
    v50 = v24;
    v46 = v2;
    v51 = 0;
    v16 = v2[1];
    v17 = v2[3];
    v35[1] = v2[2];
    v35[2] = v17;
    v35[0] = v16;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
    swift_retain();
    outlined retain of Locale((uint64_t)v35);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v35);
    outlined release of Locale((uint64_t)v25);
    swift_release_n();
    v18 = v2[2];
    v34[0] = v2[1];
    v34[1] = v18;
    v34[2] = v2[3];
    v34[3] = v26;
    v34[4] = v27;
    v34[5] = v28;
    v34[6] = v29;
    swift_unknownObjectRetain();
    swift_release_n();
    return MEMORY[0x186DA46E8](v34);
  }
  return result;
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  Swift::UInt v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (Swift::UInt *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ICUNumberFormatter.Signature(v0, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v10 = *v7;
    if (EnumCaseMultiPayload == 1)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)v7 + *(int *)(v11 + 48), v1);
      v12 = 1;
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)v7 + *(int *)(v13 + 48), v1);
      v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v2 + 32))(v4, v7, v1);
    v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys>);
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  MEMORY[0x1E0C80A78](v2);
  v47 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys>);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  MEMORY[0x1E0C80A78](v4);
  v44 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys>);
  v6 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for FloatingPointRoundingRule();
  v53 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v43 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v42 = (char *)&v42 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v42 - v13;
  v15 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.Fields.CodingKeys>);
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  v57 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature(v56, (uint64_t)v17, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v31 = v53;
    v32 = v55;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v14, v17, v55);
    v58 = 0;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
    v33 = v54;
    v34 = v57;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v50);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, v33);
  }
  if (EnumCaseMultiPayload != 1)
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
    v36 = v53;
    v37 = v43;
    v38 = v55;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v43, &v17[*(int *)(v35 + 48)], v55);
    v64 = 2;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
    v39 = v47;
    v33 = v54;
    v34 = v57;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v63 = 0;
    v40 = v49;
    v41 = v51;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v41)
    {
      v62 = 1;
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, v33);
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
  v22 = v53;
  v23 = v42;
  v24 = v55;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v42, &v17[*(int *)(v21 + 48)], v55);
  v61 = 1;
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
  v25 = v44;
  v26 = v54;
  v27 = v57;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v60 = 0;
  v28 = v46;
  v29 = v51;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v28);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v27, v26);
  }
  else
  {
    v59 = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v28);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v57, v26);
  }
}

uint64_t Duration.TimeFormatStyle.Pattern.Fields.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;

  v58 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  v64 = v4;
  MEMORY[0x1E0C80A78](v3);
  v69 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys>);
  v61 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  MEMORY[0x1E0C80A78](v6);
  v65 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys>);
  v59 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  MEMORY[0x1E0C80A78](v8);
  v67 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.Fields.CodingKeys>);
  v66 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15);
  v17 = (uint64_t *)((char *)&v54 - v16);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v54 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v54 - v22;
  v24 = a1[3];
  v70 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  v25 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
    goto LABEL_9;
  v71 = v20;
  v55 = v17;
  v56 = v14;
  v26 = v69;
  v57 = v23;
  v27 = (char *)v12;
  v29 = v67;
  v28 = v68;
  v30 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v30 + 16) != 1)
  {
    v33 = type metadata accessor for DecodingError();
    swift_allocError();
    v34 = v28;
    v36 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v36 = v27;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v36, *MEMORY[0x1E0DEC450], v33);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v11, v34);
LABEL_9:
    v48 = (uint64_t)v70;
    return __swift_destroy_boxed_opaque_existential_1(v48);
  }
  if (*(_BYTE *)(v30 + 32))
  {
    if (*(_BYTE *)(v30 + 32) == 1)
    {
      v75 = 1;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
      v31 = v65;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v74 = 0;
      v32 = v62;
      v44 = KeyedDecodingContainer.decode(_:forKey:)();
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      v46 = v28;
      v47 = v55;
      v71 = (char *)v55 + *(int *)(v45 + 48);
      *v55 = v44;
      type metadata accessor for FloatingPointRoundingRule();
      v73 = 1;
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v11, v46);
      v48 = (uint64_t)v70;
      swift_storeEnumTagMultiPayload();
      v49 = (uint64_t)v47;
    }
    else
    {
      v78 = 2;
      lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
      v40 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v42 = v28;
      v77 = 0;
      v43 = v63;
      v50 = KeyedDecodingContainer.decode(_:forKey:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      *v56 = v50;
      type metadata accessor for FloatingPointRoundingRule();
      v76 = 1;
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v51 = v66;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v42);
      v52 = v56;
      swift_storeEnumTagMultiPayload();
      v49 = (uint64_t)v52;
      v48 = (uint64_t)v70;
    }
  }
  else
  {
    v72 = 0;
    lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v69 = v27;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    v37 = (uint64_t)v71;
    v38 = v28;
    v39 = v60;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v29, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v11, v38);
    v48 = (uint64_t)v70;
    swift_storeEnumTagMultiPayload();
    v49 = v37;
  }
  v53 = (uint64_t)v57;
  outlined init with take of ICUNumberFormatter.Signature(v49, (uint64_t)v57, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  outlined init with take of ICUNumberFormatter.Signature(v53, v58, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  return __swift_destroy_boxed_opaque_existential_1(v48);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x65536574756E696DLL;
  if (*v0)
    return v1;
  else
    return 0x756E694D72756F68;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Duration.TimeFormatStyle.Pattern.Fields.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return 0x636553646E756F72;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x636553646E756F72 && a2 == 0xEC00000073646E6FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys();
  return CodingKey.debugDescription.getter();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0xD000000000000017;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Duration.TimeFormatStyle.Pattern.Fields()
{
  Hasher.init(_seed:)();
  Duration.TimeFormatStyle.Pattern.Fields.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Pattern.Fields()
{
  Hasher.init(_seed:)();
  Duration.TimeFormatStyle.Pattern.Fields.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Pattern.Fields@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Pattern.Fields.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Pattern.Fields(_QWORD *a1)
{
  return Duration.TimeFormatStyle.Pattern.Fields.encode(to:)(a1);
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinute.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *MEMORY[0x1E0DED4E8];
  v3 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  v5 = a1 + *(int *)(result + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, a2, v6);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  v8 = a3 + *(int *)(result + 20);
  *(_QWORD *)v8 = a1;
  *(_BYTE *)(v8 + 8) = 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)(a1, a2, a3, a4);
}

{
  char *v8;
  uint64_t v9;
  uint64_t result;
  char *v11;

  v8 = (char *)a4
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
              + 48);
  *a4 = a2;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a3, v9);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  v11 = (char *)a4 + *(int *)(result + 20);
  *(_QWORD *)v11 = a1;
  v11[8] = 0;
  return result;
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter(a1);
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond(padMinuteToLength:fractionalSecondsLength:roundFractionalSeconds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)(a1, a2, a3, a4);
}

void Duration.TimeFormatStyle.Pattern.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  uint64_t (*v9)(_QWORD);
  int EnumCaseMultiPayload;
  Swift::UInt v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (Swift::UInt *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v8, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v11 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v12 + 48), v2);
      v13 = 1;
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v14 + 48), v2);
      v13 = 2;
    }
    Hasher._combine(_:)(v13);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    v11 = 0;
  }
  Hasher._combine(_:)(v11);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v15 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = *(_QWORD *)v15;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
}

uint64_t static Duration.TimeFormatStyle.Pattern.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  char v8;

  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v5 = (_QWORD *)(a1 + v4);
  v6 = *(_BYTE *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  v8 = *(_BYTE *)(a2 + v4 + 8);
  if ((v6 & 1) != 0)
  {
    if ((v8 & 1) == 0)
      return 0;
  }
  else
  {
    if (*v5 != *v7)
      v8 = 1;
    if ((v8 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0x73646C656966;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Pattern.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Duration.TimeFormatStyle.Pattern.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.TimeFormatStyle.Pattern.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Pattern.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Duration.TimeFormatStyle.Pattern.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  int EnumCaseMultiPayload;
  Swift::UInt v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (Swift::UInt *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      v12 = 1;
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = *(_QWORD *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.Pattern.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v18 = a2;
  v3 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v3);
  v19 = (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Pattern.CodingKeys>);
  v5 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v10[*(int *)(v11 + 20)];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys();
  v13 = v21;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = 0;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature(v19, (uint64_t)v10, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  v22 = 1;
  v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  *(_QWORD *)v12 = v14;
  v12[8] = v16 & 1;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v10, v18, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v10, type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  uint64_t (*v12)(_QWORD);
  int EnumCaseMultiPayload;
  Swift::UInt v14;
  uint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  uint64_t v20;

  v4 = v2;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (Swift::UInt *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)v11, v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v14 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v15 + 48), v5);
      v16 = 1;
    }
    else
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v17 + 48), v5);
      v16 = 2;
    }
    Hasher._combine(_:)(v16);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    v14 = 0;
  }
  Hasher._combine(_:)(v14);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v4 + *(int *)(a2 + 20);
  if (*(_BYTE *)(v18 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *(_QWORD *)v18;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  int EnumCaseMultiPayload;
  Swift::UInt v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v20;

  v4 = v2;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (Swift::UInt *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)v11, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v13 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v14 + 48), v5);
      v15 = 1;
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v16 + 48), v5);
      v15 = 2;
    }
    Hasher._combine(_:)(v15);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    v13 = 0;
  }
  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v4 + *(int *)(a2 + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = *(_QWORD *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Pattern@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Pattern.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Pattern(_QWORD *a1)
{
  return Duration.TimeFormatStyle.Pattern.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  int v10;

  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)(a1 + v6);
    v8 = *(_BYTE *)(a1 + v6 + 8);
    v9 = (_QWORD *)(a2 + v6);
    v10 = *(unsigned __int8 *)(a2 + v6 + 8);
    if ((v8 & 1) != 0)
    {
      if (v10)
        return 1;
    }
    else
    {
      if (*v7 != *v9)
        LOBYTE(v10) = 1;
      if ((v10 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t Duration.TimeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24));
  return swift_unknownObjectRetain();
}

__n128 key path setter for Duration.TimeFormatStyle.locale : Duration.TimeFormatStyle(__n128 *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;
  __n128 v6;

  v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v6;
  *(__n128 *)(a2 + v4) = v6;
  return result;
}

__n128 Duration.TimeFormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 result;

  v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + v3) = *a1;
  return result;
}

uint64_t (*Duration.TimeFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + v3);
  swift_unknownObjectRetain();
  return Duration.TimeFormatStyle.locale.modify;
}

uint64_t Duration.TimeFormatStyle.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_unknownObjectRelease();
  }
  else
  {
    result = swift_unknownObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t Duration.TimeFormatStyle.pattern.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ICUNumberFormatter.Signature(v1, a1, type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

uint64_t key path setter for Duration.TimeFormatStyle.pattern : Duration.TimeFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v9;

  v4 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v6, v7);
  return outlined assign with take of Duration.TimeFormatStyle.Pattern((uint64_t)v6, a2);
}

uint64_t Duration.TimeFormatStyle.pattern.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Duration.TimeFormatStyle.Pattern(a1, v1);
}

void (*Duration.TimeFormatStyle.pattern.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) - 8) + 64);
  a1[1] = (uint64_t)malloc(v3);
  v4 = malloc(v3);
  a1[2] = (uint64_t)v4;
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v4, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  return Duration.TimeFormatStyle.pattern.modify;
}

void Duration.TimeFormatStyle.pattern.modify(uint64_t *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)a1[1];
  v3 = (void *)a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of ICUNumberFormatter.Signature(a1[2], (uint64_t)v2, type metadata accessor for Duration.TimeFormatStyle.Pattern);
    outlined assign with take of Duration.TimeFormatStyle.Pattern((uint64_t)v2, v4);
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v3, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  }
  else
  {
    outlined assign with take of Duration.TimeFormatStyle.Pattern(a1[2], v4);
  }
  free(v3);
  free(v2);
}

uint64_t Duration.TimeFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ICUNumberFormatter.Signature(v1, a1, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t Duration.TimeFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  int EnumCaseMultiPayload;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  long double v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  _BOOL8 v144;
  BOOL v145;
  uint64_t v146;
  char v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  double v156;
  double v157;
  char v158;
  unint64_t v159;
  double v160;
  char v161;
  unint64_t v162;
  char v163;
  char v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  id v173;
  Swift::String v174;
  Swift::String v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  void (*v186)(char *, uint64_t);
  unint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  id v195;
  char v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  Swift::String v201;
  uint64_t v202;

  v5 = v3;
  v189 = a2;
  v187 = a3;
  v202 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v191 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v185 = (char *)&v178 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v190 = (char *)&v178 - v10;
  v11 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (uint64_t *)((char *)&v178 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v178 - v18;
  v20 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v178 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v178 - v24;
  outlined init with copy of ICUNumberFormatter.Signature(v3, (uint64_t)&v178 - v24, v26);
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v25, (uint64_t)v19, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v28 = &v19[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                        + 48)];
      v200 = 1;
      v29 = 0x3A276D6D273A2768;
      v30 = 0xEB00000000737327;
    }
    else
    {
      v28 = &v19[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                        + 48)];
      v200 = 2;
      v29 = 0x7373273A276DLL;
      v30 = 0xE600000000000000;
    }
    v198 = v29;
    v199 = v30;
    v31 = *(void (**)(char *, uint64_t))(v191 + 8);
    v31(v28, v7);
  }
  else
  {
    v200 = 0;
    v198 = 0x6D6D273A2768;
    v199 = 0xE600000000000000;
    v31 = *(void (**)(char *, uint64_t))(v191 + 8);
    v31(v19, v7);
  }
  v201._countAndFlagsBits = 0;
  v201._object = 0;
  v32 = outlined init with copy of ICUNumberFormatter.Signature(v3, (uint64_t)v13, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  MEMORY[0x1E0C80A78](v32);
  closure #1 in Duration.TimeFormatStyle.Attributed.format(_:)((uint64_t)(&v178 - 32), 128, (uint64_t)v13, (uint64_t)&v200, 128, &v201, &v198);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v13, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  outlined init with copy of ICUNumberFormatter.Signature(v3, (uint64_t)v22, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v22, (uint64_t)v16, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  v33 = swift_getEnumCaseMultiPayload();
  if (v33)
  {
    v34 = a1;
    if (v33 == 1)
      v35 = &outlined read-only object #1 of Duration.TimeFormatStyle.Attributed.format(_:);
    else
      v35 = &outlined read-only object #2 of Duration.TimeFormatStyle.Attributed.format(_:);
    v36 = *v16;
    v16 = (uint64_t *)((char *)v16
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                             + 48));
  }
  else
  {
    v36 = 0;
    v35 = &outlined read-only object #0 of Duration.TimeFormatStyle.Attributed.format(_:);
    v34 = a1;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(v191 + 32))(v190, v16, v7);
  v37 = v35[2];
  v188 = v7;
  v192 = v37;
  v186 = v31;
  if (v37)
  {
    v38 = *((char *)v35 + v37 + 31);
    if (v38 <= 4)
    {
      static Duration.interval(fractionalSecondsLength:)(v36);
      v193 = qword_1820FC5D0[v38];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v41 = static Duration.* infix<A>(_:_:)();
    }
    else
    {
      if ((v38 - 5) >= 3u)
      {
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        v172 = (void *)swift_allocError();
        swift_willThrow();
        v195 = v172;
        swift_bridgeObjectRetain_n();
        v173 = v172;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_154;
        v193 = 0;
        v194 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        v174._object = (void *)0x80000001823049D0;
        v174._countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v174);
        _print_unlocked<A, B>(_:_:)();
        v175._countAndFlagsBits = 39;
        v175._object = (void *)0xE100000000000000;
        String.append(_:)(v175);
        v177 = 0;
        v176 = 783;
LABEL_152:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_153:
        swift_bridgeObjectRetain_n();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_154:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        swift_unexpectedError();
        __break(1u);
        swift_willThrow();
        __break(1u);
        JUMPOUT(0x181C2B5DCLL);
      }
      v39 = 3 * (v38 - 5) + 3;
      v40 = v39 ^ 0x7FFFFFFFFFFFFFFFLL;
      if ((v39 ^ 0x7FFFFFFFFFFFFFFFLL) >= v36)
        v40 = v36;
      if (__OFADD__(v39, v40))
        goto LABEL_138;
      v41 = static Duration.interval(fractionalSecondsLength:)(v39 + v40);
    }
    v45 = v41;
    v46 = v42;
    static Duration.zero.getter();
    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
LABEL_73:
      v44 = (_QWORD *)Duration.factor(intoUnits:)((uint64_t)v35);
      v43 = v44[2];
      v135 = Duration.components.getter();
      Duration.components.getter();
      v137 = v136;
      v138 = 3.0;
      v4 = 604800.0;
      switch((int)v38)
      {
        case 0:
          goto LABEL_81;
        case 1:
          v4 = 86400.0;
          goto LABEL_81;
        case 2:
          v4 = 3600.0;
          goto LABEL_81;
        case 3:
          v4 = 60.0;
          goto LABEL_81;
        case 4:
          v4 = 1.0;
          goto LABEL_81;
        case 5:
          goto LABEL_80;
        case 6:
          v138 = 6.0;
          goto LABEL_80;
        case 7:
          v138 = 9.0;
LABEL_80:
          v4 = pow(0.1, v138);
LABEL_81:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_135;
          if (v43)
            goto LABEL_83;
          goto LABEL_136;
        default:
          goto LABEL_149;
      }
    }
    static Duration.zero.getter();
    v47 = static Duration.< infix(_:_:)();
    v182 = v5;
    v181 = v38;
    if ((v47 & 1) != 0)
    {
      v48 = static Duration.zero.getter();
      v45 = MEMORY[0x186DA6158](v48);
      v46 = v49;
    }
    static Duration.zero.getter();
    v50 = v34;
    v51 = v189;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v52 = static Duration.zero.getter();
      v50 = MEMORY[0x186DA6158](v52);
      v51 = v53;
    }
    v54 = Duration.components.getter();
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v55 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v55);
    }
    v184 = v45;
    v56 = Duration.components.getter();
    v58 = v57;
    if (v56)
    {
      if (!v57)
      {
        v65 = v56;
        if (v54 == 0x8000000000000000 && v56 == -1)
          goto LABEL_146;
        v66 = v54 / v56;
        v59 = Duration.init(secondsComponent:attosecondsComponent:)();
        v68 = v189;
        if ((unsigned __int128)(v65 * (__int128)v66) >> 64 != (v65 * v66) >> 63)
          goto LABEL_139;
        v61 = v67;
        v69 = Duration.init(secondsComponent:attosecondsComponent:)();
        v71 = v70;
        goto LABEL_46;
      }
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v59 = static Duration.zero.getter();
        v61 = v60;
        v62 = static Duration.zero.getter();
      }
      else
      {
        static Duration./ infix(_:_:)();
        if ((~*(_QWORD *)&v72 & 0x7FF0000000000000) == 0)
          goto LABEL_140;
        if (v72 <= -1.0)
          goto LABEL_141;
        if (v72 >= 1.84467441e19)
          goto LABEL_142;
        v73 = (unint64_t)v72;
        v193 = (unint64_t)v72;
        lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        v74 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x186DA6158](v50, v51, v74, v75);
        static Duration./ infix(_:_:)();
        if ((~*(_QWORD *)&v76 & 0x7FF0000000000000) == 0)
          goto LABEL_143;
        if (v76 <= -9.22337204e18)
          goto LABEL_144;
        if (v76 >= 9.22337204e18)
          goto LABEL_145;
        v77 = (uint64_t)v76;
        v183 = (uint64_t)v76;
        Duration.init(secondsComponent:attosecondsComponent:)();
        v193 = v73;
        v78 = static Duration.* infix<A>(_:_:)();
        v180 = v73;
        v79 = v78;
        v179 = v80;
        Duration.init(secondsComponent:attosecondsComponent:)();
        v193 = v77;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v81 = static Duration.* infix<A>(_:_:)();
        v83 = MEMORY[0x186DA614C](v79, v179, v81, v82);
        v85 = v84;
        v193 = v180;
        v86 = static Duration.* infix<A>(_:_:)();
        v88 = v87;
        v193 = v183;
        v59 = v83;
        v89 = static Duration.* infix<A>(_:_:)();
        v90 = v86;
        v61 = v85;
        v62 = MEMORY[0x186DA614C](v90, v88, v89, v91);
      }
    }
    else
    {
      v193 = v57;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v59 = static Duration./ infix<A>(_:_:)();
      v61 = v64;
      v193 = v58;
      v62 = static Duration.* infix<A>(_:_:)();
    }
    v69 = v62;
    v71 = v63;
    v68 = v189;
LABEL_46:
    static Duration.zero.getter();
    v92 = static Duration.< infix(_:_:)() & 1;
    static Duration.zero.getter();
    if (v92 == (static Duration.< infix(_:_:)() & 1))
    {
      v183 = v61;
    }
    else
    {
      v93 = static Duration.zero.getter();
      v69 = MEMORY[0x186DA6158](v93);
      v71 = v94;
      v95 = static Duration.zero.getter();
      v59 = MEMORY[0x186DA6158](v95);
      v183 = v96;
    }
    static Duration.zero.getter();
    v97 = v69;
    v98 = v71;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v99 = static Duration.zero.getter();
      v97 = MEMORY[0x186DA6158](v99);
      v98 = v100;
    }
    static Duration.zero.getter();
    v101 = static Duration.< infix(_:_:)();
    v102 = v34;
    v103 = v68;
    if ((v101 & 1) != 0)
    {
      v104 = static Duration.zero.getter();
      v102 = MEMORY[0x186DA6158](v104);
      v103 = v105;
    }
    MEMORY[0x186DA6158](v97, v98, v102, v103);
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v106 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v106);
    }
    static Duration.zero.getter();
    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
      v193 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v107 = v183;
      static Duration./ infix<A>(_:_:)();
      v193 = 2;
      v108 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186DA6158](v59, v107, v108, v109);
      static Duration.zero.getter();
LABEL_72:
      static Duration.== infix(_:_:)();
      v37 = v192;
      LODWORD(v38) = v181;
      goto LABEL_73;
    }
    static Duration.zero.getter();
    v110 = static Duration.< infix(_:_:)();
    v180 = v59;
    if ((v110 & 1) != 0)
    {
      v111 = static Duration.zero.getter();
      v112 = MEMORY[0x186DA6158](v111);
      v46 = v113;
    }
    else
    {
      v112 = v184;
    }
    v114 = MEMORY[0x186DA614C](v69, v71, v112, v46);
    v116 = v115;
    static Duration.zero.getter();
    v117 = static Duration.< infix(_:_:)();
    v189 = v114;
    v118 = v116;
    if ((v117 & 1) != 0)
    {
      v119 = static Duration.zero.getter();
      v114 = MEMORY[0x186DA6158](v119);
      v118 = v120;
    }
    static Duration.zero.getter();
    v121 = static Duration.< infix(_:_:)();
    v184 = v116;
    if ((v121 & 1) != 0)
    {
      v122 = static Duration.zero.getter();
      v34 = MEMORY[0x186DA6158](v122);
      v68 = v123;
    }
    MEMORY[0x186DA6158](v114, v118, v34, v68);
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v124 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v124);
    }
    v125 = v191;
    v126 = v185;
    v127 = v188;
    (*(void (**)(char *, char *, uint64_t))(v191 + 16))(v185, v190, v188);
    v128 = (*(uint64_t (**)(char *, uint64_t))(v125 + 88))(v126, v127);
    if (v128 == *MEMORY[0x1E0DED4F0])
    {
      v129 = static Duration.< infix(_:_:)();
      goto LABEL_68;
    }
    if (v128 == *MEMORY[0x1E0DED4E8])
    {
      v130 = v71;
      if ((static Duration.< infix(_:_:)() & 1) != 0)
        goto LABEL_71;
      v165 = static Duration.== infix(_:_:)();
      v130 = v184;
      if ((v165 & 1) == 0)
        goto LABEL_71;
      v193 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v166 = v180;
      v167 = v183;
      static Duration./ infix<A>(_:_:)();
      v193 = 2;
      v168 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186DA6158](v166, v167, v168, v169);
      static Duration.zero.getter();
      v129 = static Duration.== infix(_:_:)();
LABEL_68:
      if ((v129 & 1) != 0)
        v130 = v71;
      else
        v130 = v184;
LABEL_71:
      v193 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v131 = v180;
      v132 = v183;
      static Duration./ infix<A>(_:_:)();
      v193 = 2;
      v133 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186DA6158](v131, v132, v133, v134);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      v189 = v130;
      goto LABEL_72;
    }
    if (v128 == *MEMORY[0x1E0DED500])
    {
      v170 = v184;
      if ((static Duration.< infix(_:_:)() & 1) != 0)
        v130 = v71;
      else
        v130 = v170;
      goto LABEL_71;
    }
    if (v128 == *MEMORY[0x1E0DED508])
    {
      v171 = v184;
      if ((static Duration.< infix(_:_:)() & 1) != 0)
        v130 = v171;
      else
        v130 = v71;
      goto LABEL_71;
    }
    v130 = v71;
    if (v128 == *MEMORY[0x1E0DED4D8])
      goto LABEL_71;
    v130 = v184;
    if (v128 == *MEMORY[0x1E0DED4E0])
      goto LABEL_71;
    v177 = 0;
    v176 = 55;
    goto LABEL_152;
  }
  v43 = 0;
  v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v135 = v44[2] >= v43 ? v43 : v44[2];
    if (v135)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Duration.UnitsFormatStyle.Unit, Double>);
      v137 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v137 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v197 = v137;
    swift_bridgeObjectRetain_n();
    if (!v37)
      break;
    v139 = 0;
    while (v43 != v139)
    {
      v140 = v44[2];
      if (v139 == v140)
        goto LABEL_103;
      if (v139 >= v140)
        goto LABEL_132;
      v135 = *((unsigned __int8 *)v35 + v139 + 32);
      if ((_DWORD)v135 == 8)
        goto LABEL_103;
      v37 = v44[v139 + 4];
      v196 = *((_BYTE *)v35 + v139 + 32);
      v141 = specialized __RawDictionaryStorage.find<A>(_:)(v135);
      v143 = v137[2];
      v144 = (v142 & 1) == 0;
      v145 = __OFADD__(v143, v144);
      v146 = v143 + v144;
      if (v145)
        goto LABEL_133;
      v147 = v142;
      if (v137[3] < v146)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v146, 1);
        v137 = v197;
        v141 = specialized __RawDictionaryStorage.find<A>(_:)(v135);
        if ((v147 & 1) != (v148 & 1))
          goto LABEL_153;
      }
      if ((v147 & 1) != 0)
        goto LABEL_150;
      v137[(v141 >> 6) + 8] |= 1 << v141;
      *(_BYTE *)(v137[6] + v141) = v135;
      *(_QWORD *)(v137[7] + 8 * v141) = v37;
      v149 = v137[2];
      v145 = __OFADD__(v149, 1);
      v150 = v149 + 1;
      if (v145)
        goto LABEL_134;
      ++v139;
      v137[2] = v150;
      if (v192 == v139)
        goto LABEL_103;
    }
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    if (!v43)
    {
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
    }
LABEL_83:
    if (v43 > v44[2])
      goto LABEL_137;
    *(double *)&v44[v43 + 3] = ((double)(uint64_t)v137 * 1.0e-18 + (double)v135) / v4 + *(double *)&v44[v43 + 3];
    v43 = v35[2];
  }
LABEL_103:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  object = v201._object;
  if (!v201._object)
    goto LABEL_147;
  countAndFlagsBits = v201._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v153 = specialized static Duration.TimeFormatStyle.Attributed.componentsFromPatternString(_:patternSet:)(countAndFlagsBits, (unint64_t)object, outlined read-only object #3 of Duration.TimeFormatStyle.Attributed.format(_:));
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  v154 = v188;
  if (!v137[2])
  {
    v156 = 0.0;
    v157 = 0.0;
LABEL_114:
    v160 = 0.0;
    goto LABEL_115;
  }
  v155 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
  v156 = 0.0;
  v157 = 0.0;
  if ((v158 & 1) != 0)
    v157 = *(double *)(v137[7] + 8 * v155);
  if (!v137[2])
    goto LABEL_114;
  v159 = specialized __RawDictionaryStorage.find<A>(_:)(3u);
  v160 = 0.0;
  if ((v161 & 1) != 0)
    v156 = *(double *)(v137[7] + 8 * v159);
  if (v137[2])
  {
    v162 = specialized __RawDictionaryStorage.find<A>(_:)(4u);
    if ((v163 & 1) != 0)
      v160 = *(double *)(v137[7] + 8 * v162);
  }
LABEL_115:
  swift_release();
  Duration.TimeFormatStyle.Attributed.formatWithPatternComponents(_:hour:minute:second:)((uint64_t)v153, v187, v157, v156, v160);
  swift_bridgeObjectRelease();
  v186(v190, v154);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

__n128 Duration.TimeFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for Duration.TimeFormatStyle);
  v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

void Duration.TimeFormatStyle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  Swift::UInt v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  Swift::UInt8 v22;
  void (*v23)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  _BYTE v57[144];
  _BYTE v58[8];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  _QWORD v76[18];
  _BYTE v77[144];
  _BYTE v78[152];

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v57[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (Swift::UInt *)&v57[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v13 = *v10;
    if (EnumCaseMultiPayload == 1)
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v14 + 48), v4);
      v15 = 1;
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v16 + 48), v4);
      v15 = 2;
    }
    Hasher._combine(_:)(v15);
  }
  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v5 + 32))(v7, v10, v4);
    v13 = 0;
  }
  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v17 = v2 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = *(_QWORD *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  v19 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(v19 + 20)));
  v20 = *(_QWORD *)(v2 + *(int *)(v19 + 24) + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 48))(ObjectType, v20) & 1) != 0)
  {
    v22 = 1;
LABEL_14:
    Hasher._combine(_:)(v22);
    return;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v20 + 64))(ObjectType, v20);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v23 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 464);
  swift_unknownObjectRetain();
  v23(v76, ObjectType, v20);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    v22 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v58, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v58[0] == 2)
  {
    v24 = 0;
  }
  else
  {
    v24 = v58[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v24);
  v25 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    v30 = v58;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v25 + 16));
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v57, &demangling cache variable for type metadata for LocalePreferences?);
    v30 = v57;
LABEL_29:
    outlined retain of LocalePreferences(v30);
    if (!v60)
      goto LABEL_23;
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v27 = v25 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v27 += 16;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease();
  if (!v60)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v61)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    v28 = v62;
    if (!v62)
      goto LABEL_25;
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v28);
    swift_bridgeObjectRelease();
    v29 = v63;
    if (!v63)
      goto LABEL_26;
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v28 = v62;
  if (v62)
    goto LABEL_32;
LABEL_25:
  Hasher._combine(_:)(0);
  v29 = v63;
  if (!v63)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v29);
  swift_bridgeObjectRelease();
LABEL_34:
  v32 = v64;
  v31 = v65;
  v34 = v66;
  v33 = v67;
  v35 = v68;
  if (v64)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v36 = v31;
    v37 = v34;
    v38 = v33;
    v39 = v35;
    v40 = v32;
    _CFObject.hash(into:)();
    if (v31)
      goto LABEL_36;
  }
  else
  {
    Hasher._combine(_:)(0);
    v45 = v35;
    v46 = v31;
    v47 = v34;
    v48 = v33;
    if (v31)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v41 = v31;
      _CFObject.hash(into:)();

      if (v34)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v42 = v34;
    _CFObject.hash(into:)();

    if (v33)
      goto LABEL_38;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v35)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v33)
    goto LABEL_43;
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  v44 = 0;
LABEL_45:

  v49 = v69;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v49);
    swift_bridgeObjectRelease();
    v50 = v70;
    if (v70)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    if (v71)
      goto LABEL_48;
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  v50 = v70;
  if (!v70)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v50);
  swift_bridgeObjectRelease();
  if (!v71)
    goto LABEL_51;
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v51 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v74 == 2)
  {
    v53 = 0;
  }
  else
  {
    v53 = v74 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v53);
  if (v75 == 2)
  {
    v54 = 0;
  }
  else
  {
    v55 = v75 & 1;
    Hasher._combine(_:)(1u);
    v54 = v55;
  }
  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.CodingKeys()
{
  return 0x756269727474615FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x756269727474615FLL && a2 == 0xEB00000000646574)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.TimeFormatStyle.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Duration.TimeFormatStyle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  int EnumCaseMultiPayload;
  Swift::UInt v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  Swift::UInt8 v19;
  void (*v20)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  _BYTE v55[144];
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  _QWORD v74[18];
  _BYTE v75[144];
  _BYTE v76[144];
  _BYTE v77[72];

  v1 = v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (Swift::UInt *)&v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      v12 = 1;
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = *(_QWORD *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  v17 = *(_QWORD *)(v1 + *(int *)(v16 + 24) + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17) & 1) != 0)
  {
    v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v20 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v74, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    v19 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    v21 = 0;
  }
  else
  {
    v21 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  v22 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    v27 = v56;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v22 + 16));
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
    v27 = v55;
LABEL_29:
    outlined retain of LocalePreferences(v27);
    if (!v58)
      goto LABEL_23;
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    v25 = v60;
    if (!v60)
      goto LABEL_25;
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v25);
    swift_bridgeObjectRelease();
    v26 = v61;
    if (!v61)
      goto LABEL_26;
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v25 = v60;
  if (v60)
    goto LABEL_32;
LABEL_25:
  Hasher._combine(_:)(0);
  v26 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v26);
  swift_bridgeObjectRelease();
LABEL_34:
  v29 = v62;
  v28 = v63;
  v31 = v64;
  v30 = v65;
  v32 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v28;
    v34 = v31;
    v35 = v30;
    v36 = v32;
    v37 = v29;
    _CFObject.hash(into:)();
    if (v28)
      goto LABEL_36;
  }
  else
  {
    Hasher._combine(_:)(0);
    v42 = v32;
    v43 = v28;
    v44 = v31;
    v45 = v30;
    if (v28)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v38 = v28;
      _CFObject.hash(into:)();

      if (v31)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v31)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v39 = v31;
    _CFObject.hash(into:)();

    if (v30)
      goto LABEL_38;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v32)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v30)
    goto LABEL_43;
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v40 = v30;
  _CFObject.hash(into:)();

  if (v32)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v41 = v32;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  v41 = 0;
LABEL_45:

  v46 = v67;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v46);
    swift_bridgeObjectRelease();
    v47 = v68;
    if (v68)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    if (v69)
      goto LABEL_48;
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  v47 = v68;
  if (!v68)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v47);
  swift_bridgeObjectRelease();
  if (!v69)
    goto LABEL_51;
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v72 == 2)
  {
    v50 = 0;
  }
  else
  {
    v50 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v50);
  if (v73 == 2)
  {
    v51 = 0;
  }
  else
  {
    v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    v51 = v52;
  }
  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  MEMORY[0x1E0C80A78](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.TimeFormatStyle(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature(v15, (uint64_t)v11, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v11, v13, type metadata accessor for Duration.TimeFormatStyle);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.TimeFormatStyle@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  unint64_t v4;

  result = Duration.TimeFormatStyle.format(_:)(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.TimeFormatStyle@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for Duration.TimeFormatStyle);
  v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  int EnumCaseMultiPayload;
  Swift::UInt v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  Swift::UInt8 v19;
  void (*v20)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  _QWORD v72[18];
  _BYTE v73[144];
  _BYTE v74[144];
  _BYTE v75[72];

  v1 = v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (Swift::UInt *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      v12 = 1;
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = *(_QWORD *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  v17 = *(_QWORD *)(v1 + *(int *)(v16 + 24) + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17) & 1) != 0)
  {
    v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v20 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v72, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    v19 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)&v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54 == 2)
  {
    v21 = 0;
  }
  else
  {
    v21 = v54 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  v22 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v54);
    if (!v56)
      goto LABEL_23;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v22 + 16));
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
    goto LABEL_28;
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v57)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    v25 = v58;
    if (!v58)
      goto LABEL_25;
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v25);
    swift_bridgeObjectRelease();
    v26 = v59;
    if (!v59)
      goto LABEL_26;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v25 = v58;
  if (v58)
    goto LABEL_31;
LABEL_25:
  Hasher._combine(_:)(0);
  v26 = v59;
  if (!v59)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v26);
  swift_bridgeObjectRelease();
LABEL_33:
  v28 = v60;
  v27 = v61;
  v30 = v62;
  v29 = v63;
  v31 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v27;
    v33 = v30;
    v34 = v29;
    v35 = v31;
    v36 = v28;
    _CFObject.hash(into:)();
    if (v27)
      goto LABEL_35;
  }
  else
  {
    Hasher._combine(_:)(0);
    v41 = v31;
    v42 = v27;
    v43 = v30;
    v44 = v29;
    if (v27)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v37 = v27;
      _CFObject.hash(into:)();

      if (v30)
        goto LABEL_36;
      goto LABEL_41;
    }
  }
  Hasher._combine(_:)(0);
  if (v30)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v30;
    _CFObject.hash(into:)();

    if (v29)
      goto LABEL_37;
LABEL_42:
    Hasher._combine(_:)(0);
    if (v31)
      goto LABEL_38;
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  if (!v29)
    goto LABEL_42;
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v39 = v29;
  _CFObject.hash(into:)();

  if (v31)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v40 = v31;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }
LABEL_43:
  Hasher._combine(_:)(0);
  v40 = 0;
LABEL_44:

  v45 = v65;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v45);
    swift_bridgeObjectRelease();
    v46 = v66;
    if (v66)
      goto LABEL_46;
LABEL_49:
    Hasher._combine(_:)(0);
    if (v67)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  v46 = v66;
  if (!v66)
    goto LABEL_49;
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v46);
  swift_bridgeObjectRelease();
  if (!v67)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v47 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v70 == 2)
  {
    v49 = 0;
  }
  else
  {
    v49 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v49);
  if (v71 == 2)
  {
    v50 = 0;
  }
  else
  {
    v51 = v71 & 1;
    Hasher._combine(_:)(1u);
    v50 = v51;
  }
  Hasher._combine(_:)(v50);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t static FormatStyle<>.time(pattern:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;

  outlined init with copy of ICUNumberFormatter.Signature(a1, a2, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  if (one-time initialization token for cache != -1)
    swift_once();
  v3 = static LocaleCache.cache + 16;
  v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, &v9);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  v5 = v9;
  v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = 0;
  v8 = (uint64_t *)(a2 + *(int *)(result + 24));
  *v8 = v5;
  v8[1] = v6;
  return result;
}

__n128 Duration.TimeFormatStyle.Attributed.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  outlined init with copy of ICUNumberFormatter.Signature(v2, a2, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  v5 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *(__n128 *)(a2 + v5) = v7;
  return result;
}

uint64_t closure #1 in Duration.TimeFormatStyle.Attributed.format(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::String *a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t ObjectType;
  void (*v13)(uint64_t, uint64_t);
  int TimePattern;
  void *v15;
  uint64_t v16;
  Swift::String v17;

  v11 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24) + 8);
  ObjectType = swift_getObjectType();
  v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  v13(ObjectType, v11);
  swift_unknownObjectRelease();
  if (!a1)
LABEL_11:
    __break(1u);
  if (a5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a5 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  TimePattern = uatmufmt_getTimePattern();
  swift_release();
  specialized String.init(_utf16:)(a1, TimePattern);
  if (v16)
  {
    v17 = String.lowercased()();
    swift_bridgeObjectRelease();
    *a6 = v17;
  }
  else
  {
    v15 = (void *)a7[1];
    a6->_countAndFlagsBits = *a7;
    a6->_object = v15;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t Duration.TimeFormatStyle.Attributed.formatWithPatternComponents(_:hour:minute:second:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t result;
  __int128 v49;
  _BOOL4 v50;
  uint64_t v51;
  _BYTE *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  _OWORD *v71;
  BOOL v72;
  uint64_t v73;
  int EnumCaseMultiPayload;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL4 v145;
  uint64_t v146;
  unint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  _QWORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163[5];
  __int128 v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172[3];
  __int128 v173[3];
  _QWORD v174[8];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184[3];
  _BYTE v185[56];

  v142 = a1;
  v137 = a2;
  v141 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v141);
  v136 = (char **)((char *)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v143 = (uint64_t)&v130 - v11;
  v146 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1E0C80A78](v146);
  v132 = (uint64_t)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v138 = (uint64_t)&v130 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v15);
  v150 = (uint64_t)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v152 = (uint64_t)&v130 - v18;
  MEMORY[0x1E0C80A78](v19);
  v131 = (char *)&v130 - v20;
  MEMORY[0x1E0C80A78](v21);
  v130 = (char *)&v130 - v22;
  MEMORY[0x1E0C80A78](v23);
  v135 = (uint64_t)&v130 - v24;
  MEMORY[0x1E0C80A78](v25);
  v134 = (uint64_t)&v130 - v26;
  MEMORY[0x1E0C80A78](v27);
  v133 = (uint64_t)&v130 - v28;
  MEMORY[0x1E0C80A78](v29);
  v144 = (uint64_t)&v130 - v30;
  MEMORY[0x1E0C80A78](v31);
  v33 = (_OWORD *)((char *)&v130 - v32);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v130 - v35;
  v37 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  v38 = *(int *)(v37 + 24);
  v39 = (char *)v33 + *(int *)(v15 + 36);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_QWORD *)v39 + 2) = 0;
  *((_QWORD *)v39 + 3) = 0;
  *((_QWORD *)v39 + 4) = 0;
  *((_QWORD *)v39 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v39 + 7) = 0;
  *((_QWORD *)v39 + 8) = 0;
  *((_QWORD *)v39 + 6) = 0;
  *((_DWORD *)v39 + 18) = 131584;
  *((_WORD *)v39 + 38) = 512;
  v40 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v41 = &v39[v40[9]];
  v42 = type metadata accessor for FloatingPointRoundingRule();
  v139 = *(_QWORD *)(v42 - 8);
  v140 = v42;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v139 + 56);
  v162 = *(_OWORD *)(v5 + v38);
  v43(v41, 1, 1);
  v44 = &v39[v40[10]];
  *(_QWORD *)v44 = 0;
  v44[8] = -1;
  v39[v40[11]] = 3;
  *v33 = v162;
  v45 = *(int *)(v37 + 20);
  v151 = v5;
  LOBYTE(v37) = *(_BYTE *)(v5 + v45);
  outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v33, (uint64_t)v36);
  v154 = v15;
  v155 = v36;
  v36[*(int *)(v15 + 36) + 73] = v37;
  swift_unknownObjectRetain();
  outlined destroy of Any?((uint64_t)v33, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  BigString.init()();
  v163[0] = 0;
  MEMORY[0x186DA9E90](v163, 8);
  v46 = v163[0];
  v153 = type metadata accessor for AttributedString.Guts();
  v47 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v49 = v170;
  *(_OWORD *)(v47 + 16) = v169;
  *(_OWORD *)(v47 + 32) = v49;
  *(_OWORD *)(v47 + 48) = v171;
  *(_QWORD *)(v47 + 64) = 0;
  *(_QWORD *)(v47 + 72) = 0;
  *(_QWORD *)(v47 + 80) = 0;
  *(_QWORD *)(v47 + 88) = v46;
  v50 = a3 < 0.0;
  if (a4 < 0.0)
    v50 = 1;
  if (a5 < 0.0)
    v50 = 1;
  v145 = v50;
  v51 = *(_QWORD *)(v142 + 16);
  if (!v51)
    goto LABEL_98;
  v149 = v152 + 74;
  v52 = (_BYTE *)(swift_bridgeObjectRetain() + 40);
  v148 = xmmword_18205FD60;
  v147 = 0x8000000182309B80;
  while (1)
  {
    v57 = (_QWORD *)*((_QWORD *)v52 - 1);
    if (*v52 != 1)
    {
      *(_QWORD *)&v162 = v52;
      v163[0] = (uint64_t)v57;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
      lazy protocol witness table accessor for type [Character] and conformance [A]();
      String.init<A>(_:)();
      goto LABEL_29;
    }
    v58 = v57[2];
    if (!v58)
      goto LABEL_11;
    v59 = v57[4];
    v60 = v57[5];
    v61 = v59 == 104 && v60 == 0xE100000000000000;
    *(_QWORD *)&v162 = v52;
    if (!v61 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v72 = v59 == 109 && v60 == 0xE100000000000000;
      if (v72 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v73 = v138;
        outlined init with copy of ICUNumberFormatter.Signature(v151, v138, type metadata accessor for Duration.TimeFormatStyle.Pattern);
        outlined init with take of ICUNumberFormatter.Signature(v73, v143, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload != 1)
          {
            v99 = v151 + *(int *)(v146 + 20);
            if ((*(_BYTE *)(v99 + 8) & 1) == 0)
            {
              v100 = *(_QWORD *)v99;
              if (v58 <= v100)
                v58 = v100;
            }
            if (v58 >= 999)
              v101 = 999;
            else
              v101 = v58;
            v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
            v103 = v143 + *(int *)(v102 + 48);
            v104 = (uint64_t)v155;
            v105 = v135;
            outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v135);
            v106 = v105 + *(int *)(v154 + 36);
            *(_QWORD *)(v106 + 16) = v101;
            *(_QWORD *)(v106 + 24) = 0;
            *(_QWORD *)(v106 + 32) = 0;
            *(_QWORD *)(v106 + 40) = 1;
            *(_QWORD *)(v106 + 56) = 0;
            *(_QWORD *)(v106 + 64) = 0;
            *(_QWORD *)(v106 + 48) = 0;
            *(_BYTE *)(v106 + 72) = 0x80;
            outlined destroy of Any?(v104, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            outlined init with take of LocalePreferences?(v105, v104, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
            (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v103, v140);
            v68 = 3;
            if (v145)
            {
              v69 = v51;
              goto LABEL_27;
            }
            v69 = v51;
LABEL_65:
            v70 = 65793;
            goto LABEL_89;
          }
          v69 = v51;
          if ((unint64_t)v58 >= 0x3E7)
            v75 = 999;
          else
            v75 = v58;
          v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
          v77 = v143 + *(int *)(v76 + 48);
          v78 = (uint64_t)v155;
          v79 = v134;
          outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v134);
          v80 = v79 + *(int *)(v154 + 36);
          *(_QWORD *)(v80 + 16) = v75;
          *(_QWORD *)(v80 + 24) = 0;
          *(_QWORD *)(v80 + 32) = 0;
          *(_QWORD *)(v80 + 40) = 1;
          *(_QWORD *)(v80 + 56) = 0;
          *(_QWORD *)(v80 + 64) = 0;
          *(_QWORD *)(v80 + 48) = 0;
          *(_BYTE *)(v80 + 72) = 0x80;
          outlined destroy of Any?(v78, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?(v79, v78, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v77, v140);
        }
        else
        {
          v69 = v51;
          if ((unint64_t)v58 >= 0x3E7)
            v95 = 999;
          else
            v95 = v58;
          v96 = (uint64_t)v155;
          v97 = v133;
          outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v133);
          v98 = v97 + *(int *)(v154 + 36);
          *(_QWORD *)(v98 + 16) = v95;
          *(_QWORD *)(v98 + 24) = 0;
          *(_QWORD *)(v98 + 32) = 0;
          *(_QWORD *)(v98 + 40) = 1;
          *(_QWORD *)(v98 + 56) = 0;
          *(_QWORD *)(v98 + 64) = 0;
          *(_QWORD *)(v98 + 48) = 0;
          *(_BYTE *)(v98 + 72) = 0x80;
          outlined destroy of Any?(v96, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?(v97, v96, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v143, v140);
        }
        v68 = 3;
        goto LABEL_65;
      }
      v81 = v59 == 115 && v60 == 0xE100000000000000;
      if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v82 = v132;
        outlined init with copy of ICUNumberFormatter.Signature(v151, v132, type metadata accessor for Duration.TimeFormatStyle.Pattern);
        outlined init with take of ICUNumberFormatter.Signature(v82, (uint64_t)v136, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
        v83 = swift_getEnumCaseMultiPayload();
        v69 = v51;
        if (v83)
        {
          if (v83 == 1)
          {
            v84 = v136;
            v85 = *v136;
            if ((unint64_t)v58 >= 0x3E7)
              v86 = 999;
            else
              v86 = v58;
            if (v85 >= 998)
              v87 = 998;
            else
              v87 = *v136;
            v88 = v87 & ~(v87 >> 63);
            v89 = v85 & ~(v85 >> 63);
            if (v89 >= 998)
              v90 = 998;
            else
              v90 = v89;
            v91 = (char *)v84
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                         + 48);
            v92 = (uint64_t)v155;
            v93 = (uint64_t)v155;
            v94 = (uint64_t)v130;
          }
          else
          {
            v107 = v136;
            v108 = *v136;
            if ((unint64_t)v58 >= 0x3E7)
              v86 = 999;
            else
              v86 = v58;
            if (v108 >= 998)
              v109 = 998;
            else
              v109 = *v136;
            v88 = v109 & ~(v109 >> 63);
            v110 = v108 & ~(v108 >> 63);
            if (v110 >= 998)
              v90 = 998;
            else
              v90 = v110;
            v91 = (char *)v107
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                         + 48);
            v92 = (uint64_t)v155;
            v93 = (uint64_t)v155;
            v94 = (uint64_t)v131;
          }
          outlined init with copy of FloatingPointFormatStyle<Double>(v93, v94);
          v111 = v94 + *(int *)(v154 + 36);
          *(_QWORD *)(v111 + 16) = v86;
          *(_QWORD *)(v111 + 24) = 0;
          *(_QWORD *)(v111 + 32) = 0;
          *(_QWORD *)(v111 + 40) = 1;
          *(_QWORD *)(v111 + 48) = v88;
          *(_QWORD *)(v111 + 56) = 0;
          *(_QWORD *)(v111 + 64) = v90;
          *(_BYTE *)(v111 + 72) = 0x80;
          outlined destroy of Any?(v92, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?(v94, v92, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          (*(void (**)(char *, uint64_t))(v139 + 8))(v91, v140);
        }
        else
        {
          (*(void (**)(_QWORD *, uint64_t))(v139 + 8))(v136, v140);
        }
        v68 = 4;
        v70 = 65793;
        goto LABEL_89;
      }
      v163[0] = (uint64_t)v57;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
      lazy protocol witness table accessor for type [Character] and conformance [A]();
      String.init<A>(_:)();
LABEL_29:
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v173, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], v163);
      v71 = (_OWORD *)v163[0];
      goto LABEL_90;
    }
    v62 = v151 + *(int *)(v146 + 20);
    if ((*(_BYTE *)(v62 + 8) & 1) == 0)
    {
      v63 = *(_QWORD *)v62;
      if (v58 <= v63)
        v58 = v63;
    }
    if (v58 >= 999)
      v64 = 999;
    else
      v64 = v58;
    v65 = (uint64_t)v155;
    v66 = v144;
    outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v144);
    v67 = v66 + *(int *)(v154 + 36);
    *(_QWORD *)(v67 + 16) = v64;
    *(_QWORD *)(v67 + 24) = 0;
    *(_QWORD *)(v67 + 32) = 0;
    *(_QWORD *)(v67 + 40) = 1;
    *(_QWORD *)(v67 + 56) = 0;
    *(_QWORD *)(v67 + 64) = 0;
    *(_QWORD *)(v67 + 48) = 0;
    *(_BYTE *)(v67 + 72) = 0x80;
    outlined destroy of Any?(v65, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    outlined init with take of LocalePreferences?(v66, v65, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v68 = 2;
    if (!v145)
    {
      v69 = v51;
      v70 = 65793;
      goto LABEL_89;
    }
    v69 = v51;
LABEL_27:
    v70 = 0;
LABEL_89:
    v112 = v150;
    outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v155, v150);
    v113 = v152;
    outlined init with copy of FloatingPointFormatStyle<Double>(v112, v152);
    v114 = v149 + *(int *)(v154 + 36);
    *(_BYTE *)(v114 + 2) = BYTE2(v70);
    *(_WORD *)v114 = v70;
    outlined destroy of Any?(v112, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    specialized FloatingPointFormatStyle.format(_:)();
    outlined destroy of Any?(v113, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v167 = MEMORY[0x1E0DEE9E0];
    v168 = MEMORY[0x1E0DEE9E8];
    v163[3] = (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
    v163[4] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
    LOBYTE(v163[0]) = v68;
    v164 = v148;
    v165 = 1;
    v166 = 0;
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v163, 0xD000000000000021, v147);
    v115 = v167;
    v116 = v168;
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v172, v115, v116, v163);
    v71 = (_OWORD *)v163[0];
    v51 = v69;
LABEL_90:
    v117 = *(_OWORD *)(v47 + 32);
    v181 = *(_OWORD *)(v47 + 16);
    v182 = v117;
    v183 = *(_OWORD *)(v47 + 48);
    v118 = BigString.endIndex.getter();
    v120 = v119;
    v122 = v121;
    v124 = v123;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_10;
    v125 = *(_OWORD *)(v47 + 32);
    v178 = *(_OWORD *)(v47 + 16);
    v179 = v125;
    v180 = *(_OWORD *)(v47 + 48);
    v126 = (_QWORD *)v47;
    v47 = *(_QWORD *)(v47 + 64);
    v127 = v126[9];
    v158 = v126[10];
    v159 = v51;
    v156 = v126;
    v160 = v126[11];
    v161 = v127;
    v128 = swift_allocObject();
    v157 = BigString.isEmpty.getter();
    if (v47)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v178);
      swift_unknownObjectRelease();
    }
    else
    {
      v184[0] = v178;
      v184[1] = v179;
      v184[2] = v180;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v184, (uint64_t)v185);
      outlined retain of Locale((uint64_t)v185);
    }
    swift_unknownObjectRetain();
    v129 = v158;
    specialized Rope._endPath.getter(v47);
    swift_unknownObjectRelease();
    if (!v47)
    {
      v51 = v159;
      if ((v157 & 1) == 0)
        break;
      goto LABEL_9;
    }
    swift_unknownObjectRelease();
    v51 = v159;
    if ((((v129 == 0) ^ v157) & 1) != 0)
      break;
LABEL_9:
    v53 = v179;
    *(_OWORD *)(v128 + 16) = v178;
    *(_OWORD *)(v128 + 32) = v53;
    *(_OWORD *)(v128 + 48) = v180;
    v54 = v161;
    *(_QWORD *)(v128 + 64) = v47;
    *(_QWORD *)(v128 + 72) = v54;
    v55 = v160;
    *(_QWORD *)(v128 + 80) = v129;
    *(_QWORD *)(v128 + 88) = v55;
    swift_release();
    v47 = v128;
LABEL_10:
    v56 = *(_OWORD *)(v47 + 32);
    v175 = *(_OWORD *)(v47 + 16);
    v176 = v56;
    v177 = *(_OWORD *)(v47 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v174[0] = v118;
    v174[1] = v120;
    v174[2] = v122;
    v174[3] = v124;
    v174[4] = v118;
    v174[5] = v120;
    v174[6] = v122;
    v174[7] = v124;
    specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v174, v71);
    swift_release_n();
    v52 = (_BYTE *)v162;
LABEL_11:
    v52 += 32;
    if (!--v51)
      goto LABEL_97;
  }
  __break(1u);
LABEL_97:
  swift_bridgeObjectRelease();
LABEL_98:
  result = outlined destroy of Any?((uint64_t)v155, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  *v137 = v47;
  return result;
}

uint64_t Duration.TimeFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  Swift::UInt v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t (*v22)(uint64_t, uint64_t);
  Swift::UInt8 v23;
  void (*v24)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::UInt v52;
  Swift::UInt v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  id v58;
  _BYTE v59[144];
  _BYTE v60[8];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char v77;
  _QWORD v78[18];
  _BYTE v79[144];
  _BYTE v80[152];

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (Swift::UInt *)&v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v13 = *v10;
    if (EnumCaseMultiPayload == 1)
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v14 + 48), v4);
      v15 = 1;
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 32))(v7, (char *)v10 + *(int *)(v16 + 48), v4);
      v15 = 2;
    }
    Hasher._combine(_:)(v15);
  }
  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v5 + 32))(v7, v10, v4);
    v13 = 0;
  }
  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  v17 = v2 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = *(_QWORD *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  v19 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(v19 + 20)));
  v20 = *(_QWORD *)(v2 + *(int *)(v19 + 24) + 8);
  ObjectType = swift_getObjectType();
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 48);
  swift_unknownObjectRetain();
  if ((v22(ObjectType, v20) & 1) != 0)
  {
    v23 = 1;
LABEL_14:
    Hasher._combine(_:)(v23);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v20 + 64))(ObjectType, v20);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v24 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 464);
  swift_unknownObjectRetain();
  v24(v78, ObjectType, v20);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v80) == 1)
  {
    v23 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v60, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60[0] == 2)
  {
    v25 = 0;
  }
  else
  {
    v25 = v60[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v25);
  v26 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    v31 = v60;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v26 + 16));
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v59, &demangling cache variable for type metadata for LocalePreferences?);
    v31 = v59;
LABEL_29:
    outlined retain of LocalePreferences(v31);
    if (!v62)
      goto LABEL_23;
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v63)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    v29 = v64;
    if (!v64)
      goto LABEL_25;
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v29);
    swift_bridgeObjectRelease();
    v30 = v65;
    if (!v65)
      goto LABEL_26;
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = v64;
  if (v64)
    goto LABEL_32;
LABEL_25:
  Hasher._combine(_:)(0);
  v30 = v65;
  if (!v65)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v30);
  swift_bridgeObjectRelease();
LABEL_34:
  v32 = v66;
  v33 = v67;
  v35 = v68;
  v34 = v69;
  v36 = v70;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v37 = v33;
    v38 = v35;
    v39 = v34;
    v40 = v36;
    v41 = v32;
    _CFObject.hash(into:)();
    v58 = v32;
    if (v33)
      goto LABEL_36;
  }
  else
  {
    Hasher._combine(_:)(0);
    v46 = v36;
    v47 = v33;
    v48 = v35;
    v49 = v34;
    v58 = 0;
    if (v33)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v42 = v33;
      _CFObject.hash(into:)();

      if (v35)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v35)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v43 = v35;
    _CFObject.hash(into:)();

    if (v34)
      goto LABEL_38;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v36)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v34)
    goto LABEL_43;
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  v45 = 0;
LABEL_45:

  v50 = v71;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v50);
    swift_bridgeObjectRelease();
    v51 = v72;
    if (v72)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    if (v73)
      goto LABEL_48;
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  v51 = v72;
  if (!v72)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v51);
  swift_bridgeObjectRelease();
  if (!v73)
    goto LABEL_51;
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v76 == 2)
  {
    v54 = 0;
  }
  else
  {
    v54 = v76 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v54);
  if (v77 == 2)
  {
    v55 = 0;
  }
  else
  {
    v56 = v77 & 1;
    Hasher._combine(_:)(1u);
    v55 = v56;
  }
  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E6970756F7267;
  if (*v0 != 1)
    v1 = 0x656C61636F6CLL;
  if (*v0)
    return v1;
  else
    return 0x6E726574746170;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.TimeFormatStyle.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Duration.TimeFormatStyle.Attributed.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.TimeFormatStyle.Attributed.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.TimeFormatStyle.Attributed.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern, type metadata accessor for Duration.TimeFormatStyle.Pattern, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
    LOBYTE(v11) = *(_BYTE *)(v3 + *(int *)(v9 + 20));
    v12 = 1;
    lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    v12 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Duration.TimeFormatStyle.Attributed.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  int EnumCaseMultiPayload;
  Swift::UInt v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  Swift::UInt8 v19;
  void (*v20)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  _BYTE v55[144];
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  _QWORD v74[18];
  _BYTE v75[144];
  _BYTE v76[144];
  _BYTE v77[72];

  v1 = v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (Swift::UInt *)&v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v10 = *v8;
    if (EnumCaseMultiPayload == 1)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v11 + 48), v2);
      v12 = 1;
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 32))(v5, (char *)v8 + *(int *)(v13 + 48), v2);
      v12 = 2;
    }
    Hasher._combine(_:)(v12);
  }
  else
  {
    (*(void (**)(_BYTE *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = 0;
  }
  Hasher._combine(_:)(v10);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v14 = v1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v14 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = *(_QWORD *)v14;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  v16 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(v16 + 20)));
  v17 = *(_QWORD *)(v1 + *(int *)(v16 + 24) + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(ObjectType, v17) & 1) != 0)
  {
    v19 = 1;
LABEL_14:
    Hasher._combine(_:)(v19);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v20 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 464);
  swift_unknownObjectRetain();
  v20(v74, ObjectType, v17);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    v19 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v56, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    v21 = 0;
  }
  else
  {
    v21 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  v22 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    v27 = v56;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v22 + 16));
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
    v27 = v55;
LABEL_29:
    outlined retain of LocalePreferences(v27);
    if (!v58)
      goto LABEL_23;
    goto LABEL_30;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v24 = v22 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v24 += 16;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v59)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    v25 = v60;
    if (!v60)
      goto LABEL_25;
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v25);
    swift_bridgeObjectRelease();
    v26 = v61;
    if (!v61)
      goto LABEL_26;
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v25 = v60;
  if (v60)
    goto LABEL_32;
LABEL_25:
  Hasher._combine(_:)(0);
  v26 = v61;
  if (!v61)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v26);
  swift_bridgeObjectRelease();
LABEL_34:
  v29 = v62;
  v28 = v63;
  v31 = v64;
  v30 = v65;
  v32 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v28;
    v34 = v31;
    v35 = v30;
    v36 = v32;
    v37 = v29;
    _CFObject.hash(into:)();
    if (v28)
      goto LABEL_36;
  }
  else
  {
    Hasher._combine(_:)(0);
    v42 = v32;
    v43 = v28;
    v44 = v31;
    v45 = v30;
    if (v28)
    {
LABEL_36:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v38 = v28;
      _CFObject.hash(into:)();

      if (v31)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  Hasher._combine(_:)(0);
  if (v31)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v39 = v31;
    _CFObject.hash(into:)();

    if (v30)
      goto LABEL_38;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v32)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(0);
  if (!v30)
    goto LABEL_43;
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v40 = v30;
  _CFObject.hash(into:)();

  if (v32)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v41 = v32;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }
LABEL_44:
  Hasher._combine(_:)(0);
  v41 = 0;
LABEL_45:

  v46 = v67;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v46);
    swift_bridgeObjectRelease();
    v47 = v68;
    if (v68)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    if (v69)
      goto LABEL_48;
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(0);
  v47 = v68;
  if (!v68)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v47);
  swift_bridgeObjectRelease();
  if (!v69)
    goto LABEL_51;
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v72 == 2)
  {
    v50 = 0;
  }
  else
  {
    v50 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v50);
  if (v73 == 2)
  {
    v51 = 0;
  }
  else
  {
    v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    v51 = v52;
  }
  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  char v27;

  v20 = a2;
  v21 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.TimeFormatStyle.Attributed.CodingKeys>);
  v4 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(v10 + 20);
  v9[v11] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys();
  v22 = v6;
  v12 = (uint64_t)v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = v11;
  v25 = a1;
  v13 = (uint64_t)v9;
  LOBYTE(v26) = 0;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern, type metadata accessor for Duration.TimeFormatStyle.Pattern, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern);
  v14 = (uint64_t)v23;
  v15 = v24;
  v16 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature(v14, v13, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  v27 = 1;
  lazy protocol witness table accessor for type NumberFormatStyleConfiguration.Grouping and conformance NumberFormatStyleConfiguration.Grouping();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_BYTE *)(v13 + v19) = v26;
  v27 = 2;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v15);
  *(_OWORD *)(v13 + *(int *)(v7 + 24)) = v26;
  outlined init with copy of ICUNumberFormatter.Signature(v13, v20, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return outlined destroy of ICUNumberFormatter.Signature(v13, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return Duration.TimeFormatStyle.Attributed.format(_:)(*a1, a1[1], a2);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.TimeFormatStyle.Attributed@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  __n128 result;
  __n128 v9;

  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  v7 = *(int *)(a2 + 24);
  v9 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v9;
  *(__n128 *)(a3 + v7) = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.TimeFormatStyle.Attributed(_QWORD *a1)
{
  return Duration.TimeFormatStyle.Attributed.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.TimeFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt *v12;
  uint64_t (*v13)(_QWORD);
  int EnumCaseMultiPayload;
  Swift::UInt v15;
  uint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t ObjectType;
  Swift::UInt8 v23;
  void (*v24)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  Swift::UInt8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _QWORD v75[18];
  _BYTE v76[144];
  _BYTE v77[152];

  v4 = v2;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (Swift::UInt *)((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)v12, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v15 = *v12;
    if (EnumCaseMultiPayload == 1)
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v12 + *(int *)(v16 + 48), v6);
      v17 = 1;
    }
    else
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v12 + *(int *)(v18 + 48), v6);
      v17 = 2;
    }
    Hasher._combine(_:)(v17);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v7 + 32))(v9, v12, v6);
    v15 = 0;
  }
  Hasher._combine(_:)(v15);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19 = v4 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v19 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v20 = *(_QWORD *)v19;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + *(int *)(a2 + 20)));
  v21 = *(_QWORD *)(v4 + *(int *)(a2 + 24) + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(ObjectType, v21) & 1) != 0)
  {
    v23 = 1;
LABEL_14:
    Hasher._combine(_:)(v23);
    return;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v21 + 64))(ObjectType, v21);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v24 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 464);
  swift_unknownObjectRetain();
  v24(v75, ObjectType, v21);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v77) == 1)
  {
    v23 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)&v57, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v57 == 2)
  {
    v25 = 0;
  }
  else
  {
    v25 = v57 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v25);
  v26 = v58;
  if (!v58)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v57);
    if (!v59)
      goto LABEL_23;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v26 + 16));
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
    goto LABEL_28;
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v60)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v60)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    v29 = v61;
    if (!v61)
      goto LABEL_25;
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v29);
    swift_bridgeObjectRelease();
    v30 = v62;
    if (!v62)
      goto LABEL_26;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = v61;
  if (v61)
    goto LABEL_31;
LABEL_25:
  Hasher._combine(_:)(0);
  v30 = v62;
  if (!v62)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v30);
  swift_bridgeObjectRelease();
LABEL_33:
  v32 = v63;
  v31 = v64;
  v34 = v65;
  v33 = v66;
  v35 = v67;
  if (v63)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v36 = v31;
    v37 = v34;
    v38 = v33;
    v39 = v35;
    v40 = v32;
    _CFObject.hash(into:)();
    if (v31)
      goto LABEL_35;
  }
  else
  {
    Hasher._combine(_:)(0);
    v45 = v35;
    v46 = v31;
    v47 = v34;
    v48 = v33;
    if (v31)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v41 = v31;
      _CFObject.hash(into:)();

      if (v34)
        goto LABEL_36;
      goto LABEL_41;
    }
  }
  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v42 = v34;
    _CFObject.hash(into:)();

    if (v33)
      goto LABEL_37;
LABEL_42:
    Hasher._combine(_:)(0);
    if (v35)
      goto LABEL_38;
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  if (!v33)
    goto LABEL_42;
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }
LABEL_43:
  Hasher._combine(_:)(0);
  v44 = 0;
LABEL_44:

  v49 = v68;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v49);
    swift_bridgeObjectRelease();
    v50 = v69;
    if (v69)
      goto LABEL_46;
LABEL_49:
    Hasher._combine(_:)(0);
    if (v70)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  v50 = v69;
  if (!v69)
    goto LABEL_49;
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v50);
  swift_bridgeObjectRelease();
  if (!v70)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v51 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }
  if (v73 == 2)
  {
    v53 = 0;
  }
  else
  {
    v53 = v73 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v53);
  if (v74 == 2)
  {
    v54 = 0;
  }
  else
  {
    v55 = v74 & 1;
    Hasher._combine(_:)(1u);
    v54 = v55;
  }
  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.TimeFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  int EnumCaseMultiPayload;
  Swift::UInt v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t ObjectType;
  Swift::UInt8 v21;
  void (*v22)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  _QWORD v73[18];
  _BYTE v74[144];
  _BYTE v75[144];
  _BYTE v76[80];

  v4 = v2;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (Swift::UInt *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)v11, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v13 = *v11;
    if (EnumCaseMultiPayload == 1)
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v14 + 48), v5);
      v15 = 1;
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule));
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v11 + *(int *)(v16 + 48), v5);
      v15 = 2;
    }
    Hasher._combine(_:)(v15);
  }
  else
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v6 + 32))(v8, v11, v5);
    v13 = 0;
  }
  Hasher._combine(_:)(v13);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v4 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  if (*(_BYTE *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = *(_QWORD *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + *(int *)(a2 + 20)));
  v19 = *(_QWORD *)(v4 + *(int *)(a2 + 24) + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(ObjectType, v19) & 1) != 0)
  {
    v21 = 1;
LABEL_14:
    Hasher._combine(_:)(v21);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v22 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 464);
  swift_unknownObjectRetain();
  v22(v73, ObjectType, v19);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    v21 = 0;
    goto LABEL_14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)&v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55 == 2)
  {
    v23 = 0;
  }
  else
  {
    v23 = v55 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v23);
  v24 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
LABEL_28:
    outlined retain of LocalePreferences(&v55);
    if (!v57)
      goto LABEL_23;
    goto LABEL_29;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v24 + 16));
  v25 = *(_QWORD *)(v24 + 16);
  if (!v25)
    goto LABEL_28;
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v26 = v24 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v26 += 16;
    --v25;
  }
  while (v25);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    if (!v58)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    v27 = v59;
    if (!v59)
      goto LABEL_25;
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v27);
    swift_bridgeObjectRelease();
    v28 = v60;
    if (!v60)
      goto LABEL_26;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v27 = v59;
  if (v59)
    goto LABEL_31;
LABEL_25:
  Hasher._combine(_:)(0);
  v28 = v60;
  if (!v60)
  {
LABEL_26:
    Hasher._combine(_:)(0);
    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v28);
  swift_bridgeObjectRelease();
LABEL_33:
  v30 = v61;
  v29 = v62;
  v32 = v63;
  v31 = v64;
  v33 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v34 = v29;
    v35 = v32;
    v36 = v31;
    v37 = v33;
    v38 = v30;
    _CFObject.hash(into:)();
    if (v29)
      goto LABEL_35;
  }
  else
  {
    Hasher._combine(_:)(0);
    v43 = v33;
    v44 = v29;
    v45 = v32;
    v46 = v31;
    if (v29)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v39 = v29;
      _CFObject.hash(into:)();

      if (v32)
        goto LABEL_36;
      goto LABEL_41;
    }
  }
  Hasher._combine(_:)(0);
  if (v32)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v40 = v32;
    _CFObject.hash(into:)();

    if (v31)
      goto LABEL_37;
LABEL_42:
    Hasher._combine(_:)(0);
    if (v33)
      goto LABEL_38;
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(0);
  if (!v31)
    goto LABEL_42;
LABEL_37:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v41 = v31;
  _CFObject.hash(into:)();

  if (v33)
  {
LABEL_38:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v42 = v33;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }
LABEL_43:
  Hasher._combine(_:)(0);
  v42 = 0;
LABEL_44:

  v47 = v66;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v47);
    swift_bridgeObjectRelease();
    v48 = v67;
    if (v67)
      goto LABEL_46;
LABEL_49:
    Hasher._combine(_:)(0);
    if (v68)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  v48 = v67;
  if (!v67)
    goto LABEL_49;
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v48);
  swift_bridgeObjectRelease();
  if (!v68)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v49 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v50 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }
  if (v71 == 2)
  {
    v51 = 0;
  }
  else
  {
    v51 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v51);
  if (v72 == 2)
  {
    v52 = 0;
  }
  else
  {
    v53 = v72 & 1;
    Hasher._combine(_:)(1u);
    v52 = v53;
  }
  Hasher._combine(_:)(v52);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t Duration.TimeFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.grouping(_:)(a1, type metadata accessor for Duration.TimeFormatStyle, a2);
}

uint64_t Duration.TimeFormatStyle.grouping.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t Duration.TimeFormatStyle.grouping.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*Duration.TimeFormatStyle.grouping.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  return Measurement<>.FormatStyle<>.hidesScaleName.modify;
}

uint64_t Duration.TimeFormatStyle.Attributed.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.TimeFormatStyle.grouping(_:)(a1, type metadata accessor for Duration.TimeFormatStyle.Attributed, a2);
}

uint64_t Duration.TimeFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v5;
  uint64_t result;

  v5 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t Duration.TimeFormatStyle.Attributed.subscript.getter(uint64_t a1)
{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(a1);
}

{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1);
  v3 = (char *)&v5 - v2;
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)&v5 - v2, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_getAtKeyPath();
  return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v3, type metadata accessor for Duration.TimeFormatStyle);
}

uint64_t Duration.TimeFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  specialized Duration.TimeFormatStyle.Attributed.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + v3 + 8) - 8) + 8))(a1);
}

void (*Duration.TimeFormatStyle.Attributed.subscript.modify(_QWORD *a1, _QWORD *a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = (_QWORD *)(*a2 + *MEMORY[0x1E0DEC880]);
  v7 = malloc(*(_QWORD *)(*(_QWORD *)(*v6 - 8) + 64));
  v5[2] = v7;
  v8 = v6[1];
  v5[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[5] = malloc(v10);
  v5[6] = malloc(v10);
  v5[7] = malloc(v10);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v7, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_getAtKeyPath();
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for Duration.TimeFormatStyle);
  return Duration.TimeFormatStyle.Attributed.subscript.modify;
}

void Duration.TimeFormatStyle.Attributed.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);
  uint64_t v12;

  v3 = *a1;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16);
  v4((*a1)[6], v3[7], v3[3]);
  v5 = (void *)v3[6];
  v6 = (void *)v3[7];
  v7 = (void *)v3[5];
  v12 = v3[4];
  v8 = (void *)v3[2];
  v9 = v3[3];
  v10 = v3[1];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v7, (uint64_t)v5, v3[3]);
    outlined init with copy of ICUNumberFormatter.Signature(v10, (uint64_t)v8, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_retain();
    swift_setAtWritableKeyPath();
    outlined destroy of ICUNumberFormatter.Signature(v10, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, v10, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_release();
    v11 = *(void (**)(void *, uint64_t))(v12 + 8);
    v11(v5, v9);
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature(v3[1], v3[2], type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_retain();
    swift_setAtWritableKeyPath();
    outlined destroy of ICUNumberFormatter.Signature(v10, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, v10, type metadata accessor for Duration.TimeFormatStyle.Attributed);
    swift_release();
    v11 = *(void (**)(void *, uint64_t))(v12 + 8);
  }
  v11(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v8);
  free(v3);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD))
{
  return Duration.TimeFormatStyle.Attributed.discreteInput(before:)(a1, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE7A0]);
}

uint64_t Duration.TimeFormatStyle.discreteInput(before:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD))
{
  return Duration.TimeFormatStyle.discreteInput(before:)(a1, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE7A0]);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(after:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD))
{
  return Duration.TimeFormatStyle.Attributed.discreteInput(before:)(a1, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE798]);
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  int EnumCaseMultiPayload;
  char *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v49;
  char *v50;
  uint64_t v51;
  int v52;
  void (*v53)(_QWORD, _QWORD, _QWORD);
  uint64_t v54;
  uint64_t v55;

  v48 = a4;
  v52 = a3;
  v5 = v4;
  v53 = a2;
  v51 = a1;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v54 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v50 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v47 - v9;
  v11 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (uint64_t *)((char *)&v47 - v15);
  v17 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v47 - v21;
  v23 = type metadata accessor for Duration.TimeFormatStyle(0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v5, (uint64_t)v25, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  v26 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  v27 = *(int *)(v26 + 24);
  v25[*(int *)(v26 + 20)] = 0;
  v28 = *(int *)(v26 + 24);
  v49 = *(_OWORD *)(v5 + v27);
  *(_OWORD *)&v25[v28] = v49;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v25, (uint64_t)v22, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v22, (uint64_t)v16, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    v29 = *v16;
    v30 = (char *)v16
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                 + 48);
    swift_unknownObjectRetain();
    static Duration.interval(fractionalSecondsLength:)(v29);
    v55 = 1;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v31 = static Duration.* infix<A>(_:_:)();
    v33 = v32;
    v34 = *(void (**)(char *, uint64_t))(v54 + 8);
    v34(v30, v6);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t))(v54 + 8);
    swift_unknownObjectRetain();
    v34((char *)v16, v6);
    v31 = 0x40AAD21B3B700000;
    v33 = 3;
  }
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v25, (uint64_t)v19, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v13, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v36 = v50;
  if (EnumCaseMultiPayload)
  {
    v37 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                      + 48)];
    v38 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v38(v36, v37, v6);
  }
  else
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v38(v50, v13, v6);
  }
  v38(v10, v36, v6);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  v39 = static Duration.bound(for:in:countingDown:roundingRule:)(v51, v53, v31, v33, v52 & 1, (uint64_t)v10);
  v41 = v40;
  v43 = v42;
  v34(v10, v6);
  if ((v43 & 1) != 0)
  {
    v44 = Duration.init(secondsComponent:attosecondsComponent:)();
    v39 = v48(v39, v41, v44, v45);
  }
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v25, type metadata accessor for Duration.TimeFormatStyle);
  return v39;
}

uint64_t Duration.TimeFormatStyle.discreteInput(after:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD))
{
  return Duration.TimeFormatStyle.discreteInput(before:)(a1, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE798]);
}

uint64_t Duration.TimeFormatStyle.discreteInput(before:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;

  v42 = a4;
  v46 = a3;
  v47 = a2;
  v45 = a1;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v43 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v41 - v9;
  v11 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (uint64_t *)((char *)&v41 - v15);
  v17 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v41 - v21;
  v44 = v4;
  outlined init with copy of ICUNumberFormatter.Signature(v4, (uint64_t)&v41 - v21, v23);
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v22, (uint64_t)v16, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    v24 = *v16;
    v25 = (char *)v16
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                 + 48);
    static Duration.interval(fractionalSecondsLength:)(v24);
    v48 = 1;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v26 = static Duration.* infix<A>(_:_:)();
    v28 = v27;
    v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    v29(v25, v5);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    v29((char *)v16, v5);
    v26 = 0x40AAD21B3B700000;
    v28 = 3;
  }
  v30 = v43;
  outlined init with copy of ICUNumberFormatter.Signature(v44, (uint64_t)v19, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v13, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
  {
    v31 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                      + 48)];
    v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v32(v30, v31, v5);
  }
  else
  {
    v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v32(v30, v13, v5);
  }
  v32(v10, v30, v5);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v19, type metadata accessor for Duration.TimeFormatStyle.Pattern);
  v33 = static Duration.bound(for:in:countingDown:roundingRule:)(v45, v47, v26, v28, v46 & 1, (uint64_t)v10);
  v35 = v34;
  v37 = v36;
  v29(v10, v5);
  if ((v37 & 1) != 0)
  {
    v38 = Duration.init(secondsComponent:attosecondsComponent:)();
    return v42(v33, v35, v38, v39);
  }
  return v33;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, (uint64_t (*)(_QWORD, _QWORD))Duration.TimeFormatStyle.Attributed.discreteInput(before:), a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, (uint64_t (*)(_QWORD, _QWORD))Duration.TimeFormatStyle.Attributed.discreteInput(after:), a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = a2(*a1, a1[1]);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, (uint64_t (*)(_QWORD, _QWORD))Duration.TimeFormatStyle.discreteInput(before:), a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.TimeFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.TimeFormatStyle.Attributed(a1, (uint64_t (*)(_QWORD, _QWORD))Duration.TimeFormatStyle.discreteInput(after:), a2);
}

uint64_t specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  MEMORY[0x1E0C80A78](v4);
  v48 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v49 = (char *)&v48 - v7;
  MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&v48 - v9;
  MEMORY[0x1E0C80A78](v10);
  v51 = (char *)&v48 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v48 - v13;
  v15 = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (uint64_t *)((char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v20 = (uint64_t *)((char *)&v48 - v19);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v48 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Duration.TimeFormatStyle.Pattern.Fields, Duration.TimeFormatStyle.Pattern.Fields));
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = &v26[*(int *)(v27 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature(a1, (uint64_t)v26, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  outlined init with copy of ICUNumberFormatter.Signature(a2, (uint64_t)v28, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v26, (uint64_t)v20, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
      v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                   + 48);
      v23 = (char *)v20 + v30;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v31 = *v20;
        v32 = *(_QWORD *)v28;
        v33 = &v28[v30];
        v35 = v51;
        v34 = v52;
        v36 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
        v37 = v53;
        v36(v51, v23, v53);
        v38 = v50;
LABEL_9:
        v36(v38, v33, v37);
        if (v31 == v32)
        {
          v41 = static FloatingPointRoundingRule.== infix(_:_:)();
          v42 = *(void (**)(char *, uint64_t))(v34 + 8);
          v42(v38, v37);
          v43 = v35;
          v44 = v37;
          goto LABEL_11;
        }
        v46 = *(void (**)(char *, uint64_t))(v34 + 8);
        v46(v38, v37);
        v46(v35, v37);
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v26, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
LABEL_14:
        v41 = 0;
        return v41 & 1;
      }
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v26, (uint64_t)v17, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
      v45 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                   + 48);
      v23 = (char *)v17 + v45;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v31 = *v17;
        v32 = *(_QWORD *)v28;
        v33 = &v28[v45];
        v34 = v52;
        v37 = v53;
        v36 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
        v35 = v49;
        v36(v49, v23, v53);
        v38 = v48;
        goto LABEL_9;
      }
    }
LABEL_12:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v53);
    outlined destroy of Any?((uint64_t)v26, &demangling cache variable for type metadata for (Duration.TimeFormatStyle.Pattern.Fields, Duration.TimeFormatStyle.Pattern.Fields));
    goto LABEL_14;
  }
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v26, (uint64_t)v23, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  if (swift_getEnumCaseMultiPayload())
    goto LABEL_12;
  v39 = v52;
  v40 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v14, v28, v53);
  v41 = static FloatingPointRoundingRule.== infix(_:_:)();
  v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  v42(v14, v40);
  v43 = v23;
  v44 = v40;
LABEL_11:
  v42(v43, v44);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v26, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  return v41 & 1;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys, &unk_1E0F37288);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys, &unk_1E0F37288);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys, &unk_1E0F37288);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.CodingKeys, &unk_1E0F37288);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of Duration.TimeFormatStyle.Pattern(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Duration.TimeFormatStyle.Attributed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_9;
  v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v5 = (_QWORD *)(a1 + v4);
  v6 = *(_BYTE *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if ((v6 & 1) != 0)
  {
    if (!v8)
      goto LABEL_9;
  }
  else
  {
    if (*v5 != *v7)
      LOBYTE(v8) = 1;
    if ((v8 & 1) != 0)
      goto LABEL_9;
  }
  v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v9 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v9 + 20)))
  {
    v12 = *(int *)(v9 + 24);
    v13 = *(_OWORD *)(a1 + v12);
    v14 = *(_OWORD *)(a2 + v12);
    v15 = v13;
    v10 = specialized static Locale.== infix(_:_:)((uint64_t)&v15, (uint64_t)&v14);
    return v10 & 1;
  }
LABEL_9:
  v10 = 0;
  return v10 & 1;
}

uint64_t specialized static Duration.TimeFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;

  if ((specialized static Duration.TimeFormatStyle.Pattern.Fields.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v5 = (_QWORD *)(a1 + v4);
  v6 = *(_BYTE *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if ((v6 & 1) != 0)
  {
    if (!v8)
      return 0;
  }
  else
  {
    if (*v5 != *v7)
      LOBYTE(v8) = 1;
    if ((v8 & 1) != 0)
      return 0;
  }
  v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v9 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v9 + 20)))
  {
    v10 = *(int *)(v9 + 24);
    v11 = *(_OWORD *)(a1 + v10);
    v13 = *(_OWORD *)(a2 + v10);
    v14 = v11;
    if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0)
      return 1;
  }
  return 0;
}

_QWORD *specialized static Duration.TimeFormatStyle.Attributed.componentsFromPatternString(_:patternSet:)(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *object;
  Swift::String_optional v7;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  Swift::String_optional v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  char v49;
  _QWORD v50[4];

  v4 = HIBYTE(a2) & 0xF;
  v50[0] = a1;
  v50[1] = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v50[2] = 0;
  v50[3] = v4;
  swift_bridgeObjectRetain();
  v5 = v50;
  v7 = String.Iterator.next()();
  object = v7.value._object;
  if (v7.value._object)
  {
    countAndFlagsBits = v7.value._countAndFlagsBits;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v43 = a3;
    v12 = a3 + 9;
    v13 = 0;
    v41 = v12;
    v48 = 1;
    v49 = 0;
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v47 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v16 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_80;
      }
      v17 = v13;
      v5 = v11;
      v11 = object;
      v13 = countAndFlagsBits;
      if ((v49 & 1) != 0)
        break;
      v18 = v43[2];
      if (!v18)
        goto LABEL_26;
      v19 = v43[4] == countAndFlagsBits && object == (_QWORD *)v43[5];
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v10 >= v9)
          goto LABEL_41;
      }
      else
      {
        if (v18 == 1)
        {
LABEL_26:
          if (v10 >= v9)
            goto LABEL_53;
          goto LABEL_27;
        }
        v45 = v10;
        if ((v43[6] != countAndFlagsBits || v11 != (_QWORD *)v43[7])
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v18 != 2)
          {
            v25 = v41;
            v10 = 2;
            while (!__OFADD__(v10, 1))
            {
              if (*(v25 - 1) == countAndFlagsBits && v11 == (_QWORD *)*v25)
                goto LABEL_40;
              v42 = v10 + 1;
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_40;
              v25 += 2;
              ++v10;
              if (v42 == v18)
                goto LABEL_52;
            }
LABEL_80:
            __break(1u);
LABEL_81:
            v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
            goto LABEL_74;
          }
LABEL_52:
          v10 = v45;
          v13 = countAndFlagsBits;
          if (v45 >= v9)
          {
LABEL_53:
            v48 = 0;
            if (countAndFlagsBits == 39)
              goto LABEL_54;
            goto LABEL_55;
          }
LABEL_27:
          if ((v48 & 1) == 0)
            goto LABEL_53;
LABEL_28:
          v44 = v10;
          v46 = v13;
          v20 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            goto LABEL_29;
          goto LABEL_36;
        }
LABEL_40:
        v10 = v45;
        v13 = countAndFlagsBits;
        if (v45 >= v9)
          goto LABEL_41;
      }
      if (v5)
      {
        if (countAndFlagsBits == v17 && v11 == v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_41:
          v48 = 1;
          if (countAndFlagsBits == 39)
            goto LABEL_54;
          goto LABEL_55;
        }
        v44 = v10;
        v46 = v13;
      }
      else
      {
        v44 = v10;
        v46 = v13;
      }
      v20 = 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_29:
        v21 = v47;
        goto LABEL_30;
      }
LABEL_36:
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
LABEL_30:
      v23 = v21[2];
      v22 = v21[3];
      if (v23 >= v22 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
      v21[2] = v23 + 1;
      v47 = v21;
      v24 = &v21[4 * v23];
      v24[4] = v14;
      *((_BYTE *)v24 + 40) = v48 & 1;
      v24[6] = v44;
      v24[7] = v9;
      v10 = v9;
      v48 = v20;
      v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = v46;
      if (countAndFlagsBits == 39)
      {
LABEL_54:
        if (v11 == (_QWORD *)0xE100000000000000)
          goto LABEL_56;
      }
LABEL_55:
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v31 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v33 = v14[2];
        v32 = v14[3];
        if (v33 >= v32 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v14);
        v14[2] = v33 + 1;
        v34 = &v14[2 * v33];
        v13 = v31;
        v34[4] = v31;
        v34[5] = v11;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
LABEL_56:
      if (v5)
      {
        if (v17 == 39 && v5 == (_QWORD *)0xE100000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v27 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
          v29 = v14[2];
          v28 = v14[3];
          if (v29 >= v28 >> 1)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v14);
          v14[2] = v29 + 1;
          v30 = &v14[2 * v29];
          v30[4] = 39;
          v30[5] = 0xE100000000000000;
          swift_bridgeObjectRelease();
          v13 = v27;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
      }
      v49 ^= 1u;
LABEL_7:
      v5 = v50;
      v15 = String.Iterator.next()();
      object = v15.value._object;
      countAndFlagsBits = v15.value._countAndFlagsBits;
      v9 = v16;
      if (!v15.value._object)
        goto LABEL_71;
    }
    if (v10 >= v9 || (v48 & 1) == 0)
      goto LABEL_53;
    goto LABEL_28;
  }
  v10 = 0;
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v48 = 1;
  v47 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_71:
  swift_bridgeObjectRelease();
  if (v14[2])
  {
    v5 = (_QWORD *)String.count.getter();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_81;
    v35 = v47;
LABEL_74:
    v37 = v35[2];
    v36 = v35[3];
    if (v37 >= v36 >> 1)
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
    v35[2] = v37 + 1;
    v38 = &v35[4 * v37];
    v38[4] = v14;
    *((_BYTE *)v38 + 40) = v48;
    v38[6] = v10;
    v38[7] = v5;
    v39 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    v39 = v47;
  }
  swift_bridgeObjectRelease();
  return v39;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys, &unk_1E0F371F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys, &unk_1E0F371F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys, &unk_1E0F371F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.CodingKeys, &unk_1E0F371F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.CodingKeys and conformance Duration.TimeFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys, &unk_1E0F36FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys, &unk_1E0F36FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys, &unk_1E0F36FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed.CodingKeys, &unk_1E0F36FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed.CodingKeys and conformance Duration.TimeFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t specialized Duration.TimeFormatStyle.Pattern.Fields.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x756E694D72756F68 && a2 == 0xEA00000000006574;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000182309BB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65536574756E696DLL && a2 == 0xEC000000646E6F63)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000017 && a2 == 0x8000000182309BD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000182309BF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized Duration.TimeFormatStyle.Pattern.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73646C656966 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000182309B60)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized Duration.TimeFormatStyle.Attributed.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E726574746170 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6970756F7267 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized Duration.TimeFormatStyle.Attributed.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1);
  v3 = (char *)&v9 - v2;
  v5 = MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, __n128))(v6 + 16))((char *)&v9 - v7, v5);
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v3, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  swift_setAtWritableKeyPath();
  outlined destroy of ICUNumberFormatter.Signature(v1, type metadata accessor for Duration.TimeFormatStyle.Attributed);
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v3, v1, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Pattern()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern and conformance Duration.TimeFormatStyle.Pattern, type metadata accessor for Duration.TimeFormatStyle.Pattern, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, type metadata accessor for Duration.TimeFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, type metadata accessor for Duration.TimeFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, type metadata accessor for Duration.TimeFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, type metadata accessor for Duration.TimeFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, type metadata accessor for Duration.TimeFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Attributed);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, type metadata accessor for Duration.TimeFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181C32F18@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Attributed(0) + 24));
  return swift_unknownObjectRetain();
}

uint64_t sub_181C32F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ICUNumberFormatter.Signature(a1, a2, type metadata accessor for Duration.TimeFormatStyle.Pattern);
}

uint64_t sub_181C32F78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 20));
  return result;
}

uint64_t sub_181C32FAC(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t sub_181C32FDC(uint64_t a1, uint64_t *a2)
{
  return Duration.TimeFormatStyle.Attributed.subscript.getter(*a2);
}

uint64_t sub_181C33000(uint64_t a1)
{
  swift_retain();
  specialized Duration.TimeFormatStyle.Attributed.subscript.setter(a1);
  return swift_release();
}

uint64_t sub_181C33044()
{
  return 8;
}

_QWORD *sub_181C33050(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v4 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    v14 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)a1 + *(int *)(v6 + 20)) = *((_BYTE *)a2 + *(int *)(v6 + 20));
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    v4 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v5 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    v3 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  return swift_unknownObjectRelease();
}

_QWORD *initializeWithCopy for Duration.TimeFormatStyle(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((_BYTE *)a1 + *(int *)(v13 + 20)) = *((_BYTE *)a2 + *(int *)(v13 + 20));
  *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Duration.TimeFormatStyle(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  v14 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((_BYTE *)a1 + *(int *)(v14 + 20)) = *((_BYTE *)a2 + *(int *)(v14 + 20));
  v15 = *(int *)(v14 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v16[1] = v18;
  return a1;
}

_QWORD *initializeWithTake for Duration.TimeFormatStyle(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((_BYTE *)a1 + *(int *)(v13 + 20)) = *((_BYTE *)a2 + *(int *)(v13 + 20));
  *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
  return a1;
}

_QWORD *assignWithTake for Duration.TimeFormatStyle(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  v10 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((_BYTE *)a1 + *(int *)(v13 + 20)) = *((_BYTE *)a2 + *(int *)(v13 + 20));
  v14 = *(int *)(v13 + 24);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  swift_unknownObjectRelease();
  v15[1] = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C338D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C338F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for Duration.TimeFormatStyle.Attributed);
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Pattern(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Pattern(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                 + 48);
    goto LABEL_6;
  }
  if (!(_DWORD)result)
  {
LABEL_6:
    v3 = type metadata accessor for FloatingPointRoundingRule();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for Duration.TimeFormatStyle.Pattern(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

_QWORD *assignWithCopy for Duration.TimeFormatStyle.Pattern(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  return a1;
}

_QWORD *initializeWithTake for Duration.TimeFormatStyle.Pattern(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  }
  else
  {
    v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

_QWORD *assignWithTake for Duration.TimeFormatStyle.Pattern(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    }
    else
    {
      v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C3405C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C34074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
}

_QWORD *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Attributed(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      v13 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
    v14 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    v4 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v5 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    v3 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return swift_unknownObjectRelease();
}

_QWORD *initializeWithCopy for Duration.TimeFormatStyle.Attributed(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Duration.TimeFormatStyle.Attributed(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v16 = *(int *)(a3 + 24);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v17[1] = v19;
  return a1;
}

_QWORD *initializeWithTake for Duration.TimeFormatStyle.Attributed(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  }
  else
  {
    v11 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

_QWORD *assignWithTake for Duration.TimeFormatStyle.Attributed(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    }
    else
    {
      v11 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  v12 = *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)((char *)a2 + v15);
  v19 = *((_QWORD *)v17 + 1);
  *v16 = v18;
  swift_unknownObjectRelease();
  v16[1] = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C348D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C34960(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Attributed.CodingKeys()
{
  return &unk_1E0F36FE8;
}

void *type metadata accessor for Duration.TimeFormatStyle.CodingKeys()
{
  return &unk_1E0F371F8;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.CodingKeys()
{
  return &unk_1E0F37288;
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.TimeFormatStyle.Pattern.Fields(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      v12 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                 + 48);
    goto LABEL_6;
  }
  if (!(_DWORD)result)
  {
LABEL_6:
    v3 = type metadata accessor for FloatingPointRoundingRule();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for Duration.TimeFormatStyle.Pattern.Fields(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for Duration.TimeFormatStyle.Pattern.Fields(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for Duration.TimeFormatStyle.Pattern.Fields(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                + 48);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    v9 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for Duration.TimeFormatStyle.Pattern.Fields(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)a1, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
                  + 48);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      v9 = type metadata accessor for FloatingPointRoundingRule();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t base witness table accessor for Equatable in Duration.TimeFormatStyle.Pattern.Fields()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields and conformance Duration.TimeFormatStyle.Pattern.Fields, type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields);
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys, &unk_1E0F37318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys, &unk_1E0F37318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys, &unk_1E0F37318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys, &unk_1E0F37318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.CodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys, &unk_1E0F37438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys, &unk_1E0F37438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys, &unk_1E0F37438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys, &unk_1E0F37438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys, &unk_1E0F374C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys, &unk_1E0F374C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys, &unk_1E0F374C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys, &unk_1E0F374C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys, &unk_1E0F373A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys, &unk_1E0F373A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys, &unk_1E0F373A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys, &unk_1E0F373A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys and conformance Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of FloatingPointFormatStyle<Double>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [Character] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Character] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Character] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Character]);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Character] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field, &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field, &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field, &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field, &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field, &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
  }
  return result;
}

uint64_t initializeWithCopy for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Duration.TimeFormatStyle.Attributed.PatternComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Duration.TimeFormatStyle.Attributed.PatternComponent()
{
  return &type metadata for Duration.TimeFormatStyle.Attributed.PatternComponent;
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Attributed.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181C3563C + 4 * byte_1820FBA15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C35670 + 4 * asc_1820FBA10[v4]))();
}

uint64_t sub_181C35670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C35678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C35680);
  return result;
}

uint64_t sub_181C3568C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C35694);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181C35698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C356A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.CodingKeys()
{
  return &unk_1E0F37318;
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181C356FC + 4 * byte_1820FBA1A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181C3571C + 4 * byte_1820FBA1F[v4]))();
}

_BYTE *sub_181C356FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181C3571C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C35724(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C3572C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C35734(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C3573C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteCodingKeys()
{
  return &unk_1E0F373A8;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.HourMinuteSecondCodingKeys()
{
  return &unk_1E0F374C8;
}

uint64_t storeEnumTagSinglePayload for Duration.TimeFormatStyle.Pattern.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C357B4 + 4 * byte_1820FBA29[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C357E8 + 4 * byte_1820FBA24[v4]))();
}

uint64_t sub_181C357E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C357F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C357F8);
  return result;
}

uint64_t sub_181C35804(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C3580CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C35810(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C35818(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields.MinuteSecondCodingKeys()
{
  return &unk_1E0F37438;
}

uint64_t NSDecimal.ParseStrategy.parse(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int64_t a6)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  int v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_unfair_lock_s *v63;
  char v64;
  uint64_t ObjectType;
  uint64_t (*v66)(uint64_t, unint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  char *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143[4];
  uint64_t v144[3];

  v134 = a2;
  v132 = a1;
  v137 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  v139 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137);
  v140 = (uint64_t)&v122 - ((unint64_t)(v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = v9;
  MEMORY[0x1E0C80A78](v10);
  v138 = (char *)&v122 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
  MEMORY[0x1E0C80A78](v12);
  v127 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  v125 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126);
  v122 = (uint64_t *)((char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
  MEMORY[0x1E0C80A78](v15);
  v130 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  v128 = *(_QWORD *)(v17 - 8);
  v129 = v17;
  MEMORY[0x1E0C80A78](v17);
  v124 = (uint64_t *)((char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.FormatStyle?);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = a6;
  v22 = *(_QWORD *)(a6 + 16);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v24);
  v123 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v122 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v122 - v30;
  v32 = type metadata accessor for NSDecimal.FormatStyle(0);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v35 = (uint64_t *)((char *)&v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  v37 = MEMORY[0x1E0C80A78](v36);
  v141 = (uint64_t)&v122 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = a3;
  v133 = a5;
  if (a3 >> 14 >= a5 >> 14)
    goto LABEL_18;
  v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16);
  v39(v31, v142, v22, v37);
  v40 = swift_dynamicCast();
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  if (v40)
  {
    v41(v21, 0, 1, v32);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v21, (uint64_t)v35, type metadata accessor for NSDecimal.FormatStyle);
    v42 = v141;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v35 + *(int *)(v32 + 20), v141, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    swift_storeEnumTagMultiPayload();
    v44 = *v35;
    v43 = v35[1];
    v45 = (uint64_t)v138;
    v46 = v142;
  }
  else
  {
    v41(v21, 1, 1, v32);
    outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for NSDecimal.FormatStyle?);
    v46 = v142;
    ((void (*)(char *, uint64_t, uint64_t))v39)(v28, v142, v22);
    v47 = (uint64_t)v130;
    v48 = v129;
    v49 = swift_dynamicCast();
    v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56);
    v42 = v141;
    if (v49)
    {
      v50(v47, 0, 1, v48);
      v51 = v124;
      outlined init with take of ICUNumberFormatter.Signature(v47, (uint64_t)v124, type metadata accessor for NSDecimal.FormatStyle.Percent);
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v51 + *(int *)(v48 + 20), v42, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      swift_storeEnumTagMultiPayload();
      v44 = *v51;
      v43 = v51[1];
      v45 = (uint64_t)v138;
    }
    else
    {
      v50(v47, 1, 1, v48);
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Percent?);
      ((void (*)(char *, uint64_t, uint64_t))v39)(v123, v46, v22);
      v52 = (uint64_t)v127;
      v53 = v126;
      v54 = swift_dynamicCast();
      v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56);
      v45 = (uint64_t)v138;
      if (!v54)
      {
        v55(v52, 1, 1, v53);
        outlined destroy of Any?(v52, &demangling cache variable for type metadata for NSDecimal.FormatStyle.Currency?);
        *(_QWORD *)v42 = 0;
        *(_BYTE *)(v42 + 8) = 1;
        *(_QWORD *)(v42 + 16) = 0;
        *(_QWORD *)(v42 + 24) = 0;
        *(_QWORD *)(v42 + 32) = 0;
        *(_QWORD *)(v42 + 40) = 0x1FFFFFFFELL;
        *(_QWORD *)(v42 + 56) = 0;
        *(_QWORD *)(v42 + 64) = 0;
        *(_QWORD *)(v42 + 48) = 0;
        *(_DWORD *)(v42 + 72) = 131584;
        *(_WORD *)(v42 + 76) = 512;
        v58 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        v59 = v42 + v58[9];
        v60 = type metadata accessor for FloatingPointRoundingRule();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 1, 1, v60);
        v61 = v42 + v58[10];
        *(_QWORD *)v61 = 0;
        *(_BYTE *)(v61 + 8) = -1;
        *(_BYTE *)(v42 + v58[11]) = 3;
        swift_storeEnumTagMultiPayload();
        if (one-time initialization token for cache != -1)
          goto LABEL_32;
        goto LABEL_9;
      }
      v55(v52, 0, 1, v53);
      v56 = v52;
      v57 = v122;
      outlined init with take of ICUNumberFormatter.Signature(v56, (uint64_t)v122, type metadata accessor for NSDecimal.FormatStyle.Currency);
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v57 + *(int *)(v53 + 24), v42, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      swift_storeEnumTagMultiPayload();
      v44 = *v57;
      v43 = v57[1];
      swift_unknownObjectRetain();
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v57, type metadata accessor for NSDecimal.FormatStyle.Currency);
    }
  }
  while (1)
  {
    v64 = *(_BYTE *)(v46 + *(int *)(v135 + 36));
    outlined init with copy of ICUNumberFormatter.Signature(v42, v45, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    ObjectType = swift_getObjectType();
    v66 = *(uint64_t (**)(uint64_t, unint64_t))(v43 + 64);
    swift_unknownObjectRetain_n();
    v67 = v66(ObjectType, v43);
    v69 = v68;
    swift_unknownObjectRelease();
    v70 = v137;
    v71 = (uint64_t *)(v45 + *(int *)(v137 + 20));
    *v71 = v67;
    v71[1] = v69;
    *(_BYTE *)(v45 + *(int *)(v70 + 24)) = v64;
    if (one-time initialization token for cache != -1)
      swift_once();
    v73 = static ICULegacyNumberFormatter.cache;
    v72 = unk_1EDC3B320;
    v74 = v140;
    outlined init with copy of ICUNumberFormatter.Signature(v45, v140, type metadata accessor for ICULegacyNumberFormatter.Signature);
    v75 = (*(unsigned __int8 *)(v139 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
    v142 = swift_allocObject();
    outlined init with take of ICUNumberFormatter.Signature(v74, v142 + v75, type metadata accessor for ICULegacyNumberFormatter.Signature);
    v76 = (uint64_t *)(v72 + 16);
    v46 = v72 + 24;
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v72 + 24));
    specialized closure #1 in FormatterCache.formatter(for:creator:)(v72 + 16, v45, v143);
    os_unfair_lock_unlock((os_unfair_lock_t)(v72 + 24));
    swift_release();
    if (v143[0])
    {
      swift_release();
      goto LABEL_14;
    }
    implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    v89 = v88;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v72 + 24));
    if (v73 >= *(_QWORD *)(*(_QWORD *)(v72 + 16) + 16))
      swift_bridgeObjectRetain();
    else
      *v76 = MEMORY[0x1E0DEE9E0];
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = *v76;
    v91 = v144[0];
    *v76 = 0x8000000000000000;
    v93 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
    v94 = *(_QWORD *)(v91 + 16);
    v95 = (v92 & 1) == 0;
    v96 = v94 + v95;
    if (!__OFADD__(v94, v95))
      break;
    __break(1u);
LABEL_32:
    swift_once();
LABEL_9:
    v62 = static LocaleCache.cache + 16;
    v63 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v63);
    closure #1 in LocaleCache.autoupdatingCurrent.getter(v62, v143);
    os_unfair_lock_unlock(v63);
    swift_release_n();
    v44 = v143[0];
    v43 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  }
  if (*(_QWORD *)(v91 + 24) < v96)
  {
    v97 = v92;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v96, isUniquelyReferenced_nonNull_native);
    v98 = v144[0];
    v99 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
    if ((v97 & 1) != (v100 & 1))
      goto LABEL_72;
    v93 = v99;
    if ((v97 & 1) == 0)
    {
LABEL_68:
      v120 = v140;
      v121 = v93;
      outlined init with copy of ICUNumberFormatter.Signature(v45, v140, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v121, v120, v89, (_QWORD *)v98);
LABEL_69:
      *(_QWORD *)(v72 + 16) = v98;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v72 + 24));
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_14:
      outlined destroy of ICUNumberFormatter.Signature(v45, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      v77 = String.subscript.getter();
      v79 = v78;
      v81 = v80;
      v83 = v82;
      v144[0] = 0;
      specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v77, v78, v80, v82, v144);
      if ((v84 & 0x100000000) == 0)
      {
        v143[0] = v77;
        v143[1] = v79;
        v143[2] = v81;
        v143[3] = v83;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        v85 = String.Index.init<A>(utf16Offset:in:)();
        swift_unknownObjectRelease();
        swift_release();
        outlined destroy of ICUNumberFormatter.Signature(v141, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
        v86 = 0;
LABEL_19:
        LOBYTE(v143[0]) = v86;
        return v85;
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature(v42, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_18:
      v85 = 0;
      v86 = 1;
      goto LABEL_19;
    }
LABEL_30:
    v101 = *(_QWORD *)(v98 + 56);
    v102 = 8 * v93;
    swift_release();
    *(_QWORD *)(v101 + v102) = v89;
    goto LABEL_69;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v98 = v91;
    if ((v92 & 1) == 0)
      goto LABEL_68;
    goto LABEL_30;
  }
  v127 = (char *)v93;
  LODWORD(v128) = v92;
  v129 = v89;
  v130 = (char *)v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  v103 = static _DictionaryStorage.copy(original:)();
  v98 = v103;
  if (!*(_QWORD *)(v91 + 16))
  {
LABEL_67:
    swift_bridgeObjectRelease();
    v45 = (uint64_t)v138;
    v42 = v141;
    v89 = v129;
    v93 = (unint64_t)v127;
    if ((v128 & 1) == 0)
      goto LABEL_68;
    goto LABEL_30;
  }
  v104 = (char *)(v103 + 64);
  v105 = 1 << *(_BYTE *)(v98 + 32);
  v136 = (char *)(v91 + 64);
  v106 = (unint64_t)(v105 + 63) >> 6;
  if (v98 != v91 || v104 >= &v136[8 * v106])
    memmove(v104, v136, 8 * v106);
  v137 = 0;
  *(_QWORD *)(v98 + 16) = *(_QWORD *)(v91 + 16);
  v107 = 1 << *(_BYTE *)(v91 + 32);
  v108 = -1;
  if (v107 < 64)
    v108 = ~(-1 << v107);
  v109 = v108 & *(_QWORD *)(v91 + 64);
  v135 = (unint64_t)(v107 + 63) >> 6;
  v110 = v140;
  while (1)
  {
    if (v109)
    {
      v111 = __clz(__rbit64(v109));
      v109 &= v109 - 1;
      v112 = v111 | (v137 << 6);
      goto LABEL_41;
    }
    v116 = v137 + 1;
    if (__OFADD__(v137, 1))
    {
      __break(1u);
      goto LABEL_71;
    }
    if (v116 >= v135)
      goto LABEL_67;
    v117 = *(_QWORD *)&v136[8 * v116];
    v118 = v137 + 1;
    if (!v117)
    {
      v118 = v137 + 2;
      if (v137 + 2 >= v135)
        goto LABEL_67;
      v117 = *(_QWORD *)&v136[8 * v118];
      if (!v117)
      {
        v118 = v137 + 3;
        if (v137 + 3 >= v135)
          goto LABEL_67;
        v117 = *(_QWORD *)&v136[8 * v118];
        if (!v117)
        {
          v118 = v137 + 4;
          if (v137 + 4 >= v135)
            goto LABEL_67;
          v117 = *(_QWORD *)&v136[8 * v118];
          if (!v117)
          {
            v118 = v137 + 5;
            if (v137 + 5 >= v135)
              goto LABEL_67;
            v117 = *(_QWORD *)&v136[8 * v118];
            if (!v117)
            {
              v118 = v137 + 6;
              if (v137 + 6 >= v135)
                goto LABEL_67;
              v117 = *(_QWORD *)&v136[8 * v118];
              if (!v117)
              {
                v118 = v137 + 7;
                if (v137 + 7 >= v135)
                  goto LABEL_67;
                v117 = *(_QWORD *)&v136[8 * v118];
                if (!v117)
                {
                  v118 = v137 + 8;
                  if (v137 + 8 >= v135)
                    goto LABEL_67;
                  v117 = *(_QWORD *)&v136[8 * v118];
                  if (!v117)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_66:
    v109 = (v117 - 1) & v117;
    v137 = v118;
    v112 = __clz(__rbit64(v117)) + (v118 << 6);
LABEL_41:
    v113 = *(_QWORD *)(v139 + 72) * v112;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v91 + 48) + v113, v110, type metadata accessor for ICULegacyNumberFormatter.Signature);
    v114 = 8 * v112;
    v115 = *(_QWORD *)(*(_QWORD *)(v91 + 56) + 8 * v112);
    outlined init with take of ICUNumberFormatter.Signature(v110, *(_QWORD *)(v98 + 48) + v113, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v98 + 56) + v114) = v115;
    swift_retain();
  }
  v119 = v137 + 9;
  if (v137 + 9 >= v135)
    goto LABEL_67;
  v117 = *(_QWORD *)&v136[8 * v119];
  if (v117)
  {
    v118 = v137 + 9;
    goto LABEL_66;
  }
  while (1)
  {
    v118 = v119 + 1;
    if (__OFADD__(v119, 1))
      break;
    if (v118 >= v135)
      goto LABEL_67;
    v117 = *(_QWORD *)&v136[8 * v118];
    ++v119;
    if (v117)
      goto LABEL_66;
  }
LABEL_71:
  __break(1u);
LABEL_72:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.ParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t NSDecimal.ParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*NSDecimal.ParseStrategy.formatStyle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.ParseStrategy.lenient.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t NSDecimal.ParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*NSDecimal.ParseStrategy.lenient.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void NSDecimal.ParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 36)));
}

uint64_t static NSDecimal.ParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v9 = type metadata accessor for NSDecimal.ParseStrategy(0, a3, a4, v8);
    v10 = *(_BYTE *)(a1 + *(int *)(v9 + 36)) ^ *(_BYTE *)(a2 + *(int *)(v9 + 36)) ^ 1;
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t NSDecimal.ParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x745374616D726F66 && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65696E656CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t NSDecimal.ParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E65696E656CLL;
  else
    return 0x745374616D726F66;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  char *v0;

  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys(uint64_t a1)
{
  char *v1;

  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys()
{
  char *v0;

  return NSDecimal.ParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = NSDecimal.ParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance NSDecimal.ParseStrategy<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.ParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t NSDecimal.ParseStrategy.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v13 = a2;
  v5 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for NSDecimal.ParseStrategy.CodingKeys(255, v14, v5, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = 0;
  v11 = v15;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t type metadata accessor for NSDecimal.ParseStrategy.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSDecimal.ParseStrategy.CodingKeys);
}

Swift::Int NSDecimal.ParseStrategy.hashValue.getter(uint64_t a1)
{
  uint64_t v1;

  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v1 + *(int *)(a1 + 36)));
  return Hasher._finalize()();
}

uint64_t NSDecimal.ParseStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char v39;
  char v40;

  v30 = a4;
  v32 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSDecimal.ParseStrategy.CodingKeys(255, v8, v9, v10);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>.CodingKeys, v11);
  v36 = type metadata accessor for KeyedDecodingContainer();
  v31 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v13 = (char *)&v29 - v12;
  v35 = a2;
  v33 = a3;
  v15 = type metadata accessor for NSDecimal.ParseStrategy(0, a2, a3, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v29 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v34 = v13;
  v19 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v29 = v16;
  v38 = a1;
  v20 = v18;
  v22 = v31;
  v21 = v32;
  v40 = 0;
  v23 = v34;
  v24 = v36;
  v25 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v20, v37, v25);
  v39 = 1;
  v26 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
  v20[*(int *)(v15 + 36)] = v26 & 1;
  v27 = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v30, v20, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v20, v15);
}

void protocol witness for ParseStrategy.parse(_:) in conformance NSDecimal.ParseStrategy<A>(NSDecimal **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  NSDecimal.ParseStrategy.parse(_:)(*a1, *(Swift::String *)a1);
  if (!v6)
  {
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 16) = v5;
  }
}

uint64_t specialized NSDecimal.ParseStrategy.parse(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  Swift::String v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  Swift::String v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v57;
  Swift::String v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  __int16 v69;
  int v70;
  int v71;
  Swift::String v72;
  int v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  unint64_t v77;
  int v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  Swift::String v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  Swift::String v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v119;
  Swift::String v120;
  int v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  __int16 v133;
  Swift::String v134;
  int v135;
  Swift::String v136;
  Swift::String v137;
  Swift::String v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  Swift::String v142;
  Swift::String v143;
  Swift::String v144;
  uint64_t v145;
  Swift::String v146;
  Swift::String v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t *v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _BYTE v190[20];
  _BYTE v191[140];
  _BYTE v192[140];
  _BYTE v193[144];
  _BYTE v194[40];
  uint64_t v195;
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v171 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v9 = a1;
  v10 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v10 = 11;
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15, v10 | (v9 << 16));
  if ((v12 & 0x100000000) == 0)
    return v11;
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v194);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v194, (uint64_t)&v195);
  if (v196 != 1)
    return v195;
  v182 = v3;
  specialized NSDecimal.init(_:)(3.14);
  v183 = v13;
  v185 = v14;
  LODWORD(v184) = v15;
  v180 = v2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  v16 = *(_QWORD *)(v2 + 8);
  v177 = v2;
  ObjectType = swift_getObjectType();
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 472);
  swift_unknownObjectRetain();
  v181 = v18(ObjectType, v16);
  v179 = v19;
  swift_unknownObjectRelease();
  v20 = *(uint64_t **)(v16 + 464);
  swift_unknownObjectRetain();
  ((void (*)(_BYTE *__return_ptr, uint64_t, uint64_t))v20)(v192, ObjectType, v16);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v192, (uint64_t)v193);
  outlined init with copy of ICUNumberFormatter.Signature(v180, (uint64_t)v8, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v21 = (uint64_t *)&v8[*(int *)(v6 + 20)];
  v22 = v179;
  *v21 = v181;
  v21[1] = v22;
  v178 = v6;
  outlined init with take of LocalePreferences?((uint64_t)v193, (uint64_t)&v8[*(int *)(v6 + 24)]);
  v23 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  v179 = (uint64_t)v8;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  v175 = a1;
  v176 = (void *)a2;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v20 = v182;
    v25 = v183;
    v26 = v185;
    LODWORD(v27) = v184;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v24, v183, v185, v184);
    if (!v20)
      goto LABEL_41;

    swift_release();
    v28 = v26;
    v182 = 0;
  }
  else
  {
    LODWORD(v27) = v184;
    v25 = v183;
    v28 = v185;
  }
  while (2)
  {
    *(_QWORD *)v192 = v25;
    v30 = HIDWORD(v25);
    v31 = HIWORD(v25);
    v32 = v28 >> 16;
    *(_DWORD *)&v192[8] = v28;
    v33 = HIDWORD(v28);
    v34 = HIWORD(v28);
    *(_WORD *)&v192[12] = WORD2(v28);
    v35 = v27;
    v36 = v34;
    v37 = HIWORD(v35);
    *(_WORD *)&v192[14] = v34;
    *(_DWORD *)&v192[16] = v35;
    if (!_So9NSDecimala__length_getter(v192))
    {
      *(_QWORD *)v192 = v25;
      *(_WORD *)&v192[8] = v185;
      *(_WORD *)&v192[10] = v32;
      *(_WORD *)&v192[12] = v33;
      *(_WORD *)&v192[14] = v36;
      *(_DWORD *)&v192[16] = v35;
      if (_So9NSDecimala__isNegative_getter(v192))
      {
        v61 = 5136718;
        v62 = 0xE300000000000000;
        goto LABEL_56;
      }
    }
    *(_QWORD *)v192 = v25;
    *(_WORD *)&v192[8] = v185;
    *(_WORD *)&v192[10] = v32;
    *(_WORD *)&v192[12] = v33;
    *(_WORD *)&v192[14] = v36;
    *(_DWORD *)&v192[16] = v35;
    if (!_So9NSDecimala__length_getter(v192))
    {
      v62 = 0xE100000000000000;
      v61 = 48;
      goto LABEL_56;
    }
    *(_QWORD *)v190 = 0;
    *(_QWORD *)&v190[8] = 0xE000000000000000;
    *(_QWORD *)v192 = v25;
    *(_WORD *)&v192[8] = v185;
    *(_WORD *)&v192[10] = v32;
    *(_WORD *)&v192[12] = v33;
    *(_WORD *)&v192[14] = v36;
    *(_DWORD *)&v192[16] = v35;
    *(_QWORD *)v191 = v25;
    *(_WORD *)&v191[8] = v185;
    *(_WORD *)&v191[10] = v32;
    *(_WORD *)&v191[12] = v33;
    *(_WORD *)&v191[14] = v36;
    *(_DWORD *)&v191[16] = v35;
    if ((int)_So9NSDecimala__exponent_getter(v191) >= 1)
    {
      do
      {
        LODWORD(v184) = v35;
        v38._countAndFlagsBits = 48;
        v38._object = (void *)0xE100000000000000;
        String.append(_:)(v38);
        *(_DWORD *)v191 = v25;
        *(_WORD *)&v191[4] = v30;
        *(_WORD *)&v191[6] = v31;
        *(_WORD *)&v191[8] = v185;
        *(_WORD *)&v191[10] = v32;
        *(_WORD *)&v191[12] = v33;
        *(_WORD *)&v191[14] = v36;
        *(_WORD *)&v191[16] = v184;
        *(_WORD *)&v191[18] = v37;
        v39 = _So9NSDecimala__exponent_getter(v191);
        _So9NSDecimala__exponent_setter((v39 - 1), v192);
        v25 = *(unsigned int *)v192;
        LOWORD(v30) = *(_WORD *)&v192[4];
        LOWORD(v31) = *(_WORD *)&v192[6];
        LOWORD(v32) = *(_WORD *)&v192[10];
        LOWORD(v33) = *(_WORD *)&v192[12];
        v36 = *(_WORD *)&v192[14];
        v35 = *(unsigned __int16 *)&v192[16];
        v37 = *(unsigned __int16 *)&v192[18];
        *(_DWORD *)v191 = *(_DWORD *)v192;
        *(_WORD *)&v191[4] = *(_WORD *)&v192[4];
        *(_WORD *)&v191[6] = *(_WORD *)&v192[6];
        v185 = *(unsigned __int16 *)&v192[8];
        *(_WORD *)&v191[8] = *(_WORD *)&v192[8];
        *(_WORD *)&v191[10] = *(_WORD *)&v192[10];
        *(_WORD *)&v191[12] = *(_WORD *)&v192[12];
        *(_WORD *)&v191[14] = *(_WORD *)&v192[14];
        *(_WORD *)&v191[16] = *(_WORD *)&v192[16];
        *(_WORD *)&v191[18] = *(_WORD *)&v192[18];
      }
      while ((int)_So9NSDecimala__exponent_getter(v191) > 0);
    }
    *(_DWORD *)v191 = v25;
    *(_WORD *)&v191[4] = v30;
    *(_WORD *)&v191[6] = v31;
    *(_WORD *)&v191[8] = v185;
    *(_WORD *)&v191[10] = v32;
    *(_WORD *)&v191[12] = v33;
    *(_WORD *)&v191[14] = v36;
    *(_WORD *)&v191[16] = v35;
    *(_WORD *)&v191[18] = v37;
    v40 = _So9NSDecimala__exponent_getter(v191);
    v41 = v185;
    if (!v40)
    {
      _So9NSDecimala__exponent_setter(1, v192);
      v25 = *(unsigned int *)v192;
      LOWORD(v30) = *(_WORD *)&v192[4];
      LOWORD(v31) = *(_WORD *)&v192[6];
      v41 = *(unsigned __int16 *)&v192[8];
      LOWORD(v32) = *(_WORD *)&v192[10];
      LOWORD(v33) = *(_WORD *)&v192[12];
      v36 = *(_WORD *)&v192[14];
      v35 = *(unsigned __int16 *)&v192[16];
      v37 = *(unsigned __int16 *)&v192[18];
    }
    v183 = v25;
    *(_DWORD *)v191 = v25;
    *(_WORD *)&v191[4] = v30;
    *(_WORD *)&v191[6] = v31;
    v185 = v41;
    *(_WORD *)&v191[8] = v41;
    *(_WORD *)&v191[10] = v32;
    *(_WORD *)&v191[12] = v33;
    *(_WORD *)&v191[14] = v36;
    *(_WORD *)&v191[16] = v35;
    LODWORD(v181) = v37;
    *(_WORD *)&v191[18] = v37;
    if (!_So9NSDecimala__length_getter(v191))
    {
      v42 = v183;
      v43 = v185;
      v44 = v181;
LABEL_45:
      LODWORD(v181) = v44;
      *(_DWORD *)v191 = v42;
      *(_WORD *)&v191[4] = v30;
      *(_WORD *)&v191[6] = v31;
      *(_WORD *)&v191[8] = v43;
      *(_WORD *)&v191[10] = v32;
      *(_WORD *)&v191[12] = v33;
      *(_WORD *)&v191[14] = v36;
      *(_WORD *)&v191[16] = v35;
      *(_WORD *)&v191[18] = v44;
      v65 = v43;
      v66 = v42;
      v67 = _So9NSDecimala__exponent_getter(v191);
      v68 = v66;
      if (v67 <= 0)
      {
        v183 = v66;
        *(_DWORD *)v191 = v66;
        *(_WORD *)&v191[4] = v30;
        *(_WORD *)&v191[6] = v31;
        v185 = v65;
        *(_WORD *)&v191[8] = v65;
        *(_WORD *)&v191[10] = v32;
        *(_WORD *)&v191[12] = v33;
        *(_WORD *)&v191[14] = v36;
        *(_WORD *)&v191[16] = v35;
        v70 = v181;
        *(_WORD *)&v191[18] = v181;
        v71 = _So9NSDecimala__exponent_getter(v191);
        LODWORD(v184) = v35;
        if (v71)
        {
          v69 = v185;
          do
          {
            v72._countAndFlagsBits = 48;
            v72._object = (void *)0xE100000000000000;
            String.append(_:)(v72);
            *(_DWORD *)v191 = v183;
            *(_WORD *)&v191[4] = v30;
            *(_WORD *)&v191[6] = v31;
            *(_WORD *)&v191[8] = v69;
            *(_WORD *)&v191[10] = v32;
            *(_WORD *)&v191[12] = v33;
            *(_WORD *)&v191[14] = v36;
            *(_WORD *)&v191[16] = v184;
            *(_WORD *)&v191[18] = v70;
            v73 = _So9NSDecimala__exponent_getter(v191);
            _So9NSDecimala__exponent_setter((v73 + 1), v192);
            LOWORD(v30) = *(_WORD *)&v192[4];
            LOWORD(v31) = *(_WORD *)&v192[6];
            v69 = *(_WORD *)&v192[8];
            LOWORD(v32) = *(_WORD *)&v192[10];
            LOWORD(v33) = *(_WORD *)&v192[12];
            v36 = *(_WORD *)&v192[14];
            v70 = *(unsigned __int16 *)&v192[18];
            v183 = *(unsigned int *)v192;
            *(_DWORD *)v191 = *(_DWORD *)v192;
            *(_WORD *)&v191[4] = *(_WORD *)&v192[4];
            *(_WORD *)&v191[6] = *(_WORD *)&v192[6];
            *(_WORD *)&v191[8] = *(_WORD *)&v192[8];
            *(_WORD *)&v191[10] = *(_WORD *)&v192[10];
            *(_WORD *)&v191[12] = *(_WORD *)&v192[12];
            *(_WORD *)&v191[14] = *(_WORD *)&v192[14];
            LODWORD(v184) = *(unsigned __int16 *)&v192[16];
            *(_WORD *)&v191[16] = *(_WORD *)&v192[16];
            *(_WORD *)&v191[18] = *(_WORD *)&v192[18];
          }
          while (_So9NSDecimala__exponent_getter(v191));
        }
        else
        {
          v69 = v185;
        }
        LODWORD(v181) = v70;
        v74._countAndFlagsBits = 46;
        v74._object = (void *)0xE100000000000000;
        String.append(_:)(v74);
        v75._countAndFlagsBits = 48;
        v75._object = (void *)0xE100000000000000;
        String.append(_:)(v75);
        LOWORD(v35) = v184;
        v68 = v183;
      }
      else
      {
        v69 = v65;
      }
      *(_DWORD *)v191 = v68;
      *(_WORD *)&v191[4] = v30;
      *(_WORD *)&v191[6] = v31;
      *(_WORD *)&v191[8] = v69;
      *(_WORD *)&v191[10] = v32;
      *(_WORD *)&v191[12] = v33;
      *(_WORD *)&v191[14] = v36;
      *(_WORD *)&v191[16] = v35;
      *(_WORD *)&v191[18] = v181;
      if (_So9NSDecimala__isNegative_getter(v191))
      {
        v76._countAndFlagsBits = 45;
        v76._object = (void *)0xE100000000000000;
        String.append(_:)(v76);
      }
      *(_QWORD *)v191 = *(_QWORD *)v190;
      *(_QWORD *)&v191[8] = *(_QWORD *)&v190[8];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      v61 = String.init<A>(_:)();
      v62 = v77;
      goto LABEL_56;
    }
    v25 = 3435973837;
    v42 = v183;
    v43 = v185;
    v44 = v181;
    while (1)
    {
      v183 = v42;
      v185 = v43;
      LODWORD(v181) = v44;
      *(_DWORD *)v191 = v42;
      *(_WORD *)&v191[4] = v30;
      *(_WORD *)&v191[6] = v31;
      *(_WORD *)&v191[8] = v43;
      *(_WORD *)&v191[10] = v32;
      *(_WORD *)&v191[12] = v33;
      *(_WORD *)&v191[14] = v36;
      *(_WORD *)&v191[16] = v35;
      *(_WORD *)&v191[18] = v44;
      if (!_So9NSDecimala__exponent_getter(v191))
      {
        LODWORD(v184) = v35;
        v45._countAndFlagsBits = 46;
        v45._object = (void *)0xE100000000000000;
        String.append(_:)(v45);
        LOWORD(v35) = v184;
      }
      *(_DWORD *)v191 = v183;
      *(_WORD *)&v191[4] = v30;
      *(_WORD *)&v191[6] = v31;
      *(_WORD *)&v191[8] = v185;
      *(_WORD *)&v191[10] = v32;
      *(_WORD *)&v191[12] = v33;
      *(_WORD *)&v191[14] = v36;
      *(_WORD *)&v191[16] = v35;
      *(_WORD *)&v191[18] = v181;
      v46 = _So9NSDecimala__exponent_getter(v191);
      _So9NSDecimala__exponent_setter((v46 + 1), v192);
      v47 = *(unsigned int *)v192;
      v48 = *(_WORD *)&v192[6];
      v184 = *(unsigned __int16 *)&v192[8];
      v185 = *(unsigned __int16 *)&v192[4];
      v183 = *(unsigned __int16 *)&v192[10];
      v181 = *(unsigned __int16 *)&v192[12];
      v173 = *(unsigned __int16 *)&v192[14];
      LODWORD(v174) = *(unsigned __int16 *)&v192[16];
      v172 = *(unsigned __int16 *)&v192[18];
      NSDecimal.asVariableLengthInteger()(*(unsigned int *)v192 | ((unint64_t)*(unsigned __int16 *)&v192[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v192[6] << 48), *(unsigned __int16 *)&v192[8] | ((unint64_t)*(unsigned __int16 *)&v192[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v192[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v192[14] << 48), *(unsigned __int16 *)&v192[16] | (*(unsigned __int16 *)&v192[18] << 16));
      v50 = v49;
      v51 = *(_QWORD *)(v49 + 16);
      if (v51)
        break;
      LODWORD(v31) = 0;
      v27 = MEMORY[0x1E0DEE9D8];
      v55 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v55)
      {
LABEL_31:
        if (!*(_WORD *)(v27 + 2 * v55 + 30))
        {
          do
          {
            *(_QWORD *)(v27 + 16) = v55 - 1;
            if (v55 == 1)
              break;
          }
          while (!*(unsigned __int16 *)(v27 + 28 + 2 * v55--));
        }
      }
LABEL_34:
      swift_bridgeObjectRelease();
      *(_DWORD *)v191 = v47;
      *(_WORD *)&v191[4] = v185;
      *(_WORD *)&v191[6] = v48;
      *(_WORD *)&v191[8] = v184;
      *(_WORD *)&v191[10] = v183;
      *(_WORD *)&v191[12] = v181;
      *(_WORD *)&v191[14] = v173;
      *(_WORD *)&v191[16] = v174;
      *(_WORD *)&v191[18] = v172;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v27);
      v182 = v20;
      if (v20)
        goto LABEL_114;
      v57 = *(_QWORD *)(v27 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v57))
      {
LABEL_113:
        v170 = 0;
        v169 = 3455;
        v168 = 2;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_114:
        swift_bridgeObjectRelease();
        swift_unexpectedError();
        __break(1u);
        goto LABEL_115;
      }
      _So9NSDecimala__length_setter(v57, v191);
      *(_DWORD *)v192 = *(_DWORD *)v191;
      *(_OWORD *)&v192[4] = *(_OWORD *)&v191[4];
      *(_QWORD *)v191 = v31 | 0x30;
      v58._countAndFlagsBits = MEMORY[0x186DA46D0](v191, 1);
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      v183 = *(unsigned int *)v192;
      LOWORD(v30) = *(_WORD *)&v192[4];
      LOWORD(v31) = *(_WORD *)&v192[6];
      v185 = *(unsigned __int16 *)&v192[8];
      LOWORD(v32) = *(_WORD *)&v192[10];
      LOWORD(v33) = *(_WORD *)&v192[12];
      v36 = *(_WORD *)&v192[14];
      LODWORD(v184) = *(unsigned __int16 *)&v192[16];
      v59 = *(unsigned __int16 *)&v192[18];
      *(_DWORD *)v191 = *(_DWORD *)v192;
      *(_WORD *)&v191[4] = *(_WORD *)&v192[4];
      *(_WORD *)&v191[6] = *(_WORD *)&v192[6];
      *(_WORD *)&v191[8] = *(_WORD *)&v192[8];
      *(_WORD *)&v191[10] = *(_WORD *)&v192[10];
      *(_WORD *)&v191[12] = *(_WORD *)&v192[12];
      *(_WORD *)&v191[14] = *(_WORD *)&v192[14];
      *(_WORD *)&v191[16] = *(_WORD *)&v192[16];
      *(_WORD *)&v191[18] = *(_WORD *)&v192[18];
      v60 = _So9NSDecimala__length_getter(v191);
      v42 = v183;
      v44 = v59;
      v43 = v185;
      v35 = v184;
      if (!v60)
        goto LABEL_45;
    }
    v171 = v47;
    v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v27 + 16) = v51;
    bzero((void *)(v27 + 32), 2 * v51);
    v52 = *(unsigned __int16 *)(2 * v51 + v50 + 30);
    v53 = v52 / 0xA;
    do
    {
      *(_WORD *)(v27 + 30 + 2 * v51) = v53;
      LODWORD(v31) = v52 % 0xA;
      if (v51 == 1)
      {
        LODWORD(v47) = v171;
        v55 = *(_QWORD *)(v27 + 16);
        if (!v55)
          goto LABEL_34;
        goto LABEL_31;
      }
      v52 = *(unsigned __int16 *)(v50 + 28 + 2 * v51) | ((_DWORD)v31 << 16);
      v53 = v52 / 0xA;
      v54 = v51 - 2;
      --v51;
    }
    while (v54 < *(_QWORD *)(v27 + 16));
    __break(1u);
LABEL_41:
    v63 = v25;
    v64 = swift_retain_n();
    v181 = (uint64_t)&v171;
    MEMORY[0x1E0C80A78](v64);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v171 - 8), (uint64_t *)v192);
    v182 = v20;
    if (!v20)
    {
      v61 = *(_QWORD *)v192;
      v62 = *(_QWORD *)&v192[8];
      swift_release();
      swift_release_n();
      if (!v62)
      {
        v28 = v185;
        v25 = v63;
        continue;
      }
LABEL_56:
      v188 = v61;
      v189 = v62;
      *(_QWORD *)v192 = specialized NSDecimal.init(_:)(0x3039uLL);
      *(_DWORD *)&v192[8] = v78;
      *(_WORD *)&v192[12] = v79;
      *(_WORD *)&v192[14] = v80;
      *(_WORD *)&v192[16] = v81;
      *(_WORD *)&v192[18] = v82;
      _So9NSDecimala__isNegative_setter_0(v192);
      v185 = *(unsigned int *)v192;
      v181 = *(unsigned __int16 *)&v192[4];
      v183 = *(unsigned __int16 *)&v192[6];
      v83 = *(unsigned __int16 *)&v192[8];
      v84 = *(unsigned __int16 *)&v192[10];
      v85 = *(unsigned __int16 *)&v192[12];
      v86 = *(unsigned __int16 *)&v192[14];
      LODWORD(v87) = *(unsigned __int16 *)&v192[16];
      LODWORD(v184) = *(unsigned __int16 *)&v192[18];
      v88 = *(_QWORD *)(v177 + 8);
      v89 = swift_getObjectType();
      v177 = *(_QWORD *)(v88 + 472);
      swift_unknownObjectRetain();
      v177 = ((uint64_t (*)(uint64_t, uint64_t))v177)(v89, v88);
      v174 = v90;
      swift_unknownObjectRelease();
      v91 = *(uint64_t **)(v88 + 464);
      swift_unknownObjectRetain();
      ((void (*)(_BYTE *__return_ptr, uint64_t, uint64_t))v91)(v191, v89, v88);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v191, (uint64_t)v192);
      v92 = v179;
      outlined init with copy of ICUNumberFormatter.Signature(v180, v179, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      v93 = v178;
      v94 = (uint64_t *)(v92 + *(int *)(v178 + 20));
      v95 = v174;
      *v94 = v177;
      v94[1] = v95;
      outlined init with take of LocalePreferences?((uint64_t)v192, v92 + *(int *)(v93 + 24));
      v96 = specialized static ICUNumberFormatter._create(with:)(v92);
      outlined destroy of ICUNumberFormatter.Signature(v92, type metadata accessor for ICUNumberFormatter.Signature);
      if (v96)
      {
        v97 = *(_QWORD *)(v96 + 16);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        v180 = v96;
        v98 = v181;
        v91 = v182;
        v99 = v184;
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v97, v185 | (v181 << 32) | (v183 << 48), v83 | (v84 << 16) | (v85 << 32) | (v86 << 48), v87 | ((_DWORD)v184 << 16));
        if (!v91)
          goto LABEL_88;

        swift_release();
        v182 = 0;
      }
      else
      {
        v98 = v181;
        v99 = v184;
      }
      while (1)
      {
        *(_DWORD *)v191 = v185;
        *(_WORD *)&v191[4] = v98;
        v100 = v183;
        *(_WORD *)&v191[6] = v183;
        *(_WORD *)&v191[8] = v83;
        *(_WORD *)&v191[10] = v84;
        *(_WORD *)&v191[12] = v85;
        *(_WORD *)&v191[14] = v86;
        *(_WORD *)&v191[16] = v87;
        *(_WORD *)&v191[18] = v99;
        if (!_So9NSDecimala__length_getter(v191))
        {
          *(_DWORD *)v191 = v185;
          *(_WORD *)&v191[4] = v98;
          *(_WORD *)&v191[6] = v100;
          *(_WORD *)&v191[8] = v83;
          *(_WORD *)&v191[10] = v84;
          *(_WORD *)&v191[12] = v85;
          *(_WORD *)&v191[14] = v86;
          *(_WORD *)&v191[16] = v87;
          *(_WORD *)&v191[18] = v99;
          if (_So9NSDecimala__isNegative_getter(v191))
          {
            v123 = 5136718;
            v124 = 0xE300000000000000;
            goto LABEL_102;
          }
        }
        *(_DWORD *)v191 = v185;
        *(_WORD *)&v191[4] = v98;
        *(_WORD *)&v191[6] = v100;
        *(_WORD *)&v191[8] = v83;
        *(_WORD *)&v191[10] = v84;
        *(_WORD *)&v191[12] = v85;
        *(_WORD *)&v191[14] = v86;
        *(_WORD *)&v191[16] = v87;
        *(_WORD *)&v191[18] = v99;
        if (!_So9NSDecimala__length_getter(v191))
        {
          v124 = 0xE100000000000000;
          v123 = 48;
          goto LABEL_102;
        }
        v186 = 0;
        v187 = 0xE000000000000000;
        *(_DWORD *)v191 = v185;
        *(_WORD *)&v191[4] = v98;
        *(_WORD *)&v191[6] = v100;
        *(_WORD *)&v191[8] = v83;
        *(_WORD *)&v191[10] = v84;
        *(_WORD *)&v191[12] = v85;
        *(_WORD *)&v191[14] = v86;
        *(_WORD *)&v191[16] = v87;
        *(_WORD *)&v191[18] = v99;
        *(_DWORD *)v190 = v185;
        *(_WORD *)&v190[4] = v98;
        *(_WORD *)&v190[6] = v100;
        *(_WORD *)&v190[8] = v83;
        *(_WORD *)&v190[10] = v84;
        *(_WORD *)&v190[12] = v85;
        *(_WORD *)&v190[14] = v86;
        *(_WORD *)&v190[16] = v87;
        *(_WORD *)&v190[18] = v99;
        if ((int)_So9NSDecimala__exponent_getter(v190) >= 1)
        {
          do
          {
            LODWORD(v184) = v99;
            v101._countAndFlagsBits = 48;
            v101._object = (void *)0xE100000000000000;
            String.append(_:)(v101);
            *(_DWORD *)v190 = v185;
            *(_WORD *)&v190[4] = v98;
            *(_WORD *)&v190[6] = v100;
            *(_WORD *)&v190[8] = v83;
            *(_WORD *)&v190[10] = v84;
            *(_WORD *)&v190[12] = v85;
            *(_WORD *)&v190[14] = v86;
            *(_WORD *)&v190[16] = v87;
            *(_WORD *)&v190[18] = v184;
            v102 = _So9NSDecimala__exponent_getter(v190);
            _So9NSDecimala__exponent_setter((v102 - 1), v191);
            v98 = *(unsigned __int16 *)&v191[4];
            v100 = *(unsigned __int16 *)&v191[6];
            LOWORD(v83) = *(_WORD *)&v191[8];
            LOWORD(v84) = *(_WORD *)&v191[10];
            LOWORD(v85) = *(_WORD *)&v191[12];
            LOWORD(v86) = *(_WORD *)&v191[14];
            LOWORD(v87) = *(_WORD *)&v191[16];
            v99 = *(unsigned __int16 *)&v191[18];
            v185 = *(unsigned int *)v191;
            *(_DWORD *)v190 = *(_DWORD *)v191;
            *(_WORD *)&v190[4] = *(_WORD *)&v191[4];
            *(_WORD *)&v190[6] = *(_WORD *)&v191[6];
            *(_WORD *)&v190[8] = *(_WORD *)&v191[8];
            *(_WORD *)&v190[10] = *(_WORD *)&v191[10];
            *(_WORD *)&v190[12] = *(_WORD *)&v191[12];
            *(_WORD *)&v190[14] = *(_WORD *)&v191[14];
            *(_WORD *)&v190[16] = *(_WORD *)&v191[16];
            *(_WORD *)&v190[18] = *(_WORD *)&v191[18];
          }
          while ((int)_So9NSDecimala__exponent_getter(v190) > 0);
        }
        *(_DWORD *)v190 = v185;
        *(_WORD *)&v190[4] = v98;
        *(_WORD *)&v190[6] = v100;
        *(_WORD *)&v190[8] = v83;
        *(_WORD *)&v190[10] = v84;
        *(_WORD *)&v190[12] = v85;
        *(_WORD *)&v190[14] = v86;
        *(_WORD *)&v190[16] = v87;
        *(_WORD *)&v190[18] = v99;
        v103 = _So9NSDecimala__exponent_getter(v190);
        v104 = v185;
        if (!v103)
        {
          _So9NSDecimala__exponent_setter(1, v191);
          v104 = *(unsigned int *)v191;
          v98 = *(unsigned __int16 *)&v191[4];
          v100 = *(unsigned __int16 *)&v191[6];
          LOWORD(v83) = *(_WORD *)&v191[8];
          LOWORD(v84) = *(_WORD *)&v191[10];
          LOWORD(v85) = *(_WORD *)&v191[12];
          LOWORD(v86) = *(_WORD *)&v191[14];
          LOWORD(v87) = *(_WORD *)&v191[16];
          v99 = *(unsigned __int16 *)&v191[18];
        }
        v185 = v104;
        *(_DWORD *)v190 = v104;
        *(_WORD *)&v190[4] = v98;
        v183 = v100;
        *(_WORD *)&v190[6] = v100;
        *(_WORD *)&v190[8] = v83;
        *(_WORD *)&v190[10] = v84;
        *(_WORD *)&v190[12] = v85;
        *(_WORD *)&v190[14] = v86;
        *(_WORD *)&v190[16] = v87;
        LODWORD(v184) = v99;
        *(_WORD *)&v190[18] = v99;
        if (!_So9NSDecimala__length_getter(v190))
          break;
        v105 = v185;
        v106 = v98;
        v107 = v183;
        v108 = v184;
        while (1)
        {
          v185 = v105;
          v181 = v106;
          LODWORD(v184) = v108;
          *(_DWORD *)v190 = v105;
          *(_WORD *)&v190[4] = v106;
          *(_WORD *)&v190[6] = v107;
          *(_WORD *)&v190[8] = v83;
          *(_WORD *)&v190[10] = v84;
          *(_WORD *)&v190[12] = v85;
          *(_WORD *)&v190[14] = v86;
          *(_WORD *)&v190[16] = v87;
          *(_WORD *)&v190[18] = v108;
          if (!_So9NSDecimala__exponent_getter(v190))
          {
            v183 = v107;
            v109._countAndFlagsBits = 46;
            v109._object = (void *)0xE100000000000000;
            String.append(_:)(v109);
            LOWORD(v107) = v183;
          }
          *(_DWORD *)v190 = v185;
          *(_WORD *)&v190[4] = v181;
          *(_WORD *)&v190[6] = v107;
          *(_WORD *)&v190[8] = v83;
          *(_WORD *)&v190[10] = v84;
          *(_WORD *)&v190[12] = v85;
          *(_WORD *)&v190[14] = v86;
          *(_WORD *)&v190[16] = v87;
          *(_WORD *)&v190[18] = v184;
          v110 = _So9NSDecimala__exponent_getter(v190);
          _So9NSDecimala__exponent_setter((v110 + 1), v191);
          v111 = *(unsigned int *)v191;
          LOWORD(v86) = *(_WORD *)&v191[6];
          v184 = *(unsigned __int16 *)&v191[8];
          v185 = *(unsigned __int16 *)&v191[4];
          v183 = *(unsigned __int16 *)&v191[10];
          v181 = *(unsigned __int16 *)&v191[12];
          v179 = *(unsigned __int16 *)&v191[14];
          LODWORD(v180) = *(unsigned __int16 *)&v191[16];
          LODWORD(v178) = *(unsigned __int16 *)&v191[18];
          NSDecimal.asVariableLengthInteger()(*(unsigned int *)v191 | ((unint64_t)*(unsigned __int16 *)&v191[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v191[6] << 48), *(unsigned __int16 *)&v191[8] | ((unint64_t)*(unsigned __int16 *)&v191[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v191[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v191[14] << 48), *(unsigned __int16 *)&v191[16] | (*(unsigned __int16 *)&v191[18] << 16));
          v113 = v112;
          v83 = *(_QWORD *)(v112 + 16);
          if (v83)
            break;
          LODWORD(v85) = 0;
          v84 = MEMORY[0x1E0DEE9D8];
          v117 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          if (v117)
          {
LABEL_78:
            if (!*(_WORD *)(v84 + 2 * v117 + 30))
            {
              do
              {
                *(_QWORD *)(v84 + 16) = v117 - 1;
                if (v117 == 1)
                  break;
              }
              while (!*(unsigned __int16 *)(v84 + 28 + 2 * v117--));
            }
          }
LABEL_81:
          swift_bridgeObjectRelease();
          *(_DWORD *)v190 = v111;
          *(_WORD *)&v190[4] = v185;
          *(_WORD *)&v190[6] = v86;
          *(_WORD *)&v190[8] = v184;
          *(_WORD *)&v190[10] = v183;
          *(_WORD *)&v190[12] = v181;
          *(_WORD *)&v190[14] = v179;
          *(_WORD *)&v190[16] = v180;
          *(_WORD *)&v190[18] = v178;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v84);
          v182 = v91;
          if (v91)
            goto LABEL_114;
          v119 = *(_QWORD *)(v84 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v119))
            goto LABEL_113;
          _So9NSDecimala__length_setter(v119, v190);
          *(_DWORD *)v191 = *(_DWORD *)v190;
          *(_OWORD *)&v191[4] = *(_OWORD *)&v190[4];
          *(_QWORD *)v190 = v85 | 0x30;
          v120._countAndFlagsBits = MEMORY[0x186DA46D0](v190, 1);
          String.append(_:)(v120);
          swift_bridgeObjectRelease();
          v185 = *(unsigned int *)v191;
          v181 = *(unsigned __int16 *)&v191[4];
          v183 = *(unsigned __int16 *)&v191[6];
          LOWORD(v83) = *(_WORD *)&v191[8];
          LOWORD(v84) = *(_WORD *)&v191[10];
          LOWORD(v85) = *(_WORD *)&v191[12];
          LOWORD(v86) = *(_WORD *)&v191[14];
          LOWORD(v87) = *(_WORD *)&v191[16];
          v121 = *(unsigned __int16 *)&v191[18];
          *(_DWORD *)v190 = *(_DWORD *)v191;
          *(_WORD *)&v190[4] = *(_WORD *)&v191[4];
          *(_WORD *)&v190[6] = *(_WORD *)&v191[6];
          *(_WORD *)&v190[8] = *(_WORD *)&v191[8];
          *(_WORD *)&v190[10] = *(_WORD *)&v191[10];
          *(_WORD *)&v190[12] = *(_WORD *)&v191[12];
          *(_WORD *)&v190[14] = *(_WORD *)&v191[14];
          *(_WORD *)&v190[16] = *(_WORD *)&v191[16];
          *(_WORD *)&v190[18] = *(_WORD *)&v191[18];
          v122 = _So9NSDecimala__length_getter(v190);
          v106 = v181;
          v105 = v185;
          v108 = v121;
          v107 = v183;
          if (!v122)
            goto LABEL_92;
        }
        v177 = v111;
        v84 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        v87 = v84 + 30;
        *(_QWORD *)(v84 + 16) = v83;
        bzero((void *)(v84 + 32), 2 * v83);
        v114 = *(unsigned __int16 *)(2 * v83 + v113 + 30);
        v115 = v114 / 0xA;
        do
        {
          *(_WORD *)(v87 + 2 * v83) = v115;
          LODWORD(v85) = v114 % 0xA;
          if (v83 == 1)
          {
            LODWORD(v111) = v177;
            v117 = *(_QWORD *)(v84 + 16);
            if (!v117)
              goto LABEL_81;
            goto LABEL_78;
          }
          v114 = *(unsigned __int16 *)(v113 + 28 + 2 * v83) | ((_DWORD)v85 << 16);
          v115 = v114 / 0xA;
          v116 = v83 - 2;
          --v83;
        }
        while (v116 < *(_QWORD *)(v84 + 16));
        __break(1u);
LABEL_88:
        v125 = swift_retain_n();
        v182 = &v171;
        MEMORY[0x1E0C80A78](v125);
        swift_retain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v171 - 8), (uint64_t *)v191);
        if (v91)
          goto LABEL_116;
        v123 = *(_QWORD *)v191;
        v179 = *(_QWORD *)&v191[8];
        swift_release();
        swift_release_n();
        v182 = 0;
        v98 = v181;
        v99 = v184;
        if (v179)
        {
          v127 = v175;
          v126 = v176;
          v124 = v179;
          goto LABEL_103;
        }
      }
      v105 = v185;
      v106 = v98;
      v107 = v183;
      v108 = v184;
LABEL_92:
      LODWORD(v184) = v108;
      *(_DWORD *)v190 = v105;
      *(_WORD *)&v190[4] = v106;
      *(_WORD *)&v190[6] = v107;
      *(_WORD *)&v190[8] = v83;
      *(_WORD *)&v190[10] = v84;
      *(_WORD *)&v190[12] = v85;
      *(_WORD *)&v190[14] = v86;
      *(_WORD *)&v190[16] = v87;
      *(_WORD *)&v190[18] = v108;
      v128 = v105;
      v129 = v106;
      v130 = _So9NSDecimala__exponent_getter(v190);
      v131 = v128;
      if (v130 <= 0)
      {
        v185 = v128;
        *(_DWORD *)v190 = v128;
        v181 = v129;
        *(_WORD *)&v190[4] = v129;
        *(_WORD *)&v190[6] = v107;
        *(_WORD *)&v190[8] = v83;
        *(_WORD *)&v190[10] = v84;
        *(_WORD *)&v190[12] = v85;
        *(_WORD *)&v190[14] = v86;
        *(_WORD *)&v190[16] = v87;
        LODWORD(v129) = v184;
        *(_WORD *)&v190[18] = v184;
        v132 = _So9NSDecimala__exponent_getter(v190);
        v183 = v107;
        if (v132)
        {
          v133 = v181;
          do
          {
            v134._countAndFlagsBits = 48;
            v134._object = (void *)0xE100000000000000;
            String.append(_:)(v134);
            *(_DWORD *)v190 = v185;
            *(_WORD *)&v190[4] = v133;
            *(_WORD *)&v190[6] = v183;
            *(_WORD *)&v190[8] = v83;
            *(_WORD *)&v190[10] = v84;
            *(_WORD *)&v190[12] = v85;
            *(_WORD *)&v190[14] = v86;
            *(_WORD *)&v190[16] = v87;
            *(_WORD *)&v190[18] = v129;
            v135 = _So9NSDecimala__exponent_getter(v190);
            _So9NSDecimala__exponent_setter((v135 + 1), v191);
            v133 = *(_WORD *)&v191[4];
            LOWORD(v83) = *(_WORD *)&v191[8];
            LOWORD(v84) = *(_WORD *)&v191[10];
            LOWORD(v85) = *(_WORD *)&v191[12];
            LOWORD(v86) = *(_WORD *)&v191[14];
            LOWORD(v87) = *(_WORD *)&v191[16];
            LODWORD(v129) = *(unsigned __int16 *)&v191[18];
            v185 = *(unsigned int *)v191;
            *(_DWORD *)v190 = *(_DWORD *)v191;
            *(_WORD *)&v190[4] = *(_WORD *)&v191[4];
            v183 = *(unsigned __int16 *)&v191[6];
            *(_WORD *)&v190[6] = *(_WORD *)&v191[6];
            *(_WORD *)&v190[8] = *(_WORD *)&v191[8];
            *(_WORD *)&v190[10] = *(_WORD *)&v191[10];
            *(_WORD *)&v190[12] = *(_WORD *)&v191[12];
            *(_WORD *)&v190[14] = *(_WORD *)&v191[14];
            *(_WORD *)&v190[16] = *(_WORD *)&v191[16];
            *(_WORD *)&v190[18] = *(_WORD *)&v191[18];
          }
          while (_So9NSDecimala__exponent_getter(v190));
        }
        else
        {
          v133 = v181;
        }
        LODWORD(v184) = v129;
        v136._countAndFlagsBits = 46;
        v136._object = (void *)0xE100000000000000;
        String.append(_:)(v136);
        v137._countAndFlagsBits = 48;
        v137._object = (void *)0xE100000000000000;
        String.append(_:)(v137);
        LOWORD(v107) = v183;
        v131 = v185;
        LOWORD(v129) = v133;
      }
      *(_DWORD *)v190 = v131;
      *(_WORD *)&v190[4] = v129;
      *(_WORD *)&v190[6] = v107;
      *(_WORD *)&v190[8] = v83;
      *(_WORD *)&v190[10] = v84;
      *(_WORD *)&v190[12] = v85;
      *(_WORD *)&v190[14] = v86;
      *(_WORD *)&v190[16] = v87;
      *(_WORD *)&v190[18] = v184;
      if (_So9NSDecimala__isNegative_getter(v190))
      {
        v138._countAndFlagsBits = 45;
        v138._object = (void *)0xE100000000000000;
        String.append(_:)(v138);
      }
      *(_QWORD *)v190 = v186;
      *(_QWORD *)&v190[8] = v187;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      v123 = String.init<A>(_:)();
      v124 = v139;
LABEL_102:
      v127 = v175;
      v126 = v176;
LABEL_103:
      *(_QWORD *)v190 = v123;
      *(_QWORD *)&v190[8] = v124;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v140 = swift_allocObject();
      *(_OWORD *)(v140 + 16) = xmmword_18205C850;
      *(_QWORD *)(v140 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(v140 + 40) = v141;
      *(_QWORD *)v191 = 0;
      *(_QWORD *)&v191[8] = 0xE000000000000000;
      _StringGuts.grow(_:)(83);
      v142._countAndFlagsBits = 0x7020746F6E6E6143;
      v142._object = (void *)0xED00002065737261;
      String.append(_:)(v142);
      v143._countAndFlagsBits = v127;
      v143._object = v126;
      String.append(_:)(v143);
      v144._object = (void *)0x8000000182309C10;
      v144._countAndFlagsBits = 0xD000000000000039;
      String.append(_:)(v144);
      v145 = MEMORY[0x1E0DEA968];
      _print_unlocked<A, B>(_:_:)();
      v146._countAndFlagsBits = 0x2220726F2022;
      v146._object = (void *)0xE600000000000000;
      String.append(_:)(v146);
      _print_unlocked<A, B>(_:_:)();
      v147._countAndFlagsBits = 34;
      v147._object = (void *)0xE100000000000000;
      String.append(_:)(v147);
      v148 = *(_QWORD *)v191;
      v149 = *(_QWORD *)&v191[8];
      *(_QWORD *)(v140 + 72) = v145;
      *(_QWORD *)(v140 + 48) = v148;
      *(_QWORD *)(v140 + 56) = v149;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v150 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(v140 + 32, (uint64_t)v191);
      v151 = *(_QWORD *)v191;
      v152 = *(_QWORD *)&v191[8];
      swift_retain();
      v153 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v152);
      if ((v154 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v150[(v153 >> 6) + 8] |= 1 << v153;
        v155 = (uint64_t *)(v150[6] + 16 * v153);
        *v155 = v151;
        v155[1] = v152;
        outlined init with take of Any(&v191[16], (_OWORD *)(v150[7] + 32 * v153));
        v156 = v150[2];
        v157 = __OFADD__(v156, 1);
        v158 = v156 + 1;
        if (!v157)
        {
          v150[2] = v158;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v159 = objc_allocWithZone((Class)NSError);
          v160 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v161 = objc_msgSend(v159, sel_initWithDomain_code_userInfo_, v160, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v162 = objc_msgSend(v161, sel_domain);
          v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
          v165 = v164;

          if (v163 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            && v165 == v166)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_109;
          }
          v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v167 & 1) != 0)
          {
LABEL_109:
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v11;
          }
LABEL_112:
          __break(1u);
        }
      }
      __break(1u);
      goto LABEL_112;
    }
    break;
  }
LABEL_115:
  swift_release_n();
  swift_willThrow();
  __break(1u);
LABEL_116:
  swift_release_n();
  result = swift_willThrow();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  Swift::String v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  Swift::String v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  Swift::String v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  Swift::String v59;
  int v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  int v65;
  __int16 v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  unint64_t v80;
  Swift::String v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  Swift::String v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v101;
  Swift::String v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  __int16 v112;
  int v113;
  int v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;
  int v118;
  Swift::String v119;
  int v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  unint64_t v124;
  uint64_t inited;
  uint64_t v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  Swift::String v131;
  Swift::String v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t *v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  _BYTE v153[40];
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BYTE v173[20];
  _BYTE v174[120];
  _BYTE v175[40];
  uint64_t v176;
  char v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1;
  v7 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v7 = 11;
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15, v7 | (v6 << 16));
  if ((v9 & 0x100000000) == 0)
    return v8;
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v175);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v175, (uint64_t)&v176);
  if (v177 != 1)
    return v176;
  v161 = (void *)a2;
  specialized NSDecimal.init(_:)(3.14);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = type metadata accessor for ICUPercentNumberFormatter();
  v17 = static ICUPercentNumberFormatter.create(for:)(v2);
  v160 = a1;
  v162 = (uint64_t *)v16;
  v163 = v2;
  v168 = v11;
  v166 = v13;
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    v167 = v17;
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v18, v11, v13, v15);
    v19 = v15;
    if (!v3)
      goto LABEL_41;

    swift_release();
    v164 = 0;
  }
  else
  {
    v164 = v3;
    v19 = v15;
  }
  while (2)
  {
    *(_QWORD *)v174 = v168;
    v21 = HIDWORD(v168);
    v22 = HIWORD(v168);
    v23 = v166;
    v24 = v166 >> 16;
    *(_QWORD *)&v174[8] = v166;
    v25 = HIDWORD(v166);
    v26 = HIWORD(v166);
    v27 = HIWORD(v19);
    *(_DWORD *)&v174[16] = v19;
    if (!_So9NSDecimala__length_getter(v174))
    {
      *(_DWORD *)v174 = v168;
      *(_WORD *)&v174[4] = v21;
      *(_WORD *)&v174[6] = v22;
      *(_WORD *)&v174[8] = v23;
      *(_WORD *)&v174[10] = v24;
      *(_WORD *)&v174[12] = v25;
      *(_WORD *)&v174[14] = v26;
      *(_DWORD *)&v174[16] = v19;
      if (_So9NSDecimala__isNegative_getter(v174))
      {
        v52 = 5136718;
        v53 = 0xE300000000000000;
        goto LABEL_55;
      }
    }
    *(_DWORD *)v174 = v168;
    *(_WORD *)&v174[4] = v21;
    *(_WORD *)&v174[6] = v22;
    *(_WORD *)&v174[8] = v23;
    *(_WORD *)&v174[10] = v24;
    *(_WORD *)&v174[12] = v25;
    *(_WORD *)&v174[14] = v26;
    *(_DWORD *)&v174[16] = v19;
    if (!_So9NSDecimala__length_getter(v174))
    {
      v53 = 0xE100000000000000;
      v52 = 48;
      goto LABEL_55;
    }
    v171 = 0;
    v172 = 0xE000000000000000;
    *(_DWORD *)v174 = v168;
    *(_WORD *)&v174[4] = v21;
    *(_WORD *)&v174[6] = v22;
    *(_WORD *)&v174[8] = v23;
    *(_WORD *)&v174[10] = v24;
    *(_WORD *)&v174[12] = v25;
    *(_WORD *)&v174[14] = v26;
    *(_DWORD *)&v174[16] = v19;
    *(_DWORD *)v173 = v168;
    *(_WORD *)&v173[4] = v21;
    *(_WORD *)&v173[6] = v22;
    *(_WORD *)&v173[8] = v23;
    *(_WORD *)&v173[10] = v24;
    *(_WORD *)&v173[12] = v25;
    *(_WORD *)&v173[14] = v26;
    *(_DWORD *)&v173[16] = v19;
    if ((int)_So9NSDecimala__exponent_getter(v173) >= 1)
    {
      do
      {
        LODWORD(v167) = v19;
        v28._countAndFlagsBits = 48;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        *(_DWORD *)v173 = v168;
        *(_WORD *)&v173[4] = v21;
        *(_WORD *)&v173[6] = v22;
        *(_WORD *)&v173[8] = v23;
        *(_WORD *)&v173[10] = v24;
        *(_WORD *)&v173[12] = v25;
        *(_WORD *)&v173[14] = v26;
        *(_WORD *)&v173[16] = v167;
        *(_WORD *)&v173[18] = v27;
        v29 = _So9NSDecimala__exponent_getter(v173);
        _So9NSDecimala__exponent_setter((v29 - 1), v174);
        LOWORD(v21) = *(_WORD *)&v174[4];
        LOWORD(v22) = *(_WORD *)&v174[6];
        v23 = *(unsigned __int16 *)&v174[8];
        LOWORD(v24) = *(_WORD *)&v174[10];
        LOWORD(v25) = *(_WORD *)&v174[12];
        LOWORD(v26) = *(_WORD *)&v174[14];
        v19 = *(unsigned __int16 *)&v174[16];
        v27 = *(unsigned __int16 *)&v174[18];
        v168 = *(unsigned int *)v174;
        *(_DWORD *)v173 = *(_DWORD *)v174;
        *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
        *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
        *(_DWORD *)&v173[8] = *(_DWORD *)&v174[8];
        *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
        *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
        *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
        *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
      }
      while ((int)_So9NSDecimala__exponent_getter(v173) > 0);
    }
    *(_DWORD *)v173 = v168;
    *(_WORD *)&v173[4] = v21;
    *(_WORD *)&v173[6] = v22;
    *(_WORD *)&v173[8] = v23;
    *(_WORD *)&v173[10] = v24;
    *(_WORD *)&v173[12] = v25;
    *(_WORD *)&v173[14] = v26;
    *(_WORD *)&v173[16] = v19;
    *(_WORD *)&v173[18] = v27;
    v30 = _So9NSDecimala__exponent_getter(v173);
    v31 = v168;
    if (!v30)
    {
      _So9NSDecimala__exponent_setter(1, v174);
      v31 = *(unsigned int *)v174;
      LOWORD(v21) = *(_WORD *)&v174[4];
      LOWORD(v22) = *(_WORD *)&v174[6];
      v23 = *(unsigned __int16 *)&v174[8];
      LOWORD(v24) = *(_WORD *)&v174[10];
      LOWORD(v25) = *(_WORD *)&v174[12];
      LOWORD(v26) = *(_WORD *)&v174[14];
      v19 = *(unsigned __int16 *)&v174[16];
      v27 = *(unsigned __int16 *)&v174[18];
    }
    v168 = v31;
    *(_DWORD *)v173 = v31;
    *(_WORD *)&v173[4] = v21;
    *(_WORD *)&v173[6] = v22;
    *(_WORD *)&v173[8] = v23;
    *(_WORD *)&v173[10] = v24;
    *(_WORD *)&v173[12] = v25;
    *(_WORD *)&v173[14] = v26;
    LODWORD(v167) = v19;
    *(_WORD *)&v173[16] = v19;
    LODWORD(v165) = v27;
    *(_WORD *)&v173[18] = v27;
    if (!_So9NSDecimala__length_getter(v173))
    {
      v32 = v168;
      v33 = v167;
      v34 = v165;
LABEL_45:
      LODWORD(v165) = v34;
      *(_DWORD *)v173 = v32;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v33;
      *(_WORD *)&v173[18] = v34;
      v55 = v32;
      v56 = v33;
      if ((int)_So9NSDecimala__exponent_getter(v173) <= 0)
      {
        v168 = v55;
        *(_DWORD *)v173 = v55;
        *(_WORD *)&v173[4] = v21;
        *(_WORD *)&v173[6] = v22;
        *(_WORD *)&v173[8] = v23;
        *(_WORD *)&v173[10] = v24;
        *(_WORD *)&v173[12] = v25;
        *(_WORD *)&v173[14] = v26;
        LODWORD(v167) = v56;
        *(_WORD *)&v173[16] = v56;
        *(_WORD *)&v173[18] = v165;
        v57 = _So9NSDecimala__exponent_getter(v173);
        v166 = v23;
        if (v57)
        {
          LOWORD(v56) = v167;
          LOWORD(v58) = v165;
          do
          {
            v59._countAndFlagsBits = 48;
            v59._object = (void *)0xE100000000000000;
            String.append(_:)(v59);
            *(_DWORD *)v173 = v168;
            *(_WORD *)&v173[4] = v21;
            *(_WORD *)&v173[6] = v22;
            *(_WORD *)&v173[8] = v166;
            *(_WORD *)&v173[10] = v24;
            *(_WORD *)&v173[12] = v25;
            *(_WORD *)&v173[14] = v26;
            *(_WORD *)&v173[16] = v56;
            *(_WORD *)&v173[18] = v58;
            v60 = _So9NSDecimala__exponent_getter(v173);
            _So9NSDecimala__exponent_setter((v60 + 1), v174);
            LOWORD(v21) = *(_WORD *)&v174[4];
            LOWORD(v22) = *(_WORD *)&v174[6];
            LOWORD(v24) = *(_WORD *)&v174[10];
            LOWORD(v25) = *(_WORD *)&v174[12];
            LOWORD(v26) = *(_WORD *)&v174[14];
            LOWORD(v56) = *(_WORD *)&v174[16];
            v58 = *(unsigned __int16 *)&v174[18];
            v168 = *(unsigned int *)v174;
            *(_DWORD *)v173 = *(_DWORD *)v174;
            *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
            *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
            v166 = *(unsigned __int16 *)&v174[8];
            *(_DWORD *)&v173[8] = *(_DWORD *)&v174[8];
            *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
            *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
            *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
            *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          }
          while (_So9NSDecimala__exponent_getter(v173));
        }
        else
        {
          LOWORD(v56) = v167;
          v58 = v165;
        }
        LODWORD(v165) = v58;
        v61._countAndFlagsBits = 46;
        v61._object = (void *)0xE100000000000000;
        String.append(_:)(v61);
        v62._countAndFlagsBits = 48;
        v62._object = (void *)0xE100000000000000;
        String.append(_:)(v62);
        LOWORD(v23) = v166;
        LODWORD(v55) = v168;
      }
      *(_DWORD *)v173 = v55;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v56;
      *(_WORD *)&v173[18] = v165;
      if (_So9NSDecimala__isNegative_getter(v173))
      {
        v63._countAndFlagsBits = 45;
        v63._object = (void *)0xE100000000000000;
        String.append(_:)(v63);
      }
      *(_QWORD *)v173 = v171;
      *(_QWORD *)&v173[8] = v172;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      v52 = String.init<A>(_:)();
      v53 = v64;
      goto LABEL_55;
    }
    v19 = -858993459;
    v32 = v168;
    v33 = v167;
    v34 = v165;
    while (1)
    {
      v168 = v32;
      LODWORD(v167) = v33;
      LODWORD(v165) = v34;
      *(_DWORD *)v173 = v32;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v33;
      *(_WORD *)&v173[18] = v34;
      if (!_So9NSDecimala__exponent_getter(v173))
      {
        v166 = v23;
        v35._countAndFlagsBits = 46;
        v35._object = (void *)0xE100000000000000;
        String.append(_:)(v35);
        LOWORD(v23) = v166;
      }
      *(_DWORD *)v173 = v168;
      *(_WORD *)&v173[4] = v21;
      *(_WORD *)&v173[6] = v22;
      *(_WORD *)&v173[8] = v23;
      *(_WORD *)&v173[10] = v24;
      *(_WORD *)&v173[12] = v25;
      *(_WORD *)&v173[14] = v26;
      *(_WORD *)&v173[16] = v167;
      *(_WORD *)&v173[18] = v165;
      v36 = _So9NSDecimala__exponent_getter(v173);
      _So9NSDecimala__exponent_setter((v36 + 1), v174);
      v37 = *(unsigned int *)v174;
      v38 = *(_WORD *)&v174[6];
      v167 = *(unsigned __int16 *)&v174[8];
      v168 = *(unsigned __int16 *)&v174[4];
      v165 = *(unsigned __int16 *)&v174[12];
      v166 = *(unsigned __int16 *)&v174[10];
      v158 = *(unsigned __int16 *)&v174[14];
      LODWORD(v159) = *(unsigned __int16 *)&v174[16];
      v157 = *(unsigned __int16 *)&v174[18];
      NSDecimal.asVariableLengthInteger()(*(unsigned int *)v174 | ((unint64_t)*(unsigned __int16 *)&v174[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[6] << 48), *(unsigned __int16 *)&v174[8] | ((unint64_t)*(unsigned __int16 *)&v174[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v174[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[14] << 48), *(unsigned __int16 *)&v174[16] | (*(unsigned __int16 *)&v174[18] << 16));
      v40 = v39;
      v41 = *(_QWORD *)(v39 + 16);
      if (v41)
        break;
      LODWORD(v21) = 0;
      v42 = MEMORY[0x1E0DEE9D8];
LABEL_30:
      v46 = *(_QWORD *)(v42 + 16);
      if (v46 && !*(_WORD *)(v42 + 2 * v46 + 30))
      {
        do
        {
          *(_QWORD *)(v42 + 16) = v46 - 1;
          if (v46 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v42 + 28 + 2 * v46--));
      }
      swift_bridgeObjectRelease();
      *(_DWORD *)v173 = v37;
      *(_WORD *)&v173[4] = v168;
      *(_WORD *)&v173[6] = v38;
      *(_WORD *)&v173[8] = v167;
      *(_WORD *)&v173[10] = v166;
      *(_WORD *)&v173[12] = v165;
      *(_WORD *)&v173[14] = v158;
      *(_WORD *)&v173[16] = v159;
      *(_WORD *)&v173[18] = v157;
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v42);
      if (v3)
      {
LABEL_113:
        swift_bridgeObjectRelease();
        swift_unexpectedError();
        __break(1u);
LABEL_114:
        v155 = 0;
        v154 = 3455;
        v153[32] = 2;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_115;
      }
      v164 = 0;
      v48 = *(_QWORD *)(v42 + 16);
      swift_bridgeObjectRelease();
      if (HIDWORD(v48))
        goto LABEL_114;
      _So9NSDecimala__length_setter(v48, v173);
      *(_DWORD *)v174 = *(_DWORD *)v173;
      *(_OWORD *)&v174[4] = *(_OWORD *)&v173[4];
      *(_QWORD *)v173 = v21 | 0x30;
      v49._countAndFlagsBits = MEMORY[0x186DA46D0](v173, 1);
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      v168 = *(unsigned int *)v174;
      LOWORD(v21) = *(_WORD *)&v174[4];
      LOWORD(v22) = *(_WORD *)&v174[6];
      v166 = *(unsigned __int16 *)&v174[8];
      LOWORD(v24) = *(_WORD *)&v174[10];
      LOWORD(v25) = *(_WORD *)&v174[12];
      LOWORD(v26) = *(_WORD *)&v174[14];
      LODWORD(v167) = *(unsigned __int16 *)&v174[16];
      v50 = *(unsigned __int16 *)&v174[18];
      *(_DWORD *)v173 = *(_DWORD *)v174;
      *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
      *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
      *(_DWORD *)&v173[8] = *(_DWORD *)&v174[8];
      *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
      *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
      *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
      *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
      v51 = _So9NSDecimala__length_getter(v173);
      v33 = v167;
      v32 = v168;
      v34 = v50;
      v23 = v166;
      if (!v51)
        goto LABEL_45;
    }
    v156 = v37;
    v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v42 + 16) = v41;
    bzero((void *)(v42 + 32), 2 * v41);
    v43 = *(unsigned __int16 *)(2 * v41 + v40 + 30);
    v44 = v43 / 0xA;
    do
    {
      *(_WORD *)(v42 + 30 + 2 * v41) = v44;
      LODWORD(v21) = v43 % 0xA;
      if (v41 == 1)
      {
        LODWORD(v37) = v156;
        goto LABEL_30;
      }
      v43 = *(unsigned __int16 *)(v40 + 28 + 2 * v41) | ((_DWORD)v21 << 16);
      v44 = v43 / 0xA;
      v45 = v41 - 2;
      --v41;
    }
    while (v45 < *(_QWORD *)(v42 + 16));
    __break(1u);
LABEL_41:
    v54 = swift_retain_n();
    MEMORY[0x1E0C80A78](v54);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v153, (uint64_t *)v174);
    if (!v3)
    {
      v52 = *(_QWORD *)v174;
      v53 = *(_QWORD *)&v174[8];
      swift_release();
      swift_release_n();
      v164 = 0;
      if (!v53)
        continue;
LABEL_55:
      v171 = v52;
      v172 = v53;
      *(_QWORD *)v174 = specialized NSDecimal.init(_:)(0x3039uLL);
      *(_DWORD *)&v174[8] = v65;
      *(_WORD *)&v174[12] = v66;
      *(_WORD *)&v174[14] = v67;
      *(_DWORD *)&v174[16] = v68;
      _So9NSDecimala__isNegative_setter_0(v174);
      v69 = *(unsigned int *)v174;
      v168 = *(unsigned __int16 *)&v174[4];
      v166 = *(unsigned __int16 *)&v174[6];
      v70 = *(unsigned __int16 *)&v174[8];
      v71 = *(unsigned __int16 *)&v174[10];
      v72 = *(unsigned __int16 *)&v174[12];
      v73 = *(unsigned __int16 *)&v174[14];
      LODWORD(v74) = *(unsigned __int16 *)&v174[16];
      v75 = *(unsigned __int16 *)&v174[18];
      v76 = static ICUPercentNumberFormatter.create(for:)(v163);
      if (v76)
      {
        v77 = *(_QWORD *)(v76 + 16);
        v167 = v76;
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        v3 = v164;
        v78 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v77, v69 | (v168 << 32) | (v166 << 48), v70 | (v71 << 16) | (v72 << 32) | (v73 << 48), v74 | (v75 << 16));
        if (!v3)
          goto LABEL_87;

        swift_release();
        v164 = 0;
      }
      v79 = v168;
      while (1)
      {
        *(_DWORD *)v174 = v69;
        *(_WORD *)&v174[4] = v79;
        v80 = v166;
        *(_WORD *)&v174[6] = v166;
        *(_WORD *)&v174[8] = v70;
        *(_WORD *)&v174[10] = v71;
        *(_WORD *)&v174[12] = v72;
        *(_WORD *)&v174[14] = v73;
        *(_WORD *)&v174[16] = v74;
        *(_WORD *)&v174[18] = v75;
        if (!_So9NSDecimala__length_getter(v174))
        {
          *(_DWORD *)v174 = v69;
          *(_WORD *)&v174[4] = v168;
          *(_WORD *)&v174[6] = v80;
          *(_WORD *)&v174[8] = v70;
          *(_WORD *)&v174[10] = v71;
          *(_WORD *)&v174[12] = v72;
          *(_WORD *)&v174[14] = v73;
          *(_WORD *)&v174[16] = v74;
          *(_WORD *)&v174[18] = v75;
          if (_So9NSDecimala__isNegative_getter(v174))
          {
            v105 = 5136718;
            v106 = 0xE300000000000000;
            goto LABEL_102;
          }
        }
        *(_DWORD *)v174 = v69;
        *(_WORD *)&v174[4] = v168;
        *(_WORD *)&v174[6] = v80;
        *(_WORD *)&v174[8] = v70;
        *(_WORD *)&v174[10] = v71;
        *(_WORD *)&v174[12] = v72;
        *(_WORD *)&v174[14] = v73;
        *(_WORD *)&v174[16] = v74;
        *(_WORD *)&v174[18] = v75;
        if (!_So9NSDecimala__length_getter(v174))
        {
          v106 = 0xE100000000000000;
          v105 = 48;
          goto LABEL_102;
        }
        v169 = 0;
        v170 = 0xE000000000000000;
        *(_DWORD *)v174 = v69;
        *(_WORD *)&v174[4] = v168;
        *(_WORD *)&v174[6] = v80;
        *(_WORD *)&v174[8] = v70;
        *(_WORD *)&v174[10] = v71;
        *(_WORD *)&v174[12] = v72;
        *(_WORD *)&v174[14] = v73;
        *(_WORD *)&v174[16] = v74;
        *(_WORD *)&v174[18] = v75;
        *(_DWORD *)v173 = v69;
        *(_WORD *)&v173[4] = v168;
        *(_WORD *)&v173[6] = v80;
        *(_WORD *)&v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        *(_WORD *)&v173[18] = v75;
        if ((int)_So9NSDecimala__exponent_getter(v173) >= 1)
        {
          do
          {
            LODWORD(v167) = v75;
            v81._countAndFlagsBits = 48;
            v81._object = (void *)0xE100000000000000;
            String.append(_:)(v81);
            *(_DWORD *)v173 = v69;
            *(_WORD *)&v173[4] = v168;
            *(_WORD *)&v173[6] = v80;
            *(_WORD *)&v173[8] = v70;
            *(_WORD *)&v173[10] = v71;
            *(_WORD *)&v173[12] = v72;
            *(_WORD *)&v173[14] = v73;
            *(_WORD *)&v173[16] = v74;
            *(_WORD *)&v173[18] = v167;
            v82 = _So9NSDecimala__exponent_getter(v173);
            _So9NSDecimala__exponent_setter((v82 - 1), v174);
            v69 = *(unsigned int *)v174;
            v80 = *(unsigned __int16 *)&v174[6];
            LOWORD(v70) = *(_WORD *)&v174[8];
            LOWORD(v71) = *(_WORD *)&v174[10];
            LOWORD(v72) = *(_WORD *)&v174[12];
            LOWORD(v73) = *(_WORD *)&v174[14];
            LOWORD(v74) = *(_WORD *)&v174[16];
            v75 = *(unsigned __int16 *)&v174[18];
            *(_DWORD *)v173 = *(_DWORD *)v174;
            v168 = *(unsigned __int16 *)&v174[4];
            *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
            *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
            *(_DWORD *)&v173[8] = *(_DWORD *)&v174[8];
            *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
            *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
            *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
            *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          }
          while ((int)_So9NSDecimala__exponent_getter(v173) > 0);
        }
        *(_DWORD *)v173 = v69;
        *(_WORD *)&v173[4] = v168;
        *(_WORD *)&v173[6] = v80;
        *(_WORD *)&v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        *(_WORD *)&v173[18] = v75;
        v83 = _So9NSDecimala__exponent_getter(v173);
        v84 = v168;
        if (!v83)
        {
          _So9NSDecimala__exponent_setter(1, v174);
          v69 = *(unsigned int *)v174;
          v84 = *(unsigned __int16 *)&v174[4];
          v80 = *(unsigned __int16 *)&v174[6];
          LOWORD(v70) = *(_WORD *)&v174[8];
          LOWORD(v71) = *(_WORD *)&v174[10];
          LOWORD(v72) = *(_WORD *)&v174[12];
          LOWORD(v73) = *(_WORD *)&v174[14];
          LOWORD(v74) = *(_WORD *)&v174[16];
          v75 = *(unsigned __int16 *)&v174[18];
        }
        *(_DWORD *)v173 = v69;
        v85 = v80;
        v86 = v84;
        *(_WORD *)&v173[4] = v84;
        v165 = v69;
        v166 = v85;
        *(_WORD *)&v173[6] = v85;
        *(_WORD *)&v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        LODWORD(v167) = v75;
        *(_WORD *)&v173[18] = v75;
        if (!_So9NSDecimala__length_getter(v173))
          break;
        v75 = -858993459;
        v69 = 10;
        v87 = v86;
        v88 = v165;
        v89 = v166;
        v90 = v167;
        while (1)
        {
          v165 = v88;
          v168 = v87;
          LODWORD(v167) = v90;
          *(_DWORD *)v173 = v88;
          *(_WORD *)&v173[4] = v87;
          *(_WORD *)&v173[6] = v89;
          *(_WORD *)&v173[8] = v70;
          *(_WORD *)&v173[10] = v71;
          *(_WORD *)&v173[12] = v72;
          *(_WORD *)&v173[14] = v73;
          *(_WORD *)&v173[16] = v74;
          *(_WORD *)&v173[18] = v90;
          if (!_So9NSDecimala__exponent_getter(v173))
          {
            v166 = v89;
            v91._countAndFlagsBits = 46;
            v91._object = (void *)0xE100000000000000;
            String.append(_:)(v91);
            LOWORD(v89) = v166;
          }
          *(_DWORD *)v173 = v165;
          *(_WORD *)&v173[4] = v168;
          *(_WORD *)&v173[6] = v89;
          *(_WORD *)&v173[8] = v70;
          *(_WORD *)&v173[10] = v71;
          *(_WORD *)&v173[12] = v72;
          *(_WORD *)&v173[14] = v73;
          *(_WORD *)&v173[16] = v74;
          *(_WORD *)&v173[18] = v167;
          v92 = _So9NSDecimala__exponent_getter(v173);
          _So9NSDecimala__exponent_setter((v92 + 1), v174);
          v93 = *(unsigned int *)v174;
          LOWORD(v70) = *(_WORD *)&v174[6];
          v167 = *(unsigned __int16 *)&v174[8];
          v168 = *(unsigned __int16 *)&v174[4];
          v165 = *(unsigned __int16 *)&v174[12];
          v166 = *(unsigned __int16 *)&v174[10];
          v162 = (uint64_t *)*(unsigned __int16 *)&v174[14];
          LODWORD(v163) = *(unsigned __int16 *)&v174[16];
          LODWORD(v159) = *(unsigned __int16 *)&v174[18];
          NSDecimal.asVariableLengthInteger()(*(unsigned int *)v174 | ((unint64_t)*(unsigned __int16 *)&v174[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[6] << 48), *(unsigned __int16 *)&v174[8] | ((unint64_t)*(unsigned __int16 *)&v174[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v174[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v174[14] << 48), *(unsigned __int16 *)&v174[16] | (*(unsigned __int16 *)&v174[18] << 16));
          v95 = v94;
          v73 = *(_QWORD *)(v94 + 16);
          if (v73)
            break;
          LODWORD(v71) = 0;
          v72 = MEMORY[0x1E0DEE9D8];
LABEL_76:
          v99 = *(_QWORD *)(v72 + 16);
          if (v99 && !*(_WORD *)(v72 + 2 * v99 + 30))
          {
            do
            {
              *(_QWORD *)(v72 + 16) = v99 - 1;
              if (v99 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v72 + 28 + 2 * v99--));
          }
          swift_bridgeObjectRelease();
          *(_DWORD *)v173 = v93;
          *(_WORD *)&v173[4] = v168;
          *(_WORD *)&v173[6] = v70;
          *(_WORD *)&v173[8] = v167;
          *(_WORD *)&v173[10] = v166;
          *(_WORD *)&v173[12] = v165;
          *(_WORD *)&v173[14] = (_WORD)v162;
          *(_WORD *)&v173[16] = v163;
          *(_WORD *)&v173[18] = v159;
          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v72);
          if (v3)
            goto LABEL_113;
          v164 = 0;
          v101 = *(_QWORD *)(v72 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v101))
            goto LABEL_114;
          _So9NSDecimala__length_setter(v101, v173);
          *(_DWORD *)v174 = *(_DWORD *)v173;
          *(_OWORD *)&v174[4] = *(_OWORD *)&v173[4];
          *(_QWORD *)v173 = v71 | 0x30;
          v102._countAndFlagsBits = MEMORY[0x186DA46D0](v173, 1);
          String.append(_:)(v102);
          swift_bridgeObjectRelease();
          v168 = *(unsigned __int16 *)&v174[4];
          v165 = *(unsigned int *)v174;
          v166 = *(unsigned __int16 *)&v174[6];
          LOWORD(v70) = *(_WORD *)&v174[8];
          LOWORD(v71) = *(_WORD *)&v174[10];
          LOWORD(v72) = *(_WORD *)&v174[12];
          LOWORD(v73) = *(_WORD *)&v174[14];
          LOWORD(v74) = *(_WORD *)&v174[16];
          v103 = *(unsigned __int16 *)&v174[18];
          *(_DWORD *)v173 = *(_DWORD *)v174;
          *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
          *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
          *(_DWORD *)&v173[8] = *(_DWORD *)&v174[8];
          *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
          *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
          *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
          *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          v104 = _So9NSDecimala__length_getter(v173);
          v90 = v103;
          v87 = v168;
          v88 = v165;
          v89 = v166;
          if (!v104)
            goto LABEL_91;
        }
        v158 = v93;
        v72 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        v74 = v72 + 30;
        *(_QWORD *)(v72 + 16) = v73;
        bzero((void *)(v72 + 32), 2 * v73);
        v96 = *(unsigned __int16 *)(2 * v73 + v95 + 30);
        v97 = v96 / 0xA;
        do
        {
          *(_WORD *)(v74 + 2 * v73) = v97;
          LODWORD(v71) = v96 % 0xA;
          if (v73 == 1)
          {
            LODWORD(v93) = v158;
            goto LABEL_76;
          }
          v96 = *(unsigned __int16 *)(v95 + 28 + 2 * v73) | ((_DWORD)v71 << 16);
          v97 = v96 / 0xA;
          v98 = v73 - 2;
          --v73;
        }
        while (v98 < *(_QWORD *)(v72 + 16));
        __break(1u);
LABEL_87:
        v165 = v69;
        v107 = v78;
        v108 = swift_retain_n();
        v162 = &v156;
        MEMORY[0x1E0C80A78](v108);
        swift_retain();
        v163 = v107;
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v153, (uint64_t *)v174);
        v164 = v3;
        if (v3)
          goto LABEL_116;
        v105 = *(_QWORD *)v174;
        v159 = *(_QWORD *)&v174[8];
        swift_release();
        swift_release_n();
        v79 = v168;
        v69 = v165;
        if (v159)
        {
          v109 = v160;
          v110 = v161;
          v106 = v159;
          goto LABEL_103;
        }
      }
      LOWORD(v87) = v86;
      v88 = v165;
      v89 = v166;
      v90 = v167;
LABEL_91:
      LODWORD(v167) = v90;
      *(_DWORD *)v173 = v88;
      *(_WORD *)&v173[4] = v87;
      *(_WORD *)&v173[6] = v89;
      *(_WORD *)&v173[8] = v70;
      *(_WORD *)&v173[10] = v71;
      *(_WORD *)&v173[12] = v72;
      *(_WORD *)&v173[14] = v73;
      *(_WORD *)&v173[16] = v74;
      *(_WORD *)&v173[18] = v90;
      v111 = v88;
      v112 = v87;
      v113 = _So9NSDecimala__exponent_getter(v173);
      v114 = v111;
      v115 = v112;
      v116 = v167;
      if (v113 <= 0)
      {
        v165 = v111;
        *(_DWORD *)v173 = v111;
        v117 = v115;
        *(_WORD *)&v173[4] = v115;
        *(_WORD *)&v173[6] = v89;
        *(_WORD *)&v173[8] = v70;
        *(_WORD *)&v173[10] = v71;
        *(_WORD *)&v173[12] = v72;
        *(_WORD *)&v173[14] = v73;
        *(_WORD *)&v173[16] = v74;
        *(_WORD *)&v173[18] = v167;
        v118 = _So9NSDecimala__exponent_getter(v173);
        v166 = v89;
        if (v118)
        {
          v116 = v167;
          do
          {
            v119._countAndFlagsBits = 48;
            v119._object = (void *)0xE100000000000000;
            String.append(_:)(v119);
            *(_DWORD *)v173 = v165;
            *(_WORD *)&v173[4] = v117;
            *(_WORD *)&v173[6] = v166;
            *(_WORD *)&v173[8] = v70;
            *(_WORD *)&v173[10] = v71;
            *(_WORD *)&v173[12] = v72;
            *(_WORD *)&v173[14] = v73;
            *(_WORD *)&v173[16] = v74;
            *(_WORD *)&v173[18] = v116;
            v120 = _So9NSDecimala__exponent_getter(v173);
            _So9NSDecimala__exponent_setter((v120 + 1), v174);
            v117 = *(_WORD *)&v174[4];
            LOWORD(v70) = *(_WORD *)&v174[8];
            LOWORD(v71) = *(_WORD *)&v174[10];
            LOWORD(v72) = *(_WORD *)&v174[12];
            LOWORD(v73) = *(_WORD *)&v174[14];
            LOWORD(v74) = *(_WORD *)&v174[16];
            v116 = *(_WORD *)&v174[18];
            v165 = *(unsigned int *)v174;
            v166 = *(unsigned __int16 *)&v174[6];
            *(_DWORD *)v173 = *(_DWORD *)v174;
            *(_WORD *)&v173[4] = *(_WORD *)&v174[4];
            *(_WORD *)&v173[6] = *(_WORD *)&v174[6];
            *(_DWORD *)&v173[8] = *(_DWORD *)&v174[8];
            *(_WORD *)&v173[12] = *(_WORD *)&v174[12];
            *(_WORD *)&v173[14] = *(_WORD *)&v174[14];
            *(_WORD *)&v173[16] = *(_WORD *)&v174[16];
            *(_WORD *)&v173[18] = *(_WORD *)&v174[18];
          }
          while (_So9NSDecimala__exponent_getter(v173));
        }
        else
        {
          v116 = v167;
        }
        v121._countAndFlagsBits = 46;
        v121._object = (void *)0xE100000000000000;
        String.append(_:)(v121);
        v122._countAndFlagsBits = 48;
        v122._object = (void *)0xE100000000000000;
        String.append(_:)(v122);
        v114 = v165;
        LOWORD(v89) = v166;
      }
      else
      {
        v117 = v115;
      }
      *(_DWORD *)v173 = v114;
      *(_WORD *)&v173[4] = v117;
      *(_WORD *)&v173[6] = v89;
      *(_WORD *)&v173[8] = v70;
      *(_WORD *)&v173[10] = v71;
      *(_WORD *)&v173[12] = v72;
      *(_WORD *)&v173[14] = v73;
      *(_WORD *)&v173[16] = v74;
      *(_WORD *)&v173[18] = v116;
      if (_So9NSDecimala__isNegative_getter(v173))
      {
        v123._countAndFlagsBits = 45;
        v123._object = (void *)0xE100000000000000;
        String.append(_:)(v123);
      }
      *(_QWORD *)v173 = v169;
      *(_QWORD *)&v173[8] = v170;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
      lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
      v105 = String.init<A>(_:)();
      v106 = v124;
LABEL_102:
      v109 = v160;
      v110 = v161;
LABEL_103:
      *(_QWORD *)v173 = v105;
      *(_QWORD *)&v173[8] = v106;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 40) = v126;
      *(_QWORD *)v174 = 0;
      *(_QWORD *)&v174[8] = 0xE000000000000000;
      _StringGuts.grow(_:)(83);
      v127._countAndFlagsBits = 0x7020746F6E6E6143;
      v127._object = (void *)0xED00002065737261;
      String.append(_:)(v127);
      v128._countAndFlagsBits = v109;
      v128._object = v110;
      String.append(_:)(v128);
      v129._object = (void *)0x8000000182309C10;
      v129._countAndFlagsBits = 0xD000000000000039;
      String.append(_:)(v129);
      v130 = MEMORY[0x1E0DEA968];
      _print_unlocked<A, B>(_:_:)();
      v131._countAndFlagsBits = 0x2220726F2022;
      v131._object = (void *)0xE600000000000000;
      String.append(_:)(v131);
      _print_unlocked<A, B>(_:_:)();
      v132._countAndFlagsBits = 34;
      v132._object = (void *)0xE100000000000000;
      String.append(_:)(v132);
      v133 = *(_QWORD *)v174;
      v134 = *(_QWORD *)&v174[8];
      *(_QWORD *)(inited + 72) = v130;
      *(_QWORD *)(inited + 48) = v133;
      *(_QWORD *)(inited + 56) = v134;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v135 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)v174);
      v136 = *(_QWORD *)v174;
      v137 = *(_QWORD *)&v174[8];
      swift_retain();
      v138 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v137);
      if ((v139 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v135[(v138 >> 6) + 8] |= 1 << v138;
        v140 = (uint64_t *)(v135[6] + 16 * v138);
        *v140 = v136;
        v140[1] = v137;
        outlined init with take of Any(&v174[16], (_OWORD *)(v135[7] + 32 * v138));
        v141 = v135[2];
        v142 = __OFADD__(v141, 1);
        v143 = v141 + 1;
        if (!v142)
        {
          v135[2] = v143;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v144 = objc_allocWithZone((Class)NSError);
          v145 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v146 = objc_msgSend(v144, sel_initWithDomain_code_userInfo_, v145, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v147 = objc_msgSend(v146, sel_domain);
          v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
          v150 = v149;

          if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            && v150 == v151)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_109;
          }
          v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v152 & 1) != 0)
          {
LABEL_109:
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v8;
          }
LABEL_112:
          __break(1u);
        }
      }
      __break(1u);
      goto LABEL_112;
    }
    break;
  }
LABEL_115:
  swift_release_n();
  swift_willThrow();
  __break(1u);
LABEL_116:
  swift_release_n();
  result = swift_willThrow();
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  Swift::String v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  Swift::String v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  Swift::String v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  Swift::String v59;
  int v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  int v65;
  __int16 v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  unint64_t v80;
  Swift::String v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  Swift::String v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v101;
  Swift::String v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  __int16 v114;
  int v115;
  int v116;
  Swift::String v117;
  int v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  unint64_t v122;
  uint64_t inited;
  uint64_t v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  uint64_t v128;
  Swift::String v129;
  Swift::String v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t *v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  id v144;
  id v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  _BYTE v151[40];
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE v171[20];
  _BYTE v172[120];
  _BYTE v173[40];
  uint64_t v174;
  char v175;
  uint64_t v176;

  v4 = v2;
  v176 = *MEMORY[0x1E0C80C00];
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = a1;
  v8 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v8 = 11;
  specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, 0xFuLL, 15, v8 | (v7 << 16));
  if ((v10 & 0x100000000) == 0)
    return v9;
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v173);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v173, (uint64_t)&v174);
  if (v175 != 1)
    return v174;
  v160 = (void *)a2;
  specialized NSDecimal.init(_:)(3.14);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = specialized static ICUCurrencyNumberFormatter.create(for:)(v4);
  v159 = a1;
  v161 = v4;
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v19 = v18;
    v20 = v12;
    v164 = v14;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v19, v12, v14, v16);
    if (!v3)
      goto LABEL_42;

    swift_release();
    v162 = 0;
LABEL_10:
    v14 = v164;
  }
  else
  {
    v20 = v12;
    v162 = v3;
  }
  *(_QWORD *)v172 = v20;
  v22 = HIDWORD(v20);
  v166 = v20;
  v23 = HIWORD(v20);
  v24 = v14 >> 16;
  *(_QWORD *)&v172[8] = v14;
  v25 = HIDWORD(v14);
  v26 = HIWORD(v14);
  v27 = HIWORD(v16);
  *(_DWORD *)&v172[16] = v16;
  if (!_So9NSDecimala__length_getter(v172))
  {
    *(_DWORD *)v172 = v166;
    *(_WORD *)&v172[4] = v22;
    *(_WORD *)&v172[6] = v23;
    *(_QWORD *)&v172[8] = v14;
    *(_DWORD *)&v172[16] = v16;
    if (_So9NSDecimala__isNegative_getter(v172))
    {
      v52 = 5136718;
      v53 = 0xE300000000000000;
      goto LABEL_56;
    }
  }
  *(_DWORD *)v172 = v166;
  *(_WORD *)&v172[4] = v22;
  *(_WORD *)&v172[6] = v23;
  *(_QWORD *)&v172[8] = v14;
  *(_DWORD *)&v172[16] = v16;
  if (!_So9NSDecimala__length_getter(v172))
  {
    v53 = 0xE100000000000000;
    v52 = 48;
    goto LABEL_56;
  }
  v169 = 0;
  v170 = 0xE000000000000000;
  *(_DWORD *)v172 = v166;
  *(_WORD *)&v172[4] = v22;
  *(_WORD *)&v172[6] = v23;
  *(_QWORD *)&v172[8] = v14;
  *(_DWORD *)&v172[16] = v16;
  *(_DWORD *)v171 = v166;
  *(_WORD *)&v171[4] = v22;
  *(_WORD *)&v171[6] = v23;
  *(_QWORD *)&v171[8] = v14;
  *(_DWORD *)&v171[16] = v16;
  if ((int)_So9NSDecimala__exponent_getter(v171) >= 1)
  {
    do
    {
      LODWORD(v165) = v16;
      v28._countAndFlagsBits = 48;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      *(_DWORD *)v171 = v166;
      *(_WORD *)&v171[4] = v22;
      *(_WORD *)&v171[6] = v23;
      *(_WORD *)&v171[8] = v14;
      *(_WORD *)&v171[10] = v24;
      *(_WORD *)&v171[12] = v25;
      *(_WORD *)&v171[14] = v26;
      *(_WORD *)&v171[16] = v165;
      *(_WORD *)&v171[18] = v27;
      v29 = _So9NSDecimala__exponent_getter(v171);
      _So9NSDecimala__exponent_setter((v29 - 1), v172);
      LOWORD(v22) = *(_WORD *)&v172[4];
      LOWORD(v23) = *(_WORD *)&v172[6];
      v14 = *(unsigned __int16 *)&v172[8];
      LOWORD(v24) = *(_WORD *)&v172[10];
      LOWORD(v25) = *(_WORD *)&v172[12];
      LOWORD(v26) = *(_WORD *)&v172[14];
      v16 = *(unsigned __int16 *)&v172[16];
      v27 = *(unsigned __int16 *)&v172[18];
      v166 = *(unsigned int *)v172;
      *(_DWORD *)v171 = *(_DWORD *)v172;
      *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
      *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
      *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
      *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
      *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
      *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
      *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
      *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
    }
    while ((int)_So9NSDecimala__exponent_getter(v171) > 0);
  }
  *(_DWORD *)v171 = v166;
  *(_WORD *)&v171[4] = v22;
  *(_WORD *)&v171[6] = v23;
  *(_WORD *)&v171[8] = v14;
  *(_WORD *)&v171[10] = v24;
  *(_WORD *)&v171[12] = v25;
  *(_WORD *)&v171[14] = v26;
  *(_WORD *)&v171[16] = v16;
  *(_WORD *)&v171[18] = v27;
  v30 = _So9NSDecimala__exponent_getter(v171);
  v31 = v166;
  if (!v30)
  {
    _So9NSDecimala__exponent_setter(1, v172);
    v31 = *(unsigned int *)v172;
    LOWORD(v22) = *(_WORD *)&v172[4];
    LOWORD(v23) = *(_WORD *)&v172[6];
    v14 = *(unsigned __int16 *)&v172[8];
    LOWORD(v24) = *(_WORD *)&v172[10];
    LOWORD(v25) = *(_WORD *)&v172[12];
    LOWORD(v26) = *(_WORD *)&v172[14];
    v16 = *(unsigned __int16 *)&v172[16];
    v27 = *(unsigned __int16 *)&v172[18];
  }
  v166 = v31;
  *(_DWORD *)v171 = v31;
  *(_WORD *)&v171[4] = v22;
  *(_WORD *)&v171[6] = v23;
  *(_WORD *)&v171[8] = v14;
  *(_WORD *)&v171[10] = v24;
  *(_WORD *)&v171[12] = v25;
  *(_WORD *)&v171[14] = v26;
  LODWORD(v165) = v16;
  *(_WORD *)&v171[16] = v16;
  LODWORD(v163) = v27;
  *(_WORD *)&v171[18] = v27;
  if (!_So9NSDecimala__length_getter(v171))
  {
    v32 = v166;
    v33 = v165;
    v34 = v163;
LABEL_46:
    LODWORD(v163) = v34;
    *(_DWORD *)v171 = v32;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v33;
    *(_WORD *)&v171[18] = v34;
    v55 = v32;
    v56 = v33;
    if ((int)_So9NSDecimala__exponent_getter(v171) <= 0)
    {
      v166 = v55;
      *(_DWORD *)v171 = v55;
      *(_WORD *)&v171[4] = v22;
      *(_WORD *)&v171[6] = v23;
      *(_WORD *)&v171[8] = v14;
      *(_WORD *)&v171[10] = v24;
      *(_WORD *)&v171[12] = v25;
      *(_WORD *)&v171[14] = v26;
      LODWORD(v165) = v56;
      *(_WORD *)&v171[16] = v56;
      *(_WORD *)&v171[18] = v163;
      v57 = _So9NSDecimala__exponent_getter(v171);
      v164 = v14;
      if (v57)
      {
        LOWORD(v56) = v165;
        LOWORD(v58) = v163;
        do
        {
          v59._countAndFlagsBits = 48;
          v59._object = (void *)0xE100000000000000;
          String.append(_:)(v59);
          *(_DWORD *)v171 = v166;
          *(_WORD *)&v171[4] = v22;
          *(_WORD *)&v171[6] = v23;
          *(_WORD *)&v171[8] = v164;
          *(_WORD *)&v171[10] = v24;
          *(_WORD *)&v171[12] = v25;
          *(_WORD *)&v171[14] = v26;
          *(_WORD *)&v171[16] = v56;
          *(_WORD *)&v171[18] = v58;
          v60 = _So9NSDecimala__exponent_getter(v171);
          _So9NSDecimala__exponent_setter((v60 + 1), v172);
          LOWORD(v22) = *(_WORD *)&v172[4];
          LOWORD(v23) = *(_WORD *)&v172[6];
          LOWORD(v24) = *(_WORD *)&v172[10];
          LOWORD(v25) = *(_WORD *)&v172[12];
          LOWORD(v26) = *(_WORD *)&v172[14];
          LOWORD(v56) = *(_WORD *)&v172[16];
          v58 = *(unsigned __int16 *)&v172[18];
          v166 = *(unsigned int *)v172;
          *(_DWORD *)v171 = *(_DWORD *)v172;
          *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
          *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
          v164 = *(unsigned __int16 *)&v172[8];
          *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
          *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
          *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
          *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
          *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
          *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        }
        while (_So9NSDecimala__exponent_getter(v171));
      }
      else
      {
        LOWORD(v56) = v165;
        v58 = v163;
      }
      LODWORD(v163) = v58;
      v61._countAndFlagsBits = 46;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 48;
      v62._object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      LOWORD(v14) = v164;
      LODWORD(v55) = v166;
    }
    *(_DWORD *)v171 = v55;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v56;
    *(_WORD *)&v171[18] = v163;
    if (_So9NSDecimala__isNegative_getter(v171))
    {
      v63._countAndFlagsBits = 45;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
    }
    *(_QWORD *)v171 = v169;
    *(_QWORD *)&v171[8] = v170;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    v52 = String.init<A>(_:)();
    v53 = v64;
    goto LABEL_56;
  }
  v16 = -858993459;
  v32 = v166;
  v33 = v165;
  v34 = v163;
  while (1)
  {
    v166 = v32;
    LODWORD(v165) = v33;
    LODWORD(v163) = v34;
    *(_DWORD *)v171 = v32;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v33;
    *(_WORD *)&v171[18] = v34;
    if (!_So9NSDecimala__exponent_getter(v171))
    {
      v164 = v14;
      v35._countAndFlagsBits = 46;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      LOWORD(v14) = v164;
    }
    *(_DWORD *)v171 = v166;
    *(_WORD *)&v171[4] = v22;
    *(_WORD *)&v171[6] = v23;
    *(_WORD *)&v171[8] = v14;
    *(_WORD *)&v171[10] = v24;
    *(_WORD *)&v171[12] = v25;
    *(_WORD *)&v171[14] = v26;
    *(_WORD *)&v171[16] = v165;
    *(_WORD *)&v171[18] = v163;
    v36 = _So9NSDecimala__exponent_getter(v171);
    _So9NSDecimala__exponent_setter((v36 + 1), v172);
    v37 = *(unsigned int *)v172;
    v38 = *(_WORD *)&v172[6];
    v165 = *(unsigned __int16 *)&v172[8];
    v166 = *(unsigned __int16 *)&v172[4];
    v163 = *(unsigned __int16 *)&v172[12];
    v164 = *(unsigned __int16 *)&v172[10];
    v157 = *(unsigned __int16 *)&v172[14];
    LODWORD(v158) = *(unsigned __int16 *)&v172[16];
    LODWORD(v156) = *(unsigned __int16 *)&v172[18];
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v172 | ((unint64_t)*(unsigned __int16 *)&v172[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[6] << 48), *(unsigned __int16 *)&v172[8] | ((unint64_t)*(unsigned __int16 *)&v172[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v172[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[14] << 48), *(unsigned __int16 *)&v172[16] | (*(unsigned __int16 *)&v172[18] << 16));
    v40 = v39;
    v41 = *(_QWORD *)(v39 + 16);
    if (v41)
      break;
    LODWORD(v22) = 0;
    v42 = MEMORY[0x1E0DEE9D8];
LABEL_31:
    v46 = *(_QWORD *)(v42 + 16);
    if (v46 && !*(_WORD *)(v42 + 2 * v46 + 30))
    {
      do
      {
        *(_QWORD *)(v42 + 16) = v46 - 1;
        if (v46 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v42 + 28 + 2 * v46--));
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)v171 = v37;
    *(_WORD *)&v171[4] = v166;
    *(_WORD *)&v171[6] = v38;
    *(_WORD *)&v171[8] = v165;
    *(_WORD *)&v171[10] = v164;
    *(_WORD *)&v171[12] = v163;
    *(_WORD *)&v171[14] = v157;
    *(_WORD *)&v171[16] = (_WORD)v158;
    *(_WORD *)&v171[18] = v156;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v42);
    if (v3)
      goto LABEL_115;
    v162 = 0;
    v48 = *(_QWORD *)(v42 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v48))
    {
LABEL_114:
      v153 = 0;
      v152 = 3455;
      v151[32] = 2;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_115:
      swift_bridgeObjectRelease();
      swift_unexpectedError();
      __break(1u);
      goto LABEL_116;
    }
    _So9NSDecimala__length_setter(v48, v171);
    *(_DWORD *)v172 = *(_DWORD *)v171;
    *(_OWORD *)&v172[4] = *(_OWORD *)&v171[4];
    *(_QWORD *)v171 = v22 | 0x30;
    v49._countAndFlagsBits = MEMORY[0x186DA46D0](v171, 1);
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v166 = *(unsigned int *)v172;
    LOWORD(v22) = *(_WORD *)&v172[4];
    LOWORD(v23) = *(_WORD *)&v172[6];
    v164 = *(unsigned __int16 *)&v172[8];
    LOWORD(v24) = *(_WORD *)&v172[10];
    LOWORD(v25) = *(_WORD *)&v172[12];
    LOWORD(v26) = *(_WORD *)&v172[14];
    LODWORD(v165) = *(unsigned __int16 *)&v172[16];
    v50 = *(unsigned __int16 *)&v172[18];
    *(_DWORD *)v171 = *(_DWORD *)v172;
    *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
    *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
    *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
    *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
    *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
    *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
    *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
    *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
    v51 = _So9NSDecimala__length_getter(v171);
    v33 = v165;
    v32 = v166;
    v34 = v50;
    v14 = v164;
    if (!v51)
      goto LABEL_46;
  }
  v155 = v37;
  v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v20 = v42 + 30;
  *(_QWORD *)(v42 + 16) = v41;
  bzero((void *)(v42 + 32), 2 * v41);
  v43 = *(unsigned __int16 *)(2 * v41 + v40 + 30);
  v44 = v43 / 0xA;
  do
  {
    *(_WORD *)(v20 + 2 * v41) = v44;
    LODWORD(v22) = v43 % 0xA;
    if (v41 == 1)
    {
      LODWORD(v37) = v155;
      goto LABEL_31;
    }
    v43 = *(unsigned __int16 *)(v40 + 28 + 2 * v41) | ((_DWORD)v22 << 16);
    v44 = v43 / 0xA;
    v45 = v41 - 2;
    --v41;
  }
  while (v45 < *(_QWORD *)(v42 + 16));
  __break(1u);
LABEL_42:
  v54 = swift_retain_n();
  MEMORY[0x1E0C80A78](v54);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v151, (uint64_t *)v172);
  v162 = v3;
  if (!v3)
  {
    v52 = *(_QWORD *)v172;
    v53 = *(_QWORD *)&v172[8];
    swift_release();
    swift_release_n();
    if (!v53)
      goto LABEL_10;
LABEL_56:
    v169 = v52;
    v170 = v53;
    *(_QWORD *)v172 = specialized NSDecimal.init(_:)(0x3039uLL);
    *(_DWORD *)&v172[8] = v65;
    *(_WORD *)&v172[12] = v66;
    *(_WORD *)&v172[14] = v67;
    *(_DWORD *)&v172[16] = v68;
    _So9NSDecimala__isNegative_setter_0(v172);
    v69 = *(unsigned int *)v172;
    v166 = *(unsigned __int16 *)&v172[4];
    v70 = *(unsigned __int16 *)&v172[6];
    v71 = *(unsigned __int16 *)&v172[8];
    v72 = *(unsigned __int16 *)&v172[10];
    v73 = *(unsigned __int16 *)&v172[12];
    v74 = *(unsigned __int16 *)&v172[14];
    LODWORD(v75) = *(unsigned __int16 *)&v172[16];
    v76 = *(unsigned __int16 *)&v172[18];
    v77 = specialized static ICUCurrencyNumberFormatter.create(for:)(v161);
    v164 = v70;
    if (v77)
    {
      v163 = *(_QWORD *)(v77 + 16);
      v165 = v77;
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      v3 = v162;
      v78 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v163, v69 | (v166 << 32) | (v70 << 48), v71 | (v72 << 16) | (v73 << 32) | (v74 << 48), v75 | (v76 << 16));
      if (!v3)
        goto LABEL_88;

      swift_release();
      v162 = 0;
    }
    v79 = v166;
    while (1)
    {
      *(_DWORD *)v172 = v69;
      *(_WORD *)&v172[4] = v79;
      v80 = v164;
      *(_WORD *)&v172[6] = v164;
      *(_WORD *)&v172[8] = v71;
      *(_WORD *)&v172[10] = v72;
      *(_WORD *)&v172[12] = v73;
      *(_WORD *)&v172[14] = v74;
      *(_WORD *)&v172[16] = v75;
      *(_WORD *)&v172[18] = v76;
      if (!_So9NSDecimala__length_getter(v172))
      {
        *(_DWORD *)v172 = v69;
        *(_WORD *)&v172[4] = v166;
        *(_WORD *)&v172[6] = v80;
        *(_WORD *)&v172[8] = v71;
        *(_WORD *)&v172[10] = v72;
        *(_WORD *)&v172[12] = v73;
        *(_WORD *)&v172[14] = v74;
        *(_WORD *)&v172[16] = v75;
        *(_WORD *)&v172[18] = v76;
        if (_So9NSDecimala__isNegative_getter(v172))
        {
          v105 = 5136718;
          v106 = 0xE300000000000000;
          goto LABEL_103;
        }
      }
      *(_DWORD *)v172 = v69;
      *(_WORD *)&v172[4] = v166;
      *(_WORD *)&v172[6] = v80;
      *(_WORD *)&v172[8] = v71;
      *(_WORD *)&v172[10] = v72;
      *(_WORD *)&v172[12] = v73;
      *(_WORD *)&v172[14] = v74;
      *(_WORD *)&v172[16] = v75;
      *(_WORD *)&v172[18] = v76;
      if (!_So9NSDecimala__length_getter(v172))
      {
        v106 = 0xE100000000000000;
        v105 = 48;
        goto LABEL_103;
      }
      v167 = 0;
      v168 = 0xE000000000000000;
      *(_DWORD *)v172 = v69;
      *(_WORD *)&v172[4] = v166;
      *(_WORD *)&v172[6] = v80;
      *(_WORD *)&v172[8] = v71;
      *(_WORD *)&v172[10] = v72;
      *(_WORD *)&v172[12] = v73;
      *(_WORD *)&v172[14] = v74;
      *(_WORD *)&v172[16] = v75;
      *(_WORD *)&v172[18] = v76;
      *(_DWORD *)v171 = v69;
      *(_WORD *)&v171[4] = v166;
      *(_WORD *)&v171[6] = v80;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      *(_WORD *)&v171[18] = v76;
      if ((int)_So9NSDecimala__exponent_getter(v171) >= 1)
      {
        do
        {
          LODWORD(v165) = v76;
          v81._countAndFlagsBits = 48;
          v81._object = (void *)0xE100000000000000;
          String.append(_:)(v81);
          *(_DWORD *)v171 = v69;
          *(_WORD *)&v171[4] = v166;
          *(_WORD *)&v171[6] = v80;
          *(_WORD *)&v171[8] = v71;
          *(_WORD *)&v171[10] = v72;
          *(_WORD *)&v171[12] = v73;
          *(_WORD *)&v171[14] = v74;
          *(_WORD *)&v171[16] = v75;
          *(_WORD *)&v171[18] = v165;
          v82 = _So9NSDecimala__exponent_getter(v171);
          _So9NSDecimala__exponent_setter((v82 - 1), v172);
          v69 = *(unsigned int *)v172;
          v80 = *(unsigned __int16 *)&v172[6];
          LOWORD(v71) = *(_WORD *)&v172[8];
          LOWORD(v72) = *(_WORD *)&v172[10];
          LOWORD(v73) = *(_WORD *)&v172[12];
          LOWORD(v74) = *(_WORD *)&v172[14];
          LOWORD(v75) = *(_WORD *)&v172[16];
          v76 = *(unsigned __int16 *)&v172[18];
          *(_DWORD *)v171 = *(_DWORD *)v172;
          v166 = *(unsigned __int16 *)&v172[4];
          *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
          *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
          *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
          *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
          *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
          *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
          *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
          *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        }
        while ((int)_So9NSDecimala__exponent_getter(v171) > 0);
      }
      *(_DWORD *)v171 = v69;
      *(_WORD *)&v171[4] = v166;
      *(_WORD *)&v171[6] = v80;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      *(_WORD *)&v171[18] = v76;
      v83 = _So9NSDecimala__exponent_getter(v171);
      v84 = v166;
      if (!v83)
      {
        _So9NSDecimala__exponent_setter(1, v172);
        v69 = *(unsigned int *)v172;
        v84 = *(unsigned __int16 *)&v172[4];
        v80 = *(unsigned __int16 *)&v172[6];
        LOWORD(v71) = *(_WORD *)&v172[8];
        LOWORD(v72) = *(_WORD *)&v172[10];
        LOWORD(v73) = *(_WORD *)&v172[12];
        LOWORD(v74) = *(_WORD *)&v172[14];
        LOWORD(v75) = *(_WORD *)&v172[16];
        v76 = *(unsigned __int16 *)&v172[18];
      }
      *(_DWORD *)v171 = v69;
      v85 = v80;
      v86 = v84;
      *(_WORD *)&v171[4] = v84;
      v163 = v69;
      v164 = v85;
      *(_WORD *)&v171[6] = v85;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      LODWORD(v165) = v76;
      *(_WORD *)&v171[18] = v76;
      if (!_So9NSDecimala__length_getter(v171))
        break;
      v76 = -858993459;
      v69 = 10;
      v87 = v86;
      v88 = v163;
      v89 = v164;
      v90 = v165;
      while (1)
      {
        v163 = v88;
        v166 = v87;
        LODWORD(v165) = v90;
        *(_DWORD *)v171 = v88;
        *(_WORD *)&v171[4] = v87;
        *(_WORD *)&v171[6] = v89;
        *(_WORD *)&v171[8] = v71;
        *(_WORD *)&v171[10] = v72;
        *(_WORD *)&v171[12] = v73;
        *(_WORD *)&v171[14] = v74;
        *(_WORD *)&v171[16] = v75;
        *(_WORD *)&v171[18] = v90;
        if (!_So9NSDecimala__exponent_getter(v171))
        {
          v164 = v89;
          v91._countAndFlagsBits = 46;
          v91._object = (void *)0xE100000000000000;
          String.append(_:)(v91);
          LOWORD(v89) = v164;
        }
        *(_DWORD *)v171 = v163;
        *(_WORD *)&v171[4] = v166;
        *(_WORD *)&v171[6] = v89;
        *(_WORD *)&v171[8] = v71;
        *(_WORD *)&v171[10] = v72;
        *(_WORD *)&v171[12] = v73;
        *(_WORD *)&v171[14] = v74;
        *(_WORD *)&v171[16] = v75;
        *(_WORD *)&v171[18] = v165;
        v92 = _So9NSDecimala__exponent_getter(v171);
        _So9NSDecimala__exponent_setter((v92 + 1), v172);
        v93 = *(unsigned int *)v172;
        LOWORD(v71) = *(_WORD *)&v172[6];
        v165 = *(unsigned __int16 *)&v172[8];
        v166 = *(unsigned __int16 *)&v172[4];
        v163 = *(unsigned __int16 *)&v172[12];
        v164 = *(unsigned __int16 *)&v172[10];
        v158 = (uint64_t *)*(unsigned __int16 *)&v172[14];
        LODWORD(v161) = *(unsigned __int16 *)&v172[16];
        LODWORD(v157) = *(unsigned __int16 *)&v172[18];
        NSDecimal.asVariableLengthInteger()(*(unsigned int *)v172 | ((unint64_t)*(unsigned __int16 *)&v172[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[6] << 48), *(unsigned __int16 *)&v172[8] | ((unint64_t)*(unsigned __int16 *)&v172[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v172[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v172[14] << 48), *(unsigned __int16 *)&v172[16] | (*(unsigned __int16 *)&v172[18] << 16));
        v95 = v94;
        v74 = *(_QWORD *)(v94 + 16);
        if (v74)
          break;
        LODWORD(v72) = 0;
        v73 = MEMORY[0x1E0DEE9D8];
        v99 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        if (v99)
        {
LABEL_78:
          if (!*(_WORD *)(v73 + 2 * v99 + 30))
          {
            do
            {
              *(_QWORD *)(v73 + 16) = v99 - 1;
              if (v99 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v73 + 28 + 2 * v99--));
          }
        }
LABEL_81:
        swift_bridgeObjectRelease();
        *(_DWORD *)v171 = v93;
        *(_WORD *)&v171[4] = v166;
        *(_WORD *)&v171[6] = v71;
        *(_WORD *)&v171[8] = v165;
        *(_WORD *)&v171[10] = v164;
        *(_WORD *)&v171[12] = v163;
        *(_WORD *)&v171[14] = (_WORD)v158;
        *(_WORD *)&v171[16] = (_WORD)v161;
        *(_WORD *)&v171[18] = v157;
        NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v73);
        v162 = v3;
        if (v3)
          goto LABEL_115;
        v101 = *(_QWORD *)(v73 + 16);
        swift_bridgeObjectRelease();
        if (HIDWORD(v101))
          goto LABEL_114;
        _So9NSDecimala__length_setter(v101, v171);
        *(_DWORD *)v172 = *(_DWORD *)v171;
        *(_OWORD *)&v172[4] = *(_OWORD *)&v171[4];
        *(_QWORD *)v171 = v72 | 0x30;
        v102._countAndFlagsBits = MEMORY[0x186DA46D0](v171, 1);
        String.append(_:)(v102);
        swift_bridgeObjectRelease();
        v166 = *(unsigned __int16 *)&v172[4];
        v163 = *(unsigned int *)v172;
        v164 = *(unsigned __int16 *)&v172[6];
        LOWORD(v71) = *(_WORD *)&v172[8];
        LOWORD(v72) = *(_WORD *)&v172[10];
        LOWORD(v73) = *(_WORD *)&v172[12];
        LOWORD(v74) = *(_WORD *)&v172[14];
        LOWORD(v75) = *(_WORD *)&v172[16];
        v103 = *(unsigned __int16 *)&v172[18];
        *(_DWORD *)v171 = *(_DWORD *)v172;
        *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
        *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
        *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
        *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
        *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
        *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
        *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
        *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        v104 = _So9NSDecimala__length_getter(v171);
        v90 = v103;
        v87 = v166;
        v88 = v163;
        v89 = v164;
        if (!v104)
          goto LABEL_92;
      }
      v156 = v93;
      v73 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      v75 = v73 + 30;
      *(_QWORD *)(v73 + 16) = v74;
      bzero((void *)(v73 + 32), 2 * v74);
      v96 = *(unsigned __int16 *)(2 * v74 + v95 + 30);
      v97 = v96 / 0xA;
      do
      {
        *(_WORD *)(v75 + 2 * v74) = v97;
        LODWORD(v72) = v96 % 0xA;
        if (v74 == 1)
        {
          LODWORD(v93) = v156;
          v99 = *(_QWORD *)(v73 + 16);
          if (!v99)
            goto LABEL_81;
          goto LABEL_78;
        }
        v96 = *(unsigned __int16 *)(v95 + 28 + 2 * v74) | ((_DWORD)v72 << 16);
        v97 = v96 / 0xA;
        v98 = v74 - 2;
        --v74;
      }
      while (v98 < *(_QWORD *)(v73 + 16));
      __break(1u);
LABEL_88:
      v163 = v69;
      v107 = (_QWORD *)v78;
      v108 = swift_retain_n();
      v158 = &v154;
      MEMORY[0x1E0C80A78](v108);
      swift_retain();
      v161 = v107;
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v151, (uint64_t *)v172);
      v162 = v3;
      if (v3)
        goto LABEL_116;
      v105 = *(_QWORD *)v172;
      v157 = *(_QWORD *)&v172[8];
      swift_release();
      swift_release_n();
      v79 = v166;
      v69 = v163;
      if (v157)
      {
        v109 = v160;
        v106 = v157;
        goto LABEL_104;
      }
    }
    v87 = v86;
    v88 = v163;
    v89 = v164;
    v90 = v165;
LABEL_92:
    LODWORD(v165) = v90;
    *(_DWORD *)v171 = v88;
    *(_WORD *)&v171[4] = v87;
    *(_WORD *)&v171[6] = v89;
    *(_WORD *)&v171[8] = v71;
    *(_WORD *)&v171[10] = v72;
    *(_WORD *)&v171[12] = v73;
    *(_WORD *)&v171[14] = v74;
    *(_WORD *)&v171[16] = v75;
    *(_WORD *)&v171[18] = v90;
    v110 = v87;
    v111 = v88;
    v112 = _So9NSDecimala__exponent_getter(v171);
    v113 = v111;
    if (v112 <= 0)
    {
      v163 = v111;
      *(_DWORD *)v171 = v111;
      v166 = v110;
      *(_WORD *)&v171[4] = v110;
      *(_WORD *)&v171[6] = v89;
      *(_WORD *)&v171[8] = v71;
      *(_WORD *)&v171[10] = v72;
      *(_WORD *)&v171[12] = v73;
      *(_WORD *)&v171[14] = v74;
      *(_WORD *)&v171[16] = v75;
      v115 = v165;
      *(_WORD *)&v171[18] = v165;
      v116 = _So9NSDecimala__exponent_getter(v171);
      v164 = v89;
      if (v116)
      {
        v114 = v166;
        do
        {
          v117._countAndFlagsBits = 48;
          v117._object = (void *)0xE100000000000000;
          String.append(_:)(v117);
          *(_DWORD *)v171 = v163;
          *(_WORD *)&v171[4] = v114;
          *(_WORD *)&v171[6] = v164;
          *(_WORD *)&v171[8] = v71;
          *(_WORD *)&v171[10] = v72;
          *(_WORD *)&v171[12] = v73;
          *(_WORD *)&v171[14] = v74;
          *(_WORD *)&v171[16] = v75;
          *(_WORD *)&v171[18] = v115;
          v118 = _So9NSDecimala__exponent_getter(v171);
          _So9NSDecimala__exponent_setter((v118 + 1), v172);
          v114 = *(_WORD *)&v172[4];
          LOWORD(v71) = *(_WORD *)&v172[8];
          LOWORD(v72) = *(_WORD *)&v172[10];
          LOWORD(v73) = *(_WORD *)&v172[12];
          LOWORD(v74) = *(_WORD *)&v172[14];
          LOWORD(v75) = *(_WORD *)&v172[16];
          v115 = *(unsigned __int16 *)&v172[18];
          v163 = *(unsigned int *)v172;
          v164 = *(unsigned __int16 *)&v172[6];
          *(_DWORD *)v171 = *(_DWORD *)v172;
          *(_WORD *)&v171[4] = *(_WORD *)&v172[4];
          *(_WORD *)&v171[6] = *(_WORD *)&v172[6];
          *(_WORD *)&v171[8] = *(_WORD *)&v172[8];
          *(_WORD *)&v171[10] = *(_WORD *)&v172[10];
          *(_WORD *)&v171[12] = *(_WORD *)&v172[12];
          *(_WORD *)&v171[14] = *(_WORD *)&v172[14];
          *(_WORD *)&v171[16] = *(_WORD *)&v172[16];
          *(_WORD *)&v171[18] = *(_WORD *)&v172[18];
        }
        while (_So9NSDecimala__exponent_getter(v171));
      }
      else
      {
        v114 = v166;
      }
      LODWORD(v165) = v115;
      v119._countAndFlagsBits = 46;
      v119._object = (void *)0xE100000000000000;
      String.append(_:)(v119);
      v120._countAndFlagsBits = 48;
      v120._object = (void *)0xE100000000000000;
      String.append(_:)(v120);
      v113 = v163;
      LOWORD(v89) = v164;
    }
    else
    {
      v114 = v110;
    }
    *(_DWORD *)v171 = v113;
    *(_WORD *)&v171[4] = v114;
    *(_WORD *)&v171[6] = v89;
    *(_WORD *)&v171[8] = v71;
    *(_WORD *)&v171[10] = v72;
    *(_WORD *)&v171[12] = v73;
    *(_WORD *)&v171[14] = v74;
    *(_WORD *)&v171[16] = v75;
    *(_WORD *)&v171[18] = v165;
    if (_So9NSDecimala__isNegative_getter(v171))
    {
      v121._countAndFlagsBits = 45;
      v121._object = (void *)0xE100000000000000;
      String.append(_:)(v121);
    }
    *(_QWORD *)v171 = v167;
    *(_QWORD *)&v171[8] = v168;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    v105 = String.init<A>(_:)();
    v106 = v122;
LABEL_103:
    v109 = v160;
LABEL_104:
    *(_QWORD *)v171 = v105;
    *(_QWORD *)&v171[8] = v106;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(inited + 40) = v124;
    *(_QWORD *)v172 = 0;
    *(_QWORD *)&v172[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(83);
    v125._countAndFlagsBits = 0x7020746F6E6E6143;
    v125._object = (void *)0xED00002065737261;
    String.append(_:)(v125);
    v126._countAndFlagsBits = v159;
    v126._object = v109;
    String.append(_:)(v126);
    v127._object = (void *)0x8000000182309C10;
    v127._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v127);
    v128 = MEMORY[0x1E0DEA968];
    _print_unlocked<A, B>(_:_:)();
    v129._countAndFlagsBits = 0x2220726F2022;
    v129._object = (void *)0xE600000000000000;
    String.append(_:)(v129);
    _print_unlocked<A, B>(_:_:)();
    v130._countAndFlagsBits = 34;
    v130._object = (void *)0xE100000000000000;
    String.append(_:)(v130);
    v131 = *(_QWORD *)v172;
    v132 = *(_QWORD *)&v172[8];
    *(_QWORD *)(inited + 72) = v128;
    *(_QWORD *)(inited + 48) = v131;
    *(_QWORD *)(inited + 56) = v132;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v133 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)v172);
    v134 = *(_QWORD *)v172;
    v135 = *(_QWORD *)&v172[8];
    swift_retain();
    v136 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v135);
    if ((v137 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v133[(v136 >> 6) + 8] |= 1 << v136;
      v138 = (uint64_t *)(v133[6] + 16 * v136);
      *v138 = v134;
      v138[1] = v135;
      outlined init with take of Any(&v172[16], (_OWORD *)(v133[7] + 32 * v136));
      v139 = v133[2];
      v140 = __OFADD__(v139, 1);
      v141 = v139 + 1;
      if (!v140)
      {
        v133[2] = v141;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v142 = objc_allocWithZone((Class)NSError);
        v143 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v144 = objc_msgSend(v142, sel_initWithDomain_code_userInfo_, v143, 2048, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v145 = objc_msgSend(v144, sel_domain);
        v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
        v148 = v147;

        if (v146 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v148 == v149)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_110;
        }
        v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v150 & 1) != 0)
        {
LABEL_110:
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v9;
        }
LABEL_113:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_113;
  }
LABEL_116:
  swift_release_n();
  result = swift_willThrow();
  __break(1u);
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal.ParseStrategy.parse(_:)(NSDecimal *__return_ptr retstr, Swift::String a2)
{
  int64_t v2;
  int64_t v3;
  unint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  __int16 v19;
  int v20;
  __int16 v21;
  __int16 v22;
  int v23;
  void (*v24)(unint64_t *, uint64_t, uint64_t);
  int v25;
  __int16 v26;
  __int16 v27;
  int v28;
  uint64_t inited;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  _BYTE v65[40];
  uint64_t v66;
  char v67;
  char *v68;

  v3 = v2;
  object = (unint64_t)a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v68 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v59 - v12;
  v14 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v14 = countAndFlagsBits;
  v15 = 7;
  if (((object >> 60) & ((countAndFlagsBits & 0x800000000000000) == 0)) != 0)
    v15 = 11;
  NSDecimal.ParseStrategy.parse(_:startingAt:in:)(countAndFlagsBits, object, 0xFuLL, v11, v15 | (v14 << 16), v3);
  if ((v16 & 0x100000000) != 0)
  {
    swift_bridgeObjectRetain();
    specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(countAndFlagsBits, object, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v65);
    swift_bridgeObjectRelease();
    outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v65, (uint64_t)&v66);
    if (v67 == 1)
    {
      specialized NSDecimal.init(_:)(3.14);
      LODWORD(v62) = v17;
      WORD2(v62) = v18;
      HIWORD(v62) = v19;
      LODWORD(v63) = v20;
      WORD2(v63) = v21;
      HIWORD(v63) = v22;
      LODWORD(v64) = v23;
      v24 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v6 + 48);
      v24(&v62, v7, v6);
      v62 = specialized NSDecimal.init(_:)(0x3039uLL);
      LODWORD(v63) = v25;
      WORD2(v63) = v26;
      HIWORD(v63) = v27;
      LODWORD(v64) = v28;
      _So9NSDecimala__isNegative_setter_0(&v62);
      v60 = AssociatedTypeWitness;
      v24(&v62, v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 40) = v30;
      v62 = 0;
      v63 = 0xE000000000000000;
      _StringGuts.grow(_:)(83);
      v31._countAndFlagsBits = 0x7020746F6E6E6143;
      v31._object = (void *)0xED00002065737261;
      String.append(_:)(v31);
      v32._countAndFlagsBits = countAndFlagsBits;
      v32._object = (void *)object;
      String.append(_:)(v32);
      v33._object = (void *)0x8000000182309C10;
      v33._countAndFlagsBits = 0xD000000000000039;
      String.append(_:)(v33);
      _print_unlocked<A, B>(_:_:)();
      v34._countAndFlagsBits = 0x2220726F2022;
      v34._object = (void *)0xE600000000000000;
      String.append(_:)(v34);
      _print_unlocked<A, B>(_:_:)();
      v35._countAndFlagsBits = 34;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v36 = v62;
      v37 = v63;
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = v36;
      *(_QWORD *)(inited + 56) = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v38 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v62);
      v39 = v62;
      v40 = v63;
      swift_retain();
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
      if ((v42 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v38[(v41 >> 6) + 8] |= 1 << v41;
        v43 = (uint64_t *)(v38[6] + 16 * v41);
        *v43 = v39;
        v43[1] = v40;
        outlined init with take of Any(&v64, (_OWORD *)(v38[7] + 32 * v41));
        v44 = v38[2];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        if (!v45)
        {
          v38[2] = v46;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v47 = objc_allocWithZone((Class)NSError);
          v48 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v49 = objc_msgSend(v47, sel_initWithDomain_code_userInfo_, v48, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v50 = objc_msgSend(v49, sel_domain);
          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          v53 = v52;

          if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v53 == v54)
          {
            swift_bridgeObjectRelease_n();
            v55 = v13;
LABEL_14:
            swift_willThrow();
            v57 = *(void (**)(char *, uint64_t))(v61 + 8);
            v58 = v60;
            v57(v68, v60);
            v57(v55, v58);
            return;
          }
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v55 = v13;
          if ((v56 & 1) != 0)
            goto LABEL_14;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.ParseStrategy<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return NSDecimal.ParseStrategy.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.ParseStrategy<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NSDecimal.ParseStrategy.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.ParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  NSDecimal.ParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.ParseStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static NSDecimal.ParseStrategy.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t NSDecimal.init<A>(_:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v10, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return v10;
}

uint64_t (*NSDecimal.init(_:format:lenient:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4))(_QWORD)
{
  return NSDecimal.init(_:format:lenient:)(a1, a2, a3, a4, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, type metadata accessor for NSDecimal.FormatStyle, (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:));
}

{
  return NSDecimal.init(_:format:lenient:)(a1, a2, a3, a4, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, type metadata accessor for NSDecimal.FormatStyle.Percent, (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:));
}

{
  return NSDecimal.init(_:format:lenient:)(a1, a2, a3, a4, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, type metadata accessor for NSDecimal.FormatStyle.Currency, (uint64_t (*)(uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:));
}

uint64_t (*NSDecimal.init(_:format:lenient:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t (*a6)(_QWORD), uint64_t (*a7)(uint64_t, uint64_t)))(_QWORD)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)(_QWORD);

  v20 = a7;
  v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a6;
  outlined init with copy of ICUNumberFormatter.Signature(a3, (uint64_t)v16, a6);
  v16[*(int *)(v14 + 36)] = a4;
  v17 = v20(a1, a2);
  if (!v7)
    a6 = (uint64_t (*)(_QWORD))v17;
  outlined destroy of Any?((uint64_t)v16, a5);
  swift_bridgeObjectRelease();
  outlined destroy of ICUNumberFormatter.Signature(a3, v21);
  return a6;
}

uint64_t NSDecimal.ParseStrategy<>.init(format:lenient:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a3);
}

{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle.Percent, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, a3);
}

{
  return NSDecimal.ParseStrategy<>.init(format:lenient:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle.Currency, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>, a3);
}

uint64_t NSDecimal.ParseStrategy<>.init(format:lenient:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;

  outlined init with take of ICUNumberFormatter.Signature(a1, a5, a3);
  result = __swift_instantiateConcreteTypeFromMangledName(a4);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.ParseStrategy<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.ParseStrategy<A>, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in NSDecimal.ParseStrategy<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t getEnumTagSinglePayload for NSDecimal.ParseStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_181C3C3A4 + 4 * byte_1820FC5F8[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for NSDecimal.ParseStrategy(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t storeEnumTagSinglePayload for NSDecimal.ParseStrategy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C3C63C + 4 * byte_1820FC60B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C3C670 + 4 * byte_1820FC606[v4]))();
}

uint64_t sub_181C3C670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C3C678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C3C680);
  return result;
}

uint64_t sub_181C3C68C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C3C694);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C3C698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C3C6A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in NSDecimal.ParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in NSDecimal.ParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in NSDecimal.ParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t sub_181C3C6DC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0) - 8) + 80);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
      goto LABEL_7;
    v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  v4 = v0 + ((v1 + 16) & ~v1) + *(int *)(v3 + 36);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _expressionCompatibleValue(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[40];

  v5 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v38[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v38[-1] - v9;
  outlined init with copy of Any(a1, (uint64_t)v49);
  outlined init with copy of Any((uint64_t)v49, (uint64_t)v44);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  if (!v48)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for Any?);
  v11 = MEMORY[0x1E0DEA968];
  if (!swift_dynamicCast())
  {
    if ((swift_dynamicCast() & 1) != 0 || (swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if (swift_dynamicCast())
    {
      outlined consume of Data._Representation(v47, *((unint64_t *)&v47 + 1));
      goto LABEL_27;
    }
    if (swift_dynamicCast())
    {

      swift_release();
      swift_release();
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_27;
    type metadata accessor for NSDecimal(0);
    if ((swift_dynamicCast() & 1) != 0 || (swift_dynamicCast() & 1) != 0 || swift_dynamicCast())
      goto LABEL_27;
    type metadata accessor for NSComparisonResult(0);
    if (swift_dynamicCast())
    {
      v13 = v47;
      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEB418];
      *(_QWORD *)a2 = v13;
    }
    else if (swift_dynamicCast())
    {
      outlined init with take of PredicateExpressions.PredicateRegex((uint64_t)v10, (uint64_t)v7);
      v14 = &v7[*(int *)(v5 + 20)];
      v16 = *(_QWORD *)v14;
      v15 = *((_QWORD *)v14 + 1);
      *(_QWORD *)(a2 + 24) = v11;
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v15;
      swift_bridgeObjectRetain();
      outlined destroy of PredicateExpressions.PredicateRegex((uint64_t)v7);
    }
    else
    {
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sequence);
        if (swift_dynamicCast())
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v44);
          v18 = v45;
          v19 = v46;
          v20 = __swift_project_boxed_opaque_existential_1(v44, v45);
          MEMORY[0x1E0C80A78](v20);
          *(&v37 - 4) = v18;
          *(&v37 - 3) = v19;
          *(&v37 - 2) = (uint64_t)_expressionCompatibleValue(for:);
          *(&v37 - 1) = 0;
          MEMORY[0x1E0C80A78](v21);
          *(&v37 - 4) = v18;
          *(&v37 - 3) = v19;
          *(&v37 - 2) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error);
          *(&v37 - 1) = v22;
          v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pypSgIsgnrzr_xSayAFGsAE_pSTRzAFRsd__sAE_pRsd_0_r_0_lIetMgnozo_Tp5((void (*)(_QWORD *__return_ptr, char *, uint64_t *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out Any?, @error @owned Error), (uint64_t)(&v37 - 6), v18, v19);
          if (!v2)
          {
            v24 = v23;
            *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
            *(_QWORD *)a2 = v24;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClosedRange);
          if (!swift_dynamicCast())
          {
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            *v31 = 1;
            swift_willThrow();
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
          }
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v44);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
          v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_18205F0D0;
          v26 = v45;
          v27 = v46;
          __swift_project_boxed_opaque_existential_1(v44, v45);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(v27 + 8))(v42, v40, v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
          v28 = v43;
          v29 = __swift_project_boxed_opaque_existential_1(v42, v43);
          v39 = v28;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(boxed_opaque_existential_1, v29, v28);
          _expressionCompatibleValue(for:)(v38);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
          if (v2)
          {
            *(_QWORD *)(v25 + 16) = 0;
            swift_release();
          }
          else
          {
            v32 = v45;
            v33 = v46;
            __swift_project_boxed_opaque_existential_1(v44, v45);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(v33 + 8))(v42, v40, v32, v33);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
            v34 = v41;
            v35 = __swift_project_boxed_opaque_existential_1(v40, v41);
            v39 = v34;
            v36 = __swift_allocate_boxed_opaque_existential_1(v38);
            (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v36, v35, v34);
            _expressionCompatibleValue(for:)(v38);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
            *(_QWORD *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
            *(_QWORD *)a2 = v25;
          }
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      }
      v17 = v47;
      *(_QWORD *)(a2 + 24) = v11;
      *(_OWORD *)a2 = v17;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  swift_bridgeObjectRelease();
LABEL_27:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return outlined init with copy of Any(a1, a2);
}

uint64_t ClosedRange._bounds.getter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t *v10;
  void (*v12)(uint64_t *, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  a1[3] = v6;
  a1[4] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v12(boxed_opaque_existential_1, v3, v6);
  v9 = v3 + *(int *)(a3 + 36);
  a2[3] = v6;
  a2[4] = v7;
  v10 = __swift_allocate_boxed_opaque_existential_1(a2);
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v12)(v10, v9, v6);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, a1, AssociatedTypeWitness);
  a2(v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

_QWORD *PredicateExpressions.Value.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  uint64_t v17;

  v15 = *(_QWORD **)(a2 + 16);
  v4 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, _QWORD *))(*(v4 - 1) + 16))(boxed_opaque_existential_1, v2, v4);
  _expressionCompatibleValue(for:)((uint64_t)v14, (uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v3)
  {
    v6 = v17;
    if (v17)
    {
      v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
      v8 = *(_QWORD *)(v6 - 8);
      v9 = MEMORY[0x1E0C80A78](v7);
      v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
      v12 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    else
    {
      v12 = 0;
    }
    v4 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v12);
    swift_unknownObjectRelease();
  }
  return v4;
}

_QWORD *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Value<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  result = PredicateExpressions.Value.convert(state:)(a1, a2);
  if (v2)
    return (_QWORD *)v4;
  return result;
}

void *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Variable<A>(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v3 = (void *)specialized PredicateExpressions.Variable.convert(state:)(a1);
  if (!v2)
  {
    v1 = v3;
    v4 = v3;
  }
  return v1;
}

id PredicateExpressions.KeyPath.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, void *, __n128);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v29;
  id v31;
  char v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _BYTE *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91[4];
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v4 = v3;
  v5 = v2;
  v88 = a1;
  v6 = *(_QWORD *)(a2 + 32);
  v86 = a2;
  v7 = *(void **)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v83 - v11;
  v89 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v87 = (char *)&v83 - v14;
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, void *, __n128))(v19 + 16);
  v98 = v5;
  v20(v18, v5, v7, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v90 = v7;
  if (swift_dynamicCast())
  {
    v85 = v6;
    v84 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v92, (uint64_t)&v95);
    v22 = v96;
    v21 = v97;
    __swift_project_boxed_opaque_existential_1(&v95, v96);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v88, v22, v21);
    if (!v3)
    {
      v31 = (id)v23;
      v32 = v24;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
      if ((v32 & 1) != 0)
      {
        LOBYTE(v95) = 1;
        v33 = v31;
        v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v35 = (void *)objc_opt_self();
        v36 = objc_msgSend(v35, sel_expressionForConstantValue_, v34);
        swift_unknownObjectRelease();
        LOBYTE(v95) = 0;
        v37 = objc_msgSend(v35, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v31 = objc_msgSend(v35, sel_expressionForConditional_trueExpression_falseExpression_, v33, v36, v37);

      }
      AssociatedTypeWitness = v84;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    v4 = 0;
    v25 = v3;
    AssociatedTypeWitness = v84;
    v6 = v85;
  }
  else
  {
    v94 = 0;
    v92 = 0u;
    v93 = 0u;
    outlined destroy of Any?((uint64_t)&v92, &demangling cache variable for type metadata for ConvertibleExpression?);
    v25 = 0;
  }
  *(_QWORD *)&v95 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, id, uint64_t))(v6 + 16))(&v95, v90, v6);
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v25)
      goto LABEL_11;
    goto LABEL_10;
  }
  v85 = v6;
  v26 = v89;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v12, 0, 1, AssociatedTypeWitness);
  v27 = v87;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v87, v12, AssociatedTypeWitness);
  v91[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(boxed_opaque_existential_1, v27, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v91, (uint64_t)&v92);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
  if (!*((_QWORD *)&v93 + 1))
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v92, &demangling cache variable for type metadata for Any?);
    if (v25)
      goto LABEL_11;
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v29 = 2;
LABEL_11:
    swift_willThrow();
    return v25;
  }
  outlined init with take of Any(&v92, &v95);
  __swift_project_boxed_opaque_existential_1(&v95, v96);
  v38 = _bridgeAnythingToObjectiveC<A>(_:)();
  v31 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v38);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);

LABEL_18:
  v39 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v40)
  {
    v41 = v39;
    v42 = v40;
    swift_bridgeObjectRelease();
    if (objc_msgSend(v31, sel_expressionType) == (id)1)
    {
      v43 = String._bridgeToObjectiveCImpl()();
      v44 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v43);
LABEL_39:
      v25 = v44;

      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return v25;
    }
    if (objc_msgSend(v31, sel_expressionType) != (id)3)
      goto LABEL_42;
    v98 = 0;
    v47 = objc_msgSend(v31, sel_keyPath);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;

    *(_QWORD *)&v95 = 64;
    *((_QWORD *)&v95 + 1) = 0xE100000000000000;
    *(_QWORD *)&v92 = v48;
    *((_QWORD *)&v92 + 1) = v50;
    if ((v50 & 0x1000000000000000) != 0)
    {
      v90 = v31;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      StringProtocol._ephemeralString.getter();
      v64 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v65 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v66 = objc_msgSend(v64, sel_rangeOfString_, v65);
      v68 = v67;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v66 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        if (__OFADD__(v66, v68))
        {
          __break(1u);
          JUMPOUT(0x181C3E65CLL);
        }
        StringProtocol._toUTF16Indices(_:)();
        swift_bridgeObjectRelease();
        v31 = v90;
        goto LABEL_42;
      }
      v31 = v90;
    }
    else
    {
      swift_bridgeObjectRetain();
      v51 = String.subscript.getter();
      v53 = v52;
      v55 = v54;
      v57 = v56;
      swift_bridgeObjectRelease();
      v91[0] = 64;
      v91[1] = 0xE100000000000000;
      v58 = Substring.init<A>(_:)();
      if ((v51 ^ v53) >= 0x4000 && (v58 ^ v59) >> 14)
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v58, v59, v60, v61, 0, 0, 0, 0, 0, v51, v53, v55, v57);
        v63 = v62;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v63 & 1) == 0)
        {
LABEL_42:
          v76 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
          v96 = v76;
          *(_QWORD *)&v95 = v31;
          v77 = (void *)objc_opt_self();
          v78 = String._bridgeToObjectiveCImpl()();
          v79 = v31;
          v80 = objc_msgSend(v77, sel__newKeyPathExpressionForString_, v78);
          swift_unknownObjectRelease();
          if (v80)
          {
            *((_QWORD *)&v93 + 1) = v76;
            *(_QWORD *)&v92 = v80;
          }
          else
          {
            v92 = 0u;
            v93 = 0u;
          }
          v81 = objc_allocWithZone((Class)NSKeyPathExpression);
          v82 = @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v95, &v92);
          if (!v82)
          {
            __break(1u);
            JUMPOUT(0x181C3E668);
          }
          v25 = v82;

          swift_bridgeObjectRelease();
          return v25;
        }
LABEL_38:
        v69 = objc_msgSend(v31, sel_keyPath);
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        *(_QWORD *)&v95 = v70;
        *((_QWORD *)&v95 + 1) = v72;
        v73._countAndFlagsBits = 46;
        v73._object = (void *)0xE100000000000000;
        String.append(_:)(v73);
        v74._countAndFlagsBits = v41;
        v74._object = v42;
        String.append(_:)(v74);
        v75 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v44 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v75);
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  v25 = (id)AssociatedTypeWitness;
  if (swift_conformsToProtocol2())
    v45 = AssociatedTypeWitness;
  else
    v45 = 0;
  if (v45)
  {
    static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)((char *)&v95);
    if (v95 != 4)
      __asm { BR              X10 }
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *v46 = 0;
  swift_willThrow();

  return v25;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.KeyPath<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.KeyPath.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

uint64_t PredicateExpressions.PredicateEvaluate.convert(state:)(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  _BYTE *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)(char *, __n128);
  uint64_t v71;
  __n128 v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  char *v90;
  void (*v91)(__int128 *, uint64_t, uint64_t, __n128);
  void *v92;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  unint64_t v99;
  void (*v100)(char *, __n128);
  uint64_t isClassOrObjCExistentialType;
  uint64_t v102;
  id v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  id v107;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v109;
  char v110;
  unint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  char v123;
  id v124;
  uint64_t v125;
  void *v126;
  id v127;
  id v128;
  __n128 v129;
  uint64_t v130;
  void *v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  id v142;
  unint64_t v143;
  int64_t v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  _QWORD *v160;
  _BYTE *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t result;
  uint64_t v167;
  _QWORD v168[2];
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t TupleTypeMetadata;
  _QWORD *v182;
  char *v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  _QWORD *v196;
  uint64_t v197[3];
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;

  v2 = a2;
  v190 = a1;
  v3 = a2[2];
  v4 = 8 * v3;
  v196 = a2;
  if (v3 == 1)
  {
    v177 = v168;
    TupleTypeMetadata = *(_QWORD *)(a2[4] & 0xFFFFFFFFFFFFFFFELL);
    v172 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](a1);
    v189 = (char *)v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = type metadata accessor for PredicateExpressions.Variable(0, AssociatedTypeWitness, v7, v8);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v10 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
    v11 = (char *)v168 - v10;
    if (v3)
    {
      v12 = 0;
      v13 = v2[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v3 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v3 != v12)
      {
LABEL_9:
        v18 = v3 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v172 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v189 = (char *)v168 - v23;
    v192 = v168;
    v24 = 8 * v3;
    MEMORY[0x1E0C80A78](v25);
    v26 = (_QWORD *)((char *)v168 - v10);
    if (v3)
    {
      v27 = v196[4] & 0xFFFFFFFFFFFFFFFELL;
      v28 = v196[6] & 0xFFFFFFFFFFFFFFFELL;
      v29 = v26;
      v30 = v194;
      do
      {
        v27 += 8;
        v28 += 8;
        v31 = swift_getAssociatedTypeWitness();
        *v29++ = type metadata accessor for PredicateExpressions.Variable(255, v31, v32, v33);
        --v30;
      }
      while (v30);
    }
    v177 = v168;
    v3 = v194;
    v9 = swift_getTupleTypeMetadata();
    v2 = v196;
    v4 = v24;
  }
  v176 = v168;
  v180 = v9;
  v186 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v183 = (char *)v168 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = v168;
  v191 = v2[3];
  v192 = *(_QWORD **)(v191 - 8);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)v168 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = v168;
  MEMORY[0x1E0C80A78](v38);
  if (v3)
  {
    v40 = v196[4] & 0xFFFFFFFFFFFFFFFELL;
    v41 = v196[6] & 0xFFFFFFFFFFFFFFFELL;
    v42 = (_QWORD *)((char *)v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v43 = v194;
    do
    {
      v40 += 8;
      v41 += 8;
      *v42++ = swift_getAssociatedTypeWitness();
      --v43;
    }
    while (v43);
  }
  v44 = type metadata accessor for Predicate(255, v194, (uint64_t)v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v39);
  v188 = (_QWORD *)type metadata accessor for Optional();
  v187 = (_QWORD *)*(v188 - 1);
  MEMORY[0x1E0C80A78](v188);
  v46 = (char *)v168 - v45;
  v174 = v168;
  v47 = *(_QWORD *)(v44 - 8);
  v49 = MEMORY[0x1E0C80A78](v48);
  v51 = (_QWORD *)((char *)v168 - v50);
  v52 = v192;
  v53 = v191;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v192[2])(v37, v193, v191, v49);
  *(_QWORD *)&v202 = MEMORY[0x1E0DEE9D8];
  v54 = v195;
  v55 = v196;
  (*(void (**)(__int128 *, uint64_t))(v196[5] + 16))(&v202, v53);
  if (v54)
  {

    ((void (*)(char *, uint64_t))v52[1])(v37, v53);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1, 1, v44);
    ((void (*)(char *, _QWORD *))v187[1])(v46, v188);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v56 = 2;
    swift_willThrow();
    return (uint64_t)v177;
  }
  v195 = 0;
  ((void (*)(char *, uint64_t))v52[1])(v37, v53);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v46, 0, 1, v44);
  v169 = v47;
  (*(void (**)(_QWORD *, char *, uint64_t))(v47 + 32))(v51, v46, v44);
  v58 = *(int *)(v44 + 36);
  v171 = v51;
  (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v183, (char *)v51 + v58, v180);
  v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 16))(v189, v193 + *((int *)v55 + 15), TupleTypeMetadata);
  v170 = v44;
  v60 = v194;
  if (!v194)
  {
LABEL_92:
    v146 = v171[3];
    v147 = v171[4];
    v148 = __swift_project_boxed_opaque_existential_1(v171, v146);
    v149 = MEMORY[0x1E0C80A78](v148);
    (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v151 + 16))((char *)v168 - ((v150 + 15) & 0xFFFFFFFFFFFFFFF0), v148, v146, v149);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v199, (uint64_t)&v202);
      v152 = v203;
      v153 = v204;
      __swift_project_boxed_opaque_existential_1(&v202, v203);
      v154 = v195;
      v155 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 16))(v190, v152, v153);
      v156 = v154;
      if (!v154)
      {
        v57 = (id)v155;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
        v159 = v169;
        v160 = v171;
        goto LABEL_111;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
      v157 = 0;
      v158 = v156;
    }
    else
    {
      v201 = 0;
      v199 = 0u;
      v200 = 0u;
      outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for ConvertibleExpression?);
      v158 = 0;
      v157 = v195;
    }
    *(_QWORD *)&v202 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(v147 + 8) + 16))(&v205, &v202, v146);
    if (v157)
    {

      v159 = v169;
      v160 = v171;
LABEL_101:
      if (!v158)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v161 = 2;
      }
      v57 = v177;
      swift_willThrow();
      (*(void (**)(_QWORD *, uint64_t))(v159 + 8))(v160, v170);
      (*(void (**)(char *, uint64_t))(v172 + 8))(v189, TupleTypeMetadata);
      return (uint64_t)v57;
    }
    v159 = v169;
    v160 = v171;
    if (v205 == 2)
      goto LABEL_101;
    v198 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v197[0]) = v205 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v197, (uint64_t)&v199);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v197);
    if (!*((_QWORD *)&v200 + 1))
    {
      outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for Any?);
      goto LABEL_101;
    }
    outlined init with take of Any(&v199, &v202);
    __swift_project_boxed_opaque_existential_1(&v202, v203);
    v167 = _bridgeAnythingToObjectiveC<A>(_:)();
    v57 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v167);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);

LABEL_111:
    (*(void (**)(_QWORD *, uint64_t))(v159 + 8))(v160, v170);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v189, TupleTypeMetadata);
    return (uint64_t)v57;
  }
  v61 = 0;
  v179 = v55[4] & 0xFFFFFFFFFFFFFFFELL;
  v178 = v55[6] & 0xFFFFFFFFFFFFFFFELL;
  while (1)
  {
    v63 = v60 == 1 ? v183 : &v183[*(int *)(v180 + 16 * v61 + 32)];
    v64 = *(_QWORD *)(v179 + 8 * v61);
    v65 = *(_QWORD *)(v178 + 8 * v61);
    v192 = *(_QWORD **)v63;
    v66 = *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64);
    v67 = MEMORY[0x1E0C80A78](v59);
    v68 = (char *)v168 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
    v193 = v69;
    v70 = *(uint64_t (**)(char *, __n128))(v69 + 16);
    v71 = v70(v68, v67);
    v72 = MEMORY[0x1E0C80A78](v71);
    v196 = v68;
    ((void (*)(char *, char *, uint64_t, __n128))v70)(v68, v68, v64, v72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    v73 = swift_dynamicCast();
    v191 = v61;
    if (!v73)
      break;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v199, (uint64_t)&v202);
    v74 = v203;
    v75 = v204;
    __swift_project_boxed_opaque_existential_1(&v202, v203);
    v76 = v195;
    v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v190, v74, v75);
    if (v76)
    {
      v187 = v168;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
      v188 = v76;
      v195 = 0;
      goto LABEL_31;
    }
    v103 = (id)v77;
    v123 = v78;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
    v195 = 0;
    if ((v123 & 1) != 0)
    {
      LOBYTE(v202) = 1;
      v124 = v103;
      v125 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v126 = (void *)objc_opt_self();
      v127 = objc_msgSend(v126, sel_expressionForConstantValue_, v125);
      swift_unknownObjectRelease();
      LOBYTE(v202) = 0;
      v128 = objc_msgSend(v126, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v103 = objc_msgSend(v126, sel_expressionForConditional_trueExpression_falseExpression_, v124, v127, v128);

      v104 = v190;
      v105 = v192;
LABEL_37:
      v106 = v193;
      goto LABEL_38;
    }
    v105 = v192;
    v106 = v193;
    v104 = v190;
LABEL_38:
    (*(void (**)(_QWORD *, uint64_t))(v106 + 8))(v196, v64);
    v107 = v103;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v202 = *(_QWORD *)(v104 + 8);
    v109 = v202;
    *(_QWORD *)(v104 + 8) = 0x8000000000000000;
    v111 = specialized __RawDictionaryStorage.find<A>(_:)(v105);
    v112 = *(_QWORD *)(v109 + 16);
    v113 = (v110 & 1) == 0;
    v114 = v112 + v113;
    if (__OFADD__(v112, v113))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v115 = v110;
    if (*(_QWORD *)(v109 + 24) >= v114)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v116 = v109;
        if ((v110 & 1) != 0)
          goto LABEL_22;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
        v130 = static _DictionaryStorage.copy(original:)();
        v116 = v130;
        if (*(_QWORD *)(v109 + 16))
        {
          v131 = (void *)(v130 + 64);
          v132 = (unint64_t)((1 << *(_BYTE *)(v116 + 32)) + 63) >> 6;
          if (v116 != v109 || (unint64_t)v131 >= v109 + 64 + 8 * v132)
            memmove(v131, (const void *)(v109 + 64), 8 * v132);
          v196 = (_QWORD *)(v109 + 64);
          v133 = 0;
          *(_QWORD *)(v116 + 16) = *(_QWORD *)(v109 + 16);
          v134 = 1 << *(_BYTE *)(v109 + 32);
          if (v134 < 64)
            v135 = ~(-1 << v134);
          else
            v135 = -1;
          v136 = v135 & *(_QWORD *)(v109 + 64);
          v137 = (unint64_t)(v134 + 63) >> 6;
          while (1)
          {
            if (v136)
            {
              v138 = __clz(__rbit64(v136));
              v136 &= v136 - 1;
              v139 = v138 | (v133 << 6);
            }
            else
            {
              v121 = __OFADD__(v133++, 1);
              if (v121)
                goto LABEL_117;
              if (v133 >= v137)
                goto LABEL_89;
              v143 = v196[v133];
              if (!v143)
              {
                v144 = v133 + 1;
                if (v133 + 1 >= v137)
                  goto LABEL_89;
                v143 = v196[v144];
                if (v143)
                  goto LABEL_71;
                v144 = v133 + 2;
                if (v133 + 2 >= v137)
                  goto LABEL_89;
                v143 = v196[v144];
                if (v143)
                  goto LABEL_71;
                v144 = v133 + 3;
                if (v133 + 3 >= v137)
                  goto LABEL_89;
                v143 = v196[v144];
                if (v143)
                {
LABEL_71:
                  v133 = v144;
                }
                else
                {
                  v145 = v133 + 4;
                  if (v133 + 4 >= v137)
                    goto LABEL_88;
                  v143 = v196[v145];
                  if (!v143)
                  {
                    v145 = v133 + 5;
                    if (v133 + 5 >= v137)
                      goto LABEL_88;
                    v143 = v196[v145];
                    if (!v143)
                    {
                      v145 = v133 + 6;
                      if (v133 + 6 >= v137)
                        goto LABEL_88;
                      v143 = v196[v145];
                      if (!v143)
                      {
                        v145 = v133 + 7;
                        if (v133 + 7 >= v137)
                          goto LABEL_88;
                        v143 = v196[v145];
                        if (!v143)
                        {
                          v145 = v133 + 8;
                          if (v133 + 8 >= v137)
                          {
LABEL_88:
                            v104 = v190;
LABEL_89:
                            v105 = v192;
                            break;
                          }
                          v143 = v196[v145];
                          if (!v143)
                          {
                            while (1)
                            {
                              v133 = v145 + 1;
                              if (__OFADD__(v145, 1))
                                goto LABEL_118;
                              if (v133 >= v137)
                                goto LABEL_88;
                              v143 = v196[v133];
                              ++v145;
                              v104 = v190;
                              if (v143)
                                goto LABEL_72;
                            }
                          }
                        }
                      }
                    }
                  }
                  v133 = v145;
                  v104 = v190;
                }
              }
LABEL_72:
              v136 = (v143 - 1) & v143;
              v139 = __clz(__rbit64(v143)) + (v133 << 6);
            }
            v140 = 8 * v139;
            v141 = *(void **)(*(_QWORD *)(v109 + 56) + v140);
            *(_QWORD *)(*(_QWORD *)(v116 + 48) + v140) = *(_QWORD *)(*(_QWORD *)(v109 + 48) + v140);
            *(_QWORD *)(*(_QWORD *)(v116 + 56) + v140) = v141;
            v142 = v141;
          }
        }
        swift_bridgeObjectRelease();
        if ((v115 & 1) != 0)
          goto LABEL_22;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v114, isUniquelyReferenced_nonNull_native);
      v116 = v202;
      v117 = specialized __RawDictionaryStorage.find<A>(_:)(v105);
      if ((v115 & 1) != (v118 & 1))
        goto LABEL_119;
      v111 = v117;
      if ((v115 & 1) != 0)
      {
LABEL_22:
        v62 = *(_QWORD *)(v116 + 56);

        *(_QWORD *)(v62 + 8 * v111) = v107;
        goto LABEL_23;
      }
    }
    *(_QWORD *)(v116 + 8 * (v111 >> 6) + 64) |= 1 << v111;
    v119 = 8 * v111;
    *(_QWORD *)(*(_QWORD *)(v116 + 48) + v119) = v105;
    *(_QWORD *)(*(_QWORD *)(v116 + 56) + v119) = v107;
    v120 = *(_QWORD *)(v116 + 16);
    v121 = __OFADD__(v120, 1);
    v122 = v120 + 1;
    if (v121)
      goto LABEL_116;
    *(_QWORD *)(v116 + 16) = v122;
LABEL_23:
    *(_QWORD *)(v104 + 8) = v116;

    v59 = swift_bridgeObjectRelease();
    v61 = v191 + 1;
    v60 = v194;
    if (v191 + 1 == v194)
      goto LABEL_92;
  }
  v187 = v168;
  v201 = 0;
  v199 = 0u;
  v200 = 0u;
  outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for ConvertibleExpression?);
  v188 = 0;
LABEL_31:
  v79 = MEMORY[0x1E0DEE9D8];
  v80 = v65;
  v81 = v64;
  v82 = swift_getAssociatedTypeWitness();
  v185 = v168;
  v83 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v85 = (char *)v168 - v84;
  v86 = type metadata accessor for Optional();
  v184 = v168;
  v87 = *(_QWORD *)(v86 - 8);
  v88 = MEMORY[0x1E0C80A78](v86);
  v90 = (char *)v168 - v89;
  *(_QWORD *)&v202 = v79;
  v91 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v80 + 16);
  v92 = v195;
  v186 = v81;
  v91(&v202, v81, v80, v88);
  if (v92)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v90, 1, 1, v82);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v86);
    goto LABEL_106;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v90, 0, 1, v82);
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v85, v90, v82);
  v198 = v82;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v197);
  (*(void (**)(uint64_t *, char *, uint64_t))(v83 + 16))(boxed_opaque_existential_1, v85, v82);
  _expressionCompatibleValue(for:)((uint64_t)v197, (uint64_t)&v199);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v197);
  if (*((_QWORD *)&v200 + 1))
  {
    v195 = 0;
    outlined init with take of Any(&v199, &v202);
    v94 = v203;
    v95 = __swift_project_boxed_opaque_existential_1(&v202, v203);
    v182 = v168;
    v96 = *(_QWORD *)(v94 - 8);
    v97 = *(_QWORD *)(v96 + 64);
    v98 = MEMORY[0x1E0C80A78](v95);
    v99 = (v97 + 15) & 0xFFFFFFFFFFFFFFF0;
    v100 = *(void (**)(char *, __n128))(v96 + 16);
    v100((char *)v168 - v99, v98);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      if (v97 != 8)
        goto LABEL_115;
      v102 = *(_QWORD *)((char *)v168 - v99);
      swift_unknownObjectRetain();
    }
    else
    {
      v168[1] = v168;
      v129 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
      ((void (*)(char *, char *, uint64_t, __n128))v100)((char *)v168 - v99, (char *)v168 - v99, v94, v129);
      v102 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    (*(void (**)(char *, uint64_t))(v96 + 8))((char *)v168 - v99, v94);
    v103 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v102);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);

    v104 = v190;
    v105 = v192;
    v64 = v186;
    goto LABEL_37;
  }
  (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
  outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for Any?);
LABEL_106:
  v57 = v177;
  v162 = v169;
  v163 = v171;
  v164 = v186;
  if (!v188)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v165 = 2;
  }
  swift_willThrow();
  (*(void (**)(_QWORD *, uint64_t))(v193 + 8))(v196, v164);
  (*(void (**)(_QWORD *, uint64_t))(v162 + 8))(v163, v170);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v189, TupleTypeMetadata);
  return (uint64_t)v57;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.PredicateEvaluate.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

uint64_t PredicateExpressions.ExpressionEvaluate.convert(state:)(uint64_t a1, uint64_t *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t *v64;
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(char *, __n128);
  uint64_t v80;
  __n128 v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  void (**v85)(_QWORD, _QWORD);
  uint64_t v86;
  char v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  unint64_t v104;
  void (*v105)(char *, __n128);
  uint64_t isClassOrObjCExistentialType;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  id v117;
  void *v118;
  id v119;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v121;
  char v122;
  unint64_t v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  void *v149;
  id v150;
  unint64_t v151;
  int64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  char *v165;
  void *v166;
  void (*v167)(__int128 *, uint64_t);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t *v173;
  _BYTE *v174;
  _BYTE *v175;
  uint64_t result;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  char *v200;
  uint64_t *v201;
  uint64_t *v202;
  void (**v203)(_QWORD, _QWORD);
  uint64_t *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;

  v207 = a1;
  v5 = a2[5];
  v6 = type metadata accessor for Optional();
  v193 = v5;
  MEMORY[0x1E0C80A78](v6);
  v185 = (char *)&v178 - v7;
  v186 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v184 = (char *)&v178 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[2];
  v12 = 8 * v11;
  v210 = v11;
  v183 = v9;
  v182 = v13;
  v211 = v2;
  v209 = v3;
  if (v11 == 1)
  {
    v192 = &v178;
    v197 = *(_QWORD *)(a2[4] & 0xFFFFFFFFFFFFFFFELL);
    v187 = *(_QWORD *)(v197 - 8);
    MEMORY[0x1E0C80A78](v9);
    v205 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v18 = type metadata accessor for PredicateExpressions.Variable(0, AssociatedTypeWitness, v16, v17);
  }
  else
  {
    MEMORY[0x1E0C80A78](v9);
    v19 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    v20 = (char *)&v178 - v19;
    if (v11)
    {
      v21 = 0;
      v22 = a2[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v11 < 4)
        goto LABEL_9;
      if ((unint64_t)&v20[-v22] < 0x20)
        goto LABEL_9;
      v21 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      v23 = (__int128 *)(v22 + 16);
      v24 = v20 + 16;
      v25 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v23;
        *(v24 - 1) = *(v23 - 1);
        *v24 = v26;
        v23 += 2;
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v11 != v21)
      {
LABEL_9:
        v27 = v11 - v21;
        v28 = 8 * v21;
        v29 = &v20[8 * v21];
        v30 = (uint64_t *)(v22 + v28);
        do
        {
          v31 = *v30++;
          *(_QWORD *)v29 = v31;
          v29 += 8;
          --v27;
        }
        while (v27);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v192 = &v178;
    v197 = TupleTypeMetadata;
    v187 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v205 = (char *)&v178 - v33;
    v220 = &v178;
    MEMORY[0x1E0C80A78](v34);
    v35 = (uint64_t *)((char *)&v178 - v19);
    if (v11)
    {
      v36 = a2[4] & 0xFFFFFFFFFFFFFFFELL;
      v37 = a2[7] & 0xFFFFFFFFFFFFFFFELL;
      v38 = v35;
      v39 = v210;
      do
      {
        v36 += 8;
        v37 += 8;
        v40 = swift_getAssociatedTypeWitness();
        *v38++ = type metadata accessor for PredicateExpressions.Variable(255, v40, v41, v42);
        --v39;
      }
      while (v39);
    }
    v11 = v210;
    v18 = swift_getTupleTypeMetadata();
  }
  v191 = &v178;
  v196 = v18;
  v202 = *(uint64_t **)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v200 = (char *)&v178 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = &v178;
  v220 = a2;
  v206 = (char *)a2[3];
  v208 = *((_QWORD *)v206 - 1);
  MEMORY[0x1E0C80A78](v44);
  v46 = (char *)&v178 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = &v178;
  MEMORY[0x1E0C80A78](v47);
  v48 = (char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
  {
    v49 = v220[4] & 0xFFFFFFFFFFFFFFFELL;
    v50 = v220[7] & 0xFFFFFFFFFFFFFFFELL;
    v51 = (uint64_t *)((char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    v52 = v210;
    do
    {
      v49 += 8;
      v50 += 8;
      *v51++ = swift_getAssociatedTypeWitness();
      --v52;
    }
    while (v52);
  }
  v53 = type metadata accessor for Expression(255, v210, (uint64_t)v48, v193);
  v204 = (uint64_t *)type metadata accessor for Optional();
  v203 = (void (**)(_QWORD, _QWORD))*(v204 - 1);
  MEMORY[0x1E0C80A78](v204);
  v55 = (char *)&v178 - v54;
  v189 = &v178;
  v56 = *(_QWORD *)(v53 - 8);
  v58 = MEMORY[0x1E0C80A78](v57);
  v60 = (uint64_t *)((char *)&v178 - v59);
  v61 = v208;
  v62 = v211;
  v63 = v206;
  (*(void (**)(char *, char *, char *, __n128))(v208 + 16))(v46, v211, v206, v58);
  *(_QWORD *)&v217 = MEMORY[0x1E0DEE9D8];
  v64 = v220;
  v65 = v209;
  (*(void (**)(__int128 *, char *))(v220[6] + 16))(&v217, v63);
  if (v65)
  {

    (*(void (**)(char *, char *))(v61 + 8))(v46, v63);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v55, 1, 1, v53);
    ((void (**)(char *, uint64_t *))v203)[1](v55, v204);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v66 = 2;
    swift_willThrow();
    return (uint64_t)v46;
  }
  v209 = 0;
  (*(void (**)(char *, char *))(v61 + 8))(v46, v63);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v55, 0, 1, v53);
  v179 = v56;
  (*(void (**)(_QWORD *, char *, uint64_t))(v56 + 32))(v60, v55, v53);
  v67 = *(int *)(v53 + 44);
  v181 = v60;
  ((void (*)(char *, char *, uint64_t))v202[2])(v200, (char *)v60 + v67, v196);
  v68 = (*(uint64_t (**)(char *, char *, uint64_t))(v187 + 16))(v205, &v62[*((int *)v64 + 17)], v197);
  v180 = v53;
  v69 = v210;
  if (!v210)
  {
LABEL_92:
    v153 = v181[3];
    v154 = v181[4];
    v155 = __swift_project_boxed_opaque_existential_1(v181, v153);
    v156 = MEMORY[0x1E0C80A78](v155);
    (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v158 + 16))((char *)&v178 - ((v157 + 15) & 0xFFFFFFFFFFFFFFF0), v155, v153, v156);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
      v159 = v218;
      v160 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, v218);
      v161 = v209;
      v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 16))(v207, v159, v160);
      v163 = v161;
      v164 = MEMORY[0x1E0DEE9D8];
      if (!v161)
      {
        v46 = (char *)v162;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        goto LABEL_112;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      v165 = 0;
      v166 = v163;
    }
    else
    {
      v216 = 0;
      v214 = 0u;
      v215 = 0u;
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
      v166 = 0;
      v164 = MEMORY[0x1E0DEE9D8];
      v165 = v209;
    }
    *(_QWORD *)&v217 = v164;
    v167 = *(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v154 + 8) + 16);
    v168 = v185;
    v167(&v217, v153);
    v46 = v165;
    if (v165)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v186 + 56))(v168, 1, 1, v193);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v168, v183);
      if (v166)
        goto LABEL_102;
      goto LABEL_101;
    }
    v169 = v186;
    v170 = v193;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v168, 0, 1, v193);
    v171 = v168;
    v172 = v184;
    (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v184, v171, v170);
    v213 = v170;
    v173 = __swift_allocate_boxed_opaque_existential_1(&v212);
    (*(void (**)(uint64_t *, char *, uint64_t))(v169 + 16))(v173, v172, v170);
    _expressionCompatibleValue(for:)((uint64_t)&v212, (uint64_t)&v214);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
    if (!*((_QWORD *)&v215 + 1))
    {
      (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v193);
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for Any?);
      if (v166)
        goto LABEL_102;
LABEL_101:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v174 = 2;
LABEL_102:
      swift_willThrow();
      (*(void (**)(_QWORD *, uint64_t))(v179 + 8))(v181, v180);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v205, v197);
      return (uint64_t)v46;
    }
    outlined init with take of Any(&v214, &v217);
    __swift_project_boxed_opaque_existential_1(&v217, v218);
    v177 = _bridgeAnythingToObjectiveC<A>(_:)();
    v46 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v177);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v193);

LABEL_112:
    (*(void (**)(_QWORD *, uint64_t))(v179 + 8))(v181, v180);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v205, v197);
    return (uint64_t)v46;
  }
  v70 = 0;
  v195 = v64[4] & 0xFFFFFFFFFFFFFFFELL;
  v194 = v64[7] & 0xFFFFFFFFFFFFFFFELL;
  while (1)
  {
    v72 = v69 == 1 ? v200 : &v200[*(int *)(v196 + 16 * v70 + 32)];
    v73 = *(char **)(v195 + 8 * v70);
    v74 = *(_QWORD *)(v194 + 8 * v70);
    v220 = *(uint64_t **)v72;
    v75 = *(_QWORD *)(*((_QWORD *)v73 - 1) + 64);
    v76 = MEMORY[0x1E0C80A78](v68);
    v77 = (char *)&v178 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
    v208 = v78;
    v79 = *(uint64_t (**)(char *, __n128))(v78 + 16);
    v80 = v79(v77, v76);
    v81 = MEMORY[0x1E0C80A78](v80);
    v211 = v77;
    ((void (*)(char *, char *, char *, __n128))v79)(v77, v77, v73, v81);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    v82 = swift_dynamicCast();
    v206 = v73;
    if (v82)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v214, (uint64_t)&v217);
      v83 = v218;
      v84 = v219;
      __swift_project_boxed_opaque_existential_1(&v217, v218);
      v85 = (void (**)(_QWORD, _QWORD))v209;
      v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v207, v83, v84);
      if (!v85)
      {
        v108 = (id)v86;
        v111 = v87;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        v209 = 0;
        if ((v111 & 1) != 0)
        {
          LOBYTE(v217) = 1;
          v112 = v108;
          v113 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          v114 = v70;
          v115 = (void *)objc_opt_self();
          v116 = objc_msgSend(v115, sel_expressionForConstantValue_, v113);
          swift_unknownObjectRelease();
          LOBYTE(v217) = 0;
          v117 = objc_msgSend(v115, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          v118 = v115;
          v70 = v114;
          v108 = objc_msgSend(v118, sel_expressionForConditional_trueExpression_falseExpression_, v112, v116, v117);

          v73 = v206;
        }
        v69 = v210;
        v109 = v207;
        v110 = v208;
        goto LABEL_40;
      }
      v204 = &v178;
      v199 = v70;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
      v203 = v85;
      v88 = 0;
    }
    else
    {
      v204 = &v178;
      v199 = v70;
      v216 = 0;
      v214 = 0u;
      v215 = 0u;
      outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for ConvertibleExpression?);
      v203 = 0;
      v88 = v209;
    }
    v89 = swift_getAssociatedTypeWitness();
    v202 = &v178;
    v90 = *(_QWORD *)(v89 - 8);
    MEMORY[0x1E0C80A78](v89);
    v92 = (char *)&v178 - v91;
    v93 = type metadata accessor for Optional();
    v201 = &v178;
    v94 = *(_QWORD *)(v93 - 8);
    v95 = MEMORY[0x1E0C80A78](v93);
    v97 = (char *)&v178 - v96;
    *(_QWORD *)&v217 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(__int128 *, __n128))(v74 + 16))(&v217, v95);
    if (v88)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v97, 1, 1, v89);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v97, v93);
      goto LABEL_105;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v97, 0, 1, v89);
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v92, v97, v89);
    v213 = v89;
    v98 = __swift_allocate_boxed_opaque_existential_1(&v212);
    (*(void (**)(uint64_t *, char *, uint64_t))(v90 + 16))(v98, v92, v89);
    _expressionCompatibleValue(for:)((uint64_t)&v212, (uint64_t)&v214);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
    if (!*((_QWORD *)&v215 + 1))
      break;
    v209 = 0;
    outlined init with take of Any(&v214, &v217);
    v99 = v218;
    v100 = __swift_project_boxed_opaque_existential_1(&v217, v218);
    v198 = &v178;
    v101 = *(_QWORD *)(v99 - 8);
    v102 = *(_QWORD *)(v101 + 64);
    v103 = MEMORY[0x1E0C80A78](v100);
    v104 = (v102 + 15) & 0xFFFFFFFFFFFFFFF0;
    v105 = *(void (**)(char *, __n128))(v101 + 16);
    v105((char *)&v178 - v104, v103);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      if (v102 != 8)
        goto LABEL_114;
      v107 = *(uint64_t *)((char *)&v178 - v104);
      swift_unknownObjectRetain();
    }
    else
    {
      v178 = (uint64_t)&v178;
      v135 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
      ((void (*)(char *, char *, uint64_t, __n128))v105)((char *)&v178 - v104, (char *)&v178 - v104, v99, v135);
      v107 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    (*(void (**)(char *, uint64_t))(v101 + 8))((char *)&v178 - v104, v99);
    v108 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v107);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);

    v73 = v206;
    v109 = v207;
    v69 = v210;
    v70 = v199;
    v110 = v208;
LABEL_40:
    (*(void (**)(char *, char *))(v110 + 8))(v211, v73);
    v119 = v108;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v217 = *(_QWORD *)(v109 + 8);
    v121 = v217;
    *(_QWORD *)(v109 + 8) = 0x8000000000000000;
    v123 = specialized __RawDictionaryStorage.find<A>(_:)(v220);
    v124 = *(_QWORD *)(v121 + 16);
    v125 = (v122 & 1) == 0;
    v126 = v124 + v125;
    if (__OFADD__(v124, v125))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v127 = v122;
    if (*(_QWORD *)(v121 + 24) >= v126)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v128 = v121;
        if ((v122 & 1) != 0)
          goto LABEL_22;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
        v136 = static _DictionaryStorage.copy(original:)();
        v128 = v136;
        if (*(_QWORD *)(v121 + 16))
        {
          v199 = v70;
          v137 = (char *)(v136 + 64);
          v138 = (char *)(v121 + 64);
          v139 = (unint64_t)((1 << *(_BYTE *)(v128 + 32)) + 63) >> 6;
          v140 = v121 + 64;
          if (v128 != v121 || v137 >= &v138[8 * v139])
            memmove(v137, v138, 8 * v139);
          v141 = 0;
          *(_QWORD *)(v128 + 16) = *(_QWORD *)(v121 + 16);
          v142 = 1 << *(_BYTE *)(v121 + 32);
          if (v142 < 64)
            v143 = ~(-1 << v142);
          else
            v143 = -1;
          v144 = v143 & *(_QWORD *)(v121 + 64);
          v145 = (unint64_t)(v142 + 63) >> 6;
          while (1)
          {
            if (v144)
            {
              v146 = __clz(__rbit64(v144));
              v144 &= v144 - 1;
              v147 = v146 | (v141 << 6);
            }
            else
            {
              v133 = __OFADD__(v141++, 1);
              if (v133)
                goto LABEL_116;
              v70 = v199;
              if (v141 >= v145)
              {
LABEL_86:
                v109 = v207;
LABEL_87:
                v69 = v210;
                break;
              }
              v151 = *(_QWORD *)(v140 + 8 * v141);
              if (!v151)
              {
                v152 = v141 + 1;
                if (v141 + 1 >= v145)
                  goto LABEL_86;
                v151 = *(_QWORD *)(v140 + 8 * v152);
                if (!v151)
                {
                  v152 = v141 + 2;
                  if (v141 + 2 >= v145)
                    goto LABEL_86;
                  v151 = *(_QWORD *)(v140 + 8 * v152);
                  if (!v151)
                  {
                    v152 = v141 + 3;
                    if (v141 + 3 >= v145)
                    {
                      v109 = v207;
                      v70 = v199;
                      goto LABEL_87;
                    }
                    v151 = *(_QWORD *)(v140 + 8 * v152);
                    if (!v151)
                    {
                      v152 = v141 + 4;
                      if (v141 + 4 >= v145)
                        goto LABEL_91;
                      v151 = *(_QWORD *)(v140 + 8 * v152);
                      if (!v151)
                      {
                        v152 = v141 + 5;
                        if (v141 + 5 >= v145)
                          goto LABEL_91;
                        v151 = *(_QWORD *)(v140 + 8 * v152);
                        if (!v151)
                        {
                          v152 = v141 + 6;
                          if (v141 + 6 >= v145)
                            goto LABEL_91;
                          v151 = *(_QWORD *)(v140 + 8 * v152);
                          if (!v151)
                          {
                            v152 = v141 + 7;
                            if (v141 + 7 >= v145)
                              goto LABEL_91;
                            v151 = *(_QWORD *)(v140 + 8 * v152);
                            if (!v151)
                            {
                              v152 = v141 + 8;
                              if (v141 + 8 >= v145)
                              {
LABEL_91:
                                v109 = v207;
                                v69 = v210;
                                v70 = v199;
                                break;
                              }
                              v151 = *(_QWORD *)(v140 + 8 * v152);
                              if (!v151)
                              {
                                while (1)
                                {
                                  v141 = v152 + 1;
                                  if (__OFADD__(v152, 1))
                                    goto LABEL_117;
                                  if (v141 >= v145)
                                    goto LABEL_91;
                                  v151 = *(_QWORD *)(v140 + 8 * v141);
                                  ++v152;
                                  if (v151)
                                    goto LABEL_81;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v141 = v152;
              }
LABEL_81:
              v144 = (v151 - 1) & v151;
              v147 = __clz(__rbit64(v151)) + (v141 << 6);
            }
            v148 = 8 * v147;
            v149 = *(void **)(*(_QWORD *)(v121 + 56) + v148);
            *(_QWORD *)(*(_QWORD *)(v128 + 48) + v148) = *(_QWORD *)(*(_QWORD *)(v121 + 48) + v148);
            *(_QWORD *)(*(_QWORD *)(v128 + 56) + v148) = v149;
            v150 = v149;
          }
        }
        swift_bridgeObjectRelease();
        if ((v127 & 1) != 0)
          goto LABEL_22;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v126, isUniquelyReferenced_nonNull_native);
      v128 = v217;
      v129 = specialized __RawDictionaryStorage.find<A>(_:)(v220);
      if ((v127 & 1) != (v130 & 1))
        goto LABEL_118;
      v123 = v129;
      if ((v127 & 1) != 0)
      {
LABEL_22:
        v71 = *(_QWORD *)(v128 + 56);

        *(_QWORD *)(v71 + 8 * v123) = v119;
        goto LABEL_23;
      }
    }
    *(_QWORD *)(v128 + 8 * (v123 >> 6) + 64) |= 1 << v123;
    v131 = 8 * v123;
    *(_QWORD *)(*(_QWORD *)(v128 + 48) + v131) = v220;
    *(_QWORD *)(*(_QWORD *)(v128 + 56) + v131) = v119;
    v132 = *(_QWORD *)(v128 + 16);
    v133 = __OFADD__(v132, 1);
    v134 = v132 + 1;
    if (v133)
      goto LABEL_115;
    *(_QWORD *)(v128 + 16) = v134;
LABEL_23:
    *(_QWORD *)(v109 + 8) = v128;

    v68 = swift_bridgeObjectRelease();
    if (++v70 == v69)
      goto LABEL_92;
  }
  (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
  outlined destroy of Any?((uint64_t)&v214, &demangling cache variable for type metadata for Any?);
LABEL_105:
  v46 = v206;
  if (!v203)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v175 = 2;
  }
  swift_willThrow();
  (*(void (**)(char *, char *))(v208 + 8))(v211, v46);
  (*(void (**)(_QWORD *, uint64_t))(v179 + 8))(v181, v180);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v205, v197);
  return (uint64_t)v46;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.ExpressionEvaluate.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Conjunction<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.Conjunction.convert(state:)(a1, a2, (SEL *)&selRef_andPredicateWithSubpredicates_);
  if (v2)
    return (char *)v4;
  return result;
}

char *PredicateExpressions.Conjunction.convert(state:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  char *v23;
  _BYTE *v24;
  id v26;
  char v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  id v38;
  char v39;
  char v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  SEL *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v46 = a3;
  v5 = v4;
  v6 = v3;
  v50 = *(_QWORD *)(a2 + 24);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](a1);
  v49 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1820FC860;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v6, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v17 = swift_dynamicCast();
  v47 = a1;
  if (!v17)
  {
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
    outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for ConvertibleExpression?);
    v22 = 0;
    goto LABEL_5;
  }
  v51 = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v54, (uint64_t)&v57);
  v18 = v58;
  v19 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a1, v18, v19);
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    v5 = 0;
    v22 = v4;
    v16 = v51;
LABEL_5:
    *(_QWORD *)&v57 = MEMORY[0x1E0DEE9D8];
    v23 = v6;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(a2 + 32) + 16))(&v60, &v57, v11);
    if (v5)
    {

LABEL_10:
      if (!v22)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v24 = 2;
      }
      swift_willThrow();
      *(_QWORD *)(v16 + 16) = 0;
      goto LABEL_13;
    }
    if (v60 == 2)
      goto LABEL_10;
    v51 = v16;
    v53 = MEMORY[0x1E0DEAFA0];
    v52[0] = v60 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v52, (uint64_t)&v54);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    if (!*((_QWORD *)&v55 + 1))
    {
      outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for Any?);
      v16 = v51;
      goto LABEL_10;
    }
    outlined init with take of Any(&v54, &v57);
    __swift_project_boxed_opaque_existential_1(&v57, v58);
    v28 = _bridgeAnythingToObjectiveC<A>(_:)();
    v26 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v28);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);

    goto LABEL_19;
  }
  v26 = (id)v20;
  v27 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
  if ((v27 & 1) == 0)
  {
LABEL_19:
    LOBYTE(v57) = 1;
    v29 = v26;
    v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v31 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v30);
    swift_unknownObjectRelease();
    v26 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v29, v31, 0, 4, 0);

  }
  v32 = v50;
  *(_QWORD *)(v51 + 32) = v26;
  v33 = &v6[*(int *)(a2 + 52)];
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v49, v33, v32);
  if (!swift_dynamicCast())
  {
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
    outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(_QWORD *)&v57 = MEMORY[0x1E0DEE9D8];
    v23 = v33;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(a2 + 40) + 16))(&v60, &v57, v32);
    v36 = v51;
    if (v60 != 2)
    {
      v53 = MEMORY[0x1E0DEAFA0];
      v52[0] = v60 & 1;
      _expressionCompatibleValue(for:)((uint64_t)v52, (uint64_t)&v54);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      if (*((_QWORD *)&v55 + 1))
      {
        outlined init with take of Any(&v54, &v57);
        __swift_project_boxed_opaque_existential_1(&v57, v58);
        v41 = _bridgeAnythingToObjectiveC<A>(_:)();
        v38 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v41);
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);

LABEL_30:
        LOBYTE(v57) = 1;
        v42 = v38;
        v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v44 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        v38 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v42, v44, 0, 4, 0);

        goto LABEL_31;
      }
      outlined destroy of Any?((uint64_t)&v54, &demangling cache variable for type metadata for Any?);
    }
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v37 = 2;
    swift_willThrow();

    *(_QWORD *)(v36 + 16) = 0;
LABEL_13:
    swift_release();
    return v23;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v54, (uint64_t)&v57);
  v34 = v58;
  v35 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  v38 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v47, v34, v35);
  v40 = v39;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
  v36 = v51;
  if ((v40 & 1) == 0)
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(v36 + 40) = v38;
  *(_QWORD *)&v57 = v36;
  specialized Array._endMutation()();
  if ((unint64_t)v57 >> 62)
  {
    if ((uint64_t)v57 < 0)
      v45 = v57;
    else
      v45 = v57 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSPredicate);
    v45 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  v23 = (char *)objc_msgSend((id)objc_opt_self(), *v46, v45);
  swift_unknownObjectRelease();
  return v23;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Disjunction<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.Conjunction.convert(state:)(a1, a2, (SEL *)&selRef_orPredicateWithSubpredicates_);
  if (v2)
    return (char *)v4;
  return result;
}

void (**protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Equal<A, B>(uint64_t a1, uint64_t a2))(char *, char *, uint64_t)
{
  uint64_t v2;
  void (**result)(char *, char *, uint64_t);
  uint64_t v4;

  result = PredicateExpressions.Equal.convert(state:)(a1, a2, 4);
  if (v2)
    return (void (**)(char *, char *, uint64_t))v4;
  return result;
}

void (**PredicateExpressions.Equal.convert(state:)(uint64_t a1, uint64_t a2, uint64_t a3))(char *, char *, uint64_t)
{
  uint64_t v3;
  void (**v4)(char *, char *, uint64_t);
  void (**v5)(char *, char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (**v31)(char *, char *, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  uint64_t *boxed_opaque_existential_1;
  void (*v35)(char *, char *, uint64_t);
  void *v36;
  char v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  _BYTE *v54;
  id v56;
  char v57;
  char v58;
  id v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  void (**v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[3];
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  void (**v88)(char *, char *, uint64_t);

  v67 = a3;
  v5 = v4;
  v74 = *(_QWORD *)(a2 + 24);
  v71 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](a1);
  v72 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 32);
  v75 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v78 = *(_QWORD *)(v12 - 8);
  v79 = v12;
  MEMORY[0x1E0C80A78](v12);
  v69 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v66 - v15;
  v88 = *(void (***)(char *, char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v68 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v66 - v20;
  v23 = MEMORY[0x1E0C80A78](v22);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v10, v23);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v26 = swift_dynamicCast();
  v73 = a1;
  if (v26)
  {
    v76 = v3;
    v77 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    v27 = v86;
    v28 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, v27, v28);
    if (!v4)
    {
      v36 = (void *)v29;
      v37 = v30;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      v32 = MEMORY[0x1E0DEE9D8];
      if ((v37 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        v40 = v36;
        v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v42 = (void *)objc_opt_self();
        v43 = objc_msgSend(v42, sel_expressionForConstantValue_, v41);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        v44 = objc_msgSend(v42, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v38 = objc_msgSend(v42, sel_expressionForConditional_trueExpression_falseExpression_, v40, v43, v44);

      }
      else
      {
        v38 = v36;
      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    v5 = 0;
    v31 = v4;
    v3 = v76;
    AssociatedTypeWitness = v77;
  }
  else
  {
    v84 = 0;
    v82 = 0u;
    v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    v31 = 0;
  }
  v32 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v85 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v85, v10, v9);
  if (!v5)
  {
    v76 = v3;
    v5 = v88;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v88[7])(v16, 0, 1, AssociatedTypeWitness);
    v5[4](v21, v16, AssociatedTypeWitness);
    v81 = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v80);
    v35 = v5[2];
    v77 = AssociatedTypeWitness;
    v35((char *)boxed_opaque_existential_1, v21, AssociatedTypeWitness);
    _expressionCompatibleValue(for:)((uint64_t)v80, (uint64_t)&v82);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
    if (!*((_QWORD *)&v83 + 1))
    {
      ((void (*)(char *, uint64_t))v5[1])(v21, v77);
      outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
      if (v31)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined init with take of Any(&v82, &v85);
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    v39 = _bridgeAnythingToObjectiveC<A>(_:)();
    v38 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v39);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    ((void (*)(char *, uint64_t))v5[1])(v21, v77);

LABEL_17:
    v46 = v74;
    v45 = v75;
    v47 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v72, v76 + *(int *)(v75 + 60), v74);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
      v48 = v86;
      v49 = v87;
      __swift_project_boxed_opaque_existential_1(&v85, v86);
      v56 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v47, v48, v49);
      v58 = v57;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if ((v58 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        v59 = v56;
        v60 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v61 = (void *)objc_opt_self();
        v62 = objc_msgSend(v61, sel_expressionForConstantValue_, v60);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        v63 = objc_msgSend(v61, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v56 = objc_msgSend(v61, sel_expressionForConditional_trueExpression_falseExpression_, v59, v62, v63);

      }
    }
    else
    {
      v84 = 0;
      v82 = 0u;
      v83 = 0u;
      outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(_QWORD *)&v85 = v32;
      v50 = v69;
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v45 + 40) + 16))(&v85, v46);
      v5 = v88;
      v51 = v77;
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v88[7])(v50, 0, 1, v77);
      v52 = v68;
      v5[4](v68, v50, v51);
      v81 = v51;
      v53 = __swift_allocate_boxed_opaque_existential_1(v80);
      v5[2]((char *)v53, v52, v51);
      _expressionCompatibleValue(for:)((uint64_t)v80, (uint64_t)&v82);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
      if (!*((_QWORD *)&v83 + 1))
      {
        ((void (*)(char *, uint64_t))v5[1])(v52, v51);
        outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v54 = 2;
        swift_willThrow();

        return v5;
      }
      outlined init with take of Any(&v82, &v85);
      __swift_project_boxed_opaque_existential_1(&v85, v86);
      v64 = v5;
      v65 = _bridgeAnythingToObjectiveC<A>(_:)();
      v56 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v65);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      ((void (*)(char *, uint64_t))v64[1])(v52, v51);

    }
    v5 = (void (**)(char *, char *, uint64_t))objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v38, v56, 0, v67, 0);

    return v5;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v88[7])(v16, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v16, v79);
  if (!v31)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v33 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v5;
}

void (**protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NotEqual<A, B>(uint64_t a1, uint64_t a2))(char *, char *, uint64_t)
{
  uint64_t v2;
  void (**result)(char *, char *, uint64_t);
  uint64_t v4;

  result = PredicateExpressions.Equal.convert(state:)(a1, a2, 5);
  if (v2)
    return (void (**)(char *, char *, uint64_t))v4;
  return result;
}

id PredicateExpressions.Arithmetic.convert(state:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  id v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *boxed_opaque_existential_1;
  id v41;
  char v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char v58;
  void *v59;
  void *v60;
  void *v61;
  void (*v62)(__int128 *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  _BYTE *v68;
  id v70;
  char v71;
  id v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _BYTE *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[3];
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v4 = v3;
  v92 = *(_QWORD *)(a2 + 24);
  v93 = a1;
  v86 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](a1);
  v88 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v94 = *(_QWORD *)(v11 - 8);
  v95 = v11;
  MEMORY[0x1E0C80A78](v11);
  v85 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v80 - v14;
  v96 = AssociatedTypeWitness;
  v106 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16);
  v84 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v90 = (char *)&v80 - v19;
  v20 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v2)
  {
    if (*v2 == 1)
    {
      v24 = 0xEE003A7463617274;
      v25 = 0x6275733A6D6F7266;
    }
    else
    {
      v24 = 0xEC0000003A79623ALL;
      v25 = 0x796C7069746C756DLL;
    }
  }
  else
  {
    v24 = 0xE700000000000000;
    v25 = 0x3A6F743A646461;
  }
  v83 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_18205F0D0;
  v91 = a2;
  v26 = *(int *)(a2 + 60);
  v87 = v2;
  (*(void (**)(char *, _BYTE *, uint64_t))(v20 + 16))(v23, &v2[v26], v9);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v27 = swift_dynamicCast();
  v28 = MEMORY[0x1E0DEE9D8];
  if (v27)
  {
    v82 = v24;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
    v29 = v104;
    v30 = v105;
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v93, v29, v30);
    if (!v3)
    {
      v41 = (id)v31;
      v42 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      v81 = 0;
      if ((v42 & 1) != 0)
      {
        LOBYTE(v103) = 1;
        v43 = v41;
        v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v45 = (void *)objc_opt_self();
        v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v103) = 0;
        v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v41 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);

      }
      v38 = v96;
      v35 = (_QWORD *)v97;
      goto LABEL_22;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    v4 = 0;
    v33 = v3;
    v28 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v102 = 0;
    v100 = 0u;
    v101 = 0u;
    outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
    v33 = 0;
  }
  *(_QWORD *)&v103 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v103, v9, v8);
  v34 = v4;
  if (!v4)
  {
    v37 = v106;
    v38 = v96;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v15, 0, 1, v96);
    v39 = v90;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v90, v15, v38);
    v99 = v38;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v39, v38);
    _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
    v81 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    v35 = (_QWORD *)v97;
    if (!*((_QWORD *)&v101 + 1))
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
      if (v33)
        goto LABEL_13;
      goto LABEL_12;
    }
    outlined init with take of Any(&v100, &v103);
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    v48 = _bridgeAnythingToObjectiveC<A>(_:)();
    v41 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);

LABEL_22:
    v49 = v92;
    v50 = v88;
    v51 = v87;
    v52 = v91;
    v53 = v86;
    v97 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    v35[7] = v97;
    v35[4] = v41;
    (*(void (**)(char *, _BYTE *, uint64_t))(v53 + 16))(v50, &v51[*(int *)(v52 + 64)], v49);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v100, (uint64_t)&v103);
      v54 = v104;
      v55 = v105;
      __swift_project_boxed_opaque_existential_1(&v103, v104);
      v56 = v81;
      v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v93, v54, v55);
      v59 = v56;
      if (!v56)
      {
        v70 = (id)v57;
        v71 = v58;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
        if ((v71 & 1) != 0)
        {
          LOBYTE(v103) = 1;
          v72 = v70;
          v73 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          v74 = (void *)objc_opt_self();
          v75 = objc_msgSend(v74, sel_expressionForConstantValue_, v73);
          swift_unknownObjectRelease();
          LOBYTE(v103) = 0;
          v76 = objc_msgSend(v74, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          v70 = objc_msgSend(v74, sel_expressionForConditional_trueExpression_falseExpression_, v72, v75, v76);

        }
        goto LABEL_39;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      v60 = 0;
      v61 = v59;
      v49 = v92;
      v52 = v91;
    }
    else
    {
      v102 = 0;
      v100 = 0u;
      v101 = 0u;
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for ConvertibleExpression?);
      v61 = 0;
      v60 = v81;
    }
    *(_QWORD *)&v103 = MEMORY[0x1E0DEE9D8];
    v62 = *(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v52 + 40) + 16);
    v63 = v85;
    v62(&v103, v49);
    if (v60)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v63, 1, 1, v38);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v63, v95);
      v34 = v35 + 4;
      if (v61)
        goto LABEL_32;
      goto LABEL_31;
    }
    v64 = v63;
    v65 = v106;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v64, 0, 1, v38);
    v66 = v84;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v84, v64, v38);
    v99 = v38;
    v67 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(uint64_t *, char *, uint64_t))(v65 + 16))(v67, v66, v38);
    _expressionCompatibleValue(for:)((uint64_t)v98, (uint64_t)&v100);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    if (!*((_QWORD *)&v101 + 1))
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v38);
      outlined destroy of Any?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
      v34 = v35 + 4;
      if (v61)
        goto LABEL_32;
LABEL_31:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v68 = 2;
LABEL_32:
      swift_willThrow();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      goto LABEL_33;
    }
    outlined init with take of Any(&v100, &v103);
    __swift_project_boxed_opaque_existential_1(&v103, v104);
    v77 = _bridgeAnythingToObjectiveC<A>(_:)();
    v70 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v77);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v38);

LABEL_39:
    v35[11] = v97;
    v35[8] = v70;
    v78 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v79 = _ContiguousArrayBuffer._asCocoaArray()();
    v34 = objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v78, v79);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v34;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v15, 1, 1, v96);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v15, v95);
  v35 = (_QWORD *)v97;
  if (!v33)
  {
LABEL_12:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v36 = 2;
  }
LABEL_13:
  swift_willThrow();
  swift_bridgeObjectRelease();
LABEL_33:
  v35[2] = 0;
  swift_release();
  return v34;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Arithmetic<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.Arithmetic.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

id PredicateExpressions.UnaryMinus.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v29;
  id v30;
  char v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[4];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = v3;
  v5 = v2;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v46 - v11;
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v46 = (char *)&v46 - v14;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_18205F0D0;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v5, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v51, (uint64_t)&v54);
    v19 = v55;
    v20 = v56;
    __swift_project_boxed_opaque_existential_1(&v54, v55);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      v30 = (id)v21;
      v31 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      if ((v31 & 1) != 0)
      {
        LOBYTE(v54) = 1;
        v32 = v30;
        v33 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v34 = (void *)objc_opt_self();
        v35 = objc_msgSend(v34, sel_expressionForConstantValue_, v33);
        swift_unknownObjectRelease();
        LOBYTE(v54) = 0;
        v36 = objc_msgSend(v34, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v30 = objc_msgSend(v34, sel_expressionForConditional_trueExpression_falseExpression_, v32, v35, v36);

      }
      v25 = (_QWORD *)v57;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    v4 = 0;
    v23 = v3;
  }
  else
  {
    v53 = 0;
    v51 = 0u;
    v52 = 0u;
    outlined destroy of Any?((uint64_t)&v51, &demangling cache variable for type metadata for ConvertibleExpression?);
    v23 = 0;
  }
  *(_QWORD *)&v54 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v54, v7, v8);
  v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v48);
    v25 = (_QWORD *)v57;
    if (v23)
      goto LABEL_11;
    goto LABEL_10;
  }
  v26 = v49;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v12, 0, 1, AssociatedTypeWitness);
  v27 = v46;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v46, v12, AssociatedTypeWitness);
  v50[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v50);
  (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(boxed_opaque_existential_1, v27, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v50, (uint64_t)&v51);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  v25 = (_QWORD *)v57;
  if (*((_QWORD *)&v52 + 1))
  {
    outlined init with take of Any(&v51, &v54);
    __swift_project_boxed_opaque_existential_1(&v54, v55);
    v37 = _bridgeAnythingToObjectiveC<A>(_:)();
    v38 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v37);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    v39 = *(void (**)(char *, uint64_t))(v26 + 8);
    v30 = v38;
    v39(v27, AssociatedTypeWitness);

LABEL_17:
    v40 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    v25[7] = v40;
    v25[4] = v30;
    *(_QWORD *)&v54 = -1;
    v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v42 = (void *)objc_opt_self();
    v43 = objc_msgSend(v42, sel_expressionForConstantValue_, v41);
    swift_unknownObjectRelease();
    v25[11] = v40;
    v25[8] = v43;
    v44 = String._bridgeToObjectiveCImpl()();
    v24 = objc_msgSend(v42, sel_expressionForFunction_arguments_, v44, _ContiguousArrayBuffer._asCocoaArray()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v24;
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);
  outlined destroy of Any?((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
  if (v23)
    goto LABEL_11;
LABEL_10:
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *v29 = 2;
LABEL_11:
  swift_willThrow();
  v25[2] = 0;
  swift_release();
  return v24;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.UnaryMinus<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.UnaryMinus.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

char *PredicateExpressions.Comparison.convert(state:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  void *v39;
  char v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char v54;
  void *v55;
  void *v56;
  void *v57;
  char *v58;
  uint64_t *v59;
  void *v60;
  _BYTE *v61;
  id v63;
  char v64;
  id v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v4 = v3;
  v83 = *(_QWORD *)(a2 + 24);
  v79 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](a1);
  v81 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 32);
  v10 = *(_QWORD *)(v8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v86 = *(_QWORD *)(v12 - 8);
  v87 = v12;
  MEMORY[0x1E0C80A78](v12);
  v82 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v73 - v15;
  v97 = AssociatedTypeWitness;
  v88 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v76 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v84 = (char *)&v73 - v20;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *v2;
  v85 = a2;
  v26 = *(int *)(a2 + 60);
  v80 = v2;
  (*(void (**)(char *, unsigned __int8 *, uint64_t, __n128))(v27 + 16))(v24, &v2[v26], v10, v22);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v28 = swift_dynamicCast();
  v29 = MEMORY[0x1E0DEE9D8];
  v77 = a1;
  if (v28)
  {
    v75 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    v30 = v95;
    v31 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(a1, v30, v31);
    if (!v3)
    {
      v39 = (void *)v32;
      v40 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      v74 = 0;
      if ((v40 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        v42 = v39;
        v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v44 = (void *)objc_opt_self();
        v45 = objc_msgSend(v44, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v73 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);

      }
      else
      {
        v73 = v39;
      }
      v25 = v75;
      v37 = v97;
      v36 = v88;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v4 = 0;
    v34 = v3;
    v25 = v75;
    v29 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v93 = 0;
    v91 = 0u;
    v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    v34 = 0;
  }
  *(_QWORD *)&v94 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v94, v10, v9);
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v16, 1, 1, v97);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v16, v87);
    if (v34)
    {
LABEL_8:
      swift_willThrow();
      return v4;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v35 = 2;
    goto LABEL_8;
  }
  v36 = v88;
  v37 = v97;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v16, 0, 1, v97);
  v4 = v84;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v84, v16, v37);
  v90 = v37;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
  (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v4, v37);
  _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
  if (!*((_QWORD *)&v92 + 1))
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
    if (v34)
      goto LABEL_8;
    goto LABEL_7;
  }
  v74 = 0;
  outlined init with take of Any(&v91, &v94);
  __swift_project_boxed_opaque_existential_1(&v94, v95);
  v41 = _bridgeAnythingToObjectiveC<A>(_:)();
  v73 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v41);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);

LABEL_18:
  v47 = v83;
  v48 = v82;
  v49 = v85;
  v4 = (char *)&v80[*(int *)(v85 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v81, v4, v83);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    v50 = v95;
    v51 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    v52 = v74;
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v77, v50, v51);
    v55 = v52;
    if (!v52)
    {
      v63 = (id)v53;
      v64 = v54;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v64 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        v65 = v63;
        v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v67 = (void *)objc_opt_self();
        v68 = objc_msgSend(v67, sel_expressionForConstantValue_, v66);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        v69 = objc_msgSend(v67, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v63 = objc_msgSend(v67, sel_expressionForConditional_trueExpression_falseExpression_, v65, v68, v69);

      }
      goto LABEL_34;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v56 = 0;
    v57 = v55;
    v49 = v85;
  }
  else
  {
    v93 = 0;
    v91 = 0u;
    v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    v57 = 0;
    v56 = v74;
  }
  *(_QWORD *)&v94 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v49 + 40) + 16))(&v94, v47);
  if (!v56)
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v48, 0, 1, v37);
    v58 = v76;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v76, v48, v37);
    v90 = v37;
    v59 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(v59, v58, v37);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (!*((_QWORD *)&v92 + 1))
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v58, v37);
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
      goto LABEL_26;
    }
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    v70 = _bridgeAnythingToObjectiveC<A>(_:)();
    v63 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v70);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v58, v37);

LABEL_34:
    v71 = objc_allocWithZone((Class)NSComparisonPredicate);
    v72 = v73;
    v4 = (char *)objc_msgSend(v71, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v73, v63, 0, v25, 0);

    return v4;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v48, 1, 1, v37);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v48, v87);
LABEL_26:
  v60 = v73;
  if (!v57)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v61 = 2;
  }
  swift_willThrow();

  return v4;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Comparison<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.Comparison.convert(state:)(a1, a2);
  if (v2)
    return (char *)v4;
  return result;
}

id PredicateExpressions.Negation.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  _BYTE *v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  _BYTE v25[24];
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v10 + 16))(&v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v2, v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v28, (uint64_t)&v31);
    v11 = v32;
    v12 = v33;
    __swift_project_boxed_opaque_existential_1(&v31, v32);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v11, v12);
    if (!v3)
    {
      v17 = (id)v13;
      v18 = v14;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      if ((v18 & 1) != 0)
        goto LABEL_18;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    v4 = 0;
    v15 = v3;
  }
  else
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    outlined destroy of Any?((uint64_t)&v28, &demangling cache variable for type metadata for ConvertibleExpression?);
    v15 = 0;
  }
  *(_QWORD *)&v31 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(a2 + 24) + 16))(&v27, &v31, v7);
  if (!v4)
  {
    if (v27 == 2)
      goto LABEL_10;
    v26 = MEMORY[0x1E0DEAFA0];
    v25[0] = v27 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v25, (uint64_t)&v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (!*((_QWORD *)&v29 + 1))
    {
      outlined destroy of Any?((uint64_t)&v28, &demangling cache variable for type metadata for Any?);
      goto LABEL_10;
    }
    outlined init with take of Any(&v28, &v31);
    __swift_project_boxed_opaque_existential_1(&v31, v32);
    v19 = _bridgeAnythingToObjectiveC<A>(_:)();
    v17 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v19);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);

LABEL_17:
    LOBYTE(v31) = 1;
    v20 = v17;
    v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v22 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v21);
    swift_unknownObjectRelease();
    v17 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v20, v22, 0, 4, 0);

LABEL_18:
    v15 = objc_msgSend((id)objc_opt_self(), sel_notPredicateWithSubpredicate_, v17);

    return v15;
  }

LABEL_10:
  if (!v15)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v16 = 2;
  }
  swift_willThrow();
  return v15;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Negation<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.Negation.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

uint64_t PredicateExpressions.Filter.convert(state:)(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;
  id v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  char v32;
  void *v33;
  void *v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  uint64_t *boxed_opaque_existential_1;
  char *v41;
  char v42;
  char *v43;
  uint64_t v44;
  char *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  char *v56;
  void *v57;
  _BYTE *v58;
  id v59;
  char v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  char *v67;
  _QWORD v68[2];
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83[3];
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v3 = v2;
  v73 = *(_QWORD *)(a2 + 24);
  v70 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](a1);
  v71 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  v77 = *(_QWORD *)(v7 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = type metadata accessor for Optional();
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v78 = (char *)v68 - v10;
  v79 = AssociatedTypeWitness;
  v80 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v76 = (char *)v68 - v12;
  v13 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = a2;
  v17 = *(_QWORD *)&v3[*(int *)(a2 + 64)];
  *(_QWORD *)&v88 = 0x5F6C61636F6C5FLL;
  *((_QWORD *)&v88 + 1) = 0xE700000000000000;
  *(_QWORD *)&v85 = *a1;
  v18 = v85;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  result = swift_bridgeObjectRelease();
  if (v18 != -1)
  {
    v21 = v88;
    *a1 = v18 + 1;
    v81 = *((_QWORD *)&v21 + 1);
    v68[1] = v21;
    v22 = String._bridgeToObjectiveCImpl()();
    v69 = (id)objc_opt_self();
    v23 = objc_msgSend(v69, sel_expressionForVariable_, v22);
    swift_unknownObjectRelease();
    specialized Dictionary.subscript.setter((uint64_t)v23, v17);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v3, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
    v24 = swift_dynamicCast();
    v25 = MEMORY[0x1E0DEE9D8];
    v26 = v3;
    if (v24)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
      v27 = v89;
      v28 = v90;
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      v29 = a1;
      v30 = v82;
      v31 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v28 + 16))(a1, v27, v28);
      v33 = v30;
      if (!v30)
      {
        v41 = (char *)v31;
        v42 = v32;
        v82 = 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
        if ((v42 & 1) != 0)
        {
          LOBYTE(v88) = 1;
          v43 = v41;
          v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          v45 = v26;
          v46 = v69;
          v47 = objc_msgSend(v69, sel_expressionForConstantValue_, v44);
          swift_unknownObjectRelease();
          LOBYTE(v88) = 0;
          v48 = objc_msgSend(v46, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          v78 = (char *)objc_msgSend(v46, sel_expressionForConditional_trueExpression_falseExpression_, v43, v47, v48);

          v26 = v45;
        }
        else
        {
          v78 = v41;
        }
        goto LABEL_18;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      v34 = 0;
      v25 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v29 = a1;
      v87 = 0;
      v85 = 0u;
      v86 = 0u;
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
      v33 = 0;
      v34 = v82;
    }
    *(_QWORD *)&v88 = v25;
    v35 = v78;
    (*(void (**)(__int128 *, uint64_t))(v77 + 16))(&v88, v8);
    v36 = v79;
    if (v34)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v35, 1, 1, v36);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v35, v75);
      if (v33)
      {
LABEL_9:
        swift_willThrow();
LABEL_30:
        swift_bridgeObjectRelease();
        return (uint64_t)v3;
      }
LABEL_8:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v37 = 2;
      goto LABEL_9;
    }
    v38 = v80;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v35, 0, 1, v79);
    v39 = v76;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v76, v35, v36);
    v84 = v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v83);
    (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(boxed_opaque_existential_1, v39, v36);
    _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
    v3 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (!*((_QWORD *)&v86 + 1))
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v76, v36);
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for Any?);
      if (v33)
        goto LABEL_9;
      goto LABEL_8;
    }
    v82 = 0;
    outlined init with take of Any(&v85, &v88);
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    v78 = (char *)objc_msgSend(v69, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v76, v36);

LABEL_18:
    v49 = v73;
    v50 = v72;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v71, &v26[*(int *)(v72 + 60)], v73);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
      v51 = v89;
      v52 = v90;
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      v53 = v82;
      v54 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v52 + 16))(v29, v51, v52);
      v56 = v53;
      if (!v53)
      {
        v59 = (id)v54;
        v60 = v55;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
        v61 = v69;
        if ((v60 & 1) != 0)
          goto LABEL_37;
        goto LABEL_36;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      v57 = 0;
      v3 = v56;
    }
    else
    {
      v87 = 0;
      v85 = 0u;
      v86 = 0u;
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
      v3 = 0;
      v57 = v82;
    }
    *(_QWORD *)&v88 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(v50 + 40) + 16))(&v91, &v88, v49);
    if (v57)
    {

LABEL_27:
      if (!v3)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v58 = 2;
      }
      swift_willThrow();

      goto LABEL_30;
    }
    if (v91 == 2)
      goto LABEL_27;
    v84 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v83[0]) = v91 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (!*((_QWORD *)&v86 + 1))
    {
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for Any?);
      goto LABEL_27;
    }
    outlined init with take of Any(&v85, &v88);
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    v62 = _bridgeAnythingToObjectiveC<A>(_:)();
    v61 = v69;
    v59 = objc_msgSend(v69, sel_expressionForConstantValue_, v62);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);

LABEL_36:
    LOBYTE(v88) = 1;
    v63 = v59;
    v64 = objc_msgSend(v61, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v59 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v63, v64, 0, 4, 0);

LABEL_37:
    v65 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v66 = v61;
    v67 = v78;
    v3 = (char *)objc_msgSend(v66, sel_expressionForSubquery_usingIteratorVariable_predicate_, v78, v65, v59);
    swift_unknownObjectRelease();

    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Filter<A, B>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.Filter.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

char *PredicateExpressions.FloatDivision.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  _QWORD *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  id v39;
  char v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  _BYTE *v57;
  id v59;
  char v60;
  char v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[3];
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v4 = v3;
  v5 = v2;
  v79 = *(_QWORD *)(a2 + 24);
  v77 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](a1);
  v74 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 32);
  v78 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v80 = *(_QWORD *)(v12 - 8);
  v81 = v12;
  MEMORY[0x1E0C80A78](v12);
  v73 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v71 - v15;
  v82 = AssociatedTypeWitness;
  v84 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v72 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v71 - v20;
  v22 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_18205F0D0;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v93 = v5;
  v26(v25, v5, v10);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v27 = swift_dynamicCast();
  v28 = MEMORY[0x1E0DEE9D8];
  v75 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v87, (uint64_t)&v90);
    v29 = v91;
    v30 = v92;
    __swift_project_boxed_opaque_existential_1(&v90, v91);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      v39 = (id)v31;
      v40 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      if ((v40 & 1) != 0)
      {
        LOBYTE(v90) = 1;
        v41 = v39;
        v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v43 = (void *)objc_opt_self();
        v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
        swift_unknownObjectRelease();
        LOBYTE(v90) = 0;
        v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v39 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);

      }
      v37 = v82;
      v34 = (_QWORD *)v83;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    v4 = 0;
    v33 = v3;
    v28 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for ConvertibleExpression?);
    v33 = 0;
  }
  *(_QWORD *)&v90 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v90, v10, v9);
  if (!v4)
  {
    v36 = v84;
    v37 = v82;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v16, 0, 1, v82);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v21, v16, v37);
    v86 = v37;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v85);
    (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v21, v37);
    _expressionCompatibleValue(for:)((uint64_t)v85, (uint64_t)&v87);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
    v34 = (_QWORD *)v83;
    if (!*((_QWORD *)&v88 + 1))
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v37);
      outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for Any?);
      if (v33)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined init with take of Any(&v87, &v90);
    __swift_project_boxed_opaque_existential_1(&v90, v91);
    v46 = _bridgeAnythingToObjectiveC<A>(_:)();
    v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v46);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v37);

LABEL_17:
    v47 = v79;
    v48 = v75;
    v49 = v78;
    v50 = v74;
    v83 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    v34[7] = v83;
    v34[4] = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v50, v93 + *(int *)(v49 + 60), v47);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v87, (uint64_t)&v90);
      v51 = v91;
      v52 = v92;
      __swift_project_boxed_opaque_existential_1(&v90, v91);
      v59 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v48, v51, v52);
      v61 = v60;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      if ((v61 & 1) != 0)
      {
        LOBYTE(v90) = 1;
        v62 = v59;
        v63 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v64 = (void *)objc_opt_self();
        v65 = objc_msgSend(v64, sel_expressionForConstantValue_, v63);
        swift_unknownObjectRelease();
        LOBYTE(v90) = 0;
        v66 = objc_msgSend(v64, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v59 = objc_msgSend(v64, sel_expressionForConditional_trueExpression_falseExpression_, v62, v65, v66);

      }
    }
    else
    {
      v89 = 0;
      v87 = 0u;
      v88 = 0u;
      outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for ConvertibleExpression?);
      v16 = 0;
      *(_QWORD *)&v90 = MEMORY[0x1E0DEE9D8];
      v53 = v73;
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v49 + 40) + 16))(&v90, v47);
      v54 = v84;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v53, 0, 1, v37);
      v55 = v72;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v72, v53, v37);
      v86 = v37;
      v56 = __swift_allocate_boxed_opaque_existential_1(v85);
      (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 16))(v56, v55, v37);
      _expressionCompatibleValue(for:)((uint64_t)v85, (uint64_t)&v87);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      if (!*((_QWORD *)&v88 + 1))
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v37);
        outlined destroy of Any?((uint64_t)&v87, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v57 = 2;
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(v34 + 4));
        goto LABEL_21;
      }
      outlined init with take of Any(&v87, &v90);
      __swift_project_boxed_opaque_existential_1(&v90, v91);
      v67 = v54;
      v68 = _bridgeAnythingToObjectiveC<A>(_:)();
      v59 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v68);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v55, v37);

    }
    v34[11] = v83;
    v34[8] = v59;
    v69 = String._bridgeToObjectiveCImpl()();
    v70 = _ContiguousArrayBuffer._asCocoaArray()();
    v16 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v69, v70);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v16;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56))(v16, 1, 1, v82);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v16, v81);
  v34 = (_QWORD *)v83;
  if (!v33)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v35 = 2;
  }
LABEL_8:
  swift_willThrow();
LABEL_21:
  v34[2] = 0;
  swift_release();
  return v16;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.FloatDivision<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.FloatDivision.convert(state:)(a1, a2);
  if (v2)
    return (char *)v4;
  return result;
}

id PredicateExpressions.ClosedRange.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  id v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *boxed_opaque_existential_1;
  id v40;
  char v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  _BYTE *v60;
  id v62;
  char v63;
  char v64;
  id v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[3];
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = v3;
  v5 = v2;
  v81 = *(_QWORD *)(a2 + 24);
  v76 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](a1);
  v77 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 32);
  v80 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v82 = *(_QWORD *)(v12 - 8);
  v83 = v12;
  MEMORY[0x1E0C80A78](v12);
  v75 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v73 - v15;
  v84 = AssociatedTypeWitness;
  v86 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v74 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v73 - v20;
  v22 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_1820FC860;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v95 = v5;
  v26(v25, v5, v10);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v27 = swift_dynamicCast();
  v28 = MEMORY[0x1E0DEE9D8];
  v78 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    v29 = v93;
    v30 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      v40 = (id)v31;
      v41 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      if ((v41 & 1) != 0)
      {
        LOBYTE(v92) = 1;
        v42 = v40;
        v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v44 = (void *)objc_opt_self();
        v45 = objc_msgSend(v44, sel_expressionForConstantValue_, v43);
        swift_unknownObjectRelease();
        LOBYTE(v92) = 0;
        v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v40 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);

      }
      v38 = v84;
      v35 = v85;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    v4 = 0;
    v33 = v3;
    v28 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v91 = 0;
    v89 = 0u;
    v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    v33 = 0;
  }
  *(_QWORD *)&v92 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v9 + 16))(&v92, v10, v9);
  v34 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v16, 1, 1, v84);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v16, v83);
    v35 = v85;
    if (v33)
    {
LABEL_8:
      swift_willThrow();
LABEL_21:
      *(_QWORD *)(v35 + 16) = 0;
      swift_release();
      return v34;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v36 = 2;
    goto LABEL_8;
  }
  v37 = v86;
  v38 = v84;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v16, 0, 1, v84);
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v21, v16, v38);
  v88 = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v87);
  (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v21, v38);
  _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
  v35 = v85;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
  if (!*((_QWORD *)&v90 + 1))
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v38);
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
    if (v33)
      goto LABEL_8;
    goto LABEL_7;
  }
  outlined init with take of Any(&v89, &v92);
  __swift_project_boxed_opaque_existential_1(&v92, v93);
  v47 = v37;
  v48 = _bridgeAnythingToObjectiveC<A>(_:)();
  v40 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v38);

LABEL_17:
  v49 = v81;
  v50 = v78;
  v51 = v80;
  v52 = v77;
  v53 = v76;
  *(_QWORD *)(v35 + 32) = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v95 + *(int *)(v51 + 60), v49);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    v54 = v93;
    v55 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    v62 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v50, v54, v55);
    v64 = v63;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    if ((v64 & 1) != 0)
    {
      LOBYTE(v92) = 1;
      v65 = v62;
      v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v67 = (void *)objc_opt_self();
      v68 = objc_msgSend(v67, sel_expressionForConstantValue_, v66);
      swift_unknownObjectRelease();
      LOBYTE(v92) = 0;
      v69 = objc_msgSend(v67, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v62 = objc_msgSend(v67, sel_expressionForConditional_trueExpression_falseExpression_, v65, v68, v69);

    }
  }
  else
  {
    v91 = 0;
    v89 = 0u;
    v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(_QWORD *)&v92 = MEMORY[0x1E0DEE9D8];
    v56 = v75;
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v51 + 40) + 16))(&v92, v49);
    v34 = 0;
    v57 = v86;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v56, 0, 1, v38);
    v58 = v74;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v74, v56, v38);
    v88 = v38;
    v59 = __swift_allocate_boxed_opaque_existential_1(v87);
    (*(void (**)(uint64_t *, char *, uint64_t))(v57 + 16))(v59, v58, v38);
    _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    if (!*((_QWORD *)&v90 + 1))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v38);
      outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v60 = 2;
      swift_willThrow();

      goto LABEL_21;
    }
    outlined init with take of Any(&v89, &v92);
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    v70 = v57;
    v71 = _bridgeAnythingToObjectiveC<A>(_:)();
    v62 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v71);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v38);

  }
  *(_QWORD *)(v35 + 40) = v62;
  *(_QWORD *)&v92 = v35;
  specialized Array._endMutation()();
  if ((unint64_t)v92 >> 62)
  {
    if ((uint64_t)v92 < 0)
      v72 = v92;
    else
      v72 = v92 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    v72 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  v34 = objc_msgSend((id)objc_opt_self(), sel_expressionForAggregate_, v72);
  swift_unknownObjectRelease();
  return v34;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.ClosedRange<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.ClosedRange.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

id PredicateExpressions.SequenceContains.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  void *v32;
  void *v33;
  id v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  uint64_t *boxed_opaque_existential_1;
  void *v39;
  char v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char v55;
  void *v56;
  void *v57;
  char *v58;
  uint64_t *v59;
  _BYTE *v60;
  void *v61;
  id v63;
  char v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;

  v92 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v81 = *(_QWORD *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v79 = type metadata accessor for Optional();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v87 = (char *)&v76 - v6;
  v88 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v7);
  v80 = (char *)&v76 - v8;
  v85 = v4;
  v83 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v9);
  v84 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v90 = *(_QWORD *)(v14 - 8);
  v91 = (id)v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v76 - v15;
  v93 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v17);
  v89 = (char *)&v76 - v18;
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(int *)(a2 + 68);
  v86 = v2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))(v22, v2 + v23, v12, v20);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v25 = swift_dynamicCast();
  v26 = MEMORY[0x1E0DEE9D8];
  if (v25)
  {
    v77 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)&v99);
    v27 = v100;
    v28 = v101;
    __swift_project_boxed_opaque_existential_1(&v99, v100);
    v29 = v102;
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v92, v27, v28);
    v32 = v29;
    if (!v29)
    {
      v39 = (void *)v30;
      v40 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      v102 = 0;
      if ((v40 & 1) != 0)
      {
        LOBYTE(v99) = 1;
        v43 = v39;
        v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v45 = (void *)objc_opt_self();
        v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v99) = 0;
        v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v91 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);

      }
      else
      {
        v91 = v39;
      }
      AssociatedTypeWitness = v77;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
    v33 = 0;
    v34 = v32;
    AssociatedTypeWitness = v77;
  }
  else
  {
    v98 = 0;
    v96 = 0u;
    v97 = 0u;
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for ConvertibleExpression?);
    v34 = 0;
    v33 = v102;
  }
  *(_QWORD *)&v99 = v26;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 16))(&v99, v12, v11);
  if (v33)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v16, 1, 1, v13);
    (*(void (**)(char *, id))(v90 + 8))(v16, v91);
    if (v34)
    {
LABEL_8:
      swift_willThrow();
      return v34;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v35 = 2;
    goto LABEL_8;
  }
  v36 = v93;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v16, 0, 1, v13);
  v37 = v89;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v89, v16, v13);
  v95 = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v94);
  (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v37, v13);
  _expressionCompatibleValue(for:)((uint64_t)v94, (uint64_t)&v96);
  v102 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
  v41 = v34;
  if (!*((_QWORD *)&v97 + 1))
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for Any?);
    if (v34)
      goto LABEL_8;
    goto LABEL_7;
  }
  outlined init with take of Any(&v96, &v99);
  __swift_project_boxed_opaque_existential_1(&v99, v100);
  v42 = _bridgeAnythingToObjectiveC<A>(_:)();
  v91 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v42);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v13);

LABEL_18:
  v48 = v88;
  v49 = v87;
  v50 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v84, v86, v85);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)&v99);
    v51 = v100;
    v52 = v101;
    __swift_project_boxed_opaque_existential_1(&v99, v100);
    v53 = v102;
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v92, v51, v52);
    v56 = v53;
    if (!v53)
    {
      v63 = (id)v54;
      v64 = v55;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      if ((v64 & 1) != 0)
      {
        LOBYTE(v99) = 1;
        v65 = v63;
        v66 = AssociatedTypeWitness;
        v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v68 = (void *)objc_opt_self();
        v69 = objc_msgSend(v68, sel_expressionForConstantValue_, v67);
        swift_unknownObjectRelease();
        LOBYTE(v99) = 0;
        v70 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v63 = objc_msgSend(v68, sel_expressionForConditional_trueExpression_falseExpression_, v65, v69, v70);

        AssociatedTypeWitness = v66;
      }
      goto LABEL_34;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
    v57 = 0;
    v34 = v56;
  }
  else
  {
    v98 = 0;
    v96 = 0u;
    v97 = 0u;
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for ConvertibleExpression?);
    v34 = 0;
    v57 = v102;
  }
  *(_QWORD *)&v99 = v26;
  (*(void (**)(__int128 *, uint64_t))(v81 + 16))(&v99, v50);
  if (v57)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v79);
    if (v34)
      goto LABEL_28;
    goto LABEL_27;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, AssociatedTypeWitness);
  v58 = v80;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v80, v49, AssociatedTypeWitness);
  v95 = AssociatedTypeWitness;
  v59 = __swift_allocate_boxed_opaque_existential_1(v94);
  (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(v59, v58, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v94, (uint64_t)&v96);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
  if (!*((_QWORD *)&v97 + 1))
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v80, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for Any?);
    if (v34)
      goto LABEL_28;
LABEL_27:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v60 = 2;
LABEL_28:
    v61 = v91;
    swift_willThrow();

    return v34;
  }
  outlined init with take of Any(&v96, &v99);
  __swift_project_boxed_opaque_existential_1(&v99, v100);
  v71 = _bridgeAnythingToObjectiveC<A>(_:)();
  v63 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v71);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v80, AssociatedTypeWitness);

LABEL_34:
  if (swift_conformsToProtocol2())
    v72 = AssociatedTypeWitness;
  else
    v72 = 0;
  if (v72)
    v73 = 100;
  else
    v73 = 10;
  v74 = objc_allocWithZone((Class)NSComparisonPredicate);
  v75 = v91;
  v34 = objc_msgSend(v74, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v91, v63, 0, v73, 0);

  return v34;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceContains<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.SequenceContains.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

uint64_t PredicateExpressions.Range._lower.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  a2[3] = v3;
  a2[4] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v2, v3);
}

uint64_t PredicateExpressions.Range._upper.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;

  v3 = v2 + *(int *)(a1 + 60);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  a2[3] = v4;
  a2[4] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, v3, v4);
}

uint64_t RangeExpression._anyRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  void (*v33)(uint64_t *, char *, uint64_t);
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  void (*v41)(uint64_t *, char *, uint64_t);
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t *v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v74 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v64 = type metadata accessor for PartialRangeUpTo();
  v59 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v60 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v58 - v7;
  v68 = type metadata accessor for PartialRangeThrough();
  v61 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v62 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)&v58 - v10;
  v72 = type metadata accessor for PartialRangeFrom();
  v65 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v66 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v71 = (char *)&v58 - v13;
  v14 = type metadata accessor for ClosedRange();
  v69 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v70 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v58 - v17;
  v19 = type metadata accessor for Range();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v58 - v24;
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = v30;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 16))(v29, v73, a1, v27);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v19);
    v31 = v74;
    *(_QWORD *)(v74 + 24) = AssociatedTypeWitness;
    *(_QWORD *)(v31 + 32) = AssociatedConformanceWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v31);
    v33 = *(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
    v33(boxed_opaque_existential_1, v22, AssociatedTypeWitness);
    v34 = &v22[*(int *)(v19 + 36)];
    *(_QWORD *)(v31 + 64) = AssociatedTypeWitness;
    *(_QWORD *)(v31 + 72) = AssociatedConformanceWitness;
    v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 40));
    v33(v35, v34, AssociatedTypeWitness);
    *(_BYTE *)(v31 + 80) = 0;
  }
  else
  {
    v36 = v74;
    if (swift_dynamicCast())
    {
      v37 = v70;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v70, v18, v14);
      v38 = v36;
      v39 = (uint64_t *)(v36 + 40);
      *(_QWORD *)(v36 + 24) = AssociatedTypeWitness;
      *(_QWORD *)(v36 + 32) = AssociatedConformanceWitness;
      v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
      v41 = *(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
      v41(v40, v37, AssociatedTypeWitness);
      v42 = &v37[*(int *)(v14 + 36)];
      *(_QWORD *)(v38 + 64) = AssociatedTypeWitness;
      *(_QWORD *)(v38 + 72) = AssociatedConformanceWitness;
      v43 = __swift_allocate_boxed_opaque_existential_1(v39);
      v41(v43, v42, AssociatedTypeWitness);
      *(_BYTE *)(v38 + 80) = 1;
    }
    else
    {
      v45 = v71;
      v44 = v72;
      if (swift_dynamicCast())
      {
        v46 = v66;
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v66, v45, v44);
        *(_QWORD *)(v36 + 24) = AssociatedTypeWitness;
        *(_QWORD *)(v36 + 32) = AssociatedConformanceWitness;
        v47 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
        (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v47, v46, AssociatedTypeWitness);
        v48 = 2;
      }
      else
      {
        v50 = v67;
        v49 = v68;
        if (swift_dynamicCast())
        {
          v51 = v62;
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v62, v50, v49);
          *(_QWORD *)(v36 + 24) = AssociatedTypeWitness;
          *(_QWORD *)(v36 + 32) = AssociatedConformanceWitness;
          v52 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v52, v51, AssociatedTypeWitness);
          v48 = 3;
        }
        else
        {
          v54 = v63;
          v53 = v64;
          if (swift_dynamicCast())
          {
            v55 = v60;
            (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v60, v54, v53);
            *(_QWORD *)(v36 + 24) = AssociatedTypeWitness;
            *(_QWORD *)(v36 + 32) = AssociatedConformanceWitness;
            v56 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v36);
            (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v56, v55, AssociatedTypeWitness);
            v48 = 4;
          }
          else
          {
            *(_OWORD *)(v36 + 48) = 0u;
            *(_OWORD *)(v36 + 64) = 0u;
            *(_OWORD *)(v36 + 16) = 0u;
            *(_OWORD *)(v36 + 32) = 0u;
            *(_OWORD *)v36 = 0u;
            v48 = -1;
          }
        }
      }
      *(_BYTE *)(v36 + 80) = v48;
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v29, a1);
}

uint64_t PredicateExpressions.Value<A>._anyRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RangeExpression._anyRange.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for _RangeValue._anyRange.getter in conformance <A> PredicateExpressions.Value<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.Value<A>._anyRange.getter(a1, a2);
}

_QWORD *PredicateExpressions.RangeExpressionContains.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  void (**v42)(char *, _QWORD, uint64_t, uint64_t);
  _BYTE *v43;
  char *v45;
  char *v46;
  uint64_t *boxed_opaque_existential_1;
  id v48;
  char v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  _BYTE *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  id v82;
  char v83;
  char v84;
  id v85;
  uint64_t v86;
  void *v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  char *v97;
  void *v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  void (**v102)(char *, id);
  uint64_t *v103;
  void *v104;
  char v105;
  char v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  __n128 v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, __n128);
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  void *v135;
  uint64_t v136;
  uint64_t *v137;
  void (*v138)(uint64_t *, char *, uint64_t);
  _BYTE *v139;
  id v140;
  char v141;
  char v142;
  id v143;
  uint64_t v144;
  void *v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD v153[2];
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  void (**v168)(char *, id);
  id v169;
  char *v170;
  uint64_t v171;
  void (**v172)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v173;
  uint64_t v174[3];
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  unsigned __int8 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;

  v3 = v2;
  v171 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v163 = *(_QWORD *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v155 = *(_QWORD *)(v7 - 8);
  v156 = v7;
  MEMORY[0x1E0C80A78](v7);
  v164 = (char *)v153 - v8;
  v161 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v162 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v9);
  v157 = (char *)v153 - v10;
  v166 = v5;
  v160 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v11);
  v154 = (char *)v153 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v158 = (char *)v153 - v14;
  MEMORY[0x1E0C80A78](v15);
  v159 = (char *)v153 - v16;
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD **)(a2 + 24);
  v19 = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for Optional();
  v168 = *(void (***)(char *, id))(v20 - 8);
  v169 = (id)v20;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v153 - v21;
  v172 = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v19 - 8);
  MEMORY[0x1E0C80A78](v23);
  v170 = (char *)v153 - v24;
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)v153 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153[1] = a2;
  v29 = *(int *)(a2 + 60);
  v165 = v3;
  (*(void (**)(char *, uint64_t, _QWORD *, __n128))(v30 + 16))(v28, v3 + v29, v18, v26);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v173 = v18;
  v167 = (_QWORD *)v31;
  v32 = swift_dynamicCast();
  v33 = MEMORY[0x1E0DEE9D8];
  if (v32)
  {
    v153[0] = v17;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v182, (uint64_t)&v188);
    v35 = v189;
    v34 = v190;
    __swift_project_boxed_opaque_existential_1(&v188, v189);
    v36 = v191;
    v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v171, v35, v34);
    v39 = v36;
    if (!v36)
    {
      v48 = (id)v37;
      v49 = v38;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
      if ((v49 & 1) != 0)
      {
        LOBYTE(v188) = 1;
        v50 = v48;
        v51 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v52 = (void *)objc_opt_self();
        v53 = objc_msgSend(v52, sel_expressionForConstantValue_, v51);
        swift_unknownObjectRelease();
        LOBYTE(v188) = 0;
        v54 = objc_msgSend(v52, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v48 = objc_msgSend(v52, sel_expressionForConditional_trueExpression_falseExpression_, v50, v53, v54);

      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
    v40 = 0;
    v33 = MEMORY[0x1E0DEE9D8];
    v17 = v153[0];
  }
  else
  {
    *(_QWORD *)&v184 = 0;
    v182 = 0u;
    v183 = 0u;
    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for ConvertibleExpression?);
    v39 = 0;
    v40 = v191;
  }
  *(_QWORD *)&v188 = v33;
  (*(void (**)(__int128 *, _QWORD *, uint64_t))(v17 + 16))(&v188, v173, v17);
  v41 = v40;
  v42 = v172;
  if (v40)
  {

    v42[7](v22, 1, 1, v19);
    v168[1](v22, v169);
    if (v39)
    {
LABEL_8:
      swift_willThrow();
      return v41;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v43 = 2;
    goto LABEL_8;
  }
  v45 = v39;
  v172[7](v22, 0, 1, v19);
  v46 = v170;
  ((void (*)(char *, char *, uint64_t))v42[4])(v170, v22, v19);
  *((_QWORD *)&v180 + 1) = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v179);
  ((void (*)(uint64_t *, char *, uint64_t))v42[2])(boxed_opaque_existential_1, v46, v19);
  _expressionCompatibleValue(for:)((uint64_t)&v179, (uint64_t)&v182);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
  if (!*((_QWORD *)&v183 + 1))
  {
    ((void (*)(char *, uint64_t))v42[1])(v170, v19);
    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    if (v45)
      goto LABEL_8;
    goto LABEL_7;
  }
  v153[0] = v17;
  outlined init with take of Any(&v182, &v188);
  __swift_project_boxed_opaque_existential_1(&v188, v189);
  v55 = _bridgeAnythingToObjectiveC<A>(_:)();
  v48 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v55);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
  ((void (*)(char *, uint64_t))v42[1])(v170, v19);

LABEL_17:
  v57 = v163;
  v56 = v164;
  v59 = v165;
  v58 = v166;
  v60 = *(char **)(v160 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v60)(v159, v165, v166);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v182, (uint64_t)&v188);
    v61 = v189;
    v62 = v190;
    __swift_project_boxed_opaque_existential_1(&v188, v189);
    v82 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v171, v61, v62);
    v84 = v83;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
    if ((v84 & 1) != 0)
    {
      LOBYTE(v188) = 1;
      v85 = v82;
      v86 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v87 = (void *)objc_opt_self();
      v88 = objc_msgSend(v87, sel_expressionForConstantValue_, v86);
      swift_unknownObjectRelease();
      LOBYTE(v188) = 0;
      v89 = objc_msgSend(v87, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v82 = objc_msgSend(v87, sel_expressionForConditional_trueExpression_falseExpression_, v85, v88, v89);

    }
    goto LABEL_37;
  }
  v191 = v60;
  *(_QWORD *)&v184 = 0;
  v182 = 0u;
  v183 = 0u;
  outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for ConvertibleExpression?);
  *(_QWORD *)&v188 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v57 + 16))(&v188, v58, v57);
  v172 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v48;
  v78 = v161;
  v79 = v162;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v56, 0, 1, v162);
  v80 = v157;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v157, v56, v79);
  *((_QWORD *)&v180 + 1) = v79;
  v81 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v179);
  (*(void (**)(uint64_t *, char *, uint64_t))(v78 + 16))(v81, v80, v79);
  _expressionCompatibleValue(for:)((uint64_t)&v179, (uint64_t)&v182);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
  v48 = v172;
  if (*((_QWORD *)&v183 + 1))
  {
    outlined init with take of Any(&v182, &v188);
    __swift_project_boxed_opaque_existential_1(&v188, v189);
    v101 = _bridgeAnythingToObjectiveC<A>(_:)();
    v82 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v101);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v157, v162);

LABEL_37:
    v41 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v48, v82, 0, 100, 0);

    return v41;
  }
  (*(void (**)(char *, uint64_t))(v161 + 8))(v157, v162);
  outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  v63 = (void *)swift_allocError();
  *v64 = 2;
  swift_willThrow();

  v65 = v191;
  ((void (*)(char *, uint64_t, uint64_t))v191)(v158, v59, v58);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RangeOperator);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_QWORD *)&v184 = 0;
    v182 = 0u;
    v183 = 0u;
    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for _RangeOperator?);
    v41 = v154;
    ((void (*)(char *, uint64_t, uint64_t))v65)(v154, v59, v58);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RangeValue);
    if (swift_dynamicCast())
    {
      v76 = *((_QWORD *)&v180 + 1);
      v77 = v181;
      v41 = __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v77 + 8))(&v182, v76, v77);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      if (v187 != 255)
      {
        outlined init with take of AnyRange((uint64_t)&v182, (uint64_t)&v188);
        outlined init with copy of AnyRange((uint64_t)&v188, (uint64_t)&v182);
        __asm { BR              X10 }
      }
    }
    else
    {
      v181 = 0;
      v179 = 0u;
      v180 = 0u;
      outlined destroy of Any?((uint64_t)&v179, &demangling cache variable for type metadata for _RangeValue?);
      v182 = 0u;
      v183 = 0u;
      v184 = 0u;
      v185 = 0u;
      v186 = 0u;
      v187 = -1;
    }
    outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for AnyRange?);
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v100 = 2;
    swift_willThrow();

    return v41;
  }
  v172 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v48;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v182, (uint64_t)&v188);
  v66 = v189;
  v67 = v190;
  __swift_project_boxed_opaque_existential_1(&v188, v189);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v67 + 8))(&v182, v66, v67);
  v69 = *((_QWORD *)&v183 + 1);
  v68 = v184;
  v70 = __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
  v71 = MEMORY[0x1E0C80A78](v70);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v73 + 16))((char *)v153 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0), v70, v69, v71);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v176, (uint64_t)&v179);
    v74 = *((_QWORD *)&v180 + 1);
    v75 = v181;
    __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
    v104 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v171, v74, v75);
    v106 = v105;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
    if ((v106 & 1) != 0)
    {
      LOBYTE(v179) = 1;
      v108 = v104;
      v109 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v110 = (void *)objc_opt_self();
      v111 = objc_msgSend(v110, sel_expressionForConstantValue_, v109);
      swift_unknownObjectRelease();
      LOBYTE(v179) = 0;
      v112 = objc_msgSend(v110, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v169 = objc_msgSend(v110, sel_expressionForConditional_trueExpression_falseExpression_, v108, v111, v112);

    }
    else
    {
      v169 = v104;
    }
    goto LABEL_46;
  }
  v178 = 0;
  v176 = 0u;
  v177 = 0u;
  outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for ConvertibleExpression?);
  v191 = 0;
  v169 = 0;
  v90 = swift_getAssociatedTypeWitness();
  v173 = v153;
  v91 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v168 = (void (**)(char *, id))((char *)v153 - v92);
  v93 = type metadata accessor for Optional();
  v170 = (char *)v153;
  v94 = *(_QWORD *)(v93 - 8);
  v95 = MEMORY[0x1E0C80A78](v93);
  v97 = (char *)v153 - v96;
  *(_QWORD *)&v179 = MEMORY[0x1E0DEE9D8];
  v98 = v169;
  (*(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v68 + 16))(&v179, v69, v68, v95);
  if (v98)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v97, 1, 1, v90);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v97, v93);
    v41 = v172;
    if (v191)
    {
LABEL_32:
      swift_willThrow();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
      return v41;
    }
LABEL_31:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v99 = 2;
    goto LABEL_32;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v97, 0, 1, v90);
  v102 = v168;
  (*(void (**)(void (**)(char *, id), char *, uint64_t))(v91 + 32))(v168, v97, v90);
  v175 = v90;
  v103 = __swift_allocate_boxed_opaque_existential_1(v174);
  (*(void (**)(uint64_t *, void (**)(char *, id), uint64_t))(v91 + 16))(v103, v102, v90);
  _expressionCompatibleValue(for:)((uint64_t)v174, (uint64_t)&v176);
  v41 = v172;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
  if (!*((_QWORD *)&v177 + 1))
  {
    (*(void (**)(_QWORD, uint64_t))(v91 + 8))(v102, v90);
    outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
    if (v191)
      goto LABEL_32;
    goto LABEL_31;
  }
  outlined init with take of Any(&v176, &v179);
  __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
  v107 = _bridgeAnythingToObjectiveC<A>(_:)();
  v169 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v107);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
  (*(void (**)(_QWORD, uint64_t))(v91 + 8))(v102, v90);

LABEL_46:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
  v113 = v189;
  v114 = v190;
  __swift_project_boxed_opaque_existential_1(&v188, v189);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v114 + 16))(&v182, v113, v114);
  v115 = *((_QWORD *)&v183 + 1);
  v116 = v184;
  v117 = __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
  v118 = MEMORY[0x1E0C80A78](v117);
  v120 = (char *)v153 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = *(void (**)(char *, __n128))(v121 + 16);
  v191 = v123;
  v122(v120, v118);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v176, (uint64_t)&v179);
    v124 = *((_QWORD *)&v180 + 1);
    v125 = v181;
    __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
    v140 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v171, v124, v125);
    v142 = v141;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
    if ((v142 & 1) != 0)
    {
      LOBYTE(v179) = 1;
      v143 = v140;
      v144 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v145 = (void *)objc_opt_self();
      v146 = objc_msgSend(v145, sel_expressionForConstantValue_, v144);
      swift_unknownObjectRelease();
      LOBYTE(v179) = 0;
      v147 = objc_msgSend(v145, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v140 = objc_msgSend(v145, sel_expressionForConditional_trueExpression_falseExpression_, v143, v146, v147);

    }
    v135 = v172;
    goto LABEL_60;
  }
  v178 = 0;
  v176 = 0u;
  v177 = 0u;
  outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for ConvertibleExpression?);
  v173 = 0;
  v170 = 0;
  v126 = swift_getAssociatedTypeWitness();
  v168 = (void (**)(char *, id))v153;
  v171 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126);
  v128 = (char *)v153 - v127;
  v129 = type metadata accessor for Optional();
  v167 = v153;
  v130 = *(_QWORD *)(v129 - 8);
  v131 = MEMORY[0x1E0C80A78](v129);
  v133 = (char *)v153 - v132;
  *(_QWORD *)&v179 = MEMORY[0x1E0DEE9D8];
  v134 = v170;
  (*(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v116 + 16))(&v179, v115, v116, v131);
  if (v134)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56))(v133, 1, 1, v126);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v133, v129);
    v135 = v172;
  }
  else
  {
    v136 = v171;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v133, 0, 1, v126);
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v128, v133, v126);
    v175 = v126;
    v137 = __swift_allocate_boxed_opaque_existential_1(v174);
    v138 = *(void (**)(uint64_t *, char *, uint64_t))(v136 + 16);
    v191 = v128;
    v138(v137, v128, v126);
    _expressionCompatibleValue(for:)((uint64_t)v174, (uint64_t)&v176);
    v135 = v172;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
    if (*((_QWORD *)&v177 + 1))
    {
      outlined init with take of Any(&v176, &v179);
      __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
      v148 = _bridgeAnythingToObjectiveC<A>(_:)();
      v149 = v126;
      v140 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v148);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v191, v149);

LABEL_60:
      v150 = v169;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v151 = swift_allocObject();
      *(_OWORD *)(v151 + 16) = xmmword_1820FC860;
      *(_QWORD *)(v151 + 32) = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v135, v150, 0, 3, 0);
      *(_QWORD *)(v151 + 40) = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v135, v140, 0, 0, 0);
      *(_QWORD *)&v182 = v151;
      specialized Array._endMutation()();
      if ((unint64_t)v182 >> 62)
      {
        if ((uint64_t)v182 < 0)
          v152 = v182;
        else
          v152 = v182 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSPredicate);
        v152 = _ContiguousArrayBuffer._asCocoaArray()();
      }
      v41 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v152);

      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
      return v41;
    }
    (*(void (**)(char *, uint64_t))(v136 + 8))(v191, v126);
    outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
  }
  v41 = v169;
  if (!v173)
  {
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v139 = 2;
  }
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
  return v41;
}

_QWORD *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.RangeExpressionContains<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  result = PredicateExpressions.RangeExpressionContains.convert(state:)(a1, a2);
  if (v2)
    return (_QWORD *)v4;
  return result;
}

uint64_t PredicateExpressions.SequenceContainsWhere.convert(state:)(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;
  id v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  uint64_t *boxed_opaque_existential_1;
  id v42;
  char v43;
  char *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  _BYTE *v65;
  id v66;
  char v67;
  id v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  char **v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  void *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  id v111;
  _QWORD v112[2];
  id v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127[3];
  char *v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v3 = v2;
  v117 = *(_QWORD *)(a2 + 24);
  v114 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](a1);
  v115 = (char *)v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  v121 = *(_QWORD *)(v7 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v120 = type metadata accessor for Optional();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v122 = (char *)v112 - v10;
  v123 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v124 = (char *)AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v11);
  v118 = (char *)v112 - v12;
  v13 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = a2;
  v17 = *(_QWORD *)&v3[*(int *)(a2 + 64)];
  *(_QWORD *)&v132 = 0x5F6C61636F6C5FLL;
  *((_QWORD *)&v132 + 1) = 0xE700000000000000;
  *(_QWORD *)&v129 = *a1;
  v18 = v129;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  result = swift_bridgeObjectRelease();
  if (v18 == -1)
  {
    __break(1u);
    goto LABEL_59;
  }
  v21 = v132;
  *a1 = v18 + 1;
  v125 = *((_QWORD *)&v21 + 1);
  v112[1] = v21;
  v22 = String._bridgeToObjectiveCImpl()();
  v113 = (id)objc_opt_self();
  v23 = objc_msgSend(v113, sel_expressionForVariable_, v22);
  swift_unknownObjectRelease();
  specialized Dictionary.subscript.setter((uint64_t)v23, v17);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v3, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v24 = swift_dynamicCast();
  v25 = MEMORY[0x1E0DEE9D8];
  if (v24)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v129, (uint64_t)&v132);
    v26 = v133;
    v27 = v134;
    __swift_project_boxed_opaque_existential_1(&v132, v133);
    v28 = v126;
    v29 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v27 + 16))(a1, v26, v27);
    v31 = a1;
    v32 = v28;
    if (!v28)
    {
      v42 = (id)v29;
      v43 = v30;
      v126 = 0;
      v44 = v3;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
      if ((v43 & 1) != 0)
      {
        LOBYTE(v132) = 1;
        v45 = v42;
        v46 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v47 = v113;
        v48 = objc_msgSend(v113, sel_expressionForConstantValue_, v46);
        swift_unknownObjectRelease();
        LOBYTE(v132) = 0;
        v49 = objc_msgSend(v47, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v50 = objc_msgSend(v47, sel_expressionForConditional_trueExpression_falseExpression_, v45, v48, v49);

        v42 = v50;
      }
      v51 = v117;
      v52 = v116;
      goto LABEL_18;
    }
    v33 = v31;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    v34 = 0;
    v35 = v32;
  }
  else
  {
    v33 = a1;
    v131 = 0;
    v129 = 0u;
    v130 = 0u;
    outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for ConvertibleExpression?);
    v35 = 0;
    v34 = v126;
  }
  *(_QWORD *)&v132 = v25;
  v36 = v122;
  v37 = v3;
  (*(void (**)(__int128 *, uint64_t))(v121 + 16))(&v132, v8);
  v38 = v123;
  if (v34)
  {

    (*(void (**)(char *, uint64_t, uint64_t, char *))(v38 + 56))(v36, 1, 1, v124);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v36, v120);
    if (v35)
    {
LABEL_9:
      swift_willThrow();
LABEL_30:
      swift_bridgeObjectRelease();
      return (uint64_t)v37;
    }
LABEL_8:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v39 = 2;
    goto LABEL_9;
  }
  v37 = v124;
  (*(void (**)(char *, _QWORD, uint64_t, char *))(v123 + 56))(v36, 0, 1, v124);
  v40 = v118;
  (*(void (**)(char *, char *, char *))(v38 + 32))(v118, v36, v37);
  v128 = v37;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v127);
  (*(void (**)(uint64_t *, char *, char *))(v38 + 16))(boxed_opaque_existential_1, v40, v37);
  _expressionCompatibleValue(for:)((uint64_t)v127, (uint64_t)&v129);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
  if (!*((_QWORD *)&v130 + 1))
  {
    (*(void (**)(char *, char *))(v38 + 8))(v40, v37);
    outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for Any?);
    if (v35)
      goto LABEL_9;
    goto LABEL_8;
  }
  v126 = 0;
  v44 = v3;
  outlined init with take of Any(&v129, &v132);
  __swift_project_boxed_opaque_existential_1(&v132, v133);
  v53 = v38;
  v42 = objc_msgSend(v113, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  (*(void (**)(char *, char *))(v53 + 8))(v118, v37);

  v51 = v117;
  v52 = v116;
  v31 = v33;
LABEL_18:
  v54 = &v44[*(int *)(v52 + 60)];
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v115, v54, v51);
  if (!swift_dynamicCast())
  {
    v131 = 0;
    v129 = 0u;
    v130 = 0u;
    outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for ConvertibleExpression?);
    v64 = 0;
    v62 = MEMORY[0x1E0DEE9D8];
    v63 = v126;
    goto LABEL_22;
  }
  v55 = v42;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v129, (uint64_t)&v132);
  v56 = v133;
  v57 = v134;
  __swift_project_boxed_opaque_existential_1(&v132, v133);
  v58 = v126;
  v59 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v57 + 16))(v31, v56, v57);
  v61 = v58;
  v62 = MEMORY[0x1E0DEE9D8];
  if (v58)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    v63 = 0;
    v64 = v61;
    v42 = v55;
LABEL_22:
    *(_QWORD *)&v132 = v62;
    v37 = v54;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(v52 + 40) + 16))(&v135, &v132, v51);
    if (v63)
    {

LABEL_27:
      if (!v64)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v65 = 2;
      }
      swift_willThrow();

      goto LABEL_30;
    }
    if (v135 == 2)
      goto LABEL_27;
    v128 = (char *)MEMORY[0x1E0DEAFA0];
    LOBYTE(v127[0]) = v135 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v127, (uint64_t)&v129);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
    if (!*((_QWORD *)&v130 + 1))
    {
      outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for Any?);
      goto LABEL_27;
    }
    outlined init with take of Any(&v129, &v132);
    __swift_project_boxed_opaque_existential_1(&v132, v133);
    v69 = _bridgeAnythingToObjectiveC<A>(_:)();
    v68 = v113;
    v66 = objc_msgSend(v113, sel_expressionForConstantValue_, v69);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);

    goto LABEL_36;
  }
  v66 = (id)v59;
  v67 = v60;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  v68 = v113;
  v42 = v55;
  if ((v67 & 1) == 0)
  {
LABEL_36:
    LOBYTE(v132) = 1;
    v70 = v66;
    v71 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v66 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v70, v71, 0, 4, 0);

  }
  v72 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v73 = v42;
  v74 = objc_msgSend(v68, sel_expressionForSubquery_usingIteratorVariable_predicate_, v42, v72, v66);
  swift_unknownObjectRelease();

  if (objc_msgSend(v74, sel_expressionType) == (id)1)
  {
    v75 = objc_msgSend(v68, sel_expressionForKeyPath_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
LABEL_57:
    *(_QWORD *)&v132 = 0;
    v111 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v37 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v75, v111, 0, 5, 0);

    return (uint64_t)v37;
  }
  if (objc_msgSend(v74, sel_expressionType) != (id)3)
    goto LABEL_52;
  v76 = &selRef_isErrorStatusCode_;
  v77 = objc_msgSend(v74, sel_keyPath);
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
  v80 = v79;

  *(_QWORD *)&v132 = 64;
  *((_QWORD *)&v132 + 1) = 0xE100000000000000;
  *(_QWORD *)&v129 = v78;
  *((_QWORD *)&v129 + 1) = v80;
  if ((v80 & 0x1000000000000000) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    v94 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v95 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v96 = objc_msgSend(v94, sel_rangeOfString_, v95);
    v98 = v97;
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    if (v96 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v68 = v113;
      v76 = &selRef_isErrorStatusCode_;
LABEL_48:
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    v68 = v113;
    if (!__OFADD__(v96, v98))
    {
      StringProtocol._toUTF16Indices(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  v81 = String.subscript.getter();
  v83 = v82;
  v85 = v84;
  v87 = v86;
  swift_bridgeObjectRelease();
  v127[0] = 64;
  v127[1] = 0xE100000000000000;
  v88 = Substring.init<A>(_:)();
  if ((v81 ^ v83) < 0x4000 || !((v88 ^ v89) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = v113;
    goto LABEL_48;
  }
  specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v88, v89, v90, v91, 0, 0, 0, 0, 0, v81, v83, v85, v87);
  v93 = v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = v113;
  if ((v93 & 1) != 0)
  {
LABEL_49:
    v99 = objc_msgSend(v74, v76[73]);
    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    v102 = v101;

    *(_QWORD *)&v132 = v100;
    *((_QWORD *)&v132 + 1) = v102;
    v103._countAndFlagsBits = 46;
    v103._object = (void *)0xE100000000000000;
    String.append(_:)(v103);
    v104._countAndFlagsBits = 0x746E756F6340;
    v104._object = (void *)0xE600000000000000;
    String.append(_:)(v104);
    v105 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v75 = objc_msgSend(v68, sel_expressionForKeyPath_, v105);
    swift_unknownObjectRelease();
    goto LABEL_57;
  }
LABEL_52:
  v106 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  v133 = v106;
  *(_QWORD *)&v132 = v74;
  v107 = String._bridgeToObjectiveCImpl()();
  v108 = v74;
  v109 = objc_msgSend(v68, sel__newKeyPathExpressionForString_, v107);
  swift_unknownObjectRelease();
  if (v109)
  {
    *((_QWORD *)&v130 + 1) = v106;
    *(_QWORD *)&v129 = v109;
  }
  else
  {
    v129 = 0u;
    v130 = 0u;
  }
  v110 = objc_allocWithZone((Class)NSKeyPathExpression);
  result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v132, &v129);
  if (result)
  {
    v75 = (id)result;
    goto LABEL_57;
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceContainsWhere<A, B>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.SequenceContainsWhere.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.convert(state:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t result;
  __int128 v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  void *v32;
  char *v33;
  _BYTE *v34;
  id v35;
  char v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v49;
  id v50;
  char v51;
  char v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  char **v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  void *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  _QWORD v101[2];
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116[3];
  char *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v104 = *(_QWORD *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v102 = type metadata accessor for Optional();
  v101[1] = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v105 = (char *)v101 - v8;
  v107 = (char *)AssociatedTypeWitness;
  v106 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v103 = (char *)v101 - v10;
  v111 = v6;
  v109 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v11);
  v110 = (char *)v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v3 + *(int *)(a2 + 64));
  *(_QWORD *)&v121 = 0x5F6C61636F6C5FLL;
  *((_QWORD *)&v121 + 1) = 0xE700000000000000;
  v115 = a1;
  *(_QWORD *)&v118 = *a1;
  v19 = v118;
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  result = swift_bridgeObjectRelease();
  if (v19 == -1)
  {
    __break(1u);
    goto LABEL_52;
  }
  v22 = v121;
  *v115 = v19 + 1;
  v113 = *((_QWORD *)&v22 + 1);
  v101[0] = v22;
  v23 = String._bridgeToObjectiveCImpl()();
  v112 = (id)objc_opt_self();
  v24 = objc_msgSend(v112, sel_expressionForVariable_, v23);
  swift_unknownObjectRelease();
  specialized Dictionary.subscript.setter((uint64_t)v24, v18);
  v25 = *(int *)(a2 + 60);
  v108 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v3 + v25, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (!swift_dynamicCast())
  {
    v120 = 0;
    v118 = 0u;
    v119 = 0u;
    outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for ConvertibleExpression?);
    v33 = 0;
    v32 = v114;
    v29 = v115;
    goto LABEL_6;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v118, (uint64_t)&v121);
  v26 = v122;
  v27 = v123;
  __swift_project_boxed_opaque_existential_1(&v121, v122);
  v28 = v114;
  v29 = v115;
  v30 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v27 + 16))(v115, v26, v27);
  v17 = v28;
  if (v28)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    v32 = 0;
    v33 = v17;
LABEL_6:
    *(_QWORD *)&v121 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(a2 + 40) + 16))(&v124, &v121, v13);
    if (v32)
    {

LABEL_11:
      if (!v33)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v34 = 2;
      }
      swift_willThrow();
      swift_bridgeObjectRelease();
      return (uint64_t)v17;
    }
    if (v124 == 2)
      goto LABEL_11;
    v117 = (char *)MEMORY[0x1E0DEAFA0];
    LOBYTE(v116[0]) = v124 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v116, (uint64_t)&v118);
    v17 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    if (!*((_QWORD *)&v119 + 1))
    {
      outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for Any?);
      goto LABEL_11;
    }
    outlined init with take of Any(&v118, &v121);
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    v38 = _bridgeAnythingToObjectiveC<A>(_:)();
    v37 = v112;
    v35 = objc_msgSend(v112, sel_expressionForConstantValue_, v38);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);

    goto LABEL_19;
  }
  v35 = (id)v30;
  v36 = v31;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
  v37 = v112;
  if ((v36 & 1) == 0)
  {
LABEL_19:
    LOBYTE(v121) = 1;
    v39 = v35;
    v40 = objc_msgSend(v37, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v35 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v39, v40, 0, 4, 0);

  }
  v41 = objc_msgSend((id)objc_opt_self(), sel_notPredicateWithSubpredicate_, v35);

  v42 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v110, v108, v111);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v118, (uint64_t)&v121);
    v43 = v122;
    v44 = v123;
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    v50 = (id)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v44 + 16))(v29, v43, v44);
    v52 = v51;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    if ((v52 & 1) != 0)
    {
      LOBYTE(v121) = 1;
      v56 = v50;
      v57 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v53 = v112;
      v58 = objc_msgSend(v112, sel_expressionForConstantValue_, v57);
      swift_unknownObjectRelease();
      LOBYTE(v121) = 0;
      v59 = objc_msgSend(v53, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v50 = objc_msgSend(v53, sel_expressionForConditional_trueExpression_falseExpression_, v56, v58, v59);

    }
    else
    {
      v53 = v112;
    }
  }
  else
  {
    v120 = 0;
    v118 = 0u;
    v119 = 0u;
    outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for ConvertibleExpression?);
    v45 = v105;
    *(_QWORD *)&v121 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(__int128 *, uint64_t))(v104 + 16))(&v121, v42);
    v46 = v106;
    v17 = v107;
    (*(void (**)(char *, _QWORD, uint64_t, char *))(v106 + 56))(v45, 0, 1, v107);
    v47 = v103;
    (*(void (**)(char *, char *, char *))(v46 + 32))(v103, v45, v17);
    v117 = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v116);
    (*(void (**)(uint64_t *, char *, char *))(v46 + 16))(boxed_opaque_existential_1, v47, v17);
    _expressionCompatibleValue(for:)((uint64_t)v116, (uint64_t)&v118);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    if (!*((_QWORD *)&v119 + 1))
    {
      (*(void (**)(char *, char *))(v46 + 8))(v103, v17);
      outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v49 = 2;
      swift_willThrow();
      swift_bridgeObjectRelease();

      return (uint64_t)v17;
    }
    outlined init with take of Any(&v118, &v121);
    __swift_project_boxed_opaque_existential_1(&v121, v122);
    v54 = _bridgeAnythingToObjectiveC<A>(_:)();
    v53 = v112;
    v55 = v46;
    v50 = objc_msgSend(v112, sel_expressionForConstantValue_, v54);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    (*(void (**)(char *, char *))(v55 + 8))(v103, v17);

  }
  v60 = String._bridgeToObjectiveCImpl()();
  v61 = v41;
  swift_bridgeObjectRelease();
  v62 = objc_msgSend(v53, sel_expressionForSubquery_usingIteratorVariable_predicate_, v50, v60, v61);
  swift_unknownObjectRelease();

  if (objc_msgSend(v62, sel_expressionType) == (id)1)
  {
    v63 = objc_msgSend(v53, sel_expressionForKeyPath_, String._bridgeToObjectiveCImpl()());
LABEL_42:
    v94 = v63;
    swift_unknownObjectRelease();
LABEL_50:
    *(_QWORD *)&v121 = 0;
    v100 = objc_msgSend(v53, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v17 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v94, v100, 0, 4, 0);

    return (uint64_t)v17;
  }
  if (objc_msgSend(v62, sel_expressionType) != (id)3)
    goto LABEL_45;
  v115 = 0;
  v64 = &selRef_isErrorStatusCode_;
  v65 = objc_msgSend(v62, sel_keyPath);
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
  v68 = v67;

  *(_QWORD *)&v121 = 64;
  *((_QWORD *)&v121 + 1) = 0xE100000000000000;
  *(_QWORD *)&v118 = v66;
  *((_QWORD *)&v118 + 1) = v68;
  if ((v68 & 0x1000000000000000) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    v82 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v83 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v84 = objc_msgSend(v82, sel_rangeOfString_, v83);
    v86 = v85;
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    if (v84 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v53 = v112;
      v64 = &selRef_isErrorStatusCode_;
LABEL_40:
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    v53 = v112;
    if (!__OFADD__(v84, v86))
    {
      StringProtocol._toUTF16Indices(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  v69 = String.subscript.getter();
  v71 = v70;
  v73 = v72;
  v75 = v74;
  swift_bridgeObjectRelease();
  v116[0] = 64;
  v116[1] = 0xE100000000000000;
  v76 = Substring.init<A>(_:)();
  if ((v69 ^ v71) < 0x4000 || !((v76 ^ v77) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53 = v112;
    goto LABEL_40;
  }
  specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v76, v77, v78, v79, 0, 0, 0, 0, 0, v69, v71, v73, v75);
  v81 = v80;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v53 = v112;
  if ((v81 & 1) != 0)
  {
LABEL_41:
    v87 = objc_msgSend(v62, v64[73]);
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v90 = v89;

    *(_QWORD *)&v121 = v88;
    *((_QWORD *)&v121 + 1) = v90;
    v91._countAndFlagsBits = 46;
    v91._object = (void *)0xE100000000000000;
    String.append(_:)(v91);
    v92._countAndFlagsBits = 0x746E756F6340;
    v92._object = (void *)0xE600000000000000;
    String.append(_:)(v92);
    v93 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v63 = objc_msgSend(v53, sel_expressionForKeyPath_, v93);
    goto LABEL_42;
  }
LABEL_45:
  v95 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  v122 = v95;
  *(_QWORD *)&v121 = v62;
  v96 = String._bridgeToObjectiveCImpl()();
  v97 = v62;
  v98 = objc_msgSend(v53, sel__newKeyPathExpressionForString_, v96);
  swift_unknownObjectRelease();
  if (v98)
  {
    *((_QWORD *)&v119 + 1) = v95;
    *(_QWORD *)&v118 = v98;
  }
  else
  {
    v118 = 0u;
    v119 = 0u;
  }
  v99 = objc_allocWithZone((Class)NSKeyPathExpression);
  result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v121, &v118);
  if (result)
  {
    v94 = (id)result;
    goto LABEL_50;
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceAllSatisfy<A, B>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.SequenceAllSatisfy.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

uint64_t PredicateExpressions.SequenceMaximum.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v27;
  uint64_t result;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  char **v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81[4];
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = v3;
  v5 = v2;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v88 = type metadata accessor for Optional();
  v80 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v11 = (char *)&v77 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v79 = (char *)&v77 - v14;
  v16 = MEMORY[0x1E0C80A78](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))((char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v7, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    v78 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    v19 = v86;
    v20 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      v29 = (id)v21;
      v30 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if ((v30 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        v31 = v29;
        v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v33 = (void *)objc_opt_self();
        v34 = objc_msgSend(v33, sel_expressionForConstantValue_, v32);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        v35 = objc_msgSend(v33, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v29 = objc_msgSend(v33, sel_expressionForConditional_trueExpression_falseExpression_, v31, v34, v35);

      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    v4 = 0;
    v23 = v3;
    v12 = v78;
  }
  else
  {
    v84 = 0;
    v82 = 0u;
    v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    v23 = 0;
  }
  *(_QWORD *)&v85 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v85, v7, v8);
  v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v88);
    if (v23)
      goto LABEL_11;
    goto LABEL_10;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  v25 = v79;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v79, v11, AssociatedTypeWitness);
  v81[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v25, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v81, (uint64_t)&v82);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  if (!*((_QWORD *)&v83 + 1))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
    if (v23)
      goto LABEL_11;
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v27 = 2;
LABEL_11:
    swift_willThrow();
    return (uint64_t)v24;
  }
  outlined init with take of Any(&v82, &v85);
  __swift_project_boxed_opaque_existential_1(&v85, v86);
  v36 = _bridgeAnythingToObjectiveC<A>(_:)();
  v37 = v23;
  v29 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v36);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);

LABEL_17:
  if (objc_msgSend(v29, sel_expressionType) == (id)1)
  {
    v38 = String._bridgeToObjectiveCImpl()();
    v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v38);
LABEL_30:
    v24 = v39;

    swift_unknownObjectRelease();
    return (uint64_t)v24;
  }
  if (objc_msgSend(v29, sel_expressionType) != (id)3)
    goto LABEL_33;
  v40 = &selRef_isErrorStatusCode_;
  v41 = v29;
  v42 = objc_msgSend(v29, sel_keyPath);
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  *(_QWORD *)&v85 = 64;
  *((_QWORD *)&v85 + 1) = 0xE100000000000000;
  *(_QWORD *)&v82 = v43;
  *((_QWORD *)&v82 + 1) = v45;
  if ((v45 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    v46 = String.subscript.getter();
    v48 = v47;
    v50 = v49;
    v52 = v51;
    swift_bridgeObjectRelease();
    v81[0] = 64;
    v81[1] = 0xE100000000000000;
    v53 = Substring.init<A>(_:)();
    if ((v46 ^ v48) >= 0x4000 && (v53 ^ v54) >> 14)
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v53, v54, v55, v56, 0, 0, 0, 0, 0, v46, v48, v50, v52);
      v58 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v41;
      if ((v58 & 1) == 0)
        goto LABEL_33;
LABEL_29:
      v64 = objc_msgSend(v29, v40[73]);
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      v67 = v66;

      *(_QWORD *)&v85 = v65;
      *((_QWORD *)&v85 + 1) = v67;
      v68._countAndFlagsBits = 46;
      v68._object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      v69._countAndFlagsBits = 0x6C65732E78616D40;
      v69._object = (void *)0xE900000000000066;
      String.append(_:)(v69);
      v70 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v70);
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    v29 = v41;
    goto LABEL_29;
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v59 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v60 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v61 = objc_msgSend(v59, sel_rangeOfString_, v60);
  v63 = v62;
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  if (v61 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v40 = &selRef_isErrorStatusCode_;
    goto LABEL_28;
  }
  if (__OFADD__(v61, v63))
  {
    __break(1u);
    goto LABEL_39;
  }
  StringProtocol._toUTF16Indices(_:)();
  swift_bridgeObjectRelease();
  v29 = v41;
LABEL_33:
  v71 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  v86 = v71;
  *(_QWORD *)&v85 = v29;
  v72 = (void *)objc_opt_self();
  v73 = String._bridgeToObjectiveCImpl()();
  v74 = v29;
  v75 = objc_msgSend(v72, sel__newKeyPathExpressionForString_, v73);
  swift_unknownObjectRelease();
  if (v75)
  {
    *((_QWORD *)&v83 + 1) = v71;
    *(_QWORD *)&v82 = v75;
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  v76 = objc_allocWithZone((Class)NSKeyPathExpression);
  result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v85, &v82);
  if (result)
  {
    v24 = (id)result;

    return (uint64_t)v24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceMaximum<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.SequenceMaximum.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

uint64_t PredicateExpressions.SequenceMinimum.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v27;
  uint64_t result;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  char **v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81[4];
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = v3;
  v5 = v2;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v88 = type metadata accessor for Optional();
  v80 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v11 = (char *)&v77 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v79 = (char *)&v77 - v14;
  v16 = MEMORY[0x1E0C80A78](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))((char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v7, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    v78 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)&v85);
    v19 = v86;
    v20 = v87;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
    if (!v3)
    {
      v29 = (id)v21;
      v30 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if ((v30 & 1) != 0)
      {
        LOBYTE(v85) = 1;
        v31 = v29;
        v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v33 = (void *)objc_opt_self();
        v34 = objc_msgSend(v33, sel_expressionForConstantValue_, v32);
        swift_unknownObjectRelease();
        LOBYTE(v85) = 0;
        v35 = objc_msgSend(v33, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v29 = objc_msgSend(v33, sel_expressionForConditional_trueExpression_falseExpression_, v31, v34, v35);

      }
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    v4 = 0;
    v23 = v3;
    v12 = v78;
  }
  else
  {
    v84 = 0;
    v82 = 0u;
    v83 = 0u;
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for ConvertibleExpression?);
    v23 = 0;
  }
  *(_QWORD *)&v85 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v85, v7, v8);
  v24 = v4;
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v88);
    if (v23)
      goto LABEL_11;
    goto LABEL_10;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  v25 = v79;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v79, v11, AssociatedTypeWitness);
  v81[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v25, AssociatedTypeWitness);
  _expressionCompatibleValue(for:)((uint64_t)v81, (uint64_t)&v82);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  if (!*((_QWORD *)&v83 + 1))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);
    outlined destroy of Any?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
    if (v23)
      goto LABEL_11;
LABEL_10:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v27 = 2;
LABEL_11:
    swift_willThrow();
    return (uint64_t)v24;
  }
  outlined init with take of Any(&v82, &v85);
  __swift_project_boxed_opaque_existential_1(&v85, v86);
  v36 = _bridgeAnythingToObjectiveC<A>(_:)();
  v37 = v23;
  v29 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v36);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, AssociatedTypeWitness);

LABEL_17:
  if (objc_msgSend(v29, sel_expressionType) == (id)1)
  {
    v38 = String._bridgeToObjectiveCImpl()();
    v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v38);
LABEL_30:
    v24 = v39;

    swift_unknownObjectRelease();
    return (uint64_t)v24;
  }
  if (objc_msgSend(v29, sel_expressionType) != (id)3)
    goto LABEL_33;
  v40 = &selRef_isErrorStatusCode_;
  v41 = v29;
  v42 = objc_msgSend(v29, sel_keyPath);
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  *(_QWORD *)&v85 = 64;
  *((_QWORD *)&v85 + 1) = 0xE100000000000000;
  *(_QWORD *)&v82 = v43;
  *((_QWORD *)&v82 + 1) = v45;
  if ((v45 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    v46 = String.subscript.getter();
    v48 = v47;
    v50 = v49;
    v52 = v51;
    swift_bridgeObjectRelease();
    v81[0] = 64;
    v81[1] = 0xE100000000000000;
    v53 = Substring.init<A>(_:)();
    if ((v46 ^ v48) >= 0x4000 && (v53 ^ v54) >> 14)
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v53, v54, v55, v56, 0, 0, 0, 0, 0, v46, v48, v50, v52);
      v58 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v41;
      if ((v58 & 1) == 0)
        goto LABEL_33;
LABEL_29:
      v64 = objc_msgSend(v29, v40[73]);
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      v67 = v66;

      *(_QWORD *)&v85 = v65;
      *((_QWORD *)&v85 + 1) = v67;
      v68._countAndFlagsBits = 46;
      v68._object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      v69._countAndFlagsBits = 0x6C65732E6E696D40;
      v69._object = (void *)0xE900000000000066;
      String.append(_:)(v69);
      v70 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForKeyPath_, v70);
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    v29 = v41;
    goto LABEL_29;
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v59 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v60 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v61 = objc_msgSend(v59, sel_rangeOfString_, v60);
  v63 = v62;
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  if (v61 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v40 = &selRef_isErrorStatusCode_;
    goto LABEL_28;
  }
  if (__OFADD__(v61, v63))
  {
    __break(1u);
    goto LABEL_39;
  }
  StringProtocol._toUTF16Indices(_:)();
  swift_bridgeObjectRelease();
  v29 = v41;
LABEL_33:
  v71 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  v86 = v71;
  *(_QWORD *)&v85 = v29;
  v72 = (void *)objc_opt_self();
  v73 = String._bridgeToObjectiveCImpl()();
  v74 = v29;
  v75 = objc_msgSend(v72, sel__newKeyPathExpressionForString_, v73);
  swift_unknownObjectRelease();
  if (v75)
  {
    *((_QWORD *)&v83 + 1) = v71;
    *(_QWORD *)&v82 = v75;
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  v76 = objc_allocWithZone((Class)NSKeyPathExpression);
  result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v85, &v82);
  if (result)
  {
    v24 = (id)result;

    return (uint64_t)v24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.SequenceMinimum<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.SequenceMinimum.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

char *PredicateExpressions.Conditional.convert(state:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  _BYTE *v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t *boxed_opaque_existential_1;
  void *v52;
  _BYTE *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  void *v70;
  _BYTE *v71;
  id v73;
  char v74;
  char v75;
  id v76;
  uint64_t v77;
  void *v78;
  id v79;
  id v80;
  uint64_t v81;
  void *v82;
  char *v83;
  char *v84;
  id v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102[3];
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 32);
  v88 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v89 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 24);
  v95 = *(_QWORD *)(v9 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v93 = type metadata accessor for Optional();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v87 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v96 = (char *)&v84 - v14;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v99 = AssociatedTypeWitness;
  v100 = v15;
  MEMORY[0x1E0C80A78](v16);
  v86 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v90 = (char *)&v84 - v19;
  v97 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v20);
  v98 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a2 + 16);
  v24 = MEMORY[0x1E0C80A78](v23);
  (*(void (**)(char *, char *, uint64_t, __n128))(v26 + 16))((char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v22, v24);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v27 = swift_dynamicCast();
  v28 = MEMORY[0x1E0DEE9D8];
  v91 = v7;
  v94 = a1;
  if (v27)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
    v29 = v108;
    v30 = v109;
    __swift_project_boxed_opaque_existential_1(&v107, v108);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
    if (!v3)
    {
      v35 = (id)v31;
      v36 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
      if ((v36 & 1) != 0)
      {
LABEL_17:
        v85 = v35;
        v41 = *(int *)(a2 + 68);
        v84 = v2;
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v98, &v2[v41], v10);
        v42 = swift_dynamicCast();
        v43 = v99;
        if (v42)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
          v44 = v108;
          v45 = v109;
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v94, v44, v45);
          v48 = v100;
          v54 = (char *)v46;
          v55 = v47;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          if ((v55 & 1) != 0)
          {
            LOBYTE(v107) = 1;
            v57 = v54;
            v58 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            v59 = (void *)objc_opt_self();
            v60 = objc_msgSend(v59, sel_expressionForConstantValue_, v58);
            swift_unknownObjectRelease();
            LOBYTE(v107) = 0;
            v61 = objc_msgSend(v59, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            v62 = v59;
            v48 = v100;
            v98 = (char *)objc_msgSend(v62, sel_expressionForConditional_trueExpression_falseExpression_, v57, v60, v61);

          }
          else
          {
            v98 = v54;
          }
        }
        else
        {
          v106 = 0;
          v104 = 0u;
          v105 = 0u;
          outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for ConvertibleExpression?);
          v48 = v100;
          v49 = v96;
          *(_QWORD *)&v107 = MEMORY[0x1E0DEE9D8];
          (*(void (**)(__int128 *, uint64_t))(v95 + 16))(&v107, v10);
          v2 = v49;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v43);
          v50 = v90;
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v90, v49, v43);
          v103 = v43;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v102);
          (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(boxed_opaque_existential_1, v50, v43);
          _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          if (!*((_QWORD *)&v105 + 1))
          {
            (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v43);
            outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
            v52 = v85;
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            *v53 = 2;
            swift_willThrow();

            return v2;
          }
          outlined init with take of Any(&v104, &v107);
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          v56 = _bridgeAnythingToObjectiveC<A>(_:)();
          v98 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v56);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v43);

        }
        v63 = v91;
        v64 = v94;
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v89, &v84[*(int *)(a2 + 72)], v91);
        if (swift_dynamicCast())
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v104, (uint64_t)&v107);
          v65 = v108;
          v66 = v109;
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          v73 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v64, v65, v66);
          v75 = v74;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          if ((v75 & 1) != 0)
          {
            LOBYTE(v107) = 1;
            v76 = v73;
            v77 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            v78 = (void *)objc_opt_self();
            v79 = objc_msgSend(v78, sel_expressionForConstantValue_, v77);
            swift_unknownObjectRelease();
            LOBYTE(v107) = 0;
            v80 = objc_msgSend(v78, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            v73 = objc_msgSend(v78, sel_expressionForConditional_trueExpression_falseExpression_, v76, v79, v80);

          }
        }
        else
        {
          v106 = 0;
          v104 = 0u;
          v105 = 0u;
          outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for ConvertibleExpression?);
          *(_QWORD *)&v107 = MEMORY[0x1E0DEE9D8];
          v67 = v87;
          (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(a2 + 56) + 16))(&v107, v63);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v67, 0, 1, v43);
          v68 = v86;
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v86, v67, v43);
          v103 = v43;
          v69 = __swift_allocate_boxed_opaque_existential_1(v102);
          (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(v69, v68, v43);
          _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          if (!*((_QWORD *)&v105 + 1))
          {
            (*(void (**)(char *, uint64_t))(v48 + 8))(v68, v43);
            outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
            v70 = v85;
            v2 = v98;
            lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
            swift_allocError();
            *v71 = 2;
            swift_willThrow();

            return v2;
          }
          outlined init with take of Any(&v104, &v107);
          __swift_project_boxed_opaque_existential_1(&v107, v108);
          v81 = _bridgeAnythingToObjectiveC<A>(_:)();
          v73 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v81);
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v68, v43);

        }
        v82 = v85;
        v83 = v98;
        v2 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForConditional_trueExpression_falseExpression_, v85, v98, v73);

        return v2;
      }
LABEL_16:
      LOBYTE(v107) = 1;
      v38 = v35;
      v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v40 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v39);
      swift_unknownObjectRelease();
      v35 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v38, v40, 0, 4, 0);

      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
    v4 = 0;
    v33 = v3;
    v28 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v106 = 0;
    v104 = 0u;
    v105 = 0u;
    outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for ConvertibleExpression?);
    v33 = 0;
  }
  *(_QWORD *)&v107 = v28;
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(a2 + 40) + 16))(&v110, &v107, v22);
  if (!v4)
  {
    v103 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v102[0]) = v110 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    if (!*((_QWORD *)&v105 + 1))
    {
      outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
      if (v33)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined init with take of Any(&v104, &v107);
    __swift_project_boxed_opaque_existential_1(&v107, v108);
    v37 = _bridgeAnythingToObjectiveC<A>(_:)();
    v35 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v37);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);

    goto LABEL_16;
  }

  if (!v33)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v34 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v2;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.Conditional<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.Conditional.convert(state:)(a1, a2);
  if (v2)
    return (char *)v4;
  return result;
}

void (**PredicateExpressions.NilCoalesce.convert(state:)(void (**a1)(char *, char *, _QWORD), _QWORD *a2))(char *, char *, _QWORD)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;
  uint64_t *boxed_opaque_existential_1;
  void *v38;
  char v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  _BYTE *v53;
  id v55;
  char v56;
  char v57;
  id v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  char *v71;
  void (**v72)(char *, char *, _QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  void (**v82)(char *, char *, _QWORD);
  uint64_t v83;
  uint64_t v84[3];
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;

  v4 = v3;
  v5 = v2;
  v8 = a2[3];
  v74 = a2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v71 = (char *)&v70 - v10;
  v78 = v8;
  v76 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v11);
  v77 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v81 = (_QWORD *)type metadata accessor for Optional();
  v14 = *(v81 - 1);
  MEMORY[0x1E0C80A78](v81);
  v16 = (char *)&v70 - v15;
  v82 = *(void (***)(char *, char *, _QWORD))(v13 - 8);
  v83 = v13;
  MEMORY[0x1E0C80A78](v17);
  v80 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v79 = (char *)&v70 - v20;
  v92 = a2;
  v21 = a2[2];
  v23 = MEMORY[0x1E0C80A78](v22);
  v26 = v5;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v21, v23);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v27 = swift_dynamicCast();
  v72 = a1;
  if (v27)
  {
    v70 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v86, (uint64_t)&v89);
    v29 = v90;
    v28 = v91;
    __swift_project_boxed_opaque_existential_1(&v89, v90);
    v30 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v28 + 16))(a1, v29, v28);
    v32 = v3;
    if (!v3)
    {
      v38 = (void *)v30;
      v39 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
      v33 = v26;
      if ((v39 & 1) != 0)
      {
        LOBYTE(v89) = 1;
        v41 = v38;
        v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v43 = (void *)objc_opt_self();
        v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
        swift_unknownObjectRelease();
        LOBYTE(v89) = 0;
        v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v81 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);

      }
      else
      {
        v81 = v38;
      }
      AssociatedTypeWitness = v70;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
    v4 = 0;
    AssociatedTypeWitness = v70;
  }
  else
  {
    v88 = 0;
    v86 = 0u;
    v87 = 0u;
    outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for ConvertibleExpression?);
    v32 = 0;
  }
  v33 = v26;
  *(_QWORD *)&v89 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t))(v92[4] + 16))(&v89, v21);
  if (!v4)
  {
    a1 = v82;
    v35 = v83;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v82[7])(v16, 0, 1, v83);
    v36 = v79;
    a1[4](v79, v16, v35);
    v85 = v35;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v84);
    a1[2]((char *)boxed_opaque_existential_1, v36, v35);
    _expressionCompatibleValue(for:)((uint64_t)v84, (uint64_t)&v86);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
    if (!*((_QWORD *)&v87 + 1))
    {
      ((void (*)(char *, uint64_t))a1[1])(v36, v35);
      outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
      if (v32)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined init with take of Any(&v86, &v89);
    __swift_project_boxed_opaque_existential_1(&v89, v90);
    v40 = _bridgeAnythingToObjectiveC<A>(_:)();
    v81 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v40);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
    ((void (*)(char *, uint64_t))a1[1])(v36, v35);

LABEL_18:
    v46 = v78;
    v47 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v77, v33 + *((int *)v92 + 13), v78);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v86, (uint64_t)&v89);
      v48 = v90;
      v49 = v91;
      __swift_project_boxed_opaque_existential_1(&v89, v90);
      v55 = (id)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v49 + 16))(v72, v48, v49);
      v57 = v56;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
      if ((v57 & 1) != 0)
      {
        LOBYTE(v89) = 1;
        v58 = v55;
        v59 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v60 = (void *)objc_opt_self();
        v61 = objc_msgSend(v60, sel_expressionForConstantValue_, v59);
        swift_unknownObjectRelease();
        LOBYTE(v89) = 0;
        v62 = objc_msgSend(v60, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v55 = objc_msgSend(v60, sel_expressionForConditional_trueExpression_falseExpression_, v58, v61, v62);

      }
      v63 = v81;
    }
    else
    {
      v88 = 0;
      v86 = 0u;
      v87 = 0u;
      outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for ConvertibleExpression?);
      a1 = 0;
      *(_QWORD *)&v89 = MEMORY[0x1E0DEE9D8];
      (*(void (**)(__int128 *, uint64_t))(v74 + 16))(&v89, v46);
      v50 = v73;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v47, 0, 1, AssociatedTypeWitness);
      v51 = v71;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v71, v47, AssociatedTypeWitness);
      v85 = AssociatedTypeWitness;
      v52 = __swift_allocate_boxed_opaque_existential_1(v84);
      (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 16))(v52, v51, AssociatedTypeWitness);
      _expressionCompatibleValue(for:)((uint64_t)v84, (uint64_t)&v86);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      v63 = v81;
      if (!*((_QWORD *)&v87 + 1))
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v51, AssociatedTypeWitness);
        outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v53 = 2;
        swift_willThrow();

        return a1;
      }
      outlined init with take of Any(&v86, &v89);
      __swift_project_boxed_opaque_existential_1(&v89, v90);
      v64 = _bridgeAnythingToObjectiveC<A>(_:)();
      v55 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v64);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, AssociatedTypeWitness);

    }
    v65 = (void *)objc_opt_self();
    v66 = v63;
    v67 = objc_msgSend(v65, sel_expressionForConstantValue_, 0);
    v68 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v66, v67, 0, 5, 0);

    v69 = v68;
    a1 = (void (**)(char *, char *, _QWORD))objc_msgSend(v65, sel_expressionForConditional_trueExpression_falseExpression_, v69, v66, v55);

    return a1;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v82[7])(v16, 1, 1, v83);
  (*(void (**)(char *, _QWORD *))(v14 + 8))(v16, v81);
  if (!v32)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v34 = 2;
  }
LABEL_8:
  swift_willThrow();
  return a1;
}

void (**protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NilCoalesce<A, B>(void (**a1)(char *, char *, _QWORD), _QWORD *a2))(char *, char *, _QWORD)
{
  uint64_t v2;
  void (**result)(char *, char *, _QWORD);
  uint64_t v4;

  result = PredicateExpressions.NilCoalesce.convert(state:)(a1, a2);
  if (v2)
    return (void (**)(char *, char *, _QWORD))v4;
  return result;
}

uint64_t PredicateExpressions.OptionalFlatMap.convert(state:)(uint64_t a1, _QWORD *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char v32;
  void *v33;
  void *v34;
  _BYTE *v35;
  void (**v36)(char *, uint64_t, uint64_t, uint64_t);
  char *v37;
  uint64_t *boxed_opaque_existential_1;
  id v39;
  char v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char v72;
  char *v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  _BYTE *v80;
  uint64_t result;
  id v82;
  char v83;
  id v84;
  uint64_t v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  id v93;
  id v94;
  id v95;
  id v96;
  char *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  unint64_t v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  void (**v131)(char *, uint64_t, uint64_t, uint64_t);
  char *v132;
  uint64_t v133[3];
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;

  v5 = a2[4];
  v121 = a2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v119 = type metadata accessor for Optional();
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v122 = (char *)&v115 - v7;
  v124 = AssociatedTypeWitness;
  v123 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8);
  v120 = (char *)&v115 - v9;
  v129 = v5;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = v2;
  v126 = v10;
  MEMORY[0x1E0C80A78](v12);
  v127 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v115 - v17;
  v131 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v14 - 8);
  MEMORY[0x1E0C80A78](v19);
  v130 = (char *)&v115 - v20;
  v141 = a2;
  v21 = a2[2];
  v23 = MEMORY[0x1E0C80A78](v22);
  (*(void (**)(char *, char *, uint64_t, __n128))(v25 + 16))((char *)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v21, v23);
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v26 = swift_dynamicCast();
  v27 = MEMORY[0x1E0DEE9D8];
  v128 = a1;
  if (!v26)
  {
    v137 = 0;
    v135 = 0u;
    v136 = 0u;
    outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for ConvertibleExpression?);
    v33 = 0;
    v34 = v132;
    goto LABEL_5;
  }
  v117 = v11;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v135, (uint64_t)&v138);
  v29 = v139;
  v28 = v140;
  __swift_project_boxed_opaque_existential_1(&v138, v139);
  v30 = v132;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, v29, v28);
  v33 = v30;
  if (v30)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
    v34 = 0;
    v11 = v117;
    v27 = MEMORY[0x1E0DEE9D8];
LABEL_5:
    *(_QWORD *)&v138 = v27;
    (*(void (**)(__int128 *, uint64_t))(v141[6] + 16))(&v138, v21);
    if (v34)
    {

      v131[7](v18, 1, 1, v14);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (v33)
      {
LABEL_8:
        swift_willThrow();
        return (uint64_t)v11;
      }
LABEL_7:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v35 = 2;
      goto LABEL_8;
    }
    v36 = v131;
    v131[7](v18, 0, 1, v14);
    v37 = v130;
    ((void (*)(char *, char *, uint64_t))v36[4])(v130, v18, v14);
    v134 = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v133);
    ((void (*)(uint64_t *, char *, uint64_t))v36[2])(boxed_opaque_existential_1, v37, v14);
    _expressionCompatibleValue(for:)((uint64_t)v133, (uint64_t)&v135);
    v132 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
    if (!*((_QWORD *)&v136 + 1))
    {
      ((void (*)(char *, uint64_t))v36[1])(v37, v14);
      outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for Any?);
      if (v33)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined init with take of Any(&v135, &v138);
    __swift_project_boxed_opaque_existential_1(&v138, v139);
    v48 = _bridgeAnythingToObjectiveC<A>(_:)();
    v39 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
    ((void (*)(char *, uint64_t))v36[1])(v37, v14);

    v47 = v128;
    v46 = v129;
    goto LABEL_17;
  }
  v39 = (id)v31;
  v40 = v32;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
  v132 = 0;
  if ((v40 & 1) != 0)
  {
    LOBYTE(v138) = 1;
    v41 = v39;
    v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v43 = (void *)objc_opt_self();
    v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
    swift_unknownObjectRelease();
    LOBYTE(v138) = 0;
    v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v39 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);

  }
  v47 = v128;
  v46 = v129;
  v11 = v117;
LABEL_17:
  v49 = v141;
  v50 = *(char **)&v11[*((int *)v141 + 18)];
  v51 = (char *)v39;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v138 = *(_QWORD *)(v47 + 8);
  v53 = v138;
  *(_QWORD *)(v47 + 8) = 0x8000000000000000;
  v131 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v50;
  v55 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
  v56 = *(_QWORD *)(v53 + 16);
  v57 = (v54 & 1) == 0;
  v58 = v56 + v57;
  if (__OFADD__(v56, v57))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v53 + 24) < v58)
    {
      v59 = v54;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, isUniquelyReferenced_nonNull_native);
      v60 = v138;
      v61 = (uint64_t)v131;
      v62 = specialized __RawDictionaryStorage.find<A>(_:)(v131);
      if ((v59 & 1) != (v63 & 1))
        goto LABEL_82;
      v55 = v62;
      v50 = v51;
      if ((v59 & 1) != 0)
        goto LABEL_21;
LABEL_24:
      specialized _NativeDictionary._insert(at:key:value:)(v55, v61, (uint64_t)v50, (_QWORD *)v60);
LABEL_25:
      v67 = v127;
      *(_QWORD *)(v47 + 8) = v60;

      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v67, &v11[*((int *)v49 + 17)], v46);
      if (swift_dynamicCast())
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v135, (uint64_t)&v138);
        v68 = v139;
        v69 = v140;
        __swift_project_boxed_opaque_existential_1(&v138, v139);
        v70 = v132;
        v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v47, v68, v69);
        v73 = v70;
        if (!v70)
        {
          v82 = (id)v71;
          v83 = v72;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
          if ((v83 & 1) != 0)
          {
            LOBYTE(v138) = 1;
            v84 = v82;
            v85 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            v86 = (void *)objc_opt_self();
            v87 = objc_msgSend(v86, sel_expressionForConstantValue_, v85);
            swift_unknownObjectRelease();
            LOBYTE(v138) = 0;
            v88 = objc_msgSend(v86, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
            swift_unknownObjectRelease();
            v82 = objc_msgSend(v86, sel_expressionForConditional_trueExpression_falseExpression_, v84, v87, v88);

          }
          goto LABEL_41;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
        v74 = 0;
        v11 = v73;
      }
      else
      {
        v137 = 0;
        v135 = 0u;
        v136 = 0u;
        outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for ConvertibleExpression?);
        v11 = 0;
        v74 = v132;
      }
      *(_QWORD *)&v138 = MEMORY[0x1E0DEE9D8];
      v75 = v122;
      (*(void (**)(__int128 *, uint64_t))(v121 + 16))(&v138, v46);
      if (v74)
      {

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v75, 1, 1, v124);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v75, v119);
        if (v11)
          goto LABEL_35;
        goto LABEL_34;
      }
      v76 = v123;
      v77 = v124;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v75, 0, 1, v124);
      v78 = v120;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v120, v75, v77);
      v134 = v77;
      v79 = __swift_allocate_boxed_opaque_existential_1(v133);
      (*(void (**)(uint64_t *, char *, uint64_t))(v76 + 16))(v79, v78, v77);
      _expressionCompatibleValue(for:)((uint64_t)v133, (uint64_t)&v135);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
      if (!*((_QWORD *)&v136 + 1))
      {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v120, v77);
        outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for Any?);
        if (v11)
          goto LABEL_35;
LABEL_34:
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v80 = 2;
LABEL_35:
        swift_willThrow();

        return (uint64_t)v11;
      }
      outlined init with take of Any(&v135, &v138);
      __swift_project_boxed_opaque_existential_1(&v138, v139);
      v89 = v76;
      v90 = _bridgeAnythingToObjectiveC<A>(_:)();
      v82 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v90);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v120, v77);

LABEL_41:
      v91 = (void *)objc_opt_self();
      v92 = v50;
      v93 = objc_msgSend(v91, sel_expressionForConstantValue_, 0);
      v94 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v92, v93, 0, 5, 0);

      v95 = v94;
      v96 = objc_msgSend(v91, sel_expressionForConstantValue_, 0);
      v11 = (char *)objc_msgSend(v91, sel_expressionForConditional_trueExpression_falseExpression_, v95, v82, v96);

      return (uint64_t)v11;
    }
    v50 = v51;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v60 = v53;
      v61 = (uint64_t)v131;
      if ((v54 & 1) == 0)
        goto LABEL_24;
LABEL_21:
      v64 = *(_QWORD *)(v60 + 56);
      v65 = v11;
      v66 = 8 * v55;

      *(_QWORD *)(v64 + v66) = v50;
      v11 = v65;
      goto LABEL_25;
    }
  }
  v116 = v55;
  LODWORD(v117) = v54;
  v130 = v50;
  v97 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  v98 = static _DictionaryStorage.copy(original:)();
  v60 = v98;
  if (!*(_QWORD *)(v53 + 16))
  {
LABEL_78:
    swift_bridgeObjectRelease();
    v11 = v97;
    v49 = v141;
    v46 = v129;
    v50 = v130;
    v61 = (uint64_t)v131;
    v55 = v116;
    if ((v117 & 1) == 0)
      goto LABEL_24;
    goto LABEL_21;
  }
  v99 = (void *)(v98 + 64);
  v100 = v53 + 64;
  v101 = (unint64_t)((1 << *(_BYTE *)(v60 + 32)) + 63) >> 6;
  if (v60 != v53 || (unint64_t)v99 >= v100 + 8 * v101)
    memmove(v99, (const void *)(v53 + 64), 8 * v101);
  v102 = 0;
  *(_QWORD *)(v60 + 16) = *(_QWORD *)(v53 + 16);
  v103 = 1 << *(_BYTE *)(v53 + 32);
  v104 = -1;
  if (v103 < 64)
    v104 = ~(-1 << v103);
  v105 = v104 & *(_QWORD *)(v53 + 64);
  v106 = (unint64_t)(v103 + 63) >> 6;
  while (1)
  {
    if (v105)
    {
      v107 = __clz(__rbit64(v105));
      v105 &= v105 - 1;
      v108 = v107 | (v102 << 6);
      goto LABEL_51;
    }
    if (__OFADD__(v102++, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v102 >= v106)
      goto LABEL_78;
    v113 = *(_QWORD *)(v100 + 8 * v102);
    if (!v113)
      break;
LABEL_73:
    v105 = (v113 - 1) & v113;
    v108 = __clz(__rbit64(v113)) + (v102 << 6);
LABEL_51:
    v109 = 8 * v108;
    v110 = *(void **)(*(_QWORD *)(v53 + 56) + v109);
    *(_QWORD *)(*(_QWORD *)(v60 + 48) + v109) = *(_QWORD *)(*(_QWORD *)(v53 + 48) + v109);
    *(_QWORD *)(*(_QWORD *)(v60 + 56) + v109) = v110;
    v111 = v110;
  }
  v114 = v102 + 1;
  if (v102 + 1 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
    goto LABEL_72;
  v114 = v102 + 2;
  if (v102 + 2 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
    goto LABEL_72;
  v114 = v102 + 3;
  if (v102 + 3 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
    goto LABEL_72;
  v114 = v102 + 4;
  if (v102 + 4 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
    goto LABEL_72;
  v114 = v102 + 5;
  if (v102 + 5 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
    goto LABEL_72;
  v114 = v102 + 6;
  if (v102 + 6 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
    goto LABEL_72;
  v114 = v102 + 7;
  if (v102 + 7 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
    goto LABEL_72;
  v114 = v102 + 8;
  if (v102 + 8 >= v106)
    goto LABEL_78;
  v113 = *(_QWORD *)(v100 + 8 * v114);
  if (v113)
  {
LABEL_72:
    v102 = v114;
    goto LABEL_73;
  }
  while (1)
  {
    v102 = v114 + 1;
    if (__OFADD__(v114, 1))
      break;
    if (v102 >= v106)
      goto LABEL_78;
    v113 = *(_QWORD *)(v100 + 8 * v102);
    ++v114;
    if (v113)
      goto LABEL_73;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = PredicateExpressions.OptionalFlatMap.convert(state:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

id PredicateExpressions.CollectionIndexSubscript<>.convert(state:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  void *v34;
  void *v35;
  id v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  uint64_t *boxed_opaque_existential_1;
  id v41;
  char v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  _BYTE *v67;
  id v69;
  char v70;
  id v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100[3];
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v3 = v2;
  v6 = a2[3];
  v86 = a2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v83 = type metadata accessor for Optional();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v92 = (char *)&v80 - v8;
  v85 = AssociatedTypeWitness;
  v93 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v84 = (char *)&v80 - v10;
  v91 = v6;
  v87 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v11);
  v88 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2[4];
  v89 = a2;
  v14 = a2[2];
  v15 = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v96 = *(_QWORD *)(v16 - 8);
  v97 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v80 - v17;
  v98 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v19);
  v95 = (char *)&v80 - v20;
  v21 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18205F0D0;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v108 = v3;
  v26(v24, v3, v14);
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v27 = swift_dynamicCast();
  v28 = MEMORY[0x1E0DEE9D8];
  v90 = a1;
  if (v27)
  {
    v81 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v102, (uint64_t)&v105);
    v30 = v106;
    v29 = v107;
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    v31 = v99;
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(a1, v30, v29);
    v34 = v31;
    if (!v31)
    {
      v41 = (id)v32;
      v42 = v33;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
      v99 = 0;
      if ((v42 & 1) != 0)
      {
        LOBYTE(v105) = 1;
        v43 = v41;
        v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v45 = (void *)objc_opt_self();
        v46 = objc_msgSend(v45, sel_expressionForConstantValue_, v44);
        swift_unknownObjectRelease();
        LOBYTE(v105) = 0;
        v47 = objc_msgSend(v45, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v41 = objc_msgSend(v45, sel_expressionForConditional_trueExpression_falseExpression_, v43, v46, v47);

      }
      v25 = v81;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    v35 = 0;
    v25 = v81;
  }
  else
  {
    v104 = 0;
    v102 = 0u;
    v103 = 0u;
    outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for ConvertibleExpression?);
    v34 = 0;
    v35 = v99;
  }
  *(_QWORD *)&v105 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v13 + 16))(&v105, v14, v13);
  v36 = v35;
  if (!v35)
  {
    v38 = v98;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v18, 0, 1, v15);
    v39 = v95;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v95, v18, v15);
    v101 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v100);
    (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(boxed_opaque_existential_1, v39, v15);
    _expressionCompatibleValue(for:)((uint64_t)v100, (uint64_t)&v102);
    v99 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
    if (!*((_QWORD *)&v103 + 1))
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v15);
      outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
      if (v34)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined init with take of Any(&v102, &v105);
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    v48 = _bridgeAnythingToObjectiveC<A>(_:)();
    v41 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v48);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v15);

LABEL_17:
    v49 = v93;
    v50 = v92;
    v51 = v91;
    v52 = v90;
    v53 = v89;
    v54 = v88;
    v55 = v87;
    v98 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
    *(_QWORD *)(v25 + 56) = v98;
    *(_QWORD *)(v25 + 32) = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v108 + *((int *)v53 + 15), v51);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v102, (uint64_t)&v105);
      v56 = v106;
      v57 = v107;
      __swift_project_boxed_opaque_existential_1(&v105, v106);
      v58 = v99;
      v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v52, v56, v57);
      v61 = v58;
      if (!v58)
      {
        v69 = (id)v59;
        v70 = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
        if ((v70 & 1) != 0)
        {
          LOBYTE(v105) = 1;
          v71 = v69;
          v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          v73 = (void *)objc_opt_self();
          v74 = objc_msgSend(v73, sel_expressionForConstantValue_, v72);
          swift_unknownObjectRelease();
          LOBYTE(v105) = 0;
          v75 = objc_msgSend(v73, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          v69 = objc_msgSend(v73, sel_expressionForConditional_trueExpression_falseExpression_, v71, v74, v75);

        }
        goto LABEL_35;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
      v62 = 0;
      v63 = v61;
    }
    else
    {
      v104 = 0;
      v102 = 0u;
      v103 = 0u;
      outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for ConvertibleExpression?);
      v63 = 0;
      v62 = v99;
    }
    *(_QWORD *)&v105 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(__int128 *, uint64_t))(v86 + 16))(&v105, v51);
    if (v62)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, 1, 1, v85);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v83);
      v36 = (id)(v25 + 32);
      if (v63)
        goto LABEL_27;
      goto LABEL_26;
    }
    v64 = v85;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v85);
    v65 = v84;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v84, v50, v64);
    v101 = v64;
    v66 = __swift_allocate_boxed_opaque_existential_1(v100);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(v66, v65, v64);
    _expressionCompatibleValue(for:)((uint64_t)v100, (uint64_t)&v102);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
    if (!*((_QWORD *)&v103 + 1))
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v84, v64);
      outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
      v36 = (id)(v25 + 32);
      if (v63)
        goto LABEL_27;
LABEL_26:
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v67 = 2;
LABEL_27:
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      goto LABEL_28;
    }
    outlined init with take of Any(&v102, &v105);
    __swift_project_boxed_opaque_existential_1(&v105, v106);
    v76 = _bridgeAnythingToObjectiveC<A>(_:)();
    v77 = v64;
    v69 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v76);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v84, v77);

LABEL_35:
    *(_QWORD *)(v25 + 88) = v98;
    *(_QWORD *)(v25 + 64) = v69;
    v78 = String._bridgeToObjectiveCImpl()();
    v79 = _ContiguousArrayBuffer._asCocoaArray()();
    v36 = objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v78, v79);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v36;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v18, 1, 1, v15);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v18, v97);
  if (!v34)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v37 = 2;
  }
LABEL_8:
  swift_willThrow();
LABEL_28:
  *(_QWORD *)(v25 + 16) = 0;
  swift_release();
  return v36;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.CollectionIndexSubscript<>.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

id PredicateExpressions.DictionaryKeySubscript.convert(state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  id v32;
  char v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *boxed_opaque_existential_1;
  _BYTE *v50;
  id v51;
  char v52;
  char v53;
  id v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[3];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = v3;
  v5 = v2;
  v8 = *(_QWORD *)(a2 + 24);
  v65 = *(_QWORD *)(a2 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v63 = type metadata accessor for Optional();
  v62[1] = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v70 = (char *)v62 - v10;
  v71 = AssociatedTypeWitness;
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v62[0] = (char *)v62 - v12;
  v69 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v13);
  v66 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_18205F0D0;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v5, v15);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v20 = swift_dynamicCast();
  v21 = MEMORY[0x1E0DEE9D8];
  v67 = a1;
  if (v20)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v75, (uint64_t)&v78);
    v22 = v79;
    v23 = v80;
    __swift_project_boxed_opaque_existential_1(&v78, v79);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(a1, v22, v23);
    if (!v3)
    {
      v32 = (id)v24;
      v33 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
      if ((v33 & 1) != 0)
      {
        LOBYTE(v78) = 1;
        v34 = v32;
        v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v36 = (void *)objc_opt_self();
        v37 = objc_msgSend(v36, sel_expressionForConstantValue_, v35);
        swift_unknownObjectRelease();
        LOBYTE(v78) = 0;
        v38 = objc_msgSend(v36, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v32 = objc_msgSend(v36, sel_expressionForConditional_trueExpression_falseExpression_, v34, v37, v38);

      }
      v39 = (_QWORD *)v72;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    v4 = 0;
    v26 = v3;
    v21 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v77 = 0;
    v75 = 0u;
    v76 = 0u;
    outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for ConvertibleExpression?);
    v26 = 0;
  }
  *(_QWORD *)&v78 = v21;
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(a2 + 40) + 16))(&v81, &v78, v15);
  v27 = v4;
  if (v4)
  {

    v28 = v72;
LABEL_10:
    if (!v26)
    {
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v30 = 2;
    }
    swift_willThrow();
    *(_QWORD *)(v28 + 16) = 0;
    goto LABEL_13;
  }
  v29 = v81;
  v28 = v72;
  if (!v81)
    goto LABEL_10;
  v74 = type metadata accessor for Dictionary();
  v73[0] = v29;
  swift_bridgeObjectRetain();
  _expressionCompatibleValue(for:)((uint64_t)v73, (uint64_t)&v75);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  if (!*((_QWORD *)&v76 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  outlined init with take of Any(&v75, &v78);
  __swift_project_boxed_opaque_existential_1(&v78, v79);
  v45 = _bridgeAnythingToObjectiveC<A>(_:)();
  v32 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v45);
  v39 = (_QWORD *)v72;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
  swift_bridgeObjectRelease();

LABEL_18:
  v40 = v67;
  v41 = v66;
  v72 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSExpression);
  v39[7] = v72;
  v39[4] = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v41, v5 + *(int *)(a2 + 68), v8);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v75, (uint64_t)&v78);
    v42 = v79;
    v43 = v80;
    __swift_project_boxed_opaque_existential_1(&v78, v79);
    v51 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v40, v42, v43);
    v53 = v52;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    if ((v53 & 1) != 0)
    {
      LOBYTE(v78) = 1;
      v54 = v51;
      v55 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v56 = (void *)objc_opt_self();
      v57 = objc_msgSend(v56, sel_expressionForConstantValue_, v55);
      swift_unknownObjectRelease();
      LOBYTE(v78) = 0;
      v58 = objc_msgSend(v56, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v51 = objc_msgSend(v56, sel_expressionForConditional_trueExpression_falseExpression_, v54, v57, v58);

    }
    goto LABEL_28;
  }
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for ConvertibleExpression?);
  v44 = v70;
  *(_QWORD *)&v78 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(__int128 *, uint64_t))(v65 + 16))(&v78, v8);
  v46 = v64;
  v47 = v71;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v44, 0, 1, v71);
  v48 = v62[0];
  (*(void (**)(_QWORD, char *, uint64_t))(v46 + 32))(v62[0], v44, v47);
  v74 = v47;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v73);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16))(boxed_opaque_existential_1, v48, v47);
  _expressionCompatibleValue(for:)((uint64_t)v73, (uint64_t)&v75);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  if (*((_QWORD *)&v76 + 1))
  {
    outlined init with take of Any(&v75, &v78);
    __swift_project_boxed_opaque_existential_1(&v78, v79);
    v59 = _bridgeAnythingToObjectiveC<A>(_:)();
    v51 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v59);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v71);

LABEL_28:
    v39[11] = v72;
    v39[8] = v51;
    v60 = String._bridgeToObjectiveCImpl()();
    v61 = _ContiguousArrayBuffer._asCocoaArray()();
    v27 = objc_msgSend((id)objc_opt_self(), sel_expressionForFunction_arguments_, v60, v61);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v27;
  }
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v71);
  outlined destroy of Any?((uint64_t)&v75, &demangling cache variable for type metadata for Any?);
  v27 = v39 + 4;
  lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
  swift_allocError();
  *v50 = 2;
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v39 + 4));
  v39[2] = 0;
LABEL_13:
  swift_release();
  return v27;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  uint64_t v4;

  result = PredicateExpressions.DictionaryKeySubscript.convert(state:)(a1, a2);
  if (v2)
    return (id)v4;
  return result;
}

void (**PredicateExpressions.CollectionContainsCollection<>.convert(state:)(uint64_t a1, _QWORD *a2))(char *, char *, uint64_t)
{
  void (**v2)(char *, char *, uint64_t);
  void (**v3)(char *, char *, uint64_t);
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, void (**)(char *, char *, uint64_t), uint64_t, __n128);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char v32;
  void *v33;
  id v34;
  uint64_t v35;
  void (**v36)(char *, char *, uint64_t);
  _BYTE *v37;
  char *v38;
  uint64_t *boxed_opaque_existential_1;
  char v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _BYTE *v55;
  id v57;
  char v58;
  char v59;
  id v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  void (**v65)(char *, char *, uint64_t);
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (**v85)(char *, char *, uint64_t);
  id v86;
  uint64_t v87[3];
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  void (**v95)(char *, char *, uint64_t);

  v3 = v2;
  v84 = a1;
  v5 = a2[3];
  v74 = a2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v72 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v80 = (char *)&v69 - v8;
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v71 = (char *)&v69 - v10;
  v11 = a2[4];
  v78 = a2;
  v12 = a2[2];
  v13 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v82 = *(_QWORD *)(v14 - 8);
  v83 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v69 - v15;
  v85 = *(void (***)(char *, char *, uint64_t))(v13 - 8);
  MEMORY[0x1E0C80A78](v17);
  v81 = (char *)&v69 - v18;
  v79 = v5;
  v76 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v19);
  v77 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(void (**)(char *, void (**)(char *, char *, uint64_t), uint64_t, __n128))(v25 + 16);
  v95 = v3;
  v26(v24, v3, v12, v22);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v27 = swift_dynamicCast();
  v28 = MEMORY[0x1E0DEE9D8];
  if (v27)
  {
    v70 = v7;
    v69 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
    v30 = v93;
    v29 = v94;
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    v31 = v86;
    v86 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v84, v30, v29);
    v33 = v31;
    if (!v31)
    {
      v40 = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      if ((v40 & 1) != 0)
      {
        LOBYTE(v92) = 1;
        v41 = v86;
        v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v43 = (void *)objc_opt_self();
        v44 = objc_msgSend(v43, sel_expressionForConstantValue_, v42);
        swift_unknownObjectRelease();
        LOBYTE(v92) = 0;
        v45 = objc_msgSend(v43, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v86 = objc_msgSend(v43, sel_expressionForConditional_trueExpression_falseExpression_, v41, v44, v45);

      }
      v46 = v69;
      v47 = v80;
      v48 = v79;
      goto LABEL_17;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    v34 = 0;
    v35 = v69;
    v7 = v70;
    v36 = v95;
    v28 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v35 = AssociatedTypeWitness;
    v91 = 0;
    v89 = 0u;
    v90 = 0u;
    outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
    v33 = 0;
    v36 = v95;
    v34 = v86;
  }
  *(_QWORD *)&v92 = v28;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 16))(&v92, v12, v11);
  if (!v34)
  {
    v36 = v85;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v85[7])(v16, 0, 1, v13);
    v38 = v81;
    v36[4](v81, v16, v13);
    v88 = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v87);
    v36[2]((char *)boxed_opaque_existential_1, v38, v13);
    _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    if (!*((_QWORD *)&v90 + 1))
    {
      ((void (*)(char *, uint64_t))v36[1])(v38, v13);
      outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      if (v33)
        goto LABEL_8;
      goto LABEL_7;
    }
    v70 = v7;
    outlined init with take of Any(&v89, &v92);
    __swift_project_boxed_opaque_existential_1(&v92, v93);
    v49 = _bridgeAnythingToObjectiveC<A>(_:)();
    v86 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v49);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    ((void (*)(char *, uint64_t))v36[1])(v38, v13);

    v47 = v80;
    v48 = v79;
    v46 = v35;
LABEL_17:
    v50 = v84;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v77, (char *)v95 + *((int *)v78 + 19), v48);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)&v92);
      v51 = v93;
      v52 = v94;
      __swift_project_boxed_opaque_existential_1(&v92, v93);
      v57 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v50, v51, v52);
      v59 = v58;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      if ((v59 & 1) != 0)
      {
        LOBYTE(v92) = 1;
        v60 = v57;
        v61 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v62 = (void *)objc_opt_self();
        v63 = objc_msgSend(v62, sel_expressionForConstantValue_, v61);
        swift_unknownObjectRelease();
        LOBYTE(v92) = 0;
        v64 = objc_msgSend(v62, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v57 = objc_msgSend(v62, sel_expressionForConditional_trueExpression_falseExpression_, v60, v63, v64);

      }
    }
    else
    {
      v91 = 0;
      v89 = 0u;
      v90 = 0u;
      outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(_QWORD *)&v92 = MEMORY[0x1E0DEE9D8];
      (*(void (**)(__int128 *, uint64_t))(v74 + 16))(&v92, v48);
      v53 = v73;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v47, 0, 1, v46);
      v36 = (void (**)(char *, char *, uint64_t))v71;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v71, v47, v46);
      v88 = v46;
      v54 = __swift_allocate_boxed_opaque_existential_1(v87);
      (*(void (**)(uint64_t *, id, uint64_t))(v53 + 16))(v54, v36, v46);
      _expressionCompatibleValue(for:)((uint64_t)v87, (uint64_t)&v89);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      if (!*((_QWORD *)&v90 + 1))
      {
        (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v53 + 8))(v36, v46);
        outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v55 = 2;
        swift_willThrow();

        return v36;
      }
      outlined init with take of Any(&v89, &v92);
      __swift_project_boxed_opaque_existential_1(&v92, v93);
      v65 = v36;
      v66 = _bridgeAnythingToObjectiveC<A>(_:)();
      v57 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v66);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
      (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v53 + 8))(v65, v46);

    }
    v67 = objc_allocWithZone((Class)NSComparisonPredicate);
    v68 = v86;
    v36 = (void (**)(char *, char *, uint64_t))objc_msgSend(v67, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v86, v57, 0, 99, 0);

    return v36;
  }

  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v85[7])(v16, 1, 1, v13);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v16, v83);
  if (!v33)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v37 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v36;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))PredicateExpressions.CollectionContainsCollection<>.convert(state:));
}

_QWORD *PredicateExpressions.SequenceStartsWith<>.convert(state:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char v34;
  void *v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  uint64_t *boxed_opaque_existential_1;
  void *v41;
  char v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  void *v57;
  _BYTE *v58;
  id v60;
  char v61;
  char v62;
  id v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89[3];
  _QWORD *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v3 = v2;
  v86 = a1;
  v5 = a2[3];
  v78 = a2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = type metadata accessor for Optional();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v83 = (char *)&v71 - v7;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v76 = (char *)&v71 - v10;
  v82 = v5;
  v79 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v11);
  v80 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2[4];
  v81 = a2;
  v14 = a2[2];
  v15 = (_QWORD *)swift_getAssociatedTypeWitness();
  v85 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v18 = (char *)&v71 - v17;
  v87 = *(v15 - 1);
  MEMORY[0x1E0C80A78](v19);
  v84 = (char *)&v71 - v20;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
  v97 = v3;
  v26(v24, v3, v14, v22);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v28 = swift_dynamicCast();
  v29 = MEMORY[0x1E0DEE9D8];
  v77 = v8;
  if (v28)
  {
    v75 = v27;
    v72 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    v31 = v95;
    v30 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    v32 = v88;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v86, v31, v30);
    v35 = v32;
    if (!v32)
    {
      v41 = (void *)v33;
      v42 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v42 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        v44 = v41;
        v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v46 = (void *)objc_opt_self();
        v47 = objc_msgSend(v46, sel_expressionForConstantValue_, v45);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        v48 = objc_msgSend(v46, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v88 = objc_msgSend(v46, sel_expressionForConditional_trueExpression_falseExpression_, v44, v47, v48);

      }
      else
      {
        v88 = v41;
      }
      AssociatedTypeWitness = v72;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v36 = 0;
    AssociatedTypeWitness = v72;
    v29 = MEMORY[0x1E0DEE9D8];
    v27 = v75;
  }
  else
  {
    v93 = 0;
    v91 = 0u;
    v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    v35 = 0;
    v36 = v88;
  }
  *(_QWORD *)&v94 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v13 + 16))(&v94, v14, v13);
  if (!v36)
  {
    v38 = v87;
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v87 + 56))(v18, 0, 1, v15);
    v39 = v84;
    (*(void (**)(char *, char *, _QWORD *))(v38 + 32))(v84, v18, v15);
    v90 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, _QWORD *))(v38 + 16))(boxed_opaque_existential_1, v39, v15);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (!*((_QWORD *)&v92 + 1))
    {
      (*(void (**)(char *, _QWORD *))(v38 + 8))(v39, v15);
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
      if (v35)
        goto LABEL_8;
      goto LABEL_7;
    }
    v75 = v27;
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    v43 = _bridgeAnythingToObjectiveC<A>(_:)();
    v88 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v43);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, _QWORD *))(v38 + 8))(v39, v15);

LABEL_18:
    v49 = v83;
    v50 = v82;
    v51 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v80, v97 + *((int *)v81 + 19), v82);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
      v52 = v95;
      v53 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      v60 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, v53);
      v62 = v61;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v62 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        v63 = v60;
        v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v65 = (void *)objc_opt_self();
        v66 = objc_msgSend(v65, sel_expressionForConstantValue_, v64);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        v67 = objc_msgSend(v65, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v60 = objc_msgSend(v65, sel_expressionForConditional_trueExpression_falseExpression_, v63, v66, v67);

      }
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
      v15 = 0;
      *(_QWORD *)&v94 = MEMORY[0x1E0DEE9D8];
      (*(void (**)(__int128 *, uint64_t))(v78 + 16))(&v94, v50);
      v54 = v77;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v49, 0, 1, AssociatedTypeWitness);
      v55 = v76;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v76, v49, AssociatedTypeWitness);
      v90 = (_QWORD *)AssociatedTypeWitness;
      v56 = __swift_allocate_boxed_opaque_existential_1(v89);
      (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 16))(v56, v55, AssociatedTypeWitness);
      _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      if (!*((_QWORD *)&v92 + 1))
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v76, AssociatedTypeWitness);
        outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
        v57 = v88;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v58 = 2;
        swift_willThrow();

        return v15;
      }
      outlined init with take of Any(&v91, &v94);
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      v68 = v54;
      v69 = _bridgeAnythingToObjectiveC<A>(_:)();
      v60 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v69);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v76, AssociatedTypeWitness);

    }
    v70 = v88;
    v15 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v88, v60, 0, 8, 0);

    return v15;
  }

  (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v87 + 56))(v18, 1, 1, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v85);
  if (!v35)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v37 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v15;
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))PredicateExpressions.SequenceStartsWith<>.convert(state:));
}

uint64_t protocol witness for ConvertibleExpression.convert(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
  if (v4)
    return v6;
  return result;
}

id protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.NilLiteral<A>()
{
  return objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, 0);
}

char *PredicateExpressions.StringContainsRegex.convert(state:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char v34;
  void *v35;
  char *v36;
  char *v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  uint64_t *boxed_opaque_existential_1;
  void *v42;
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (**v56)(char *, char *, uint64_t);
  uint64_t *v57;
  _BYTE *v58;
  id v60;
  char v61;
  char v62;
  id v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  char *v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t v72;
  id v73;
  char *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  Swift::String v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v3 = v2;
  v6 = a2[3];
  v78 = a2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v77 = type metadata accessor for Optional();
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v85 = (char *)&v74 - v8;
  v9 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v74 = (char *)&v74 - v11;
  v84 = v6;
  v80 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v12);
  v81 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2[4];
  v82 = a2;
  v15 = a2[2];
  v16 = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v88 = *(_QWORD *)(v17 - 8);
  v89 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v74 - v18;
  v90 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v20);
  v87 = (char *)&v74 - v21;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16);
  v100 = v3;
  v27(v25, v3, v15, v23);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v28 = swift_dynamicCast();
  v29 = MEMORY[0x1E0DEE9D8];
  v86 = AssociatedTypeWitness;
  v83 = a1;
  if (v28)
  {
    v75 = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
    v31 = v98;
    v30 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    v32 = v91;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v31, v30);
    v35 = v32;
    if (!v32)
    {
      v42 = (void *)v33;
      v43 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
      if ((v43 & 1) != 0)
      {
        LOBYTE(v97) = 1;
        v48 = v42;
        v49 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v50 = (void *)objc_opt_self();
        v51 = objc_msgSend(v50, sel_expressionForConstantValue_, v49);
        swift_unknownObjectRelease();
        LOBYTE(v97) = 0;
        v52 = objc_msgSend(v50, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v91 = objc_msgSend(v50, sel_expressionForConditional_trueExpression_falseExpression_, v48, v51, v52);

      }
      else
      {
        v91 = v42;
      }
      v47 = v86;
      v45 = v85;
      v46 = v84;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    v36 = 0;
    v9 = v75;
    v29 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
    v35 = 0;
    v36 = (char *)v91;
  }
  *(_QWORD *)&v97 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v14 + 16))(&v97, v15, v14);
  v37 = v36;
  if (v36)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v19, 1, 1, v16);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v19, v89);
    if (v35)
    {
LABEL_8:
      swift_willThrow();
      return v37;
    }
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v38 = 2;
    goto LABEL_8;
  }
  v39 = v90;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v19, 0, 1, v16);
  v40 = v87;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v87, v19, v16);
  v93 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(&v92._countAndFlagsBits);
  (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 16))(boxed_opaque_existential_1, v40, v16);
  _expressionCompatibleValue(for:)((uint64_t)&v92, (uint64_t)&v94);
  v37 = (char *)v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
  if (!*((_QWORD *)&v95 + 1))
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v16);
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
    if (v35)
      goto LABEL_8;
    goto LABEL_7;
  }
  v75 = v9;
  outlined init with take of Any(&v94, &v97);
  __swift_project_boxed_opaque_existential_1(&v97, v98);
  v44 = _bridgeAnythingToObjectiveC<A>(_:)();
  v91 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v44);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v16);

  v45 = v85;
  v46 = v84;
  v47 = v86;
LABEL_18:
  v53 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v81, v100 + *((int *)v82 + 17), v46);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v94, (uint64_t)&v97);
    v54 = v98;
    v55 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    v60 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v53, v54, v55);
    v62 = v61;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    if ((v62 & 1) != 0)
    {
      LOBYTE(v97) = 1;
      v63 = v60;
      v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v65 = (void *)objc_opt_self();
      v66 = objc_msgSend(v65, sel_expressionForConstantValue_, v64);
      swift_unknownObjectRelease();
      LOBYTE(v97) = 0;
      v67 = objc_msgSend(v65, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v60 = objc_msgSend(v65, sel_expressionForConditional_trueExpression_falseExpression_, v63, v66, v67);

    }
    v68 = v91;
  }
  else
  {
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(_QWORD *)&v97 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(__int128 *, uint64_t))(v78 + 16))(&v97, v46);
    v56 = (void (**)(char *, char *, uint64_t))v75;
    (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v75 + 7))(v45, 0, 1, v47);
    v37 = v74;
    v56[4](v74, v45, v47);
    v93 = v47;
    v57 = __swift_allocate_boxed_opaque_existential_1(&v92._countAndFlagsBits);
    v56[2]((char *)v57, v37, v47);
    _expressionCompatibleValue(for:)((uint64_t)&v92, (uint64_t)&v94);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
    v68 = v91;
    if (!*((_QWORD *)&v95 + 1))
    {
      ((void (*)(char *, uint64_t))v56[1])(v37, v47);
      outlined destroy of Any?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *v58 = 2;
      swift_willThrow();

      return v37;
    }
    outlined init with take of Any(&v94, &v97);
    __swift_project_boxed_opaque_existential_1(&v97, v98);
    v69 = v37;
    v70 = _bridgeAnythingToObjectiveC<A>(_:)();
    v60 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v70);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    ((void (*)(char *, uint64_t))v56[1])(v69, v47);

  }
  if (objc_msgSend(v60, sel_constantValue))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v94 = 0u;
    v95 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v94, (uint64_t)&v97);
  if (v98)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(_QWORD *)&v97 = 10798;
      *((_QWORD *)&v97 + 1) = 0xE200000000000000;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v71._countAndFlagsBits = 10798;
      v71._object = (void *)0xE200000000000000;
      String.append(_:)(v71);
      v72 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v73 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v72);

      swift_unknownObjectRelease();
      v60 = v73;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v97, &demangling cache variable for type metadata for Any?);
  }
  v37 = (char *)objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v68, v60, 0, 6, 0);

  return v37;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringContainsRegex<A, B>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.StringContainsRegex.convert(state:)(a1, a2);
  if (v2)
    return (char *)v4;
  return result;
}

uint64_t NSComparisonResult.expression.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  _QWORD v14[3];
  uint64_t v15;

  type metadata accessor for NSComparisonResult(0);
  v13[3] = v3;
  v13[0] = a1;
  _expressionCompatibleValue(for:)((uint64_t)v13, (uint64_t)v14);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (!v1)
  {
    v5 = v15;
    if (v15)
    {
      v6 = __swift_project_boxed_opaque_existential_1(v14, v15);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = MEMORY[0x1E0C80A78](v6);
      v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
      v11 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      v11 = 0;
    }
    v12 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v11);
    swift_unknownObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

char *_expressionForComparisonResult<A, B>(_:_:state:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t *boxed_opaque_existential_1;
  void (*v59)(uint64_t *, char *, uint64_t);
  char *v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  id v79;
  char v80;
  char v81;
  id v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  id v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  id v104;
  char v105;
  char v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t *v122;
  _BYTE *v123;
  id v125;
  char v126;
  char v127;
  id v128;
  uint64_t v129;
  void *v130;
  id v131;
  id v132;
  uint64_t v133;
  id v134;
  id v135;
  void *v136;
  void *v137;
  void *v138;
  id v139;
  id v140;
  void *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  void (*v148)(char *, uint64_t, uint64_t);
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  void (*v159)(char *, uint64_t, uint64_t);
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171[3];
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;

  v150 = a4;
  v164 = a2;
  v156 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v154 = type metadata accessor for Optional();
  v153 = *(_QWORD *)(v154 - 8);
  MEMORY[0x1E0C80A78](v154);
  v145 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v162 = (char *)&v143 - v16;
  v157 = AssociatedTypeWitness;
  v161 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v144 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v151 = (char *)&v143 - v20;
  v160 = a6;
  v159 = *(void (**)(char *, uint64_t, uint64_t))(a6 - 8);
  MEMORY[0x1E0C80A78](v21);
  v146 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v158 = (char *)&v143 - v24;
  v168 = a7;
  v25 = swift_getAssociatedTypeWitness();
  v26 = type metadata accessor for Optional();
  v166 = *(_QWORD *)(v26 - 8);
  v167 = v26;
  MEMORY[0x1E0C80A78](v26);
  v152 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v143 - v29;
  v169 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v31);
  v147 = (char *)&v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v143 - v34;
  MEMORY[0x1E0C80A78](v36);
  v149 = (char *)&v143 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v38);
  v41 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v40 + 16);
  v170 = a1;
  v148 = (void (*)(char *, uint64_t, uint64_t))v41;
  v41((char *)&v143 - v42, a1, a5, v39);
  v43 = a5;
  v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v44 = swift_dynamicCast();
  v45 = MEMORY[0x1E0DEE9D8];
  v155 = a3;
  if (v44)
  {
    v165 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
    v46 = v177;
    v47 = v178;
    __swift_project_boxed_opaque_existential_1(&v176, v177);
    v48 = v179;
    v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(a3, v46, v47);
    v51 = v48;
    if (!v48)
    {
      v60 = (char *)v49;
      v61 = v50;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      v62 = v162;
      if ((v61 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        v65 = v60;
        v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v67 = (void *)objc_opt_self();
        v68 = objc_msgSend(v67, sel_expressionForConstantValue_, v66);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        v69 = objc_msgSend(v67, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v179 = (char *)objc_msgSend(v67, sel_expressionForConditional_trueExpression_falseExpression_, v65, v68, v69);

      }
      else
      {
        v179 = v60;
      }
      v64 = v164;
      v55 = v43;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
    v52 = 0;
    v53 = v51;
    v25 = v165;
    v54 = v168;
  }
  else
  {
    v175 = 0;
    v173 = 0u;
    v174 = 0u;
    outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
    v53 = 0;
    v54 = v168;
    v52 = v179;
  }
  *(_QWORD *)&v176 = v45;
  v55 = a5;
  (*(void (**)(__int128 *, uint64_t))(v54 + 16))(&v176, a5);
  if (!v52)
  {
    v57 = v169;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v30, 0, 1, v25);
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v35, v30, v25);
    v172 = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v171);
    v59 = *(void (**)(uint64_t *, char *, uint64_t))(v57 + 16);
    v165 = v25;
    v59(boxed_opaque_existential_1, v35, v25);
    _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
    if (!*((_QWORD *)&v174 + 1))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v165);
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
      if (v53)
        goto LABEL_8;
      goto LABEL_7;
    }
    outlined init with take of Any(&v173, &v176);
    __swift_project_boxed_opaque_existential_1(&v176, v177);
    v63 = _bridgeAnythingToObjectiveC<A>(_:)();
    v179 = (char *)objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v63);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v165);

    v64 = v164;
    v62 = v162;
LABEL_18:
    v70 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v159 + 2);
    v71 = v160;
    v70(v158, v64, v160);
    v72 = swift_dynamicCast();
    v159 = v70;
    if (v72)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
      v73 = v177;
      v74 = v178;
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      v79 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v155, v73, v74);
      v81 = v80;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      if ((v81 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        v82 = v79;
        v83 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v84 = (void *)objc_opt_self();
        v85 = objc_msgSend(v84, sel_expressionForConstantValue_, v83);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        v86 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v71 = v160;
        v87 = objc_msgSend(v84, sel_expressionForConstantValue_, v86);
        swift_unknownObjectRelease();
        v79 = objc_msgSend(v84, sel_expressionForConditional_trueExpression_falseExpression_, v82, v85, v87);

      }
    }
    else
    {
      v175 = 0;
      v173 = 0u;
      v174 = 0u;
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(_QWORD *)&v176 = MEMORY[0x1E0DEE9D8];
      (*(void (**)(__int128 *, uint64_t))(v156 + 16))(&v176, v71);
      v30 = v161;
      v76 = v157;
      (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v161 + 7))(v62, 0, 1, v157);
      v77 = v151;
      (*((void (**)(char *, char *, uint64_t))v30 + 4))(v151, v62, v76);
      v172 = v76;
      v78 = __swift_allocate_boxed_opaque_existential_1(v171);
      (*((void (**)(uint64_t *, char *, uint64_t))v30 + 2))(v78, v77, v76);
      _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
      if (!*((_QWORD *)&v174 + 1))
      {
        (*((void (**)(char *, uint64_t))v161 + 1))(v77, v76);
        outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v75 = 2;
        swift_willThrow();

        return v30;
      }
      outlined init with take of Any(&v173, &v176);
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      v88 = v76;
      v89 = _bridgeAnythingToObjectiveC<A>(_:)();
      v79 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v89);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      (*((void (**)(char *, uint64_t))v161 + 1))(v77, v88);

    }
    v90 = v152;
    v91 = v149;
    v92 = v148;
    v93 = objc_allocWithZone((Class)NSComparisonPredicate);
    v94 = v179;
    v95 = (char *)objc_msgSend(v93, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v179, v79, 0, 4, v150);

    v92(v91, v170, v55);
    if (swift_dynamicCast())
    {
      v179 = v95;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
      v96 = v177;
      v97 = v178;
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      v104 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v155, v96, v97);
      v106 = v105;
      v107 = MEMORY[0x1E0DEE9D8];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      if ((v106 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        v108 = v104;
        v109 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v110 = (void *)objc_opt_self();
        v111 = objc_msgSend(v110, sel_expressionForConstantValue_, v109);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        v112 = objc_msgSend(v110, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v104 = objc_msgSend(v110, sel_expressionForConditional_trueExpression_falseExpression_, v108, v111, v112);

        v71 = v160;
      }
    }
    else
    {
      v175 = 0;
      v173 = 0u;
      v174 = 0u;
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
      *(_QWORD *)&v176 = MEMORY[0x1E0DEE9D8];
      v98 = v90;
      (*(void (**)(__int128 *, uint64_t))(v168 + 16))(&v176, v55);
      v99 = v165;
      v179 = v95;
      v101 = v169;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v98, 0, 1, v165);
      v102 = v147;
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v147, v98, v99);
      v172 = v99;
      v103 = __swift_allocate_boxed_opaque_existential_1(v171);
      (*(void (**)(uint64_t *, char *, uint64_t))(v101 + 16))(v103, v102, v99);
      _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
      if (!*((_QWORD *)&v174 + 1))
      {
        (*(void (**)(char *, uint64_t))(v169 + 8))(v102, v99);
        outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
        v30 = v179;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v100 = 2;
        swift_willThrow();

        return v30;
      }
      v107 = MEMORY[0x1E0DEE9D8];
      outlined init with take of Any(&v173, &v176);
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      v113 = _bridgeAnythingToObjectiveC<A>(_:)();
      v104 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v113);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      (*(void (**)(char *, uint64_t))(v169 + 8))(v102, v99);

    }
    v114 = v156;
    v115 = v155;
    v159(v146, v164, v71);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v173, (uint64_t)&v176);
      v116 = v177;
      v117 = v178;
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      v125 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 16))(v115, v116, v117);
      v127 = v126;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      if ((v127 & 1) != 0)
      {
        LOBYTE(v176) = 1;
        v128 = v125;
        v129 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v130 = (void *)objc_opt_self();
        v131 = objc_msgSend(v130, sel_expressionForConstantValue_, v129);
        swift_unknownObjectRelease();
        LOBYTE(v176) = 0;
        v132 = objc_msgSend(v130, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v125 = objc_msgSend(v130, sel_expressionForConditional_trueExpression_falseExpression_, v128, v131, v132);

      }
    }
    else
    {
      v175 = 0;
      v173 = 0u;
      v174 = 0u;
      outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for ConvertibleExpression?);
      v118 = v145;
      *(_QWORD *)&v176 = v107;
      (*(void (**)(__int128 *, uint64_t, uint64_t))(v114 + 16))(&v176, v71, v114);
      v119 = v161;
      v120 = v157;
      (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v161 + 7))(v118, 0, 1, v157);
      v121 = v144;
      (*((void (**)(char *, char *, uint64_t))v119 + 4))(v144, v118, v120);
      v172 = v120;
      v122 = __swift_allocate_boxed_opaque_existential_1(v171);
      (*((void (**)(uint64_t *, char *, uint64_t))v119 + 2))(v122, v121, v120);
      _expressionCompatibleValue(for:)((uint64_t)v171, (uint64_t)&v173);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
      v30 = v179;
      if (!*((_QWORD *)&v174 + 1))
      {
        (*((void (**)(char *, uint64_t))v161 + 1))(v144, v157);
        outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v123 = 2;
        swift_willThrow();

        return v30;
      }
      outlined init with take of Any(&v173, &v176);
      __swift_project_boxed_opaque_existential_1(&v176, v177);
      v133 = _bridgeAnythingToObjectiveC<A>(_:)();
      v125 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v133);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      (*((void (**)(char *, uint64_t))v161 + 1))(v144, v157);

    }
    v134 = objc_allocWithZone((Class)NSComparisonPredicate);
    v135 = objc_msgSend(v134, sel_initWithLeftExpression_rightExpression_modifier_type_options_, v104, v125, 0, 0, v150);

    v136 = (void *)NSComparisonResult.expression.getter(-1);
    v137 = (void *)NSComparisonResult.expression.getter(1);
    v138 = (void *)objc_opt_self();
    v139 = v135;
    v140 = objc_msgSend(v138, sel_expressionForConditional_trueExpression_falseExpression_, v139, v136, v137);

    v141 = (void *)NSComparisonResult.expression.getter(0);
    v142 = v179;
    v30 = (char *)objc_msgSend(v138, sel_expressionForConditional_trueExpression_falseExpression_, v142, v141, v140);

    return v30;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56))(v30, 1, 1, v25);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v30, v167);
  if (!v53)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v56 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v30;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringCaseInsensitiveCompare<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(a1, a2, 1);
  if (v2)
    return (char *)v4;
  return result;
}

char *PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  result = _expressionForComparisonResult<A, B>(_:_:state:options:)(v3, v3 + *(int *)(a2 + 68), a1, a3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  if (v4)
    return (char *)v6;
  return result;
}

char *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *result;
  uint64_t v4;

  result = PredicateExpressions.StringCaseInsensitiveCompare.convert(state:)(a1, a2, 8);
  if (v2)
    return (char *)v4;
  return result;
}

_QWORD *PredicateExpressions.StringLocalizedStandardContains.convert(state:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char v34;
  void *v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  uint64_t *boxed_opaque_existential_1;
  void *v41;
  char v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  void *v57;
  _BYTE *v58;
  id v60;
  char v61;
  char v62;
  id v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89[3];
  _QWORD *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v3 = v2;
  v86 = a1;
  v5 = a2[3];
  v78 = a2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = type metadata accessor for Optional();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v83 = (char *)&v71 - v7;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v76 = (char *)&v71 - v10;
  v82 = v5;
  v79 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v11);
  v80 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2[4];
  v81 = a2;
  v14 = a2[2];
  v15 = (_QWORD *)swift_getAssociatedTypeWitness();
  v85 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v18 = (char *)&v71 - v17;
  v87 = *(v15 - 1);
  MEMORY[0x1E0C80A78](v19);
  v84 = (char *)&v71 - v20;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
  v97 = v3;
  v26(v24, v3, v14, v22);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  v28 = swift_dynamicCast();
  v29 = MEMORY[0x1E0DEE9D8];
  v77 = v8;
  if (v28)
  {
    v75 = v27;
    v72 = AssociatedTypeWitness;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
    v31 = v95;
    v30 = v96;
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    v32 = v88;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v86, v31, v30);
    v35 = v32;
    if (!v32)
    {
      v41 = (void *)v33;
      v42 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v42 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        v44 = v41;
        v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v46 = (void *)objc_opt_self();
        v47 = objc_msgSend(v46, sel_expressionForConstantValue_, v45);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        v48 = objc_msgSend(v46, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v88 = objc_msgSend(v46, sel_expressionForConditional_trueExpression_falseExpression_, v44, v47, v48);

      }
      else
      {
        v88 = v41;
      }
      AssociatedTypeWitness = v72;
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v36 = 0;
    AssociatedTypeWitness = v72;
    v29 = MEMORY[0x1E0DEE9D8];
    v27 = v75;
  }
  else
  {
    v93 = 0;
    v91 = 0u;
    v92 = 0u;
    outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
    v35 = 0;
    v36 = v88;
  }
  *(_QWORD *)&v94 = v29;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v13 + 16))(&v94, v14, v13);
  if (!v36)
  {
    v38 = v87;
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v87 + 56))(v18, 0, 1, v15);
    v39 = v84;
    (*(void (**)(char *, char *, _QWORD *))(v38 + 32))(v84, v18, v15);
    v90 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
    (*(void (**)(uint64_t *, char *, _QWORD *))(v38 + 16))(boxed_opaque_existential_1, v39, v15);
    _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
    if (!*((_QWORD *)&v92 + 1))
    {
      (*(void (**)(char *, _QWORD *))(v38 + 8))(v39, v15);
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
      if (v35)
        goto LABEL_8;
      goto LABEL_7;
    }
    v75 = v27;
    outlined init with take of Any(&v91, &v94);
    __swift_project_boxed_opaque_existential_1(&v94, v95);
    v43 = _bridgeAnythingToObjectiveC<A>(_:)();
    v88 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v43);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    (*(void (**)(char *, _QWORD *))(v38 + 8))(v39, v15);

LABEL_18:
    v49 = v83;
    v50 = v82;
    v51 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v80, v97 + *((int *)v81 + 17), v82);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)&v94);
      v52 = v95;
      v53 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      v60 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, v53);
      v62 = v61;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      if ((v62 & 1) != 0)
      {
        LOBYTE(v94) = 1;
        v63 = v60;
        v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        v65 = (void *)objc_opt_self();
        v66 = objc_msgSend(v65, sel_expressionForConstantValue_, v64);
        swift_unknownObjectRelease();
        LOBYTE(v94) = 0;
        v67 = objc_msgSend(v65, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        v60 = objc_msgSend(v65, sel_expressionForConditional_trueExpression_falseExpression_, v63, v66, v67);

      }
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
      outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for ConvertibleExpression?);
      v15 = 0;
      *(_QWORD *)&v94 = MEMORY[0x1E0DEE9D8];
      (*(void (**)(__int128 *, uint64_t))(v78 + 16))(&v94, v50);
      v54 = v77;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v49, 0, 1, AssociatedTypeWitness);
      v55 = v76;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v76, v49, AssociatedTypeWitness);
      v90 = (_QWORD *)AssociatedTypeWitness;
      v56 = __swift_allocate_boxed_opaque_existential_1(v89);
      (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 16))(v56, v55, AssociatedTypeWitness);
      _expressionCompatibleValue(for:)((uint64_t)v89, (uint64_t)&v91);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      if (!*((_QWORD *)&v92 + 1))
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v76, AssociatedTypeWitness);
        outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
        v57 = v88;
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v58 = 2;
        swift_willThrow();

        return v15;
      }
      outlined init with take of Any(&v91, &v94);
      __swift_project_boxed_opaque_existential_1(&v94, v95);
      v68 = v54;
      v69 = _bridgeAnythingToObjectiveC<A>(_:)();
      v60 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v69);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v76, AssociatedTypeWitness);

    }
    v70 = v88;
    v15 = objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v88, v60, 0, 99, 11);

    return v15;
  }

  (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v87 + 56))(v18, 1, 1, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v85);
  if (!v35)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *v37 = 2;
  }
LABEL_8:
  swift_willThrow();
  return v15;
}

_QWORD *protocol witness for ConvertibleExpression.convert(state:) in conformance PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  result = PredicateExpressions.StringLocalizedStandardContains.convert(state:)(a1, a2);
  if (v2)
    return (_QWORD *)v4;
  return result;
}

unint64_t NSPredicate.init<A>(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD *v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  char v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  _QWORD v49[3];

  v3 = v2;
  v47 = a1[5];
  v6 = v47;
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_expressionForEvaluatedObject);
  v48 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v47);
  if ((v11 & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v9[(result >> 6) + 8] |= 1 << result;
  v12 = 8 * result;
  *(_QWORD *)(v9[6] + v12) = v6;
  *(_QWORD *)(v9[7] + v12) = v8;
  v13 = v9[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v38 = v3;
  v9[2] = v15;
  v16 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, NSExpression));
  swift_arrayDestroy();
  v49[0] = 1;
  v49[1] = v9;
  v18 = a1[3];
  v17 = a1[4];
  v19 = __swift_project_boxed_opaque_existential_1(a1, v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v22 + 16))((char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v18, v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v41, (uint64_t)&v44);
    v23 = v45;
    v24 = v46;
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    v29 = (id)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v24 + 16))(v49, v23, v24);
    v31 = v30;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    if ((v31 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    outlined destroy of Any?((uint64_t)&v41, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(_QWORD *)&v44 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(char *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)(v17 + 8) + 16))(&v40, &v44, v18);
    v39[3] = MEMORY[0x1E0DEAFA0];
    LOBYTE(v39[0]) = v40 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v39, (uint64_t)&v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    if (!*((_QWORD *)&v42 + 1))
    {
      outlined destroy of Any?((uint64_t)&v41, &demangling cache variable for type metadata for Any?);
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      v25 = (void *)swift_allocError();
      *v26 = 2;
      swift_willThrow();

      swift_bridgeObjectRelease();
      *(_QWORD *)&v44 = a2;
      v28 = type metadata accessor for Predicate(0, 1, (uint64_t)&v44, v27);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
      return 0;
    }
    outlined init with take of Any(&v41, &v44);
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    v29 = objc_msgSend(v7, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);

  }
  LOBYTE(v44) = 1;
  v32 = v29;
  v33 = objc_msgSend(v7, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  objc_msgSend(objc_allocWithZone((Class)NSComparisonPredicate), sel_initWithLeftExpression_rightExpression_modifier_type_options_, v32, v33, 0, 4, 0);

LABEL_12:
  swift_bridgeObjectRelease();
  v34 = v38;
  *(_QWORD *)&v41 = swift_dynamicCastUnknownClassUnconditional();
  (*(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(&v44, &v41, v34);
  v39[0] = a2;
  v36 = type metadata accessor for Predicate(0, 1, (uint64_t)v39, v35);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(a1, v36);
  return v44;
}

unint64_t NSExpression.init<A, B>(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD *v16;
  unint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  char *v35;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  char v40;
  char v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58[5];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  _QWORD v67[3];

  v4 = v3;
  v55 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v9 = (char *)&v51 - v8;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v11);
  v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a1[5];
  v13 = v65;
  v14 = (void *)objc_opt_self();
  v15 = objc_msgSend(v14, sel_expressionForEvaluatedObject);
  v66 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  v16 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v18 & 1) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v16[(result >> 6) + 8] |= 1 << result;
  v19 = 8 * result;
  *(_QWORD *)(v16[6] + v19) = v13;
  *(_QWORD *)(v16[7] + v19) = v15;
  v20 = v16[2];
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v51 = v14;
  v52 = v4;
  v57 = a2;
  v16[2] = v22;
  v23 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, NSExpression));
  swift_arrayDestroy();
  v67[0] = 1;
  v67[1] = v16;
  v25 = a1[3];
  v24 = a1[4];
  v26 = __swift_project_boxed_opaque_existential_1(a1, v25);
  v27 = MEMORY[0x1E0C80A78](v26);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v29 + 16))((char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v25, v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConvertibleExpression);
  if (swift_dynamicCast())
  {
    v56 = a1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v59, (uint64_t)&v62);
    v30 = v63;
    v31 = v64;
    __swift_project_boxed_opaque_existential_1(&v62, v63);
    v39 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v31 + 16))(v67, v30, v31);
    v41 = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    v37 = v57;
    if ((v41 & 1) != 0)
    {
      LOBYTE(v62) = 1;
      v42 = v39;
      v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v44 = v51;
      v45 = objc_msgSend(v51, sel_expressionForConstantValue_, v43);
      swift_unknownObjectRelease();
      LOBYTE(v62) = 0;
      v46 = objc_msgSend(v44, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      v47 = objc_msgSend(v44, sel_expressionForConditional_trueExpression_falseExpression_, v42, v45, v46);

    }
  }
  else
  {
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    outlined destroy of Any?((uint64_t)&v59, &demangling cache variable for type metadata for ConvertibleExpression?);
    *(_QWORD *)&v62 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v24 + 8) + 16))(&v62, v25);
    v56 = a1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, a3);
    v35 = v53;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v9, a3);
    v58[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v35, a3);
    _expressionCompatibleValue(for:)((uint64_t)v58, (uint64_t)&v59);
    v37 = v57;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    if (!*((_QWORD *)&v60 + 1))
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v35, a3);
      outlined destroy of Any?((uint64_t)&v59, &demangling cache variable for type metadata for Any?);
      v38 = v56;
      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      v32 = (void *)swift_allocError();
      *v33 = 2;
      swift_willThrow();

      swift_bridgeObjectRelease();
      *(_QWORD *)&v62 = v37;
      v34 = type metadata accessor for Expression(0, 1, (uint64_t)&v62, a3);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v38, v34);
      return 0;
    }
    outlined init with take of Any(&v59, &v62);
    __swift_project_boxed_opaque_existential_1(&v62, v63);
    v48 = objc_msgSend(v51, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, a3);

  }
  swift_bridgeObjectRelease();
  v49 = v52;
  *(_QWORD *)&v59 = swift_dynamicCastUnknownClassUnconditional();
  (*(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(&v62, &v59, v49);
  v58[0] = v37;
  v50 = type metadata accessor for Expression(0, 1, (uint64_t)v58, a3);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v56, v50);
  return v62;
}

id @nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(_QWORD *a1, _QWORD *a2)
{
  void *v2;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v21;

  v4 = a1[3];
  if (!v4)
  {
    v11 = 0;
    v12 = a2[3];
    if (v12)
      goto LABEL_3;
LABEL_5:
    v18 = 0;
    goto LABEL_6;
  }
  v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
  v11 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = a2[3];
  if (!v12)
    goto LABEL_5;
LABEL_3:
  v13 = __swift_project_boxed_opaque_existential_1(a2, v12);
  v14 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v14 + 16))(v17, v15);
  v18 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
LABEL_6:
  v19 = objc_msgSend(v2, sel_initWithOperand_andKeyPath_, v11, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v19;
}

unint64_t lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError;
  if (!lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSPredicateConversionError, &unk_1E0F27690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError;
  if (!lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSPredicateConversionError, &unk_1E0F27690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSPredicateConversionError and conformance NSPredicateConversionError);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Value<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Value<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.KeyPath<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Arithmetic<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Arithmetic<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.UnaryMinus<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.UnaryMinus<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Filter<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Filter<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.FloatDivision<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.FloatDivision<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.ClosedRange<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ClosedRange<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.SequenceMaximum<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.SequenceMinimum<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Conditional<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Conditional<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilCoalesce<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.NilCoalesce<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.OptionalFlatMap<A, B, C, D>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for [A](uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.CollectionIndexSubscript<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.DictionaryKeySubscript<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for NSPredicateConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181C539DC + 4 * byte_1820FC875[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C53A10 + 4 * byte_1820FC870[v4]))();
}

uint64_t sub_181C53A10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C53A18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C53A20);
  return result;
}

uint64_t sub_181C53A2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C53A34);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181C53A38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C53A40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSPredicateConversionError()
{
  return &unk_1E0F27690;
}

uint64_t outlined init with take of AnyRange(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

uint64_t outlined init with copy of AnyRange(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyRange(a2, a1);
  return a2;
}

uint64_t specialized PredicateExpressions.Variable.convert(state:)(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;

  v2 = v1;
  v3 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v3 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v2);
    if ((v4 & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * result);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized PredicateExpressions.RangeExpressionContains._expressionForBound(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14[4];
  _QWORD v15[3];
  uint64_t v16;

  v2 = a1[3];
  v3 = __swift_project_boxed_opaque_existential_1(a1, v2);
  v14[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
  _expressionCompatibleValue(for:)((uint64_t)v14, (uint64_t)v15);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v1)
  {
    v6 = v16;
    if (v16)
    {
      v7 = __swift_project_boxed_opaque_existential_1(v15, v16);
      v8 = *(_QWORD *)(v6 - 8);
      v9 = MEMORY[0x1E0C80A78](v7);
      v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
      v12 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    }
    else
    {
      v12 = 0;
    }
    v13 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v12);
    swift_unknownObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t outlined destroy of AnyRange(uint64_t a1)
{
  destroy for AnyRange(a1);
  return a1;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> (@out Any?, @error @owned Error)(a1, *(void (**)(uint64_t *))(v1 + 32));
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out Any?, @error @owned Error)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t outlined init with take of PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for AnyRange(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = a1;
  v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 >= 5)
    v2 = *(_DWORD *)a1 + 5;
  if (v2 <= 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    v1 += 40;
  }
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for AnyRange(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(unsigned __int8 *)(a2 + 80);
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v5;
        (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
        v6 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 64) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 40, a2 + 40);
        v7 = 0;
        break;
      case 1:
        v8 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v8;
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
        v9 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 64) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, a2 + 40);
        v7 = 1;
        break;
      case 2:
        v10 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
        v7 = 2;
        break;
      case 3:
        v11 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v11;
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
        v7 = 3;
        break;
      case 4:
        v12 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v12;
        (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
        v7 = 4;
        break;
      default:
        v4 = *(_DWORD *)a2 + 5;
        continue;
    }
    break;
  }
  *(_BYTE *)(a1 + 80) = v7;
  return a1;
}

uint64_t assignWithCopy for AnyRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1;
  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 80);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if (v4 <= 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      a1 = v2 + 40;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 80);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v2 + 24) = v6;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v2, a2);
          v7 = *(_QWORD *)(a2 + 64);
          *(_QWORD *)(v2 + 64) = v7;
          *(_QWORD *)(v2 + 72) = *(_QWORD *)(a2 + 72);
          (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v2 + 40, a2 + 40);
          v8 = 0;
          break;
        case 1:
          v9 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v2 + 24) = v9;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v2, a2);
          v10 = *(_QWORD *)(a2 + 64);
          *(_QWORD *)(v2 + 64) = v10;
          *(_QWORD *)(v2 + 72) = *(_QWORD *)(a2 + 72);
          (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v2 + 40, a2 + 40);
          v8 = 1;
          break;
        case 2:
          v11 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v2 + 24) = v11;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v2, a2);
          v8 = 2;
          break;
        case 3:
          v12 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v2 + 24) = v12;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v2, a2);
          v8 = 3;
          break;
        case 4:
          v13 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v2 + 24) = v13;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v2, a2);
          v8 = 4;
          break;
        default:
          v5 = *(_DWORD *)a2 + 5;
          continue;
      }
      break;
    }
    *(_BYTE *)(v2 + 80) = v8;
  }
  return v2;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AnyRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = a1;
  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 80);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if (v4 <= 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      a1 = v2 + 40;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 80);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          v7 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(v2 + 48) = v7;
          *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v8;
          break;
        case 1:
          v9 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(v2 + 48) = v9;
          *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
          v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v10;
          v6 = 1;
          break;
        case 2:
          v11 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v11;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 2;
          break;
        case 3:
          v12 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v12;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 3;
          break;
        case 4:
          v13 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v2 = *(_OWORD *)a2;
          *(_OWORD *)(v2 + 16) = v13;
          *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 4;
          break;
        default:
          v5 = *(_DWORD *)a2 + 5;
          continue;
      }
      break;
    }
    *(_BYTE *)(v2 + 80) = v6;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for AnyRange(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 >= 5)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnyRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AnyRange(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 80);
  if (result >= 5)
    return (*(_DWORD *)a1 + 5);
  return result;
}

uint64_t destructiveInjectEnumTag for AnyRange(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 80) = a2;
  return result;
}

void *type metadata accessor for AnyRange()
{
  return &unk_1E0F30560;
}

unsigned __int8 *_sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n0defgh74C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xlmnoc28VGKXExAOKXExSS05UTF16Q0VKXEtuv46AOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Z0AF23LocalizedStringResourceVSgAIxsAJ_pRi_zRi0_zlyAMIsgyrzo_Tf1nnc_n(uint64_t *a1, uint64_t a2, _QWORD *(*a3)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v5 = *a1;
  v6 = a1[1];
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v12[0] = v5;
    v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v8 = HIBYTE(v6) & 0xF;
    result = (unsigned __int8 *)v12;
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v8, a2, a3);
  }
  v5 = static String._copying(_:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  *a1 = v5;
  a1[1] = v11;
  v6 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    result = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v8, a2, a3);
  }
  result = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  if (result)
  {
    if ((v8 & 0x8000000000000000) == 0)
      return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v8, a2, a3);
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *_sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(uint64_t *a1, uint64_t (*a2)(_QWORD *, uint64_t))
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = *a1;
  v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v6 = HIBYTE(v4) & 0xF;
    result = v10;
    return (_QWORD *)a2(result, v6);
  }
  v3 = static String._copying(_:)();
  v9 = v8;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v9;
  v4 = v9;
  if ((v9 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    result = (_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
    return (_QWORD *)a2(result, v6);
  }
  result = (_QWORD *)_StringObject.sharedUTF8.getter();
  if (result)
  {
    if ((v6 & 0x8000000000000000) == 0)
      return (_QWORD *)a2(result, v6);
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PropertyListDecoder.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v1;
  return v0;
}

uint64_t PropertyListDecoder.userInfo.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t PropertyListDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

uint64_t partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(v4, v2, v3, v5, v6);
}

uint64_t PropertyListDecoder.decode<A>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;

  v8 = 200;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 192))(a1, a2, a3, &v8, a4, a5, a6);
}

uint64_t PropertyListDecoder.decode<A, B>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = v8;
  v22 = a2;
  v23 = a3;
  v21 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, __n128))(a8 + 16))(a6, a8, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v9 + 168))(v21, v22, v23, v18, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

uint64_t PropertyListDecoder.decode<A, B>(_:from:format:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = v9;
  v22 = a3;
  v23 = a4;
  v20 = a1;
  v21 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, __n128))(a9 + 16))(a7, a9, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v10 + 192))(v20, v21, v22, v23, v18, a6, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

void PropertyListDecoder.decode<A>(_:from:format:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a2, a3);
}

void closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(_DWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, _QWORD *a6)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  _UNKNOWN **v45;
  uint64_t v46;
  void *v47;
  id v48;

  v10 = specialized static BPlistScanner.scanBinaryPropertyList(from:)(a1, a2);
  if (!v6)
  {
    v11 = v10;
    v12 = *(_QWORD *)(a3 + 16);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    *((_QWORD *)&v44 + 1) = v13;
    v45 = &protocol witness table for _PlistDecoder<A>;
    v43[0] = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v11, v12, 0x8000000000000000);
    swift_retain();
    a4(v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a6 = 200;
    return;
  }
  v48 = v6;
  v14 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
    goto LABEL_11;

  v16 = v46;
  v15 = v47;
  v17 = type metadata accessor for DecodingError();
  swift_allocError();
  v42 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 40) = v20;
  v21 = BPlistError.debugDescription.getter(v16, v15);
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v21;
  *(_QWORD *)(inited + 56) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v23 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v43);
  v24 = v43[0];
  v25 = v43[1];
  swift_retain();
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if ((v27 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v23[(v26 >> 6) + 8] |= 1 << v26;
  v28 = (uint64_t *)(v23[6] + 16 * v26);
  *v28 = v24;
  v28[1] = v25;
  outlined init with take of Any(&v44, (_OWORD *)(v23[7] + 32 * v26));
  v29 = v23[2];
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v23[2] = v31;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v32 = objc_allocWithZone((Class)NSError);
  v33 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v35 = objc_msgSend(v34, sel_domain);
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v38 == v39)
  {
    swift_bridgeObjectRelease_n();
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, (unint64_t)v15);
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v42, *MEMORY[0x1E0DEC458], v17);
    swift_willThrow();
LABEL_11:

    return;
  }
  v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v16, (unint64_t)v15);
  if ((v40 & 1) != 0)
    goto LABEL_10;
LABEL_14:
  __break(1u);
}

uint64_t partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in PropertyListDecoder._decode<A>(_:from:format:));
}

void closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, _QWORD *a6)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v21[0] = a1;
  v21[1] = a2;
  v21[2] = a1;
  v22 = a1;
  v23 = (_UNKNOWN **)(a1 + a2);
  v24 = MEMORY[0x1E0DEE9D8];
  v25 = 0;
  XMLPlistScanner.scanXMLPropertyList()();
  if (v6)
  {
    swift_bridgeObjectRelease();
    v26 = v6;
    v14 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {

      type metadata accessor for DecodingError();
      swift_allocError();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 40) = v16;
      __asm { BR              X11 }
    }

  }
  else
  {
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(a3 + 16);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_XMLPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v11, v12, 0x8000000000000000);
    v18 = v17;
    swift_release();
    v22 = v13;
    v23 = &protocol witness table for _PlistDecoder<A>;
    v21[0] = v18;
    swift_retain();
    a4(v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a6 = 100;
  }
}

uint64_t partial apply for closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in PropertyListDecoder._decode<A>(_:from:format:));
}

void closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, void (*a5)(__int128 *))
{
  void *v5;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  __int128 v36;
  __int128 v37;
  _UNKNOWN **v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  id v42;

  __ParseOldStylePropertyList(utf16:)(a1, a2, (uint64_t)&v36);
  if (!v5)
  {
    outlined init with take of Any(&v36, v41);
    outlined init with copy of Any((uint64_t)v41, (uint64_t)&v36);
    v32 = *(_QWORD *)(a3 + 16);
    v33 = type metadata accessor for __PlistDictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    v34 = __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v36, MEMORY[0x1E0DEE9D8], v32);
    *a4 = 1;
    *((_QWORD *)&v37 + 1) = v33;
    v38 = &protocol witness table for __PlistDictionaryDecoder;
    *(_QWORD *)&v36 = v34;
    swift_retain();
    a5(&v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return;
  }
  v42 = v5;
  v9 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;

  v10 = v39;
  v11 = v40;
  v12 = type metadata accessor for DecodingError();
  swift_allocError();
  v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v36);
  v18 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, *((uint64_t *)&v18 + 1));
  if ((v20 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v17[(v19 >> 6) + 8] |= 1 << v19;
  *(_OWORD *)(v17[6] + 16 * v19) = v18;
  outlined init with take of Any(&v37, (_OWORD *)(v17[7] + 32 * v19));
  v21 = v17[2];
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v17[2] = v23;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v24 = objc_allocWithZone((Class)NSError);
  v25 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v27 = objc_msgSend(v26, sel_domain);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v30 == v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC458], v12);
    swift_willThrow();
LABEL_11:

    return;
  }
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
    goto LABEL_10;
LABEL_14:
  __break(1u);
}

void partial apply for closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2)
{
  partial apply for closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2);
}

{
  uint64_t v2;

  closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32), *(void (**)(__int128 *))(v2 + 40));
}

void static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

int64_t sub_181C55B1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, __n128), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(id);
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD);
  uint64_t v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v15 = v11;
  v16 = v12;
  v17 = BYTE2(v12);
  v18 = BYTE3(v12);
  v19 = BYTE4(v12);
  v20 = BYTE5(v12);
  return closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)((uint64_t)&v15, BYTE6(v12), a3, a6, a7, v8, v9, a8, v10, v13);
}

uint64_t partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:configuration:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4, v2, v3, v6, v7);
}

uint64_t partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[3], v3[4], v3[5], v3[6], v3[2]);
}

uint64_t static PropertyListDecoder.readQuotedEncoding(in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  CFStringEncoding v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a2 || (v4 = *(unsigned __int8 *)result, v4 != 39) && v4 != 34)
  {
LABEL_11:
    *a3 = 4;
    return result;
  }
  v5 = (char *)(result + 1);
  if (a2 < 2)
  {
    v7 = 0;
  }
  else
  {
    v6 = 1;
    while (*(unsigned __int8 *)(result + v6) != v4)
    {
      if (a2 == ++v6)
      {
        v6 = a2;
        break;
      }
    }
    v7 = v6 - 1;
    if (v6 == 6)
    {
      result = _stringshims_strncasecmp_l((const char *)(result + 1), "utf-8", 5uLL, 0);
      if (!(_DWORD)result)
        goto LABEL_11;
    }
  }
  v8 = specialized String.init<A>(bytes:encoding:)(v5, v7, 5);
  if (v9)
  {
    v10 = (uint64_t)v8;
    v11 = v9;
    v12 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    v13 = CFStringConvertIANACharSetNameToEncoding(v12);
    swift_unknownObjectRelease();
    if (v13 != -1)
    {
      swift_bridgeObjectRelease();
      result = CFStringConvertEncodingToNSStringEncoding(v13);
      *a3 = result;
      return result;
    }
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = v10;
    v17._object = v11;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    _CodingPathNode.path.getter(0x8000000000000000);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC458], v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = type metadata accessor for DecodingError();
    swift_allocError();
    v16 = v15;
    _CodingPathNode.path.getter(0x8000000000000000);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC458], v14);
  }
  return swift_willThrow();
}

unint64_t static PropertyListDecoder.scanForExplicitXMLEncoding(in:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 >= 5)
  {
    v5 = result;
    result = strncmp((const char *)result, "<?xml", 5uLL);
    if (!(_DWORD)result && (unint64_t)a2 >= 6)
    {
      v6 = 0;
      v7 = v5 + a2;
      v8 = a2 - 14;
      while (1)
      {
        result = v5 + v6 + 5;
        if ((*(_BYTE *)result & 0xFE) == 0x3E)
          goto LABEL_12;
        if (v7 < result)
          break;
        if (v6 < 0)
          goto LABEL_19;
        if (v8 + 9 < 0)
          goto LABEL_20;
        if ((unint64_t)(v8 + 9) < 0xA)
        {
          v9 = type metadata accessor for DecodingError();
          swift_allocError();
          v11 = v10;
          _CodingPathNode.path.getter(0x8000000000000000);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, *MEMORY[0x1E0DEC458], v9);
          return swift_willThrow();
        }
        result = strncmp((const char *)result, "encoding=", 9uLL);
        if (!(_DWORD)result)
        {
          result = v5 + v6 + 14;
          if (v7 >= result)
          {
            if (v6 + 14 >= 0)
            {
              if ((v8 & 0x8000000000000000) == 0)
                return static PropertyListDecoder.readQuotedEncoding(in:)(result, v8, a3);
              goto LABEL_23;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            return result;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        --v8;
        ++v6;
        if (v5 + v6 + 5 >= v7)
          goto LABEL_12;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
LABEL_12:
  *a3 = 4;
  return result;
}

unint64_t static PropertyListDecoder.detectEncoding(of:)(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v13;
  char v14;
  int v15;
  unint64_t result;
  uint64_t v17;
  char v20;
  uint64_t v21;

  if (a3 < 1)
    goto LABEL_53;
  if (a3 == 1)
  {
    v5 = 0;
    v6 = 0;
LABEL_6:
    v7 = 0;
    v8 = 1;
LABEL_7:
    v9 = 1;
    v10 = *a2;
    goto LABEL_16;
  }
  v6 = a2[1];
  if ((unint64_t)a3 < 3)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v7 = a2[2];
  if (a3 == 3)
  {
    v5 = 0;
    v8 = 0;
    goto LABEL_7;
  }
  v8 = 0;
  v9 = 0;
  v5 = a2[3];
  v10 = *a2;
  if (!*a2 && !a2[1] && v7 == 254 && v5 == 255)
  {
    v11 = 2550137088;
LABEL_33:
    *a1 = v11;
    return 4;
  }
LABEL_16:
  v13 = a3 != 1 && v10 == 254 && v6 == 255;
  v14 = !v13;
  if (v13)
    v15 = v8;
  else
    v15 = 1;
  if (v7)
    v15 = 1;
  if (((v9 | v15) & 1) == 0 && !v5)
  {
    v11 = 2617245952;
    goto LABEL_33;
  }
  if ((v14 & 1) == 0)
  {
    v17 = 2415919360;
    goto LABEL_40;
  }
  if (a3 != 1 && v10 == 255 && v6 == 254)
  {
    v17 = 2483028224;
LABEL_40:
    *a1 = v17;
    return 2;
  }
  if (a3 != 1 && v10 == 239 && v6 == 187)
    v20 = v8;
  else
    v20 = 1;
  if ((v20 & 1) == 0 && v7 == 191)
  {
    *a1 = 4;
    return 3;
  }
LABEL_53:
  result = static PropertyListDecoder.scanForExplicitXMLEncoding(in:)((unint64_t)a2, a3, &v21);
  if (!v3)
  {
    result = 0;
    *a1 = v21;
  }
  return result;
}

int64_t closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, __n128)@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(id)@<X7>, char *a7@<X8>, uint64_t a8, uint64_t a9, void (*a10)(_QWORD))
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  int64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(id);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  id v33;
  uint64_t v34;
  void (*v35)(char *, char *, void (*)(_QWORD));
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(id);
  char *v41;
  uint64_t (*v42)(uint64_t, uint64_t, __n128);
  char *v43;
  void (*v44)(id);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v40 = a6;
  v44 = (void (*)(id))a4;
  v45 = a5;
  v42 = a3;
  v43 = a7;
  v13 = *((_QWORD *)a10 - 1);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v47 = (char *)&v40 - v20;
  if (a2 >= 41 && *(_DWORD *)a1 == 1768714338 && *(_DWORD *)(a1 + 3) == 812938089)
    return v42(a1, a2, v19);
  result = static PropertyListDecoder.detectEncoding(of:)(&v48, (unsigned __int8 *)a1, a2);
  if (!v10)
  {
    if (result > a2)
    {
      __break(1u);
    }
    else
    {
      v23 = v48;
      v24 = (char *)(a1 + result);
      v25 = a2 - result;
      v26 = v47;
      v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, void (*)(_QWORD)))(v13 + 56))(v47, 1, 1, a10);
      v42 = (uint64_t (*)(uint64_t, uint64_t, __n128))&v40;
      MEMORY[0x1E0C80A78](v27);
      *(&v40 - 4) = (void (*)(id))a10;
      *(&v40 - 3) = (void (*)(id))v26;
      v28 = (void (*)(id))v45;
      *(&v40 - 2) = v44;
      *(&v40 - 1) = v28;
      v45 = v25;
      specialized static PropertyListDecoder.withUTF8Representation<A>(of:sourceEncoding:_:)(v24, v25, v23, (uint64_t (*)(_QWORD *, uint64_t))partial apply for closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:), &v40);
      v44 = (void (*)(id))v23;
      v29 = v26;
      v30 = v45;
      v31 = v46;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v29, v46);
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(_QWORD)))(v13 + 48))(v17, 1, a10) == 1)
      {
        v32 = *(void (**)(char *, uint64_t))(v15 + 8);
        v32(v17, v31);
        v33 = specialized String.init<A>(bytes:encoding:)(v24, v30, (uint64_t)v44);
        if (v34)
        {
          v40(v33);
          swift_bridgeObjectRelease();
        }
        else
        {
          v37 = type metadata accessor for DecodingError();
          swift_allocError();
          v39 = v38;
          _CodingPathNode.path.getter(0x8000000000000000);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, *MEMORY[0x1E0DEC458], v37);
          swift_willThrow();
        }
        return ((uint64_t (*)(char *, uint64_t))v32)(v47, v31);
      }
      else
      {
        v35 = *(void (**)(char *, char *, void (*)(_QWORD)))(v13 + 32);
        v36 = v41;
        v35(v41, v17, a10);
        v35(v43, v36, a10);
        return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v47, v31);
      }
    }
  }
  return result;
}

_BYTE *specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  uint64_t v4;
  unint64_t v9;
  _BYTE *result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[6];
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (unint64_t)&a1[a2];
  v22 = a1;
  v23 = a2;
  v24 = a1;
  v25 = a1;
  v26 = &a1[a2];
  v27 = MEMORY[0x1E0DEE9D8];
  v28 = 0;
  result = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(a1);
  if (v9 < (unint64_t)(result + 1))
    return result;
  if (v9 < (unint64_t)result)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(v9 - (_QWORD)result) < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (*result == 60)
  {
    result = a4(v19, a1, a2);
    if (!v4)
    {
      v17 = v19[1];
      v18 = v19[0];
      v15 = v19[3];
      v16 = v19[2];
      v13 = v19[5];
      v14 = v19[4];
      v11 = v20;
      v12 = v21;
      result = (_BYTE *)outlined consume of LocalizedStringResource?(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 64), *(void **)(a3 + 72));
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v16;
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 64) = v14;
      *(_OWORD *)(a3 + 80) = v13;
      *(_QWORD *)(a3 + 96) = v11;
      *(_QWORD *)(a3 + 104) = v12;
    }
  }
  return result;
}

unsigned __int8 *closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 *v14;
  unsigned __int8 *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(unsigned __int8 *, uint64_t);

  v17 = a3;
  v18 = a5;
  v26 = a4;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v16 - v12;
  v14 = &a1[a2];
  v19 = a1;
  v20 = a2;
  v21 = a1;
  v22 = a1;
  v23 = &a1[a2];
  v24 = MEMORY[0x1E0DEE9D8];
  v25 = 0;
  result = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(a1);
  if (&a1[a2] < result + 1)
    return result;
  if (v14 < result)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v14 - result < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (*result == 60)
  {
    result = (unsigned __int8 *)v26(a1, a2);
    if (!v6)
    {
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(v13, 0, 1, a6);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v17, v13, v10);
    }
  }
  return result;
}

_BYTE *_s10Foundation19PropertyListDecoderC22withUTF8Representation2of14sourceEncoding_xAA10BufferViewVys5UInt8VG_SSAAE0J0VxAKKXEtKlFZyt_TBm5016_s10Foundation19bcd78C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xAA10kl4Vys5M82VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Tg5AA23LocalizedStringResourceVSgAKxs5Error_pRi_zRi0_zlyAPIsgyrzo_Tf1nnnc_n(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *(*a5)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];

  if (a3 == 4)
    return specialized closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, a4, a5);
  v8 = specialized String.init<A>(bytes:encoding:)((char *)a1, a2, a3);
  if (v9)
  {
    v13[0] = (uint64_t)v8;
    v13[1] = v9;
    _sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n0defgh74C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xlmnoc28VGKXExAOKXExSS05UTF16Q0VKXEtuv46AOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Z0AF23LocalizedStringResourceVSgAIxsAJ_pRi_zRi0_zlyAMIsgyrzo_Tf1nnc_n(v13, a4, a5);
    return (_BYTE *)swift_bridgeObjectRelease();
  }
  else
  {
    v10 = type metadata accessor for DecodingError();
    swift_allocError();
    v12 = v11;
    _CodingPathNode.path.getter(0x8000000000000000);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0DEC458], v10);
    return (_BYTE *)swift_willThrow();
  }
}

_QWORD *specialized static PropertyListDecoder.withUTF8Representation<A>(of:sourceEncoding:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD *, uint64_t)@<X3>, _QWORD *a5@<X8>)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];

  if (a3 == 4)
    return ((_QWORD *(*)(_QWORD *__return_ptr))a4)(a5);
  v7 = specialized String.init<A>(bytes:encoding:)(a1, a2, a3);
  if (v8)
  {
    v12[0] = (uint64_t)v7;
    v12[1] = v8;
    _sSS8withUTF8yxxSRys5UInt8VGKXEKlFyt_Tg5042_s10Foundation19PropertyListDecoderC22withb53Representation2of14sourceEncoding_xAA10BufferViewVys5C42VG_SSAAE0J0VxAKKXEtKlFZxSRyAJGKXEfU_yt_Tg510Foundation0mN0VyACGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(v12, a4);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v9 = type metadata accessor for DecodingError();
    swift_allocError();
    v11 = v10;
    _CodingPathNode.path.getter(0x8000000000000000);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, *MEMORY[0x1E0DEC458], v9);
    return (_QWORD *)swift_willThrow();
  }
}

uint64_t PropertyListDecoder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_181C56B50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_181C56B80(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 104);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for PropertyListDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PropertyListDecoder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A, B>(_:from:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A, B>(_:from:format:configuration:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(a1);
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

ValueMetadata *type metadata accessor for PropertyListDecoder._Options()
{
  return &type metadata for PropertyListDecoder._Options;
}

uint64_t outlined consume of LocalizedStringResource?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

int64_t partial apply for closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 24), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(void (**)(id))(v3 + 64), a3, *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80), *(void (**)(_QWORD))(v3 + 16));
}

unsigned __int8 *partial apply for closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, *(_QWORD *)(v2 + 24), *(uint64_t (**)(unsigned __int8 *, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16));
}

uint64_t Date.FormatStyle.DateFieldCollection.collection(date:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  char v15;

  v3 = *(_BYTE *)(v2 + 17);
  v4 = *(_BYTE *)(v2 + 18);
  v5 = *(_BYTE *)(v2 + 19);
  v6 = *(_BYTE *)(v2 + 35);
  v7 = *a1;
  v8 = *(_QWORD *)(v2 + 8);
  result = *(unsigned __int8 *)(v2 + 16);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(_BYTE *)(v2 + 32);
  v12 = *(_BYTE *)(v2 + 33) & 1;
  switch(v7)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v8 = 0;
      v4 = 0;
      goto LABEL_4;
    case 2:
      v8 = 0;
      v10 = 0;
      v12 = 0;
      v11 = 1;
      v4 = 2;
      goto LABEL_6;
    case 3:
      v8 = 0;
      v10 = 0;
      v12 = 0;
      v11 = 1;
      result = 3;
      v4 = 3;
      goto LABEL_9;
    case 4:
      v8 = 0;
      v10 = 0;
      v12 = 0;
      v11 = 1;
      result = 3;
      v4 = 3;
      v6 = 1;
      goto LABEL_9;
    default:
      v8 = 0;
LABEL_4:
      v10 = 0;
      v12 = 0;
      v11 = 1;
LABEL_6:
      result = 3;
LABEL_9:
      v13 = *(_WORD *)(v2 + 48);
      v14 = *(_QWORD *)(v2 + 40);
      v15 = *(_BYTE *)(v2 + 34);
      *(_BYTE *)a2 = *(_BYTE *)v2;
      *(_QWORD *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = result;
      *(_BYTE *)(a2 + 17) = v3;
      *(_BYTE *)(a2 + 18) = v4;
      *(_BYTE *)(a2 + 19) = v5;
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = v11;
      *(_BYTE *)(a2 + 33) = v12;
      *(_BYTE *)(a2 + 34) = v15;
      *(_BYTE *)(a2 + 35) = v6;
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(v2 + 36);
      *(_QWORD *)(a2 + 40) = v14;
      *(_WORD *)(a2 + 48) = v13;
      return result;
  }
}

__n128 Date.FormatStyle.locale(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int16 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[42];

  *(_OWORD *)&v25[26] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v20 = *v2;
  v21 = v5;
  v6 = v2[3];
  v22 = v2[2];
  v23 = v6;
  v7 = v2[5];
  v24 = v2[4];
  *(_OWORD *)v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  v8 = v25[41];
  v9 = v25[40];
  v10 = *((_QWORD *)&v6 + 1);
  v11 = v24;
  v16 = v21;
  v17 = v20;
  v12 = v22;
  v13 = v6;
  v18 = *(__n128 *)&v25[24];
  v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 120) = v9;
  *(_BYTE *)(a2 + 121) = v8;
  return result;
}

uint64_t specialized Date.formatted<A>(_:)(__int128 *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  char v11;
  __int128 v12;
  char v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1[5];
  v20 = a1[4];
  v21 = v1;
  v22[0] = a1[6];
  *(_OWORD *)((char *)v22 + 10) = *(__int128 *)((char *)a1 + 106);
  v2 = a1[1];
  v17 = *a1;
  v18 = v2;
  v3 = a1[3];
  *(_OWORD *)v19 = a1[2];
  *(_OWORD *)&v19[16] = v3;
  outlined retain of Date.FormatStyle((uint64_t)a1);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v17, (uint64_t)v10);
  v17 = v10[0];
  v18 = v10[1];
  v19[0] = v11;
  *(_OWORD *)&v19[8] = v12;
  v19[24] = v13;
  v20 = v14;
  LOBYTE(v21) = v15;
  *((_QWORD *)&v21 + 1) = v16;
  v4 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4)
    return 0;
  v5 = swift_retain_n();
  MEMORY[0x1E0C80A78](v5);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v9, (uint64_t *)&v17);
  v7 = *((_QWORD *)&v17 + 1);
  v6 = v17;
  swift_release_n();
  if (!v7)
    return 0;
  return v6;
}

BOOL static Date.FormatStyle.TimeStyle.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void Date.FormatStyle.DateFieldCollection.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;

  v2 = v1;
  if (*(_BYTE *)v2 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 8);
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v5, v4);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v6 = *(unsigned __int8 *)(v2 + 17);
  if ((_DWORD)v6 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  v7 = *(unsigned __int8 *)(v2 + 18);
  if ((_DWORD)v7 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  if (*(_BYTE *)(v2 + 19) != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v2 + 33) & 1) == 0)
      goto LABEL_15;
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(v2 + 33) & 1) != 0)
    goto LABEL_23;
LABEL_15:
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_BYTE *)(v2 + 32);
  Hasher._combine(_:)(1u);
  if ((v9 & 1) == 0)
  {
    v10 = 10;
    if (v8 < 10)
      v10 = v8;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    MEMORY[0x186DA4928](103, 0xE100000000000000, v11);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_25:
  if (*(_BYTE *)(v2 + 34) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v12 = *(unsigned __int8 *)(v2 + 35);
  if ((_DWORD)v12 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  v13 = *(unsigned __int8 *)(v2 + 36);
  if (v13 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v13);
  }
  v14 = *(unsigned __int8 *)(v2 + 37);
  if (v14 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v14);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v2 + 38) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v2 + 39) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  v15 = *(unsigned __int8 *)(v2 + 48);
  if (v15 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = *(_QWORD *)(v2 + 40);
    v17 = v15 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v16, v17);
  }
  v18 = *(unsigned __int8 *)(v2 + 49);
  if (v18 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v18);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t Date.FormatStyle.DateFieldCollection.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181C57718 + 4 * byte_1820FCE5E[a1]))(6386277, 0xE300000000000000);
}

uint64_t sub_181C57718()
{
  return 1918985593;
}

uint64_t sub_181C57728()
{
  return 0x72657472617571;
}

uint64_t sub_181C57740()
{
  return 0x68746E6F6DLL;
}

uint64_t sub_181C57754()
{
  return 1801807223;
}

uint64_t sub_181C57764()
{
  return 7954788;
}

uint64_t sub_181C57770()
{
  return 0x616559664F796164;
}

uint64_t sub_181C57790()
{
  return 0x7961646B656577;
}

uint64_t sub_181C577A8()
{
  return 0x6F69726550796164;
}

uint64_t sub_181C577C4()
{
  return 1920298856;
}

uint64_t sub_181C577D4()
{
  return 0x6574756E696DLL;
}

uint64_t sub_181C577E8()
{
  return 0x646E6F636573;
}

uint64_t sub_181C577FC()
{
  return 0x7246646E6F636573;
}

uint64_t sub_181C57820()
{
  return 0x656E6F5A656D6974;
}

uint64_t Date.FormatStyle.DateFieldCollection.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[14];
  char v11;
  char v12;
  _BYTE v13[10];
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  _BYTE v20[13];
  char v21;
  char v22;
  char v23;
  _BYTE v24[15];
  char v25;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateFieldCollection.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of LocalePreferences?(v3, (uint64_t)&v25, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v25, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  v11 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    outlined init with take of LocalePreferences?(v3 + 8, (uint64_t)v24, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
    outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
    v11 = 1;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 17, (uint64_t)&v23, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v23, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
    v11 = 2;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 18, (uint64_t)&v22, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v22, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
    v11 = 3;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 19, (uint64_t)&v21, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v21, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
    v11 = 4;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 24, (uint64_t)v20, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
    outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
    v11 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 34, (uint64_t)&v19, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v19, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
    v11 = 6;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 35, (uint64_t)&v18, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v18, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
    v11 = 7;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 36, (uint64_t)&v17, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v17, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
    v11 = 8;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 37, (uint64_t)&v16, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v16, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
    v11 = 9;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 38, (uint64_t)&v15, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v15, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
    v11 = 10;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 39, (uint64_t)&v14, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v14, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    v11 = 11;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 40, (uint64_t)v13, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
    v11 = 12;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(v3 + 49, (uint64_t)&v12, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
    outlined init with take of LocalePreferences?((uint64_t)&v12, (uint64_t)v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
    v11 = 13;
    lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  unsigned __int8 *v0;

  return Date.FormatStyle.DateFieldCollection.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.DateFieldCollection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.FormatStyle.DateFieldCollection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Date.FormatStyle.DateFieldCollection.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.DateFieldCollection@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  __int16 v8;

  specialized Date.FormatStyle.DateFieldCollection.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_WORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateFieldCollection(_QWORD *a1)
{
  return Date.FormatStyle.DateFieldCollection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.DateFieldCollection()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Date.FormatStyle.DateFieldCollection.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.DateFieldCollection()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Date.FormatStyle.DateFieldCollection.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.DateFieldCollection(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  __int16 v6;
  _OWORD v7[3];
  __int16 v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_WORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_WORD *)(a2 + 48);
  return specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)((unsigned __int8 *)v5, (unsigned __int8 *)v7);
}

uint64_t Date.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 72);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 72) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 88);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.timeZone.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 88) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.timeZone.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

__n128 Date.FormatStyle.calendar.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 104) = *a1;
  return result;
}

uint64_t (*Date.FormatStyle.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.FormatStyle.capitalizationContext.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 120);
}

uint64_t (*Date.FormatStyle.capitalizationContext.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.FormatStyle.attributed.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17[6];
  _OWORD v18[2];
  _OWORD v19[6];
  _OWORD v20[2];

  v3 = v1[5];
  v14 = v1[4];
  v15 = v3;
  v16[0] = v1[6];
  v4 = v16[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v1 + 106);
  v5 = v1[1];
  v11[0] = *v1;
  v11[1] = v5;
  v6 = v1[3];
  v12 = v1[2];
  v13 = v6;
  *(_OWORD *)((char *)v18 + 10) = *(_OWORD *)((char *)v16 + 10);
  v17[5] = v3;
  v18[0] = v4;
  v17[3] = v6;
  v17[4] = v14;
  v17[1] = v5;
  v17[2] = v12;
  v17[0] = v11[0];
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v17);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v19);
  v7 = v19[5];
  a1[4] = v19[4];
  a1[5] = v7;
  a1[6] = v20[0];
  *(_OWORD *)((char *)a1 + 106) = *(_OWORD *)((char *)v20 + 10);
  v8 = v19[1];
  *a1 = v19[0];
  a1[1] = v8;
  v9 = v19[3];
  a1[2] = v19[2];
  a1[3] = v9;
  return outlined retain of Date.FormatStyle((uint64_t)v11);
}

uint64_t Date.AttributedStyle.InnerStyle.hash(into:)(uint64_t a1)
{
  __int128 *v1;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD);
  Swift::UInt8 v16;
  __int16 v17;
  __int128 v18;
  Swift::UInt v19;
  int v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t (*v23)(_QWORD, _QWORD);
  Swift::UInt8 v24;
  void (*v25)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v26)(_QWORD *__return_ptr, _QWORD, _QWORD);
  Swift::UInt8 v27;
  Swift::UInt8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  Swift::UInt v60;
  Swift::UInt v61;
  Swift::UInt8 v62;
  Swift::UInt8 v63;
  Swift::UInt8 v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  Swift::UInt8 v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD, _QWORD);
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  _BYTE *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Swift::UInt v95;
  Swift::UInt v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  Swift::UInt8 v99;
  void *v100;
  _BYTE v101[144];
  _BYTE v102[8];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  char v119;
  _QWORD v120[18];
  _BYTE v121[144];
  _BYTE v122[144];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int16 v126;
  __int128 v127[8];
  _OWORD v128[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v127);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v127, v128);
  v3 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v128);
  v4 = (_QWORD *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v128);
  v5 = (uint64_t)v4;
  if (v3 != 1)
  {
    Hasher._combine(_:)(0);
    v17 = *(_WORD *)(v5 + 48);
    v18 = *(_OWORD *)(v5 + 16);
    v123 = *(_OWORD *)v5;
    v124 = v18;
    v125 = *(_OWORD *)(v5 + 32);
    v126 = v17;
    v19 = *(_QWORD *)(v5 + 56);
    v20 = *(unsigned __int8 *)(v5 + 64);
    outlined retain of Date.FormatStyle(v5);
    specialized Optional<A>.hash(into:)(a1);
    if (v20 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v19);
    }
    v21 = *(_QWORD *)(v5 + 80);
    ObjectType = swift_getObjectType();
    v23 = *(uint64_t (**)(_QWORD, _QWORD))(v21 + 48);
    swift_unknownObjectRetain();
    if ((v23(ObjectType, v21) & 1) != 0)
    {
      v24 = 1;
LABEL_12:
      Hasher._combine(_:)(v24);
LABEL_80:
      swift_unknownObjectRelease();
      v65 = *(_QWORD *)(v5 + 96);
      v66 = *(_QWORD *)(v5 + 112);
      v67 = *(unsigned __int8 *)(v5 + 120);
      v68 = *(_BYTE *)(v5 + 121);
      v69 = swift_getObjectType();
      v70 = *(void (**)(_QWORD, _QWORD, _QWORD))(v65 + 112);
      swift_unknownObjectRetain();
      v70(a1, v69, v65);
      swift_unknownObjectRelease();
      v71 = swift_getObjectType();
      v72 = *(void (**)(_QWORD, _QWORD, _QWORD))(v66 + 120);
      swift_unknownObjectRetain();
      v72(a1, v71, v66);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v21 + 64))(ObjectType, v21);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v25 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(v21 + 464);
    swift_unknownObjectRetain();
    v25(v120, ObjectType, v21);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v120, (uint64_t)v121, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v122, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v122) == 1)
    {
      v24 = 0;
      goto LABEL_12;
    }
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v102[0] == 2)
    {
      v27 = 0;
    }
    else
    {
      v27 = v102[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v27);
    v29 = v103;
    if (v103)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v29 + 16));
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v31 = v29 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v31 += 16;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
        if (!v104)
        {
LABEL_28:
          Hasher._combine(_:)(0);
          if (!v105)
            goto LABEL_29;
          goto LABEL_46;
        }
LABEL_45:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v105)
        {
LABEL_29:
          Hasher._combine(_:)(0);
          v32 = v106;
          if (!v106)
            goto LABEL_30;
          goto LABEL_47;
        }
LABEL_46:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v32 = v106;
        if (!v106)
        {
LABEL_30:
          Hasher._combine(_:)(0);
          v33 = v107;
          if (!v107)
          {
LABEL_31:
            Hasher._combine(_:)(0);
            goto LABEL_49;
          }
LABEL_48:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v33);
          swift_bridgeObjectRelease();
LABEL_49:
          v40 = v108;
          v41 = v109;
          v43 = v110;
          v42 = v111;
          v44 = v112;
          if (v108)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v45 = v41;
            v46 = v43;
            v47 = v42;
            v48 = v44;
            v49 = v40;
            _CFObject.hash(into:)();
            v100 = v40;
            if (v41)
              goto LABEL_51;
          }
          else
          {
            Hasher._combine(_:)(0);
            v54 = v44;
            v55 = v41;
            v56 = v43;
            v57 = v42;
            v100 = 0;
            if (v41)
            {
LABEL_51:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v50 = v41;
              _CFObject.hash(into:)();

              if (v43)
                goto LABEL_52;
              goto LABEL_57;
            }
          }
          Hasher._combine(_:)(0);
          if (v43)
          {
LABEL_52:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v51 = v43;
            _CFObject.hash(into:)();

            if (v42)
              goto LABEL_53;
            goto LABEL_58;
          }
LABEL_57:
          Hasher._combine(_:)(0);
          if (v42)
          {
LABEL_53:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v52 = v42;
            _CFObject.hash(into:)();

            if (v44)
            {
LABEL_54:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v53 = v44;
              _CFObject.hash(into:)();

              goto LABEL_60;
            }
LABEL_59:
            Hasher._combine(_:)(0);
            v53 = 0;
LABEL_60:

            v58 = v113;
            if (v58)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v58);
              swift_bridgeObjectRelease();
              v59 = v114;
              if (v114)
                goto LABEL_62;
            }
            else
            {
              Hasher._combine(_:)(0);
              v59 = v114;
              if (v114)
              {
LABEL_62:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v59);
                swift_bridgeObjectRelease();
                if (v115)
                {
LABEL_63:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_67:
                  if (v116 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v60 = v116 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v60);
                  }
                  if (v117 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v61 = v117 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v61);
                  }
                  if (v118 == 2)
                  {
                    v62 = 0;
                  }
                  else
                  {
                    v62 = v118 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v62);
                  if (v119 == 2)
                  {
                    v63 = 0;
                  }
                  else
                  {
                    v64 = v119 & 1;
                    Hasher._combine(_:)(1u);
                    v63 = v64;
                  }
                  Hasher._combine(_:)(v63);
                  outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_80;
                }
LABEL_66:
                Hasher._combine(_:)(0);
                goto LABEL_67;
              }
            }
            Hasher._combine(_:)(0);
            if (v115)
              goto LABEL_63;
            goto LABEL_66;
          }
LABEL_58:
          Hasher._combine(_:)(0);
          if (v44)
            goto LABEL_54;
          goto LABEL_59;
        }
LABEL_47:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v32);
        swift_bridgeObjectRelease();
        v33 = v107;
        if (!v107)
          goto LABEL_31;
        goto LABEL_48;
      }
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
      v34 = v101;
    }
    else
    {
      Hasher._combine(_:)(0);
      v34 = v102;
    }
    outlined retain of LocalePreferences(v34);
    if (!v104)
      goto LABEL_28;
    goto LABEL_45;
  }
  v6 = v4[1];
  v7 = v4[3];
  v8 = v4[4];
  v9 = v4[5];
  Hasher._combine(_:)(1uLL);
  v10 = swift_getObjectType();
  v11 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 112);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  swift_unknownObjectRetain();
  v11(a1, v10, v6);
  swift_unknownObjectRelease();
  v12 = swift_getObjectType();
  v13 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 120);
  swift_unknownObjectRetain();
  v13(a1, v12, v7);
  swift_unknownObjectRelease();
  if (v8)
  {
    Hasher._combine(_:)(1u);
    v14 = swift_getObjectType();
    v15 = *(uint64_t (**)(_QWORD, _QWORD))(v9 + 48);
    swift_unknownObjectRetain_n();
    if ((v15(v14, v9) & 1) != 0)
    {
      v16 = 1;
LABEL_16:
      Hasher._combine(_:)(v16);
      swift_unknownObjectRelease_n();
      goto LABEL_17;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 64))(v14, v9);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v26 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(v9 + 464);
    swift_unknownObjectRetain();
    v26(v120, v14, v9);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v120, (uint64_t)v121, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v122, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v122) == 1)
    {
      v16 = 0;
      goto LABEL_16;
    }
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v102[0] == 2)
    {
      v28 = 0;
    }
    else
    {
      v28 = v102[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v28);
    v35 = v103;
    if (v103)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v35 + 16));
      v36 = *(_QWORD *)(v35 + 16);
      if (v36)
      {
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v37 = v35 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v37 += 16;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        if (!v104)
        {
LABEL_39:
          Hasher._combine(_:)(0);
          if (!v105)
            goto LABEL_40;
          goto LABEL_86;
        }
LABEL_85:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v105)
        {
LABEL_40:
          Hasher._combine(_:)(0);
          v38 = v106;
          if (!v106)
            goto LABEL_41;
          goto LABEL_87;
        }
LABEL_86:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v38 = v106;
        if (!v106)
        {
LABEL_41:
          Hasher._combine(_:)(0);
          v39 = v107;
          if (!v107)
          {
LABEL_42:
            Hasher._combine(_:)(0);
            goto LABEL_89;
          }
LABEL_88:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v39);
          swift_bridgeObjectRelease();
LABEL_89:
          v75 = v108;
          v76 = v109;
          v78 = v110;
          v77 = v111;
          v79 = v112;
          if (v108)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v80 = v76;
            v81 = v78;
            v82 = v77;
            v83 = v79;
            v84 = v75;
            _CFObject.hash(into:)();
            if (v76)
              goto LABEL_91;
          }
          else
          {
            Hasher._combine(_:)(0);
            v89 = v79;
            v90 = v76;
            v91 = v78;
            v92 = v77;
            if (v76)
            {
LABEL_91:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v85 = v76;
              _CFObject.hash(into:)();

              if (v78)
                goto LABEL_92;
              goto LABEL_97;
            }
          }
          Hasher._combine(_:)(0);
          if (v78)
          {
LABEL_92:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v86 = v78;
            _CFObject.hash(into:)();

            if (v77)
              goto LABEL_93;
            goto LABEL_98;
          }
LABEL_97:
          Hasher._combine(_:)(0);
          if (v77)
          {
LABEL_93:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v87 = v77;
            _CFObject.hash(into:)();

            if (v79)
            {
LABEL_94:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v88 = v79;
              _CFObject.hash(into:)();

              goto LABEL_100;
            }
LABEL_99:
            Hasher._combine(_:)(0);
            v88 = 0;
LABEL_100:

            v93 = v113;
            if (v93)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v93);
              swift_bridgeObjectRelease();
            }
            else
            {
              Hasher._combine(_:)(0);
            }
            v94 = v114;
            if (v114)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v94);
              swift_bridgeObjectRelease();
              if (v115)
              {
LABEL_105:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_108:
                if (v116 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v95 = v116 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v95);
                }
                if (v117 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v96 = v117 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v96);
                }
                if (v118 == 2)
                {
                  v97 = 0;
                }
                else
                {
                  v97 = v118 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v97);
                if (v119 == 2)
                {
                  v98 = 0;
                }
                else
                {
                  v99 = v119 & 1;
                  Hasher._combine(_:)(1u);
                  v98 = v99;
                }
                Hasher._combine(_:)(v98);
                outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease_n();
                goto LABEL_17;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              if (v115)
                goto LABEL_105;
            }
            Hasher._combine(_:)(0);
            goto LABEL_108;
          }
LABEL_98:
          Hasher._combine(_:)(0);
          if (v79)
            goto LABEL_94;
          goto LABEL_99;
        }
LABEL_87:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v38);
        swift_bridgeObjectRelease();
        v39 = v107;
        if (!v107)
          goto LABEL_42;
        goto LABEL_88;
      }
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
      v74 = v101;
    }
    else
    {
      Hasher._combine(_:)(0);
      v74 = v102;
    }
    outlined retain of LocalePreferences(v74);
    if (!v104)
      goto LABEL_39;
    goto LABEL_85;
  }
  Hasher._combine(_:)(0);
LABEL_17:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

uint64_t Date.AttributedStyle.InnerStyle.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[8];
  __int128 v41[8];
  _OWORD v42[8];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys>);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys>);
  *(_QWORD *)&v29 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.InnerStyle.CodingKeys>);
  v32 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v41);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v42);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v42) == 1)
  {
    v13 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v42);
    v29 = *(_OWORD *)(v13 + 32);
    v14 = *(_QWORD *)(v13 + 48);
    v28 = *(_QWORD *)(v13 + 56);
    LOBYTE(v33) = 1;
    v15 = *(_OWORD *)v13;
    v26 = *(_OWORD *)(v13 + 16);
    v27 = v15;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v40);
    _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v40);
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v33 = v27;
    v34 = v26;
    v35 = v29;
    *(_QWORD *)&v36 = v14;
    *((_QWORD *)&v36 + 1) = v28;
    lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
    v16 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v16);
  }
  else
  {
    v17 = (__int128 *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v42);
    LOBYTE(v33) = 0;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v41, v40);
    v18 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v40);
    outlined retain of Date.FormatStyle(v18);
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v19 = *v17;
    v20 = v17[1];
    v21 = v17[3];
    v35 = v17[2];
    v36 = v21;
    v33 = v19;
    v34 = v20;
    v22 = v17[4];
    v23 = v17[5];
    v24 = v17[6];
    *(_OWORD *)((char *)v39 + 10) = *(__int128 *)((char *)v17 + 106);
    v38 = v23;
    v39[0] = v24;
    v37 = v22;
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

uint64_t Date.AttributedStyle.InnerStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50[8];
  uint64_t v51;

  v29 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys>);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x1E0C80A78](v3);
  v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys>);
  v5 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.InnerStyle.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  v34 = v11;
  v13 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    v28 = v5;
    v14 = v31;
    v15 = v32;
    v16 = v33;
    v51 = v9;
    v17 = KeyedDecodingContainer.allKeys.getter();
    v18 = v8;
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v19 = v34;
      if ((*(_BYTE *)(v17 + 32) & 1) != 0)
      {
        LOBYTE(v43) = 1;
        lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v30 = v18;
        lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v25 = v51;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v16);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v30);
        v43 = v36;
        v44 = v37;
        v45 = v38;
        v46 = v39;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v43);
        v27 = &v43;
      }
      else
      {
        LOBYTE(v43) = 0;
        lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
        v24 = v30;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v24);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v18);
        v40 = v47;
        v41 = v48;
        v42[0] = v49[0];
        *(_OWORD *)((char *)v42 + 10) = *(_OWORD *)((char *)v49 + 10);
        v36 = v43;
        v37 = v44;
        v38 = v45;
        v39 = v46;
        _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v36);
        v27 = &v36;
      }
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v27, v50);
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v50, v29);
    }
    else
    {
      v20 = type metadata accessor for DecodingError();
      swift_allocError();
      v22 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v22 = &type metadata for Date.AttributedStyle.InnerStyle;
      v23 = v34;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC450], v20);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v23, v8);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x745374616D726F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AttributedStyle.InnerStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.AttributedStyle.InnerStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AttributedStyle.InnerStyle@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.AttributedStyle.InnerStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AttributedStyle.InnerStyle(_QWORD *a1)
{
  return Date.AttributedStyle.InnerStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.AttributedStyle.InnerStyle()
{
  __int128 *v0;
  _BYTE v2[72];
  _OWORD v3[8];
  __int128 v4[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v3);
  Hasher.init(_seed:)();
  Date.AttributedStyle.InnerStyle.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AttributedStyle.InnerStyle()
{
  __int128 *v0;
  _BYTE v2[72];
  _OWORD v3[8];
  __int128 v4[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v0, v4);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v4, v3);
  Hasher.init(_seed:)();
  Date.AttributedStyle.InnerStyle.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t Date.AttributedStyle.format(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  Foundation::Date v12;
  uint64_t countAndFlagsBits;
  _QWORD *rawValue;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t *v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t result;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *object;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[80];
  __int128 v62;
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65[2];
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[24];
  uint64_t v71;
  __int128 v72;
  char v73;
  uint64_t v74;
  __int128 v75[8];
  __int128 v76[3];
  char v77[48];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[3];
  __int128 v85[8];
  _OWORD v86[9];
  Swift::tuple_String_OpaquePointer_optional v87;

  v4 = *a1;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v2, v85);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v85, v86);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v86) == 1)
  {
    v5 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v86);
    v6 = *(_QWORD *)(v5 + 48);
    v7 = *(_QWORD *)(v5 + 56);
    v59 = *(_OWORD *)(v5 + 16);
    v68 = *(_OWORD *)v5;
    v69 = v59;
    *(_OWORD *)v70 = *(_OWORD *)(v5 + 32);
    *(_QWORD *)&v70[16] = v6;
    v71 = v7;
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v85, v75);
    _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v75);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    ICUDateFormatter.DateFormatInfo.init(_:)(&v68, (uint64_t)v61);
    v68 = *(_OWORD *)v61;
    v69 = *(_OWORD *)&v61[16];
    v70[0] = v61[32];
    *(_OWORD *)&v70[8] = *(_OWORD *)&v61[40];
    LOBYTE(v71) = v61[56];
    v72 = *(_OWORD *)&v61[64];
    v73 = v62;
    v74 = *((_QWORD *)&v62 + 1);
    v8 = &v68;
  }
  else
  {
    v9 = (_OWORD *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v86);
    *(_OWORD *)&v61[64] = v9[4];
    v62 = v9[5];
    v63[0] = v9[6];
    *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)((char *)v9 + 106);
    *(_OWORD *)v61 = *v9;
    *(_OWORD *)&v61[16] = v9[1];
    *(_OWORD *)&v61[32] = v9[2];
    *(_OWORD *)&v61[48] = v9[3];
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v85, v75);
    v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v75);
    outlined retain of Date.FormatStyle(v10);
    outlined retain of Date.FormatStyle((uint64_t)v9);
    ICUDateFormatter.DateFormatInfo.init(_:)(v61, (uint64_t)&v68);
    *(_OWORD *)v61 = v68;
    *(_OWORD *)&v61[16] = v69;
    v61[32] = v70[0];
    *(_OWORD *)&v61[40] = *(_OWORD *)&v70[8];
    v61[56] = v71;
    *(_OWORD *)&v61[64] = v72;
    LOBYTE(v62) = v73;
    *((_QWORD *)&v62 + 1) = v74;
    v8 = (__int128 *)v61;
  }
  v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
  if (!v11)
    goto LABEL_23;
  *(_QWORD *)&v75[0] = v4;
  swift_retain();
  v87 = ICUDateFormatter.attributedFormat(_:)(v12);
  object = v87.value._0._object;
  if (!v87.value._0._object)
  {
    swift_release();
LABEL_23:
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v75, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v61);
    result = swift_release();
    v16 = *(_QWORD *)v61;
    goto LABEL_24;
  }
  countAndFlagsBits = v87.value._0._countAndFlagsBits;
  rawValue = v87.value._1._rawValue;
  v50 = a2;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  v15 = MEMORY[0x1E0DEE9E0];
  AttributedString.init(_:attributes:)(v76, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v75);
  v16 = *(_QWORD *)&v75[0];
  v17 = rawValue[2];
  if (!v17)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release_n();
    a2 = v50;
LABEL_24:
    *a2 = v16;
    return result;
  }
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  v18 = 0;
  v19 = (char *)(rawValue + 6);
  v53 = countAndFlagsBits;
  while (1)
  {
    v60 = v18;
    v58 = v17;
    v20 = *((unsigned int *)v19 - 4);
    *(_QWORD *)v61 = countAndFlagsBits;
    *(_QWORD *)&v61[8] = object;
    swift_bridgeObjectRetain();
    v21 = String.Index.init<A>(utf16Offset:in:)();
    *(_QWORD *)v61 = countAndFlagsBits;
    *(_QWORD *)&v61[8] = object;
    swift_bridgeObjectRetain();
    v22 = String.Index.init<A>(utf16Offset:in:)();
    if (v22 >> 14 < v21 >> 14)
      break;
    v23 = v22;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v21, v23, (_OWORD *)v16, (unint64_t *)v61);
    v24 = *(_QWORD *)&v61[24];
    if (*(_QWORD *)&v61[24] == 2)
      goto LABEL_27;
    v56 = *(_QWORD *)&v61[8];
    v57 = *(_QWORD *)v61;
    v55 = *(_QWORD *)&v61[16];
    v25 = *(_QWORD *)&v61[40];
    v26 = *(_QWORD *)&v61[32];
    v28 = *(_QWORD *)&v61[56];
    v27 = *(_QWORD *)&v61[48];
    v66 = v15;
    v29 = MEMORY[0x1E0DEE9E8];
    v67 = MEMORY[0x1E0DEE9E8];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v20, v61);
    if (v61[0] == 17)
    {
      v30 = v29;
    }
    else
    {
      specialized AttributeContainer.subscript.setter(v61[0]);
      v15 = v66;
      v30 = v67;
    }
    v65[0] = v15;
    v65[1] = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v31 = *(_OWORD *)(v16 + 32);
      v84[0] = *(_OWORD *)(v16 + 16);
      v84[1] = v31;
      v84[2] = *(_OWORD *)(v16 + 48);
      v32 = v25;
      v33 = *(_QWORD *)(v16 + 64);
      v34 = *(_QWORD *)(v16 + 72);
      v51 = v28;
      v52 = v26;
      v35 = v27;
      v36 = *(_QWORD *)(v16 + 80);
      v37 = *(_QWORD *)(v16 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v84);
      swift_unknownObjectRetain();
      v38 = v34;
      v25 = v32;
      v39 = v36;
      v27 = v35;
      v40 = v37;
      v28 = v51;
      v26 = v52;
      v41 = AttributedString.Guts.init(string:runs:)(v84, v33, v38, v39, v40);
      swift_release();
      v16 = v41;
    }
    v18 = v60;
    v42 = *(_OWORD *)(v16 + 32);
    v81 = *(_OWORD *)(v16 + 16);
    v82 = v42;
    v83 = *(_OWORD *)(v16 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    *(_QWORD *)&v68 = v57;
    *((_QWORD *)&v68 + 1) = v56;
    *(_QWORD *)&v69 = v55;
    *((_QWORD *)&v69 + 1) = v24;
    *(_QWORD *)v70 = v26;
    *(_QWORD *)&v70[8] = v25;
    *(_QWORD *)&v70[16] = v27;
    v71 = v28;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v77);
    outlined release of Locale((uint64_t)v75);
    *(_OWORD *)&v61[8] = v75[3];
    *(_OWORD *)&v61[24] = v75[4];
    *(_OWORD *)&v61[40] = v75[5];
    *(_OWORD *)&v61[56] = v75[6];
    *(_QWORD *)v61 = v16;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v43 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v44 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v44);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v43, &v64);
    os_unfair_lock_unlock(v44);
    swift_release();
    v45 = v64;
    *(_QWORD *)&v61[72] = v64;
    BigString.init()();
    v64 = 0;
    MEMORY[0x186DA9E90](&v64, 8);
    v46 = v64;
    type metadata accessor for AttributedString.Guts();
    v47 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
      goto LABEL_26;
    v48 = v79;
    *(_OWORD *)(v47 + 16) = v78;
    *(_OWORD *)(v47 + 32) = v48;
    *(_OWORD *)(v47 + 48) = v80;
    *(_QWORD *)(v47 + 64) = 0;
    *(_QWORD *)(v47 + 72) = 0;
    *(_QWORD *)(v47 + 80) = 0;
    *(_QWORD *)(v47 + 88) = v46;
    swift_release();
    LOBYTE(v64) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v65, (char *)&v64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)&v61[72] != v45)
      goto LABEL_28;
    v19 += 24;
    v16 = *(_QWORD *)v61;
    swift_release();
    v17 = v58 - 1;
    countAndFlagsBits = v53;
    v15 = MEMORY[0x1E0DEE9E0];
    if (v58 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *Date.AttributedStyle.locale(_:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  __int128 v39[8];
  __int128 v40[8];
  _OWORD v41[8];

  v3 = v2;
  v5 = *a1;
  v6 = a1[1];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v40);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v40, v41);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41) == 1)
  {
    v7 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    v8 = *(_QWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v7 + 56);
    v22 = *(_OWORD *)(v7 + 16);
    v24 = *(_OWORD *)v7;
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v26 = v24;
    v27 = v22;
    v28 = v5;
    v29 = v6;
    v30 = v8;
    v31 = v9;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v26);
  }
  else
  {
    v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    v25 = *(_BYTE *)(v10 + 121);
    v11 = a2;
    v12 = *(_BYTE *)(v10 + 120);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = *(_BYTE *)(v10 + 64);
    v19 = *(_OWORD *)(v10 + 16);
    v20 = *(_OWORD *)v10;
    v15 = *(_QWORD *)(v10 + 32);
    v16 = *(_QWORD *)(v10 + 40);
    v17 = *(_WORD *)(v10 + 48);
    v21 = *(_OWORD *)(v10 + 104);
    v23 = *(_OWORD *)(v10 + 88);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v26 = v20;
    v27 = v19;
    v28 = v15;
    v29 = v16;
    LOWORD(v30) = v17;
    v31 = v13;
    v32 = v14;
    v33 = v5;
    v34 = v6;
    v35 = v23;
    v36 = v21;
    v37 = v12;
    a2 = v11;
    v38 = v25;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v26);
  }
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v26, v39);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v39, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AttributedStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x79745372656E6E69 && a2 == 0xEA0000000000656CLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AttributedStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AttributedStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.AttributedStyle.hash(into:)(uint64_t a1)
{
  __int128 *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t (*v9)(_QWORD, _QWORD);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int128 v14;
  Swift::UInt v15;
  char v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t (*v19)(_QWORD, _QWORD);
  Swift::UInt8 v20;
  void (*v21)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v22)(_QWORD *__return_ptr, _QWORD, _QWORD);
  Swift::UInt8 v23;
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  Swift::UInt v60;
  Swift::UInt v61;
  Swift::UInt8 v62;
  Swift::UInt8 v63;
  Swift::UInt8 v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  Swift::UInt8 v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD, _QWORD);
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  _BYTE *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Swift::UInt v95;
  Swift::UInt v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  Swift::UInt8 v99;
  uint64_t v100;
  void *v101;
  void (*v102)(_QWORD, _QWORD, _QWORD);
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  _BYTE v108[144];
  _BYTE v109[8];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;
  char v126;
  _QWORD v127[18];
  _BYTE v128[144];
  _BYTE v129[144];
  _OWORD v130[11];
  __int16 v131;
  __int128 v132[8];
  _OWORD v133[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v132);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v132, v133);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v133) != 1)
  {
    v11 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v133);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v132, v130);
    v12 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v130);
    Hasher._combine(_:)(0);
    v13 = *(_WORD *)(v11 + 48);
    v14 = *(_OWORD *)(v11 + 16);
    v130[8] = *(_OWORD *)v11;
    v130[9] = v14;
    v130[10] = *(_OWORD *)(v11 + 32);
    v131 = v13;
    v15 = *(_QWORD *)(v11 + 56);
    v16 = *(_BYTE *)(v11 + 64);
    outlined retain of Date.FormatStyle(v12);
    outlined retain of Date.FormatStyle(v11);
    specialized Optional<A>.hash(into:)(a1);
    if ((v16 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v15);
    }
    v17 = *(_QWORD *)(v11 + 80);
    ObjectType = swift_getObjectType();
    v19 = *(uint64_t (**)(_QWORD, _QWORD))(v17 + 48);
    swift_unknownObjectRetain();
    if ((v19(ObjectType, v17) & 1) != 0)
    {
      v20 = 1;
LABEL_12:
      Hasher._combine(_:)(v20);
LABEL_80:
      swift_unknownObjectRelease();
      v65 = *(_QWORD *)(v11 + 96);
      v66 = *(_QWORD *)(v11 + 112);
      v67 = *(unsigned __int8 *)(v11 + 120);
      v68 = *(_BYTE *)(v11 + 121);
      v69 = swift_getObjectType();
      v70 = *(void (**)(_QWORD, _QWORD, _QWORD))(v65 + 112);
      swift_unknownObjectRetain();
      v70(a1, v69, v65);
      swift_unknownObjectRelease();
      v71 = swift_getObjectType();
      v72 = *(void (**)(_QWORD, _QWORD, _QWORD))(v66 + 120);
      swift_unknownObjectRetain();
      v72(a1, v71, v66);
      swift_unknownObjectRelease();
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      goto LABEL_81;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v17 + 64))(ObjectType, v17);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(v17 + 464);
    swift_unknownObjectRetain();
    v21(v127, ObjectType, v17);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v127, (uint64_t)v128, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v129, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v129) == 1)
    {
      v20 = 0;
      goto LABEL_12;
    }
    outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v109, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v109[0] == 2)
    {
      v23 = 0;
    }
    else
    {
      v23 = v109[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v23);
    v25 = v110;
    if (v110)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v25 + 16));
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        outlined retain of LocalePreferences?((uint64_t)v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v27 = v25 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v27 += 16;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        if (!v111)
        {
LABEL_28:
          Hasher._combine(_:)(0);
          if (!v112)
            goto LABEL_29;
          goto LABEL_46;
        }
LABEL_45:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v112)
        {
LABEL_29:
          Hasher._combine(_:)(0);
          v28 = v113;
          if (!v113)
            goto LABEL_30;
          goto LABEL_47;
        }
LABEL_46:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v28 = v113;
        if (!v113)
        {
LABEL_30:
          Hasher._combine(_:)(0);
          v29 = v114;
          if (!v114)
          {
LABEL_31:
            v30 = a1;
            Hasher._combine(_:)(0);
            goto LABEL_49;
          }
LABEL_48:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          v30 = a1;
          specialized Dictionary<>.hash(into:)(a1, v29);
          swift_bridgeObjectRelease();
LABEL_49:
          v38 = v115;
          v37 = v116;
          v40 = v117;
          v39 = v118;
          v41 = v119;
          v105 = v118;
          v107 = v116;
          v101 = v119;
          if (v115)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v42 = v107;
            v43 = v40;
            v44 = v40;
            v45 = v39;
            v46 = v41;
            v47 = v38;
            v37 = v107;
            _CFObject.hash(into:)();
            v103 = v38;
            if (v107)
              goto LABEL_51;
          }
          else
          {
            Hasher._combine(_:)(0);
            v54 = v41;
            v55 = v37;
            v43 = v40;
            v56 = v40;
            v57 = v39;
            v103 = 0;
            if (v37)
            {
LABEL_51:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v48 = v37;
              _CFObject.hash(into:)();

              if (v43)
                goto LABEL_52;
              goto LABEL_57;
            }
          }
          Hasher._combine(_:)(0);
          if (v43)
          {
LABEL_52:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v49 = v43;
            _CFObject.hash(into:)();

            v50 = v105;
            if (v105)
              goto LABEL_53;
            goto LABEL_58;
          }
LABEL_57:
          Hasher._combine(_:)(0);
          v50 = v105;
          if (v105)
          {
LABEL_53:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v51 = v50;
            _CFObject.hash(into:)();

            v52 = v101;
            if (v101)
            {
LABEL_54:
              a1 = v30;
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v53 = v52;
              _CFObject.hash(into:)();

              goto LABEL_60;
            }
LABEL_59:
            a1 = v30;
            Hasher._combine(_:)(0);
            v53 = 0;
LABEL_60:

            v58 = v120;
            if (v58)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v58);
              swift_bridgeObjectRelease();
              v59 = v121;
              if (v121)
                goto LABEL_62;
            }
            else
            {
              Hasher._combine(_:)(0);
              v59 = v121;
              if (v121)
              {
LABEL_62:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v59);
                swift_bridgeObjectRelease();
                if (v122)
                {
LABEL_63:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_67:
                  if (v123 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v60 = v123 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v60);
                  }
                  if (v124 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v61 = v124 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v61);
                  }
                  if (v125 == 2)
                  {
                    v62 = 0;
                  }
                  else
                  {
                    v62 = v125 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v62);
                  if (v126 == 2)
                  {
                    v63 = 0;
                  }
                  else
                  {
                    v64 = v126 & 1;
                    Hasher._combine(_:)(1u);
                    v63 = v64;
                  }
                  Hasher._combine(_:)(v63);
                  outlined retain of LocalePreferences?((uint64_t)v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_80;
                }
LABEL_66:
                Hasher._combine(_:)(0);
                goto LABEL_67;
              }
            }
            Hasher._combine(_:)(0);
            if (v122)
              goto LABEL_63;
            goto LABEL_66;
          }
LABEL_58:
          Hasher._combine(_:)(0);
          v52 = v101;
          if (v101)
            goto LABEL_54;
          goto LABEL_59;
        }
LABEL_47:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v28);
        swift_bridgeObjectRelease();
        v29 = v114;
        if (!v114)
          goto LABEL_31;
        goto LABEL_48;
      }
      outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v108, &demangling cache variable for type metadata for LocalePreferences?);
      v31 = v108;
    }
    else
    {
      Hasher._combine(_:)(0);
      v31 = v109;
    }
    outlined retain of LocalePreferences(v31);
    if (!v111)
      goto LABEL_28;
    goto LABEL_45;
  }
  v3 = (_QWORD *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v133);
  v4 = v3[1];
  v104 = v3[4];
  v106 = v3[3];
  v100 = v3[5];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v132, v130);
  _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v130);
  Hasher._combine(_:)(1uLL);
  v5 = swift_getObjectType();
  v102 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  swift_unknownObjectRetain();
  v102(a1, v5, v4);
  swift_unknownObjectRelease();
  v6 = swift_getObjectType();
  v7 = *(void (**)(_QWORD, _QWORD, _QWORD))(v106 + 120);
  swift_unknownObjectRetain();
  v7(a1, v6, v106);
  swift_unknownObjectRelease();
  if (v104)
  {
    Hasher._combine(_:)(1u);
    v8 = swift_getObjectType();
    v9 = *(uint64_t (**)(_QWORD, _QWORD))(v100 + 48);
    swift_unknownObjectRetain_n();
    if ((v9(v8, v100) & 1) != 0)
    {
      v10 = 1;
LABEL_16:
      Hasher._combine(_:)(v10);
      swift_unknownObjectRelease_n();
      goto LABEL_17;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v100 + 64))(v8, v100);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v22 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(v100 + 464);
    swift_unknownObjectRetain();
    v22(v127, v8, v100);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v127, (uint64_t)v128, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v129, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v129) == 1)
    {
      v10 = 0;
      goto LABEL_16;
    }
    outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v109, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v109[0] == 2)
    {
      v24 = 0;
    }
    else
    {
      v24 = v109[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v24);
    v32 = v110;
    if (v110)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v32 + 16));
      v33 = *(_QWORD *)(v32 + 16);
      if (v33)
      {
        outlined retain of LocalePreferences?((uint64_t)v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v34 = v32 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v34 += 16;
          --v33;
        }
        while (v33);
        swift_bridgeObjectRelease();
        if (!v111)
        {
LABEL_39:
          Hasher._combine(_:)(0);
          if (!v112)
            goto LABEL_40;
          goto LABEL_86;
        }
LABEL_85:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v112)
        {
LABEL_40:
          Hasher._combine(_:)(0);
          v35 = v113;
          if (!v113)
            goto LABEL_41;
          goto LABEL_87;
        }
LABEL_86:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v35 = v113;
        if (!v113)
        {
LABEL_41:
          Hasher._combine(_:)(0);
          v36 = v114;
          if (!v114)
          {
LABEL_42:
            Hasher._combine(_:)(0);
            goto LABEL_89;
          }
LABEL_88:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v36);
          swift_bridgeObjectRelease();
LABEL_89:
          v76 = v115;
          v75 = v116;
          v78 = v117;
          v77 = v118;
          v79 = v119;
          if (v115)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v80 = v75;
            v81 = v78;
            v82 = v77;
            v83 = v79;
            v84 = v76;
            _CFObject.hash(into:)();
            if (v75)
              goto LABEL_91;
          }
          else
          {
            Hasher._combine(_:)(0);
            v89 = v79;
            v90 = v75;
            v91 = v78;
            v92 = v77;
            if (v75)
            {
LABEL_91:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v85 = v75;
              _CFObject.hash(into:)();

              if (v78)
                goto LABEL_92;
              goto LABEL_97;
            }
          }
          Hasher._combine(_:)(0);
          if (v78)
          {
LABEL_92:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v86 = v78;
            _CFObject.hash(into:)();

            if (v77)
              goto LABEL_93;
            goto LABEL_98;
          }
LABEL_97:
          Hasher._combine(_:)(0);
          if (v77)
          {
LABEL_93:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v87 = v77;
            _CFObject.hash(into:)();

            if (v79)
            {
LABEL_94:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v88 = v79;
              _CFObject.hash(into:)();

              goto LABEL_100;
            }
LABEL_99:
            Hasher._combine(_:)(0);
            v88 = 0;
LABEL_100:

            v93 = v120;
            if (v93)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v93);
              swift_bridgeObjectRelease();
            }
            else
            {
              Hasher._combine(_:)(0);
            }
            v94 = v121;
            if (v121)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v94);
              swift_bridgeObjectRelease();
              if (v122)
              {
LABEL_105:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_108:
                if (v123 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v95 = v123 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v95);
                }
                if (v124 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v96 = v124 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v96);
                }
                if (v125 == 2)
                {
                  v97 = 0;
                }
                else
                {
                  v97 = v125 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v97);
                if (v126 == 2)
                {
                  v98 = 0;
                }
                else
                {
                  v99 = v126 & 1;
                  Hasher._combine(_:)(1u);
                  v98 = v99;
                }
                Hasher._combine(_:)(v98);
                outlined retain of LocalePreferences?((uint64_t)v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease_n();
                goto LABEL_17;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              if (v122)
                goto LABEL_105;
            }
            Hasher._combine(_:)(0);
            goto LABEL_108;
          }
LABEL_98:
          Hasher._combine(_:)(0);
          if (v79)
            goto LABEL_94;
          goto LABEL_99;
        }
LABEL_87:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v35);
        swift_bridgeObjectRelease();
        v36 = v114;
        if (!v114)
          goto LABEL_42;
        goto LABEL_88;
      }
      outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v108, &demangling cache variable for type metadata for LocalePreferences?);
      v74 = v108;
    }
    else
    {
      Hasher._combine(_:)(0);
      v74 = v109;
    }
    outlined retain of LocalePreferences(v74);
    if (!v111)
      goto LABEL_39;
    goto LABEL_85;
  }
  Hasher._combine(_:)(0);
LABEL_17:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_81:
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

uint64_t static Date.AttributedStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v4[8];
  __int128 v5[8];
  __int128 v6[8];
  __int128 v7[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v6);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v6, v5);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4);
  return specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(v5, v4) & 1;
}

uint64_t Date.AttributedStyle.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  _OWORD v9[8];
  __int128 v10[8];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AttributedStyle.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v1, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v10, v9);
  lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.AttributedStyle.hashValue.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];

  v1 = v0[5];
  v10 = v0[4];
  v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(__int128 *)((char *)v0 + 106);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t Date.AttributedStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  __int128 v14[8];
  _OWORD v15[6];
  _OWORD v16[2];
  __int128 v17[8];
  _OWORD *v18;

  v18 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AttributedStyle.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v8 = v18;
    lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v14);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v14, v15);
    v9 = v15[5];
    v8[4] = v15[4];
    v8[5] = v9;
    v8[6] = v16[0];
    *(_OWORD *)((char *)v8 + 106) = *(_OWORD *)((char *)v16 + 10);
    v10 = v15[1];
    *v8 = v15[0];
    v8[1] = v10;
    v11 = v15[3];
    v8[2] = v15[2];
    v8[3] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

_OWORD *protocol witness for FormatStyle.locale(_:) in conformance Date.AttributedStyle@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  __int128 v39[8];
  __int128 v40[8];
  _OWORD v41[8];

  v3 = v2;
  v5 = *a1;
  v6 = a1[1];
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v3, v40);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v40, v41);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41) == 1)
  {
    v7 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    v8 = *(_QWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v7 + 56);
    v22 = *(_OWORD *)(v7 + 16);
    v24 = *(_OWORD *)v7;
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v26 = v24;
    v27 = v22;
    v28 = v5;
    v29 = v6;
    v30 = v8;
    v31 = v9;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v26);
  }
  else
  {
    v10 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    v25 = *(_BYTE *)(v10 + 121);
    v11 = a2;
    v12 = *(_BYTE *)(v10 + 120);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = *(_BYTE *)(v10 + 64);
    v19 = *(_OWORD *)(v10 + 16);
    v20 = *(_OWORD *)v10;
    v15 = *(_QWORD *)(v10 + 32);
    v16 = *(_QWORD *)(v10 + 40);
    v17 = *(_WORD *)(v10 + 48);
    v21 = *(_OWORD *)(v10 + 104);
    v23 = *(_OWORD *)(v10 + 88);
    outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v26 = v20;
    v27 = v19;
    v28 = v15;
    v29 = v16;
    LOWORD(v30) = v17;
    v31 = v13;
    v32 = v14;
    v33 = v5;
    v34 = v6;
    v35 = v23;
    v36 = v21;
    v37 = v12;
    a2 = v11;
    v38 = v25;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v26);
  }
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v26, v39);
  return outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v39, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AttributedStyle@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.AttributedStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AttributedStyle(_QWORD *a1)
{
  return Date.AttributedStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.AttributedStyle()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];

  v1 = v0[5];
  v10 = v0[4];
  v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(__int128 *)((char *)v0 + 106);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AttributedStyle()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];

  v1 = v0[5];
  v10 = v0[4];
  v11 = v1;
  v12[0] = v0[6];
  *(_OWORD *)((char *)v12 + 10) = *(__int128 *)((char *)v0 + 106);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  Hasher.init(_seed:)();
  Date.AttributedStyle.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.AttributedStyle(__int128 *a1, __int128 *a2)
{
  __int128 v4[8];
  __int128 v5[8];
  __int128 v6[8];
  __int128 v7[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v6);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v6, v5);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v4);
  return specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(v5, v4) & 1;
}

uint64_t Date.FormatStyle.Attributed.subscript.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  _OWORD v6[2];

  v1 = v0[5];
  v5[4] = v0[4];
  v5[5] = v1;
  v6[0] = v0[6];
  *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)v0 + 106);
  v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  v3 = v0[3];
  v5[2] = v0[2];
  v5[3] = v3;
  outlined retain of Date.FormatStyle((uint64_t)v5);
  swift_getAtKeyPath();
  return outlined release of Date.FormatStyle((uint64_t)v5);
}

uint64_t key path getter for Date.FormatStyle.Attributed.subscript<A>(dynamicMember:) : <A>Date.FormatStyle.AttributedA(_OWORD *a1, uint64_t *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[6];
  _OWORD v8[2];

  v2 = a1[5];
  v7[4] = a1[4];
  v7[5] = v2;
  v8[0] = a1[6];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)a1 + 106);
  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  v4 = a1[3];
  v7[2] = a1[2];
  v7[3] = v4;
  v5 = *a2;
  outlined retain of Date.FormatStyle((uint64_t)v7);
  Date.FormatStyle.Attributed.subscript.getter(v5);
  return outlined release of Date.FormatStyle((uint64_t)v7);
}

uint64_t Date.FormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + v3 + 8) - 8) + 8))(a1);
}

void (*Date.FormatStyle.Attributed.subscript.modify(_QWORD *a1, _QWORD *a2))(uint64_t a1, char a2)
{
  __int128 *v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = (char *)malloc(0x138uLL);
  *a1 = v5;
  *((_QWORD *)v5 + 32) = a2;
  *((_QWORD *)v5 + 33) = v2;
  v6 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a2 + 8);
  *((_QWORD *)v5 + 34) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *((_QWORD *)v5 + 35) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *((_QWORD *)v5 + 36) = malloc(v8);
  *((_QWORD *)v5 + 37) = malloc(v8);
  *((_QWORD *)v5 + 38) = malloc(v8);
  v9 = v2[4];
  v10 = v2[5];
  *((_OWORD *)v5 + 4) = v9;
  *((_OWORD *)v5 + 5) = v10;
  v11 = v2[6];
  *((_OWORD *)v5 + 6) = v11;
  v12 = *(__int128 *)((char *)v2 + 106);
  *(_OWORD *)(v5 + 106) = v12;
  v13 = *v2;
  v14 = v2[1];
  *(_OWORD *)v5 = *v2;
  *((_OWORD *)v5 + 1) = v14;
  v15 = v2[2];
  v16 = v2[3];
  *((_OWORD *)v5 + 2) = v15;
  *((_OWORD *)v5 + 3) = v16;
  *(_OWORD *)(v5 + 234) = v12;
  *((_OWORD *)v5 + 13) = v10;
  *((_OWORD *)v5 + 14) = v11;
  *((_OWORD *)v5 + 11) = v16;
  *((_OWORD *)v5 + 12) = v9;
  *((_OWORD *)v5 + 9) = v14;
  *((_OWORD *)v5 + 10) = v15;
  *((_OWORD *)v5 + 8) = v13;
  outlined retain of Date.FormatStyle((uint64_t)v5);
  swift_getAtKeyPath();
  outlined release of Date.FormatStyle((uint64_t)v5);
  return Date.FormatStyle.Attributed.subscript.modify;
}

void Date.FormatStyle.Attributed.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 280) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 296), v3[38], v3[34]);
  v5 = (void *)v3[37];
  v6 = (void *)v3[38];
  v8 = v3[35];
  v7 = (void *)v3[36];
  v9 = v3[34];
  if ((a2 & 1) != 0)
  {
    v4(v3[36], v3[37], v3[34]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t Date.FormatStyle.Attributed.format(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  Foundation::Date v13;
  uint64_t countAndFlagsBits;
  _QWORD *rawValue;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t *v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t result;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void *object;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[2];
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  _BYTE v70[40];
  __int128 v71;
  _BYTE v72[24];
  char v73;
  uint64_t v74;
  __int128 v75[3];
  char v76[48];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[3];
  _OWORD v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[3];
  Swift::tuple_String_OpaquePointer_optional v98;

  v4 = v2[5];
  v5 = v2[3];
  v95 = v2[4];
  v96 = v4;
  v6 = v2[5];
  v97[0] = v2[6];
  *(_OWORD *)((char *)v97 + 10) = *(__int128 *)((char *)v2 + 106);
  v7 = v2[1];
  v92[0] = *v2;
  v92[1] = v7;
  v8 = v2[3];
  v10 = *v2;
  v9 = v2[1];
  v93 = v2[2];
  v94 = v8;
  v67 = v95;
  v68 = v6;
  v69[0] = v2[6];
  *(_OWORD *)((char *)v69 + 10) = *(__int128 *)((char *)v2 + 106);
  v64 = v10;
  v65 = v9;
  v11 = *a1;
  *(_OWORD *)v66 = v93;
  *(_OWORD *)&v66[16] = v5;
  outlined retain of Date.FormatStyle((uint64_t)v92);
  outlined retain of Date.FormatStyle((uint64_t)v92);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v64, (uint64_t)v70);
  v64 = *(_OWORD *)v70;
  v65 = *(_OWORD *)&v70[16];
  v66[0] = v70[32];
  *(_OWORD *)&v66[8] = v71;
  v66[24] = v72[0];
  v67 = *(_OWORD *)&v72[8];
  LOBYTE(v68) = v73;
  *((_QWORD *)&v68 + 1) = v74;
  v12 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of Date.FormatStyle((uint64_t)v92);
  if (!v12)
    goto LABEL_20;
  *(_QWORD *)&v64 = v11;
  v98 = ICUDateFormatter.attributedFormat(_:)(v13);
  object = v98.value._0._object;
  if (!v98.value._0._object)
  {
    swift_release();
LABEL_20:
    BigString.init(_:)();
    result = AttributedString.init(_:attributes:)(&v64, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v70);
    v17 = *(_QWORD *)v70;
    goto LABEL_21;
  }
  countAndFlagsBits = v98.value._0._countAndFlagsBits;
  rawValue = v98.value._1._rawValue;
  v50 = a2;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  v16 = MEMORY[0x1E0DEE9E0];
  AttributedString.init(_:attributes:)(v75, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v64);
  v17 = v64;
  v18 = rawValue[2];
  if (!v18)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    a2 = v50;
LABEL_21:
    *a2 = v17;
    return result;
  }
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  v19 = 0;
  v20 = (char *)(rawValue + 6);
  v52 = countAndFlagsBits;
  while (1)
  {
    v58 = v19;
    v59 = v18;
    v21 = *((unsigned int *)v20 - 4);
    *(_QWORD *)v70 = countAndFlagsBits;
    *(_QWORD *)&v70[8] = object;
    swift_bridgeObjectRetain();
    v22 = String.Index.init<A>(utf16Offset:in:)();
    *(_QWORD *)v70 = countAndFlagsBits;
    *(_QWORD *)&v70[8] = object;
    swift_bridgeObjectRetain();
    v23 = String.Index.init<A>(utf16Offset:in:)();
    if (v23 >> 14 < v22 >> 14)
      break;
    v24 = v23;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v22, v24, (_OWORD *)v17, (unint64_t *)v70);
    v25 = *(_QWORD *)&v70[24];
    if (*(_QWORD *)&v70[24] == 2)
      goto LABEL_24;
    v55 = *(_QWORD *)&v70[8];
    v56 = *(_QWORD *)v70;
    v54 = *(_QWORD *)&v70[16];
    v26 = *(_QWORD *)&v70[32];
    v28 = *((_QWORD *)&v71 + 1);
    v27 = v71;
    v57 = *(_QWORD *)v72;
    v62 = v16;
    v29 = MEMORY[0x1E0DEE9E8];
    v63 = MEMORY[0x1E0DEE9E8];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v21, v70);
    if (v70[0] == 17)
    {
      v30 = v29;
    }
    else
    {
      specialized AttributeContainer.subscript.setter(v70[0]);
      v16 = v62;
      v30 = v63;
    }
    v61[0] = v16;
    v61[1] = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v31 = *(_OWORD *)(v17 + 32);
      v91[0] = *(_OWORD *)(v17 + 16);
      v91[1] = v31;
      v91[2] = *(_OWORD *)(v17 + 48);
      v32 = v26;
      v33 = *(_QWORD *)(v17 + 64);
      v34 = *(_QWORD *)(v17 + 72);
      v35 = v27;
      v51 = v28;
      v36 = *(_QWORD *)(v17 + 80);
      v37 = *(_QWORD *)(v17 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v91);
      swift_unknownObjectRetain();
      v38 = v34;
      v26 = v32;
      v39 = v36;
      v27 = v35;
      v40 = v37;
      v28 = v51;
      v41 = AttributedString.Guts.init(string:runs:)(v91, v33, v38, v39, v40);
      swift_release();
      v17 = v41;
    }
    v42 = *(_OWORD *)(v17 + 32);
    v88 = *(_OWORD *)(v17 + 16);
    v89 = v42;
    v90 = *(_OWORD *)(v17 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v80 = v56;
    v81 = v55;
    v82 = v54;
    v83 = v25;
    v84 = v26;
    v85 = v27;
    v86 = v28;
    v87 = v57;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v76);
    outlined release of Locale((uint64_t)&v64);
    *(_OWORD *)&v70[8] = *(_OWORD *)&v66[16];
    *(_OWORD *)&v70[24] = v67;
    v71 = v68;
    *(_OWORD *)v72 = v69[0];
    *(_QWORD *)v70 = v17;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v43 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v44 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v44);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v43, &v60);
    v19 = v58;
    os_unfair_lock_unlock(v44);
    swift_release();
    v45 = v60;
    *(_QWORD *)&v72[16] = v60;
    BigString.init()();
    v60 = 0;
    MEMORY[0x186DA9E90](&v60, 8);
    v46 = v60;
    type metadata accessor for AttributedString.Guts();
    v47 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
      goto LABEL_23;
    v48 = v78;
    *(_OWORD *)(v47 + 16) = v77;
    *(_OWORD *)(v47 + 32) = v48;
    *(_OWORD *)(v47 + 48) = v79;
    *(_QWORD *)(v47 + 64) = 0;
    *(_QWORD *)(v47 + 72) = 0;
    *(_QWORD *)(v47 + 80) = 0;
    *(_QWORD *)(v47 + 88) = v46;
    swift_release();
    LOBYTE(v60) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v61, (char *)&v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)&v72[16] != v45)
      goto LABEL_25;
    v20 += 24;
    v17 = *(_QWORD *)v70;
    swift_release();
    v18 = v59 - 1;
    countAndFlagsBits = v52;
    v16 = MEMORY[0x1E0DEE9E0];
    if (v59 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 Date.FormatStyle.Attributed.locale(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int16 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[42];

  *(_OWORD *)&v25[26] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v20 = *v2;
  v21 = v5;
  v6 = v2[3];
  v22 = v2[2];
  v23 = v6;
  v7 = v2[5];
  v24 = v2[4];
  *(_OWORD *)v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  v8 = v25[41];
  v9 = v25[40];
  v10 = *((_QWORD *)&v6 + 1);
  v11 = v24;
  v16 = v21;
  v17 = v20;
  v12 = v22;
  v13 = v6;
  v18 = *(__n128 *)&v25[24];
  v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 120) = v9;
  *(_BYTE *)(a2 + 121) = v8;
  return result;
}

uint64_t Date.FormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  Swift::UInt v6;
  int v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::UInt8 v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  _QWORD v73[18];
  _BYTE v74[144];
  _BYTE v75[144];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int16 v79;
  _OWORD v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[26];

  v3 = v1[5];
  v83 = v1[4];
  v84 = v3;
  *(_OWORD *)v85 = v1[6];
  *(_OWORD *)&v85[10] = *(_OWORD *)((char *)v1 + 106);
  v4 = v1[1];
  v80[0] = *v1;
  v80[1] = v4;
  v5 = v1[3];
  v81 = v1[2];
  v82 = v5;
  v76 = v80[0];
  v77 = v4;
  v78 = v81;
  v79 = v5;
  v6 = *((_QWORD *)&v5 + 1);
  v7 = v83;
  outlined retain of Date.FormatStyle((uint64_t)v80);
  specialized Optional<A>.hash(into:)(a1);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  v8 = v84;
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  swift_unknownObjectRetain();
  if ((v10(ObjectType, v8) & 1) != 0)
  {
    v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v12(v73, ObjectType, v8);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    v11 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    v13 = 0;
  }
  else
  {
    v13 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  v14 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    v19 = v55;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v14 + 16));
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    v19 = v54;
LABEL_23:
    outlined retain of LocalePreferences(v19);
    if (!v57)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v58)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v17 = v59;
    if (!v59)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v17);
    swift_bridgeObjectRelease();
    v18 = v60;
    if (!v60)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v17 = v59;
  if (v59)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v18 = v60;
  if (!v60)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v18);
  swift_bridgeObjectRelease();
LABEL_28:
  v21 = v61;
  v20 = v62;
  v23 = v63;
  v22 = v64;
  v24 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v20;
    v26 = v23;
    v27 = v22;
    v28 = v24;
    v29 = v21;
    _CFObject.hash(into:)();
    if (v20)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    v34 = v24;
    v35 = v20;
    v36 = v23;
    v37 = v22;
    if (v20)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v30 = v20;
      _CFObject.hash(into:)();

      if (v23)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v31 = v23;
    _CFObject.hash(into:)();

    if (v22)
      goto LABEL_32;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v24)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v22)
    goto LABEL_37;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  v33 = 0;
LABEL_39:

  v38 = v66;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v38);
    swift_bridgeObjectRelease();
    v39 = v67;
    if (v67)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    if (v68)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  v39 = v67;
  if (!v67)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);
  swift_bridgeObjectRelease();
  if (!v68)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v71 == 2)
  {
    v42 = 0;
  }
  else
  {
    v42 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v42);
  if (v72 == 2)
  {
    v43 = 0;
  }
  else
  {
    v44 = v72 & 1;
    Hasher._combine(_:)(1u);
    v43 = v44;
  }
  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  v45 = *(_QWORD *)v85;
  v46 = *(_QWORD *)&v85[16];
  v47 = v85[24];
  v48 = v85[25];
  v49 = swift_getObjectType();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 112);
  swift_unknownObjectRetain();
  v50(a1, v49, v45);
  swift_unknownObjectRelease();
  v51 = swift_getObjectType();
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 120);
  swift_unknownObjectRetain();
  v52(a1, v51, v46);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v47);
  Hasher._combine(_:)(v48);
  return outlined release of Date.FormatStyle((uint64_t)v80);
}

uint64_t static Date.FormatStyle.Attributed.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[2];
  _OWORD v11[6];
  _OWORD v12[2];

  v2 = a1[5];
  v11[4] = a1[4];
  v11[5] = v2;
  v12[0] = a1[6];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 106);
  v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  v4 = a1[3];
  v11[2] = a1[2];
  v11[3] = v4;
  v5 = a2[5];
  v9[4] = a2[4];
  v9[5] = v5;
  v10[0] = a2[6];
  *(_OWORD *)((char *)v10 + 10) = *(_OWORD *)((char *)a2 + 106);
  v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  v7 = a2[3];
  v9[2] = a2[2];
  v9[3] = v7;
  return specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v11, (uint64_t *)v9) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.Attributed.CodingKeys()
{
  return 1702060386;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.Attributed.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[6];
  _OWORD v13[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Attributed.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8 = v2[5];
  v12[4] = v2[4];
  v12[5] = v8;
  v13[0] = v2[6];
  *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v2 + 106);
  v9 = v2[1];
  v12[0] = *v2;
  v12[1] = v9;
  v10 = v2[3];
  v12[2] = v2[2];
  v12[3] = v10;
  lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.FormatStyle.Attributed.hashValue.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  Swift::UInt v4;
  int v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;
  Swift::UInt8 v46;
  uint64_t v47;
  void (*v48)(_BYTE *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t, uint64_t);
  _BYTE v52[144];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  _QWORD v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[72];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int16 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[26];

  v1 = v0[5];
  v83 = v0[4];
  v84 = v1;
  *(_OWORD *)v85 = v0[6];
  *(_OWORD *)&v85[10] = *(__int128 *)((char *)v0 + 106);
  v2 = v0[1];
  v79 = *v0;
  v80 = v2;
  v3 = v0[3];
  v81 = v0[2];
  v82 = v3;
  Hasher.init(_seed:)();
  v75 = v79;
  v76 = v80;
  v77 = v81;
  v78 = v82;
  v4 = *((_QWORD *)&v82 + 1);
  v5 = v83;
  outlined retain of Date.FormatStyle((uint64_t)&v79);
  specialized Optional<A>.hash(into:)((uint64_t)v74);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  v6 = v84;
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v71, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    v9 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v53, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    v17 = v53;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v52, &demangling cache variable for type metadata for LocalePreferences?);
    v17 = v52;
LABEL_23:
    outlined retain of LocalePreferences(v17);
    if (!v55)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v56)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v15 = v57;
    if (!v57)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v15);
    swift_bridgeObjectRelease();
    v16 = v58;
    if (!v58)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v15 = v57;
  if (v57)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v16 = v58;
  if (!v58)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v16);
  swift_bridgeObjectRelease();
LABEL_28:
  v19 = v59;
  v18 = v60;
  v21 = v61;
  v20 = v62;
  v22 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v18;
    v24 = v21;
    v25 = v20;
    v26 = v22;
    v27 = v19;
    _CFObject.hash(into:)();
    if (v18)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    v32 = v22;
    v33 = v18;
    v34 = v21;
    v35 = v20;
    if (v18)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v28 = v18;
      _CFObject.hash(into:)();

      if (v21)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v21;
    _CFObject.hash(into:)();

    if (v20)
      goto LABEL_32;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v22)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v20)
    goto LABEL_37;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  v31 = 0;
LABEL_39:

  v36 = v64;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v36);
    swift_bridgeObjectRelease();
    v37 = v65;
    if (v65)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    if (v66)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  v37 = v65;
  if (!v65)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v37);
  swift_bridgeObjectRelease();
  if (!v66)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v69 == 2)
  {
    v40 = 0;
  }
  else
  {
    v40 = v69 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v70 == 2)
  {
    v41 = 0;
  }
  else
  {
    v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  v43 = *(_QWORD *)v85;
  v44 = *(_QWORD *)&v85[16];
  v45 = v85[24];
  v46 = v85[25];
  v47 = swift_getObjectType();
  v48 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v43 + 112);
  swift_unknownObjectRetain();
  v48(v74, v47, v43);
  swift_unknownObjectRelease();
  v49 = swift_getObjectType();
  v50 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v44 + 120);
  swift_unknownObjectRetain();
  v50(v74, v49, v44);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v45);
  Hasher._combine(_:)(v46);
  outlined release of Date.FormatStyle((uint64_t)&v79);
  return Hasher._finalize()();
}

uint64_t Date.FormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[6];
  _OWORD v14[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Attributed.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13[5];
    a2[4] = v13[4];
    a2[5] = v9;
    a2[6] = v14[0];
    *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)((char *)v14 + 10);
    v10 = v13[1];
    *a2 = v13[0];
    a2[1] = v10;
    v11 = v13[3];
    a2[2] = v13[2];
    a2[3] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Date.FormatStyle.Attributed@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int16 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[42];

  *(_OWORD *)&v25[26] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v20 = *v2;
  v21 = v5;
  v6 = v2[3];
  v22 = v2[2];
  v23 = v6;
  v7 = v2[5];
  v24 = v2[4];
  *(_OWORD *)v25 = v7;
  *(_OWORD *)&v25[16] = v2[6];
  v8 = v25[41];
  v9 = v25[40];
  v10 = *((_QWORD *)&v6 + 1);
  v11 = v24;
  v16 = v21;
  v17 = v20;
  v12 = v22;
  v13 = v6;
  v18 = *(__n128 *)&v25[24];
  v19 = *(_OWORD *)&v25[8];
  outlined retain of Date.FormatStyle((uint64_t)&v20);
  v15 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v12;
  *(_WORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 72) = v15;
  *(_OWORD *)(a2 + 88) = v19;
  result = v18;
  *(__n128 *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 120) = v9;
  *(_BYTE *)(a2 + 121) = v8;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.FormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Attributed(_QWORD *a1)
{
  return Date.FormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Attributed()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  Swift::UInt v4;
  int v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(_BYTE *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  _QWORD v69[18];
  _BYTE v70[144];
  _BYTE v71[144];
  _BYTE v72[72];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int16 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[26];

  v1 = v0[5];
  v81 = v0[4];
  v82 = v1;
  *(_OWORD *)v83 = v0[6];
  *(_OWORD *)&v83[10] = *(__int128 *)((char *)v0 + 106);
  v2 = v0[1];
  v77 = *v0;
  v78 = v2;
  v3 = v0[3];
  v79 = v0[2];
  v80 = v3;
  Hasher.init(_seed:)();
  v73 = v77;
  v74 = v78;
  v75 = v79;
  v76 = v80;
  v4 = *((_QWORD *)&v80 + 1);
  v5 = v81;
  outlined retain of Date.FormatStyle((uint64_t)&v77);
  specialized Optional<A>.hash(into:)((uint64_t)v72);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  v6 = v82;
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v69, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v71) == 1)
  {
    v9 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)&v51, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v51 == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v52;
  if (!v52)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v51);
    if (!v53)
      goto LABEL_17;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    goto LABEL_22;
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v54)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v15 = v55;
    if (!v55)
      goto LABEL_19;
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v15);
    swift_bridgeObjectRelease();
    v16 = v56;
    if (!v56)
      goto LABEL_20;
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v15 = v55;
  if (v55)
    goto LABEL_25;
LABEL_19:
  Hasher._combine(_:)(0);
  v16 = v56;
  if (!v56)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v16);
  swift_bridgeObjectRelease();
LABEL_27:
  v18 = v57;
  v17 = v58;
  v20 = v59;
  v19 = v60;
  v21 = v61;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v17;
    v23 = v20;
    v24 = v19;
    v25 = v21;
    v26 = v18;
    _CFObject.hash(into:)();
    if (v17)
      goto LABEL_29;
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v21;
    v32 = v17;
    v33 = v20;
    v34 = v19;
    if (v17)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v27 = v17;
      _CFObject.hash(into:)();

      if (v20)
        goto LABEL_30;
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v28 = v20;
    _CFObject.hash(into:)();

    if (v19)
      goto LABEL_31;
LABEL_36:
    Hasher._combine(_:)(0);
    if (v21)
      goto LABEL_32;
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v19)
    goto LABEL_36;
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v30 = 0;
LABEL_38:

  v35 = v62;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v35);
    swift_bridgeObjectRelease();
    v36 = v63;
    if (v63)
      goto LABEL_40;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v64)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  v36 = v63;
  if (!v63)
    goto LABEL_43;
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v36);
  swift_bridgeObjectRelease();
  if (!v64)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v67 == 2)
  {
    v39 = 0;
  }
  else
  {
    v39 = v67 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v68 == 2)
  {
    v40 = 0;
  }
  else
  {
    v41 = v68 & 1;
    Hasher._combine(_:)(1u);
    v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  v42 = *(_QWORD *)v83;
  v43 = *(_QWORD *)&v83[16];
  v44 = v83[24];
  v45 = v83[25];
  v46 = swift_getObjectType();
  v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v42 + 112);
  swift_unknownObjectRetain();
  v47(v72, v46, v42);
  swift_unknownObjectRelease();
  v48 = swift_getObjectType();
  v49 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v43 + 120);
  swift_unknownObjectRetain();
  v49(v72, v48, v43);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v44);
  Hasher._combine(_:)(v45);
  outlined release of Date.FormatStyle((uint64_t)&v77);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[2];
  _OWORD v11[6];
  _OWORD v12[2];

  v2 = a1[5];
  v11[4] = a1[4];
  v11[5] = v2;
  v12[0] = a1[6];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 106);
  v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  v4 = a1[3];
  v11[2] = a1[2];
  v11[3] = v4;
  v5 = a2[5];
  v9[4] = a2[4];
  v9[5] = v5;
  v10[0] = a2[6];
  *(_OWORD *)((char *)v10 + 10) = *(_OWORD *)((char *)a2 + 106);
  v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  v7 = a2[3];
  v9[2] = a2[2];
  v9[3] = v7;
  return specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)v11, (uint64_t *)v9) & 1;
}

uint64_t Date.FormatStyle.attributedStyle.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  v3 = v1[5];
  v13 = v1[4];
  v2 = v13;
  v14 = v3;
  v15[0] = v1[6];
  v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  v5 = *(_OWORD *)((char *)v15 + 10);
  v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  v8 = v1[3];
  v11 = v1[2];
  v7 = v11;
  v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

uint64_t Date.FormatStyle.era(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  unsigned __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unsigned __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v19;
  unsigned __int128 v20;
  __int128 v21;
  _BYTE v22[74];

  v3 = *a1;
  v4 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v4;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v19 = *v2;
  v20 = v5;
  v6 = v2[3];
  v21 = v2[2];
  *(_OWORD *)v22 = v6;
  v7 = v21;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if ((_DWORD)v3 == 3)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v17 = 0;
    v14 = 0;
    v16 = 0;
    v7 = v12 | v11 | v8;
    v15 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    v13 = 3327;
  }
  else
  {
    v13 = *(_WORD *)v22;
    v14 = *((_QWORD *)&v21 + 1);
    v15 = v20;
    v16 = *((_QWORD *)&v19 + 1);
    v17 = v19 & 0xFFFFFFFFFFFFFF00;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_QWORD *)a2 = v17 | v3;
  *(_QWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.quarter(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int128 v18;
  __int128 v19;
  unsigned __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = v2[1];
  v18 = *v2;
  v19 = v4;
  v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v6 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v6;
  v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if (v3 == 5)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v14 = 0;
    v15 = v9 | v10;
    v7 = (unint64_t)v12 | (unsigned __int128)(v11 | (unint64_t)v8);
    v13 = xmmword_1820FDF60;
    v16 = 3327;
  }
  else
  {
    v13 = v18;
    v14 = *((_QWORD *)&v19 + 1);
    v15 = v19;
    v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v15 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v3 << 8);
  *(_QWORD *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 32) = v7;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.week(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  unint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[74];

  v3 = *a1;
  v4 = v2[5];
  *(_OWORD *)&v23[16] = v2[4];
  *(_OWORD *)&v23[32] = v4;
  *(_OWORD *)&v23[48] = v2[6];
  *(_OWORD *)&v23[58] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v20 = *v2;
  v21 = v5;
  v6 = v2[3];
  v22 = v2[2];
  *(_OWORD *)v23 = v6;
  v7 = v22;
  if ((v22 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if ((_DWORD)v3 == 3)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v16 = v9 | v10;
    v7 = v12 | v11 | v8;
    v17 = xmmword_1820FDF60;
    v13 = 3327;
  }
  else
  {
    v13 = *(_WORD *)v23;
    v14 = *((_QWORD *)&v22 + 1);
    v15 = *((_QWORD *)&v21 + 1);
    v16 = v21;
    v17 = v20;
    v18 = v21 & 0xFFFFFFFF00000000;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v23[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v23[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v23[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v23[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v23[2];
  *(_OWORD *)a2 = v17;
  *(_QWORD *)(a2 + 16) = v18 | (v3 << 24) | *(_QWORD *)&v16 & 0xFFFFFFLL;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v20);
}

uint64_t Date.FormatStyle.dayOfYear(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  int v3;
  unsigned __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v18;
  unsigned __int128 v19;
  __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = v2[1];
  v18 = *v2;
  v19 = v4;
  v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v6 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v6;
  v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if (v3 == 3)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v15 = 0;
    v7 = v12 | v11 | v8;
    v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    v14 = xmmword_1820FDF60;
    v16 = 3327;
  }
  else
  {
    v14 = v18;
    v13 = v19;
    v15 = *((_QWORD *)&v20 + 1);
    v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 32) = v7 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v3 << 16);
  *(_QWORD *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.hour(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  int v3;
  unsigned __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v18;
  unsigned __int128 v19;
  __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = v2[1];
  v18 = *v2;
  v19 = v4;
  v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v6 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v6;
  v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if (v3 == 14)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v15 = 0;
    v7 = v12 | v11 | v8;
    v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    v14 = xmmword_1820FDF60;
    v16 = 3327;
  }
  else
  {
    v14 = v18;
    v13 = v19;
    v15 = *((_QWORD *)&v20 + 1);
    v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 32) = v7 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v3 << 40);
  *(_QWORD *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.minute(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  unsigned __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int128 v16;
  __int128 v17;
  __int128 v19;
  unsigned __int128 v20;
  __int128 v21;
  _BYTE v22[74];

  v3 = *a1;
  v4 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v4;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v19 = *v2;
  v20 = v5;
  v6 = v2[3];
  v21 = v2[2];
  *(_OWORD *)v22 = v6;
  v7 = v21;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if ((_DWORD)v3 == 2)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v14 = 0;
    v7 = v12 | v11 | v8;
    v16 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    v17 = xmmword_1820FDF60;
    v13 = 3327;
    v15 = 0x200000000000000;
  }
  else
  {
    v13 = *(_WORD *)v22;
    v14 = *((_QWORD *)&v21 + 1);
    v15 = v21 & 0xFF00000000000000;
    v17 = v19;
    v16 = v20;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 32) = v15 | (v3 << 48) | v7 & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)(a2 + 40) = v14;
  *(_WORD *)(a2 + 48) = v13;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t Date.FormatStyle.second(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  int v3;
  unsigned __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v18;
  unsigned __int128 v19;
  __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = v2[1];
  v18 = *v2;
  v19 = v4;
  v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v6 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v6;
  v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if (v3 == 2)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v15 = 0;
    v7 = v12 | v11 | v8;
    v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    v14 = xmmword_1820FDF60;
    v16 = 3327;
  }
  else
  {
    v14 = v18;
    v13 = v19;
    v15 = *((_QWORD *)&v20 + 1);
    v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 32) = v7 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v3 << 56);
  *(_QWORD *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.secondFraction(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  unsigned __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int128 v14;
  __int128 v15;
  __int16 v16;
  __int128 v18;
  unsigned __int128 v19;
  __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v6 = v2[1];
  v18 = *v2;
  v19 = v6;
  v7 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v7;
  v8 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v9 = 0x906030001;
    v10 = 50332931;
    if (v4 == 255)
    {
      v13 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v10 = 50333183;
      v9 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v13 = 327680;
    }
    v8 = v12 | v11 | v9;
    v14 = (unint64_t)v10 | (unsigned __int128)(unint64_t)v13;
    v15 = xmmword_1820FDF60;
    v16 = 12;
  }
  else
  {
    v15 = v18;
    v14 = v19;
    v16 = v21[1];
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v3;
  *(_WORD *)(a2 + 48) = v4 | (v16 << 8);
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.timeZone(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  int v3;
  __int128 v4;
  unsigned __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  __int128 v18;
  unsigned __int128 v19;
  __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v4;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v18 = *v2;
  v19 = v5;
  v6 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v6;
  v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if (v3 == 12)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v13 = 0;
    v7 = v12 | v11 | v8;
    v14 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    v15 = xmmword_1820FDF60;
    v16 = -1;
  }
  else
  {
    v13 = *((_QWORD *)&v20 + 1);
    v15 = v18;
    v14 = v19;
    v16 = v21[0];
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v13;
  *(_WORD *)(a2 + 48) = v16 | (v3 << 8);
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t Date.FormatStyle.Attributed.era(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.era(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.year(_:)(uint64_t *a1)
{
  return Date.FormatStyle.Attributed.year(_:)(a1, (uint64_t (*)(uint64_t *))Date.FormatStyle.year(_:));
}

uint64_t Date.FormatStyle.Attributed.quarter(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.quarter(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.month(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.month(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.week(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.week(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.day(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  uint64_t v5;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 9);
  v5 = *(_QWORD *)a1;
  v6 = v2;
  v7 = v3;
  return Date.FormatStyle.day(_:)(&v5, a2);
}

uint64_t Date.FormatStyle.Attributed.dayOfYear(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.dayOfYear(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.weekday(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.weekday(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.hour(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.hour(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.minute(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.minute(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.second(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.second(_:)(&v3, a2);
}

uint64_t Date.FormatStyle.Attributed.secondFraction(_:)(uint64_t *a1)
{
  return Date.FormatStyle.Attributed.year(_:)(a1, (uint64_t (*)(uint64_t *))Date.FormatStyle.secondFraction(_:));
}

uint64_t Date.FormatStyle.Attributed.year(_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  char v2;
  uint64_t v4;
  char v5;

  v2 = *((_BYTE *)a1 + 8);
  v4 = *a1;
  v5 = v2;
  return a2(&v4);
}

uint64_t Date.FormatStyle.Attributed.timeZone(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = *a1;
  return Date.FormatStyle.timeZone(_:)(&v3, a2);
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.FormatStyle.parse(_:)(Swift::String a1)
{
  double *v1;
  _OWORD *v2;
  uint64_t v3;
  void *object;
  __darwin_time_t countAndFlagsBits;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  timespec v11;
  timespec v12;
  uint64_t v13;
  __darwin_time_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  __darwin_time_t tv_sec;
  uint64_t tv_nsec;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  __darwin_time_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __darwin_time_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  __darwin_time_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  __darwin_time_t v48;
  uint64_t v49;
  uint64_t inited;
  uint64_t v51;
  _QWORD *v52;
  __darwin_time_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  __darwin_time_t *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  Foundation::Date result;
  char v70;
  double v71;
  uint64_t v72;
  double *v73;
  int v74;
  timespec v75[2];
  char v76;
  __int128 v77;
  char v78;
  __int128 v79;
  char v80;
  uint64_t v81;
  timespec v82;
  timespec v83;
  _BYTE v84[32];
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  _OWORD v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  uint64_t v94;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v73 = v1;
  v94 = *MEMORY[0x1E0C80C00];
  v6 = v2[5];
  v7 = v2[3];
  v91 = v2[4];
  v92 = v6;
  v8 = v2[5];
  v93[0] = v2[6];
  *(_OWORD *)((char *)v93 + 10) = *(_OWORD *)((char *)v2 + 106);
  v9 = v2[1];
  v88[0] = *v2;
  v88[1] = v9;
  v10 = v2[3];
  v12 = (timespec)*v2;
  v11 = (timespec)v2[1];
  v89 = v2[2];
  v90 = v10;
  v85 = v91;
  v86 = v8;
  v87[0] = v2[6];
  *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v2 + 106);
  v82 = v12;
  v83 = v11;
  *(_OWORD *)v84 = v89;
  *(_OWORD *)&v84[16] = v7;
  outlined retain of Date.FormatStyle((uint64_t)v88);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v82, (uint64_t)v75);
  v82 = v75[0];
  v83 = v75[1];
  v84[0] = v76;
  *(_OWORD *)&v84[8] = v77;
  v84[24] = v78;
  v85 = v79;
  LOBYTE(v86) = v80;
  *((_QWORD *)&v86 + 1) = v81;
  v13 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    v82.tv_sec = countAndFlagsBits;
    v82.tv_nsec = (uint64_t)object;
    udat_getCalendar();
    LODWORD(v75[0].tv_sec) = 0;
    ucal_clone();
    if (SLODWORD(v75[0].tv_sec) <= 0)
    {
      swift_bridgeObjectRetain();
      v14 = countAndFlagsBits;
      v15 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type String and conformance String();
      v16 = String.Index.utf16Offset<A>(in:)();
      if (v16 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v17 = v16;
      if (v16 > 0x7FFFFFFF)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v74 = v16;
      if (v15[2] >> 31)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
      udat_parseCalendar();
      swift_release();
      if (SLODWORD(v75[0].tv_sec) < 1 && v17 != v74)
      {
        ucal_getMillis();
        if (SLODWORD(v75[0].tv_sec) < 1)
        {
          v71 = v18 / 1000.0 + -978307200.0;
          ucal_close();
          swift_release();
          *v73 = v71;
          return result;
        }
      }
      countAndFlagsBits = v14;
      ucal_close();
    }
    v19 = countAndFlagsBits;
    v82.tv_sec = 0;
    v82.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &v82);
    v20 = swift_retain_n();
    MEMORY[0x1E0C80A78](v20);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v72, &v82.tv_sec);
    if (!v3)
    {
      tv_sec = v82.tv_sec;
      tv_nsec = v82.tv_nsec;
      swift_release_n();
      v73 = (double *)tv_nsec;
      v82.tv_sec = 0;
      v82.tv_nsec = 0xE000000000000000;
      if (tv_nsec)
      {
        _StringGuts.grow(_:)(88);
        v23._countAndFlagsBits = 0x7020746F6E6E6143;
        v23._object = (void *)0xED00002065737261;
        String.append(_:)(v23);
        v24._countAndFlagsBits = v19;
        v24._object = object;
        String.append(_:)(v24);
        v25._countAndFlagsBits = 0xD000000000000046;
        v25._object = (void *)0x80000001823067D0;
        String.append(_:)(v25);
        v26 = tv_sec;
        v27 = tv_nsec;
      }
      else
      {
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)&v82, "Cannot parse ");
        HIWORD(v82.tv_nsec) = -4864;
        v26 = v19;
        v27 = (uint64_t)object;
      }
      String.append(_:)(*(Swift::String *)&v26);
      v47._countAndFlagsBits = 46;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      v48 = v82.tv_sec;
      v49 = v82.tv_nsec;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 40) = v51;
      *(_QWORD *)(inited + 48) = v48;
      *(_QWORD *)(inited + 56) = v49;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v52 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v82);
      v53 = v82.tv_sec;
      v54 = v82.tv_nsec;
      swift_retain();
      v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
      if ((v56 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v52[(v55 >> 6) + 8] |= 1 << v55;
        v57 = (__darwin_time_t *)(v52[6] + 16 * v55);
        *v57 = v53;
        v57[1] = v54;
        outlined init with take of Any(&v83, (_OWORD *)(v52[7] + 32 * v55));
        v58 = v52[2];
        v37 = __OFADD__(v58, 1);
        v59 = v58 + 1;
        if (!v37)
        {
          v52[2] = v59;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v60 = objc_allocWithZone((Class)NSError);
          v61 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, 2048, _NativeDictionary.bridged()(), v73);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v63 = objc_msgSend(v62, sel_domain);
          v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          v66 = v65;

          if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v66 == v67)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
LABEL_25:
            swift_willThrow();
            swift_release();
            return result;
          }
          v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v68 & 1) != 0)
            goto LABEL_25;
          goto LABEL_33;
        }
      }
      __break(1u);
      goto LABEL_31;
    }
    swift_release_n();
    swift_willThrow();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v28 = swift_initStackObject();
    *(_OWORD *)(v28 + 16) = xmmword_18205C850;
    *(_QWORD *)(v28 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v28 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v28 + 40) = v29;
    *(_QWORD *)(v28 + 48) = 0xD000000000000021;
    *(_QWORD *)(v28 + 56) = 0x8000000182309EE0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v30 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v28 + 32, (uint64_t)&v82);
    v31 = v82.tv_sec;
    v32 = v82.tv_nsec;
    swift_retain();
    v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
    if ((v34 & 1) != 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v30[(v33 >> 6) + 8] |= 1 << v33;
    v35 = (__darwin_time_t *)(v30[6] + 16 * v33);
    *v35 = v31;
    v35[1] = v32;
    outlined init with take of Any(&v83, (_OWORD *)(v30[7] + 32 * v33));
    v36 = v30[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v30[2] = v38;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v39 = objc_allocWithZone((Class)NSError);
    v40 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v41 = objc_msgSend(v39, sel_initWithDomain_code_userInfo_, v40, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v42 = objc_msgSend(v41, sel_domain);
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v45 == v46)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0)
        goto LABEL_37;
    }
    swift_willThrow();
  }
  return result;
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.FormatStyle(Swift::String *a1)
{
  return Date.FormatStyle.parse(_:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181C5FD0C + 4 * byte_1820FCE6C[*v0]))(0x736C6F626D7973, 0xE700000000000000);
}

uint64_t sub_181C5FD0C()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_181C5FD20()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181C5FD38()
{
  return 0x7261646E656C6163;
}

unint64_t sub_181C5FD50()
{
  return 0xD000000000000015;
}

uint64_t sub_181C5FD6C()
{
  return 0x6C79745365746164;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  int v56;
  char v57;

  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.CodingKeys>);
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v1;
  v7 = v1[2];
  v6 = v1[3];
  v33 = v1[1];
  v34 = v6;
  v8 = v1[4];
  v35 = v1[5];
  v9 = *((unsigned __int16 *)v1 + 24);
  v29 = v1[7];
  HIDWORD(v28) = *((unsigned __int8 *)v1 + 64);
  v10 = *(_OWORD *)(v1 + 9);
  v31 = *(_OWORD *)(v1 + 11);
  v32 = v10;
  v30 = *(_OWORD *)(v1 + 13);
  v56 = *((unsigned __int8 *)v1 + 120);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v8 & 0xFF000000000000) == 0x3000000000000)
  {
    v11 = 0;
    LOBYTE(v12) = 0;
    v13 = 0;
    LOBYTE(v14) = 0;
    LOBYTE(v15) = 0;
    v16 = 0;
    LOBYTE(v17) = 12;
    LOBYTE(v9) = -1;
    LOBYTE(v18) = 2;
    LOBYTE(v19) = 9;
    LOBYTE(v20) = 6;
    LOBYTE(v8) = 1;
    LOBYTE(v21) = 5;
    LOBYTE(v5) = 3;
    LOBYTE(v7) = 3;
    LOBYTE(v22) = 3;
    LOBYTE(v23) = 3;
    LOBYTE(v24) = 1;
  }
  else
  {
    v21 = v7 >> 8;
    v12 = v7 >> 16;
    v22 = v7 >> 24;
    v14 = (v8 >> 8) & 1;
    v23 = v8 >> 16;
    v20 = v8 >> 24;
    v19 = HIDWORD(v8);
    v15 = v8 >> 40;
    v24 = HIWORD(v8);
    v18 = HIBYTE(v8);
    v17 = v9 >> 8;
    v13 = v34;
    v16 = v35;
    v11 = v33;
  }
  LOBYTE(v39) = v5;
  *((_QWORD *)&v39 + 1) = v11;
  v40 = v7;
  v41 = v21;
  v42 = v12;
  v43 = v22;
  v44 = v13;
  v45 = v8;
  v46 = v14;
  v47 = v23;
  v48 = v20;
  v49 = v19;
  v50 = v15;
  v51 = v24;
  v52 = v18;
  v53 = v16;
  v54 = v9;
  v55 = v17;
  v57 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
  v26 = v37;
  v25 = v38;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v26)
  {
    v39 = v32;
    v57 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v39 = v31;
    v57 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v39 = v30;
    v57 = 3;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v39) = v56;
    v57 = 4;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v39 = v29;
    BYTE8(v39) = BYTE4(v28);
    v57 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v4, v25);
}

uint64_t Date.FormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  char v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  char v52;
  char v53;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v53 = 0;
    lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = v38;
    v35 = *((_QWORD *)&v38 + 1);
    v36 = v39;
    v28 = v41;
    v25 = v42;
    v27 = v43;
    v26 = v44;
    v29 = v45;
    v30 = a2;
    v33 = v46;
    v34 = v40;
    v32 = v47;
    v31 = v48;
    v9 = v49;
    v10 = v50;
    v11 = v51;
    v53 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v11;
    v22 = v10;
    v23 = v9;
    v24 = v38;
    v53 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = v38;
    v53 = 3;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v19 = v38;
    v53 = 4;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = v38;
    v53 = 5;
    lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = BYTE8(v38);
    v15 = 256;
    if (!v25)
      v15 = 0;
    v52 = BYTE8(v38);
    v16 = v30;
    v17 = v15 | v28 | (v27 << 16) | (v26 << 24) | (v29 << 32);
    v18 = v38;
    *v30 = v37;
    v16[1] = v35;
    v16[2] = v36;
    v16[3] = v34;
    v16[4] = v17 | (v33 << 40) | (v32 << 48) | (v31 << 56);
    v16[5] = v23;
    *((_WORD *)v16 + 24) = v22 | ((_WORD)v21 << 8);
    v16[7] = v18;
    *((_BYTE *)v16 + 64) = v14;
    *(_OWORD *)(v16 + 9) = v24;
    *(_OWORD *)(v16 + 11) = v20;
    *(_OWORD *)(v16 + 13) = v19;
    *((_BYTE *)v16 + 120) = v13;
    *((_BYTE *)v16 + 121) = 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Date.FormatStyle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v3;
  int v4;
  uint64_t v5;
  Swift::UInt v6;
  Swift::UInt8 v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Swift::UInt v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  void *v52;
  void *v53;
  void *v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[144];
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  _QWORD v79[18];
  _BYTE v80[144];
  _BYTE v81[144];
  _BYTE v82[64];

  outlined init with take of LocalePreferences?(v1, (uint64_t)v82, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(unsigned __int8 *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 80);
  v58 = *(_QWORD *)(v1 + 112);
  v59 = *(_QWORD *)(v1 + 96);
  v6 = *(unsigned __int8 *)(v1 + 120);
  v7 = *(_BYTE *)(v1 + 121);
  specialized Optional<A>.hash(into:)(a1);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  ObjectType = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v9(ObjectType, v5) & 1) != 0)
  {
    v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease();
    v12 = v58;
    goto LABEL_62;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v79, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v81) == 1)
  {
    v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v61[0] == 2)
  {
    v13 = 0;
  }
  else
  {
    v13 = v61[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  v14 = v62;
  v55 = v6;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    v18 = v61;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v14 + 16));
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v60, &demangling cache variable for type metadata for LocalePreferences?);
    v18 = v60;
LABEL_22:
    outlined retain of LocalePreferences(v18);
    if (!v63)
      goto LABEL_17;
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v64)
      goto LABEL_18;
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 = v65;
    if (!v65)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v64)
    goto LABEL_24;
LABEL_18:
  Hasher._combine(_:)(0);
  v17 = v65;
  if (!v65)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_26:
  v19 = v66;
  v56 = v7;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v21 = v67;
  v20 = v68;
  v23 = v69;
  v22 = v70;
  v24 = v71;
  v52 = v69;
  v53 = v71;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v20;
    v26 = v23;
    v27 = v22;
    v28 = v22;
    v29 = v24;
    v30 = v21;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v24;
    v32 = v20;
    v33 = v23;
    v27 = v22;
    v34 = v22;
  }
  v54 = v21;
  v57 = v20;
  if (v20)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v35 = v20;
    _CFObject.hash(into:)();

    v36 = v52;
    if (v52)
      goto LABEL_34;
  }
  else
  {
    Hasher._combine(_:)(0);
    v36 = v52;
    if (v52)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v37 = v36;
      _CFObject.hash(into:)();

      if (v27)
        goto LABEL_35;
LABEL_39:
      Hasher._combine(_:)(0);
      v39 = v53;
      if (v53)
        goto LABEL_36;
      goto LABEL_40;
    }
  }
  Hasher._combine(_:)(0);
  if (!v27)
    goto LABEL_39;
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v38 = v27;
  _CFObject.hash(into:)();

  v39 = v53;
  if (v53)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v40 = v39;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }
LABEL_40:
  Hasher._combine(_:)(0);
  v40 = 0;
LABEL_41:

  v41 = v72;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v7 = v56;
  v6 = v55;
  v42 = v73;
  if (!v73)
  {
    Hasher._combine(_:)(0);
    if (v74)
      goto LABEL_46;
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v42);
  swift_bridgeObjectRelease();
  if (!v74)
    goto LABEL_48;
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  v12 = v58;
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v44 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }
  if (v77 == 2)
  {
    v45 = 0;
  }
  else
  {
    v45 = v77 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v45);
  if (v78 == 2)
  {
    v46 = 0;
  }
  else
  {
    v47 = v78 & 1;
    Hasher._combine(_:)(1u);
    v46 = v47;
  }
  Hasher._combine(_:)(v46);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_62:
  v48 = swift_getObjectType();
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 112);
  swift_unknownObjectRetain();
  v49(a1, v48, v59);
  swift_unknownObjectRelease();
  v50 = swift_getObjectType();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 120);
  swift_unknownObjectRetain();
  v51(a1, v50, v12);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int Date.FormatStyle.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  Swift::UInt8 v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  void *v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  uint64_t v53;
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  _QWORD v73[18];
  _BYTE v74[144];
  _BYTE v75[144];
  _BYTE v76[72];
  _BYTE v77[64];

  outlined init with take of LocalePreferences?(v0, (uint64_t)v77, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(unsigned __int8 *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 80);
  v53 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(unsigned __int8 *)(v0 + 120);
  v6 = *(_BYTE *)(v0 + 121);
  Hasher.init(_seed:)();
  specialized Optional<A>.hash(into:)((uint64_t)v76);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v3) & 1) != 0)
  {
    v9 = 1;
LABEL_8:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    v11 = v53;
    goto LABEL_62;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v10(v73, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    v9 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v56;
  v50 = v4;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    v17 = v55;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    v17 = v54;
LABEL_22:
    outlined retain of LocalePreferences(v17);
    if (!v57)
      goto LABEL_17;
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v58)
      goto LABEL_18;
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = v59;
    if (!v59)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v58)
    goto LABEL_24;
LABEL_18:
  Hasher._combine(_:)(0);
  v16 = v59;
  if (!v59)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v16);
  swift_bridgeObjectRelease();
LABEL_26:
  v18 = v60;
  v52 = v6;
  v51 = v5;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v20 = v61;
  v19 = v62;
  v22 = v63;
  v21 = v64;
  v23 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v19;
    v25 = v22;
    v26 = v21;
    v27 = v23;
    v28 = v20;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v29 = v23;
    v30 = v19;
    v31 = v22;
    v32 = v21;
  }
  v49 = v20;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v19;
    _CFObject.hash(into:)();

    if (v22)
      goto LABEL_34;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v22)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v34 = v22;
      _CFObject.hash(into:)();

      if (v21)
        goto LABEL_35;
LABEL_39:
      Hasher._combine(_:)(0);
      if (v23)
        goto LABEL_36;
      goto LABEL_40;
    }
  }
  Hasher._combine(_:)(0);
  if (!v21)
    goto LABEL_39;
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v35 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v36 = v23;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }
LABEL_40:
  Hasher._combine(_:)(0);
  v36 = 0;
LABEL_41:
  v5 = v51;

  v37 = v66;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = v52;
  v4 = v50;
  v38 = v67;
  if (!v67)
  {
    Hasher._combine(_:)(0);
    if (v68)
      goto LABEL_46;
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v38);
  swift_bridgeObjectRelease();
  if (!v68)
    goto LABEL_48;
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  v11 = v53;
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v71 == 2)
  {
    v41 = 0;
  }
  else
  {
    v41 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v72 == 2)
  {
    v42 = 0;
  }
  else
  {
    v43 = v72 & 1;
    Hasher._combine(_:)(1u);
    v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_62:
  v44 = swift_getObjectType();
  v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 112);
  swift_unknownObjectRetain();
  v45(v76, v44, v11);
  swift_unknownObjectRelease();
  v46 = swift_getObjectType();
  v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v47(v76, v46, v4);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Date.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle(_QWORD *a1)
{
  return Date.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt8 v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(_BYTE *, uint64_t, uint64_t);
  void *v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  _QWORD v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[72];
  _BYTE v75[64];

  outlined init with take of LocalePreferences?(v0, (uint64_t)v75, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(unsigned __int8 *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 80);
  v51 = *(_QWORD *)(v0 + 112);
  v52 = *(_QWORD *)(v0 + 96);
  v4 = *(unsigned __int8 *)(v0 + 120);
  v5 = *(_BYTE *)(v0 + 121);
  Hasher.init(_seed:)();
  specialized Optional<A>.hash(into:)((uint64_t)v74);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v3) & 1) != 0)
  {
    v8 = 1;
LABEL_8:
    Hasher._combine(_:)(v8);
    swift_unknownObjectRelease();
    v10 = v51;
    goto LABEL_61;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v9(v71, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    v8 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)&v53, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53 == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
LABEL_21:
    outlined retain of LocalePreferences(&v53);
    if (!v55)
      goto LABEL_17;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    goto LABEL_21;
  v14 = v4;
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  v4 = v14;
  if (!v55)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v56)
      goto LABEL_18;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = v57;
    if (!v57)
      goto LABEL_19;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v56)
    goto LABEL_23;
LABEL_18:
  Hasher._combine(_:)(0);
  v16 = v57;
  if (!v57)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  v17 = v58;
  v50 = v5;
  v49 = v4;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v19 = v59;
  v18 = v60;
  v20 = v61;
  v21 = v62;
  v22 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v18;
    v24 = v20;
    v25 = v21;
    v26 = v22;
    v27 = v19;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v28 = v22;
    v29 = v18;
    v30 = v20;
    v31 = v21;
  }
  v48 = v19;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v18;
    _CFObject.hash(into:)();

    if (v20)
      goto LABEL_33;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v20)
    {
LABEL_33:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v33 = v20;
      _CFObject.hash(into:)();

      if (v21)
        goto LABEL_34;
LABEL_38:
      Hasher._combine(_:)(0);
      if (v22)
        goto LABEL_35;
      goto LABEL_39;
    }
  }
  Hasher._combine(_:)(0);
  if (!v21)
    goto LABEL_38;
LABEL_34:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v34 = v21;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_35:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  v35 = 0;
LABEL_40:
  v5 = v50;

  v36 = v64;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v4 = v49;
  v10 = v51;
  v37 = v65;
  if (!v65)
  {
    Hasher._combine(_:)(0);
    if (v66)
      goto LABEL_45;
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v37);
  swift_bridgeObjectRelease();
  if (!v66)
    goto LABEL_47;
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v69 == 2)
  {
    v40 = 0;
  }
  else
  {
    v40 = v69 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v70 == 2)
  {
    v41 = 0;
  }
  else
  {
    v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_61:
  v43 = swift_getObjectType();
  v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 112);
  swift_unknownObjectRetain();
  v44(v74, v43, v52);
  swift_unknownObjectRelease();
  v45 = swift_getObjectType();
  v46 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 120);
  swift_unknownObjectRetain();
  v46(v74, v45, v10);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void static Date.FormatStyle.DateStyle.complete.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  return 0x65756C6156776172;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.DateStyle.encode(to:)(_QWORD *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
}

uint64_t Date.FormatStyle.DateStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.DateStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.DateStyle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.DateStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
}

void static Date.FormatStyle.TimeStyle.omitted.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Date.FormatStyle.TimeStyle.complete.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

void Date.FormatStyle.TimeStyle.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.FormatStyle.DateStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.TimeStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.TimeStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.FormatStyle.TimeStyle.encode(to:)(_QWORD *a1)
{
  return Date.FormatStyle.DateStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
}

uint64_t Date.FormatStyle.DateStyle.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  void (*v10)(void);

  v10 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.FormatStyle.TimeStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.DateStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys, a2);
}

uint64_t Date.FormatStyle.DateStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v13 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    *v13 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.TimeStyle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.TimeStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.TimeStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.TimeStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.DateStyle(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(void);

  v12 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Date.FormatStyle.parseStrategy.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  v3 = v1[5];
  v13 = v1[4];
  v2 = v13;
  v14 = v3;
  v15[0] = v1[6];
  v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  v5 = *(_OWORD *)((char *)v15 + 10);
  v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  v8 = v1[3];
  v11 = v1[2];
  v7 = v11;
  v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance Date.FormatStyle@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  v3 = v1[5];
  v13 = v1[4];
  v2 = v13;
  v14 = v3;
  v15[0] = v1[6];
  v4 = v15[0];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v1 + 106);
  v5 = *(_OWORD *)((char *)v15 + 10);
  v6 = v1[1];
  v10[0] = *v1;
  v10[1] = v6;
  v8 = v1[3];
  v11 = v1[2];
  v7 = v11;
  v12 = v8;
  *a1 = v10[0];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v4;
  *(_OWORD *)((char *)a1 + 106) = v5;
  return outlined retain of Date.FormatStyle((uint64_t)v10);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.discreteInput(before:)(Foundation::Date before)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  Foundation::Date v7;
  double v8;
  unsigned __int8 v9;
  Foundation::Date_optional result;

  v3 = v2;
  *(Foundation::Date *)&v7._time = (Foundation::Date)*v1;
  result = (Foundation::Date_optional)Date.FormatStyle.bound(for:isLower:)(v7, (Swift::Bool)&v7);
  v4 = v9;
  if (v9 == 2)
  {
    v5 = 0.0;
  }
  else
  {
    v5 = v8;
    if ((v9 & 1) != 0)
    {
      v6 = 0.0 - v8;
      if (0.0 - v8 < INFINITY)
        *(_QWORD *)&v6 += (*(uint64_t *)&v6 >> 63) | 1;
      v5 = -v6;
    }
  }
  *(double *)v3 = v5;
  *(_BYTE *)(v3 + 8) = v4 == 2;
  result.value = *(Foundation::Date *)&v5;
  return result;
}

Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional __swiftcall Date.FormatStyle.bound(for:isLower:)(Foundation::Date a1, Swift::Bool isLower)
{
  char v2;
  uint64_t v3;
  __int128 *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  os_unfair_lock_s *v14;
  char v15;
  Swift::Double v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24[5];
  _BYTE v25[42];
  __int128 v26;
  __int128 v27;
  Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional result;

  v5 = v2;
  v6 = v3;
  v7 = *(_QWORD *)isLower;
  *(_OWORD *)&v25[26] = *(__int128 *)((char *)v4 + 106);
  v8 = v4[6];
  *(_OWORD *)v25 = v4[5];
  *(_OWORD *)&v25[16] = v8;
  v9 = v4[4];
  v10 = v4[1];
  v24[0] = *v4;
  v24[1] = v10;
  v11 = v4[3];
  v24[2] = v4[2];
  v24[3] = v11;
  v24[4] = v9;
  v26 = *(_OWORD *)&v25[8];
  v27 = *(_OWORD *)&v25[24];
  v22 = *(_OWORD *)&v25[8];
  v23 = *(_OWORD *)&v25[24];
  outlined retain of Locale((uint64_t)&v27);
  outlined retain of Locale((uint64_t)&v26);
  Calendar.timeZone.setter((uint64_t *)&v22);
  v22 = v23;
  v21 = v7;
  v12 = one-time initialization token for updateScheduleCache;
  swift_unknownObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = (uint64_t *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 16);
  v14 = (os_unfair_lock_s *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)(v13, v24, (uint64_t)&v19);
  os_unfair_lock_unlock(v14);
  swift_release();
  v17 = v19;
  v18 = v20;
  Calendar.bound(for:isLower:updateSchedule:)((double *)&v21, v5 & 1, &v17, v6);
  v15 = swift_unknownObjectRelease_n();
  result.value.bound._time = v16;
  result.value.includedInRangeOfInput = v15;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.discreteInput(after:)(Foundation::Date after)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  double v5;
  Foundation::Date v6;
  double v7;
  unsigned __int8 v8;
  Foundation::Date_optional result;

  v3 = v2;
  *(Foundation::Date *)&v6._time = (Foundation::Date)*v1;
  result = (Foundation::Date_optional)Date.FormatStyle.bound(for:isLower:)(v6, (Swift::Bool)&v6);
  v4 = v8;
  if (v8 == 2)
  {
    v5 = 0.0;
  }
  else
  {
    v5 = v7;
    if ((v8 & 1) != 0)
    {
      v5 = v7 + 0.0;
      if (v7 + 0.0 < INFINITY)
        *(_QWORD *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
    }
  }
  *(double *)v3 = v5;
  *(_BYTE *)(v3 + 8) = v4 == 2;
  result.value = *(Foundation::Date *)&v5;
  return result;
}

uint64_t Calendar.bound(for:isLower:updateSchedule:)@<X0>(double *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  double v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  Foundation::Date v17;
  uint64_t v18;
  double time;
  uint64_t *v20;
  char v21;
  double v22;
  char v23;
  uint64_t v24;
  double v25;
  uint64_t result;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 __dst[18];
  double v33;
  uint64_t v34;
  double v35;
  char v36;
  _BYTE __src[296];

  v7 = *a1;
  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  v10 = *v4;
  v11 = v4[1];
  __dst[0] = 0uLL;
  v33 = 0.0;
  v34 = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)&v33, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  ObjectType = swift_getObjectType();
  memcpy(__dst, __src, 0x11AuLL);
  (*(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v11 + 176))(&v35, __dst, ObjectType, v11);
  outlined release of DateComponents((uint64_t)__src);
  if ((v36 & 1) != 0)
  {
    v13 = -978307200.0;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      v14 = v7 < v13;
      goto LABEL_6;
    }
  }
  else
  {
    v13 = v35;
    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  v14 = v13 < v7;
LABEL_6:
  v15 = v14;
  *(_QWORD *)&__dst[0] = v8;
  BYTE8(__dst[0]) = v9;
  ICUDateFormatter.DateFormatInfo.UpdateSchedule.updateIntervals.getter();
  v18 = *(_QWORD *)(v16 + 16);
  if (!v18)
  {
    result = swift_bridgeObjectRelease();
LABEL_34:
    time = 0.0;
    v27 = 2;
    goto LABEL_35;
  }
  v28 = v15;
  v29 = a4;
  time = 0.0;
  v20 = (uint64_t *)(v16 + 40);
  v21 = 1;
  do
  {
    v23 = *((_BYTE *)v20 - 8);
    v24 = *v20;
    *(_QWORD *)&__dst[0] = v10;
    *((_QWORD *)&__dst[0] + 1) = v11;
    v35 = v7;
    v31 = a2 & 1;
    v30 = v23;
    Calendar.advance(_:_:by:_:)(&v35, &v31, v24, &v30, (uint64_t)&v33, v17);
    if ((_BYTE)v34)
      v25 = time;
    else
      v25 = v33;
    if ((v34 & 1) != 0)
    {
      time = v25;
      v21 &= v34;
    }
    else
    {
      v17._time = v33;
      if (time >= v33)
        v22 = time;
      else
        v22 = v33;
      if (time < v33)
        v17._time = time;
      if ((a2 & 1) != 0)
        v17._time = v22;
      if ((v21 & 1) != 0)
        time = v25;
      else
        time = v17._time;
      if ((v21 & 1) != 0)
        v21 &= v34;
      else
        v21 = 0;
    }
    v20 += 2;
    --v18;
  }
  while (v18);
  result = swift_bridgeObjectRelease();
  a4 = v29;
  if ((v21 & 1) != 0)
    goto LABEL_34;
  v27 = v28;
  if (v7 == time)
    v27 = 1;
LABEL_35:
  *(double *)a4 = time;
  *(_BYTE *)(a4 + 8) = v27;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.input(before:)(Foundation::Date before)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v11 >= v4;
  v8 = v11;
  if (v11 >= v4)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double static Calendar.nextAccuracyStep(for:direction:)@<D0>(double *a1@<X0>, _BYTE *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;

  v3 = *a1;
  v4 = 0.0 - *a1;
  if (v4 < INFINITY)
    *(_QWORD *)&v4 = ((COERCE__INT64(0.0 - *a1) >> 63) | 1) + COERCE__INT64(0.0 - *a1);
  v5 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v5 < INFINITY)
    *(_QWORD *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
  v6 = (fabs(v3 + v4) + vabdd_f64(v3, v5 / -1000.0 + -978307200.0)) * 9.0;
  v7 = -v6;
  if (!*a2)
    v7 = v6;
  result = v3 + v7;
  *a3 = result;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.input(after:)(Foundation::Date after)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v4 >= v11;
  v8 = v11;
  if (v4 >= v11)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.FormatStyle(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.FormatStyle.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.FormatStyle(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.FormatStyle.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.discreteInput(before:)(Foundation::Date before)
{
  Foundation::Date *v1;

  return Date.FormatStyle.discreteInput(before:)(*(Foundation::Date *)&v1->_time);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.discreteInput(after:)(Foundation::Date after)
{
  Foundation::Date *v1;

  return Date.FormatStyle.discreteInput(after:)(*(Foundation::Date *)&v1->_time);
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.input(before:)(Foundation::Date before)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v11 >= v4;
  v8 = v11;
  if (v11 >= v4)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.FormatStyle.Attributed.input(after:)(Foundation::Date after)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v4 >= v11;
  v8 = v11;
  if (v4 >= v11)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.FormatStyle.Attributed(Foundation::Date *a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.FormatStyle.discreteInput(before:)(*(Foundation::Date *)&a1->_time);
  return result;
}

double protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Date.FormatStyle.Attributed(Foundation::Date *a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.FormatStyle.discreteInput(after:)(*(Foundation::Date *)&a1->_time);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.FormatStyle.Attributed(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.FormatStyle.Attributed.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.FormatStyle.Attributed(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.FormatStyle.Attributed.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

double *Calendar.advance(_:_:by:_:)@<X0>(double *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>, Foundation::Date a6@<D0>)
{
  uint64_t *v6;
  double v9;
  int v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49[2];
  char v50;
  __int16 v51;
  double v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[36];
  uint64_t v56;
  uint64_t v57;
  double __dst[36];
  _BYTE __src[288];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v9 = *result;
  v10 = *a2;
  v11 = *a4;
  v13 = *v6;
  v12 = v6[1];
  if (!*a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
    v18 = static _SetStorage.allocate(capacity:)();
    v19 = v18 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(0);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v18 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    v24 = *(_QWORD *)(v18 + 56 + 8 * (v22 >> 6));
    v25 = 1 << v22;
    v26 = *(_QWORD *)(v18 + 48);
    if (((1 << v22) & v24) == 0)
      goto LABEL_18;
    if (!*(_BYTE *)(v26 + v22))
      goto LABEL_20;
    v27 = ~v21;
    v22 = (v22 + 1) & v27;
    v23 = v22 >> 6;
    v24 = *(_QWORD *)(v19 + 8 * (v22 >> 6));
    v25 = 1 << v22;
    if ((v24 & (1 << v22)) == 0)
      goto LABEL_18;
    if (!*(_BYTE *)(v26 + v22))
      goto LABEL_20;
    v22 = (v22 + 1) & v27;
    v23 = v22 >> 6;
    v24 = *(_QWORD *)(v19 + 8 * (v22 >> 6));
    v25 = 1 << v22;
    if ((v24 & (1 << v22)) == 0)
      goto LABEL_18;
    if (!*(_BYTE *)(v26 + v22))
      goto LABEL_20;
    v22 = (v22 + 1) & v27;
    v23 = v22 >> 6;
    v24 = *(_QWORD *)(v19 + 8 * (v22 >> 6));
    v25 = 1 << v22;
    if ((v24 & (1 << v22)) != 0)
    {
      while (*(_BYTE *)(v26 + v22))
      {
        v22 = (v22 + 1) & v27;
        v23 = v22 >> 6;
        v24 = *(_QWORD *)(v19 + 8 * (v22 >> 6));
        v25 = 1 << v22;
        if ((v24 & (1 << v22)) == 0)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      *(_QWORD *)(v19 + 8 * v23) = v25 | v24;
      *(_BYTE *)(v26 + v22) = 0;
      v28 = *(_QWORD *)(v18 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        goto LABEL_54;
      }
      *(_QWORD *)(v18 + 16) = v30;
    }
LABEL_20:
    v55[0] = v13;
    v55[1] = v12;
    v31 = swift_bridgeObjectRetain();
    Calendar.ComponentSet.init(_:)(v31, &v54);
    v32 = 1.59271755e13;
    if (v9 <= 1.59271755e13)
      v32 = v9;
    *(_QWORD *)__src = fmax(v32, -2.11845067e11);
    Calendar._dateComponents(_:from:)(&v54, (double *)__src, &v60);
    swift_release();
    result = (double *)outlined release of DateComponents((uint64_t)&v60);
    if ((v63 & 1) != 0)
    {
      *(_QWORD *)a5 = 0;
LABEL_52:
      *(_BYTE *)(a5 + 8) = 1;
      return result;
    }
    v33 = v62;
    v56 = v13;
    v57 = v12;
    v52 = v9;
    v53 = 0uLL;
    v49[0] = 0;
    v49[1] = 0;
    if (v10)
    {
      v34 = v62 - a3;
      if (!__OFSUB__(v62, a3))
        goto LABEL_37;
      __break(1u);
    }
    v34 = v33 + a3;
    if (__OFADD__(v33, a3))
    {
      __break(1u);
      goto LABEL_56;
    }
LABEL_37:
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v53, v49, v34, 0, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    memcpy(__dst, __src, 0x11AuLL);
    v51 = v10;
    v50 = 0;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v52, __dst, (char *)&v51 + 1, &v50, (char *)&v51, a5);
    return (double *)outlined release of DateComponents((uint64_t)__src);
  }
  if ((_DWORD)v11 != 13)
  {
    if (!*a2)
    {
      v60 = *v6;
      v61 = v12;
      __asm { BR              X11 }
    }
    v60 = *v6;
    v61 = v12;
    LOBYTE(v55[0]) = v11;
    if (!__OFSUB__(0, a3))
    {
      __dst[0] = v9;
      *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v55, -a3, a6, (Swift::Bool)__dst);
      if ((__src[8] & 1) != 0)
      {
        *(_QWORD *)a5 = *(_QWORD *)__src;
        goto LABEL_52;
      }
      *(_QWORD *)&__src[8] = 0;
      *(_QWORD *)__src = 0;
      __dst[1] = 0.0;
      __dst[0] = 0.0;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)((__int128 *)__src, (uint64_t *)__dst, 0, 1, 0, 1, 0, 1, (uint64_t)&v60, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
      *(_BYTE *)(swift_allocObject() + 32) = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
      v35 = static _SetStorage.allocate(capacity:)();
      v36 = v35 + 56;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v11);
      v37 = Hasher._finalize()();
      v38 = -1 << *(_BYTE *)(v35 + 32);
      v39 = v37 & ~v38;
      v40 = v39 >> 6;
      v41 = *(_QWORD *)(v35 + 56 + 8 * (v39 >> 6));
      v42 = 1 << v39;
      v43 = *(_QWORD *)(v35 + 48);
      if (((1 << v39) & v41) != 0)
      {
        if (*(unsigned __int8 *)(v43 + v39) == (_DWORD)v11)
          goto LABEL_49;
        v44 = ~v38;
        v39 = (v39 + 1) & v44;
        v40 = v39 >> 6;
        v41 = *(_QWORD *)(v36 + 8 * (v39 >> 6));
        v42 = 1 << v39;
        if ((v41 & (1 << v39)) != 0)
        {
          if (*(unsigned __int8 *)(v43 + v39) == (_DWORD)v11)
            goto LABEL_49;
          v39 = (v39 + 1) & v44;
          v40 = v39 >> 6;
          v41 = *(_QWORD *)(v36 + 8 * (v39 >> 6));
          v42 = 1 << v39;
          if ((v41 & (1 << v39)) != 0)
          {
            if (*(unsigned __int8 *)(v43 + v39) == (_DWORD)v11)
              goto LABEL_49;
            v39 = (v39 + 1) & v44;
            v40 = v39 >> 6;
            v41 = *(_QWORD *)(v36 + 8 * (v39 >> 6));
            v42 = 1 << v39;
            if ((v41 & (1 << v39)) != 0)
            {
              while (*(unsigned __int8 *)(v43 + v39) != (_DWORD)v11)
              {
                v39 = (v39 + 1) & v44;
                v40 = v39 >> 6;
                v41 = *(_QWORD *)(v36 + 8 * (v39 >> 6));
                v42 = 1 << v39;
                if ((v41 & (1 << v39)) == 0)
                  goto LABEL_47;
              }
LABEL_49:
              swift_setDeallocating();
              swift_deallocClassInstance();
              v56 = v13;
              v57 = v12;
              v47 = swift_bridgeObjectRetain();
              Calendar.ComponentSet.init(_:)(v47, &v54);
              v48 = 1.59271755e13;
              if (v9 <= 1.59271755e13)
                v48 = v9;
              __dst[0] = fmax(v48, -2.11845067e11);
              Calendar._dateComponents(_:from:)(&v54, __dst, __src);
              swift_release();
              outlined release of DateComponents((uint64_t)__src);
              __asm { BR              X9 }
            }
          }
        }
      }
LABEL_47:
      *(_QWORD *)(v36 + 8 * v40) = v42 | v41;
      *(_BYTE *)(v43 + v39) = v11;
      v45 = *(_QWORD *)(v35 + 16);
      v29 = __OFADD__(v45, 1);
      v46 = v45 + 1;
      if (!v29)
      {
        *(_QWORD *)(v35 + 16) = v46;
        goto LABEL_49;
      }
LABEL_56:
      __break(1u);
      JUMPOUT(0x181C63B1CLL);
    }
LABEL_54:
    __break(1u);
    JUMPOUT(0x181C63B10);
  }
  v14 = (v9 + 978307200.0) * 1000.0;
  v15 = (double)a3 * 0.000001;
  v16 = v15 * floor(v14 / v15);
  if (v14 >= v16)
    v14 = v16;
  if ((v10 & 1) != 0)
  {
    v17 = v14 / 1000.0 + -978307200.0;
    if (v9 < v17)
      v17 = *result;
  }
  else
  {
    v17 = (v15 + v14) / 1000.0 + -978307200.0;
    if (v9 >= v17)
      v17 = *result;
  }
  *(double *)a5 = v17;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  v2 = 0;
  v3 = 1;
  switch((int)result)
  {
    case 0:
      goto LABEL_20;
    case 1:
      v2 = 1;
      goto LABEL_20;
    case 2:
      v2 = 4;
      goto LABEL_20;
    case 3:
      v2 = 9;
      goto LABEL_20;
    case 4:
    case 5:
    case 15:
    case 16:
      v2 = 12;
      goto LABEL_20;
    case 6:
      v2 = 13;
      goto LABEL_20;
    case 7:
      v2 = 14;
      goto LABEL_20;
    case 8:
      v2 = 15;
      goto LABEL_20;
    case 9:
      v2 = 7;
      goto LABEL_20;
    case 10:
      v2 = 10;
      goto LABEL_20;
    case 11:
      v2 = 8;
      goto LABEL_20;
    case 12:
      v2 = 5;
      goto LABEL_20;
    case 13:
      v2 = 6;
      goto LABEL_20;
    case 14:
      v2 = 11;
      goto LABEL_20;
    case 17:
      v2 = 16;
LABEL_20:
      v3 = v2;
      goto LABEL_21;
    case 18:
    case 20:
    case 30:
LABEL_21:
      *a2 = v3;
      break;
    case 19:
    case 25:
      *a2 = 7;
      break;
    case 21:
      *a2 = 9;
      break;
    case 22:
      *a2 = 14;
      break;
    case 23:
    case 24:
    case 29:
    case 31:
    case 32:
    case 33:
      *a2 = 16;
      break;
    case 26:
      *a2 = 4;
      break;
    case 27:
    case 28:
      *a2 = 3;
      break;
    case 35:
    case 36:
      *a2 = 11;
      break;
    default:
      *a2 = 17;
      break;
  }
  return result;
}

void Date.FormatStyle.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  _OWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  _OWORD v31[2];
  char v32;
  __int128 v33;
  char v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  _OWORD v44[6];
  _OWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = v3[5];
  v44[4] = v3[4];
  v44[5] = v5;
  v45[0] = v3[6];
  *(_OWORD *)((char *)v45 + 10) = *(_OWORD *)((char *)v3 + 106);
  v6 = v3[1];
  v44[0] = *v3;
  v44[1] = v6;
  v7 = v3[3];
  v44[2] = v3[2];
  v44[3] = v7;
  if (a1 >> 14 >= a2 >> 14)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  v8 = v3[5];
  v41 = v3[4];
  v42 = v8;
  v43[0] = v3[6];
  *(_OWORD *)((char *)v43 + 10) = *(_OWORD *)((char *)v3 + 106);
  v9 = v3[1];
  v38 = *v3;
  v39 = v9;
  v10 = v3[3];
  *(_OWORD *)v40 = v3[2];
  *(_OWORD *)&v40[16] = v10;
  outlined retain of Date.FormatStyle((uint64_t)v44);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v38, (uint64_t)v31);
  v38 = v31[0];
  v39 = v31[1];
  v40[0] = v32;
  *(_OWORD *)&v40[8] = v33;
  v40[24] = v34;
  v41 = v35;
  LOBYTE(v42) = v36;
  *((_QWORD *)&v42 + 1) = v37;
  v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v11)
    goto LABEL_17;
  v12 = String.subscript.getter();
  v16 = v15;
  if (!((v12 ^ v13) >> 14)
    || (v17 = v12, v18 = v13, v19 = v14, (*(_BYTE *)(v11 + 24) & 1) == 0)
    && (Substring.subscript.getter(), v20 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v20 & 1) != 0))
  {
    swift_release();
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  *(_QWORD *)&v38 = v17;
  *((_QWORD *)&v38 + 1) = v18;
  *(_QWORD *)&v39 = v19;
  *((_QWORD *)&v39 + 1) = v16;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  v21 = String.init<A>(_:)();
  v23 = v22;
  *(_QWORD *)&v38 = v21;
  *((_QWORD *)&v38 + 1) = v22;
  udat_getCalendar();
  LODWORD(v31[0]) = 0;
  ucal_clone();
  if (SLODWORD(v31[0]) > 0)
  {
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v29 = specialized _copyCollectionToContiguousArray<A>(_:)(v21, v23);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  v24 = String.Index.utf16Offset<A>(in:)();
  if (v24 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_21;
  }
  v25 = v24;
  if (v24 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  v30 = v24;
  if (v29[2] >> 31)
    goto LABEL_22;
  udat_parseCalendar();
  swift_release();
  if (SLODWORD(v31[0]) > 0 || v25 == v30 || (ucal_getMillis(), SLODWORD(v31[0]) >= 1))
  {
    ucal_close();
    goto LABEL_15;
  }
  v27 = v26 / 1000.0 + -978307200.0;
  ucal_close();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v38 = v17;
  *((_QWORD *)&v38 + 1) = v18;
  *(_QWORD *)&v39 = v19;
  *((_QWORD *)&v39 + 1) = v16;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v28 = String.Index.init<A>(utf16Offset:in:)();
  swift_release();
  *(_QWORD *)a3 = v28;
  *(double *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = 0;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.FormatStyle(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  Date.FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.FormatStyle()
{
  lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t specialized static Date.FormatStyle.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  BOOL v28;
  char v29;
  char v30;
  uint64_t result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unsigned __int8 v44[8];
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  uint64_t v49;
  __int16 v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  __int16 v58;
  unsigned __int8 v59[8];
  uint64_t v60;
  __int16 v61;
  char v62;
  char v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  __int16 v73;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  v8 = *(unsigned __int8 *)(a1 + 120);
  v9 = *(unsigned __int8 *)(a1 + 121);
  v10 = a2[4];
  v11 = a2[7];
  v12 = *((unsigned __int8 *)a2 + 64);
  v13 = *(_OWORD *)(a2 + 9);
  v14 = *(_OWORD *)(a2 + 11);
  v15 = *(_OWORD *)(a2 + 13);
  v16 = *((unsigned __int8 *)a2 + 120);
  v17 = v10 & 0xFF000000000000;
  v18 = *((unsigned __int8 *)a2 + 121);
  if ((v2 & 0xFF000000000000) == 0x3000000000000)
  {
    if (v17 != 0x3000000000000)
      return 0;
  }
  else
  {
    if (v17 == 0x3000000000000)
      return 0;
    v19 = *(_QWORD *)(a1 + 8);
    v44[0] = *(_QWORD *)a1;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
    v45 = v19;
    v47 = BYTE2(v20);
    v46 = v20;
    v48 = BYTE3(v20);
    v49 = v21;
    v50 = v2 & 0x1FF;
    v51 = BYTE2(v2);
    v52 = BYTE3(v2);
    v53 = BYTE4(v2);
    v54 = BYTE5(v2);
    v55 = BYTE6(v2);
    v22 = *(_QWORD *)(a1 + 40);
    LOWORD(v19) = *(_WORD *)(a1 + 48);
    v56 = HIBYTE(v2);
    v57 = v22;
    v23 = *a2;
    v24 = a2[1];
    v58 = v19;
    v59[0] = v23;
    v25 = a2[2];
    v26 = a2[3];
    v60 = v24;
    v62 = BYTE2(v25);
    v61 = v25;
    v63 = BYTE3(v25);
    v64 = v26;
    v65 = v10 & 0x1FF;
    v66 = BYTE2(v10);
    v67 = BYTE3(v10);
    v68 = BYTE4(v10);
    v69 = BYTE5(v10);
    v70 = BYTE6(v10);
    v71 = HIBYTE(v10);
    v72 = a2[5];
    v27 = *((_WORD *)a2 + 24);
    v73 = v27;
    v34 = v15;
    v36 = v7;
    v38 = v14;
    v40 = v6;
    v32 = v13;
    v33 = v5;
    v28 = specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(v44, v59);
    v13 = v32;
    v5 = v33;
    v14 = v38;
    v6 = v40;
    v15 = v34;
    v7 = v36;
    if (!v28)
      return 0;
  }
  if ((v4 & 1) != 0)
  {
    if (!v12)
      return 0;
  }
  else
  {
    if (v3 == v11)
      v29 = v12;
    else
      v29 = 1;
    if ((v29 & 1) != 0)
      return 0;
  }
  v39 = v14;
  v41 = v6;
  v35 = v15;
  v37 = v7;
  v42 = v13;
  v43 = v5;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) == 0)
    return 0;
  v42 = v39;
  v43 = v41;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42) & 1) == 0)
    return 0;
  v42 = v35;
  v43 = v37;
  v30 = specialized static Calendar.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v42);
  result = 0;
  if ((v30 & 1) != 0 && v8 == v16)
    return v9 ^ v18 ^ 1u;
  return result;
}

uint64_t specialized static Date.AttributedStyle.InnerStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 *v14;
  int v15;
  __int128 *v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  _OWORD v41[8];
  __int128 v42[8];
  __int128 v43[8];
  _OWORD v44[8];
  __int128 v45[8];
  _OWORD v46[8];

  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, v42);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v43);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v44);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v45);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v42, v46);
  if (_s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v46) == 1)
  {
    v3 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v46);
    v25 = *(_OWORD *)(v3 + 16);
    v26 = *(_OWORD *)v3;
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(_QWORD *)(v3 + 56);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v41);
    v8 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41);
    v9 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    if (v8 == 1)
    {
      v10 = *(_QWORD *)(v9 + 48);
      v11 = *(_QWORD *)(v9 + 56);
      v34 = v26;
      v35 = v25;
      *(_QWORD *)&v36 = v4;
      *((_QWORD *)&v36 + 1) = v5;
      *(_QWORD *)&v37 = v6;
      *((_QWORD *)&v37 + 1) = v7;
      v12 = *(_OWORD *)(v9 + 16);
      v27 = *(_OWORD *)v9;
      v28 = v12;
      v29 = *(_OWORD *)(v9 + 32);
      *(_QWORD *)&v30 = v10;
      *((_QWORD *)&v30 + 1) = v11;
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      v13 = specialized static Date.VerbatimFormatStyle.== infix(_:_:)(&v34, &v27);
LABEL_7:
      v17 = v13;
      outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)((uint64_t)v44);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
      return v17 & 1;
    }
  }
  else
  {
    v14 = (__int128 *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v46);
    outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v43, v41);
    v15 = _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg((uint64_t)v41);
    v16 = (__int128 *)_s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_((uint64_t)v41);
    if (v15 != 1)
    {
      v18 = v14[5];
      v38 = v14[4];
      v39 = v18;
      v40[0] = v14[6];
      *(_OWORD *)((char *)v40 + 10) = *(__int128 *)((char *)v14 + 106);
      v19 = v14[1];
      v34 = *v14;
      v35 = v19;
      v20 = v14[3];
      v36 = v14[2];
      v37 = v20;
      v21 = v16[5];
      v31 = v16[4];
      v32 = v21;
      v33[0] = v16[6];
      *(_OWORD *)((char *)v33 + 10) = *(__int128 *)((char *)v16 + 106);
      v22 = v16[1];
      v27 = *v16;
      v28 = v22;
      v23 = v16[3];
      v29 = v16[2];
      v30 = v23;
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
      v13 = specialized static Date.FormatStyle.== infix(_:_:)((uint64_t)&v34, (uint64_t *)&v27);
      goto LABEL_7;
    }
  }
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of Date.AttributedStyle.InnerStyle);
  outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)((uint64_t)v44);
  v17 = 0;
  return v17 & 1;
}

uint64_t specialized Date.FormatStyle.DateFieldCollection.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  char v35;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.DateFieldCollection.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v35 = 0;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v9 = v31;
  v35 = 1;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v34 = v9;
  v10 = v31;
  v11 = v32;
  v35 = 2;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v29 = v10;
  v30 = v11;
  LOBYTE(v10) = v31;
  v35 = 3;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v12 = v31;
  v35 = 4;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v28 = v12;
  v13 = v31;
  v35 = 5;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v25 = v31;
  v26 = v32;
  v27 = v13;
  v14 = v33;
  v35 = 6;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v24 = v14;
  LOBYTE(v14) = v31;
  v35 = 7;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v23 = v31;
  v35 = 8;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v22 = v31;
  v35 = 9;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21 = v31;
  v35 = 10;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v20 = v31;
  v35 = 11;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v19 = v31;
  v35 = 12;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v18 = v31;
  HIDWORD(v17) = v32;
  v35 = 13;
  lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v31;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_BYTE *)a2 = v34;
  *(_QWORD *)(a2 + 8) = v29;
  *(_BYTE *)(a2 + 16) = v30;
  *(_BYTE *)(a2 + 17) = v10;
  *(_BYTE *)(a2 + 18) = v28;
  *(_BYTE *)(a2 + 19) = v27;
  *(_QWORD *)(a2 + 24) = v25;
  *(_BYTE *)(a2 + 32) = v26;
  *(_BYTE *)(a2 + 33) = v24;
  *(_BYTE *)(a2 + 34) = v14;
  *(_BYTE *)(a2 + 35) = v23;
  *(_BYTE *)(a2 + 36) = v22;
  *(_BYTE *)(a2 + 37) = v21;
  *(_BYTE *)(a2 + 38) = v20;
  *(_BYTE *)(a2 + 39) = v19;
  *(_QWORD *)(a2 + 40) = v18;
  *(_BYTE *)(a2 + 48) = BYTE4(v17);
  *(_BYTE *)(a2 + 49) = v15;
  return result;
}

uint64_t _s10Foundation4DateV15AttributedStyleV05InnerD0OWOg(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 120) >> 15;
}

uint64_t _s10Foundation4DateV15AttributedStyleV05InnerD0OWOj0_(uint64_t result)
{
  *(_WORD *)(result + 120) &= ~0x8000u;
  return result;
}

uint64_t outlined consume of Date.AttributedStyle.InnerStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (a16 < 0)
    swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t outlined copy of Date.AttributedStyle.InnerStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  swift_unknownObjectRetain();
  if (a16 < 0)
    swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_1E0F2D400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_1E0F2D400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_1E0F2D400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.CodingKeys, &unk_1E0F2D400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.CodingKeys and conformance Date.AttributedStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle, &type metadata for Date.AttributedStyle.InnerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle, &type metadata for Date.AttributedStyle.InnerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle, &type metadata for Date.AttributedStyle.InnerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle and conformance Date.AttributedStyle.InnerStyle);
  }
  return result;
}

uint64_t specialized Date.FormatStyle.DateFieldCollection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6386277 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1918985593 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72657472617571 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x68746E6F6DLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1801807223 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7954788 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x616559664F796164 && a2 == 0xE900000000000072
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7961646B656577 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6F69726550796164 && a2 == 0xE900000000000064
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1920298856 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7246646E6F636573 && a2 == 0xEE006E6F69746361
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xEE006C6F626D7953)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

uint64_t specialized Date.AttributedStyle.InnerStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x745374616D726F66 && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000182309F10)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys, &unk_1E0F2A990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys, &unk_1E0F2A990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys, &unk_1E0F2A990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed.CodingKeys, &unk_1E0F2A990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed.CodingKeys and conformance Date.FormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t outlined release of Date.FormatStyle(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.CodingKeys, &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.CodingKeys, &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.CodingKeys, &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.CodingKeys, &type metadata for Date.FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.CodingKeys and conformance Date.FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateStyle, &type metadata for Date.FormatStyle.DateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateStyle, &type metadata for Date.FormatStyle.DateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateStyle, &type metadata for Date.FormatStyle.DateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle and conformance Date.FormatStyle.DateStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys, &unk_1E0F2A8D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys, &unk_1E0F2A8D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys, &unk_1E0F2A8D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateStyle.CodingKeys, &unk_1E0F2A8D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateStyle.CodingKeys and conformance Date.FormatStyle.DateStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys, &unk_1E0F2A6E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys, &unk_1E0F2A6E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys, &unk_1E0F2A6E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.TimeStyle.CodingKeys, &unk_1E0F2A6E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle.CodingKeys and conformance Date.FormatStyle.TimeStyle.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.AttributedStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle);
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle and conformance Date.AttributedStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle, &type metadata for Date.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle, &type metadata for Date.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle, &type metadata for Date.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle, &type metadata for Date.AttributedStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle and conformance Date.AttributedStyle);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed, &type metadata for Date.FormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed, &type metadata for Date.FormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed, &type metadata for Date.FormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed, &type metadata for Date.FormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Attributed, &type metadata for Date.FormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.TimeStyle, &type metadata for Date.FormatStyle.TimeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.TimeStyle and conformance Date.FormatStyle.TimeStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.FormatStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181C6595C(uint64_t a1)
{
  swift_retain();
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  return swift_release();
}

uint64_t sub_181C659A0()
{
  return 8;
}

_QWORD *sub_181C659AC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for Date.AttributedStyle()
{
  return &type metadata for Date.AttributedStyle;
}

uint64_t destroy for Date.FormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.FormatStyle(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.FormatStyle(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  v7 = *((_QWORD *)a2 + 7);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_BYTE *)(a1 + 121) = *((_BYTE *)a2 + 121);
  return a1;
}

uint64_t assignWithTake for Date.FormatStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 122))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 122) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 122) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Attributed()
{
  return &type metadata for Date.FormatStyle.Attributed;
}

void *type metadata accessor for Date.FormatStyle.TimeStyle.CodingKeys()
{
  return &unk_1E0F2A6E0;
}

void *type metadata accessor for Date.FormatStyle.DateStyle.CodingKeys()
{
  return &unk_1E0F2A8D8;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181C65D1C + 4 * byte_1820FCE9C[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181C65D50 + 4 * byte_1820FCE97[v4]))();
}

uint64_t sub_181C65D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C65D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C65D60);
  return result;
}

uint64_t sub_181C65D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C65D74);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181C65D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C65D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.CodingKeys()
{
  return &type metadata for Date.FormatStyle.CodingKeys;
}

void *type metadata accessor for Date.FormatStyle.Attributed.CodingKeys()
{
  return &unk_1E0F2A990;
}

void *type metadata accessor for Date.AttributedStyle.CodingKeys()
{
  return &unk_1E0F2D400;
}

uint64_t destroy for Date.AttributedStyle(uint64_t a1)
{
  return outlined consume of Date.AttributedStyle.InnerStyle(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_WORD *)(a1 + 120));
}

uint64_t initializeWithCopy for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_WORD *)(a2 + 120);
  outlined copy of Date.AttributedStyle.InnerStyle(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_WORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v27 = *(_QWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 88);
  v29 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 104);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = *(_WORD *)(a2 + 120);
  outlined copy of Date.AttributedStyle.InnerStyle(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 112);
  v24 = *(_WORD *)(a1 + 120);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = v30;
  *(_QWORD *)(a1 + 112) = v31;
  *(_WORD *)(a1 + 120) = v32;
  outlined consume of Date.AttributedStyle.InnerStyle(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, v24);
  return a1;
}

uint64_t assignWithTake for Date.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)(a2 + 112);
  v4 = *(_WORD *)(a2 + 120);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_WORD *)(a1 + 120);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = v3;
  *(_WORD *)(a1 + 120) = v4;
  outlined consume of Date.AttributedStyle.InnerStyle(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17);
  return a1;
}

uint64_t destructiveInjectEnumTag for Date.AttributedStyle.InnerStyle(uint64_t result, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;

  v2 = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(result + 96) & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8;
  v5 = *(_WORD *)(result + 120) & 0x107 | (a2 << 15);
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 80) = v2;
  *(_QWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 112) = v4;
  *(_WORD *)(result + 120) = v5;
  return result;
}

ValueMetadata *type metadata accessor for Date.AttributedStyle.InnerStyle()
{
  return &type metadata for Date.AttributedStyle.InnerStyle;
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 50))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 38) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 38);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 38) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 50) = 0;
    if (a2)
      *(_BYTE *)(result + 38) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.DateFieldCollection()
{
  return &type metadata for Date.FormatStyle.DateFieldCollection;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys, &unk_1E0F2A798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys, &unk_1E0F2A798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys, &unk_1E0F2A798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.DateFieldCollection.CodingKeys, &unk_1E0F2A798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection.CodingKeys and conformance Date.FormatStyle.DateFieldCollection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.EraOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.EraOption and conformance Date.FormatStyle.Symbol.SymbolType.EraOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.YearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.QuarterOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.QuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MonthOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MonthOption and conformance Date.FormatStyle.Symbol.SymbolType.MonthOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.WeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.DayPeriodOption and conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.HourOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.HourOption and conformance Date.FormatStyle.Symbol.SymbolType.HourOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.MinuteOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.MinuteOption and conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.SecondFractionOption and conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption, &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption and conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys, &unk_1E0F2D2E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys, &unk_1E0F2D2E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys, &unk_1E0F2D2E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.CodingKeys, &unk_1E0F2D2E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.CodingKeys and conformance Date.AttributedStyle.InnerStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys, &unk_1E0F2D1C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys, &unk_1E0F2D1C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys, &unk_1E0F2D1C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys, &unk_1E0F2D1C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys, &unk_1E0F2D250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys, &unk_1E0F2D250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys, &unk_1E0F2D250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys, &unk_1E0F2D250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys and conformance Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys);
  }
  return result;
}

uint64_t specialized Date.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736C6F626D7973 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000182304440
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C79745365746164 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t outlined release of (Date.AttributedStyle.InnerStyle, Date.AttributedStyle.InnerStyle)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 208);
  v14 = *(_OWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 224);
  v9 = *(_QWORD *)(a1 + 240);
  v10 = *(_WORD *)(a1 + 248);
  outlined consume of Date.AttributedStyle.InnerStyle(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_WORD *)(a1 + 120));
  outlined consume of Date.AttributedStyle.InnerStyle(v15, v2, v3, v4, v5, v6, v7, v8, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t storeEnumTagSinglePayload for Date.AttributedStyle.InnerStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C67344 + 4 * byte_1820FCEA6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C67378 + 4 * byte_1820FCEA1[v4]))();
}

uint64_t sub_181C67378(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C67380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C67388);
  return result;
}

uint64_t sub_181C67394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C6739CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C673A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C673A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.CodingKeys()
{
  return &unk_1E0F2D2E0;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.FormatStyleCodingKeys()
{
  return &unk_1E0F2D250;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.TimeStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181C67414 + 4 * byte_1820FCEAB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181C67434 + 4 * byte_1820FCEB0[v4]))();
}

_BYTE *sub_181C67414(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181C67434(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C6743C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C67444(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C6744C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C67454(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Date.AttributedStyle.InnerStyle.VerbatimFormatStyleCodingKeys()
{
  return &unk_1E0F2D1C0;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.DateFieldCollection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_181C674BC + 4 * byte_1820FCEBA[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_181C674F0 + 4 * byte_1820FCEB5[v4]))();
}

uint64_t sub_181C674F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C674F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C67500);
  return result;
}

uint64_t sub_181C6750C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C67514);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_181C67518(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C67520(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.FormatStyle.DateFieldCollection.CodingKeys()
{
  return &unk_1E0F2A798;
}

Swift::Int specialized Array.append<A>(contentsOf:)(Swift::Int result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = String.UTF8View._foreignCount()();
    v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    v3 = result & 0xFFFFFFFFFFFFLL;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *v2 = v4;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || *((_QWORD *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6)
        v8 = v5 + v3;
      else
        v8 = v5;
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *v2 = v4;
    }
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v9 & 1) != 0)
      goto LABEL_22;
    v10 = result;
    result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *v2 = v4;
        return result;
      }
      v11 = *((_QWORD *)v4 + 2);
      v12 = __OFADD__(v11, v10);
      v13 = v11 + v10;
      if (!v12)
      {
        *((_QWORD *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t PresentationIntent.components.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresentationIntent.components.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PresentationIntent.components.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t PresentationIntent.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = MEMORY[0x186DA4B08](v0, &type metadata for PresentationIntent.IntentType);
  swift_bridgeObjectRelease();
  return v1;
}

void PresentationIntent.Kind.debugDescription.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_181C68414()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x20726564616568;
}

uint64_t sub_181C68554@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)&loc_181C68540 + 4 * byte_1820FDF97[a1]))(0x7061726761726170, 0xE900000000000068);
}

void sub_181C6858C()
{
  JUMPOUT(0x181C68540);
}

void sub_181C685AC()
{
  JUMPOUT(0x181C68540);
}

void sub_181C685D0()
{
  JUMPOUT(0x181C68540);
}

void sub_181C685EC()
{
  JUMPOUT(0x181C68540);
}

void sub_181C68610()
{
  JUMPOUT(0x181C68540);
}

uint64_t PresentationIntent.Kind.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  char *v3;
  _BYTE v5[24];
  uint64_t v6;
  Swift::String v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
    v7._countAndFlagsBits = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v3 = (char *)&loc_181C686E8
       + 4 * byte_1820FDF9D[specialized PresentationIntent.Kind.CodingNames.init(rawValue:)(v7)];
    __asm { BR              X9 }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_181C68908()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for DecodingError();
  swift_allocError();
  v3 = v2;
  v4 = v0[3];
  v5 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v4);
  MEMORY[0x186DA5FB4](v4, v5);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v3, *MEMORY[0x1E0DEC458], v1);
  swift_willThrow();
  JUMPOUT(0x181C686B4);
}

void PresentationIntent.Kind.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __asm { BR              X9 }
}

uint64_t sub_181C68A00()
{
  uint64_t v0;
  _BYTE v2[24];
  uint64_t v3;

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v0)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void PresentationIntent.Kind.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_181C68DE4()
{
  Swift::UInt v0;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v0);
}

uint64_t sub_181C68E94()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181C68EAC + 4 * byte_1820FDFBE[v0]))();
}

void sub_181C68EAC()
{
  JUMPOUT(0x181C68E80);
}

void sub_181C68EC0()
{
  JUMPOUT(0x181C68E80);
}

void sub_181C68EC8()
{
  JUMPOUT(0x181C68E80);
}

void sub_181C68ED0()
{
  JUMPOUT(0x181C68E80);
}

void sub_181C68ED8()
{
  JUMPOUT(0x181C68E80);
}

void sub_181C68EE0()
{
  JUMPOUT(0x181C68E80);
}

Swift::Int PresentationIntent.Kind.hashValue.getter()
{
  Hasher.init(_seed:)();
  PresentationIntent.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationIntent.Kind()
{
  Hasher.init(_seed:)();
  PresentationIntent.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent.Kind()
{
  Hasher.init(_seed:)();
  PresentationIntent.Kind.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.Kind(_QWORD *a1)
{
  return PresentationIntent.Kind.init(from:)(a1);
}

void protocol witness for Encodable.encode(to:) in conformance PresentationIntent.Kind(_QWORD *a1)
{
  PresentationIntent.Kind.encode(to:)(a1);
}

Foundation::PresentationIntent::TableColumn::Alignment_optional __swiftcall PresentationIntent.TableColumn.Alignment.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (Foundation::PresentationIntent::TableColumn::Alignment_optional)rawValue;
}

uint64_t PresentationIntent.TableColumn.Alignment.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

Foundation::PresentationIntent::TableColumn::Alignment_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PresentationIntent.TableColumn.Alignment(Swift::Int *a1)
{
  return PresentationIntent.TableColumn.Alignment.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.TableColumn.Alignment()
{
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.TableColumn.Alignment()
{
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
  return RawRepresentable<>.encode(to:)();
}

void PresentationIntent.TableColumn.alignment.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *PresentationIntent.TableColumn.alignment.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*PresentationIntent.TableColumn.alignment.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::PresentationIntent::TableColumn __swiftcall PresentationIntent.TableColumn.init(alignment:)(Foundation::PresentationIntent::TableColumn alignment)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)alignment.alignment;
  return alignment;
}

void PresentationIntent.TableColumn.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PresentationIntent.TableColumn.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresentationIntent.TableColumn.CodingKeys()
{
  return 0x6E656D6E67696C61;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresentationIntent.TableColumn.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.TableColumn.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.TableColumn.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PresentationIntent.TableColumn.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.TableColumn.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int PresentationIntent.TableColumn.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PresentationIntent.TableColumn.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.TableColumn.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.TableColumn@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return PresentationIntent.TableColumn.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.TableColumn(_QWORD *a1)
{
  return PresentationIntent.TableColumn.encode(to:)(a1);
}

uint64_t PresentationIntent.IntentType.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of PresentationIntent.Kind(v2, v3, v4);
}

uint64_t PresentationIntent.IntentType.kind.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of PresentationIntent.Kind(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*PresentationIntent.IntentType.kind.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.IntentType.identity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PresentationIntent.IntentType.identity.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*PresentationIntent.IntentType.identity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PresentationIntent.IntentType.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _print_unlocked<A, B>(_:_:)();
  v0._countAndFlagsBits = 0x2064692820;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

void PresentationIntent.IntentType.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_181C69650()
{
  Swift::UInt v0;
  Swift::UInt v1;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v0);
}

uint64_t sub_181C696F8()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181C69710 + 4 * byte_1820FDFCB[v0]))();
}

void sub_181C69710()
{
  JUMPOUT(0x181C696DCLL);
}

void sub_181C69734()
{
  JUMPOUT(0x181C696DCLL);
}

void sub_181C6973C()
{
  JUMPOUT(0x181C696DCLL);
}

void sub_181C69744()
{
  JUMPOUT(0x181C696DCLL);
}

void sub_181C6974C()
{
  JUMPOUT(0x181C696DCLL);
}

void sub_181C69754()
{
  JUMPOUT(0x181C696DCLL);
}

uint64_t static PresentationIntent.IntentType.== infix(_:_:)(__int128 *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v7;
  char v8;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(a2 + 24);
  v7 = *a1;
  v8 = v2;
  specialized static PresentationIntent.Kind.== infix(_:_:)((uint64_t)&v7);
  return v5 & (v3 == v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresentationIntent.IntentType.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x797469746E656469;
  else
    return 1684957547;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresentationIntent.IntentType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PresentationIntent.IntentType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.IntentType.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.IntentType.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PresentationIntent.IntentType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.IntentType.CodingKeys>);
  v12 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  v11[0] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v7;
  v14 = v6;
  v15 = v8;
  v16 = 0;
  lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind();
  v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

void PresentationIntent.IntentType.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181C699F4()
{
  Swift::UInt v0;
  Swift::UInt v1;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t sub_181C69AE0()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181C69AF8 + 4 * byte_1820FDFD8[v0]))();
}

void sub_181C69AF8()
{
  JUMPOUT(0x181C69AB0);
}

void sub_181C69B10()
{
  JUMPOUT(0x181C69AB0);
}

void sub_181C69B1C()
{
  JUMPOUT(0x181C69AB0);
}

void sub_181C69B28()
{
  JUMPOUT(0x181C69AB0);
}

void sub_181C69B34()
{
  JUMPOUT(0x181C69AB0);
}

void sub_181C69B40()
{
  JUMPOUT(0x181C69AB0);
}

uint64_t PresentationIntent.IntentType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.IntentType.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = 0;
  lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v15;
  v10 = v16;
  LOBYTE(v15) = 1;
  v18 = v17;
  outlined copy of PresentationIntent.Kind(v9, v16, v17);
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  v12 = v18;
  *(_BYTE *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of PresentationIntent.Kind(v9, v10, v12);
}

void protocol witness for Hashable.hash(into:) in conformance PresentationIntent.IntentType()
{
  __asm { BR              X10 }
}

void sub_181C69D54()
{
  Swift::UInt v0;
  Swift::UInt v1;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v0);
}

uint64_t sub_181C69E04()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181C69E1C + 4 * byte_1820FDFE5[v0]))();
}

void sub_181C69E1C()
{
  JUMPOUT(0x181C69DE8);
}

void sub_181C69E30()
{
  JUMPOUT(0x181C69DE8);
}

void sub_181C69E38()
{
  JUMPOUT(0x181C69DE8);
}

void sub_181C69E40()
{
  JUMPOUT(0x181C69DE8);
}

void sub_181C69E48()
{
  JUMPOUT(0x181C69DE8);
}

void sub_181C69E50()
{
  JUMPOUT(0x181C69DE8);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent.IntentType()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181C69E9C()
{
  Swift::UInt v0;
  Swift::UInt v1;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t sub_181C69F88()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181C69FA0 + 4 * byte_1820FDFF2[v0]))();
}

void sub_181C69FA0()
{
  JUMPOUT(0x181C69F58);
}

void sub_181C69FB8()
{
  JUMPOUT(0x181C69F58);
}

void sub_181C69FC4()
{
  JUMPOUT(0x181C69F58);
}

void sub_181C69FD0()
{
  JUMPOUT(0x181C69F58);
}

void sub_181C69FDC()
{
  JUMPOUT(0x181C69F58);
}

void sub_181C69FE8()
{
  JUMPOUT(0x181C69F58);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent.IntentType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PresentationIntent.IntentType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent.IntentType(_QWORD *a1)
{
  return PresentationIntent.IntentType.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationIntent.IntentType(__int128 *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v7;
  char v8;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *(_QWORD *)(a2 + 24);
  v7 = *a1;
  v8 = v2;
  specialized static PresentationIntent.Kind.== infix(_:_:)((uint64_t)&v7);
  return v5 & (v3 == v4);
}

uint64_t PresentationIntent.init(_:identity:parent:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  v8 = *((_BYTE *)a1 + 16);
  v9 = *a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.IntentType>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_18205C850;
  *(_QWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 40) = v7;
  *(_BYTE *)(result + 48) = v8;
  *(_QWORD *)(result + 56) = a2;
  if (v9)
  {
    v11 = result;
    specialized Array.append<A>(contentsOf:)(v9);
    result = v11;
  }
  *a4 = result;
  return result;
}

Foundation::PresentationIntent __swiftcall PresentationIntent.init(types:)(Foundation::PresentationIntent types)
{
  Foundation::PresentationIntent *v1;

  v1->components._rawValue = types.components._rawValue;
  return types;
}

BOOL PresentationIntent.isValid.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  Swift::Bool v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = v1 - 1;
    do
    {
      v4 = PresentationIntent.isValid(at:)(v2);
      if (!v4)
        break;
    }
    while (v3 != v2++);
  }
  else
  {
    return 0;
  }
  return v4;
}

Swift::Bool __swiftcall PresentationIntent.isValid(at:)(Swift::Int at)
{
  uint64_t v1;

  if (at < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v1 + 16) > (unint64_t)at)
  {
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x181C6A3B8);
}

uint64_t PresentationIntent.indentationLevel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unsigned __int8 *i;
  uint64_t v4;
  BOOL v6;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (!v1)
    return 0;
  result = 0;
  for (i = (unsigned __int8 *)(*(_QWORD *)v0 + 48); ; i += 32)
  {
    v4 = *i;
    if ((_DWORD)v4 == 1)
      goto LABEL_10;
    if ((_DWORD)v4 == 6 && !*((_QWORD *)i - 1) && *((_QWORD *)i - 2) == 3)
      break;
    v4 = 0;
LABEL_10:
    v6 = __OFADD__(result, v4);
    result += v4;
    if (v6)
      goto LABEL_15;
LABEL_11:
    if (!--v1)
      return result;
  }
  v6 = __OFADD__(result++, 1);
  if (!v6)
    goto LABEL_11;
LABEL_15:
  __break(1u);
  return 0;
}

uint64_t PresentationIntent.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static PresentationIntent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationIntent.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PresentationIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], &demangling cache variable for type metadata for [PresentationIntent.IntentType], (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int PresentationIntent.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PresentationIntent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], &demangling cache variable for type metadata for [PresentationIntent.IntentType], (uint64_t (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationIntent()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresentationIntent(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationIntent()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationIntent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return PresentationIntent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationIntent(_QWORD *a1)
{
  return PresentationIntent.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationIntent()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = MEMORY[0x186DA4B08](v0, &type metadata for PresentationIntent.IntentType);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationIntent(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t static PresentationIntent._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSPresentationIntent);
}

void PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = a3[1];
  v6 = *(_QWORD *)(*a3 + 16);
  if (v5 != v6)
  {
    if (v5 >= v6)
    {
      __break(1u);
      JUMPOUT(0x181C6AD0CLL);
    }
    v7 = v5 + 1;
    v8 = *a3 + 32 * v5;
    v9 = *(_QWORD *)(v8 + 56);
    v10 = *(_BYTE *)(v8 + 48);
    v14 = *v3;
    v11 = *(_OWORD *)(v8 + 32);
    a3[1] = v7;
    v12 = v11;
    v13 = v10;
    PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(v9, &v12);
  }
  __asm { BR              X9 }
}

void __swiftcall PresentationIntent._bridgeToObjectiveC()(NSPresentationIntent *__return_ptr retstr)
{
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = *v1;
  if (*(_QWORD *)(v8[0] + 16))
  {
    v2 = *(_BYTE *)(v8[0] + 48);
    v3 = *(_QWORD *)(v8[0] + 56);
    v8[1] = 1;
    v7 = v8[0];
    v5 = *(_OWORD *)(v8[0] + 32);
    v6 = v2;
    swift_bridgeObjectRetain();
    PresentationIntent.convertToNSPresentationIntent(identity:kind:_:)(v3, (uint64_t)&v5, v8);
    if (v4)
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PresentationIntent._forceBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2)
{
  char v2;

  specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((v2 & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void static PresentationIntent._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  v4 = 0;
  if (!a1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v4);
  if ((v3 & 1) != 0)
  {
    if (v4)
    {
      *a2 = v4;
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PresentationIntent(void *a1, _QWORD *a2)
{
  char v2;

  specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((v2 & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static PresentationIntent.Kind.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_181C6AFD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;

  if (v5)
  {
    outlined copy of PresentationIntent.Kind(v1, v2, v5);
    outlined consume of PresentationIntent.Kind(v0, v3, v4);
    outlined consume of PresentationIntent.Kind(v1, v2, v5);
    return 0;
  }
  else
  {
    outlined consume of PresentationIntent.Kind(v0, v3, 0);
    outlined consume of PresentationIntent.Kind(v1, v2, 0);
    return v0 == v1;
  }
}

void sub_181C6B288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (v4 != 6 || v1 != 1 || v2 != 0)
    JUMPOUT(0x181C6B1ACLL);
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(1, 0, 6);
  JUMPOUT(0x181C6B1E0);
}

void sub_181C6B2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (v4 != 6 || v1 != 2 || v2 != 0)
    JUMPOUT(0x181C6B1ACLL);
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(2, 0, 6);
  JUMPOUT(0x181C6B1E0);
}

void sub_181C6B2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (v4 != 6 || v1 != 3 || v2 != 0)
    JUMPOUT(0x181C6B1ACLL);
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(3, 0, 6);
  JUMPOUT(0x181C6B1E0);
}

void sub_181C6B310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (v4 != 6 || v1 != 4 || v2 != 0)
    JUMPOUT(0x181C6B1ACLL);
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  outlined consume of PresentationIntent.Kind(4, 0, 6);
  JUMPOUT(0x181C6B1E0);
}

void sub_181C6B338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (v4 != 6 || v1 != 5 || v2 != 0)
    JUMPOUT(0x181C6B1ACLL);
  outlined consume of PresentationIntent.Kind(v0, v3, 6);
  JUMPOUT(0x181C6B35CLL);
}

unint64_t specialized PresentationIntent.Kind.CodingNames.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresentationIntent.Kind.CodingNames.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn, &type metadata for PresentationIntent.TableColumn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn, &type metadata for PresentationIntent.TableColumn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn, &type metadata for PresentationIntent.TableColumn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn and conformance PresentationIntent.TableColumn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    v2 = MEMORY[0x1E0DEA970];
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys, &unk_1E0F205F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys, &unk_1E0F205F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys, &unk_1E0F205F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.CodingKeys, &unk_1E0F205F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.CodingKeys and conformance PresentationIntent.TableColumn.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.Alignment, &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.Alignment, &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.Alignment, &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment;
  if (!lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.TableColumn.Alignment, &type metadata for PresentationIntent.TableColumn.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.TableColumn.Alignment and conformance PresentationIntent.TableColumn.Alignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys, &unk_1E0F20450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys, &unk_1E0F20450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys, &unk_1E0F20450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.IntentType.CodingKeys, &unk_1E0F20450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType.CodingKeys and conformance PresentationIntent.IntentType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.Kind and conformance PresentationIntent.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.Kind, &type metadata for PresentationIntent.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.Kind, &type metadata for PresentationIntent.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind;
  if (!lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.Kind, &type metadata for PresentationIntent.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.Kind and conformance PresentationIntent.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.CodingKeys, &type metadata for PresentationIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.CodingKeys, &type metadata for PresentationIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.CodingKeys, &type metadata for PresentationIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.CodingKeys, &type metadata for PresentationIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.IntentType, &type metadata for PresentationIntent.IntentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.IntentType, &type metadata for PresentationIntent.IntentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType;
  if (!lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent.IntentType, &type metadata for PresentationIntent.IntentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  }
  return result;
}

uint64_t specialized PresentationIntent.IntentType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PresentationIntent.Kind(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PresentationIntent.Kind(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of PresentationIntent.Kind(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationIntent.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PresentationIntent.Kind(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t destructiveInjectEnumTag for PresentationIntent.Kind(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.Kind()
{
  return &type metadata for PresentationIntent.Kind;
}

ValueMetadata *type metadata accessor for PresentationIntent.TableColumn()
{
  return &type metadata for PresentationIntent.TableColumn;
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.TableColumn(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181C6BBE8 + 4 * byte_1820FE00A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C6BC1C + 4 * byte_1820FE005[v4]))();
}

uint64_t sub_181C6BC1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6BC24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C6BC2CLL);
  return result;
}

uint64_t sub_181C6BC38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C6BC40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181C6BC44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6BC4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.TableColumn.Alignment()
{
  return &type metadata for PresentationIntent.TableColumn.Alignment;
}

uint64_t initializeWithCopy for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of PresentationIntent.Kind(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of PresentationIntent.Kind(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PresentationIntent.IntentType(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of PresentationIntent.Kind(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationIntent.IntentType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.IntentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent.CodingKeys()
{
  return &type metadata for PresentationIntent.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.IntentType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C6BE64 + 4 * byte_1820FE014[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C6BE98 + 4 * byte_1820FE00F[v4]))();
}

uint64_t sub_181C6BE98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6BEA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C6BEA8);
  return result;
}

uint64_t sub_181C6BEB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C6BEBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C6BEC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6BEC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PresentationIntent.IntentType.CodingKeys()
{
  return &unk_1E0F20450;
}

uint64_t storeEnumTagSinglePayload for PresentationIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181C6BF24 + 4 * byte_1820FE019[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181C6BF44 + 4 * byte_1820FE01E[v4]))();
}

_BYTE *sub_181C6BF24(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181C6BF44(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C6BF4C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C6BF54(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C6BF5C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C6BF64(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PresentationIntent.TableColumn.CodingKeys()
{
  return &unk_1E0F205F0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation8CalendarV9ComponentOG_AJ9component_Si9multitudets5NeverOTg5015_s10Foundation8e2V9f40OAESiIgnrd_A2E9component_Si9multitudets5i106OIegnrzr_TR090_s10Foundation16ICUDateFormatterC14DateFormatInfoV14UpdateScheduleO15updateIntervalsSayAA8b2L54C41O9component_Si9multitudetGvgAL_SitALXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v16 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v16;
  result = specialized Set.startIndex.getter(a1);
  v5 = result;
  v7 = v6;
  v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v7)
      goto LABEL_14;
    v10 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v5);
    v12 = *(_QWORD *)(v16 + 16);
    v11 = *(_QWORD *)(v16 + 24);
    if (v12 >= v11 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    *(_QWORD *)(v16 + 16) = v12 + 1;
    v13 = v16 + 16 * v12;
    *(_BYTE *)(v13 + 32) = v10;
    *(_QWORD *)(v13 + 40) = 1;
    result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    v5 = result;
    v7 = v14;
    v9 = v15 & 1;
    if (!--v1)
    {
      outlined consume of Set<Calendar.Component>.Index._Variant(result, v14, v15 & 1);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Ss7elementtG_Sss5NeverOTg5166_sSS10FoundationE21purgingStringLiterals33_897C603A04DF76F04B69FE4D70F5F325LLSSyFSsSi6offset_Ss7elementt_tcfu_32f319bcf0ad9587a902b48655fa9ced40SiAD_SsAEtSsTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = (uint64_t *)(a1 + 64);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v8 = *(v4 - 1);
      v7 = *v4;
      v9 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1);
      *(_QWORD *)(v13 + 16) = v9 + 1;
      v11 = (_QWORD *)(v13 + 32 * v9);
      v11[4] = v5;
      v11[5] = v6;
      v11[6] = v8;
      v11[7] = v7;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS9UTF16ViewV_So16UDateFormatFieldVs5NeverOTg5097_sSS10FoundationE14updateSchedule33_897C603A04DF76F04B69FE4D70F5F325LLAA16ICUDateFormatterC14Dateg22InfoV06UpdateC0OvgSo05f2P5H15Vs6UInt16VXEfU_Tf1cn_n(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_63;
  v5 = String.UTF16View._nativeGetOffset(for:)();
LABEL_3:
  v6 = v5;
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v5)
    return v7;
  v26 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v9 = ((unint64_t)a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0)
      LOBYTE(v9) = 1;
    v10 = 4 << v9;
    v11 = a1 < 0;
    if ((a2 & 0x2000000000000000) != 0)
      v12 = v4;
    else
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a2 & 0x2000000000000000) != 0)
      v11 = (a2 & 0x4000000000000000) != 0;
    v21 = v11;
    v13 = 15;
    v22 = a1;
    v23 = v10;
    while (1)
    {
      if (!v6)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        v5 = String.UTF16View._foreignCount()();
        goto LABEL_3;
      }
      v4 = v13 & 0xC;
      v14 = v13;
      if (v4 == v10)
        v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a1, a2);
      if (v14 >> 16 >= v12)
        goto LABEL_59;
      if ((a2 & 0x1000000000000000) != 0)
      {
        String.UTF16View._foreignSubscript(position:)();
        goto LABEL_32;
      }
      if ((v14 & 1) != 0)
      {
        if ((a2 & 0x2000000000000000) != 0)
          goto LABEL_26;
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v14, a1, a2);
        if ((a2 & 0x2000000000000000) != 0)
        {
LABEL_26:
          v24 = a1;
          v25 = a2 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_27;
        }
      }
      if ((a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
LABEL_27:
      v15 = _decodeScalar(_:startingAt:)();
      if ((v14 & 0xC000) == 0x4000)
      {
        if (v15 < 0x10000)
          goto LABEL_61;
      }
      else if (HIWORD(v15) && (((unsigned __int16)((v15 + 67043328) >> 10) + 55296) & 0x10000) != 0)
      {
        goto LABEL_62;
      }
LABEL_32:
      v16 = udat_patternCharToDateFormatField();
      v7 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v26;
      }
      v18 = *(_QWORD *)(v7 + 16);
      v17 = *(_QWORD *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v7 = v26;
      }
      *(_QWORD *)(v7 + 16) = v18 + 1;
      *(_DWORD *)(v7 + 4 * v18 + 32) = v16;
      v10 = v23;
      a1 = v22;
      if (v4 == v23)
        v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v22, a2);
      v4 = v13 >> 16;
      if (v13 >> 16 >= v12)
        goto LABEL_60;
      if ((a2 & 0x1000000000000000) != 0)
      {
        v13 = MEMORY[0x186DA488C](v13, v22, a2);
        goto LABEL_14;
      }
      if (v21)
      {
        v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_14;
      }
      if ((v13 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0)
          goto LABEL_44;
      }
      else
      {
        v20 = _StringGuts.scalarAlignSlow(_:)(v13, v22, a2);
        v13 = v20 & 0xFFFFFFFFFFFFFFF2 | 1;
        v4 = v20 >> 16;
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_44:
          if ((v22 & 0x1000000000000000) != 0)
          {
            LODWORD(v19) = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32 + v4);
            if ((v19 & 0x80) == 0)
              goto LABEL_53;
          }
          else
          {
            LODWORD(v19) = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v4);
            if ((v19 & 0x80) == 0)
            {
LABEL_53:
              v19 = 1;
              goto LABEL_54;
            }
          }
          goto LABEL_46;
        }
      }
      v24 = v22;
      v25 = a2 & 0xFFFFFFFFFFFFFFLL;
      LODWORD(v19) = *((unsigned __int8 *)&v24 + v4);
      if ((v19 & 0x80) == 0)
        goto LABEL_53;
LABEL_46:
      LODWORD(v19) = __clz(v19 ^ 0xFF) - 24;
      if ((_DWORD)v19 != 4)
      {
        v19 = v19;
        goto LABEL_54;
      }
      if ((v13 & 0xC000) != 0)
      {
        v19 = 4;
LABEL_54:
        v13 = (v13 + (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_14;
      }
      v13 = v13 & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_14:
      if (!--v6)
        return v7;
    }
  }
  __break(1u);
  return result;
}

Swift::tuple_String_OpaquePointer_optional __swiftcall ICUDateFormatter.attributedFormat(_:)(Foundation::Date a1)
{
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  Swift::tuple_String_OpaquePointer_optional result;

  type metadata accessor for ICU.FieldPositer();
  inited = swift_initStackObject();
  v2 = ufieldpositer_open();
  if (!v2)
    __break(1u);
  *(_QWORD *)(inited + 16) = v2;
  swift_retain();
  swift_retain();
  v3 = specialized _withResizingUCharBuffer(initialSize:_:)(32);
  v5 = v4;
  swift_release();
  swift_release();
  if (v5)
  {
    v15 = v3;
    v16 = (unint64_t *)MEMORY[0x1E0DEE9D8];
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    v6 = v16;
    swift_retain();
    v7 = ufieldpositer_next();
    if ((v7 & 0x80000000) == 0)
    {
      v8 = v7;
      do
      {
        v10 = v16[2];
        v9 = v16[3];
        if (v10 >= v9 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v16[2] = v10 + 1;
        v11 = &v16[3 * v10];
        *((_DWORD *)v11 + 8) = v8;
        v11[5] = 0;
        v11[6] = 0;
        v8 = ufieldpositer_next();
      }
      while ((v8 & 0x80000000) == 0);
    }
    swift_release_n();
    swift_release();
    v12 = v15;
  }
  else
  {
    swift_release();
    v12 = 0;
    v6 = 0;
  }
  v13 = v5;
  v14 = v6;
  result.value._1._rawValue = v14;
  result.value._0._object = v13;
  result.value._0._countAndFlagsBits = v12;
  return result;
}

void ICUDateFormatter.DateFormatInfo.UpdateSchedule.updateIntervals.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  v1 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    v2 = Calendar.ComponentSet.set.getter();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation8CalendarV9ComponentOG_AJ9component_Si9multitudets5NeverOTg5015_s10Foundation8e2V9f40OAESiIgnrd_A2E9component_Si9multitudets5i106OIegnrzr_TR090_s10Foundation16ICUDateFormatterC14DateFormatInfoV14UpdateScheduleO15updateIntervalsSayAA8b2L54C41O9component_Si9multitudetGvgAL_SitALXEfU_Tf3nnnpf_nTf1cn_n(v2);
    swift_bridgeObjectRelease();
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, multitude: Int)>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_18205C850;
  *(_BYTE *)(v3 + 32) = 13;
  v4 = __exp10((double)v1) + 0.0;
  if (v4 < INFINITY)
    *(_QWORD *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v4 < 9.22337204e18)
  {
    *(_QWORD *)(v3 + 40) = (uint64_t)v4;
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t ICUDateFormatter.__deallocating_deinit()
{
  udat_close();
  return swift_deallocClassInstance();
}

_QWORD *ICUDateFormatter.symbols(for:)()
{
  int v0;
  int v1;
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = udat_countSymbols();
  if (v0 < 0)
    goto LABEL_15;
  v1 = v0;
  if (v0)
  {
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (v1 != v2)
    {
      v5 = swift_retain();
      MEMORY[0x1E0C80A78](v5);
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v11, &v12);
      v6 = v13;
      if (v13)
      {
        v7 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v9 = v3[2];
        v8 = v3[3];
        if (v9 >= v8 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
        v3[2] = v9 + 1;
        v4 = &v3[2 * v9];
        v4[4] = v7;
        v4[5] = v6;
      }
      if (v1 == ++v2)
        return v3;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

void ICUDateFormatter.DateFormatInfo.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt v6;
  Swift::UInt8 v7;

  v1 = *(unsigned __int8 *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v6 = *(unsigned __int8 *)(v0 + 56);
  v7 = *(_BYTE *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v7);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v4;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUDateFormatter.DateFormatInfo()
{
  Hasher.init(_seed:)();
  ICUDateFormatter.DateFormatInfo.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateFormatter.DateFormatInfo()
{
  Hasher.init(_seed:)();
  ICUDateFormatter.DateFormatInfo.hash(into:)();
  return Hasher._finalize()();
}

void ICUDateFormatter.PatternCacheKey.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v2 + 16);
  v5 = *(unsigned __int8 *)(v2 + 24);
  v6 = *(unsigned __int8 *)(v2 + 40);
  v7 = *(unsigned __int8 *)(v2 + 41);
  v17 = *(unsigned __int8 *)(v2 + 42);
  v8 = *(unsigned __int8 *)(v2 + 43);
  v14 = *(_QWORD *)(v2 + 48);
  v15 = *(_QWORD *)(v2 + 32);
  v13 = *(_BYTE *)(v2 + 56);
  v9 = *(unsigned __int8 *)(v2 + 58);
  v10 = *(unsigned __int8 *)(v2 + 59);
  v19 = *(unsigned __int8 *)(v2 + 57);
  v20 = *(unsigned __int8 *)(v2 + 60);
  v18 = *(unsigned __int8 *)(v2 + 61);
  v22 = *(unsigned __int8 *)(v2 + 62);
  v23 = *(unsigned __int8 *)(v2 + 63);
  v16 = *(_QWORD *)(v2 + 64);
  v24 = *(unsigned __int8 *)(v2 + 72);
  v25 = *(unsigned __int8 *)(v2 + 73);
  v21 = *(_QWORD *)(v2 + 88);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  if (v5 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v6 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v15, v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if ((_DWORD)v7 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  if ((_DWORD)v17 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  if (v8 != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_13;
LABEL_25:
    Hasher._combine(_:)(0);
    if (v9 != 3)
      goto LABEL_22;
    goto LABEL_26;
  }
  Hasher._combine(_:)(0);
  if (v19)
    goto LABEL_25;
LABEL_13:
  Hasher._combine(_:)(1u);
  if ((v13 & 1) == 0)
  {
    v11 = 10;
    if (v14 < 10)
      v11 = v14;
    if (v11 <= 1)
      v12 = 1;
    else
      v12 = v11;
    MEMORY[0x186DA4928](103, 0xE100000000000000, v12);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v9 != 3)
  {
LABEL_22:
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((_DWORD)v10 != 6)
      goto LABEL_23;
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if ((_DWORD)v10 != 6)
  {
LABEL_23:
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (v20 == 9)
  {
    Hasher._combine(_:)(0);
    if (v18 != 14)
      goto LABEL_29;
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v20);
    if (v18 != 14)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v18);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
LABEL_32:
  if (v22 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v23 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v24 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v16, v24 & 1);
  }
  if (v25 == 12)
  {
    Hasher._combine(_:)(0);
    if (!v21)
    {
LABEL_43:
      Hasher._combine(_:)(0);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v25);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!v21)
      goto LABEL_43;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUDateFormatter.PatternCacheKey()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  _BYTE v12[72];
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  __int128 v26;

  v1 = v0[1];
  v2 = *((_BYTE *)v0 + 16);
  v3 = *((_BYTE *)v0 + 24);
  v4 = v0[4];
  v5 = v0[6];
  v6 = *((_BYTE *)v0 + 56);
  v7 = *((_BYTE *)v0 + 57);
  v8 = *((_WORD *)v0 + 31);
  v9 = v0[8];
  v10 = *((_WORD *)v0 + 36);
  v13 = *v0;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = *((_DWORD *)v0 + 10);
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = *(_DWORD *)((char *)v0 + 58);
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = *((_OWORD *)v0 + 5);
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateFormatter.PatternCacheKey()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  _BYTE v12[72];
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  __int128 v26;

  v1 = v0[1];
  v2 = *((_BYTE *)v0 + 16);
  v3 = *((_BYTE *)v0 + 24);
  v4 = v0[4];
  v5 = v0[6];
  v6 = *((_BYTE *)v0 + 56);
  v7 = *((_BYTE *)v0 + 57);
  v8 = *((_WORD *)v0 + 31);
  v9 = v0[8];
  v10 = *((_WORD *)v0 + 36);
  v13 = *v0;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = *((_DWORD *)v0 + 10);
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = *(_DWORD *)((char *)v0 + 58);
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = *((_OWORD *)v0 + 5);
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

uint64_t ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int16x8_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  os_unfair_lock_s *v40;
  __int128 v41;
  void (*v42)(__int128 *__return_ptr, _BYTE *, uint64_t, _QWORD *);
  char v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t result;
  uint64_t (*v52)(uint64_t, _QWORD *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD, uint64_t);
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[9];
  uint64_t v72[2];
  char v73;
  char v74;
  uint64_t v75;
  unsigned __int32 v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  __int128 v92;
  _BYTE v93[58];
  __int128 v94;
  _BYTE v95[16];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[56];
  char v100[8];
  uint64_t v101;
  __int32 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  char v109;

  v2 = a1[6];
  *(_OWORD *)&v93[16] = a1[5];
  *(_OWORD *)&v93[32] = v2;
  *(_OWORD *)&v93[42] = *(_OWORD *)((char *)a1 + 106);
  v3 = a1[4];
  v4 = a1[1];
  v91[0] = *a1;
  v91[1] = v4;
  v5 = a1[3];
  v91[2] = a1[2];
  v92 = v5;
  *(_OWORD *)v93 = v3;
  v94 = *(_OWORD *)&v93[40];
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)&v93[48] + 24);
  outlined retain of Locale((uint64_t)&v94);
  v69 = ObjectType;
  v70 = *(_QWORD *)&v93[48];
  v7(v72, ObjectType, *(_QWORD *)&v93[48]);
  outlined release of Locale((uint64_t)&v94);
  v8 = v72[0];
  outlined init with take of LocalePreferences?((uint64_t)&v92 + 8, (uint64_t)v95, &demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v108, &demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  v9 = 0;
  v10 = 0;
  if ((v109 & 1) == 0)
  {
    v11 = v108;
    v96 = *(_OWORD *)&v93[8];
    v12 = *(_QWORD *)&v93[16];
    v13 = swift_getObjectType();
    v72[0] = v11;
    v14 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v12 + 504);
    outlined retain of Locale((uint64_t)&v96);
    v9 = v14(v72, v13, v12);
    v10 = v15;
    outlined release of Locale((uint64_t)&v96);
  }
  v97 = *(_OWORD *)&v93[8];
  v16 = *(_QWORD **)&v93[16];
  v17 = swift_getObjectType();
  v18 = (uint64_t (*)(uint64_t, _QWORD *))v16[59];
  outlined retain of Locale((uint64_t)&v97);
  v68 = v17;
  v19 = v18(v17, v16);
  v21 = v20;
  outlined release of Locale((uint64_t)&v97);
  outlined retain of Locale((uint64_t)&v94);
  v7(v72, v69, v70);
  outlined release of Locale((uint64_t)&v94);
  v22 = v72[0];
  outlined init with take of LocalePreferences?((uint64_t)v91, (uint64_t)v99, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  v24 = v104;
  if ((v104 & 0xFF000000000000) == 0x3000000000000)
  {
    v25 = 0;
    v26 = 0;
    LOBYTE(v27) = 0;
    LOBYTE(v28) = 0;
    v29 = 0;
    v23.i64[0] = 0x3000000050003;
    v30 = 12;
    v31 = -1;
    LOBYTE(v32) = 2;
    LOBYTE(v33) = 9;
    LOBYTE(v34) = 6;
    v24 = 1;
    v35 = 3;
    LOBYTE(v36) = 3;
    LOBYTE(v37) = 1;
  }
  else
  {
    v32 = HIBYTE(v104);
    v37 = HIWORD(v104);
    v28 = v104 >> 40;
    v33 = HIDWORD(v104);
    v34 = v104 >> 24;
    v36 = v104 >> 16;
    v27 = (v104 >> 8) & 1;
    v35 = v100[0];
    v25 = v101;
    v23.i32[0] = v102;
    v23 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v23.i8);
    v26 = v103;
    v29 = v105;
    v31 = v106;
    v30 = v107;
  }
  v72[0] = v19;
  v72[1] = v21;
  v73 = v22;
  v74 = v35;
  v75 = v25;
  v76 = vmovn_s16(v23).u32[0];
  v77 = v26;
  v78 = v24;
  v79 = v27;
  v80 = v36;
  v81 = v34;
  v82 = v33;
  v83 = v28;
  v84 = v37;
  v85 = v32;
  v86 = v29;
  v87 = v31;
  v88 = v30;
  v89 = v9;
  v90 = v10;
  v38 = one-time initialization token for patternCache;
  swift_bridgeObjectRetain();
  if (v38 != -1)
    swift_once();
  v39 = (uint64_t *)(static ICUDateFormatter.patternCache + 16);
  v40 = (os_unfair_lock_s *)(static ICUDateFormatter.patternCache + 24);
  swift_retain();
  os_unfair_lock_lock(v40);
  closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)(v39, v72, (uint64_t)v91, v9, v10, (uint64_t *)&v98);
  os_unfair_lock_unlock(v40);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  v41 = v98;
  v71[0] = v8;
  v42 = (void (*)(__int128 *__return_ptr, _BYTE *, uint64_t, _QWORD *))v16[54];
  outlined retain of Locale((uint64_t)&v97);
  v42(&v98, v71, v68, v16);
  outlined release of Locale((uint64_t)&v97);
  v43 = v98;
  v66 = v8;
  if (v98 == 7)
  {
    v44 = v70;
    v45 = *(uint64_t (**)(uint64_t, uint64_t))(v70 + 56);
    outlined retain of Locale((uint64_t)&v94);
    v46 = v45(v69, v70);
    outlined release of Locale((uint64_t)&v94);
LABEL_15:
    v52 = (uint64_t (*)(uint64_t, _QWORD *))v16[8];
    outlined retain of Locale((uint64_t)&v97);
    v53 = v52(v68, v16);
    v55 = v54;
    outlined release of Locale((uint64_t)&v97);
    v98 = *(_OWORD *)&v93[24];
    v56 = *(_QWORD *)&v93[32];
    v57 = swift_getObjectType();
    v58 = *(uint64_t (**)(uint64_t, uint64_t))(v56 + 32);
    outlined retain of Locale((uint64_t)&v98);
    v59 = v58(v57, v56);
    v61 = v60;
    outlined release of Locale((uint64_t)&v98);
    v62 = *(uint64_t (**)(_QWORD, uint64_t))(v44 + 72);
    outlined retain of Locale((uint64_t)&v94);
    v63 = v62(v41, v44);
    outlined release of Locale((uint64_t)&v94);
    result = outlined release of Date.FormatStyle((uint64_t)v91);
    v64 = v93[56];
    v65 = v93[57];
    *(_QWORD *)a2 = v53;
    *(_QWORD *)(a2 + 8) = v55;
    *(_QWORD *)(a2 + 16) = v59;
    *(_QWORD *)(a2 + 24) = v61;
    *(_BYTE *)(a2 + 32) = v66;
    *(_QWORD *)(a2 + 40) = v46;
    *(_QWORD *)(a2 + 48) = v63;
    *(_BYTE *)(a2 + 56) = v64;
    *(_OWORD *)(a2 + 64) = v41;
    *(_BYTE *)(a2 + 80) = v65;
    *(_QWORD *)(a2 + 88) = 0xC1CD27E440000000;
    return result;
  }
  if (one-time initialization token for weekdays != -1)
    swift_once();
  v47 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  v48 = specialized Collection<>.firstIndex(of:)(v43, (uint64_t)v47);
  v50 = v49;
  result = swift_bridgeObjectRelease();
  if ((v50 & 1) == 0)
  {
    v46 = v48 + 1;
    if (!__OFADD__(v48, 1))
    {
      v44 = v70;
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  uint64_t (*v16)(uint64_t, _QWORD *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD *);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1[1];
  v4 = (_QWORD *)a1[3];
  v27 = a1[7];
  v28 = a1[6];
  if (a1[4])
  {
    v5 = a1[5];
    ObjectType = swift_getObjectType();
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    swift_unknownObjectRetain();
    v26 = v7(ObjectType, v5);
    v9 = v8;
    swift_unknownObjectRelease();
  }
  else
  {
    v26 = 0;
    v9 = 0;
  }
  v10 = swift_getObjectType();
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  swift_unknownObjectRetain();
  v12 = v11(v10, v3);
  v24 = v13;
  v25 = v12;
  swift_unknownObjectRelease();
  v14 = swift_getObjectType();
  v15 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))v4[3];
  swift_unknownObjectRetain();
  v15(&v29, v14, v4);
  swift_unknownObjectRelease();
  v23 = v29;
  v16 = (uint64_t (*)(uint64_t, _QWORD *))v4[7];
  swift_unknownObjectRetain();
  v17 = v16(v14, v4);
  swift_unknownObjectRelease();
  v18 = (uint64_t (*)(uint64_t, _QWORD *))v4[9];
  swift_unknownObjectRetain();
  v19 = v18(v14, v4);
  if (v9)
    v20 = v26;
  else
    v20 = 0;
  if (v9)
    v21 = v9;
  else
    v21 = 0xE000000000000000;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  result = swift_unknownObjectRelease();
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v24;
  *(_BYTE *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v19;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v28;
  *(_QWORD *)(a2 + 72) = v27;
  *(_BYTE *)(a2 + 80) = 1;
  *(_QWORD *)(a2 + 88) = 0xC1CD27E440000000;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t, uint64_t);
  char v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v3 = a1[1];
  v24[0] = *a1;
  v24[1] = v3;
  Calendar.locale.getter(&v25);
  if (v25)
  {
    v4 = v26;
    ObjectType = swift_getObjectType();
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
    v7 = v6;
    swift_unknownObjectRelease();
  }
  else
  {
    v23 = 0;
    v7 = 0;
  }
  v8 = swift_getObjectType();
  v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v9(&v25, v8, v3);
  swift_unknownObjectRelease();
  v10 = v26;
  v11 = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v11, v10);
  v14 = v13;
  swift_unknownObjectRelease();
  v15 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v15(v24, v8, v3);
  swift_unknownObjectRelease();
  v16 = v24[0];
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  v18 = v17(v8, v3);
  swift_unknownObjectRelease();
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v8, v3);
  result = swift_unknownObjectRelease();
  v21 = v23;
  if (v7)
  {
    v22 = v7;
  }
  else
  {
    v21 = 0;
    v22 = 0xE000000000000000;
  }
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v14;
  *(_BYTE *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v19;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0xE000000000000000;
  *(_BYTE *)(a2 + 80) = 1;
  *(_QWORD *)(a2 + 88) = 0xC1CD27E440000000;
  return result;
}

uint64_t closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int16x8_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int16x8_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int64_t v89;
  unint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[56];
  __int128 v106;
  unsigned __int32 v107;
  uint64_t v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  __int16 v114;
  char v115;
  uint64_t v116;
  __int16 v117;
  char v118[8];
  uint64_t v119;
  unsigned __int32 v120;
  uint64_t v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  uint64_t v130;
  char v131;
  char v132;
  __int128 v133;
  __int32 v134;
  uint64_t v135;
  unint64_t v136;
  char v137[8];
  uint64_t v138;
  __int32 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;

  v13 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) != 0)
    {
      v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
      v18 = *v16;
      v17 = v16[1];
      swift_bridgeObjectRetain();
      result = outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      *a6 = v18;
      a6[1] = v17;
      return result;
    }
    outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
  }
  outlined init with take of LocalePreferences?(a3, (uint64_t)v105, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v137, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  v21 = v141;
  v145 = v6;
  v98 = a6;
  if ((v141 & 0xFF000000000000) == 0x3000000000000)
  {
    v22 = 0;
    v23 = 0;
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    v26 = 0;
    v20.i64[0] = 0x3000000050003;
    v27 = 12;
    v28 = -1;
    LOBYTE(v29) = 2;
    LOBYTE(v30) = 9;
    LOBYTE(v31) = 6;
    v21 = 1;
    v32 = 3;
    LOBYTE(v33) = 3;
    LOBYTE(v34) = 1;
  }
  else
  {
    v29 = HIBYTE(v141);
    v34 = HIWORD(v141);
    v25 = v141 >> 40;
    v30 = HIDWORD(v141);
    v31 = v141 >> 24;
    v33 = v141 >> 16;
    v24 = (v141 >> 8) & 1;
    v32 = v137[0];
    v22 = v138;
    v20.i32[0] = v139;
    v20 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v20.i8);
    v23 = v140;
    v26 = v142;
    v28 = v143;
    v27 = v144;
  }
  v118[0] = v32;
  v119 = v22;
  v120 = vmovn_s16(v20).u32[0];
  v121 = v23;
  v122 = v21;
  v123 = v24;
  v124 = v33;
  v125 = v31;
  v126 = v30;
  v127 = v25;
  v128 = v34;
  v129 = v29;
  v130 = v26;
  v131 = v28;
  v132 = v27;
  v133 = *(_OWORD *)(a3 + 72);
  v103 = *(_OWORD *)(a3 + 104);
  v104 = v133;
  v106 = *(_OWORD *)(a3 + 104);
  v35 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)((uint64_t)v118, (os_unfair_lock_s **)&v133, (uint64_t)&v106);
  v101 = v35;
  v102 = v36;
  if (a5)
  {
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v133, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
    v38 = v136;
    if ((v136 & 0xFF000000000000) == 0x3000000000000)
    {
      v39 = 0;
      v40 = 0;
      LOBYTE(v41) = 0;
      v37.i64[0] = 0x3000000050003;
      LOBYTE(v42) = 9;
      LOBYTE(v43) = 6;
      v38 = 1;
      v44 = 3;
      LOBYTE(v45) = 3;
    }
    else
    {
      v42 = HIDWORD(v136);
      v43 = v136 >> 24;
      v45 = v136 >> 16;
      v41 = (v136 >> 8) & 1;
      v44 = v133;
      v39 = *((_QWORD *)&v133 + 1);
      v37.i32[0] = v134;
      v37 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v37.i8);
      v40 = v135;
    }
    LOBYTE(v106) = v44;
    *((_QWORD *)&v106 + 1) = v39;
    v107 = vmovn_s16(v37).u32[0];
    v108 = v40;
    v109 = v38;
    v110 = v41;
    v111 = v45;
    v112 = v43;
    v113 = v42;
    v114 = 526;
    v115 = 2;
    v116 = 0;
    v117 = 3327;
    v99 = v103;
    v100 = v104;
    *(_QWORD *)&v100 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)((uint64_t)&v106, (os_unfair_lock_s **)&v100, (uint64_t)&v99);
    *((_QWORD *)&v100 + 1) = v48;
    *(_QWORD *)&v99 = a4;
    *((_QWORD *)&v99 + 1) = a5;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    v46 = v101;
    v47 = v102;
  }
  else
  {
    v46 = v35;
    v47 = v36;
  }
  outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v100 = *a1;
  v50 = v100;
  *a1 = 0x8000000000000000;
  v52 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v53 = *(_QWORD *)(v50 + 16);
  v54 = (v51 & 1) == 0;
  v55 = v53 + v54;
  if (__OFADD__(v53, v54))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(a4) = v51;
    if (*(_QWORD *)(v50 + 24) < v55)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, isUniquelyReferenced_nonNull_native);
      v56 = v100;
      v57 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((a4 & 1) != (v58 & 1))
        goto LABEL_60;
      v52 = v57;
      if ((a4 & 1) == 0)
        goto LABEL_56;
LABEL_21:
      v59 = (uint64_t *)(*(_QWORD *)(v56 + 56) + 16 * v52);
      swift_bridgeObjectRelease();
      *v59 = v46;
      v59[1] = v47;
LABEL_57:
      *a1 = v56;
      swift_bridgeObjectRelease();
      result = outlined release of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      v93 = v102;
      *v98 = v101;
      v98[1] = v93;
      return result;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v56 = v50;
      if ((v51 & 1) != 0)
        goto LABEL_21;
LABEL_56:
      specialized _NativeDictionary._insert(at:key:value:)(v52, a2, v46, v47, (_QWORD *)v56);
      outlined retain of ICUDateFormatter.PatternCacheKey((uint64_t)a2);
      goto LABEL_57;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.PatternCacheKey, String>);
  v60 = static _DictionaryStorage.copy(original:)();
  v56 = v60;
  if (!*(_QWORD *)(v50 + 16))
  {
LABEL_55:
    swift_bridgeObjectRelease();
    if ((a4 & 1) != 0)
      goto LABEL_21;
    goto LABEL_56;
  }
  v61 = (void *)(v60 + 64);
  v62 = (unint64_t)((1 << *(_BYTE *)(v56 + 32)) + 63) >> 6;
  if (v56 != v50 || (unint64_t)v61 >= v50 + 64 + 8 * v62)
    memmove(v61, (const void *)(v50 + 64), 8 * v62);
  v63 = 0;
  *(_QWORD *)(v56 + 16) = *(_QWORD *)(v50 + 16);
  v64 = 1 << *(_BYTE *)(v50 + 32);
  v65 = -1;
  if (v64 < 64)
    v65 = ~(-1 << v64);
  v66 = v65 & *(_QWORD *)(v50 + 64);
  v94 = v50 + 64;
  v95 = (unint64_t)(v64 + 63) >> 6;
  while (1)
  {
    if (v66)
    {
      v96 = (v66 - 1) & v66;
      v97 = v63;
      v67 = __clz(__rbit64(v66)) | (v63 << 6);
      goto LABEL_31;
    }
    v89 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v89 >= v95)
      goto LABEL_55;
    v90 = *(_QWORD *)(v94 + 8 * v89);
    v91 = v63 + 1;
    if (!v90)
    {
      v91 = v63 + 2;
      if (v63 + 2 >= v95)
        goto LABEL_55;
      v90 = *(_QWORD *)(v94 + 8 * v91);
      if (!v90)
      {
        v91 = v63 + 3;
        if (v63 + 3 >= v95)
          goto LABEL_55;
        v90 = *(_QWORD *)(v94 + 8 * v91);
        if (!v90)
        {
          v91 = v63 + 4;
          if (v63 + 4 >= v95)
            goto LABEL_55;
          v90 = *(_QWORD *)(v94 + 8 * v91);
          if (!v90)
          {
            v91 = v63 + 5;
            if (v63 + 5 >= v95)
              goto LABEL_55;
            v90 = *(_QWORD *)(v94 + 8 * v91);
            if (!v90)
            {
              v91 = v63 + 6;
              if (v63 + 6 >= v95)
                goto LABEL_55;
              v90 = *(_QWORD *)(v94 + 8 * v91);
              if (!v90)
              {
                v91 = v63 + 7;
                if (v63 + 7 >= v95)
                  goto LABEL_55;
                v90 = *(_QWORD *)(v94 + 8 * v91);
                if (!v90)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_54:
    v96 = (v90 - 1) & v90;
    v97 = v91;
    v67 = __clz(__rbit64(v90)) + (v91 << 6);
LABEL_31:
    v68 = 96 * v67;
    v69 = *(_QWORD *)(v50 + 48) + 96 * v67;
    v70 = *(_QWORD *)v69;
    v71 = *(_QWORD *)(v69 + 8);
    v72 = *(_BYTE *)(v69 + 16);
    v73 = *(_BYTE *)(v69 + 24);
    v74 = *(_QWORD *)(v69 + 32);
    v75 = *(_QWORD *)(v69 + 48);
    v76 = *(_BYTE *)(v69 + 56);
    v77 = *(_BYTE *)(v69 + 57);
    v78 = *(_WORD *)(v69 + 62);
    v79 = *(_QWORD *)(v69 + 64);
    v80 = *(_WORD *)(v69 + 72);
    v82 = *(_QWORD *)(v69 + 80);
    v81 = *(_QWORD *)(v69 + 88);
    v83 = 16 * v67;
    v84 = (uint64_t *)(*(_QWORD *)(v50 + 56) + v83);
    v85 = *v84;
    v86 = v84[1];
    v87 = *(_QWORD *)(v56 + 48) + v68;
    LODWORD(v68) = *(_DWORD *)(v69 + 40);
    LODWORD(v69) = *(_DWORD *)(v69 + 58);
    *(_QWORD *)v87 = v70;
    *(_QWORD *)(v87 + 8) = v71;
    *(_BYTE *)(v87 + 16) = v72;
    *(_BYTE *)(v87 + 24) = v73;
    *(_QWORD *)(v87 + 32) = v74;
    *(_DWORD *)(v87 + 40) = v68;
    *(_QWORD *)(v87 + 48) = v75;
    *(_BYTE *)(v87 + 56) = v76;
    *(_BYTE *)(v87 + 57) = v77;
    *(_DWORD *)(v87 + 58) = v69;
    *(_WORD *)(v87 + 62) = v78;
    *(_QWORD *)(v87 + 64) = v79;
    *(_WORD *)(v87 + 72) = v80;
    *(_QWORD *)(v87 + 80) = v82;
    *(_QWORD *)(v87 + 88) = v81;
    v88 = (_QWORD *)(*(_QWORD *)(v56 + 56) + v83);
    *v88 = v85;
    v88[1] = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66 = v96;
    v63 = v97;
  }
  v92 = v63 + 8;
  if (v63 + 8 >= v95)
    goto LABEL_55;
  v90 = *(_QWORD *)(v94 + 8 * v92);
  if (v90)
  {
    v91 = v63 + 8;
    goto LABEL_54;
  }
  while (1)
  {
    v91 = v92 + 1;
    if (__OFADD__(v92, 1))
      break;
    if (v91 >= v95)
      goto LABEL_55;
    v90 = *(_QWORD *)(v94 + 8 * v91);
    ++v92;
    if (v90)
      goto LABEL_54;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v2 = *(_QWORD *)result;
  v3 = *(_BYTE *)(result + 8);
  v4 = *(_QWORD *)v1;
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    if (*(_BYTE *)(result + 8))
    {
      v5 = v4 | v2;
      if ((v5 & 0x2000) != 0)
      {
        v2 = 0;
        v3 = 0;
      }
      else if ((v5 & 0x40) != 0)
      {
        v3 = 1;
        v2 = 64;
      }
      else
      {
        v6 = v5 & 1;
        if ((v5 & 0x20) != 0)
        {
          v2 = v6 | 0x20;
        }
        else if ((v5 & 0x10) != 0)
        {
          v2 = v6 | 0x10;
        }
        else if ((v5 & 0x80) != 0)
        {
          v2 = v6 | 0x80;
        }
        else if ((v5 & 8) != 0)
        {
          v2 = v6 | 8;
        }
        else
        {
          v2 = v5 & 0x1E07;
        }
        v3 = 1;
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(result + 8) & 1) != 0)
      return result;
    v3 = 0;
    if (v2 >= v4)
      v2 = *(_QWORD *)v1;
  }
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  return result;
}

uint64_t one-time initialization function for updateScheduleCache(uint64_t a1)
{
  return one-time initialization function for patternCache(a1, &demangling cache variable for type metadata for LockedState<[ICUDateFormatter.DateFormatInfo : ICUDateFormatter.DateFormatInfo.UpdateSchedule]>._Buffer, &static ICUDateFormatter.DateFormatInfo.updateScheduleCache);
}

uint64_t one-time initialization function for patternCache(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  *a3 = result;
  return result;
}

uint64_t closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t updated;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  char isUniquelyReferenced_nonNull_native;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD v83[5];
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  _OWORD v90[4];
  double v91[13];

  v7 = *(_OWORD *)(a2 + 16);
  v90[0] = *(_OWORD *)a2;
  v90[1] = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v90[2] = *(_OWORD *)(a2 + 32);
  v90[3] = v8;
  outlined retain of Date.VerbatimFormatStyle(a2);
  ICUDateFormatter.DateFormatInfo.init(_:)(v90, (uint64_t)v91);
  v9 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v9 + 56) + 16 * v10;
      v13 = *(_QWORD *)v12;
      LOBYTE(v14) = *(_BYTE *)(v12 + 8);
      outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      goto LABEL_89;
    }
    outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
  }
  v85 = a1;
  v84 = a3;
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  v18 = udat_toCalendarDateField();
  LODWORD(v86) = v18;
  *(_QWORD *)&v90[0] = 39;
  *((_QWORD *)&v90[0] + 1) = 0xE100000000000000;
  MEMORY[0x1E0C80A78](v18);
  v83[2] = v90;
  swift_bridgeObjectRetain();
  v19 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 0, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v83, v16, v17);
  v20 = specialized Sequence.filter(_:)(v19);
  swift_bridgeObjectRelease();
  v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Ss7elementtG_Sss5NeverOTg5166_sSS10FoundationE21purgingStringLiterals33_897C603A04DF76F04B69FE4D70F5F325LLSSyFSsSi6offset_Ss7elementt_tcfu_32f319bcf0ad9587a902b48655fa9ced40SiAD_SsAEtSsTf3nnnpk_nTf1cn_n(v20);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v90[0] = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
  LOBYTE(v22) = lazy protocol witness table accessor for type [Substring] and conformance [A]();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v23 = Sequence<>.joined(separator:)();
  v25 = v24;
  swift_bridgeObjectRelease();
  updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS9UTF16ViewV_So16UDateFormatFieldVs5NeverOTg5097_sSS10FoundationE14updateSchedule33_897C603A04DF76F04B69FE4D70F5F325LLAA16ICUDateFormatterC14Dateg22InfoV06UpdateC0OvgSo05f2P5H15Vs6UInt16VXEfU_Tf1cn_n(v23, v25);
  v83[4] = v3;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(updated + 16);
  if (!v27)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v28 = 0;
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>;
  v87 = xmmword_18205C850;
  while (1)
  {
    v29 = *(_DWORD *)(updated + 4 * v28 + 32);
    v30 = v14[2];
    if (!v30 || (v31 = v14[v30 + 3], (v32 = *(_QWORD *)(v31 + 16)) == 0) || *(_DWORD *)(v31 + 32) != v29)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v87;
      *(_DWORD *)(v35 + 32) = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v37 = v14[2];
      v36 = v14[3];
      if (v37 >= v36 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v14);
      v14[2] = v37 + 1;
      v14[v37 + 4] = v35;
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32 + 1, 1, (char *)v31);
    v13 = *(_QWORD *)(v31 + 16);
    v33 = *(_QWORD *)(v31 + 24);
    if (v13 >= v33 >> 1)
      v31 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v13 + 1, 1, (char *)v31);
    *(_QWORD *)(v31 + 16) = v13 + 1;
    *(_DWORD *)(v31 + 4 * v13 + 32) = v29;
    v34 = v14[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      break;
    if (!v34)
      goto LABEL_25;
LABEL_18:
    if (v34 > v14[2])
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    v14[v34 + 3] = v31;
    swift_bridgeObjectRelease();
LABEL_8:
    if (v27 == ++v28)
      goto LABEL_26;
  }
  v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
  if (v34)
    goto LABEL_18;
LABEL_25:
  __break(1u);
LABEL_26:
  swift_bridgeObjectRelease();
LABEL_28:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v90[0] = 0;
  BYTE8(v90[0]) = 1;
  v38 = v14[2];
  if (v38)
  {
    swift_bridgeObjectRetain();
    v39 = 0;
    v40 = v86;
    do
    {
      v22 = (uint64_t *)v14[v39 + 4];
      v41 = v22[2];
      if (v41)
      {
        if (*((_DWORD *)v22 + 8) == 8)
        {
          v42 = 9 - v41;
          if ((BYTE8(v90[0]) & 1) == 0 && v42 >= *(uint64_t *)&v90[0])
            v42 = *(_QWORD *)&v90[0];
          *(_QWORD *)&v90[0] = v42;
          BYTE8(v90[0]) = 0;
        }
        else
        {
          swift_bridgeObjectRetain();
          v43 = udat_toCalendarDateField();
          if (v43 != v40 && v43 <= 0x16 && ((0x4ABDFFu >> v43) & 1) != 0)
          {
            v88 = qword_1820FE9E8[v43];
            v89 = 1;
            ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v88);
            v40 = v86;
          }
          swift_bridgeObjectRelease();
        }
      }
      ++v39;
    }
    while (v38 != v39);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)&v90[0];
  LOBYTE(v14) = BYTE8(v90[0]);
  v44 = v85;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v90[0] = *v44;
  v27 = *(_QWORD *)&v90[0];
  *v44 = 0x8000000000000000;
  v31 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
  v47 = *(_QWORD *)(v27 + 16);
  v48 = (v46 & 1) == 0;
  v49 = v47 + v48;
  if (__OFADD__(v47, v48))
    goto LABEL_53;
  LOBYTE(v22) = v46;
  if (*(_QWORD *)(v27 + 24) < v49)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
    v50 = *(_QWORD *)&v90[0];
    v51 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
    if ((v22 & 1) != (v52 & 1))
      goto LABEL_92;
    v31 = v51;
    if ((v22 & 1) == 0)
    {
LABEL_87:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v91, v13, (char)v14, (_QWORD *)v50);
      outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
LABEL_88:
      *v44 = v50;
      swift_bridgeObjectRelease();
      result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v91);
      a3 = v84;
LABEL_89:
      *(_QWORD *)a3 = v13;
      *(_BYTE *)(a3 + 8) = (_BYTE)v14;
      return result;
    }
LABEL_51:
    v53 = *(_QWORD *)(v50 + 56) + 16 * v31;
    *(_QWORD *)v53 = v13;
    *(_BYTE *)(v53 + 8) = (_BYTE)v14;
    goto LABEL_88;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v50 = v27;
    if ((v46 & 1) == 0)
      goto LABEL_87;
    goto LABEL_51;
  }
LABEL_54:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  v54 = static _DictionaryStorage.copy(original:)();
  v50 = v54;
  if (!*(_QWORD *)(v27 + 16))
  {
LABEL_86:
    swift_bridgeObjectRelease();
    v44 = v85;
    if ((v22 & 1) == 0)
      goto LABEL_87;
    goto LABEL_51;
  }
  v55 = (void *)(v54 + 64);
  v56 = (unint64_t)((1 << *(_BYTE *)(v50 + 32)) + 63) >> 6;
  if (v50 != v27 || (unint64_t)v55 >= v27 + 64 + 8 * v56)
    memmove(v55, (const void *)(v27 + 64), 8 * v56);
  v86 = v27 + 64;
  v57 = 0;
  *(_QWORD *)(v50 + 16) = *(_QWORD *)(v27 + 16);
  v58 = 1 << *(_BYTE *)(v27 + 32);
  v59 = -1;
  if (v58 < 64)
    v59 = ~(-1 << v58);
  v60 = v59 & *(_QWORD *)(v27 + 64);
  *(_QWORD *)&v87 = (unint64_t)(v58 + 63) >> 6;
  while (2)
  {
    if (v60)
    {
      v61 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      v62 = v61 | (v57 << 6);
LABEL_62:
      v63 = 96 * v62;
      v64 = *(_QWORD *)(v27 + 48) + 96 * v62;
      v65 = *(_QWORD *)(v64 + 8);
      v66 = *(_QWORD *)(v64 + 16);
      v67 = *(_QWORD *)(v64 + 24);
      v68 = *(_BYTE *)(v64 + 32);
      v69 = *(_BYTE *)(v64 + 56);
      v70 = *(_QWORD *)(v64 + 64);
      v71 = *(_QWORD *)(v64 + 72);
      v72 = *(_BYTE *)(v64 + 80);
      v73 = *(_QWORD *)(v64 + 88);
      v74 = 16 * v62;
      v75 = *(_QWORD *)(v27 + 56) + v74;
      v76 = *(_QWORD *)v75;
      LOBYTE(v75) = *(_BYTE *)(v75 + 8);
      v77 = *(_QWORD *)(v50 + 48) + v63;
      v78 = *(_OWORD *)(v64 + 40);
      *(_QWORD *)v77 = *(_QWORD *)v64;
      *(_QWORD *)(v77 + 8) = v65;
      *(_QWORD *)(v77 + 16) = v66;
      *(_QWORD *)(v77 + 24) = v67;
      *(_BYTE *)(v77 + 32) = v68;
      *(_OWORD *)(v77 + 40) = v78;
      *(_BYTE *)(v77 + 56) = v69;
      *(_QWORD *)(v77 + 64) = v70;
      *(_QWORD *)(v77 + 72) = v71;
      *(_BYTE *)(v77 + 80) = v72;
      *(_QWORD *)(v77 + 88) = v73;
      v79 = *(_QWORD *)(v50 + 56) + v74;
      *(_QWORD *)v79 = v76;
      *(_BYTE *)(v79 + 8) = v75;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v80 = v57 + 1;
  if (__OFADD__(v57, 1))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v80 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v80);
  ++v57;
  if (v81)
    goto LABEL_85;
  v57 = v80 + 1;
  if (v80 + 1 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v57);
  if (v81)
    goto LABEL_85;
  v57 = v80 + 2;
  if (v80 + 2 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v57);
  if (v81)
    goto LABEL_85;
  v57 = v80 + 3;
  if (v80 + 3 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v57);
  if (v81)
    goto LABEL_85;
  v57 = v80 + 4;
  if (v80 + 4 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v57);
  if (v81)
    goto LABEL_85;
  v57 = v80 + 5;
  if (v80 + 5 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v57);
  if (v81)
    goto LABEL_85;
  v57 = v80 + 6;
  if (v80 + 6 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v57);
  if (v81)
  {
LABEL_85:
    v60 = (v81 - 1) & v81;
    v62 = __clz(__rbit64(v81)) + (v57 << 6);
    goto LABEL_62;
  }
  v82 = v80 + 7;
  if (v82 >= (uint64_t)v87)
    goto LABEL_86;
  v81 = *(_QWORD *)(v86 + 8 * v82);
  if (v81)
  {
    v57 = v82;
    goto LABEL_85;
  }
  while (1)
  {
    v57 = v82 + 1;
    if (__OFADD__(v82, 1))
      break;
    if (v57 >= (uint64_t)v87)
      goto LABEL_86;
    v81 = *(_QWORD *)(v86 + 8 * v57);
    ++v82;
    if (v81)
      goto LABEL_85;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  int16x8_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  _BYTE v86[56];
  double v87[12];
  char v88;
  uint64_t v89;
  unsigned __int32 v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;

  v4 = v3;
  v8 = a2[5];
  v83 = a2[4];
  v84 = v8;
  v85[0] = a2[6];
  *(_OWORD *)((char *)v85 + 10) = *(__int128 *)((char *)a2 + 106);
  v9 = a2[1];
  v79 = *a2;
  v80 = v9;
  v10 = a2[3];
  v81 = a2[2];
  v82 = v10;
  outlined retain of Date.FormatStyle((uint64_t)a2);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v79, (uint64_t)v87);
  v11 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v11 + 56) + 16 * v12;
      v15 = *(_QWORD *)v14;
      v16 = *(_BYTE *)(v14 + 8);
      outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
LABEL_52:
      *(_QWORD *)a3 = v15;
      *(_BYTE *)(a3 + 8) = v16;
      return result;
    }
    outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
  }
  outlined init with take of LocalePreferences?((uint64_t)a2, (uint64_t)v86, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v79, &demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  v19 = v81;
  v103 = v3;
  if ((v81 & 0xFF000000000000) == 0x3000000000000)
  {
    v28 = 0;
    v29 = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v22) = 0;
    v30 = 0;
    v18.i64[0] = 0x3000000050003;
    v32 = 12;
    v31 = -1;
    LOBYTE(v20) = 2;
    LOBYTE(v23) = 9;
    LOBYTE(v24) = 6;
    v19 = 1;
    v27 = 3;
    LOBYTE(v25) = 3;
    LOBYTE(v21) = 1;
  }
  else
  {
    v20 = BYTE7(v81);
    v21 = WORD3(v81);
    v22 = (unint64_t)v81 >> 40;
    v23 = DWORD1(v81);
    v24 = (unint64_t)v81 >> 24;
    v25 = (unint64_t)v81 >> 16;
    v26 = ((unint64_t)v81 >> 8) & 1;
    v27 = v79;
    v28 = *((_QWORD *)&v79 + 1);
    v18.i32[0] = v80;
    v18 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v18.i8);
    v29 = *((_QWORD *)&v80 + 1);
    v30 = *((_QWORD *)&v81 + 1);
    v31 = v82;
    v32 = BYTE1(v82);
  }
  v88 = v27;
  v89 = v28;
  v90 = vmovn_s16(v18).u32[0];
  v91 = v29;
  v92 = v19;
  v93 = v26;
  v94 = v25;
  v95 = v24;
  v96 = v23;
  v97 = v22;
  v98 = v21;
  v99 = v20;
  v100 = v30;
  v101 = v31;
  v102 = v32;
  Date.FormatStyle.DateFieldCollection.updateSchedule.getter((uint64_t)&v77);
  v15 = v77;
  v16 = v78;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v77 = *a1;
  v34 = v77;
  *a1 = 0x8000000000000000;
  v36 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
  v37 = *(_QWORD *)(v34 + 16);
  v38 = (v35 & 1) == 0;
  v39 = v37 + v38;
  if (__OFADD__(v37, v38))
  {
    __break(1u);
  }
  else
  {
    v4 = v35;
    if (*(_QWORD *)(v34 + 24) < v39)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      v40 = v77;
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
      if ((v4 & 1) != (v42 & 1))
        goto LABEL_55;
      v36 = v41;
      if ((v4 & 1) == 0)
        goto LABEL_50;
LABEL_15:
      v43 = *(_QWORD *)(v40 + 56) + 16 * v36;
      *(_QWORD *)v43 = v15;
      *(_BYTE *)(v43 + 8) = v16;
LABEL_51:
      *a1 = v40;
      swift_bridgeObjectRelease();
      result = outlined release of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      goto LABEL_52;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v40 = v34;
      if ((v35 & 1) != 0)
        goto LABEL_15;
LABEL_50:
      specialized _NativeDictionary._insert(at:key:value:)(v36, v87, v15, v16, (_QWORD *)v40);
      outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)v87);
      goto LABEL_51;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  v44 = static _DictionaryStorage.copy(original:)();
  v40 = v44;
  if (!*(_QWORD *)(v34 + 16))
  {
LABEL_49:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_15;
    goto LABEL_50;
  }
  v45 = (void *)(v44 + 64);
  v46 = (unint64_t)((1 << *(_BYTE *)(v40 + 32)) + 63) >> 6;
  if (v40 != v34 || (unint64_t)v45 >= v34 + 64 + 8 * v46)
    memmove(v45, (const void *)(v34 + 64), 8 * v46);
  v47 = 0;
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(v34 + 16);
  v48 = 1 << *(_BYTE *)(v34 + 32);
  v49 = -1;
  if (v48 < 64)
    v49 = ~(-1 << v48);
  v50 = v49 & *(_QWORD *)(v34 + 64);
  v73 = v34 + 64;
  v74 = (unint64_t)(v48 + 63) >> 6;
  while (1)
  {
    if (v50)
    {
      v75 = (v50 - 1) & v50;
      v76 = v47;
      v51 = __clz(__rbit64(v50)) | (v47 << 6);
      goto LABEL_25;
    }
    v69 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v69 >= v74)
      goto LABEL_49;
    v70 = *(_QWORD *)(v73 + 8 * v69);
    v71 = v47 + 1;
    if (!v70)
    {
      v71 = v47 + 2;
      if (v47 + 2 >= v74)
        goto LABEL_49;
      v70 = *(_QWORD *)(v73 + 8 * v71);
      if (!v70)
      {
        v71 = v47 + 3;
        if (v47 + 3 >= v74)
          goto LABEL_49;
        v70 = *(_QWORD *)(v73 + 8 * v71);
        if (!v70)
        {
          v71 = v47 + 4;
          if (v47 + 4 >= v74)
            goto LABEL_49;
          v70 = *(_QWORD *)(v73 + 8 * v71);
          if (!v70)
          {
            v71 = v47 + 5;
            if (v47 + 5 >= v74)
              goto LABEL_49;
            v70 = *(_QWORD *)(v73 + 8 * v71);
            if (!v70)
            {
              v71 = v47 + 6;
              if (v47 + 6 >= v74)
                goto LABEL_49;
              v70 = *(_QWORD *)(v73 + 8 * v71);
              if (!v70)
              {
                v71 = v47 + 7;
                if (v47 + 7 >= v74)
                  goto LABEL_49;
                v70 = *(_QWORD *)(v73 + 8 * v71);
                if (!v70)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_48:
    v75 = (v70 - 1) & v70;
    v76 = v71;
    v51 = __clz(__rbit64(v70)) + (v71 << 6);
LABEL_25:
    v52 = 96 * v51;
    v53 = *(_QWORD *)(v34 + 48) + 96 * v51;
    v54 = *(_QWORD *)(v53 + 8);
    v55 = *(_QWORD *)(v53 + 16);
    v56 = *(_QWORD *)(v53 + 24);
    v57 = *(_BYTE *)(v53 + 32);
    v58 = *(_BYTE *)(v53 + 56);
    v59 = *(_QWORD *)(v53 + 64);
    v60 = *(_QWORD *)(v53 + 72);
    v61 = *(_BYTE *)(v53 + 80);
    v62 = *(_QWORD *)(v53 + 88);
    v63 = 16 * v51;
    v64 = *(_QWORD *)(v34 + 56) + v63;
    v65 = *(_QWORD *)v64;
    LOBYTE(v64) = *(_BYTE *)(v64 + 8);
    v66 = *(_QWORD *)(v40 + 48) + v52;
    v67 = *(_OWORD *)(v53 + 40);
    *(_QWORD *)v66 = *(_QWORD *)v53;
    *(_QWORD *)(v66 + 8) = v54;
    *(_QWORD *)(v66 + 16) = v55;
    *(_QWORD *)(v66 + 24) = v56;
    *(_BYTE *)(v66 + 32) = v57;
    *(_OWORD *)(v66 + 40) = v67;
    *(_BYTE *)(v66 + 56) = v58;
    *(_QWORD *)(v66 + 64) = v59;
    *(_QWORD *)(v66 + 72) = v60;
    *(_BYTE *)(v66 + 80) = v61;
    *(_QWORD *)(v66 + 88) = v62;
    v68 = *(_QWORD *)(v40 + 56) + v63;
    *(_QWORD *)v68 = v65;
    *(_BYTE *)(v68 + 8) = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50 = v75;
    v47 = v76;
  }
  v72 = v47 + 8;
  if (v47 + 8 >= v74)
    goto LABEL_49;
  v70 = *(_QWORD *)(v73 + 8 * v72);
  if (v70)
  {
    v71 = v47 + 8;
    goto LABEL_48;
  }
  while (1)
  {
    v71 = v72 + 1;
    if (__OFADD__(v72, 1))
      break;
    if (v71 >= v74)
      goto LABEL_49;
    v70 = *(_QWORD *)(v73 + 8 * v71);
    ++v72;
    if (v70)
      goto LABEL_48;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Date.FormatStyle.DateFieldCollection.updateSchedule.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[12];
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  _BYTE v18[13];
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;

  v3 = *(unsigned __int8 *)(v1 + 48);
  if (v3 == 255)
  {
    outlined init with take of LocalePreferences?(v1 + 39, (uint64_t)&v13, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    result = outlined init with take of LocalePreferences?((uint64_t)&v13, (uint64_t)&v14, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
    if (v14 == 2)
    {
      outlined init with take of LocalePreferences?(v1, (uint64_t)&v12, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
      outlined init with take of LocalePreferences?((uint64_t)&v12, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
      if (v15 != 3)
      {
        v22 = 1;
        v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }
      outlined init with take of LocalePreferences?(v1 + 8, (uint64_t)v11, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
      outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)&v16, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
      if (v17 != 255)
      {
        outlined init with take of Date.FormatStyle.Symbol.SymbolType.YearOption(&v16, (uint64_t)v18);
        v22 = 2;
        v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }
      outlined init with take of LocalePreferences?(v1 + 17, (uint64_t)&v10, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
      outlined init with take of LocalePreferences?((uint64_t)&v10, (uint64_t)&v19, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
      if (v19 != 5)
      {
        v22 = 512;
        v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }
      outlined init with take of LocalePreferences?(v1 + 18, (uint64_t)&v9, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
      outlined init with take of LocalePreferences?((uint64_t)&v9, (uint64_t)&v20, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
      if (v20 != 5)
      {
        v22 = 4;
        v23 = 1;
        ICUDateFormatter.DateFormatInfo.UpdateSchedule.reduce(with:)((uint64_t)&v22);
      }
      outlined init with take of LocalePreferences?(v1 + 19, (uint64_t)&v8, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
      outlined init with take of LocalePreferences?((uint64_t)&v8, (uint64_t)&v21, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
      __asm { BR              X10 }
    }
    goto LABEL_16;
  }
  if ((v3 & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 40);
    v6 = __OFSUB__(9, v5);
    v7 = 9 - v5;
    if (v6)
    {
      __break(1u);
LABEL_16:
      *(_QWORD *)a1 = 64;
      *(_BYTE *)(a1 + 8) = 1;
      return result;
    }
  }
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t outlined consume of Set<Calendar.Component>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined retain of Date.VerbatimFormatStyle(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t outlined release of ICUDateFormatter.DateFormatInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

BOOL specialized static ICUDateFormatter.DateFormatInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  char v14;
  _BOOL8 result;
  char v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v24 = *(unsigned __int8 *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 72);
  v23 = *(_QWORD *)(a1 + 64);
  v6 = *(double *)(a1 + 88);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = *(unsigned __int8 *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a2 + 64);
  v18 = *(unsigned __int8 *)(a2 + 80);
  v19 = *(unsigned __int8 *)(a1 + 80);
  v13 = *(double *)(a2 + 88);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8)
    {
      result = 0;
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v16 & 1) == 0)
        return result;
    }
    if (v4 == v9 && v5 == v11 && v25 == v10 && v24 == v12)
    {
      if (v23 == v21 && v22 == v20)
      {
        if (v19 != v18)
          return 0;
        return v6 == v13;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v17 & 1) != 0 && ((v19 ^ v18) & 1) == 0)
        return v6 == v13;
    }
  }
  return result;
}

BOOL specialized static ICUDateFormatter.PatternCacheKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  _OWORD v20[3];
  __int16 v21;
  _OWORD v22[3];
  __int16 v23;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = *(_OWORD *)(a1 + 5);
  v20[0] = *(_OWORD *)(a1 + 3);
  v20[1] = v7;
  v20[2] = *(_OWORD *)(a1 + 7);
  v21 = *((_WORD *)a1 + 36);
  v8 = a1[10];
  v9 = a1[11];
  v10 = *a2;
  v11 = a2[1];
  v12 = *((unsigned __int8 *)a2 + 16);
  v13 = *(_OWORD *)(a2 + 3);
  v14 = *(_OWORD *)(a2 + 5);
  v15 = *(_OWORD *)(a2 + 7);
  v23 = *((_WORD *)a2 + 36);
  v22[1] = v14;
  v22[2] = v15;
  v22[0] = v13;
  v17 = a2[10];
  v16 = a2[11];
  if (v4 == v10 && v5 == v11)
  {
    if (v6 != v12)
      return 0;
LABEL_7:
    if (specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)((unsigned __int8 *)v20, (unsigned __int8 *)v22))
    {
      if (v9)
        return v16 && (v8 == v17 && v9 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      if (!v16)
        return 1;
    }
    return 0;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v18 & 1) != 0 && v6 == v12)
    goto LABEL_7;
  return result;
}

uint64_t specialized static ICUDateFormatter.cachedFormatter(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  os_unfair_lock_s *v81;
  __int128 *v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  int64_t v86;
  void *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[7];
  _BYTE v92[7];
  int v93;
  _QWORD __dst[44];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int16 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD __src[22];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)a1;
  v83 = *(_QWORD *)(a1 + 8);
  v85 = *(_QWORD *)(a1 + 24);
  v87 = *(void **)(a1 + 16);
  v84 = *(_BYTE *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_BYTE *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v89 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  if (one-time initialization token for formatterCache != -1)
    swift_once();
  v8 = unk_1EDC47D40;
  v79 = static ICUDateFormatter.formatterCache;
  v9 = unk_1EDC47D40 + 16;
  v10 = (os_unfair_lock_s *)(unk_1EDC47D40 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  *(_QWORD *)&__src[0] = v1;
  *((_QWORD *)&__src[0] + 1) = v83;
  *(_QWORD *)&__src[1] = v87;
  *((_QWORD *)&__src[1] + 1) = v85;
  LOBYTE(__src[2]) = v84;
  *((_QWORD *)&__src[2] + 1) = v2;
  *(_QWORD *)&__src[3] = v3;
  v80 = v4;
  BYTE8(__src[3]) = v4;
  *(_QWORD *)&__src[4] = v89;
  *((_QWORD *)&__src[4] + 1) = v5;
  LOBYTE(__src[5]) = v6;
  *((_QWORD *)&__src[5] + 1) = v7;
  v82 = (__int128 *)v9;
  v11 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v9, (double *)__src);
  v81 = v10;
  os_unfair_lock_unlock(v10);
  swift_release();
  if (v11 != 1)
    goto LABEL_74;
  v78 = v8;
  v74 = v3;
  v76 = v2;
  v12 = &v95;
  type metadata accessor for ICUDateFormatter();
  v77 = v6;
  v75 = swift_allocObject();
  *(_BYTE *)(v75 + 24) = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72 = v1;
  Locale.Components.init(identifier:)(v1, v83, &v95);
  __src[0] = v95;
  __src[1] = v96;
  __src[2] = v97;
  __src[3] = v98;
  __src[4] = v99;
  __src[5] = v100;
  LOBYTE(__src[6]) = v84;
  *(_OWORD *)((char *)&__src[6] + 8) = v101;
  *(_OWORD *)((char *)&__src[7] + 8) = v102;
  *(_OWORD *)((char *)&__src[8] + 8) = v103;
  *(_OWORD *)((char *)&__src[9] + 8) = v104;
  *(_OWORD *)((char *)&__src[10] + 8) = v105;
  *(_OWORD *)((char *)&__src[11] + 8) = v106;
  WORD4(__src[12]) = v107;
  __src[13] = v108;
  __src[14] = v109;
  __src[15] = v110;
  __src[16] = v111;
  __src[17] = v112;
  __src[18] = v113;
  __src[19] = v114;
  __src[20] = v115;
  __src[21] = v116;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  v14 = v13;
  outlined release of Locale.Components((uint64_t *)__src);
  swift_bridgeObjectRelease();
  v15 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v87, v85);
  swift_bridgeObjectRelease();
  v16 = specialized _copyCollectionToContiguousArray<A>(_:)(v89, v5);
  v73 = v5;
  swift_bridgeObjectRelease();
  LOBYTE(v93) = 0;
  if (v15[2] >> 31)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v16[2] >> 31)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v17 = udat_open();
  swift_release();
  swift_release();
  swift_release();
  v25 = v10;
  v12 = v82;
  v27 = v5;
  v26 = v74;
  v1 = v78;
  v11 = v75;
  if (!v17)
    goto LABEL_15;
  *(_QWORD *)(v75 + 16) = v17;
  udat_setContext();
  specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  v16 = (_QWORD *)v76;
  udat_setLenient();
  if ((v77 & 1) == 0)
  {
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
    udat_setBooleanAttribute();
    specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  }
  udat_getCalendar();
  v28 = ucal_clone();
  if (!specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR) || !v28)
    goto LABEL_24;
  MEMORY[0x186DAA160](v28);
  if (v76 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_76;
  }
  if (v76 > 0x7FFFFFFF)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  ucal_setAttribute();
  if (v74 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
  }
  if (v74 > 0x7FFFFFFF)
    goto LABEL_78;
  ucal_setAttribute();
  ucal_setMillis();
  ucal_get();
  ucal_setDateTime();
  ucal_getMillis();
  udat_set2DigitYearStart();
  udat_setCalendar();
LABEL_24:
  ucal_close();
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v25);
    v14 = *(_QWORD *)(v1 + 16);
    if (v79 >= *(_QWORD *)(v14 + 16))
      swift_bridgeObjectRetain();
    else
      *(_QWORD *)v12 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)&v95 = v72;
    *((_QWORD *)&v95 + 1) = v83;
    *(_QWORD *)&v96 = v87;
    *((_QWORD *)&v96 + 1) = v85;
    LOBYTE(v97) = v84;
    *(_DWORD *)((char *)&v97 + 1) = 0;
    DWORD1(v97) = v93;
    *((_QWORD *)&v97 + 1) = v16;
    *(_QWORD *)&v98 = v26;
    BYTE8(v98) = v80;
    *(_DWORD *)((char *)&v98 + 9) = *(_DWORD *)v92;
    HIDWORD(v98) = *(_DWORD *)&v92[3];
    *(_QWORD *)&v99 = v89;
    *((_QWORD *)&v99 + 1) = v27;
    LOBYTE(v100) = v77;
    *(_DWORD *)((char *)&v100 + 1) = *(_DWORD *)v91;
    DWORD1(v100) = *(_DWORD *)&v91[3];
    *((_QWORD *)&v100 + 1) = v7;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    __dst[0] = *(_QWORD *)v12;
    v30 = __dst[0];
    *(_QWORD *)v12 = 0x8000000000000000;
    v32 = specialized __RawDictionaryStorage.find<A>(_:)((double *)&v95);
    v33 = *(_QWORD *)(v30 + 16);
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (!__OFADD__(v33, v34))
      break;
LABEL_38:
    __break(1u);
    swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static ICUError.logger);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      *(_QWORD *)&v95 = v22;
      *(_DWORD *)v21 = 136315394;
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000018230A010, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2080;
      v23 = ICUError.debugDescription.getter((UErrorCode)v16);
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v23, v24, (uint64_t *)&v95);
      v1 = v78;
      v12 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1817D9000, v19, v20, "%s. Error: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186DA9E78](v22, -1, -1);
      MEMORY[0x186DA9E78](v21, -1, -1);
    }

    v25 = v81;
    v27 = v73;
    v26 = v74;
    if (v14)
      udat_close();
LABEL_15:
    swift_deallocPartialClassInstance();
    v11 = 0;
    v16 = (_QWORD *)v76;
  }
  v36 = v31;
  if (*(_QWORD *)(v30 + 24) < v35)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
    v37 = __dst[0];
    v38 = specialized __RawDictionaryStorage.find<A>(_:)((double *)&v95);
    if ((v36 & 1) != (v39 & 1))
      goto LABEL_81;
    v32 = v38;
    if ((v36 & 1) == 0)
      goto LABEL_72;
LABEL_35:
    v40 = *(_QWORD *)(v37 + 56);
    swift_release();
    *(_QWORD *)(v40 + 8 * v32) = v11;
LABEL_73:
    *(_QWORD *)(v1 + 16) = v37;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v25);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of ICUDateIntervalFormatter??(1);
LABEL_74:
    swift_release();
    return v11;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v37 = v30;
    if ((v31 & 1) != 0)
      goto LABEL_35;
LABEL_72:
    specialized _NativeDictionary._insert(at:key:value:)(v32, &v95, v11, (_QWORD *)v37);
    outlined retain of ICUDateFormatter.DateFormatInfo((uint64_t)&v95);
    goto LABEL_73;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter?>);
  v41 = static _DictionaryStorage.copy(original:)();
  v37 = v41;
  if (!*(_QWORD *)(v30 + 16))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0)
      goto LABEL_35;
    goto LABEL_72;
  }
  v42 = (char *)(v41 + 64);
  v88 = (char *)(v30 + 64);
  v43 = (unint64_t)((1 << *(_BYTE *)(v37 + 32)) + 63) >> 6;
  if (v37 != v30 || v42 >= &v88[8 * v43])
    memmove(v42, v88, 8 * v43);
  v44 = 0;
  *(_QWORD *)(v37 + 16) = *(_QWORD *)(v30 + 16);
  v45 = 1 << *(_BYTE *)(v30 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & *(_QWORD *)(v30 + 64);
  v86 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    v25 = v81;
    v1 = v78;
    if (v47)
    {
      v90 = (v47 - 1) & v47;
      v48 = v44;
      v49 = __clz(__rbit64(v47)) | (v44 << 6);
      goto LABEL_47;
    }
    v65 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_80;
    }
    if (v65 >= v86)
      goto LABEL_71;
    v66 = *(_QWORD *)&v88[8 * v65];
    v67 = v44 + 1;
    if (!v66)
    {
      v67 = v65 + 1;
      if (v65 + 1 >= v86)
        goto LABEL_71;
      v66 = *(_QWORD *)&v88[8 * v67];
      if (!v66)
      {
        v67 = v65 + 2;
        if (v65 + 2 >= v86)
          goto LABEL_71;
        v66 = *(_QWORD *)&v88[8 * v67];
        if (!v66)
        {
          v67 = v65 + 3;
          if (v65 + 3 >= v86)
            goto LABEL_71;
          v66 = *(_QWORD *)&v88[8 * v67];
          if (!v66)
          {
            v67 = v65 + 4;
            if (v65 + 4 >= v86)
              goto LABEL_71;
            v66 = *(_QWORD *)&v88[8 * v67];
            if (!v66)
            {
              v67 = v65 + 5;
              if (v65 + 5 >= v86)
                goto LABEL_71;
              v66 = *(_QWORD *)&v88[8 * v67];
              if (!v66)
              {
                v67 = v65 + 6;
                if (v65 + 6 >= v86)
                  goto LABEL_71;
                v66 = *(_QWORD *)&v88[8 * v67];
                if (!v66)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_70:
    v90 = (v66 - 1) & v66;
    v48 = v67;
    v49 = __clz(__rbit64(v66)) + (v67 << 6);
LABEL_47:
    v50 = 96 * v49;
    v51 = *(_QWORD *)(v30 + 48) + 96 * v49;
    v52 = *(_QWORD *)(v51 + 8);
    v53 = *(_QWORD *)(v51 + 16);
    v54 = *(_QWORD *)(v51 + 24);
    v55 = *(_BYTE *)(v51 + 32);
    v56 = *(_BYTE *)(v51 + 56);
    v57 = *(_QWORD *)(v51 + 64);
    v58 = *(_QWORD *)(v51 + 72);
    v59 = *(_BYTE *)(v51 + 80);
    v60 = 8 * v49;
    v61 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + v60);
    v62 = *(_QWORD *)(v51 + 88);
    v63 = *(_QWORD *)(v37 + 48) + v50;
    v64 = *(_OWORD *)(v51 + 40);
    *(_QWORD *)v63 = *(_QWORD *)v51;
    *(_QWORD *)(v63 + 8) = v52;
    *(_QWORD *)(v63 + 16) = v53;
    *(_QWORD *)(v63 + 24) = v54;
    *(_BYTE *)(v63 + 32) = v55;
    *(_OWORD *)(v63 + 40) = v64;
    *(_BYTE *)(v63 + 56) = v56;
    *(_QWORD *)(v63 + 64) = v57;
    *(_QWORD *)(v63 + 72) = v58;
    *(_BYTE *)(v63 + 80) = v59;
    *(_QWORD *)(v63 + 88) = v62;
    *(_QWORD *)(*(_QWORD *)(v37 + 56) + v60) = v61;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = v48;
    v47 = v90;
  }
  v68 = v65 + 7;
  if (v68 >= v86)
    goto LABEL_71;
  v69 = v11;
  v70 = v37;
  v66 = *(_QWORD *)&v88[8 * v68];
  if (v66)
  {
    v67 = v68;
    goto LABEL_70;
  }
  while (1)
  {
    v67 = v68 + 1;
    if (__OFADD__(v68, 1))
      break;
    v37 = v70;
    v25 = v81;
    v1 = v78;
    v11 = v69;
    if (v67 >= v86)
      goto LABEL_71;
    v66 = *(_QWORD *)&v88[8 * v67];
    ++v68;
    if (v66)
      goto LABEL_70;
  }
LABEL_80:
  __break(1u);
LABEL_81:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = 0;
  v2 = result + 16;
  v3 = *(_QWORD *)(result + 16);
  v4 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v1 <= v3)
    v5 = v3;
  else
    v5 = v1;
  v6 = (uint64_t *)(v2 + 32 * v1);
  v7 = v1 - 1;
  v8 = -(uint64_t)v5;
  while (1)
  {
    if (v7 - v3 == -1)
      return v4;
    if (v8 + v7 == -1)
      break;
    v9 = v7 + 2;
    v6 += 4;
    ++v7;
    if ((v9 & 1) != 0)
    {
      v15 = *(v6 - 1);
      v16 = *(v6 - 2);
      v10 = v6[1];
      v14 = *v6;
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v12 = *(_QWORD *)(v4 + 16);
      v11 = *(_QWORD *)(v4 + 24);
      if (v12 >= v11 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      v1 = v7 + 1;
      *(_QWORD *)(v4 + 16) = v12 + 1;
      v13 = (_QWORD *)(v4 + 40 * v12);
      v13[4] = v7;
      v13[5] = v16;
      v13[6] = v15;
      v13[7] = v14;
      v13[8] = v10;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t destroy for ICUDateFormatter.PatternCacheKey()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  v5 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ICUDateFormatter.PatternCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_DWORD *)(a1 + 58) = *(_DWORD *)(a2 + 58);
  *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 62);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.AttributePosition()
{
  return &type metadata for ICUDateFormatter.AttributePosition;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.DateFormatInfo.UpdateSchedule()
{
  return &type metadata for ICUDateFormatter.DateFormatInfo.UpdateSchedule;
}

uint64_t initializeWithCopy for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for ICUDateFormatter.DateFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUDateFormatter.PatternCacheKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUDateFormatter.PatternCacheKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

Swift::Void __swiftcall logFileIOErrno(_:at:)(Swift::Int32 _, Swift::String at)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  object = at._object;
  countAndFlagsBits = at._countAndFlagsBits;
  v19 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!strerror(_))
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = String.init(cString:)();
  v10 = v9;
  if (!(id)_NSOSLog())
  {
LABEL_8:
    __break(1u);
    return;
  }
  Logger.init(_:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    HIDWORD(v16) = _;
    v15 = v14;
    v21 = v14;
    *(_DWORD *)v13 = 136315650;
    v17 = v8;
    swift_bridgeObjectRetain();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v21);
    v18 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 1024;
    LODWORD(v20) = HIDWORD(v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 18) = 2080;
    swift_bridgeObjectRetain();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1817D9000, v11, v12, "Encountered %s failure %d %s", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x186DA9E78](v15, -1, -1);
    MEMORY[0x186DA9E78](v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v19);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  }
}

void Notification.name.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*Notification.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Notification.object.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Any?(a1, v1 + 8);
}

uint64_t (*Notification.object.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*Notification.userInfo.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Notification.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  Swift::UInt v10;
  int64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  Swift::Int v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[6];
  uint64_t v33;

  v3 = *(void **)v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v1);
  v4 = v3;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v1 + 40);
  if (!v5)
  {
    v10 = 0;
    goto LABEL_30;
  }
  v21 = v5 + 64;
  v6 = 1 << *(_BYTE *)(v5 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v5 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  if (!v8)
    goto LABEL_9;
LABEL_7:
  v16 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v17 = v16 | (v11 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v17, (uint64_t)&v24);
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v17, (uint64_t)&v26 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v24, (uint64_t)&v29, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((_QWORD *)&v30 + 1))
      {
        swift_release();
LABEL_30:
        Hasher._combine(_:)(v10);
        return;
      }
      v22[0] = v29;
      v22[1] = v30;
      v23 = v31;
      v12 = *((_QWORD *)a1 + 8);
      v13 = a1[1];
      v24 = *a1;
      v25 = v13;
      v14 = a1[3];
      v26 = a1[2];
      v27 = v14;
      v28 = v12;
      AnyHashable.hash(into:)();
      v32[4] = v26;
      v32[5] = v27;
      v33 = v28;
      v32[2] = v24;
      v32[3] = v25;
      v15 = Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v22);
      v10 ^= v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      if (v8)
        goto LABEL_7;
LABEL_9:
      v18 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v18 < v9)
      {
        v19 = *(_QWORD *)(v21 + 8 * v18);
        if (v19)
          goto LABEL_12;
        v20 = v11 + 2;
        ++v11;
        if (v18 + 1 < v9)
        {
          v19 = *(_QWORD *)(v21 + 8 * v20);
          if (v19)
            goto LABEL_15;
          v11 = v18 + 1;
          if (v18 + 2 < v9)
          {
            v19 = *(_QWORD *)(v21 + 8 * (v18 + 2));
            if (v19)
            {
              v18 += 2;
              goto LABEL_12;
            }
            v20 = v18 + 3;
            v11 = v18 + 2;
            if (v18 + 3 < v9)
              break;
          }
        }
      }
LABEL_26:
      v8 = 0;
      v28 = 0;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
    }
    v19 = *(_QWORD *)(v21 + 8 * v20);
    if (v19)
    {
LABEL_15:
      v18 = v20;
LABEL_12:
      v8 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v18 << 6);
      v11 = v18;
      continue;
    }
    break;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v9)
    {
      v11 = v9 - 1;
      goto LABEL_26;
    }
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_12;
  }
LABEL_32:
  __break(1u);
}

uint64_t Notification.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  _QWORD v7[4];
  uint64_t v8;
  unint64_t v9;

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v8 = 0x203D20656D616ELL;
  v9 = 0xE700000000000000;
  v1._countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x7463656A626F202CLL;
  v2._object = (void *)0xEB00000000203D20;
  String.append(_:)(v2);
  outlined init with copy of Any?(v0 + 8, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6E4972657375202CLL;
  v4._object = (void *)0xED0000203D206F66;
  String.append(_:)(v4);
  v7[0] = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
  v5._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Int Notification.hashValue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  Swift::UInt v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[13];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  Hasher.init(_seed:)();
  v1 = *(void **)v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  v2 = v1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 40);
  if (!v3)
  {
    v13 = 0;
    goto LABEL_34;
  }
  v21 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v26 = v37[4];
  v24 = v37[6];
  v25 = v37[5];
  v7 = v37[8];
  v23 = v37[7];
  v8 = v37[9];
  v9 = v37[10];
  v10 = v37[11];
  v11 = v37[12];
  v22 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v14 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  v15 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v16 = v15 | (v14 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(v3 + 48) + 40 * v16, (uint64_t)&v29);
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v16, (uint64_t)&v31 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v29, (uint64_t)&v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((_QWORD *)&v35 + 1))
      {
        swift_release();
LABEL_34:
        Hasher._combine(_:)(v13);
        return Hasher._finalize()();
      }
      v27[0] = v34;
      v27[1] = v35;
      v28 = v36;
      *(_QWORD *)&v29 = v26;
      *((_QWORD *)&v29 + 1) = v25;
      *(_QWORD *)&v30 = v24;
      *((_QWORD *)&v30 + 1) = v23;
      *(_QWORD *)&v31 = v7;
      *((_QWORD *)&v31 + 1) = v8;
      *(_QWORD *)&v32 = v9;
      *((_QWORD *)&v32 + 1) = v10;
      v33 = v11;
      AnyHashable.hash(into:)();
      v40 = v31;
      v41 = v32;
      v42 = v33;
      v38 = v29;
      v39 = v30;
      v13 ^= Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v27);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      if (v6)
        goto LABEL_7;
LABEL_9:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v17 < v22)
      {
        v18 = *(_QWORD *)(v21 + 8 * v17);
        if (v18)
          goto LABEL_12;
        v19 = v14 + 2;
        ++v14;
        if (v17 + 1 < v22)
        {
          v18 = *(_QWORD *)(v21 + 8 * v19);
          if (v18)
            goto LABEL_15;
          v20 = v17 + 2;
          v14 = v17 + 1;
          if (v17 + 2 < v22)
          {
            v18 = *(_QWORD *)(v21 + 8 * v20);
            if (v18)
              goto LABEL_18;
            v19 = v17 + 3;
            v14 = v17 + 2;
            if (v17 + 3 < v22)
            {
              v18 = *(_QWORD *)(v21 + 8 * v19);
              if (v18)
                goto LABEL_15;
              v20 = v17 + 4;
              v14 = v17 + 3;
              if (v17 + 4 < v22)
              {
                v18 = *(_QWORD *)(v21 + 8 * v20);
                if (v18)
                {
LABEL_18:
                  v17 = v20;
                  goto LABEL_12;
                }
                v19 = v17 + 5;
                v14 = v17 + 4;
                if (v17 + 5 < v22)
                  break;
              }
            }
          }
        }
      }
LABEL_30:
      v6 = 0;
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
    }
    v18 = *(_QWORD *)(v21 + 8 * v19);
    if (v18)
    {
LABEL_15:
      v17 = v19;
LABEL_12:
      v6 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v17 << 6);
      v14 = v17;
      continue;
    }
    break;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v22)
    {
      v14 = v22 - 1;
      goto LABEL_30;
    }
    v18 = *(_QWORD *)(v21 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Notification()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  Swift::UInt v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[13];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  Hasher.init(_seed:)();
  v1 = *(void **)v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  v2 = v1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 40);
  if (!v3)
  {
    v13 = 0;
    goto LABEL_30;
  }
  v20 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v25 = v36[4];
  v23 = v36[6];
  v24 = v36[5];
  v7 = v36[8];
  v22 = v36[7];
  v8 = v36[9];
  v9 = v36[10];
  v10 = v36[11];
  v11 = v36[12];
  v21 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v14 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  v15 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v16 = v15 | (v14 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(v3 + 48) + 40 * v16, (uint64_t)&v28);
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v16, (uint64_t)&v30 + 8);
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v28, (uint64_t)&v33, &demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
      if (!*((_QWORD *)&v34 + 1))
      {
        swift_release();
LABEL_30:
        Hasher._combine(_:)(v13);
        return Hasher._finalize()();
      }
      v26[0] = v33;
      v26[1] = v34;
      v27 = v35;
      *(_QWORD *)&v28 = v25;
      *((_QWORD *)&v28 + 1) = v24;
      *(_QWORD *)&v29 = v23;
      *((_QWORD *)&v29 + 1) = v22;
      *(_QWORD *)&v30 = v7;
      *((_QWORD *)&v30 + 1) = v8;
      *(_QWORD *)&v31 = v9;
      *((_QWORD *)&v31 + 1) = v10;
      v32 = v11;
      AnyHashable.hash(into:)();
      v39 = v30;
      v40 = v31;
      v41 = v32;
      v37 = v28;
      v38 = v29;
      v13 ^= Hasher.finalize()();
      outlined destroy of AnyHashable((uint64_t)v26);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      if (v6)
        goto LABEL_7;
LABEL_9:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v17 < v21)
      {
        v18 = *(_QWORD *)(v20 + 8 * v17);
        if (v18)
          goto LABEL_12;
        v19 = v14 + 2;
        ++v14;
        if (v17 + 1 < v21)
        {
          v18 = *(_QWORD *)(v20 + 8 * v19);
          if (v18)
            goto LABEL_15;
          v14 = v17 + 1;
          if (v17 + 2 < v21)
          {
            v18 = *(_QWORD *)(v20 + 8 * (v17 + 2));
            if (v18)
            {
              v17 += 2;
              goto LABEL_12;
            }
            v19 = v17 + 3;
            v14 = v17 + 2;
            if (v17 + 3 < v21)
              break;
          }
        }
      }
LABEL_26:
      v6 = 0;
      v32 = 0;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
    }
    v18 = *(_QWORD *)(v20 + 8 * v19);
    if (v18)
    {
LABEL_15:
      v17 = v19;
LABEL_12:
      v6 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v17 << 6);
      v14 = v17;
      continue;
    }
    break;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v21)
    {
      v14 = v21 - 1;
      goto LABEL_26;
    }
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_12;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t Notification.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v1);
  v38 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v37 = v9;
  *((_QWORD *)&v37 + 1) = v10;
  v34 = xmmword_182060FC0;
  outlined init with take of Any(&v37, &v35);
  v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  v14 = &v11[6 * v13];
  v15 = v34;
  v16 = v36;
  v14[3] = v35;
  v14[4] = v16;
  v14[2] = v15;
  outlined init with copy of Any?(v1 + 8, (uint64_t)&v34);
  if (!*((_QWORD *)&v35 + 1))
  {
    outlined destroy of Any?((uint64_t)&v34, &demangling cache variable for type metadata for Any?);
    v22 = *(_QWORD *)(v1 + 40);
    if (!v22)
      goto LABEL_12;
    goto LABEL_9;
  }
  outlined init with take of Any(&v34, &v37);
  v34 = xmmword_1820FEAD0;
  outlined init with copy of Any((uint64_t)&v37, (uint64_t)&v35);
  v18 = v11[2];
  v17 = v11[3];
  if (v18 >= v17 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v11);
  v11[2] = v18 + 1;
  v19 = &v11[6 * v18];
  v20 = v34;
  v21 = v36;
  v19[3] = v35;
  v19[4] = v21;
  v19[2] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  v22 = *(_QWORD *)(v1 + 40);
  if (v22)
  {
LABEL_9:
    v33 = v5;
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    *(_QWORD *)&v37 = v22;
    v34 = xmmword_1820FEAE0;
    outlined init with take of Any(&v37, &v35);
    v24 = v11[2];
    v23 = v11[3];
    swift_bridgeObjectRetain();
    if (v24 >= v23 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v11);
    v11[2] = v24 + 1;
    v25 = &v11[6 * v24];
    v26 = v34;
    v27 = v36;
    v25[3] = v35;
    v25[4] = v27;
    v25[2] = v26;
    v5 = v33;
  }
LABEL_12:
  outlined init with copy of Notification(v1, &v34);
  *(_QWORD *)&v37 = v11;
  v28 = *MEMORY[0x1E0DEDFB0];
  v29 = type metadata accessor for Mirror.DisplayStyle();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v8, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v8, 0, 1, v29);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static Notification._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSNotification);
}

uint64_t static Notification._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result;

  result = specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Notification(void *a1, uint64_t a2)
{
  uint64_t result;

  result = specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NSNotification._toCustomAnyHashable()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  _BYTE v7[48];
  _OWORD v8[5];

  v1 = v0;
  v2 = objc_msgSend(v1, sel_name);
  if (objc_msgSend(v1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, 32);
  }
  v3 = objc_msgSend(v1, sel_userInfo);
  if (v3)
  {
    v4 = v3;
    v5 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3);

  }
  else
  {
    v5 = 0;
  }
  memset(&v7[8], 0, 40);
  *(_QWORD *)v7 = v2;
  outlined assign with take of Any?((uint64_t)v8, (uint64_t)&v7[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[40] = v5;
  v8[2] = *(_OWORD *)v7;
  v8[3] = *(_OWORD *)&v7[16];
  v8[4] = *(_OWORD *)&v7[32];

  lazy protocol witness table accessor for type Notification and conformance Notification();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotification()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSNotification._toCustomAnyHashable()();

}

uint64_t specialized static Notification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  id v37;
  id v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)a1);
  v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)a2) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = 0;
    if ((v9 & 1) == 0)
      return v10 & 1;
  }
  outlined init with copy of Any?(a1 + 8, (uint64_t)&v42);
  if (v43)
  {
    outlined init with take of Any(&v42, &v44);
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v40);
    if (!v41)
    {
      outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      v10 = 0;
      return v10 & 1;
    }
    outlined init with take of Any(&v40, &v42);
    __swift_project_boxed_opaque_existential_1(&v44, v45);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    __swift_project_boxed_opaque_existential_1(&v42, v43);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    if (v11 != v12)
      goto LABEL_11;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v44);
    v13 = v45;
    outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
    if (v13)
    {
LABEL_11:
      v10 = 0;
      return v10 & 1;
    }
  }
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a2 + 40);
  v10 = (v14 | v15) == 0;
  if (v14 && v15)
  {
    v16 = *(void **)a1;
    outlined init with copy of Any?(a1 + 8, (uint64_t)&v44);
    v17 = v45;
    if (v45)
    {
      v18 = __swift_project_boxed_opaque_existential_1(&v44, v45);
      v19 = *(_QWORD *)(v17 - 8);
      v20 = MEMORY[0x1E0C80A78](v18);
      v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v19 + 16))(v22, v20);
      swift_bridgeObjectRetain();
      v23 = v16;
      v24 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    }
    else
    {
      swift_bridgeObjectRetain();
      v25 = v16;
      v24 = 0;
    }
    v26 = objc_msgSend(objc_allocWithZone((Class)NSNotification), sel_initWithName_object_userInfo_, v16, v24, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v27 = *(void **)a2;
    outlined init with copy of Any?(a2 + 8, (uint64_t)&v44);
    v28 = *(void **)(a2 + 40);
    v29 = v45;
    if (v45)
    {
      v30 = __swift_project_boxed_opaque_existential_1(&v44, v45);
      v31 = *(_QWORD *)(v29 - 8);
      v32 = MEMORY[0x1E0C80A78](v30);
      v34 = (char *)&v40 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v31 + 16))(v34, v32);
      swift_bridgeObjectRetain();
      v35 = v27;
      v36 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      if (!v28)
      {
LABEL_22:
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v37 = objc_msgSend(objc_allocWithZone((Class)NSNotification), sel_initWithName_object_userInfo_, v27, v36, v28);
        swift_unknownObjectRelease();

        v10 = static NSObject.== infix(_:_:)();
        return v10 & 1;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v39 = v27;
      v36 = 0;
      if (!v28)
        goto LABEL_22;
    }
    v28 = (void *)_NativeDictionary.bridged()();
    goto LABEL_22;
  }
  return v10 & 1;
}

uint64_t specialized static Notification._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  _BYTE v9[48];
  _OWORD v10[2];
  _OWORD v11[3];

  outlined destroy of Any?(a2, &demangling cache variable for type metadata for Notification?);
  v4 = objc_msgSend(a1, sel_name);
  if (objc_msgSend(a1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  v5 = objc_msgSend(a1, sel_userInfo);
  if (v5)
  {
    v6 = v5;
    v7 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5);

  }
  else
  {
    v7 = 0;
  }
  memset(&v9[8], 0, 40);
  *(_QWORD *)v9 = v4;
  outlined assign with take of Any?((uint64_t)v10, (uint64_t)&v9[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v9[40] = v7;
  v11[0] = *(_OWORD *)v9;
  v11[1] = *(_OWORD *)&v9[16];
  v11[2] = *(_OWORD *)&v9[32];
  outlined init with take of LocalePreferences?((uint64_t)v11, a2, &demangling cache variable for type metadata for Notification?);
  return 1;
}

unint64_t lazy protocol witness table accessor for type Notification and conformance Notification()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Notification(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[2] = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[3] = lazy protocol witness table accessor for type Notification and conformance Notification();
  result = lazy protocol witness table accessor for type Notification and conformance Notification();
  a1[4] = result;
  return result;
}

void Data._Representation.withInteriorPointerReference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_181C729F4()
{
  void (*v0)(void);
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v4, BYTE6(v2), 0);
  v0();

}

void __DataStorage.withInteriorPointerReference<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  void *v10;

  if (a1 == a2)
  {
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_init);
LABEL_7:
    v10 = v5;
    a3();

    return;
  }
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v3 + 40);
    v8 = __OFSUB__(a1, v7);
    v9 = a1 - v7;
    if (v8)
    {
      __break(1u);
    }
    else if (!__OFSUB__(a2, a1))
    {
      v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytesNoCopy_length_freeWhenDone_, v6 + v9, a2 - a1, 0);
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
}

void Data.xpcCodableObject.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_181C72CD4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t bytes, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;
  __int16 v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v25 = a1;
  v26 = a2;
  v27 = BYTE2(a2);
  v28 = BYTE3(a2);
  v29 = BYTE4(a2);
  v30 = BYTE5(a2);
  xpc_data_create(&v25, BYTE6(a2));
  return XPCCodableObject.init(copying:)();
}

_BYTE *protocol witness for XPCCodableObjectRepresentable.init(from:) in conformance Data@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *result;
  uint64_t v4;

  result = specialized Data.init(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void protocol witness for XPCCodableObjectRepresentable.xpcCodableObject.getter in conformance Data()
{
  uint64_t *v0;

  Data.xpcCodableObject.getter(*v0, v0[1]);
}

_BYTE *specialized Data.init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int64_t length;
  uint64_t v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;

  v2 = XPCCodableObject.type.getter();
  if (v2 != XPC_TYPE_DATA.getter())
  {
    v3 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    return 0;
  }
  v5 = (void *)XPCCodableObject.copyUnderlyingXPCObject()();
  length = xpc_data_get_length(v5);
  if (length < 1)
  {
    v10 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    swift_unknownObjectRelease();
    return 0;
  }
  v7 = length;
  result = xpc_data_get_bytes_ptr(v5);
  if (result)
  {
    v4 = specialized Data.init(bytes:count:)(result, v7);
    swift_unknownObjectRelease();
    v9 = type metadata accessor for XPCCodableObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    return (_BYTE *)v4;
  }
  __break(1u);
  return result;
}

Swift::Int specialized static Data.validXPCObjectTypes.getter()
{
  Swift::UInt v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v0 = XPC_TYPE_DATA.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
  v1 = static _SetStorage.allocate(capacity:)();
  v2 = v1 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  result = Hasher._finalize()();
  v4 = -1 << *(_BYTE *)(v1 + 32);
  v5 = result & ~v4;
  v6 = v5 >> 6;
  v7 = *(_QWORD *)(v1 + 56 + 8 * (v5 >> 6));
  v8 = 1 << v5;
  v9 = *(_QWORD *)(v1 + 48);
  if (((1 << v5) & v7) != 0)
  {
    if (*(_QWORD *)(v9 + 8 * v5) == v0)
      return v1;
    v10 = ~v4;
    v5 = (v5 + 1) & v10;
    v6 = v5 >> 6;
    v7 = *(_QWORD *)(v2 + 8 * (v5 >> 6));
    v8 = 1 << v5;
    if ((v7 & (1 << v5)) == 0)
      goto LABEL_10;
    if (*(_QWORD *)(v9 + 8 * v5) == v0)
      return v1;
    v5 = (v5 + 1) & v10;
    v6 = v5 >> 6;
    v7 = *(_QWORD *)(v2 + 8 * (v5 >> 6));
    v8 = 1 << v5;
    if ((v7 & (1 << v5)) == 0)
      goto LABEL_10;
    if (*(_QWORD *)(v9 + 8 * v5) == v0)
      return v1;
    v5 = (v5 + 1) & v10;
    v6 = v5 >> 6;
    v7 = *(_QWORD *)(v2 + 8 * (v5 >> 6));
    v8 = 1 << v5;
    if ((v7 & (1 << v5)) != 0)
    {
      while (*(_QWORD *)(v9 + 8 * v5) != v0)
      {
        v5 = (v5 + 1) & v10;
        v6 = v5 >> 6;
        v7 = *(_QWORD *)(v2 + 8 * (v5 >> 6));
        v8 = 1 << v5;
        if ((v7 & (1 << v5)) == 0)
          goto LABEL_10;
      }
      return v1;
    }
  }
LABEL_10:
  *(_QWORD *)(v2 + 8 * v6) = v8 | v7;
  *(_QWORD *)(v9 + 8 * v5) = v0;
  v11 = *(_QWORD *)(v1 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (!v12)
  {
    *(_QWORD *)(v1 + 16) = v13;
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t LocaleCache.localeWithPreferences(identifier:prefs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t result;
  uint64_t v10;
  _OWORD v11[9];
  _BYTE v12[144];
  _BYTE v13[144];

  outlined init with take of LocalePreferences?(a3, (uint64_t)v12);
  outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v13);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v13) == 1)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v7 = static LocaleCache.cache + 16;
    v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v8);
    closure #1 in LocaleCache.fixed(_:)(v7, a1, a2, v11);
    os_unfair_lock_unlock(v8);
    swift_release_n();
    v10 = *((_QWORD *)&v11[0] + 1);
    result = *(_QWORD *)&v11[0];
  }
  else
  {
    type metadata accessor for _LocaleICU();
    v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
    outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v11);
    swift_allocObject();
    outlined retain of LocalePreferences?((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    result = _LocaleICU.init(identifier:prefs:)(a1, a2, (uint64_t)v11);
  }
  *a4 = result;
  a4[1] = v10;
  return result;
}

_QWORD *LocaleCache.preferredLanguages(forCurrentUser:)(char a1)
{
  const __CFString *v2;
  CFPropertyListRef v3;
  CFPropertyListRef v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const __CFAllocator *v8;
  uint64_t v9;
  const __CFString *v10;
  __CFString *CanonicalLanguageIdentifierFromString;
  id v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v2 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  if ((a1 & 1) != 0)
    v3 = CFPreferencesCopyValue(v2, (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  else
    v3 = CFPreferencesCopyAppValue(v2, (CFStringRef)*MEMORY[0x1E0C9B248]);
  v4 = v3;
  swift_unknownObjectRelease();
  if (v4
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        swift_dynamicCast()))
  {
    v5 = v19;
    v6 = *(_QWORD *)(v19 + 16);
    if (!v6)
    {
LABEL_7:
      v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      goto LABEL_19;
    }
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
    v6 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v6)
      goto LABEL_7;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  swift_bridgeObjectRetain();
  v9 = v5 + 40;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v10 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v8, v10);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      v14 = v13;
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      v12 = 0;
      v14 = 0xE000000000000000;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v16 = v7[2];
    v15 = v7[3];
    if (v16 >= v15 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
    v9 += 16;
    v7[2] = v16 + 1;
    v17 = &v7[2 * v16];
    v17[4] = v12;
    v17[5] = v14;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int LocaleCache.State.IdentifierAndPrefs.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::UInt v29;
  Swift::UInt8 v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  _BYTE v34[144];
  _BYTE v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  _BYTE v53[72];
  _BYTE v54[144];
  _BYTE v55[144];

  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v54);
  Hasher.init(_seed:)();
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v55);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v35);
  Hasher._combine(_:)(1u);
  if (v35[0] == 2)
  {
    v1 = 0;
  }
  else
  {
    v1 = v35[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    v7 = v35;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v2 + 16));
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v34);
    v7 = v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    if (!v37)
      goto LABEL_11;
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v5 = v39;
    if (!v39)
      goto LABEL_13;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    v6 = v40;
    if (!v40)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = v39;
  if (v39)
    goto LABEL_20;
LABEL_13:
  Hasher._combine(_:)(0);
  v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  v9 = v41;
  v8 = v42;
  v11 = v43;
  v10 = v44;
  v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v13 = v8;
    v14 = v11;
    v15 = v10;
    v16 = v12;
    v17 = v9;
    _CFObject.hash(into:)();
    if (v8)
      goto LABEL_24;
  }
  else
  {
    Hasher._combine(_:)(0);
    v22 = v12;
    v23 = v8;
    v24 = v11;
    v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v18 = v8;
      _CFObject.hash(into:)();

      if (v11)
        goto LABEL_25;
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v19 = v11;
    _CFObject.hash(into:)();

    if (v10)
      goto LABEL_26;
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v10)
    goto LABEL_31;
LABEL_26:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v20 = v10;
  _CFObject.hash(into:)();

  if (v12)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v12;
    _CFObject.hash(into:)();

    goto LABEL_33;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  v21 = 0;
LABEL_33:

  v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    v27 = v47;
    if (v47)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  v27 = v47;
  if (!v47)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v51 == 2)
  {
    v30 = 0;
  }
  else
  {
    v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    v31 = 0;
  }
  else
  {
    v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    v31 = v32;
  }
  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v3;
  uint64_t v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  Swift::UInt8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _BYTE v52[144];
  _BYTE v53[144];

  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v52);
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)v53);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v53) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)&v34);
  Hasher._combine(_:)(1u);
  if (v34 == 2)
  {
    v3 = 0;
  }
  else
  {
    v3 = v34 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v3);
  v4 = v35;
  if (!v35)
  {
    Hasher._combine(_:)(0);
LABEL_16:
    outlined retain of LocalePreferences(&v34);
    if (!v36)
      goto LABEL_11;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  v5 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (!v5)
    goto LABEL_16;
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v6 = v4 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 += 16;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v37)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v7 = v38;
    if (!v38)
      goto LABEL_13;
LABEL_19:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
    v8 = v39;
    if (!v39)
      goto LABEL_14;
    goto LABEL_20;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v7 = v38;
  if (v38)
    goto LABEL_19;
LABEL_13:
  Hasher._combine(_:)(0);
  v8 = v39;
  if (!v39)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
LABEL_21:
  v10 = v40;
  v9 = v41;
  v12 = v42;
  v11 = v43;
  v13 = v44;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v14 = v9;
    v15 = v12;
    v16 = v11;
    v17 = v13;
    v18 = v10;
    _CFObject.hash(into:)();
    if (v9)
      goto LABEL_23;
  }
  else
  {
    Hasher._combine(_:)(0);
    v23 = v13;
    v24 = v9;
    v25 = v12;
    v26 = v11;
    if (v9)
    {
LABEL_23:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v19 = v9;
      _CFObject.hash(into:)();

      if (v12)
        goto LABEL_24;
      goto LABEL_29;
    }
  }
  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v20 = v12;
    _CFObject.hash(into:)();

    if (v11)
      goto LABEL_25;
LABEL_30:
    Hasher._combine(_:)(0);
    if (v13)
      goto LABEL_26;
    goto LABEL_31;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v11)
    goto LABEL_30;
LABEL_25:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  v22 = 0;
LABEL_32:

  v27 = v45;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v27);
    swift_bridgeObjectRelease();
    v28 = v46;
    if (v46)
      goto LABEL_34;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v47)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  v28 = v46;
  if (!v46)
    goto LABEL_37;
LABEL_34:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v28);
  swift_bridgeObjectRelease();
  if (!v47)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_39:
  if (v48 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = v48 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v30 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  if (v50 == 2)
  {
    v31 = 0;
  }
  else
  {
    v31 = v50 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  if (v51 == 2)
  {
    v32 = 0;
  }
  else
  {
    v33 = v51 & 1;
    Hasher._combine(_:)(1u);
    v32 = v33;
  }
  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocaleCache.State.IdentifierAndPrefs()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt v27;
  Swift::UInt v28;
  Swift::UInt8 v29;
  Swift::UInt8 v30;
  Swift::UInt8 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  _BYTE v51[72];
  _BYTE v52[144];
  _BYTE v53[144];

  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v52);
  Hasher.init(_seed:)();
  String.hash(into:)();
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)v53);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v53) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined init with take of LocalePreferences?((uint64_t)v52, (uint64_t)&v33);
  Hasher._combine(_:)(1u);
  if (v33 == 2)
  {
    v1 = 0;
  }
  else
  {
    v1 = v33 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  v2 = v34;
  if (!v34)
  {
    Hasher._combine(_:)(0);
LABEL_16:
    outlined retain of LocalePreferences(&v33);
    if (!v35)
      goto LABEL_11;
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  v3 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (!v3)
    goto LABEL_16;
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (!v35)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v36)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    v5 = v37;
    if (!v37)
      goto LABEL_13;
LABEL_19:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v51, v5);
    swift_bridgeObjectRelease();
    v6 = v38;
    if (!v38)
      goto LABEL_14;
    goto LABEL_20;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = v37;
  if (v37)
    goto LABEL_19;
LABEL_13:
  Hasher._combine(_:)(0);
  v6 = v38;
  if (!v38)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v51, v6);
  swift_bridgeObjectRelease();
LABEL_21:
  v8 = v39;
  v7 = v40;
  v10 = v41;
  v9 = v42;
  v11 = v43;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v12 = v7;
    v13 = v10;
    v14 = v9;
    v15 = v11;
    v16 = v8;
    _CFObject.hash(into:)();
    if (v7)
      goto LABEL_23;
  }
  else
  {
    Hasher._combine(_:)(0);
    v21 = v11;
    v22 = v7;
    v23 = v10;
    v24 = v9;
    if (v7)
    {
LABEL_23:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v17 = v7;
      _CFObject.hash(into:)();

      if (v10)
        goto LABEL_24;
      goto LABEL_29;
    }
  }
  Hasher._combine(_:)(0);
  if (v10)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v18 = v10;
    _CFObject.hash(into:)();

    if (v9)
      goto LABEL_25;
LABEL_30:
    Hasher._combine(_:)(0);
    if (v11)
      goto LABEL_26;
    goto LABEL_31;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v9)
    goto LABEL_30;
LABEL_25:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v19 = v9;
  _CFObject.hash(into:)();

  if (v11)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v20 = v11;
    _CFObject.hash(into:)();

    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  v20 = 0;
LABEL_32:

  v25 = v44;
  if (v25)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v51, v25);
    swift_bridgeObjectRelease();
    v26 = v45;
    if (v45)
      goto LABEL_34;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v46)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  v26 = v45;
  if (!v45)
    goto LABEL_37;
LABEL_34:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v51, v26);
  swift_bridgeObjectRelease();
  if (!v46)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_39:
  if (v47 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v27 = v47 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
  if (v48 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = v48 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  if (v49 == 2)
  {
    v29 = 0;
  }
  else
  {
    v29 = v49 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v29);
  if (v50 == 2)
  {
    v30 = 0;
  }
  else
  {
    v31 = v50 & 1;
    Hasher._combine(_:)(1u);
    v30 = v31;
  }
  Hasher._combine(_:)(v30);
  outlined retain of LocalePreferences?((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

uint64_t closure #1 in LocaleCache.reset()(uint64_t result)
{
  *(_BYTE *)(result + 104) = 1;
  return result;
}

__n128 LocaleCache.preferences()(_OWORD *a1)
{
  const __CFDictionary *v2;
  __n128 result;
  _BYTE v4[140];

  v2 = (const __CFDictionary *)__CFXPreferencesCopyCurrentApplicationStateWithDeadlockAvoidance();
  v4[0] = 2;
  memset(&v4[8], 0, 128);
  *(_DWORD *)&v4[136] = 33686018;
  LocalePreferences.apply(_:)(v2);

  a1[6] = *(_OWORD *)&v4[96];
  a1[7] = *(_OWORD *)&v4[112];
  *(_OWORD *)((char *)a1 + 124) = *(_OWORD *)&v4[124];
  a1[2] = *(_OWORD *)&v4[32];
  a1[3] = *(_OWORD *)&v4[48];
  a1[4] = *(_OWORD *)&v4[64];
  a1[5] = *(_OWORD *)&v4[80];
  result = *(__n128 *)&v4[16];
  *a1 = *(_OWORD *)v4;
  a1[1] = *(_OWORD *)&v4[16];
  return result;
}

uint64_t closure #1 in LocaleCache.fixedComponents(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  char v3;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  void *__src;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  __int128 v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t __dst[45];
  uint64_t v54;

  v7 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v7 + 16))
  {
    outlined retain of Locale.Components(a2);
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      v52 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
      swift_unknownObjectRetain();
      result = (uint64_t)outlined release of Locale.Components(a2);
      v11 = v52;
LABEL_52:
      *a3 = v11;
      return result;
    }
    outlined release of Locale.Components(a2);
  }
  v51 = a3;
  type metadata accessor for _LocaleICU();
  v12 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  memcpy(__dst, a2, 0x160uLL);
  swift_allocObject();
  outlined retain of Locale.Components(a2);
  v13 = _LocaleICU.init(components:)(__dst);
  outlined retain of Locale.Components(a2);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *(_QWORD *)(a1 + 40);
  v15 = v54;
  *(_QWORD *)(a1 + 40) = 0x8000000000000000;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = v16;
  if (*(_QWORD *)(v15 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v21 = v15;
      if ((v16 & 1) == 0)
        goto LABEL_49;
LABEL_12:
      v24 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v17);
      swift_unknownObjectRelease();
      *v24 = v13;
      v24[1] = v12;
LABEL_51:
      *(_QWORD *)(a1 + 40) = v21;
      swift_bridgeObjectRelease();
      result = (uint64_t)outlined release of Locale.Components(a2);
      *(_QWORD *)&v11 = v13;
      *((_QWORD *)&v11 + 1) = v12;
      a3 = v51;
      goto LABEL_52;
    }
LABEL_14:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Components, _LocaleProtocol>);
    v25 = static _DictionaryStorage.copy(original:)();
    v21 = v25;
    if (*(_QWORD *)(v15 + 16))
    {
      v26 = (void *)(v25 + 64);
      v27 = (unint64_t)((1 << *(_BYTE *)(v21 + 32)) + 63) >> 6;
      if (v21 != v15 || (unint64_t)v26 >= v15 + 64 + 8 * v27)
        memmove(v26, (const void *)(v15 + 64), 8 * v27);
      v28 = 0;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(v15 + 16);
      v29 = 1 << *(_BYTE *)(v15 + 32);
      v30 = -1;
      if (v29 < 64)
        v30 = ~(-1 << v29);
      v31 = v30 & *(_QWORD *)(v15 + 64);
      v44 = v15 + 64;
      v45 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          v47 = (v31 - 1) & v31;
          v48 = v28;
          v32 = __clz(__rbit64(v31)) | (v28 << 6);
        }
        else
        {
          v36 = v28 + 1;
          if (__OFADD__(v28, 1))
            goto LABEL_54;
          if (v36 >= v45)
            break;
          v37 = *(_QWORD *)(v44 + 8 * v36);
          v38 = v28 + 1;
          if (!v37)
          {
            v38 = v36 + 1;
            if (v36 + 1 >= v45)
              break;
            v37 = *(_QWORD *)(v44 + 8 * v38);
            if (!v37)
            {
              v38 = v36 + 2;
              if (v36 + 2 >= v45)
                break;
              v37 = *(_QWORD *)(v44 + 8 * v38);
              if (!v37)
              {
                v38 = v36 + 3;
                if (v36 + 3 >= v45)
                  break;
                v37 = *(_QWORD *)(v44 + 8 * v38);
                if (!v37)
                {
                  if (v36 + 4 >= v45)
                    break;
                  v38 = v36 + 4;
                  v37 = *(_QWORD *)(v44 + 8 * (v36 + 4));
                  if (!v37)
                  {
                    if (v36 + 5 >= v45)
                      break;
                    v38 = v36 + 5;
                    v37 = *(_QWORD *)(v44 + 8 * (v36 + 5));
                    if (!v37)
                    {
                      if (v36 + 6 >= v45)
                        break;
                      v38 = v36 + 6;
                      v37 = *(_QWORD *)(v44 + 8 * (v36 + 6));
                      if (!v37)
                      {
                        if (v36 + 7 >= v45)
                          break;
                        v38 = v36 + 7;
                        v37 = *(_QWORD *)(v44 + 8 * (v36 + 7));
                        if (!v37)
                        {
                          v39 = v36 + 8;
                          if (v39 >= v45)
                            break;
                          v37 = *(_QWORD *)(v44 + 8 * v39);
                          if (!v37)
                          {
                            while (1)
                            {
                              v38 = v39 + 1;
                              if (__OFADD__(v39, 1))
                                goto LABEL_55;
                              if (v38 >= v45)
                                goto LABEL_48;
                              v37 = *(_QWORD *)(v44 + 8 * v38);
                              ++v39;
                              if (v37)
                                goto LABEL_47;
                            }
                          }
                          v38 = v39;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_47:
          v47 = (v37 - 1) & v37;
          v48 = v38;
          v32 = __clz(__rbit64(v37)) + (v38 << 6);
        }
        v49 = v32;
        v33 = 352 * v32;
        __src = (void *)(*(_QWORD *)(v15 + 48) + 352 * v32);
        memcpy(__dst, __src, 0x160uLL);
        v34 = (void *)(*(_QWORD *)(v21 + 48) + v33);
        v35 = 16 * v49;
        v50 = *(_OWORD *)(*(_QWORD *)(v15 + 56) + 16 * v49);
        memmove(v34, __src, 0x160uLL);
        *(_OWORD *)(*(_QWORD *)(v21 + 56) + v35) = v50;
        outlined retain of Locale.Components(__dst);
        swift_unknownObjectRetain();
        v31 = v47;
        v28 = v48;
      }
    }
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
      goto LABEL_49;
    goto LABEL_12;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
  v21 = v54;
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v3 & 1) != (v23 & 1))
    goto LABEL_56;
  v17 = v22;
  if ((v3 & 1) != 0)
    goto LABEL_12;
LABEL_49:
  *(_QWORD *)(v21 + 8 * (v17 >> 6) + 64) |= 1 << v17;
  memcpy((void *)(*(_QWORD *)(v21 + 48) + 352 * v17), a2, 0x160uLL);
  v40 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v17);
  *v40 = v13;
  v40[1] = v12;
  v41 = *(_QWORD *)(v21 + 16);
  v42 = __OFADD__(v41, 1);
  v43 = v41 + 1;
  if (!v42)
  {
    *(_QWORD *)(v21 + 16) = v43;
    outlined retain of Locale.Components(a2);
    goto LABEL_51;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BOOL specialized static LocaleCache.State.IdentifierAndPrefs.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  char v21;
  char v22;
  char v23;
  char v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  _BYTE v54[13];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[28];
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[28];
  _BYTE v90[144];
  uint64_t v91;
  _BYTE v92[144];
  _BYTE v93[144];
  _BYTE v94[152];

  v3 = *a1;
  v4 = a1[1];
  outlined init with take of LocalePreferences?((uint64_t)(a1 + 2), (uint64_t)v93);
  v5 = *a2;
  v6 = a2[1];
  outlined init with take of LocalePreferences?((uint64_t)(a2 + 2), (uint64_t)v94);
  v7 = v3 == v5 && v4 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
  {
    outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)v92);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v92) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v90);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v90) == 1)
        return 1;
      goto LABEL_11;
    }
    outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v82);
    outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v90);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v90) == 1)
    {
      v61 = v88;
      *(_OWORD *)v62 = *(_OWORD *)v89;
      *(_OWORD *)&v62[12] = *(_OWORD *)&v89[12];
      v57 = v84;
      v58 = v85;
      v59 = v86;
      v60 = v87;
      v55 = v82;
      v56 = v83;
      outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v63);
      outlined retain of LocalePreferences(&v63);
      outlined retain of LocalePreferences(&v63);
      outlined release of LocalePreferences(&v55);
LABEL_11:
      outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)v90);
      outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v91);
      outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v90);
      return 0;
    }
    outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)&v63);
    v10 = v82;
    v11 = *((_QWORD *)&v82 + 1);
    v12 = v83;
    v13 = v84;
    v14 = v85;
    v52 = (void *)*((_QWORD *)&v86 + 1);
    v53 = (void *)v86;
    v50 = (void *)*((_QWORD *)&v87 + 1);
    v51 = (void *)v87;
    v48 = *((_QWORD *)&v88 + 1);
    v49 = (void *)v88;
    v46 = *(_QWORD *)&v89[8];
    v47 = *(_QWORD *)v89;
    v15 = *(_QWORD *)&v89[16];
    v44 = v89[25];
    v45 = v89[24];
    v42 = v89[27];
    v43 = v89[26];
    if (v82 == 2)
    {
      if (v63 != 2)
      {
LABEL_22:
        outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)v54);
        outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v55);
        outlined retain of LocalePreferences(&v55);
        v16 = (__int128 *)v54;
LABEL_23:
        outlined retain of LocalePreferences(v16);
LABEL_52:
        LOBYTE(v17) = 0;
        goto LABEL_53;
      }
    }
    else if (v63 == 2 || ((((v82 & 1) == 0) ^ v63) & 1) == 0)
    {
      goto LABEL_22;
    }
    if (*((_QWORD *)&v82 + 1))
    {
      if (!v64 || (specialized static Array<A>.== infix(_:_:)(*((_QWORD **)&v82 + 1), v64) & 1) == 0)
        goto LABEL_50;
    }
    else if (v64)
    {
      goto LABEL_50;
    }
    if (*((_QWORD *)&v12 + 1))
    {
      if (!*((_QWORD *)&v65 + 1) || v12 != v65 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_50;
    }
    else if (*((_QWORD *)&v65 + 1))
    {
      goto LABEL_50;
    }
    if (*((_QWORD *)&v13 + 1))
    {
      if (!*((_QWORD *)&v66 + 1) || v13 != v66 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_50;
    }
    else if (*((_QWORD *)&v66 + 1))
    {
      goto LABEL_50;
    }
    if ((_QWORD)v14)
    {
      if (!v67 || (specialized static Dictionary<>.== infix(_:_:)(v14, v67) & 1) == 0)
        goto LABEL_50;
    }
    else if (v67)
    {
      goto LABEL_50;
    }
    if (*((_QWORD *)&v14 + 1))
    {
      if (v68 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v14 + 1), v68) & 1) != 0)
      {
LABEL_45:
        v17 = v69;
        if (v53)
        {
          if (!v69)
          {
            outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v55);
            outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences(&v55);
            goto LABEL_53;
          }
          v38 = v70;
          v27 = v72;
          v28 = v71;
          v26 = v73;
          type metadata accessor for CFDictionaryRef(0);
          outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v30 = (id)v17;
          v29 = v53;
          v18 = static _CFObject.== infix(_:_:)();

          if ((v18 & 1) == 0)
            goto LABEL_106;
        }
        else
        {
          if (v69)
          {
            outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)&v55);
            outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            v16 = &v55;
            goto LABEL_23;
          }
          v38 = v70;
          v27 = v72;
          v28 = v71;
          v26 = v73;
          outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        }
        if (v52)
        {
          LOBYTE(v17) = (_BYTE)v38;
          if (!v38)
            goto LABEL_89;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v39 = v38;
          v31 = v52;
          v21 = static _CFObject.== infix(_:_:)();

          if ((v21 & 1) == 0)
            goto LABEL_106;
        }
        else if (v38)
        {
          goto LABEL_106;
        }
        if (v51)
        {
          if (!v28)
            goto LABEL_106;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v35 = v28;
          v32 = v51;
          v22 = static _CFObject.== infix(_:_:)();

          if ((v22 & 1) == 0)
            goto LABEL_106;
        }
        else if (v28)
        {
          goto LABEL_106;
        }
        if (v50)
        {
          if (!v27)
            goto LABEL_106;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v36 = v27;
          v33 = v50;
          v23 = static _CFObject.== infix(_:_:)();

          if ((v23 & 1) == 0)
            goto LABEL_106;
        }
        else if (v27)
        {
          goto LABEL_106;
        }
        if (v49)
        {
          if (!v26)
            goto LABEL_106;
          type metadata accessor for CFDictionaryRef(0);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v37 = v26;
          v34 = v49;
          v24 = static _CFObject.== infix(_:_:)();

          if ((v24 & 1) == 0)
            goto LABEL_106;
        }
        else if (v26)
        {
          goto LABEL_106;
        }
        v17 = v74;
        if (v48)
        {
          if (!v74)
            goto LABEL_89;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v40 = specialized static Dictionary<>.== infix(_:_:)(v48, v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v40 & 1) == 0)
            goto LABEL_106;
        }
        else if (v74)
        {
          goto LABEL_106;
        }
        v17 = v75;
        if (!v47)
        {
          if (v75)
            goto LABEL_106;
LABEL_91:
          if (v15)
          {
            if (!v77 || (v46 != v76 || v15 != v77) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_106;
          }
          else if (v77)
          {
            goto LABEL_106;
          }
          if (v45 != 2)
          {
            if (v78 == 2 || ((v78 ^ v45) & 1) != 0)
              goto LABEL_106;
LABEL_103:
            v25 = v79;
            if (v44 == 2)
            {
              outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              if (v25 != 2)
                goto LABEL_52;
            }
            else
            {
              outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              if (v25 == 2 || ((v25 ^ v44) & 1) != 0)
                goto LABEL_52;
            }
            if (v43 == 2)
            {
              if (v80 != 2)
                goto LABEL_52;
            }
            else
            {
              LOBYTE(v17) = 0;
              if (v80 == 2 || ((((v43 & 1) == 0) ^ v80) & 1) == 0)
                goto LABEL_53;
            }
            if (v42 == 2)
            {
              if (v81 != 2)
                goto LABEL_52;
            }
            else if (v81 == 2 || ((((v42 & 1) == 0) ^ v81) & 1) == 0)
            {
              goto LABEL_52;
            }
            LOBYTE(v17) = 1;
LABEL_53:
            LOBYTE(v55) = v10;
            *((_QWORD *)&v55 + 1) = v11;
            v56 = v12;
            v57 = v13;
            v58 = v14;
            *(_QWORD *)&v59 = v53;
            *((_QWORD *)&v59 + 1) = v52;
            *(_QWORD *)&v60 = v51;
            *((_QWORD *)&v60 + 1) = v50;
            *(_QWORD *)&v61 = v49;
            *((_QWORD *)&v61 + 1) = v48;
            *(_QWORD *)v62 = v47;
            *(_QWORD *)&v62[8] = v46;
            *(_QWORD *)&v62[16] = v15;
            v62[24] = v45;
            v62[25] = v44;
            v62[26] = v43;
            v62[27] = v42;
            outlined release of LocalePreferences(&v55);
            outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
            return (v17 & 1) != 0;
          }
          if (v78 == 2)
            goto LABEL_103;
LABEL_106:
          v20 = outlined consume of LocalePreferences?;
          v19 = v94;
          goto LABEL_51;
        }
        if (v75)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41 = specialized static Dictionary<>.== infix(_:_:)(v47, v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v41 & 1) == 0)
            goto LABEL_106;
          goto LABEL_91;
        }
LABEL_89:
        outlined retain of LocalePreferences?((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_53;
      }
    }
    else if (!v68)
    {
      goto LABEL_45;
    }
LABEL_50:
    outlined retain of LocalePreferences?((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v19 = v93;
    v20 = outlined copy of LocalePreferences?;
LABEL_51:
    outlined retain of LocalePreferences?((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v20);
    goto LABEL_52;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocaleCache()
{
  return &type metadata for LocaleCache;
}

uint64_t destroy for LocaleCache.State(id *a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(void **)(a2 + 48);
  v6 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(void **)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v7;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = v5;
  v11 = v6;
  v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + 48);
  v7 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = v7;

  v9 = *(void **)(a1 + 56);
  v10 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = v10;

  v12 = *(void **)(a1 + 64);
  v13 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = v13;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for LocaleCache.State(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();

  v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocaleCache.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocaleCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 24);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    v6 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v6;
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v9;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v10;
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v14;
    v16 = *(void **)(a2 + 80);
    v17 = *(void **)(a2 + 88);
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v16;
    v19 = *(void **)(a2 + 96);
    v18 = *(void **)(a2 + 104);
    *(_QWORD *)(a1 + 88) = v17;
    *(_QWORD *)(a1 + 96) = v19;
    v20 = *(void **)(a2 + 112);
    v28 = v18;
    v29 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v20;
    v30 = v20;
    v31 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v29;
    *(_QWORD *)(a1 + 128) = v31;
    v21 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v21;
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = v16;
    v23 = v17;
    v24 = v19;
    v25 = v28;
    v26 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v44;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) == 1)
  {
    if (v6 == 1)
    {
      *v4 = *v5;
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      v10 = *(_OWORD *)(a2 + 96);
      v11 = *(_OWORD *)(a2 + 112);
      v12 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 96) = v10;
    }
    else
    {
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v19 = *(void **)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v19;
      v20 = *(void **)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v20;
      v21 = *(void **)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v21;
      v22 = *(void **)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v22;
      v44 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v44;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v19;
      v24 = v20;
      v25 = v21;
      v26 = v22;
      v27 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of LocalePreferences((id *)(a1 + 16));
    *v4 = *v5;
    v13 = *(_OWORD *)(a2 + 80);
    v15 = *(_OWORD *)(a2 + 32);
    v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v14;
    v17 = *(_OWORD *)(a2 + 112);
    v16 = *(_OWORD *)(a2 + 128);
    v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 96) = v18;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v28 = *(void **)(a1 + 80);
    v29 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v29;
    v30 = v29;

    v31 = *(void **)(a1 + 88);
    v32 = *(void **)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v32;
    v33 = v32;

    v34 = *(void **)(a1 + 96);
    v35 = *(void **)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v35;
    v36 = v35;

    v37 = *(void **)(a1 + 104);
    v38 = *(void **)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v38;
    v39 = v38;

    v40 = *(void **)(a1 + 112);
    v41 = *(void **)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v41;
    v42 = v41;

    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  }
  return a1;
}

__n128 __swift_memcpy156_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24) != 1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (v5 != 1)
    {
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v10;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      v12 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

      v13 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

      v14 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

      v15 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

      v16 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v17;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      return a1;
    }
    outlined destroy of LocalePreferences((id *)(a1 + 16));
  }
  v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for LocaleCache.State.IdentifierAndPrefs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 156))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocaleCache.State.IdentifierAndPrefs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 156) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 156) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t PredicateExpressions.Disjunction.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Disjunction.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

void PredicateExpressions.Disjunction.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.Disjunction();
}

uint64_t sub_181C763FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t PredicateExpressions.Disjunction.evaluate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v6;
  v15 = *v6;
  (*(void (**)(char *__return_ptr, uint64_t *, _QWORD))(*(_QWORD *)(v10 + 32) + 16))((char *)&v16 + 1, &v15, *(_QWORD *)(v10 + 16));
  if (!v3)
  {
    v12 = BYTE1(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a2);
    if (v12 == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      v11 = 1;
    }
    else
    {
      v15 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(*(_QWORD *)(a2 + 40) + 16))(&v16, &v15, *(_QWORD *)(a2 + 24));
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      v11 = v16;
    }
  }
  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Disjunction<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.Disjunction.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

void static PredicateExpressions.build_Disjunction<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.Disjunction();
}

uint64_t sub_181C765CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t PredicateExpressions.Disjunction.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x800000018230A0F0;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.Disjunction<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.Disjunction<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[16];

  v12[5] = a5;
  v12[6] = a4;
  v12[9] = a3;
  v12[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12[7] = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v12[8] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[10] = v8;
  v12[11] = v8;
  v12[12] = v9;
  v12[13] = v10;
  v12[14] = v11;
  type metadata accessor for PredicateExpressions.Disjunction();
}

uint64_t sub_181C7688C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 200) = v6;
  *(_QWORD *)(v4 - 192) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v10 = *(_QWORD *)(v4 - 144);
  v11 = *(_QWORD *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v12 = *(_QWORD *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v10, v11);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v13 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 32))(v12 + *(int *)(v14 + 52), v13, v2);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v15 = *(_QWORD *)(v4 - 200);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 168), v12, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Disjunction<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.Disjunction<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Disjunction<A, B>(_QWORD *a1)
{
  return PredicateExpressions.Disjunction<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Disjunction(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181C76BE4 + 4 * byte_1820FED80[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Disjunction(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _FileManagerImpl.setAttributes(_:ofItemAtPath:)(Swift::OpaquePointer _, Swift::String ofItemAtPath)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  __CFString *v7;
  uint64_t v8;
  char v9;
  id v10;
  char v11;
  char v12;
  __CFString *v13;
  uint64_t v14;
  char v15;
  char v16;
  __CFString *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[4];
  char v24;
  char v25;
  id v26;
  uint64_t v27;
  void *rawValue;
  __int128 v29;
  __int128 v30;

  v3 = v2;
  object = ofItemAtPath._object;
  countAndFlagsBits = ofItemAtPath._countAndFlagsBits;
  if (*((_QWORD *)_._rawValue + 2))
  {
    v7 = CFSTR("NSFilePosixPermissions");
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v9 & 1) != 0)
    {
      outlined init with copy of Any(*((_QWORD *)_._rawValue + 7) + 32 * v8, (uint64_t)&v29);
    }
    else
    {
      v29 = 0u;
      v30 = 0u;
    }

  }
  else
  {
    v29 = 0u;
    v30 = 0u;
  }
  v10 = specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)&v29);
  v12 = v11;
  outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)_._rawValue + 2))
  {
    v13 = CFSTR("NSFileImmutable");
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v15 & 1) != 0)
    {
      outlined init with copy of Any(*((_QWORD *)_._rawValue + 7) + 32 * v14, (uint64_t)&v29);
    }
    else
    {
      v29 = 0u;
      v30 = 0u;
    }

  }
  else
  {
    v29 = 0u;
    v30 = 0u;
  }
  v16 = specialized _readFileAttributePrimitive(_:as:)((uint64_t)&v29);
  outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)_._rawValue + 2))
  {
    v17 = CFSTR("NSFileAppendOnly");
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
    if ((v19 & 1) != 0)
    {
      outlined init with copy of Any(*((_QWORD *)_._rawValue + 7) + 32 * v18, (uint64_t)&v29);
    }
    else
    {
      v29 = 0u;
      v30 = 0u;
    }

  }
  else
  {
    v29 = 0u;
    v30 = 0u;
  }
  v20 = specialized _readFileAttributePrimitive(_:as:)((uint64_t)&v29);
  outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for Any?);
  v21 = MEMORY[0x186DA9F5C](v3);
  if (v21)
  {
    v22 = (void *)v21;
    MEMORY[0x1E0C80A78](v21);
    v23[2] = countAndFlagsBits;
    v23[3] = object;
    v24 = v16;
    v25 = v20;
    v26 = v10;
    LOBYTE(v27) = v12 & 1;
    rawValue = _._rawValue;
    specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(countAndFlagsBits, (unint64_t)object, partial apply for closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:), (uint64_t)v23);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void _FileManagerImpl.copyItem(atPath:toPath:options:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v15[8];
  char v16;
  int v17;
  uint64_t v18;

  v6 = v5;
  v12 = MEMORY[0x186DA9F5C](v6);
  if (v12)
  {
    v16 = 1;
    v17 = (a5 << 10) & 0x4000000;
    v18 = v12;
    MEMORY[0x1E0C80A78](v12);
    v15[2] = a1;
    v15[3] = a2;
    v15[4] = a3;
    v15[5] = a4;
    v15[6] = v13;
    v15[7] = &v16;
    v14 = v13;
    specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))_s10Foundation15_FileOperationsO010linkOrCopyB033_0F974932CC9FBACA9047618113061023LL_3dst4with8delegateySS_SSSo13NSFileManagerCxtKAA04LinkeF8DelegateAELLRzlFZySPys4Int8VGSgKXEfU_AC04copyB0_2toAG7optionsySS_SSAJSo0mnF7OptionsVtKFZ0fbP0L_V_TG5TA_0, (uint64_t)v15, a1, a2);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

unint64_t _FileManagerImpl.copyItem(at:to:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  void *v9;
  int64_t v10;
  __int128 *v11;
  uint64_t v12;
  Swift::String v13;
  unsigned __int8 v14;
  char v15;
  id v16;
  uint64_t v17;
  Swift::String v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t result;
  uint64_t v33;
  __int128 *v34;
  _QWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  _OWORD *v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  int64_t v61;
  uint64_t v62;
  unsigned __int8 v64;
  char v65;
  __int128 *v66;
  Swift::String v67;
  uint64_t countAndFlagsBits;
  unint64_t object;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _QWORD *v85;
  _OWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  _OWORD *v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  int64_t v111;
  uint64_t v112;
  id v114;
  void *v115;
  id v116;
  void *v117;
  void *v118;
  id v119;
  void *v120;
  id v121;
  __int128 *v122;
  void *v123;
  void *v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  Swift::String v132;
  unint64_t v133;
  unint64_t v134;
  Swift::String v135;
  id v136;
  void *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  Swift::String v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  __int128 *v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  _OWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _OWORD *v173;
  uint64_t v174;
  uint64_t *v175;
  _OWORD *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  void *v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  id v194;
  id v195;
  int64_t v196;
  uint64_t v197;
  id v199;
  void *v200;
  id v201;
  void *v202;
  void *v203;
  id v204;
  void *v205;
  id v206;
  void *v207;
  void *v208;
  Swift::String v209;
  Swift::String v210;
  Swift::String v211;
  uint64_t v212;
  id v213;
  void *v214;
  unint64_t v215;
  id v216;
  uint64_t v217;
  _QWORD *v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  _QWORD *v231;
  _OWORD *v232;
  _OWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _OWORD *v237;
  _OWORD *v238;
  uint64_t v239;
  uint64_t *v240;
  _OWORD *v241;
  unint64_t v242;
  int64_t v243;
  unint64_t v244;
  int64_t v245;
  uint64_t *v246;
  void *v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  id v257;
  uint64_t v258;
  id v259;
  id v260;
  id v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v266;
  _BYTE v267[16];
  Swift::String *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  int64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t i;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE v282[32];
  Swift::String v283;
  _QWORD v284[4];
  _OWORD v285[2];
  Swift::String v286;
  _OWORD *v287;
  uint64_t v288;

  v4 = v3;
  i = a3;
  v5 = *(void **)a1;
  v6 = *(_OWORD **)(a1 + 8);
  v7 = *(_OWORD **)(a1 + 16);
  v9 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  swift_retain();
  v11 = v5;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v271 = v4;
    v14 = objc_msgSend(v11, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v14 & 1) != 0)
      goto LABEL_10;
    goto LABEL_15;
  }
  v286._countAndFlagsBits = (uint64_t)v11;
  v286._object = v6;
  v287 = v7;
  URL.scheme.getter();
  if (!v12)
  {
    swift_release();
    swift_release();

    goto LABEL_15;
  }
  v275 = v8;
  v271 = v4;
  v13 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v13._countAndFlagsBits == 1701603686 && v13._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v8 = v275;
    goto LABEL_10;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v8 = v275;
  if ((v15 & 1) == 0)
  {
LABEL_15:
    v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v280 = MEMORY[0x1E0DEE9E0];
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v22 = v21;
    v284[0] = v7;
    lazy protocol witness table accessor for type URL and conformance URL();
    v23 = v11;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v20, v22);
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v26 = v25;
    v286._countAndFlagsBits = (uint64_t)v23;
    v286._object = v6;
    v287 = v7;
    v283 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v24, v26);
    v27 = v280;
    if (*(_QWORD *)(v280 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v19 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v28 = *(_QWORD *)(v280 + 64);
    v274 = (_QWORD *)(v280 + 64);
    v29 = -1;
    v30 = -1 << *(_BYTE *)(v280 + 32);
    v271 = ~v30;
    if (-v30 < 64)
      v29 = ~(-1 << -(char)v30);
    v31 = v29 & v28;
    v273 = (unint64_t)(63 - v30) >> 6;
    v11 = (__int128 *)&v287;
    v6 = v282;
    v7 = v284;
    v272 = (char *)(v19 + 8);
    result = swift_bridgeObjectRetain();
    i = 0;
    v275 = MEMORY[0x1E0DEE9B8] + 8;
    if (v31)
      goto LABEL_22;
LABEL_23:
    v42 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
      goto LABEL_242;
    }
    if (v42 < v273)
    {
      v43 = v274[v42];
      v44 = i + 1;
      if (v43)
        goto LABEL_42;
      v44 = i + 2;
      if (i + 2 < v273)
      {
        v43 = v274[v44];
        if (v43)
          goto LABEL_42;
        v44 = i + 3;
        if (i + 3 < v273)
        {
          v43 = v274[v44];
          if (v43)
            goto LABEL_42;
          v44 = i + 4;
          if (i + 4 < v273)
          {
            v43 = v274[v44];
            if (v43)
              goto LABEL_42;
            v44 = i + 5;
            if (i + 5 < v273)
            {
              v43 = v274[v44];
              if (v43)
                goto LABEL_42;
              v44 = i + 6;
              if (i + 6 < v273)
              {
                v43 = v274[v44];
                if (v43)
                  goto LABEL_42;
                v45 = i + 7;
                if (i + 7 < v273)
                {
                  v43 = v274[v45];
                  if (!v43)
                  {
                    while (1)
                    {
                      v44 = v45 + 1;
                      if (__OFADD__(v45, 1))
                        goto LABEL_249;
                      if (v44 >= v273)
                        goto LABEL_48;
                      v43 = v274[v44];
                      ++v45;
                      if (v43)
                        goto LABEL_42;
                    }
                  }
                  v44 = i + 7;
LABEL_42:
                  v288 = (v43 - 1) & v43;
                  v41 = __clz(__rbit64(v43)) + (v44 << 6);
                  for (i = v44; ; v41 = __clz(__rbit64(v31)) | (i << 6))
                  {
                    v46 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v41);
                    v48 = *v46;
                    v47 = v46[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v27 + 56) + 40 * v41, (uint64_t)v11);
                    v286._countAndFlagsBits = v48;
                    v286._object = (void *)v47;
                    v49 = v11[1];
                    v277 = *v11;
                    v278 = v49;
                    v279 = *((_QWORD *)v11 + 4);
                    v280 = v48;
                    v281 = v47;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v50 = v47;
                    outlined init with take of Any(v6, v7);
                    outlined init with take of Any(v7, v285);
                    outlined init with take of Any(v285, &v283);
                    result = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47);
                    v51 = result;
                    if ((v52 & 1) != 0)
                    {
                      v33 = v19[6];
                      v34 = v11;
                      v35 = v19;
                      v36 = v7;
                      v37 = v6;
                      v38 = v27;
                      v39 = (uint64_t *)(v33 + 16 * result);
                      swift_bridgeObjectRelease();
                      *v39 = v48;
                      v39[1] = v50;
                      v27 = v38;
                      v6 = v37;
                      v7 = v36;
                      v19 = v35;
                      v11 = v34;
                      v40 = (_OWORD *)(v19[7] + 32 * v51);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
                      result = (unint64_t)outlined init with take of Any(&v283, v40);
                      v31 = v288;
                      if (!v288)
                        goto LABEL_23;
                    }
                    else
                    {
                      if (v19[2] >= v19[3])
                      {
                        __break(1u);
LABEL_238:
                        __break(1u);
                        goto LABEL_239;
                      }
                      *(_QWORD *)&v272[(result >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << result;
                      v53 = (uint64_t *)(v19[6] + 16 * result);
                      *v53 = v48;
                      v53[1] = v50;
                      result = (unint64_t)outlined init with take of Any(&v283, (_OWORD *)(v19[7] + 32 * result));
                      v54 = v19[2];
                      v55 = __OFADD__(v54, 1);
                      v56 = v54 + 1;
                      if (v55)
                        goto LABEL_238;
                      v19[2] = v56;
                      v31 = v288;
                      if (!v288)
                        goto LABEL_23;
                    }
LABEL_22:
                    v288 = (v31 - 1) & v31;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v57 = objc_allocWithZone((Class)NSError);
    v58 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, 262, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v16 = objc_msgSend(v59, sel_domain);
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v10 = v61;

    if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v10 == v62)
      goto LABEL_235;
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      return swift_willThrow();
    __break(1u);
LABEL_54:
    v64 = objc_msgSend(v16, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v64 & 1) != 0)
      goto LABEL_58;
    goto LABEL_62;
  }
LABEL_10:
  swift_retain();
  v16 = v9;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
    goto LABEL_54;
  v286._countAndFlagsBits = (uint64_t)v16;
  v286._object = (void *)v8;
  v287 = (_OWORD *)v10;
  URL.scheme.getter();
  if (!v17)
  {
    swift_release();
    swift_release();

    goto LABEL_62;
  }
  v275 = (uint64_t)v6;
  v18 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v18._countAndFlagsBits == 1701603686 && v18._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v6 = (_OWORD *)v275;
    goto LABEL_58;
  }
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v6 = (_OWORD *)v275;
  if ((v65 & 1) == 0)
  {
LABEL_62:
    v70 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v280 = MEMORY[0x1E0DEE9E0];
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v73 = v72;
    v283._countAndFlagsBits = (uint64_t)v16;
    v283._object = (void *)v8;
    v284[0] = v10;
    lazy protocol witness table accessor for type URL and conformance URL();
    v74 = v16;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v71, v73);
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v77 = v76;
    v286._countAndFlagsBits = (uint64_t)v74;
    v286._object = (void *)v8;
    v287 = (_OWORD *)v10;
    v283 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v75, v77);
    v78 = v280;
    if (*(_QWORD *)(v280 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v70 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v79 = *(_QWORD *)(v280 + 64);
    v274 = (_QWORD *)(v280 + 64);
    v80 = -1;
    v81 = -1 << *(_BYTE *)(v280 + 32);
    v271 = ~v81;
    if (-v81 < 64)
      v80 = ~(-1 << -(char)v81);
    v82 = v80 & v79;
    v273 = (unint64_t)(63 - v81) >> 6;
    v66 = (__int128 *)&v287;
    v6 = v282;
    v7 = v284;
    v272 = (char *)(v70 + 8);
    result = swift_bridgeObjectRetain();
    i = 0;
    v275 = MEMORY[0x1E0DEE9B8] + 8;
    if (v82)
      goto LABEL_69;
LABEL_70:
    v92 = i + 1;
    if (!__OFADD__(i, 1))
    {
      if (v92 < v273)
      {
        v93 = v274[v92];
        v94 = i + 1;
        if (v93)
          goto LABEL_89;
        v94 = i + 2;
        if (i + 2 < v273)
        {
          v93 = v274[v94];
          if (v93)
            goto LABEL_89;
          v94 = i + 3;
          if (i + 3 < v273)
          {
            v93 = v274[v94];
            if (v93)
              goto LABEL_89;
            v94 = i + 4;
            if (i + 4 < v273)
            {
              v93 = v274[v94];
              if (v93)
                goto LABEL_89;
              v94 = i + 5;
              if (i + 5 < v273)
              {
                v93 = v274[v94];
                if (v93)
                  goto LABEL_89;
                v94 = i + 6;
                if (i + 6 < v273)
                {
                  v93 = v274[v94];
                  if (v93)
                    goto LABEL_89;
                  v95 = i + 7;
                  if (i + 7 < v273)
                  {
                    v93 = v274[v95];
                    if (!v93)
                    {
                      while (1)
                      {
                        v94 = v95 + 1;
                        if (__OFADD__(v95, 1))
                          goto LABEL_250;
                        if (v94 >= v273)
                          goto LABEL_95;
                        v93 = v274[v94];
                        ++v95;
                        if (v93)
                          goto LABEL_89;
                      }
                    }
                    v94 = i + 7;
LABEL_89:
                    v288 = (v93 - 1) & v93;
                    v91 = __clz(__rbit64(v93)) + (v94 << 6);
                    for (i = v94; ; v91 = __clz(__rbit64(v82)) | (i << 6))
                    {
                      v96 = (uint64_t *)(*(_QWORD *)(v78 + 48) + 16 * v91);
                      v98 = *v96;
                      v97 = v96[1];
                      outlined init with copy of AnyHashable(*(_QWORD *)(v78 + 56) + 40 * v91, (uint64_t)v66);
                      v286._countAndFlagsBits = v98;
                      v286._object = (void *)v97;
                      v99 = v66[1];
                      v277 = *v66;
                      v278 = v99;
                      v279 = *((_QWORD *)v66 + 4);
                      v280 = v98;
                      v281 = v97;
                      swift_bridgeObjectRetain();
                      swift_dynamicCast();
                      v100 = v97;
                      outlined init with take of Any(v6, v7);
                      outlined init with take of Any(v7, v285);
                      outlined init with take of Any(v285, &v283);
                      result = specialized __RawDictionaryStorage.find<A>(_:)(v98, v97);
                      v101 = result;
                      if ((v102 & 1) != 0)
                      {
                        v83 = v70[6];
                        v84 = v66;
                        v85 = v70;
                        v86 = v7;
                        v87 = v6;
                        v88 = v78;
                        v89 = (uint64_t *)(v83 + 16 * result);
                        swift_bridgeObjectRelease();
                        *v89 = v98;
                        v89[1] = v100;
                        v78 = v88;
                        v6 = v87;
                        v7 = v86;
                        v70 = v85;
                        v66 = v84;
                        v90 = (_OWORD *)(v70[7] + 32 * v101);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
                        result = (unint64_t)outlined init with take of Any(&v283, v90);
                        v82 = v288;
                        if (!v288)
                          goto LABEL_70;
                      }
                      else
                      {
                        if (v70[2] >= v70[3])
                          goto LABEL_240;
                        *(_QWORD *)&v272[(result >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << result;
                        v103 = (uint64_t *)(v70[6] + 16 * result);
                        *v103 = v98;
                        v103[1] = v100;
                        result = (unint64_t)outlined init with take of Any(&v283, (_OWORD *)(v70[7] + 32 * result));
                        v104 = v70[2];
                        v55 = __OFADD__(v104, 1);
                        v105 = v104 + 1;
                        if (v55)
                          goto LABEL_241;
                        v70[2] = v105;
                        v82 = v288;
                        if (!v288)
                          goto LABEL_70;
                      }
LABEL_69:
                      v288 = (v82 - 1) & v82;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_95:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v106 = objc_allocWithZone((Class)NSError);
      v107 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v108 = objc_msgSend(v106, sel_initWithDomain_code_userInfo_, v107, 262, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v109 = objc_msgSend(v108, sel_domain);
      v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
      v10 = v111;

      if (v110 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v10 == v112)
        goto LABEL_235;
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return swift_willThrow();
      __break(1u);
      goto LABEL_101;
    }
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }
LABEL_58:
  v66 = v11;
  swift_retain();
  swift_retain();
  v274 = v16;
  if (_foundation_swift_url_feature_enabled())
  {
    v286._countAndFlagsBits = (uint64_t)v66;
    v286._object = v6;
    v287 = v7;
    v272 = (char *)v66;
    v270 = v66;
    swift_retain();
    swift_retain();
    v67 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v67._countAndFlagsBits;
    v286 = v67;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v67._object;
    }
    else
    {
      object = (unint64_t)v67._object;
      if ((specialized BidirectionalCollection.last.getter(v67._countAndFlagsBits, (unint64_t)v67._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = (unint64_t)v286._object;
        countAndFlagsBits = v286._countAndFlagsBits;
      }
    }
    v283._countAndFlagsBits = Set.init(minimumCapacity:)();
    v127 = specialized Set._Variant.insert(_:)(&v280, 0x2FuLL);
    v128 = v283._countAndFlagsBits;
    v129 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v129 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v129)
    {
      v273 = v10;
      v283._countAndFlagsBits = countAndFlagsBits;
      v283._object = (void *)object;
      MEMORY[0x1E0C80A78](v127);
      v268 = &v283;
      v269 = v128;
      swift_bridgeObjectRetain();
      v130 = v271;
      v275 = (uint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v267, countAndFlagsBits, object);
      v271 = v130;
      if (v131 == 1)
      {
        v132 = v283;
        swift_bridgeObjectRetain();
        v275 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v132._countAndFlagsBits, (unint64_t)v132._object, v128);
        v134 = v133;
        swift_bridgeObjectRelease();
      }
      else
      {
        v134 = v131;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v273;
      v139 = (void *)v270;
      if (!v134)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v275 = 0;
        v134 = 0xE000000000000000;
        goto LABEL_120;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v275 = 0;
      v134 = 0xE000000000000000;
      v139 = (void *)v270;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_120:
    swift_release();
    swift_release();

    v66 = (__int128 *)v272;
    goto LABEL_121;
  }
LABEL_101:
  v114 = objc_msgSend(v66, sel__parameterString);
  if (v114)
  {
    v115 = v114;
    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
    v118 = v117;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v119 = objc_msgSend(v66, sel_path)) != 0)
    {
      v120 = v119;
      v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
      v275 = (uint64_t)v116;
      v122 = v66;
      v124 = v123;

      v286._countAndFlagsBits = (uint64_t)v121;
      v286._object = v124;
      swift_bridgeObjectRetain();
      v125._countAndFlagsBits = 59;
      v125._object = (void *)0xE100000000000000;
      String.append(_:)(v125);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v126._countAndFlagsBits = v275;
      v126._object = v118;
      String.append(_:)(v126);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      v66 = v122;
    }
    else
    {
      v286._countAndFlagsBits = 59;
      v286._object = (void *)0xE100000000000000;
      v135._countAndFlagsBits = (uint64_t)v116;
      v135._object = v118;
      String.append(_:)(v135);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v134 = (unint64_t)v286._object;
    v275 = v286._countAndFlagsBits;
  }
  else
  {
    v136 = objc_msgSend(v66, sel_path);
    if (v136)
    {
      v137 = v136;
      v275 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
      v134 = v138;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v275 = 0;
      v134 = 0xE000000000000000;
    }
  }
LABEL_121:
  v140 = HIBYTE(v134) & 0xF;
  if ((v134 & 0x2000000000000000) == 0)
    v140 = v275 & 0xFFFFFFFFFFFFLL;
  if (v140)
  {
    v141 = v274;
    swift_retain();
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      v286._countAndFlagsBits = (uint64_t)v141;
      v286._object = (void *)v8;
      v287 = (_OWORD *)v10;
      v274 = v141;
      v272 = v141;
      swift_retain();
      swift_retain();
      v142 = URL.path(percentEncoded:)(1);
      v286 = v142;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v142._countAndFlagsBits, (unint64_t)v142._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v283._countAndFlagsBits = Set.init(minimumCapacity:)();
      v143 = specialized Set._Variant.insert(_:)(&v280, 0x2FuLL);
      v144 = v283._countAndFlagsBits;
      v145 = v286;
      v146 = ((unint64_t)v286._object >> 56) & 0xF;
      if (((uint64_t)v286._object & 0x2000000000000000) == 0)
        v146 = v286._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v146)
      {
        v270 = v134;
        v273 = v10;
        v283 = v286;
        MEMORY[0x1E0C80A78](v143);
        v268 = &v283;
        v269 = v144;
        swift_bridgeObjectRetain();
        v147 = v271;
        v148 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v267, v145._countAndFlagsBits, (unint64_t)v145._object);
        if (v149 == 1)
        {
          v150 = v283;
          swift_bridgeObjectRetain();
          v151 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v150._countAndFlagsBits, (unint64_t)v150._object, v144);
          v153 = v152;
          swift_bridgeObjectRelease();
        }
        else
        {
          v151 = (uint64_t)v148;
          v153 = v149;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = v273;
        v212 = v147;
        if (!v153)
        {
          swift_release();
          swift_release();
          v216 = v272;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v151 = 0;
          v153 = 0xE000000000000000;
          v134 = v270;
          goto LABEL_187;
        }
        v134 = v270;
      }
      else
      {
        swift_bridgeObjectRelease();
        v151 = 0;
        v153 = 0xE000000000000000;
        v212 = v271;
      }
      swift_release();
      swift_release();
      v216 = v272;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_187:
      swift_release();
      swift_release();

      v141 = v274;
      goto LABEL_191;
    }
LABEL_173:
    v199 = objc_msgSend(v141, sel__parameterString);
    if (v199)
    {
      v200 = v199;
      v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v199);
      v203 = v202;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v204 = objc_msgSend(v141, sel_path)) != 0)
      {
        v205 = v204;
        v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(v204);
        v274 = v141;
        v208 = v207;

        v286._countAndFlagsBits = (uint64_t)v206;
        v286._object = v208;
        swift_bridgeObjectRetain();
        v209._countAndFlagsBits = 59;
        v209._object = (void *)0xE100000000000000;
        String.append(_:)(v209);
        v141 = v274;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v210._countAndFlagsBits = (uint64_t)v201;
        v210._object = v203;
        String.append(_:)(v210);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        v286._countAndFlagsBits = 59;
        v286._object = (void *)0xE100000000000000;
        v211._countAndFlagsBits = (uint64_t)v201;
        v211._object = v203;
        String.append(_:)(v211);
        swift_release();
        swift_release();

      }
      swift_bridgeObjectRelease();
      v153 = (unint64_t)v286._object;
      v151 = v286._countAndFlagsBits;
    }
    else
    {
      v213 = objc_msgSend(v141, sel_path);
      if (v213)
      {
        v214 = v213;
        v151 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
        v153 = v215;
        swift_release();
        swift_release();

      }
      else
      {
        swift_release();
        swift_release();

        v151 = 0;
        v153 = 0xE000000000000000;
      }
    }
    v212 = v271;
LABEL_191:
    v217 = HIBYTE(v153) & 0xF;
    if ((v153 & 0x2000000000000000) == 0)
      v217 = v151 & 0xFFFFFFFFFFFFLL;
    if (v217)
    {
      _FileManagerImpl.copyItem(atPath:toPath:options:)(v275, v134, v151, v153, i);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v271 = v212;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v218 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v280 = MEMORY[0x1E0DEE9E0];
    v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v221 = v220;
    v283._countAndFlagsBits = (uint64_t)v141;
    v283._object = (void *)v8;
    v284[0] = v10;
    lazy protocol witness table accessor for type URL and conformance URL();
    v222 = v141;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v219, v221);
    v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v225 = v224;
    v286._countAndFlagsBits = (uint64_t)v222;
    v286._object = (void *)v8;
    v287 = (_OWORD *)v10;
    v283 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v223, v225);
    v226 = v280;
    if (*(_QWORD *)(v280 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v218 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v227 = *(_QWORD *)(v226 + 64);
    v274 = (_QWORD *)(v226 + 64);
    v228 = -1;
    v229 = -1 << *(_BYTE *)(v226 + 32);
    v270 = ~v229;
    if (-v229 < 64)
      v228 = ~(-1 << -(char)v229);
    v230 = v228 & v227;
    v273 = (unint64_t)(63 - v229) >> 6;
    v231 = &v287;
    v232 = v282;
    v233 = v284;
    v272 = (char *)(v218 + 8);
    result = swift_bridgeObjectRetain();
    i = 0;
    v275 = MEMORY[0x1E0DEE9B8] + 8;
    if (v230)
      goto LABEL_202;
LABEL_203:
    v243 = i + 1;
    if (!__OFADD__(i, 1))
    {
      if (v243 < v273)
      {
        v244 = v274[v243];
        if (v244)
        {
LABEL_219:
          v288 = (v244 - 1) & v244;
          v242 = __clz(__rbit64(v244)) + (v243 << 6);
          for (i = v243; ; v242 = __clz(__rbit64(v230)) | (i << 6))
          {
            v246 = (uint64_t *)(*(_QWORD *)(v226 + 48) + 16 * v242);
            v248 = *v246;
            v247 = (void *)v246[1];
            outlined init with copy of AnyHashable(*(_QWORD *)(v226 + 56) + 40 * v242, (uint64_t)v231);
            v286._countAndFlagsBits = v248;
            v286._object = v247;
            v249 = *((_OWORD *)v231 + 1);
            v277 = *(_OWORD *)v231;
            v278 = v249;
            v279 = v231[4];
            v280 = v248;
            v281 = (uint64_t)v247;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v250 = v280;
            v251 = v281;
            outlined init with take of Any(v232, v233);
            outlined init with take of Any(v233, v285);
            outlined init with take of Any(v285, &v283);
            result = specialized __RawDictionaryStorage.find<A>(_:)(v250, v251);
            v252 = result;
            if ((v253 & 1) != 0)
            {
              v234 = v218[6];
              v235 = v231;
              v236 = v218;
              v237 = v233;
              v238 = v232;
              v239 = v226;
              v240 = (uint64_t *)(v234 + 16 * result);
              swift_bridgeObjectRelease();
              *v240 = v250;
              v240[1] = v251;
              v226 = v239;
              v232 = v238;
              v233 = v237;
              v218 = v236;
              v231 = v235;
              v241 = (_OWORD *)(v218[7] + 32 * v252);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v241);
              result = (unint64_t)outlined init with take of Any(&v283, v241);
              v230 = v288;
              if (!v288)
                goto LABEL_203;
            }
            else
            {
              if (v218[2] >= v218[3])
                goto LABEL_246;
              *(_QWORD *)&v272[(result >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << result;
              v254 = (uint64_t *)(v218[6] + 16 * result);
              *v254 = v250;
              v254[1] = v251;
              result = (unint64_t)outlined init with take of Any(&v283, (_OWORD *)(v218[7] + 32 * result));
              v255 = v218[2];
              v55 = __OFADD__(v255, 1);
              v256 = v255 + 1;
              if (v55)
                goto LABEL_247;
              v218[2] = v256;
              v230 = v288;
              if (!v288)
                goto LABEL_203;
            }
LABEL_202:
            v288 = (v230 - 1) & v230;
          }
        }
        v245 = i + 2;
        if (i + 2 < v273)
        {
          v244 = v274[v245];
          if (v244)
            goto LABEL_218;
          v245 = i + 3;
          if (i + 3 < v273)
          {
            v244 = v274[v245];
            if (v244)
              goto LABEL_218;
            v245 = i + 4;
            if (i + 4 < v273)
            {
              v244 = v274[v245];
              if (v244)
                goto LABEL_218;
              v245 = i + 5;
              if (i + 5 < v273)
              {
                v244 = v274[v245];
                if (v244)
                  goto LABEL_218;
                v245 = i + 6;
                if (i + 6 < v273)
                {
                  v244 = v274[v245];
                  if (!v244)
                  {
                    v245 = i + 7;
                    if (i + 7 < v273)
                    {
                      v244 = v274[v245];
                      if (v244)
                        goto LABEL_218;
                      while (1)
                      {
                        v243 = v245 + 1;
                        if (__OFADD__(v245, 1))
                          goto LABEL_252;
                        if (v243 >= v273)
                          goto LABEL_229;
                        v244 = v274[v243];
                        ++v245;
                        if (v244)
                          goto LABEL_219;
                      }
                    }
                    goto LABEL_229;
                  }
LABEL_218:
                  v243 = v245;
                  goto LABEL_219;
                }
              }
            }
          }
        }
      }
LABEL_229:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v257 = objc_allocWithZone((Class)NSError);
      v258 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v259 = objc_msgSend(v257, sel_initWithDomain_code_userInfo_, v258, 4, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v260 = objc_msgSend(v259, sel_domain);
      v261 = static String._unconditionallyBridgeFromObjectiveC(_:)(v260);
      v263 = v262;

      if (v261 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v263 == v264)
        goto LABEL_235;
      v266 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v266 & 1) == 0)
      {
        __break(1u);
LABEL_235:
        swift_bridgeObjectRelease_n();
      }
      return swift_willThrow();
    }
    goto LABEL_248;
  }
  swift_bridgeObjectRelease();
  v154 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v280 = MEMORY[0x1E0DEE9E0];
  v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v157 = v156;
  v283._countAndFlagsBits = (uint64_t)v66;
  v283._object = v6;
  v284[0] = v7;
  lazy protocol witness table accessor for type URL and conformance URL();
  v158 = v66;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v155, v157);
  v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v161 = v160;
  v286._countAndFlagsBits = (uint64_t)v158;
  v286._object = v6;
  v287 = v7;
  v283 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v286, (uint64_t)v159, v161);
  v162 = v280;
  if (*(_QWORD *)(v280 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v154 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v163 = *(_QWORD *)(v162 + 64);
  v273 = v162 + 64;
  v164 = -1;
  v165 = -1 << *(_BYTE *)(v162 + 32);
  v270 = ~v165;
  if (-v165 < 64)
    v164 = ~(-1 << -(char)v165);
  v166 = v164 & v163;
  v274 = (_QWORD *)((unint64_t)(63 - v165) >> 6);
  v167 = &v287;
  v168 = v282;
  v141 = v284;
  v272 = (char *)(v154 + 8);
  result = swift_bridgeObjectRetain();
  i = 0;
  v275 = MEMORY[0x1E0DEE9B8] + 8;
  if (v166)
    goto LABEL_140;
LABEL_141:
  v178 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v178 < (uint64_t)v274)
    {
      v179 = *(_QWORD *)(v273 + 8 * v178);
      if (v179)
      {
LABEL_157:
        v288 = (v179 - 1) & v179;
        v177 = __clz(__rbit64(v179)) + (v178 << 6);
        for (i = v178; ; v177 = __clz(__rbit64(v166)) | (i << 6))
        {
          v181 = (uint64_t *)(*(_QWORD *)(v162 + 48) + 16 * v177);
          v183 = *v181;
          v182 = (void *)v181[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v162 + 56) + 40 * v177, (uint64_t)v167);
          v286._countAndFlagsBits = v183;
          v286._object = v182;
          v184 = *((_OWORD *)v167 + 1);
          v277 = *(_OWORD *)v167;
          v278 = v184;
          v279 = v167[4];
          v280 = v183;
          v281 = (uint64_t)v182;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v185 = v280;
          v186 = v281;
          outlined init with take of Any(v168, v141);
          outlined init with take of Any(v141, v285);
          outlined init with take of Any(v285, &v283);
          result = specialized __RawDictionaryStorage.find<A>(_:)(v185, v186);
          v187 = result;
          if ((v188 & 1) != 0)
          {
            v169 = v154[6];
            v170 = v167;
            v171 = v154;
            v172 = v141;
            v173 = v168;
            v174 = v162;
            v175 = (uint64_t *)(v169 + 16 * result);
            swift_bridgeObjectRelease();
            *v175 = v185;
            v175[1] = v186;
            v162 = v174;
            v168 = v173;
            v141 = v172;
            v154 = v171;
            v167 = v170;
            v176 = (_OWORD *)(v154[7] + 32 * v187);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v176);
            result = (unint64_t)outlined init with take of Any(&v283, v176);
            v166 = v288;
            if (!v288)
              goto LABEL_141;
          }
          else
          {
            if (v154[2] >= v154[3])
              goto LABEL_243;
            *(_QWORD *)&v272[(result >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << result;
            v189 = (uint64_t *)(v154[6] + 16 * result);
            *v189 = v185;
            v189[1] = v186;
            result = (unint64_t)outlined init with take of Any(&v283, (_OWORD *)(v154[7] + 32 * result));
            v190 = v154[2];
            v55 = __OFADD__(v190, 1);
            v191 = v190 + 1;
            if (v55)
              goto LABEL_244;
            v154[2] = v191;
            v166 = v288;
            if (!v288)
              goto LABEL_141;
          }
LABEL_140:
          v288 = (v166 - 1) & v166;
        }
      }
      v180 = i + 2;
      if (i + 2 < (uint64_t)v274)
      {
        v179 = *(_QWORD *)(v273 + 8 * v180);
        if (v179)
          goto LABEL_156;
        v180 = i + 3;
        if (i + 3 >= (uint64_t)v274)
          goto LABEL_167;
        v179 = *(_QWORD *)(v273 + 8 * v180);
        if (v179)
          goto LABEL_156;
        v180 = i + 4;
        if (i + 4 >= (uint64_t)v274)
          goto LABEL_167;
        v179 = *(_QWORD *)(v273 + 8 * v180);
        if (v179)
          goto LABEL_156;
        v180 = i + 5;
        if (i + 5 >= (uint64_t)v274)
          goto LABEL_167;
        v179 = *(_QWORD *)(v273 + 8 * v180);
        if (v179)
          goto LABEL_156;
        v180 = i + 6;
        if (i + 6 >= (uint64_t)v274)
          goto LABEL_167;
        v179 = *(_QWORD *)(v273 + 8 * v180);
        if (v179)
        {
LABEL_156:
          v178 = v180;
          goto LABEL_157;
        }
        v180 = i + 7;
        if (i + 7 < (uint64_t)v274)
        {
          v179 = *(_QWORD *)(v273 + 8 * v180);
          if (!v179)
          {
            while (1)
            {
              v178 = v180 + 1;
              if (__OFADD__(v180, 1))
                goto LABEL_251;
              if (v178 >= (uint64_t)v274)
                goto LABEL_167;
              v179 = *(_QWORD *)(v273 + 8 * v178);
              ++v180;
              if (v179)
                goto LABEL_157;
            }
          }
          goto LABEL_156;
        }
      }
    }
LABEL_167:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v192 = objc_allocWithZone((Class)NSError);
    v193 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v194 = objc_msgSend(v192, sel_initWithDomain_code_userInfo_, v193, 4, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v134 = (unint64_t)objc_msgSend(v194, sel_domain);
    v195 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v134);
    v10 = v196;

    if (v195 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v10 == v197)
      goto LABEL_235;
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      return swift_willThrow();
    __break(1u);
    goto LABEL_173;
  }
LABEL_245:
  __break(1u);
LABEL_246:
  __break(1u);
LABEL_247:
  __break(1u);
LABEL_248:
  __break(1u);
LABEL_249:
  __break(1u);
LABEL_250:
  __break(1u);
LABEL_251:
  __break(1u);
LABEL_252:
  __break(1u);
  return result;
}

void _FileManagerImpl.removeItem(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  Swift::String v10;
  unsigned __int8 v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  Swift::String v15;
  uint64_t countAndFlagsBits;
  unint64_t object;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  _OWORD *v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  id v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  Swift::String v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  Swift::String v87;
  id v88;
  void *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  _QWORD *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  _OWORD *v116;
  _OWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  _OWORD *v120;
  unint64_t v121;
  int64_t v122;
  unint64_t v123;
  int64_t v124;
  uint64_t *v125;
  void *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  int64_t v153;
  uint64_t v154;
  uint64_t v155;
  int64_t i;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE v162[32];
  Swift::String v163;
  _QWORD v164[4];
  _OWORD v165[2];
  Swift::String v166;
  uint64_t v167;
  uint64_t v168;

  v3 = v2;
  v4 = v1;
  v5 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v8 = v5;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v11 = objc_msgSend(v8, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v11 & 1) != 0)
      goto LABEL_10;
    goto LABEL_14;
  }
  v166._countAndFlagsBits = (uint64_t)v8;
  v166._object = v6;
  v167 = v7;
  URL.scheme.getter();
  if (!v9)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }
  v10 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v10._countAndFlagsBits == 1701603686 && v10._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_14:
    v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v160 = MEMORY[0x1E0DEE9E0];
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v21 = v20;
    v164[0] = v7;
    lazy protocol witness table accessor for type URL and conformance URL();
    v22 = v8;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v166, (uint64_t)v19, v21);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v25 = v24;
    v166._countAndFlagsBits = (uint64_t)v22;
    v166._object = v6;
    v167 = v7;
    v163 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v166, (uint64_t)v23, v25);
    v26 = v160;
    if (*(_QWORD *)(v160 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v18 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v27 = *(_QWORD *)(v160 + 64);
    v154 = v160 + 64;
    v28 = -1;
    v29 = -1 << *(_BYTE *)(v160 + 32);
    v151 = ~v29;
    if (-v29 < 64)
      v28 = ~(-1 << -(char)v29);
    v30 = v28 & v27;
    v153 = (unint64_t)(63 - v29) >> 6;
    v13 = &v167;
    v31 = v162;
    v32 = v164;
    v152 = v18 + 8;
    swift_bridgeObjectRetain();
    i = 0;
    v155 = MEMORY[0x1E0DEE9B8] + 8;
    if (v30)
      goto LABEL_21;
LABEL_22:
    v42 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    if (v42 < v153)
    {
      v43 = *(_QWORD *)(v154 + 8 * v42);
      v44 = i + 1;
      if (v43)
        goto LABEL_41;
      v44 = i + 2;
      if (i + 2 < v153)
      {
        v43 = *(_QWORD *)(v154 + 8 * v44);
        if (v43)
          goto LABEL_41;
        v44 = i + 3;
        if (i + 3 < v153)
        {
          v43 = *(_QWORD *)(v154 + 8 * v44);
          if (v43)
            goto LABEL_41;
          v44 = i + 4;
          if (i + 4 < v153)
          {
            v43 = *(_QWORD *)(v154 + 8 * v44);
            if (v43)
              goto LABEL_41;
            v44 = i + 5;
            if (i + 5 < v153)
            {
              v43 = *(_QWORD *)(v154 + 8 * v44);
              if (v43)
                goto LABEL_41;
              v44 = i + 6;
              if (i + 6 < v153)
              {
                v43 = *(_QWORD *)(v154 + 8 * v44);
                if (v43)
                  goto LABEL_41;
                v45 = (char *)(i + 7);
                if (i + 7 < v153)
                {
                  v43 = *(_QWORD *)(v154 + 8 * (_QWORD)v45);
                  if (!v43)
                  {
                    while (1)
                    {
                      v44 = (int64_t)(v45 + 1);
                      if (__OFADD__(v45, 1))
                        goto LABEL_127;
                      if (v44 >= v153)
                        goto LABEL_47;
                      v43 = *(_QWORD *)(v154 + 8 * v44);
                      ++v45;
                      if (v43)
                        goto LABEL_41;
                    }
                  }
                  v44 = i + 7;
LABEL_41:
                  v168 = (v43 - 1) & v43;
                  v41 = __clz(__rbit64(v43)) + (v44 << 6);
                  for (i = v44; ; v41 = __clz(__rbit64(v30)) | (i << 6))
                  {
                    v46 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * v41);
                    v48 = *v46;
                    v47 = (void *)v46[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v26 + 56) + 40 * v41, (uint64_t)v13);
                    v166._countAndFlagsBits = v48;
                    v166._object = v47;
                    v49 = *((_OWORD *)v13 + 1);
                    v157 = *(_OWORD *)v13;
                    v158 = v49;
                    v159 = v13[4];
                    v160 = v48;
                    v161 = (uint64_t)v47;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v3 = (uint64_t)v47;
                    outlined init with take of Any(v31, v32);
                    outlined init with take of Any(v32, v165);
                    outlined init with take of Any(v165, &v163);
                    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, (uint64_t)v47);
                    v51 = v50;
                    if ((v52 & 1) != 0)
                    {
                      v33 = v18[6];
                      v34 = v13;
                      v35 = v18;
                      v36 = v32;
                      v37 = v31;
                      v38 = v26;
                      v39 = (uint64_t *)(v33 + 16 * v50);
                      swift_bridgeObjectRelease();
                      *v39 = v48;
                      v39[1] = v3;
                      v26 = v38;
                      v31 = v37;
                      v32 = v36;
                      v18 = v35;
                      v13 = v34;
                      v40 = (_OWORD *)(v18[7] + 32 * v51);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
                      outlined init with take of Any(&v163, v40);
                      v30 = v168;
                      if (!v168)
                        goto LABEL_22;
                    }
                    else
                    {
                      if (v18[2] >= v18[3])
                      {
                        __break(1u);
LABEL_122:
                        __break(1u);
                        goto LABEL_123;
                      }
                      *(_QWORD *)((char *)v152 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
                      v53 = (uint64_t *)(v18[6] + 16 * v50);
                      *v53 = v48;
                      v53[1] = v3;
                      outlined init with take of Any(&v163, (_OWORD *)(v18[7] + 32 * v50));
                      v54 = v18[2];
                      v55 = __OFADD__(v54, 1);
                      v56 = v54 + 1;
                      if (v55)
                        goto LABEL_122;
                      v18[2] = v56;
                      v30 = v168;
                      if (!v168)
                        goto LABEL_22;
                    }
LABEL_21:
                    v168 = (v30 - 1) & v30;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_47:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v57 = objc_allocWithZone((Class)NSError);
    v58 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, 262, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v60 = objc_msgSend(v59, sel_domain);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v6 = v62;

    if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v6 == v63)
      goto LABEL_118;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      goto LABEL_119;
    __break(1u);
    goto LABEL_53;
  }
LABEL_10:
  v13 = v8;
  swift_retain();
  swift_retain();
  v168 = v4;
  if (_foundation_swift_url_feature_enabled())
  {
    v151 = v3;
    v167 = v7;
    v14 = v13;
    swift_retain();
    swift_retain();
    v15 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v15._countAndFlagsBits;
    v166 = v15;
    swift_bridgeObjectRetain();
    i = (int64_t)v14;
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v15._object;
    }
    else
    {
      object = (unint64_t)v15._object;
      if ((specialized BidirectionalCollection.last.getter(v15._countAndFlagsBits, (unint64_t)v15._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v166._countAndFlagsBits;
        object = (unint64_t)v166._object;
      }
    }
    v163._countAndFlagsBits = Set.init(minimumCapacity:)();
    v77 = specialized Set._Variant.insert(_:)(&v160, 0x2FuLL);
    v78 = v163._countAndFlagsBits;
    v79 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v79 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v79)
    {
      v155 = (uint64_t)v13;
      v163._countAndFlagsBits = countAndFlagsBits;
      v163._object = (void *)object;
      MEMORY[0x1E0C80A78](v77);
      v148 = (uint64_t)&v163;
      v149 = v78;
      swift_bridgeObjectRetain();
      v80 = v151;
      v81 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)&v147, countAndFlagsBits, object);
      v151 = v80;
      if (v82 == 1)
      {
        v83 = v163;
        swift_bridgeObjectRetain();
        v84 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v83._countAndFlagsBits, (unint64_t)v83._object, v78);
        v86 = v85;
        swift_bridgeObjectRelease();
      }
      else
      {
        v84 = (uint64_t)v81;
        v86 = v82;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v91 = (void *)i;
      v13 = (_QWORD *)v155;
      if (!v86)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v84 = 0;
        v86 = 0xE000000000000000;
        goto LABEL_72;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v84 = 0;
      v86 = 0xE000000000000000;
      v91 = (void *)i;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_72:
    swift_release();
    swift_release();

    v3 = v151;
    goto LABEL_73;
  }
LABEL_53:
  v65 = objc_msgSend(v13, sel__parameterString);
  if (v65)
  {
    v66 = v65;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v69 = v68;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v70 = objc_msgSend(v13, sel_path)) != 0)
    {
      v71 = v70;
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v74 = v73;

      v166._countAndFlagsBits = (uint64_t)v72;
      v166._object = v74;
      swift_bridgeObjectRetain();
      v75._countAndFlagsBits = 59;
      v75._object = (void *)0xE100000000000000;
      String.append(_:)(v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v76._countAndFlagsBits = (uint64_t)v67;
      v76._object = v69;
      String.append(_:)(v76);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v166._countAndFlagsBits = 59;
      v166._object = (void *)0xE100000000000000;
      v87._countAndFlagsBits = (uint64_t)v67;
      v87._object = v69;
      String.append(_:)(v87);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v84 = v166._countAndFlagsBits;
    v86 = (unint64_t)v166._object;
  }
  else
  {
    v88 = objc_msgSend(v13, sel_path);
    if (v88)
    {
      v89 = v88;
      v84 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v86 = v90;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v84 = 0;
      v86 = 0xE000000000000000;
    }
  }
LABEL_73:
  v92 = HIBYTE(v86) & 0xF;
  if ((v86 & 0x2000000000000000) == 0)
    v92 = v84 & 0xFFFFFFFFFFFFLL;
  if (v92)
  {
    v93 = MEMORY[0x186DA9F5C](v168);
    if (v93)
    {
      v94 = (void *)v93;
      swift_bridgeObjectRetain();
      v95 = v94;
      specialized String.withFileSystemRepresentation<A>(_:)(v84, v86, v84, (char *)v86, (__int128 *)v94);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_129;
  }
  swift_bridgeObjectRelease();
  v96 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v160 = MEMORY[0x1E0DEE9E0];
  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v99 = v98;
  v163._countAndFlagsBits = (uint64_t)v13;
  v163._object = v6;
  v164[0] = v7;
  lazy protocol witness table accessor for type URL and conformance URL();
  v100 = v13;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v166, (uint64_t)v97, v99);
  v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v103 = v102;
  v166._countAndFlagsBits = (uint64_t)v100;
  v166._object = v6;
  v167 = v7;
  v163 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v166, (uint64_t)v101, v103);
  v104 = v160;
  v105 = *(_QWORD *)(v160 + 16);
  v151 = v3;
  if (v105)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v96 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v106 = *(_QWORD *)(v104 + 64);
  v154 = v104 + 64;
  v107 = -1;
  v108 = -1 << *(_BYTE *)(v104 + 32);
  v150 = ~v108;
  if (-v108 < 64)
    v107 = ~(-1 << -(char)v108);
  v109 = v107 & v106;
  v153 = (unint64_t)(63 - v108) >> 6;
  v110 = &v167;
  v111 = v162;
  v112 = v164;
  v152 = v96 + 8;
  swift_bridgeObjectRetain();
  i = 0;
  v155 = MEMORY[0x1E0DEE9B8] + 8;
  if (v109)
    goto LABEL_85;
LABEL_86:
  v122 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_126;
  if (v122 >= v153)
    goto LABEL_112;
  v123 = *(_QWORD *)(v154 + 8 * v122);
  if (v123)
  {
LABEL_102:
    v168 = (v123 - 1) & v123;
    v121 = __clz(__rbit64(v123)) + (v122 << 6);
    for (i = v122; ; v121 = __clz(__rbit64(v109)) | (i << 6))
    {
      v125 = (uint64_t *)(*(_QWORD *)(v104 + 48) + 16 * v121);
      v127 = *v125;
      v126 = (void *)v125[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v104 + 56) + 40 * v121, (uint64_t)v110);
      v166._countAndFlagsBits = v127;
      v166._object = v126;
      v128 = *((_OWORD *)v110 + 1);
      v157 = *(_OWORD *)v110;
      v158 = v128;
      v159 = v110[4];
      v160 = v127;
      v161 = (uint64_t)v126;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v129 = v160;
      v130 = v161;
      outlined init with take of Any(v111, v112);
      outlined init with take of Any(v112, v165);
      outlined init with take of Any(v165, &v163);
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v130);
      v132 = v131;
      if ((v133 & 1) != 0)
      {
        v113 = v96[6];
        v114 = v110;
        v115 = v96;
        v116 = v112;
        v117 = v111;
        v118 = v104;
        v119 = (uint64_t *)(v113 + 16 * v131);
        swift_bridgeObjectRelease();
        *v119 = v129;
        v119[1] = v130;
        v104 = v118;
        v111 = v117;
        v112 = v116;
        v96 = v115;
        v110 = v114;
        v120 = (_OWORD *)(v96[7] + 32 * v132);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
        outlined init with take of Any(&v163, v120);
        v109 = v168;
        if (!v168)
          goto LABEL_86;
      }
      else
      {
        if (v96[2] >= v96[3])
          goto LABEL_124;
        *(_QWORD *)((char *)v152 + ((v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v131;
        v134 = (uint64_t *)(v96[6] + 16 * v131);
        *v134 = v129;
        v134[1] = v130;
        outlined init with take of Any(&v163, (_OWORD *)(v96[7] + 32 * v131));
        v135 = v96[2];
        v55 = __OFADD__(v135, 1);
        v136 = v135 + 1;
        if (v55)
          goto LABEL_125;
        v96[2] = v136;
        v109 = v168;
        if (!v168)
          goto LABEL_86;
      }
LABEL_85:
      v168 = (v109 - 1) & v109;
    }
  }
  v124 = i + 2;
  if (i + 2 >= v153)
    goto LABEL_112;
  v123 = *(_QWORD *)(v154 + 8 * v124);
  if (v123)
    goto LABEL_101;
  v124 = i + 3;
  if (i + 3 >= v153)
  {
LABEL_112:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v137 = objc_allocWithZone((Class)NSError);
    v138 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v139 = objc_msgSend(v137, sel_initWithDomain_code_userInfo_, v138, 4, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v140 = objc_msgSend(v139, sel_domain);
    v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
    v143 = v142;

    if (v141 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v143 == v144)
      goto LABEL_118;
    v146 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v146 & 1) == 0)
    {
      __break(1u);
LABEL_118:
      swift_bridgeObjectRelease_n();
    }
LABEL_119:
    swift_willThrow();
    return;
  }
  v123 = *(_QWORD *)(v154 + 8 * v124);
  if (v123)
  {
LABEL_101:
    v122 = v124;
    goto LABEL_102;
  }
  v124 = i + 4;
  if (i + 4 >= v153)
    goto LABEL_112;
  v123 = *(_QWORD *)(v154 + 8 * v124);
  if (v123)
    goto LABEL_101;
  v124 = i + 5;
  if (i + 5 >= v153)
    goto LABEL_112;
  v123 = *(_QWORD *)(v154 + 8 * v124);
  if (v123)
    goto LABEL_101;
  v124 = i + 6;
  if (i + 6 >= v153)
    goto LABEL_112;
  v123 = *(_QWORD *)(v154 + 8 * v124);
  if (v123)
    goto LABEL_101;
  v124 = i + 7;
  if (i + 7 >= v153)
    goto LABEL_112;
  v123 = *(_QWORD *)(v154 + 8 * v124);
  if (v123)
    goto LABEL_101;
  while (1)
  {
    v122 = v124 + 1;
    if (__OFADD__(v124, 1))
      break;
    if (v122 >= v153)
      goto LABEL_112;
    v123 = *(_QWORD *)(v154 + 8 * v122);
    ++v124;
    if (v123)
      goto LABEL_102;
  }
LABEL_128:
  __break(1u);
LABEL_129:
  LODWORD(v149) = 0;
  v148 = 48;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Bool __swiftcall _FileManagerImpl.isDeletableFile(atPath:)(Swift::String atPath)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t Path;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  unint64_t v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  int v27;
  Swift::Bool result;
  _BYTE v29[16];
  stat_optional v30;
  stat_optional v31;
  _BYTE v32[16];
  int v33;
  _BYTE v34[4];
  unsigned __int16 v35;

  v2 = v1;
  object = atPath._object;
  countAndFlagsBits = atPath._countAndFlagsBits;
  swift_bridgeObjectRetain();
  Path = String._deletingLastPathComponent()(countAndFlagsBits, (unint64_t)object);
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = Path & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v9 = (void *)MEMORY[0x186DA9F5C](v2);
    if (!v9)
      goto LABEL_21;
    v10 = v9;
    v11 = objc_msgSend(v9, sel_currentDirectoryPath);

    Path = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v7 = v12;

  }
  v13 = (void *)MEMORY[0x186DA9F5C](v2);
  if (!v13)
    goto LABEL_21;
  v14 = v13;
  v15 = objc_msgSend(v13, sel_isWritableFileAtPath_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  if ((v15 & 1) != 0)
  {
    v16 = MEMORY[0x186DA9F5C](v2);
    if (!v16)
      goto LABEL_21;
    v17 = (void *)v16;
    v18._countAndFlagsBits = Path;
    v18._object = (void *)v7;
    NSFileManager._fileStat(_:)(&v30, v18);

    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)&v30, (uint64_t)v34, &demangling cache variable for type metadata for stat?);
    if (_sSo4statVSgWOg((uint64_t)v34) != 1)
    {
      v19 = v35;
      v20 = S_ISVTX.getter() & v19;
      outlined init with copy of _FileManagerImpl(v2, (uint64_t)v29);
      if (v20)
      {
        v21 = (void *)MEMORY[0x186DA9F5C](v29);
        if (!v21)
          goto LABEL_21;
        v22 = v21;
        v23 = objc_msgSend(v21, sel_fileExistsAtPath_, String._bridgeToObjectiveCImpl()());

        swift_unknownObjectRelease();
        outlined destroy of _FileManagerImpl((uint64_t)v29);
        if ((v23 & 1) != 0)
        {
          v24 = MEMORY[0x186DA9F5C](v2);
          if (v24)
          {
            v25 = (void *)v24;
            v26._countAndFlagsBits = countAndFlagsBits;
            v26._object = object;
            NSFileManager._fileStat(_:)(&v31, v26);

            outlined init with take of LocalePreferences?((uint64_t)&v31, (uint64_t)v32, &demangling cache variable for type metadata for stat?);
            if (_sSo4statVSgWOg((uint64_t)v32) != 1)
            {
              v27 = v33;
              return v27 == getuid();
            }
            return 0;
          }
LABEL_21:
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      else
      {
        outlined destroy of _FileManagerImpl((uint64_t)v29);
      }
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t result;
  _QWORD v10[2];
  unsigned int v11;
  BOOL v12;

  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v10[0] = a1;
      v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v8 = a4(v10);
      v6 = v8 == 0;
      if (v8)
      {
        v7 = *(_DWORD *)(v8 + 16);
        goto LABEL_9;
      }
LABEL_8:
      v7 = 0;
      goto LABEL_9;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = a4((_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32));
      v6 = v5 == 0;
      if (v5)
      {
        v6 = 0;
        v7 = *(_DWORD *)(v5 + 16);
LABEL_9:
        LOBYTE(v10[0]) = v6;
        return v7 | ((unint64_t)v6 << 32);
      }
      goto LABEL_8;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  result = _StringGuts._slowWithCString<A>(_:)();
  if (!v4)
  {
    v7 = v11;
    v6 = v12;
    goto LABEL_9;
  }
  return result;
}

id specialized _readFileAttributePrimitive<A>(_:as:)(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  char v4;
  __int128 *v5;
  uint64_t *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  char *v16;
  void (*v17)(char *, __n128);
  uint64_t v18;
  char v19;
  __n128 v20;
  char *v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  _QWORD *v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  __n128 v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  char *v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  _QWORD v49[2];
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  __int128 v56[2];
  uint64_t v57;
  _BYTE v58[32];
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];

  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v59, &demangling cache variable for type metadata for Any?);
  if (!v60)
  {
    v6 = &demangling cache variable for type metadata for Any?;
    v7 = &v59;
    goto LABEL_13;
  }
  outlined init with take of Any(&v59, v62);
  outlined init with copy of Any((uint64_t)v62, (uint64_t)&v59);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v1 = *(id *)&v56[0];
    v2 = objc_msgSend(v1, sel_unsignedIntegerValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v2);
    v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
    {
      v5 = v62;
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
      return v2;
    }
  }
  outlined init with copy of Any((uint64_t)v62, (uint64_t)&v59);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any((uint64_t)v62, (uint64_t)v58);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(v56, (uint64_t)&v59);
      v8 = v60;
      v9 = v61;
      v10 = __swift_project_boxed_opaque_existential_1(&v59, v60);
      v11 = v49;
      v12 = *(_QWORD **)(v8 - 8);
      v13 = v12[8];
      v14 = MEMORY[0x1E0C80A78](v10);
      v15 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      v16 = (char *)v49 - v15;
      v17 = (void (*)(char *, __n128))v12[2];
      v17((char *)v49 - v15, v14);
      v18 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v19 = v18;
      v55 = v49;
      v20 = MEMORY[0x1E0C80A78](v18);
      v21 = (char *)v49 - v15;
      ((void (*)(char *, char *, uint64_t, __n128))v17)((char *)v49 - v15, (char *)v49 - v15, v8, v20);
      if ((v19 & 1) != 0)
      {
        v54 = (char *)v49 - v15;
        v52 = v49;
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v53 = v9;
        v23 = AssociatedTypeWitness;
        v51 = v49;
        MEMORY[0x1E0C80A78](AssociatedTypeWitness);
        v24 = v12;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v26 = MEMORY[0x186DA5E34](&unk_18206D478, 256, v23, AssociatedConformanceWitness);
        v50 = v49;
        MEMORY[0x1E0C80A78](v26);
        v27 = (char *)v49 - v15;
        v28 = v53;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        v29 = dispatch thunk of static Comparable.< infix(_:_:)();
        v30 = (void (*)(char *, uint64_t))v12[1];
        v30(v27, v8);
        v30(v21, v8);
        if ((v29 & 1) != 0)
        {
          v30(v54, v8);
LABEL_32:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
          return 0;
        }
        v51 = v24;
        v11 = v52;
        v9 = v28;
        v16 = v54;
      }
      else
      {
        v51 = v12;
        v30 = (void (*)(char *, uint64_t))v12[1];
        v30((char *)v49 - v15, v8);
      }
      v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v32 = MEMORY[0x1E0C80A78](v31);
      ((void (*)(char *, char *, uint64_t, __n128))v17)((char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v8, v32);
      if (v31 <= 63)
      {
        v30((char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        goto LABEL_19;
      }
      v54 = v16;
      *(_QWORD *)&v56[0] = -1;
      v34 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v34 & 1) != 0)
      {
        if (v35 <= 64)
        {
          v52 = v11;
          v36 = swift_getAssociatedTypeWitness();
          v53 = v9;
          v37 = v36;
          v49[1] = v49;
          MEMORY[0x1E0C80A78](v36);
          v38 = swift_getAssociatedConformanceWitness();
          v39 = MEMORY[0x186DA5E34](&unk_18206D478, 256, v37, v38);
          MEMORY[0x1E0C80A78](v39);
          v50 = v49;
          v40 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          v41 = dispatch thunk of static Comparable.> infix(_:_:)();
          v42 = ((uint64_t (*)(char *, uint64_t))v30)((char *)v49 - v40, v8);
          v43 = *(_QWORD *)&v56[0];
          v44 = MEMORY[0x1E0C80A78](v42);
          v45 = (char *)v49 - v40;
          ((void (*)(char *, char *, uint64_t, __n128))v51[4])((char *)v49 - v40, (char *)v49 - v40, v8, v44);
          if ((v41 & 1) == 0)
          {
            v30(v45, v8);
            v16 = v54;
            goto LABEL_19;
          }
          v46 = dispatch thunk of BinaryInteger._lowWord.getter();
          v30(v45, v8);
          v16 = v54;
          if (v43 >= v46)
          {
LABEL_19:
            v2 = (id)dispatch thunk of BinaryInteger._lowWord.getter();
            v30(v16, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
            v5 = &v59;
            goto LABEL_20;
          }
LABEL_31:
          v30(v16, v8);
          goto LABEL_32;
        }
      }
      else if (v35 <= 64)
      {
        v48 = dispatch thunk of BinaryInteger._lowWord.getter();
        v30((char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        v16 = v54;
        if (*(_QWORD *)&v56[0] >= v48)
          goto LABEL_19;
        goto LABEL_31;
      }
      MEMORY[0x1E0C80A78](v35);
      lazy protocol witness table accessor for type UInt and conformance UInt();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v47 = dispatch thunk of static Comparable.< infix(_:_:)();
      v30((char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      v30((char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      v16 = v54;
      if ((v47 & 1) == 0)
        goto LABEL_19;
      goto LABEL_31;
    }
    v57 = 0;
    memset(v56, 0, sizeof(v56));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    v6 = (uint64_t *)&demangling cache variable for type metadata for BinaryInteger?;
    v7 = v56;
LABEL_13:
    outlined destroy of Any?((uint64_t)v7, v6);
    return 0;
  }
  BYTE8(v56[0]) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  return *(id *)&v56[0];
}

unint64_t NSFileProtectionType.intValue.getter(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionComplete"));
  v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v4 == v5)
  {
    v9 = 1;
LABEL_12:
    swift_bridgeObjectRelease_n();
    v8 = 0;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    v8 = 0;
    v9 = 1;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  v10 = (void *)String._bridgeToObjectiveCImpl()();
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    v9 = 2;
LABEL_11:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
    goto LABEL_15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionCompleteUnlessOpen"));
  v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    v9 = 2;
    goto LABEL_12;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_15:
    v8 = 0;
    v9 = 2;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  v22 = (void *)String._bridgeToObjectiveCImpl()();
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    v9 = 3;
    goto LABEL_11;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
    goto LABEL_24;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionCompleteUntilFirstUserAuthentication"));
  v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v30 == v31)
  {
    v9 = 3;
    goto LABEL_12;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
LABEL_24:
    v8 = 0;
    v9 = 3;
    return v9 | ((unint64_t)(v8 & 1) << 32);
  }
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionNone"));
  v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v35 == v36)
  {
    v9 = 4;
    goto LABEL_12;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
  {
    v8 = 0;
    v9 = 4;
  }
  else
  {
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileProtectionCompleteWhenUserInactive"));
    v40 = v39;
    if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v40 == v41)
      v42 = 1;
    else
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0)
      v9 = 7;
    else
      v9 = 0;
    v8 = v42 ^ 1;
  }
  return v9 | ((unint64_t)(v8 & 1) << 32);
}

uint64_t _FileManagerImpl._fileExists(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int isStackAllocationSafe;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char v9;
  char v10;
  _BOOL4 v11;
  int v12;
  const char *v13;
  char v14;
  char v15;
  int v16;
  int st_mode;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  stat v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (v5 < -1)
    goto LABEL_24;
  v6 = v5 + 1;
  if (v5 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v8 = (char *)&v22 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0 || (memset(&v23, 0, 28), memset(&v23.st_atimespec, 0, 112), stat(v8, &v23)))
    {
      v11 = 0;
      v12 = 0;
    }
    else
    {
      st_mode = v23.st_mode;
      v19 = S_IFMT.getter() & st_mode;
      v11 = v19 == (unsigned __int16)S_IFDIR.getter();
      v12 = 1;
    }
  }
  else
  {
    v13 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v6, 1, a1, a2);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0 || (memset(&v23, 0, 28), memset(&v23.st_atimespec, 0, 112), stat(v13, &v23)))
    {
      v11 = 0;
      v12 = 0;
    }
    else
    {
      v20 = v23.st_mode;
      v21 = S_IFMT.getter() & v20;
      v11 = v21 == (unsigned __int16)S_IFDIR.getter();
      v12 = 1;
    }
    MEMORY[0x186DA9E78](v13, -1, -1);
  }
  if (v11)
    v16 = 256;
  else
    v16 = 0;
  return v16 | v12;
}

BOOL _FileManagerImpl._fileAccessibleForMode(_:_:)(uint64_t a1, unint64_t a2, int a3)
{
  Swift::Int isStackAllocationSafe;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  char v12;
  _BOOL8 v13;
  const char *v14;
  char v15;
  char v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (v7 < -1)
    goto LABEL_19;
  v8 = v7 + 1;
  if (v7 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v10 = (char *)v18 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v8, 1, a1, a2);
    v12 = v11;
    swift_bridgeObjectRelease();
    return (v12 & 1) == 0 && access(v10, a3) == 0;
  }
  else
  {
    v14 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v8, 1, a1, a2);
    v16 = v15;
    swift_bridgeObjectRelease();
    v13 = (v16 & 1) == 0 && access(v14, a3) == 0;
    MEMORY[0x186DA9E78](v14, -1, -1);
  }
  return v13;
}

uint64_t _sSo4statVSgWOg(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _FileManagerImpl._extendedAttribute(_:at:followSymlinks:)(char *name, char *path, char a3)
{
  int v3;
  _OWORD *v4;
  _BOOL4 v7;
  ssize_t v8;
  size_t v9;
  void *v10;
  void *v11;
  ssize_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __int128 *v67;
  _OWORD *v68;
  __int128 *v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  _OWORD *v74;
  unint64_t i;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __int128 *v106;
  _OWORD *v107;
  __int128 *v108;
  _OWORD *v109;
  _OWORD *v110;
  uint64_t v111;
  uint64_t *v112;
  _OWORD *v113;
  unint64_t j;
  int64_t v115;
  unint64_t v116;
  int64_t v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v139;
  Swift::String v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  int64_t v146;
  int64_t v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD v153[5];
  __int128 v154;
  _QWORD v155[4];
  _OWORD v156[2];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;

  LODWORD(v4) = v3;
  v7 = (a3 & 1) == 0;
  v8 = getxattr(path, name, 0, 0, 0, v7);
  if (v8 != -1)
  {
    v9 = v8;
    if (v8 < 1)
      return 0;
    v10 = malloc(v8);
    if (!v10)
      goto LABEL_131;
    v11 = v10;
    v12 = getxattr(path, name, v10, v9, 0, v7);
    if (v12 != -1)
    {
      v13 = v12;
      if (v12 >= 1)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v14 = (_QWORD *)__DataStorage.init(bytes:length:copy:deallocator:offset:)((unint64_t)v11, v13, 0, (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter, 0, 0);
        return specialized Data._Representation.init(_:count:)(v14, v13);
      }
      free(v11);
      return 0;
    }
    free(v11);
    v25 = String.init(cString:)();
    v27 = v26;
    LODWORD(v4) = MEMORY[0x186DA4118]();
    v152 = MEMORY[0x1E0DEE9E0];
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v30 = v29;
    *(_QWORD *)&v154 = v25;
    *((_QWORD *)&v154 + 1) = v27;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v157, (uint64_t)v28, v30);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v33 = v32;
    URL.init(_fileManagerFailableFileURLWithPath:)(v25, v27, (uint64_t)&v154);
    if ((_QWORD)v154)
    {
      v153[1] = v155[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v157 = 0u;
      v158 = 0u;
      v159 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v157, (uint64_t)v31, v33);
    v160 = v152;
    swift_bridgeObjectRetain();
    if ((_DWORD)v4 == 102)
    {
LABEL_25:
      v48 = 256;
      goto LABEL_79;
    }
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v51 = v50;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v52 = (int)POSIXErrorCode.rawValue.getter();
      v53 = objc_allocWithZone((Class)NSError);
      v54 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v55 = objc_msgSend(v53, sel_initWithDomain_code_userInfo_, v54, v52, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v56 = objc_msgSend(v55, sel_domain);
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;

      if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v59 == v60)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v61 & 1) == 0)
        {
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
      }
      *(_QWORD *)&v154 = v55;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v157, (uint64_t)v49, v51);
      v48 = 263;
      switch((int)v4)
      {
        case 1:
        case 13:
          v48 = 257;
          break;
        case 2:
          v48 = 260;
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_25;
        case 27:
          goto LABEL_79;
        default:
          goto LABEL_76;
      }
      goto LABEL_79;
    }
LABEL_132:
    *(_QWORD *)&v157 = 0;
    *((_QWORD *)&v157 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v157 = 0xD000000000000014;
    *((_QWORD *)&v157 + 1) = 0x8000000182306980;
    LODWORD(v154) = (_DWORD)v4;
    v140._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v140);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181C7CC74);
  }
  v16 = String.init(cString:)();
  v18 = v17;
  LODWORD(v4) = MEMORY[0x186DA4118]();
  v151 = MEMORY[0x1E0DEE9E0];
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v21 = v20;
  *(_QWORD *)&v154 = v16;
  *((_QWORD *)&v154 + 1) = v18;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v157, (uint64_t)v19, v21);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v24 = v23;
  URL.init(_fileManagerFailableFileURLWithPath:)(v16, v18, (uint64_t)&v154);
  if ((_QWORD)v154)
  {
    v153[1] = v155[0];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v157 = 0u;
    v158 = 0u;
    v159 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v157, (uint64_t)v22, v24);
  v160 = v151;
  swift_bridgeObjectRetain();
  if ((_DWORD)v4 == 102)
  {
LABEL_13:
    v34 = 256;
  }
  else
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_132;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v37 = v36;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v38 = (int)POSIXErrorCode.rawValue.getter();
    v39 = objc_allocWithZone((Class)NSError);
    v40 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v41 = objc_msgSend(v39, sel_initWithDomain_code_userInfo_, v40, v38, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v42 = objc_msgSend(v41, sel_domain);
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v45 == v46)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0)
      {
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
    }
    *(_QWORD *)&v154 = v41;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v157, (uint64_t)v35, v37);
    v34 = 263;
    switch((int)v4)
    {
      case 1:
      case 13:
        v34 = 257;
        break;
      case 2:
        v34 = 260;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_13;
      case 27:
        break;
      default:
        if ((_DWORD)v4 != 63)
          goto LABEL_13;
        v34 = 258;
        break;
    }
  }
  v62 = v160;
  v141 = v34;
  if (*(_QWORD *)(v160 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v63 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v63 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v143 = v62 + 64;
  v64 = -1;
  v65 = -1 << *(_BYTE *)(v62 + 32);
  if (-v65 < 64)
    v64 = ~(-1 << -(char)v65);
  v66 = v64 & *(_QWORD *)(v62 + 64);
  v145 = (unint64_t)(63 - v65) >> 6;
  v67 = &v158;
  v68 = &v153[1];
  v4 = v155;
  swift_bridgeObjectRetain();
  v147 = 0;
  if (v66)
    goto LABEL_44;
LABEL_45:
  v76 = v147 + 1;
  if (__OFADD__(v147, 1))
  {
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  if (v76 < v145)
  {
    v77 = *(_QWORD *)(v143 + 8 * v76);
    v78 = v147 + 1;
    if (v77)
      goto LABEL_64;
    v78 = v147 + 2;
    if (v147 + 2 < v145)
    {
      v77 = *(_QWORD *)(v143 + 8 * v78);
      if (v77)
        goto LABEL_64;
      v78 = v147 + 3;
      if (v147 + 3 < v145)
      {
        v77 = *(_QWORD *)(v143 + 8 * v78);
        if (v77)
          goto LABEL_64;
        v78 = v147 + 4;
        if (v147 + 4 < v145)
        {
          v77 = *(_QWORD *)(v143 + 8 * v78);
          if (v77)
            goto LABEL_64;
          v78 = v147 + 5;
          if (v147 + 5 < v145)
          {
            v77 = *(_QWORD *)(v143 + 8 * v78);
            if (v77)
              goto LABEL_64;
            v78 = v147 + 6;
            if (v147 + 6 < v145)
            {
              v77 = *(_QWORD *)(v143 + 8 * v78);
              if (v77)
                goto LABEL_64;
              v79 = v147 + 7;
              if (v147 + 7 < v145)
              {
                v77 = *(_QWORD *)(v143 + 8 * v79);
                if (!v77)
                {
                  while (1)
                  {
                    v78 = v79 + 1;
                    if (__OFADD__(v79, 1))
                      goto LABEL_127;
                    if (v78 >= v145)
                      goto LABEL_70;
                    v77 = *(_QWORD *)(v143 + 8 * v78);
                    ++v79;
                    if (v77)
                      goto LABEL_64;
                  }
                }
                v78 = v147 + 7;
LABEL_64:
                v147 = v78;
                v149 = (v77 - 1) & v77;
                for (i = __clz(__rbit64(v77)) + (v78 << 6); ; i = __clz(__rbit64(v66)) | (v147 << 6))
                {
                  v80 = (uint64_t *)(*(_QWORD *)(v62 + 48) + 16 * i);
                  v82 = *v80;
                  v81 = v80[1];
                  outlined init with copy of AnyHashable(*(_QWORD *)(v62 + 56) + 40 * i, (uint64_t)v67);
                  *(_QWORD *)&v157 = v82;
                  *((_QWORD *)&v157 + 1) = v81;
                  swift_bridgeObjectRetain();
                  swift_dynamicCast();
                  v84 = v82;
                  v83 = v81;
                  outlined init with take of Any(v68, v4);
                  outlined init with take of Any(v4, v156);
                  outlined init with take of Any(v156, &v154);
                  v85 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v81);
                  v86 = v85;
                  if ((v87 & 1) != 0)
                  {
                    v69 = v67;
                    v70 = v4;
                    v71 = v68;
                    v72 = v62;
                    v73 = (uint64_t *)(v63[6] + 16 * v85);
                    swift_bridgeObjectRelease();
                    *v73 = v84;
                    v73[1] = v83;
                    v62 = v72;
                    v68 = v71;
                    v4 = v70;
                    v67 = v69;
                    v74 = (_OWORD *)(v63[7] + 32 * v86);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
                    outlined init with take of Any(&v154, v74);
                    v66 = v149;
                    if (!v149)
                      goto LABEL_45;
                  }
                  else
                  {
                    if (v63[2] >= v63[3])
                    {
                      __break(1u);
LABEL_122:
                      __break(1u);
                      goto LABEL_123;
                    }
                    *(_QWORD *)((char *)v63 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v85;
                    v88 = (uint64_t *)(v63[6] + 16 * v85);
                    *v88 = v84;
                    v88[1] = v83;
                    outlined init with take of Any(&v154, (_OWORD *)(v63[7] + 32 * v85));
                    v89 = v63[2];
                    v90 = __OFADD__(v89, 1);
                    v91 = v89 + 1;
                    if (v90)
                      goto LABEL_122;
                    v63[2] = v91;
                    v66 = v149;
                    if (!v149)
                      goto LABEL_45;
                  }
LABEL_44:
                  v149 = (v66 - 1) & v66;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_70:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v92 = objc_allocWithZone((Class)NSError);
  v93 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v92, sel_initWithDomain_code_userInfo_, v93, v141, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v94 = objc_msgSend(v4, sel_domain);
  v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
  v97 = v96;

  if (v95 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v97 == v98)
    goto LABEL_119;
  v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v100 & 1) != 0)
    return swift_willThrow();
  __break(1u);
LABEL_76:
  if ((_DWORD)v4 != 63)
    goto LABEL_25;
  v48 = 258;
LABEL_79:
  v142 = v48;
  v101 = v160;
  if (*(_QWORD *)(v160 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v102 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v102 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v144 = v101 + 64;
  v103 = -1;
  v104 = -1 << *(_BYTE *)(v101 + 32);
  if (-v104 < 64)
    v103 = ~(-1 << -(char)v104);
  v105 = v103 & *(_QWORD *)(v101 + 64);
  v146 = (unint64_t)(63 - v104) >> 6;
  v106 = &v158;
  v107 = &v153[1];
  v4 = v155;
  swift_bridgeObjectRetain();
  v148 = 0;
  if (v105)
    goto LABEL_87;
LABEL_88:
  v115 = v148 + 1;
  if (__OFADD__(v148, 1))
  {
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  if (v115 < v146)
  {
    v116 = *(_QWORD *)(v144 + 8 * v115);
    v117 = v148 + 1;
    if (v116)
      goto LABEL_107;
    v117 = v148 + 2;
    if (v148 + 2 < v146)
    {
      v116 = *(_QWORD *)(v144 + 8 * v117);
      if (v116)
        goto LABEL_107;
      v117 = v148 + 3;
      if (v148 + 3 < v146)
      {
        v116 = *(_QWORD *)(v144 + 8 * v117);
        if (v116)
          goto LABEL_107;
        v117 = v148 + 4;
        if (v148 + 4 < v146)
        {
          v116 = *(_QWORD *)(v144 + 8 * v117);
          if (v116)
            goto LABEL_107;
          v117 = v148 + 5;
          if (v148 + 5 < v146)
          {
            v116 = *(_QWORD *)(v144 + 8 * v117);
            if (v116)
              goto LABEL_107;
            v117 = v148 + 6;
            if (v148 + 6 < v146)
            {
              v116 = *(_QWORD *)(v144 + 8 * v117);
              if (!v116)
              {
                v118 = v148 + 7;
                if (v148 + 7 < v146)
                {
                  v116 = *(_QWORD *)(v144 + 8 * v118);
                  if (v116)
                  {
                    v117 = v148 + 7;
                    goto LABEL_107;
                  }
                  while (1)
                  {
                    v117 = v118 + 1;
                    if (__OFADD__(v118, 1))
                      goto LABEL_129;
                    if (v117 >= v146)
                      goto LABEL_113;
                    v116 = *(_QWORD *)(v144 + 8 * v117);
                    ++v118;
                    if (v116)
                      goto LABEL_107;
                  }
                }
                goto LABEL_113;
              }
LABEL_107:
              v148 = v117;
              v150 = (v116 - 1) & v116;
              for (j = __clz(__rbit64(v116)) + (v117 << 6); ; j = __clz(__rbit64(v105)) | (v148 << 6))
              {
                v119 = (uint64_t *)(*(_QWORD *)(v101 + 48) + 16 * j);
                v121 = *v119;
                v120 = v119[1];
                outlined init with copy of AnyHashable(*(_QWORD *)(v101 + 56) + 40 * j, (uint64_t)v106);
                *(_QWORD *)&v157 = v121;
                *((_QWORD *)&v157 + 1) = v120;
                swift_bridgeObjectRetain();
                swift_dynamicCast();
                v123 = v121;
                v122 = v120;
                outlined init with take of Any(v107, v4);
                outlined init with take of Any(v4, v156);
                outlined init with take of Any(v156, &v154);
                v124 = specialized __RawDictionaryStorage.find<A>(_:)(v123, v120);
                v125 = v124;
                if ((v126 & 1) != 0)
                {
                  v108 = v106;
                  v109 = v4;
                  v110 = v107;
                  v111 = v101;
                  v112 = (uint64_t *)(v102[6] + 16 * v124);
                  swift_bridgeObjectRelease();
                  *v112 = v123;
                  v112[1] = v122;
                  v101 = v111;
                  v107 = v110;
                  v4 = v109;
                  v106 = v108;
                  v113 = (_OWORD *)(v102[7] + 32 * v125);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
                  outlined init with take of Any(&v154, v113);
                  v105 = v150;
                  if (!v150)
                    goto LABEL_88;
                }
                else
                {
                  if (v102[2] >= v102[3])
                    goto LABEL_124;
                  *(_QWORD *)((char *)v102 + ((v124 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v124;
                  v127 = (uint64_t *)(v102[6] + 16 * v124);
                  *v127 = v123;
                  v127[1] = v122;
                  outlined init with take of Any(&v154, (_OWORD *)(v102[7] + 32 * v124));
                  v128 = v102[2];
                  v90 = __OFADD__(v128, 1);
                  v129 = v128 + 1;
                  if (v90)
                    goto LABEL_125;
                  v102[2] = v129;
                  v105 = v150;
                  if (!v150)
                    goto LABEL_88;
                }
LABEL_87:
                v150 = (v105 - 1) & v105;
              }
            }
          }
        }
      }
    }
  }
LABEL_113:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v130 = objc_allocWithZone((Class)NSError);
  v131 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v132 = objc_msgSend(v130, sel_initWithDomain_code_userInfo_, v131, v142, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v133 = objc_msgSend(v132, sel_domain);
  v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
  v136 = v135;

  if (v134 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v136 == v137)
    goto LABEL_119;
  v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v139 & 1) == 0)
  {
    __break(1u);
LABEL_119:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  return swift_willThrow();
}

void closure #1 in _FileManagerImpl.attributesOfItem(atPath:)(const char *a1@<X0>, uint64_t a2@<X1>, uid_t *p_st_uid@<X2>, _QWORD *a4@<X8>)
{
  void *v4;
  uint64_t v5;
  _BYTE *v9;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  int st_mode;
  off_t st_size;
  __darwin_time_t tv_sec;
  uint64_t tv_nsec;
  __darwin_time_t v28;
  uint64_t v29;
  NSFileAttributeType v30;
  uint64_t v31;
  id v32;
  __CFString *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  __CFString *v38;
  __CFString *v39;
  id v40;
  __CFString *v41;
  id v42;
  __CFString *v43;
  id v44;
  __CFString *v45;
  char **v46;
  id v47;
  uint64_t v48;
  id v49;
  __CFString *v50;
  __CFString *v51;
  id v52;
  __CFString *v53;
  id v54;
  _QWORD *v55;
  uint64_t j;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  passwd *v63;
  uint64_t v64;
  uint64_t v65;
  group *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  uid_t *v93;
  _OWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  _OWORD *v98;
  unint64_t v99;
  int64_t v100;
  unint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t *v104;
  __darwin_ino64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  id v117;
  id v118;
  id v119;
  void *v120;
  void *v121;
  void *v122;
  char v124;
  char v125;
  _UNKNOWN **v126;
  unint64_t v127;
  id v128;
  __CFString *v129;
  id v130;
  id v131;
  __CFString *v132;
  id v133;
  id v134;
  __CFString *v135;
  id v136;
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  id v141;
  char v142;
  uint64_t v143;
  char v144;
  void *v145;
  Swift::Int v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  void *v186;
  uint64_t v187;
  id v188;
  char v189;
  id v190;
  __CFString *v191;
  id v192;
  __CFString *v193;
  char v194;
  id v195;
  int v196;
  void *v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _OWORD *v207;
  _OWORD *v208;
  _OWORD *v209;
  _OWORD *v210;
  _OWORD *v211;
  _OWORD *v212;
  uint64_t v213;
  uint64_t *v214;
  _OWORD *v215;
  unint64_t i;
  int64_t v217;
  unint64_t v218;
  int64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  uint64_t v233;
  id v234;
  id v235;
  id v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v241;
  void *v242;
  id v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  int v247;
  int v248;
  unint64_t v249;
  void *v250;
  void *v251;
  uint64_t v252;
  __CFString *v253;
  char v254;
  Swift::String v255;
  uint64_t v256;
  __CFString *v257;
  void *v258;
  uint64_t st_rdev;
  int v260;
  uid_t *v261;
  _QWORD *v262;
  __uint32_t st_flags;
  _BYTE *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  id v268;
  uint64_t st_nlink;
  uint64_t st_dev;
  int64_t v271;
  int64_t v272;
  int64_t st_ino;
  uint64_t v274;
  uint64_t v275;
  uint64_t st_uid;
  gid_t v277[2];
  gid_t v278[2];
  gid_t v279[2];
  gid_t v280[2];
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _OWORD v286[2];
  uint64_t v287;
  _OWORD v288[2];
  uint64_t v289;
  _BYTE v290[32];
  uint64_t v291;
  _OWORD v292[2];
  stat v293;
  _QWORD *v294;
  _OWORD v295[2];
  uint64_t v296;

  v9 = v290;
  v296 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *(_QWORD *)v290 = MEMORY[0x1E0DEE9E0];
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v20 = v19;
    *(_QWORD *)&v286[0] = a2;
    *((_QWORD *)&v286[0] + 1) = p_st_uid;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v293, (uint64_t)v18, v20);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v23 = v22;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, (unint64_t)p_st_uid, (uint64_t)v286);
    if (*(_QWORD *)&v286[0])
    {
      v294 = *(_QWORD **)&v286[0];
      v295[0] = *(_OWORD *)((char *)v286 + 8);
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      memset(&v293, 0, 40);
    }
    specialized Dictionary.subscript.setter((uint64_t)&v293, (uint64_t)v21, v23);
    v86 = *(_QWORD *)v290;
    if (*(_QWORD *)(*(_QWORD *)v290 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v87 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v87 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v274 = v86 + 64;
    v88 = -1;
    v89 = -1 << *(_BYTE *)(v86 + 32);
    v267 = ~v89;
    if (-v89 < 64)
      v88 = ~(-1 << -(char)v89);
    v90 = v88 & *(_QWORD *)(v86 + 64);
    p_st_uid = &v293.st_uid;
    v91 = (_OWORD *)((char *)v295 + 8);
    v92 = &v286[1];
    v271 = (unint64_t)(63 - v89) >> 6;
    swift_bridgeObjectRetain();
    *(_QWORD *)v278 = 0;
    st_uid = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      if (v90)
      {
        v282 = (v90 - 1) & v90;
        v99 = __clz(__rbit64(v90)) | (*(_QWORD *)v278 << 6);
      }
      else
      {
        v100 = *(_QWORD *)v278 + 1;
        if (__OFADD__(*(_QWORD *)v278, 1))
          goto LABEL_189;
        if (v100 >= v271)
        {
LABEL_64:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v115 = objc_allocWithZone((Class)NSError);
          v116 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v117 = objc_msgSend(v115, sel_initWithDomain_code_userInfo_, v116, 256, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v118 = objc_msgSend(v117, sel_domain);
          v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
          v121 = v120;

          if (v119 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            || v121 != v122)
          {
            v69 = v122;
            v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v124 & 1) == 0)
            {
              __break(1u);
              goto LABEL_70;
            }
LABEL_167:
            swift_willThrow();
            return;
          }
LABEL_166:
          swift_bridgeObjectRelease_n();
          goto LABEL_167;
        }
        v101 = *(_QWORD *)(v274 + 8 * v100);
        v102 = *(_QWORD *)v278 + 1;
        if (!v101)
        {
          v102 = *(_QWORD *)v278 + 2;
          if (*(_QWORD *)v278 + 2 >= v271)
            goto LABEL_64;
          v101 = *(_QWORD *)(v274 + 8 * v102);
          if (!v101)
          {
            v102 = *(_QWORD *)v278 + 3;
            if (*(_QWORD *)v278 + 3 >= v271)
              goto LABEL_64;
            v101 = *(_QWORD *)(v274 + 8 * v102);
            if (!v101)
            {
              v102 = *(_QWORD *)v278 + 4;
              if (*(_QWORD *)v278 + 4 >= v271)
                goto LABEL_64;
              v101 = *(_QWORD *)(v274 + 8 * v102);
              if (!v101)
              {
                v102 = *(_QWORD *)v278 + 5;
                if (*(_QWORD *)v278 + 5 >= v271)
                  goto LABEL_64;
                v101 = *(_QWORD *)(v274 + 8 * v102);
                if (!v101)
                {
                  v102 = *(_QWORD *)v278 + 6;
                  if (*(_QWORD *)v278 + 6 >= v271)
                    goto LABEL_64;
                  v101 = *(_QWORD *)(v274 + 8 * v102);
                  if (!v101)
                  {
                    v103 = *(_QWORD *)v278 + 7;
                    if (*(_QWORD *)v278 + 7 >= v271)
                      goto LABEL_64;
                    v101 = *(_QWORD *)(v274 + 8 * v103);
                    if (!v101)
                    {
                      while (1)
                      {
                        v102 = v103 + 1;
                        if (__OFADD__(v103, 1))
                          break;
                        if (v102 >= v271)
                          goto LABEL_64;
                        v101 = *(_QWORD *)(v274 + 8 * v102);
                        ++v103;
                        if (v101)
                          goto LABEL_59;
                      }
LABEL_194:
                      __break(1u);
LABEL_195:
                      __break(1u);
LABEL_196:
                      swift_once();
LABEL_169:
                      v242 = (void *)_nilObjCError;
                      v243 = (id)_nilObjCError;
                      swift_willThrow();
                      swift_release();

                      goto LABEL_170;
                    }
                    v102 = *(_QWORD *)v278 + 7;
                  }
                }
              }
            }
          }
        }
LABEL_59:
        *(_QWORD *)v278 = v102;
        v282 = (v101 - 1) & v101;
        v99 = __clz(__rbit64(v101)) + (v102 << 6);
      }
      v104 = (uint64_t *)(*(_QWORD *)(v86 + 48) + 16 * v99);
      v106 = *v104;
      v105 = v104[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v86 + 56) + 40 * v99, (uint64_t)p_st_uid);
      *(_QWORD *)&v293.st_dev = v106;
      v293.st_ino = v105;
      v107 = *((_OWORD *)p_st_uid + 1);
      *(_OWORD *)v290 = *(_OWORD *)p_st_uid;
      *(_OWORD *)&v290[16] = v107;
      v291 = *((_QWORD *)p_st_uid + 4);
      v294 = (_QWORD *)v106;
      *(_QWORD *)&v295[0] = v105;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v109 = (uint64_t)v294;
      v108 = *(_QWORD *)&v295[0];
      outlined init with take of Any(v91, v92);
      outlined init with take of Any(v92, v288);
      outlined init with take of Any(v288, v286);
      v110 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v108);
      v5 = v110;
      if ((v111 & 1) != 0)
      {
        v93 = p_st_uid;
        v94 = v92;
        v95 = v91;
        v96 = v86;
        v97 = (uint64_t *)(v87[6] + 16 * v110);
        swift_bridgeObjectRelease();
        *v97 = v109;
        v97[1] = v108;
        v86 = v96;
        v91 = v95;
        v92 = v94;
        p_st_uid = v93;
        v98 = (_OWORD *)(v87[7] + 32 * v5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
        outlined init with take of Any(v286, v98);
      }
      else
      {
        if (v87[2] >= v87[3])
          goto LABEL_186;
        *(_QWORD *)((char *)v87 + ((v110 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v110;
        v112 = (uint64_t *)(v87[6] + 16 * v110);
        *v112 = v109;
        v112[1] = v108;
        outlined init with take of Any(v286, (_OWORD *)(v87[7] + 32 * v110));
        v113 = v87[2];
        v61 = __OFADD__(v113, 1);
        v114 = v113 + 1;
        if (v61)
        {
LABEL_187:
          __break(1u);
          goto LABEL_188;
        }
        v87[2] = v114;
      }
      v9 = v290;
      v90 = v282;
    }
  }
  memset(&v293, 0, 28);
  memset(&v293.st_atimespec, 0, 112);
  if (lstat(a1, &v293))
  {
    v11 = MEMORY[0x186DA4118]();
    *(_QWORD *)&v288[0] = MEMORY[0x1E0DEE9E0];
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v14 = v13;
    v294 = (_QWORD *)a2;
    *(_QWORD *)&v295[0] = p_st_uid;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)v286, (uint64_t)v12, v14);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v17 = v16;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, (unint64_t)p_st_uid, (uint64_t)&v294);
    if (v294)
    {
      *(_QWORD *)v290 = v294;
      *(_OWORD *)&v290[8] = v295[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      memset(v286, 0, sizeof(v286));
      v287 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)v286, (uint64_t)v15, v17);
    v285 = *(_QWORD *)&v288[0];
    swift_bridgeObjectRetain();
    if (v11 == 102)
    {
LABEL_24:
      v74 = 256;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
        *(_QWORD *)&v286[0] = 0;
        *((_QWORD *)&v286[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v286[0] = 0xD000000000000014;
        *((_QWORD *)&v286[0] + 1) = 0x8000000182306980;
        LODWORD(v294) = v11;
        v255._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v255);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181C7E9E8);
      }
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v77 = v76;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v78 = (int)POSIXErrorCode.rawValue.getter();
      v79 = objc_allocWithZone((Class)NSError);
      v80 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      p_st_uid = (uid_t *)objc_msgSend(v79, sel_initWithDomain_code_userInfo_, v80, v78, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v81 = -[uid_t domain](p_st_uid, sel_domain);
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v84 == v85)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v194 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v194 & 1) == 0)
          goto LABEL_195;
      }
      v294 = p_st_uid;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)v286, (uint64_t)v75, v77);
      v74 = 263;
      switch(v11)
      {
        case 1:
        case 13:
          v74 = 257;
          break;
        case 2:
          v74 = 260;
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_24;
        case 27:
          break;
        default:
          if (v11 != 63)
            goto LABEL_24;
          v74 = 258;
          break;
      }
    }
    v202 = v285;
    v266 = v74;
    if (*(_QWORD *)(v285 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v203 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v203 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v275 = v285 + 64;
    v204 = -1;
    v205 = -1 << *(_BYTE *)(v285 + 32);
    if (-v205 < 64)
      v204 = ~(-1 << -(char)v205);
    v206 = v204 & *(_QWORD *)(v285 + 64);
    v207 = &v286[1];
    v208 = &v290[16];
    v209 = (_OWORD *)((char *)v295 + 8);
    v272 = (unint64_t)(63 - v205) >> 6;
    swift_bridgeObjectRetain();
    *(_QWORD *)v280 = 0;
    st_uid = MEMORY[0x1E0DEE9B8] + 8;
    if (v206)
      goto LABEL_133;
LABEL_134:
    v217 = *(_QWORD *)v280 + 1;
    if (__OFADD__(*(_QWORD *)v280, 1))
    {
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
      goto LABEL_193;
    }
    if (v217 < v272)
    {
      v218 = *(_QWORD *)(v275 + 8 * v217);
      v219 = *(_QWORD *)v280 + 1;
      if (v218)
        goto LABEL_153;
      v219 = *(_QWORD *)v280 + 2;
      if (*(_QWORD *)v280 + 2 >= v272)
        goto LABEL_159;
      v218 = *(_QWORD *)(v275 + 8 * v219);
      if (v218)
        goto LABEL_153;
      v219 = *(_QWORD *)v280 + 3;
      if (*(_QWORD *)v280 + 3 >= v272)
        goto LABEL_159;
      v218 = *(_QWORD *)(v275 + 8 * v219);
      if (v218)
        goto LABEL_153;
      v219 = *(_QWORD *)v280 + 4;
      if (*(_QWORD *)v280 + 4 >= v272)
        goto LABEL_159;
      v218 = *(_QWORD *)(v275 + 8 * v219);
      if (v218)
        goto LABEL_153;
      v219 = *(_QWORD *)v280 + 5;
      if (*(_QWORD *)v280 + 5 >= v272)
        goto LABEL_159;
      v218 = *(_QWORD *)(v275 + 8 * v219);
      if (v218)
        goto LABEL_153;
      v219 = *(_QWORD *)v280 + 6;
      if (*(_QWORD *)v280 + 6 >= v272)
        goto LABEL_159;
      v218 = *(_QWORD *)(v275 + 8 * v219);
      if (v218)
      {
LABEL_153:
        *(_QWORD *)v280 = v219;
        v284 = (v218 - 1) & v218;
        for (i = __clz(__rbit64(v218)) + (v219 << 6); ; i = __clz(__rbit64(v206)) | (*(_QWORD *)v280 << 6))
        {
          v221 = (uint64_t *)(*(_QWORD *)(v202 + 48) + 16 * i);
          v223 = *v221;
          v222 = v221[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v202 + 56) + 40 * i, (uint64_t)v207);
          *(_QWORD *)&v286[0] = v223;
          *((_QWORD *)&v286[0] + 1) = v222;
          v224 = v207[1];
          v288[0] = *v207;
          v288[1] = v224;
          v289 = *((_QWORD *)v207 + 4);
          *(_QWORD *)v290 = v223;
          *(_QWORD *)&v290[8] = v222;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v225 = *(_QWORD *)v290;
          p_st_uid = *(uid_t **)&v290[8];
          outlined init with take of Any(v208, v209);
          outlined init with take of Any(v209, v292);
          outlined init with take of Any(v292, &v294);
          v226 = specialized __RawDictionaryStorage.find<A>(_:)(v225, (uint64_t)p_st_uid);
          v227 = v226;
          if ((v228 & 1) != 0)
          {
            v210 = v207;
            v211 = v209;
            v212 = v208;
            v213 = v202;
            v214 = (uint64_t *)(v203[6] + 16 * v226);
            swift_bridgeObjectRelease();
            *v214 = v225;
            v214[1] = (uint64_t)p_st_uid;
            v202 = v213;
            v208 = v212;
            v209 = v211;
            v207 = v210;
            v215 = (_OWORD *)(v203[7] + 32 * v227);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v215);
            outlined init with take of Any(&v294, v215);
            v206 = v284;
            if (!v284)
              goto LABEL_134;
          }
          else
          {
            if (v203[2] >= v203[3])
            {
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
              goto LABEL_187;
            }
            *(_QWORD *)((char *)v203 + ((v226 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v226;
            v229 = (uint64_t *)(v203[6] + 16 * v226);
            *v229 = v225;
            v229[1] = (uint64_t)p_st_uid;
            outlined init with take of Any(&v294, (_OWORD *)(v203[7] + 32 * v226));
            v230 = v203[2];
            v61 = __OFADD__(v230, 1);
            v231 = v230 + 1;
            if (v61)
              goto LABEL_185;
            v203[2] = v231;
            v206 = v284;
            if (!v284)
              goto LABEL_134;
          }
LABEL_133:
          v284 = (v206 - 1) & v206;
        }
      }
      v220 = *(_QWORD *)v280 + 7;
      if (*(_QWORD *)v280 + 7 < v272)
      {
        v218 = *(_QWORD *)(v275 + 8 * v220);
        if (v218)
        {
          v219 = *(_QWORD *)v280 + 7;
          goto LABEL_153;
        }
        while (1)
        {
          v219 = v220 + 1;
          if (__OFADD__(v220, 1))
            break;
          if (v219 >= v272)
            goto LABEL_159;
          v218 = *(_QWORD *)(v275 + 8 * v219);
          ++v220;
          if (v218)
            goto LABEL_153;
        }
LABEL_193:
        __break(1u);
        goto LABEL_194;
      }
    }
LABEL_159:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v232 = objc_allocWithZone((Class)NSError);
    v233 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v234 = objc_msgSend(v232, sel_initWithDomain_code_userInfo_, v233, v266, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v235 = objc_msgSend(v234, sel_domain);
    v236 = static String._unconditionallyBridgeFromObjectiveC(_:)(v235);
    v238 = v237;

    if (v236 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v238 != v239)
    {
      v241 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v241 & 1) != 0)
        goto LABEL_167;
      __break(1u);
    }
    swift_bridgeObjectRelease();
    goto LABEL_166;
  }
  v265 = a2;
  v267 = (unint64_t)p_st_uid;
  v261 = (uid_t *)a1;
  v262 = a4;
  st_mode = v293.st_mode;
  st_nlink = v293.st_nlink;
  st_dev = v293.st_dev;
  st_ino = v293.st_ino;
  st_uid = v293.st_uid;
  *(_QWORD *)v277 = v293.st_gid;
  v258 = v4;
  st_rdev = v293.st_rdev;
  st_size = v293.st_size;
  st_flags = v293.st_flags;
  tv_sec = v293.st_mtimespec.tv_sec;
  tv_nsec = v293.st_mtimespec.tv_nsec;
  v28 = v293.st_ctimespec.tv_sec;
  v29 = v293.st_ctimespec.tv_nsec;
  v30 = specialized UInt16._fileType.getter(v293.st_mode);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v281 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSFileAttributeKey, Any)>);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1820FEEE0;
  *(_QWORD *)(v31 + 32) = CFSTR("NSFileSize");
  v32 = objc_allocWithZone((Class)NSNumber);
  v33 = CFSTR("NSFileSize");
  v34 = objc_msgSend(v32, sel_initWithLongLong_, st_size);
  v35 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)(v31 + 40) = v34;
  *(_QWORD *)(v31 + 64) = v35;
  *(_QWORD *)(v31 + 72) = CFSTR("NSFileModificationDate");
  *(double *)(v31 + 80) = (double)tv_sec + -978307200.0 + (double)tv_nsec / 1000000000.0;
  *(_QWORD *)(v31 + 104) = &type metadata for Date;
  *(_QWORD *)(v31 + 112) = CFSTR("NSFileCreationDate");
  *(double *)(v31 + 120) = (double)v28 + -978307200.0 + (double)v29 / 1000000000.0;
  *(_QWORD *)(v31 + 144) = &type metadata for Date;
  *(_QWORD *)(v31 + 152) = CFSTR("NSFilePosixPermissions");
  v260 = st_mode;
  v36 = st_mode & 0xFFF;
  v9 = (_BYTE *)v35;
  v37 = objc_allocWithZone((Class)NSNumber);
  v38 = CFSTR("NSFileModificationDate");
  v257 = CFSTR("NSFileCreationDate");
  v39 = CFSTR("NSFilePosixPermissions");
  *(_QWORD *)(v31 + 160) = objc_msgSend(v37, sel_initWithLongLong_, v36);
  *(_QWORD *)(v31 + 184) = v9;
  *(_QWORD *)(v31 + 192) = CFSTR("NSFileReferenceCount");
  v40 = objc_allocWithZone((Class)NSNumber);
  v41 = CFSTR("NSFileReferenceCount");
  *(_QWORD *)(v31 + 200) = objc_msgSend(v40, sel_initWithLongLong_, st_nlink);
  *(_QWORD *)(v31 + 224) = v9;
  *(_QWORD *)(v31 + 232) = CFSTR("NSFileSystemNumber");
  v42 = objc_allocWithZone((Class)NSNumber);
  v43 = CFSTR("NSFileSystemNumber");
  *(_QWORD *)(v31 + 240) = objc_msgSend(v42, sel_initWithLongLong_, st_dev);
  *(_QWORD *)(v31 + 264) = v9;
  *(_QWORD *)(v31 + 272) = CFSTR("NSFileSystemFileNumber");
  v44 = objc_allocWithZone((Class)NSNumber);
  v45 = CFSTR("NSFileSystemFileNumber");
  v46 = &selRef_initWithUnsignedLongLong_;
  if (st_ino >= 0)
    v46 = &selRef_initWithLongLong_;
  v47 = objc_msgSend(v44, *v46);
  *((_QWORD *)&v286[1] + 1) = v9;
  *(_QWORD *)&v286[0] = v47;
  outlined init with take of Any(v286, (_OWORD *)(v31 + 280));
  *(_QWORD *)(v31 + 312) = CFSTR("NSFileType");
  v48 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v31 + 320) = v281;
  v256 = v48;
  *(_QWORD *)(v31 + 344) = v48;
  *(_QWORD *)(v31 + 352) = CFSTR("NSFileOwnerAccountID");
  v49 = objc_allocWithZone((Class)NSNumber);
  v50 = CFSTR("NSFileType");
  swift_unknownObjectRetain();
  v51 = CFSTR("NSFileOwnerAccountID");
  *(_QWORD *)(v31 + 360) = objc_msgSend(v49, sel_initWithLongLong_, st_uid);
  *(_QWORD *)(v31 + 384) = v9;
  *(_QWORD *)(v31 + 392) = CFSTR("NSFileGroupOwnerAccountID");
  v52 = objc_allocWithZone((Class)NSNumber);
  v53 = CFSTR("NSFileGroupOwnerAccountID");
  v54 = objc_msgSend(v52, sel_initWithLongLong_, *(_QWORD *)v277);
  *(_QWORD *)(v31 + 424) = v9;
  *(_QWORD *)(v31 + 400) = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  v55 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  p_st_uid = (uid_t *)(v55 + 8);
  swift_retain();
  for (j = 32; j != 432; j += 40)
  {
    outlined init with copy of (Hashable & Sendable)?(v31 + j, (uint64_t)v286, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
    v57 = *(_QWORD *)&v286[0];
    v58 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)&v286[0]);
    if ((v59 & 1) != 0)
      goto LABEL_190;
    *(_QWORD *)((char *)p_st_uid + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
    *(_QWORD *)(v55[6] + 8 * v58) = v57;
    outlined init with take of Any((_OWORD *)((char *)v286 + 8), (_OWORD *)(v55[7] + 32 * v58));
    v60 = v55[2];
    v61 = __OFADD__(v60, 1);
    v62 = v60 + 1;
    if (v61)
      goto LABEL_191;
    v55[2] = v62;
  }
  swift_release();
  swift_bridgeObjectRelease();
  v294 = v55;
  v63 = getpwuid(st_uid);
  if (v63 && v63->pw_name)
  {
    v64 = String.init(cString:)();
    *((_QWORD *)&v286[1] + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v286[0] = v64;
    *((_QWORD *)&v286[0] + 1) = v65;
    specialized Dictionary.subscript.setter((uint64_t)v286, CFSTR("NSFileOwnerAccountName"));
  }
  v66 = getgrgid(v277[0]);
  v5 = v265;
  if (v66 && v66->gr_name)
  {
    v67 = String.init(cString:)();
    *((_QWORD *)&v286[1] + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v286[0] = v67;
    *((_QWORD *)&v286[0] + 1) = v68;
    specialized Dictionary.subscript.setter((uint64_t)v286, CFSTR("NSFileGroupOwnerAccountName"));
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v281);
  v69 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileTypeBlockSpecial"));
  v72 = v71;
  if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(v69) && v72 == v73)
  {
    swift_bridgeObjectRelease_n();
LABEL_71:
    swift_unknownObjectRelease();
    goto LABEL_72;
  }
LABEL_70:
  v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v125 & 1) != 0)
    goto LABEL_71;
  v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFileTypeCharacterSpecial"));
  v200 = v199;
  if (v198 != static String._unconditionallyBridgeFromObjectiveC(_:)(v69) || v200 != v201)
  {
    v254 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v126 = &off_1E0F10000;
    v127 = v267;
    if ((v254 & 1) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_72:
  v126 = &off_1E0F10000;
  v127 = v267;
LABEL_73:
  v128 = objc_allocWithZone((Class)v126[445]);
  v129 = CFSTR("NSFileDeviceIdentifier");
  v130 = objc_msgSend(v128, sel_initWithLongLong_, st_rdev);
  *((_QWORD *)&v286[1] + 1) = v9;
  *(_QWORD *)&v286[0] = v130;
  specialized Dictionary.subscript.setter((uint64_t)v286, v129);
LABEL_74:
  v131 = objc_allocWithZone((Class)v126[445]);
  v132 = CFSTR("NSFileImmutable");
  v133 = objc_msgSend(v131, sel_initWithBool_, (st_flags & 0x20002) != 0);
  *((_QWORD *)&v286[1] + 1) = v9;
  *(_QWORD *)&v286[0] = v133;
  specialized Dictionary.subscript.setter((uint64_t)v286, v132);
  v134 = objc_allocWithZone((Class)v126[445]);
  v135 = CFSTR("NSFileAppendOnly");
  v136 = objc_msgSend(v134, sel_initWithBool_, (st_flags & 0x40004) != 0);
  v264 = v9;
  *((_QWORD *)&v286[1] + 1) = v9;
  *(_QWORD *)&v286[0] = v136;
  specialized Dictionary.subscript.setter((uint64_t)v286, v135);
  swift_unknownObjectRelease();
  *(_QWORD *)&v288[0] = v294;
  v290[0] = 0;
  memset(v286, 0, 24);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)(v5, v127, v290, (uint64_t)v286, (uint64_t *)&v294);
  st_uid = (uint64_t)v294;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  v137 = swift_allocObject();
  v138 = (void *)*MEMORY[0x1E0C999B0];
  *(_QWORD *)(v137 + 32) = *MEMORY[0x1E0C999B0];
  *(_QWORD *)v279 = v137 + 32;
  v139 = (void *)*MEMORY[0x1E0C998E8];
  *(_QWORD *)(v137 + 40) = *MEMORY[0x1E0C998E8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v140 = static _SetStorage.allocate(capacity:)();
  v283 = v140 + 56;
  v268 = v138;
  v141 = v139;
  v142 = 0;
  v143 = 0;
  do
  {
    v144 = v142;
    v145 = *(void **)(*(_QWORD *)v279 + 8 * v143);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
    Hasher.init(_seed:)();
    p_st_uid = v145;
    String.hash(into:)();
    v146 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v147 = -1 << *(_BYTE *)(v140 + 32);
    v148 = v146 & ~v147;
    v149 = v148 >> 6;
    v150 = *(_QWORD *)(v283 + 8 * (v148 >> 6));
    v151 = 1 << v148;
    if (((1 << v148) & v150) != 0)
    {
      v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v140 + 48) + 8 * v148));
      v154 = v153;
      if (v152 == static String._unconditionallyBridgeFromObjectiveC(_:)(v145) && v154 == v155)
      {
LABEL_75:
        swift_bridgeObjectRelease_n();
LABEL_76:

        goto LABEL_77;
      }
      v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v157 & 1) != 0)
        goto LABEL_76;
      v158 = ~v147;
      v148 = (v148 + 1) & v158;
      v149 = v148 >> 6;
      v150 = *(_QWORD *)(v283 + 8 * (v148 >> 6));
      v151 = 1 << v148;
      if ((v150 & (1 << v148)) != 0)
      {
        v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v140 + 48) + 8 * v148));
        v161 = v160;
        if (v159 == static String._unconditionallyBridgeFromObjectiveC(_:)(v145) && v161 == v162)
          goto LABEL_75;
        v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v164 & 1) != 0)
          goto LABEL_76;
        v148 = (v148 + 1) & v158;
        v149 = v148 >> 6;
        v150 = *(_QWORD *)(v283 + 8 * (v148 >> 6));
        v151 = 1 << v148;
        if ((v150 & (1 << v148)) != 0)
        {
          v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v140 + 48) + 8 * v148));
          v167 = v166;
          if (v165 == static String._unconditionallyBridgeFromObjectiveC(_:)(v145) && v167 == v168)
            goto LABEL_75;
          v169 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v169 & 1) != 0)
            goto LABEL_76;
          v148 = (v148 + 1) & v158;
          v149 = v148 >> 6;
          v150 = *(_QWORD *)(v283 + 8 * (v148 >> 6));
          v151 = 1 << v148;
          if ((v150 & (1 << v148)) != 0)
          {
            v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v140 + 48) + 8 * v148));
            v172 = v171;
            if (v170 == static String._unconditionallyBridgeFromObjectiveC(_:)(v145) && v172 == v173)
              goto LABEL_75;
            v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v174 & 1) != 0)
              goto LABEL_76;
            while (1)
            {
              v148 = (v148 + 1) & v158;
              v149 = v148 >> 6;
              v150 = *(_QWORD *)(v283 + 8 * (v148 >> 6));
              v151 = 1 << v148;
              if ((v150 & (1 << v148)) == 0)
                break;
              v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v140 + 48) + 8 * v148));
              v177 = v176;
              if (v175 == static String._unconditionallyBridgeFromObjectiveC(_:)(v145) && v177 == v178)
                goto LABEL_75;
              v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v180 & 1) != 0)
                goto LABEL_76;
            }
          }
        }
      }
    }
    *(_QWORD *)(v283 + 8 * v149) = v151 | v150;
    *(_QWORD *)(*(_QWORD *)(v140 + 48) + 8 * v148) = p_st_uid;
    v181 = *(_QWORD *)(v140 + 16);
    v61 = __OFADD__(v181, 1);
    v182 = v181 + 1;
    if (v61)
      goto LABEL_192;
    *(_QWORD *)(v140 + 16) = v182;
LABEL_77:
    v142 = 1;
    v143 = 1;
  }
  while ((v144 & 1) == 0);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v183 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v183);
  swift_release();
  v184 = _ContiguousArrayBuffer._asCocoaArray()();
  *(_QWORD *)&v286[0] = 0;
  v185 = objc_msgSend((id)st_uid, sel_resourceValuesForKeys_error_, v184, v286);
  swift_unknownObjectRelease();
  v186 = *(void **)&v286[0];
  if (!v185)
  {
    p_st_uid = v261;
    if (!*(_QWORD *)&v286[0])
    {
      if (one-time initialization token for _nilObjCError != -1)
        goto LABEL_196;
      goto LABEL_169;
    }
    v195 = *(id *)&v286[0];
    swift_willThrow();

    swift_release();
LABEL_170:
    swift_release();
    swift_release();
    v197 = 0;
    v196 = v260;
    goto LABEL_171;
  }
  v187 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v185);
  v188 = v186;

  *(_QWORD *)&v286[0] = v187;
  *((_QWORD *)&v286[0] + 1) = v140;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v189 = URLResourceValues._get(_:)(v268);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  p_st_uid = v261;
  if (v189 != 2)
  {
    v190 = objc_allocWithZone((Class)NSNumber);
    v191 = CFSTR("NSFileExtensionHidden");
    v192 = objc_msgSend(v190, sel_initWithBool_, v189 & 1);
    *((_QWORD *)&v286[1] + 1) = v264;
    *(_QWORD *)&v286[0] = v192;
    specialized Dictionary.subscript.setter((uint64_t)v286, v191);
  }
  *(_QWORD *)&v286[0] = v187;
  *((_QWORD *)&v286[0] + 1) = v140;
  v193 = v257;
  URLResourceValues.creationDate.getter((uint64_t)v290);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v290[8] & 1) != 0)
  {
    memset(v286, 0, sizeof(v286));
  }
  else
  {
    *((_QWORD *)&v286[1] + 1) = &type metadata for Date;
    *(_QWORD *)&v286[0] = *(_QWORD *)v290;
  }
  v196 = v260;
  v197 = v258;
  specialized Dictionary.subscript.setter((uint64_t)v286, v193);

  swift_release();
  swift_release();
LABEL_171:
  v244 = specialized _FileManagerImpl._extendedAttributes(at:followSymlinks:)((char *)p_st_uid);
  if (v197)
  {

  }
  else
  {
    v245 = v244;
    if (v244)
    {
      v246 = (void *)String._bridgeToObjectiveCImpl()();
      *((_QWORD *)&v286[1] + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      *(_QWORD *)&v286[0] = v245;
      specialized Dictionary.subscript.setter((uint64_t)v286, v246);
    }
  }
  v247 = S_IFMT.getter() & v196;
  if (v247 == (unsigned __int16)S_IFREG.getter()
    || (v248 = S_IFMT.getter() & v196, v248 == (unsigned __int16)S_IFDIR.getter()))
  {
    v249 = specialized static _FileManagerImpl._fileProtectionValueForPath(_:)((const char *)p_st_uid);
    if ((v249 & 0x100000000) != 0 || (v250 = specialized NSFileProtectionType.init(intValue:)(v249)) == 0)
    {
      memset(v286, 0, sizeof(v286));
      specialized Dictionary.subscript.setter((uint64_t)v286, CFSTR("NSFileProtectionKey"));
    }
    else
    {
      v251 = v250;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v250);
      v252 = String._bridgeToObjectiveCImpl()();
      v253 = CFSTR("NSFileProtectionKey");
      swift_bridgeObjectRelease();
      *((_QWORD *)&v286[1] + 1) = v256;
      *(_QWORD *)&v286[0] = v252;
      specialized Dictionary.subscript.setter((uint64_t)v286, v253);

    }
  }
  *v262 = *(_QWORD *)&v288[0];
}

uint64_t closure #1 in _FileManagerImpl.attributesOfFileSystem(forPath:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t f_bsize;
  uint64_t f_blocks;
  uint64_t f_bavail;
  uid_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  __CFString *v30;
  char **v31;
  id v32;
  uint64_t v33;
  id v34;
  __CFString *v35;
  char **v36;
  id v37;
  id v38;
  __CFString *v39;
  char **v40;
  id v41;
  id v42;
  __CFString *v43;
  char **v44;
  id v45;
  id v46;
  __CFString *v47;
  id v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *p_f_bfree;
  _OWORD *v97;
  char *v98;
  uint64_t *v99;
  char *v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  _OWORD *v104;
  unint64_t i;
  int64_t v106;
  unint64_t v107;
  int64_t v108;
  int64_t v109;
  void **v110;
  uint64_t v111;
  void *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  id v124;
  void *v125;
  void *v126;
  void *v127;
  char v129;
  int64_t v130;
  int64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  _OWORD *v138;
  _OWORD *v139;
  char *v140;
  _OWORD *v141;
  _OWORD *v142;
  uint64_t v143;
  _OWORD *v144;
  _OWORD *v145;
  unint64_t j;
  int64_t v147;
  unint64_t v148;
  int64_t v149;
  int64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  unint64_t v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  id v163;
  id v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v170;
  Swift::String v171;
  uint64_t v172;
  int64_t v173;
  int64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int64_t f_files;
  int64_t v180;
  int64_t v181;
  int64_t f_ffree;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186[32];
  __int128 v187;
  __int128 v188;
  _OWORD v189[2];
  uint64_t v190;
  _OWORD v191[2];
  uint64_t v192;
  _OWORD v193[2];
  statfs v194;
  uint64_t v195;
  _OWORD v196[2];
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *(_QWORD *)&v191[0] = MEMORY[0x1E0DEE9E0];
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v17 = v16;
    *(_QWORD *)v186 = a2;
    *(_QWORD *)&v186[8] = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v194, (uint64_t)v15, v17);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v20 = v19;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)v186);
    if (*(_QWORD *)v186)
    {
      v195 = *(_QWORD *)v186;
      v196[0] = *(_OWORD *)&v186[8];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      memset(&v194, 0, 40);
    }
    specialized Dictionary.subscript.setter((uint64_t)&v194, (uint64_t)v18, v20);
    v91 = *(_QWORD *)&v191[0];
    if (*(_QWORD *)(*(_QWORD *)&v191[0] + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v92 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v92 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v176 = v91 + 64;
    v93 = -1;
    v94 = -1 << *(_BYTE *)(v91 + 32);
    if (-v94 < 64)
      v93 = ~(-1 << -(char)v94);
    v95 = v93 & *(_QWORD *)(v91 + 64);
    p_f_bfree = &v194.f_bfree;
    v97 = (_OWORD *)((char *)v196 + 8);
    v98 = &v186[16];
    v173 = (unint64_t)(63 - v94) >> 6;
    swift_bridgeObjectRetain();
    v180 = 0;
    if (v95)
      goto LABEL_49;
LABEL_50:
    v106 = v180 + 1;
    if (__OFADD__(v180, 1))
      goto LABEL_150;
    if (v106 < v173)
    {
      v107 = *(_QWORD *)(v176 + 8 * v106);
      v108 = v180 + 1;
      if (v107)
        goto LABEL_69;
      v108 = v180 + 2;
      if (v180 + 2 < v173)
      {
        v107 = *(_QWORD *)(v176 + 8 * v108);
        if (v107)
          goto LABEL_69;
        v108 = v180 + 3;
        if (v180 + 3 < v173)
        {
          v107 = *(_QWORD *)(v176 + 8 * v108);
          if (v107)
            goto LABEL_69;
          v108 = v180 + 4;
          if (v180 + 4 < v173)
          {
            v107 = *(_QWORD *)(v176 + 8 * v108);
            if (v107)
              goto LABEL_69;
            v108 = v180 + 5;
            if (v180 + 5 < v173)
            {
              v107 = *(_QWORD *)(v176 + 8 * v108);
              if (v107)
                goto LABEL_69;
              v108 = v180 + 6;
              if (v180 + 6 < v173)
              {
                v107 = *(_QWORD *)(v176 + 8 * v108);
                if (v107)
                  goto LABEL_69;
                v109 = v180 + 7;
                if (v180 + 7 < v173)
                {
                  v107 = *(_QWORD *)(v176 + 8 * v109);
                  if (!v107)
                  {
                    while (1)
                    {
                      v108 = v109 + 1;
                      if (__OFADD__(v109, 1))
                        goto LABEL_165;
                      if (v108 >= v173)
                        goto LABEL_75;
                      v107 = *(_QWORD *)(v176 + 8 * v108);
                      ++v109;
                      if (v107)
                        goto LABEL_69;
                    }
                  }
                  v108 = v180 + 7;
LABEL_69:
                  v180 = v108;
                  v183 = (v107 - 1) & v107;
                  for (i = __clz(__rbit64(v107)) + (v108 << 6); ; i = __clz(__rbit64(v95)) | (v180 << 6))
                  {
                    v110 = (void **)(*(_QWORD *)(v91 + 48) + 16 * i);
                    v112 = *v110;
                    v111 = (uint64_t)v110[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v91 + 56) + 40 * i, (uint64_t)p_f_bfree);
                    *(_QWORD *)&v194.f_bsize = v112;
                    v194.f_blocks = v111;
                    v113 = *((_OWORD *)p_f_bfree + 1);
                    v191[0] = *(_OWORD *)p_f_bfree;
                    v191[1] = v113;
                    v192 = p_f_bfree[4];
                    v195 = (uint64_t)v112;
                    *(_QWORD *)&v196[0] = v111;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v115 = v195;
                    v114 = *(_QWORD *)&v196[0];
                    outlined init with take of Any(v97, v98);
                    outlined init with take of Any(v98, v189);
                    outlined init with take of Any(v189, v186);
                    v116 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v114);
                    v117 = v116;
                    if ((v118 & 1) != 0)
                    {
                      v99 = p_f_bfree;
                      v100 = v98;
                      v101 = v97;
                      v102 = v91;
                      v103 = (uint64_t *)(v92[6] + 16 * v116);
                      swift_bridgeObjectRelease();
                      *v103 = v115;
                      v103[1] = v114;
                      v91 = v102;
                      v97 = v101;
                      v98 = v100;
                      p_f_bfree = v99;
                      v104 = (_OWORD *)(v92[7] + 32 * v117);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
                      outlined init with take of Any(v186, v104);
                      v95 = v183;
                      if (!v183)
                        goto LABEL_50;
                    }
                    else
                    {
                      if (v92[2] >= v92[3])
                        goto LABEL_147;
                      *(_QWORD *)((char *)v92 + ((v116 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v116;
                      v119 = (uint64_t *)(v92[6] + 16 * v116);
                      *v119 = v115;
                      v119[1] = v114;
                      outlined init with take of Any(v186, (_OWORD *)(v92[7] + 32 * v116));
                      v120 = v92[2];
                      v55 = __OFADD__(v120, 1);
                      v121 = v120 + 1;
                      if (v55)
                      {
LABEL_148:
                        __break(1u);
                        goto LABEL_149;
                      }
                      v92[2] = v121;
                      v95 = v183;
                      if (!v183)
                        goto LABEL_50;
                    }
LABEL_49:
                    v183 = (v95 - 1) & v95;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_75:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v122 = objc_allocWithZone((Class)NSError);
    v123 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v122, sel_initWithDomain_code_userInfo_, v123, 256, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v85 = objc_msgSend(v8, sel_domain);
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    v126 = v125;

    if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v126 == v127)
      goto LABEL_143;
    v79 = v127;
    v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v81 & 1) != 0)
      return swift_willThrow();
    __break(1u);
LABEL_81:
    v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v129 & 1) == 0)
    {
LABEL_166:
      __break(1u);
      goto LABEL_167;
    }
    goto LABEL_82;
  }
  bzero(&v194, 0x878uLL);
  if (!statfs(a1, &v194))
  {
    f_bsize = v194.f_bsize;
    f_blocks = v194.f_blocks;
    if (is_mul_ok(v194.f_blocks, v194.f_bsize))
    {
      f_bavail = v194.f_bavail;
      if (is_mul_ok(v194.f_bavail, v194.f_bsize))
      {
        v175 = v194.f_fsid.val[0];
        f_files = v194.f_files;
        f_ffree = v194.f_ffree;
        v24 = geteuid();
        *(_QWORD *)v186 = 0;
        if ((v24 & 0x80000000) == 0)
        {
          v25 = v24;
          v26 = f_blocks * f_bsize;
          v27 = f_bavail * f_bsize;
          v178 = v27;
          if (!quotactl(v194.f_mntonname, 458752, v24, v186))
          {
            if (*(_QWORD *)v186)
            {
              v187 = 0u;
              v188 = 0u;
              memset(v186, 0, sizeof(v186));
              if (!quotactl(v194.f_mntonname, 196608, v25, v186))
              {
                if (*(_QWORD *)v186)
                {
                  if (*(_QWORD *)v186 < *(_QWORD *)&v186[16])
                  {
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
                  }
                  if ((unint64_t)v26 >= *(_QWORD *)v186)
                    v26 = *(_QWORD *)v186;
                  if (v27 >= *(_QWORD *)v186 - *(_QWORD *)&v186[16])
                    v27 = *(_QWORD *)v186 - *(_QWORD *)&v186[16];
                }
                v178 = v27;
                if (*(_DWORD *)&v186[24])
                {
                  if (*(_DWORD *)&v186[24] < v187)
                    goto LABEL_168;
                  v130 = f_files;
                  if (f_files >= (unint64_t)*(unsigned int *)&v186[24])
                    v130 = *(unsigned int *)&v186[24];
                  v131 = f_ffree;
                  if (f_ffree >= (unint64_t)(*(_DWORD *)&v186[24] - v187))
                    v131 = (*(_DWORD *)&v186[24] - v187);
                  f_files = v130;
                  f_ffree = v131;
                }
              }
            }
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSFileAttributeKey, Any)>);
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_182065BB0;
          *(_QWORD *)(v28 + 32) = CFSTR("NSFileSystemSize");
          v29 = objc_allocWithZone((Class)NSNumber);
          v30 = CFSTR("NSFileSystemSize");
          v31 = &selRef_initWithUnsignedLongLong_;
          if (v26 >= 0)
            v31 = &selRef_initWithLongLong_;
          v32 = objc_msgSend(v29, *v31, v26);
          v33 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          *(_QWORD *)&v186[24] = v33;
          *(_QWORD *)v186 = v32;
          outlined init with take of Any(v186, (_OWORD *)(v28 + 40));
          *(_QWORD *)(v28 + 72) = CFSTR("NSFileSystemFreeSize");
          v34 = objc_allocWithZone((Class)NSNumber);
          v35 = CFSTR("NSFileSystemFreeSize");
          if (v178 >= 0)
            v36 = &selRef_initWithLongLong_;
          else
            v36 = &selRef_initWithUnsignedLongLong_;
          v37 = objc_msgSend(v34, *v36);
          *(_QWORD *)&v186[24] = v33;
          *(_QWORD *)v186 = v37;
          outlined init with take of Any(v186, (_OWORD *)(v28 + 80));
          *(_QWORD *)(v28 + 112) = CFSTR("NSFileSystemNodes");
          v38 = objc_allocWithZone((Class)NSNumber);
          v39 = CFSTR("NSFileSystemNodes");
          if (f_files >= 0)
            v40 = &selRef_initWithLongLong_;
          else
            v40 = &selRef_initWithUnsignedLongLong_;
          v41 = objc_msgSend(v38, *v40);
          *(_QWORD *)&v186[24] = v33;
          *(_QWORD *)v186 = v41;
          outlined init with take of Any(v186, (_OWORD *)(v28 + 120));
          *(_QWORD *)(v28 + 152) = CFSTR("NSFileSystemFreeNodes");
          v42 = objc_allocWithZone((Class)NSNumber);
          v43 = CFSTR("NSFileSystemFreeNodes");
          if (f_ffree >= 0)
            v44 = &selRef_initWithLongLong_;
          else
            v44 = &selRef_initWithUnsignedLongLong_;
          v45 = objc_msgSend(v42, *v44);
          *(_QWORD *)&v186[24] = v33;
          *(_QWORD *)v186 = v45;
          outlined init with take of Any(v186, (_OWORD *)(v28 + 160));
          *(_QWORD *)(v28 + 192) = CFSTR("NSFileSystemNumber");
          v46 = objc_allocWithZone((Class)NSNumber);
          v47 = CFSTR("NSFileSystemNumber");
          v48 = objc_msgSend(v46, sel_initWithLongLong_, v175);
          *(_QWORD *)(v28 + 224) = v33;
          *(_QWORD *)(v28 + 200) = v48;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
          v49 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (Hashable & Sendable)?(v28 + 32, (uint64_t)v186, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
          v50 = *(_QWORD *)v186;
          swift_retain();
          v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
          if ((v52 & 1) == 0)
          {
            v53 = v49 + 8;
            *(_QWORD *)((char *)v49 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v51;
            *(_QWORD *)(v49[6] + 8 * v51) = v50;
            outlined init with take of Any(&v186[8], (_OWORD *)(v49[7] + 32 * v51));
            v54 = v49[2];
            v55 = __OFADD__(v54, 1);
            v56 = v54 + 1;
            if (!v55)
            {
              v49[2] = v56;
              outlined init with copy of (Hashable & Sendable)?(v28 + 72, (uint64_t)v186, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
              v57 = *(_QWORD *)v186;
              v58 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v186);
              if ((v59 & 1) == 0)
              {
                *(_QWORD *)((char *)v53 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
                *(_QWORD *)(v49[6] + 8 * v58) = v57;
                outlined init with take of Any(&v186[8], (_OWORD *)(v49[7] + 32 * v58));
                v60 = v49[2];
                v55 = __OFADD__(v60, 1);
                v61 = v60 + 1;
                if (!v55)
                {
                  v49[2] = v61;
                  outlined init with copy of (Hashable & Sendable)?(v28 + 112, (uint64_t)v186, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                  v62 = *(_QWORD *)v186;
                  v63 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v186);
                  if ((v64 & 1) == 0)
                  {
                    *(_QWORD *)((char *)v53 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v63;
                    *(_QWORD *)(v49[6] + 8 * v63) = v62;
                    outlined init with take of Any(&v186[8], (_OWORD *)(v49[7] + 32 * v63));
                    v65 = v49[2];
                    v55 = __OFADD__(v65, 1);
                    v66 = v65 + 1;
                    if (!v55)
                    {
                      v49[2] = v66;
                      outlined init with copy of (Hashable & Sendable)?(v28 + 152, (uint64_t)v186, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                      v67 = *(_QWORD *)v186;
                      v68 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v186);
                      if ((v69 & 1) == 0)
                      {
                        *(_QWORD *)((char *)v53 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v68;
                        *(_QWORD *)(v49[6] + 8 * v68) = v67;
                        outlined init with take of Any(&v186[8], (_OWORD *)(v49[7] + 32 * v68));
                        v70 = v49[2];
                        v55 = __OFADD__(v70, 1);
                        v71 = v70 + 1;
                        if (!v55)
                        {
                          v49[2] = v71;
                          outlined init with copy of (Hashable & Sendable)?(v28 + 192, (uint64_t)v186, &demangling cache variable for type metadata for (NSFileAttributeKey, Any));
                          v72 = *(_QWORD *)v186;
                          v73 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v186);
                          if ((v74 & 1) == 0)
                          {
                            *(_QWORD *)((char *)v53 + ((v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v73;
                            *(_QWORD *)(v49[6] + 8 * v73) = v72;
                            outlined init with take of Any(&v186[8], (_OWORD *)(v49[7] + 32 * v73));
                            v75 = v49[2];
                            v55 = __OFADD__(v75, 1);
                            v76 = v75 + 1;
                            if (!v55)
                            {
                              v49[2] = v76;
                              swift_release();
                              result = swift_bridgeObjectRelease();
                              *a4 = v49;
                              return result;
                            }
LABEL_163:
                            __break(1u);
LABEL_164:
                            __break(1u);
LABEL_165:
                            __break(1u);
                            goto LABEL_166;
                          }
LABEL_162:
                          __break(1u);
                          goto LABEL_163;
                        }
LABEL_161:
                        __break(1u);
                        goto LABEL_162;
                      }
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }
LABEL_159:
                    __break(1u);
                    goto LABEL_160;
                  }
LABEL_158:
                  __break(1u);
                  goto LABEL_159;
                }
LABEL_157:
                __break(1u);
                goto LABEL_158;
              }
LABEL_156:
              __break(1u);
              goto LABEL_157;
            }
LABEL_155:
            __break(1u);
            goto LABEL_156;
          }
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
LABEL_153:
        __break(1u);
        goto LABEL_154;
      }
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  LODWORD(v8) = MEMORY[0x186DA4118]();
  *(_QWORD *)&v189[0] = MEMORY[0x1E0DEE9E0];
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v11 = v10;
  v195 = a2;
  *(_QWORD *)&v196[0] = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)v186, (uint64_t)v9, v11);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v14 = v13;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v195);
  if (v195)
  {
    *(_QWORD *)&v191[0] = v195;
    *(_OWORD *)((char *)v191 + 8) = v196[0];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    memset(v186, 0, sizeof(v186));
    *(_QWORD *)&v187 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)v186, (uint64_t)v12, v14);
  v185 = *(_QWORD *)&v189[0];
  swift_bridgeObjectRetain();
  if ((_DWORD)v8 == 102)
  {
LABEL_35:
    v78 = 256;
    goto LABEL_102;
  }
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
  {
    *(_QWORD *)v186 = 0;
    *(_QWORD *)&v186[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)v186 = 0xD000000000000014;
    *(_QWORD *)&v186[8] = 0x8000000182306980;
    LODWORD(v195) = (_DWORD)v8;
    v171._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v171);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181C7FE18);
  }
  v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
  v81 = v80;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
  v82 = (int)POSIXErrorCode.rawValue.getter();
  v83 = objc_allocWithZone((Class)NSError);
  v84 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v85 = objc_msgSend(v83, sel_initWithDomain_code_userInfo_, v84, v82, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v86 = objc_msgSend(v85, sel_domain);
  v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
  v89 = v88;

  if (v87 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) || v89 != v90)
    goto LABEL_81;
  swift_bridgeObjectRelease_n();
LABEL_82:
  v195 = (uint64_t)v85;
  lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)v186, (uint64_t)v79, v81);
  v78 = 263;
  switch((int)v8)
  {
    case 1:
    case 13:
      v78 = 257;
      break;
    case 2:
      v78 = 260;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      goto LABEL_35;
    case 27:
      break;
    default:
      if ((_DWORD)v8 != 63)
        goto LABEL_35;
      v78 = 258;
      break;
  }
LABEL_102:
  v132 = v185;
  v172 = v78;
  if (*(_QWORD *)(v185 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v133 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v133 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v177 = v185 + 64;
  v134 = -1;
  v135 = -1 << *(_BYTE *)(v185 + 32);
  if (-v135 < 64)
    v134 = ~(-1 << -(char)v135);
  v136 = v134 & *(_QWORD *)(v185 + 64);
  v137 = &v186[16];
  v138 = &v191[1];
  v139 = (_OWORD *)((char *)v196 + 8);
  v174 = (unint64_t)(63 - v135) >> 6;
  swift_bridgeObjectRetain();
  v181 = 0;
  if (v136)
    goto LABEL_110;
LABEL_111:
  v147 = v181 + 1;
  if (__OFADD__(v181, 1))
  {
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  if (v147 < v174)
  {
    v148 = *(_QWORD *)(v177 + 8 * v147);
    v149 = v181 + 1;
    if (v148)
      goto LABEL_130;
    v149 = v181 + 2;
    if (v181 + 2 < v174)
    {
      v148 = *(_QWORD *)(v177 + 8 * v149);
      if (v148)
        goto LABEL_130;
      v149 = v181 + 3;
      if (v181 + 3 < v174)
      {
        v148 = *(_QWORD *)(v177 + 8 * v149);
        if (v148)
          goto LABEL_130;
        v149 = v181 + 4;
        if (v181 + 4 < v174)
        {
          v148 = *(_QWORD *)(v177 + 8 * v149);
          if (v148)
            goto LABEL_130;
          v149 = v181 + 5;
          if (v181 + 5 < v174)
          {
            v148 = *(_QWORD *)(v177 + 8 * v149);
            if (v148)
              goto LABEL_130;
            v149 = v181 + 6;
            if (v181 + 6 < v174)
            {
              v148 = *(_QWORD *)(v177 + 8 * v149);
              if (!v148)
              {
                v150 = v181 + 7;
                if (v181 + 7 < v174)
                {
                  v148 = *(_QWORD *)(v177 + 8 * v150);
                  if (v148)
                  {
                    v149 = v181 + 7;
                    goto LABEL_130;
                  }
                  while (1)
                  {
                    v149 = v150 + 1;
                    if (__OFADD__(v150, 1))
                      goto LABEL_164;
                    if (v149 >= v174)
                      goto LABEL_136;
                    v148 = *(_QWORD *)(v177 + 8 * v149);
                    ++v150;
                    if (v148)
                      goto LABEL_130;
                  }
                }
                goto LABEL_136;
              }
LABEL_130:
              v181 = v149;
              v184 = (v148 - 1) & v148;
              for (j = __clz(__rbit64(v148)) + (v149 << 6); ; j = __clz(__rbit64(v136)) | (v181 << 6))
              {
                v151 = (uint64_t *)(*(_QWORD *)(v132 + 48) + 16 * j);
                v153 = *v151;
                v152 = v151[1];
                outlined init with copy of AnyHashable(*(_QWORD *)(v132 + 56) + 40 * j, (uint64_t)v137);
                *(_QWORD *)v186 = v153;
                *(_QWORD *)&v186[8] = v152;
                v154 = *((_OWORD *)v137 + 1);
                v189[0] = *(_OWORD *)v137;
                v189[1] = v154;
                v190 = *((_QWORD *)v137 + 4);
                *(_QWORD *)&v191[0] = v153;
                *((_QWORD *)&v191[0] + 1) = v152;
                swift_bridgeObjectRetain();
                swift_dynamicCast();
                v155 = v191[0];
                outlined init with take of Any(v138, v139);
                outlined init with take of Any(v139, v193);
                outlined init with take of Any(v193, &v195);
                v156 = specialized __RawDictionaryStorage.find<A>(_:)(v155, *((uint64_t *)&v155 + 1));
                v157 = v156;
                if ((v158 & 1) != 0)
                {
                  v140 = v137;
                  v141 = v139;
                  v142 = v138;
                  v143 = v132;
                  v144 = (_OWORD *)(v133[6] + 16 * v156);
                  swift_bridgeObjectRelease();
                  *v144 = v155;
                  v132 = v143;
                  v138 = v142;
                  v139 = v141;
                  v137 = v140;
                  v145 = (_OWORD *)(v133[7] + 32 * v157);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
                  outlined init with take of Any(&v195, v145);
                  v136 = v184;
                  if (!v184)
                    goto LABEL_111;
                }
                else
                {
                  if (v133[2] >= v133[3])
                  {
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
                    goto LABEL_148;
                  }
                  *(_QWORD *)((char *)v133 + ((v156 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v156;
                  *(_OWORD *)(v133[6] + 16 * v156) = v155;
                  outlined init with take of Any(&v195, (_OWORD *)(v133[7] + 32 * v156));
                  v159 = v133[2];
                  v55 = __OFADD__(v159, 1);
                  v160 = v159 + 1;
                  if (v55)
                    goto LABEL_146;
                  v133[2] = v160;
                  v136 = v184;
                  if (!v184)
                    goto LABEL_111;
                }
LABEL_110:
                v184 = (v136 - 1) & v136;
              }
            }
          }
        }
      }
    }
  }
LABEL_136:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v161 = objc_allocWithZone((Class)NSError);
  v162 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v163 = objc_msgSend(v161, sel_initWithDomain_code_userInfo_, v162, v172, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v164 = objc_msgSend(v163, sel_domain);
  v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
  v167 = v166;

  if (v165 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v167 == v168)
    goto LABEL_142;
  v170 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v170 & 1) == 0)
  {
    __break(1u);
LABEL_142:
    swift_bridgeObjectRelease();
LABEL_143:
    swift_bridgeObjectRelease_n();
  }
  return swift_willThrow();
}

uint64_t closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(char *a1, __darwin_time_t a2, unint64_t a3, unsigned __int8 a4, unsigned __int8 a5, unint64_t a6, char a7, uint64_t a8)
{
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __uint32_t v29;
  unsigned int v30;
  unsigned int v31;
  __uint32_t v32;
  Swift::Int32 v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  timeval *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 *v44;
  __darwin_suseconds_t *p_tv_usec;
  timeval *v46;
  __int128 *v47;
  timeval *v48;
  __darwin_suseconds_t *v49;
  timeval *v50;
  uint64_t *v51;
  unint64_t i;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  __darwin_time_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v78;
  uint64_t v80;
  _QWORD *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  char *v86;
  uint64_t (*v87)();
  __CFString *v88;
  uint64_t v89;
  char v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  __CFString *v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  char v98;
  char v99;
  __CFString *v100;
  uint64_t v101;
  char v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  __CFString *v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  id v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _OWORD *v136;
  uint64_t *v137;
  timeval *v138;
  char *v139;
  _OWORD *v140;
  unint64_t v141;
  uint64_t *v142;
  unint64_t m;
  int64_t v144;
  unint64_t v145;
  int64_t v146;
  __darwin_time_t *v147;
  __darwin_time_t v148;
  __darwin_time_t v149;
  timeval v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  id v160;
  id v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  id v175;
  char *v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  id v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  char *v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  id v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  __int128 *v198;
  _OWORD *v199;
  __int128 *v200;
  uint64_t v201;
  _OWORD *v202;
  uint64_t v203;
  char **v204;
  unint64_t j;
  int64_t v206;
  unint64_t v207;
  int64_t v208;
  int64_t v209;
  char **v210;
  char *v211;
  char *v212;
  __int128 v213;
  unint64_t v214;
  char v215;
  char **v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  uint64_t v220;
  id v221;
  id v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  timeval *v233;
  _OWORD *v234;
  __darwin_suseconds_t *v235;
  timeval *v236;
  __darwin_suseconds_t *v237;
  _OWORD *v238;
  unint64_t v239;
  char **v240;
  unint64_t k;
  int64_t v242;
  unint64_t v243;
  int64_t v244;
  int64_t v245;
  __darwin_time_t *v246;
  __darwin_time_t v247;
  __darwin_time_t v248;
  timeval v249;
  unint64_t v250;
  char v251;
  char **v252;
  uint64_t v253;
  uint64_t v254;
  id v255;
  uint64_t v256;
  id v257;
  id v258;
  id v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v264;
  uint64_t v265;
  __CFString *v266;
  uint64_t v267;
  char v268;
  unint64_t v269;
  double v270;
  double v271;
  double v272;
  double v273;
  __CFString *v274;
  uint64_t v275;
  char v276;
  unint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  Swift::String v287;
  Swift::String v288;
  uint64_t v289;
  void (__cdecl *v290)();
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int64_t v294;
  char v295;
  int64_t v296;
  int64_t v297;
  int64_t v298;
  uint64_t v299;
  char v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  int64_t v305;
  uint64_t v306;
  int64_t v307;
  int64_t v308;
  int64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  _OWORD v313[2];
  _OWORD v314[2];
  uint64_t v315;
  char *v316;
  __int128 v317;
  char *v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  timeval v323;
  timeval v324;
  __darwin_time_t v325;
  _BYTE v326[32];
  uint64_t v327;
  char *tv_sec;
  timeval v329;
  timeval v330[2];
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  uint64_t v335;

  v335 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *(_QWORD *)v326 = MEMORY[0x1E0DEE9E0];
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v21 = v20;
    v330[0].tv_sec = a2;
    *(_QWORD *)&v330[0].tv_usec = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v332, (uint64_t)v19, v21);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v24 = v23;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)v330);
    if (v330[0].tv_sec)
    {
      tv_sec = (char *)v330[0].tv_sec;
      v329 = *(timeval *)&v330[0].tv_usec;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v332 = 0u;
      v333 = 0u;
      v334 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v332, (uint64_t)v22, v24);
    v39 = *(timeval **)v326;
    if (*(_QWORD *)(*(_QWORD *)v326 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v40 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v40 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v299 = *(_QWORD *)v326 + 64;
    v41 = -1;
    v42 = -1 << *(_BYTE *)(*(_QWORD *)v326 + 32);
    if (-v42 < 64)
      v41 = ~(-1 << -(char)v42);
    v43 = v41 & *(_QWORD *)(*(_QWORD *)v326 + 64);
    v44 = &v333;
    p_tv_usec = &v329.tv_usec;
    v46 = &v330[1];
    v294 = (unint64_t)(63 - v42) >> 6;
    swift_bridgeObjectRetain();
    v305 = 0;
    if (v43)
      goto LABEL_33;
LABEL_34:
    v53 = v305 + 1;
    if (__OFADD__(v305, 1))
    {
LABEL_346:
      __break(1u);
LABEL_347:
      __break(1u);
LABEL_348:
      __break(1u);
LABEL_349:

      goto LABEL_340;
    }
    if (v53 < v294)
    {
      v54 = *(_QWORD *)(v299 + 8 * v53);
      v55 = v305 + 1;
      if (v54)
        goto LABEL_53;
      v55 = v305 + 2;
      if (v305 + 2 < v294)
      {
        v54 = *(_QWORD *)(v299 + 8 * v55);
        if (v54)
          goto LABEL_53;
        v55 = v305 + 3;
        if (v305 + 3 < v294)
        {
          v54 = *(_QWORD *)(v299 + 8 * v55);
          if (v54)
            goto LABEL_53;
          v55 = v305 + 4;
          if (v305 + 4 < v294)
          {
            v54 = *(_QWORD *)(v299 + 8 * v55);
            if (v54)
              goto LABEL_53;
            v55 = v305 + 5;
            if (v305 + 5 < v294)
            {
              v54 = *(_QWORD *)(v299 + 8 * v55);
              if (v54)
                goto LABEL_53;
              v55 = v305 + 6;
              if (v305 + 6 < v294)
              {
                v54 = *(_QWORD *)(v299 + 8 * v55);
                if (v54)
                  goto LABEL_53;
                v56 = v305 + 7;
                if (v305 + 7 < v294)
                {
                  v54 = *(_QWORD *)(v299 + 8 * v56);
                  if (!v54)
                  {
                    while (1)
                    {
                      v55 = v56 + 1;
                      if (__OFADD__(v56, 1))
                        break;
                      if (v55 >= v294)
                        goto LABEL_59;
                      v54 = *(_QWORD *)(v299 + 8 * v55);
                      ++v56;
                      if (v54)
                        goto LABEL_53;
                    }
                    __break(1u);
LABEL_367:
                    __break(1u);
                    goto LABEL_368;
                  }
                  v55 = v305 + 7;
LABEL_53:
                  v305 = v55;
                  v311 = (v54 - 1) & v54;
                  for (i = __clz(__rbit64(v54)) + (v55 << 6); ; i = __clz(__rbit64(v43)) | (v305 << 6))
                  {
                    v57 = v39[3].tv_sec + 16 * i;
                    v59 = *(char **)v57;
                    v58 = *(_QWORD *)(v57 + 8);
                    outlined init with copy of AnyHashable(*(_QWORD *)&v39[3].tv_usec + 40 * i, (uint64_t)v44);
                    *(_QWORD *)&v332 = v59;
                    *((_QWORD *)&v332 + 1) = v58;
                    v60 = v44[1];
                    *(_OWORD *)v326 = *v44;
                    *(_OWORD *)&v326[16] = v60;
                    v327 = *((_QWORD *)v44 + 4);
                    tv_sec = v59;
                    v329.tv_sec = v58;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v61 = (uint64_t)tv_sec;
                    v24 = v329.tv_sec;
                    outlined init with take of Any(p_tv_usec, v46);
                    outlined init with take of Any(v46, &v323);
                    outlined init with take of Any(&v323, v330);
                    v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v24);
                    v63 = v62;
                    if ((v64 & 1) != 0)
                    {
                      v47 = v44;
                      v48 = v46;
                      v49 = p_tv_usec;
                      v50 = v39;
                      v51 = (uint64_t *)(v40[6] + 16 * v62);
                      swift_bridgeObjectRelease();
                      *v51 = v61;
                      v51[1] = v24;
                      v39 = v50;
                      p_tv_usec = v49;
                      v46 = v48;
                      v44 = v47;
                      v24 = v40[7] + 32 * v63;
                      __swift_destroy_boxed_opaque_existential_1(v24);
                      outlined init with take of Any(v330, (_OWORD *)v24);
                      v43 = v311;
                      if (!v311)
                        goto LABEL_34;
                    }
                    else
                    {
                      if (v40[2] >= v40[3])
                      {
                        __break(1u);
LABEL_345:
                        __break(1u);
                        goto LABEL_346;
                      }
                      *(_QWORD *)((char *)v40 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v62;
                      v65 = (uint64_t *)(v40[6] + 16 * v62);
                      *v65 = v61;
                      v65[1] = v24;
                      outlined init with take of Any(v330, (_OWORD *)(v40[7] + 32 * v62));
                      v66 = v40[2];
                      v67 = __OFADD__(v66, 1);
                      v68 = v66 + 1;
                      if (v67)
                        goto LABEL_345;
                      v40[2] = v68;
                      v43 = v311;
                      if (!v311)
                        goto LABEL_34;
                    }
LABEL_33:
                    v311 = (v43 - 1) & v43;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v69 = objc_allocWithZone((Class)NSError);
    v70 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v71 = objc_msgSend(v69, sel_initWithDomain_code_userInfo_, v70, 512, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v72 = objc_msgSend(v71, sel_domain);
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v75 = v74;

    if (v73 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v75 != v76)
    {
      v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v78 & 1) != 0)
        return swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  v13 = a1;
  v310 = (char *)a2;
  v14 = a5;
  v15 = a4;
  v16 = swift_allocObject();
  _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOi0_((uint64_t)&v332);
  outlined init with take of LocalePreferences?((uint64_t)&v332, v16 + 16, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  if (v15 != 2)
  {
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v16;
    *(_QWORD *)(v25 + 24) = v13;
    *(_QWORD *)(v25 + 32) = v310;
    *(_QWORD *)(v25 + 40) = a3;
    *(_BYTE *)(v25 + 48) = v14;
    *(_BYTE *)(v25 + 49) = v15;
    if ((v15 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      v27 = 0;
      v291 = (uint64_t)closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)partial apply;
      goto LABEL_69;
    }
    v18 = (uint64_t)v310;
    goto LABEL_9;
  }
  if (v14 != 2)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = v13;
    v18 = (uint64_t)v310;
    *(_QWORD *)(v17 + 32) = v310;
    *(_QWORD *)(v17 + 40) = a3;
    *(_BYTE *)(v17 + 48) = v14;
    *(_BYTE *)(v17 + 49) = 2;
LABEL_9:
    swift_retain_n();
    swift_bridgeObjectRetain();
    getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(v16, v13, v18, a3, (uint64_t)v326);
    outlined init with take of LocalePreferences?((uint64_t)v326, (uint64_t)&tv_sec, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
    outlined init with take of LocalePreferences?((uint64_t)&tv_sec, (uint64_t)v330, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
    if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)v330) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&tv_sec, (uint64_t)&v323, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
      destructiveProjectEnumData for PredicateCodableError(&v323, v26);
      lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
      swift_willThrowTypedImpl();
      swift_release();
      return swift_release_n();
    }
    outlined init with take of LocalePreferences?((uint64_t)&tv_sec, (uint64_t)&v323, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
    v29 = *(_DWORD *)(destructiveProjectEnumData for PredicateCodableError(&v323, v28) + 116);
    v30 = v29 & 0xFFFFFFFB;
    if ((v14 & 1) != 0)
      v30 = v29 | 4;
    if (v14 != 2)
      v29 = v30;
    v31 = v29 & 0xFFFFFFFD;
    if ((v15 & 1) != 0)
      v31 = v29 | 2;
    if (v15 == 2)
      v32 = v29;
    else
      v32 = v31;
    if (chflags(v13, v32))
    {
      v33 = MEMORY[0x186DA4118]();
      *(_QWORD *)&v314[0] = MEMORY[0x1E0DEE9E0];
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v36 = v35;
      v318 = v310;
      *(_QWORD *)&v319 = a3;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v320, (uint64_t)v34, v36);
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v13 = v38;
      URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v310, a3, (uint64_t)&v318);
      if (v318)
      {
        v316 = v318;
        v317 = v319;
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        v320 = 0u;
        v321 = 0u;
        v322 = 0;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v320, (uint64_t)v37, (uint64_t)v13);
      v174 = *(_QWORD *)&v314[0];
      swift_bridgeObjectRetain();
      if (v33 == 102)
        goto LABEL_213;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v13 = v176;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v177 = (int)POSIXErrorCode.rawValue.getter();
        v178 = objc_allocWithZone((Class)NSError);
        v179 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v180 = objc_msgSend(v178, sel_initWithDomain_code_userInfo_, v179, v177, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v181 = objc_msgSend(v180, sel_domain);
        a3 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v181);
        v183 = v182;

        if ((id)a3 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
          && v183 == v184)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          a3 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((a3 & 1) == 0)
          {
LABEL_370:
            __break(1u);
LABEL_371:
            __break(1u);
LABEL_372:
            __break(1u);
          }
        }
        v318 = (char *)v180;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v320, (uint64_t)v175, (uint64_t)v13);
        v174 = *(_QWORD *)&v314[0];
LABEL_213:
        CocoaError.Code.init(fileErrno:reading:)(v33, 0);
        v39 = *(timeval **)(v174 + 16);
        if (v39)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v121 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v121 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v302 = v174 + 64;
        v195 = -1;
        v196 = -1 << *(_BYTE *)(v174 + 32);
        v291 = ~v196;
        if (-v196 < 64)
          v195 = ~(-1 << -(char)v196);
        v197 = v195 & *(_QWORD *)(v174 + 64);
        v198 = &v321;
        v199 = (__int128 *)((char *)&v317 + 8);
        v80 = (uint64_t)&v319 + 8;
        v297 = (unint64_t)(63 - v196) >> 6;
        swift_bridgeObjectRetain();
        v308 = 0;
        if (v197)
          goto LABEL_221;
LABEL_222:
        v206 = v308 + 1;
        if (!__OFADD__(v308, 1))
        {
          if (v206 >= v297)
            goto LABEL_247;
          v207 = *(_QWORD *)(v302 + 8 * v206);
          v208 = v308 + 1;
          if (!v207)
          {
            v208 = v308 + 2;
            if (v308 + 2 >= v297)
              goto LABEL_247;
            v207 = *(_QWORD *)(v302 + 8 * v208);
            if (!v207)
            {
              v208 = v308 + 3;
              if (v308 + 3 >= v297)
                goto LABEL_247;
              v207 = *(_QWORD *)(v302 + 8 * v208);
              if (!v207)
              {
                v208 = v308 + 4;
                if (v308 + 4 >= v297)
                  goto LABEL_247;
                v207 = *(_QWORD *)(v302 + 8 * v208);
                if (!v207)
                {
                  v208 = v308 + 5;
                  if (v308 + 5 >= v297)
                    goto LABEL_247;
                  v207 = *(_QWORD *)(v302 + 8 * v208);
                  if (!v207)
                  {
                    v208 = v308 + 6;
                    if (v308 + 6 >= v297)
                      goto LABEL_247;
                    v207 = *(_QWORD *)(v302 + 8 * v208);
                    if (!v207)
                    {
                      v209 = v308 + 7;
                      if (v308 + 7 < v297)
                      {
                        v207 = *(_QWORD *)(v302 + 8 * v209);
                        if (v207)
                        {
                          v208 = v308 + 7;
                          goto LABEL_241;
                        }
                        while (1)
                        {
                          v208 = v209 + 1;
                          if (__OFADD__(v209, 1))
                            goto LABEL_369;
                          if (v208 >= v297)
                            break;
                          v207 = *(_QWORD *)(v302 + 8 * v208);
                          ++v209;
                          if (v207)
                            goto LABEL_241;
                        }
                      }
LABEL_247:
                      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                      swift_bridgeObjectRelease();
                      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                      v219 = objc_allocWithZone((Class)NSError);
                      v220 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      v221 = objc_msgSend(v219, sel_initWithDomain_code_userInfo_, v220, v312, _NativeDictionary.bridged()());
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      v222 = objc_msgSend(v221, sel_domain);
                      v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
                      v225 = v224;

                      if (v223 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                        || v225 != v226)
                      {
                        v228 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v228 & 1) != 0)
                        {
LABEL_254:
                          swift_willThrow();
                          swift_release();
                          return swift_release_n();
                        }
                        __break(1u);
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_254;
                    }
                  }
                }
              }
            }
          }
LABEL_241:
          v308 = v208;
          v310 = (char *)((v207 - 1) & v207);
          for (j = __clz(__rbit64(v207)) + (v208 << 6); ; j = __clz(__rbit64(v197)) | (v308 << 6))
          {
            v210 = (char **)(*(_QWORD *)(v174 + 48) + 16 * j);
            v212 = *v210;
            v211 = v210[1];
            outlined init with copy of AnyHashable(*(_QWORD *)(v174 + 56) + 40 * j, (uint64_t)v198);
            *(_QWORD *)&v320 = v212;
            *((_QWORD *)&v320 + 1) = v211;
            v213 = v198[1];
            v314[0] = *v198;
            v314[1] = v213;
            v315 = *((_QWORD *)v198 + 4);
            v316 = v212;
            *(_QWORD *)&v317 = v211;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v13 = v316;
            v39 = (timeval *)v317;
            outlined init with take of Any(v199, (_OWORD *)v80);
            outlined init with take of Any((_OWORD *)v80, v313);
            outlined init with take of Any(v313, &v318);
            v214 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13, (uint64_t)v39);
            a3 = v214;
            if ((v215 & 1) != 0)
            {
              v200 = v198;
              v201 = v80;
              v202 = v199;
              v203 = v174;
              v204 = (char **)(v121[6] + 16 * v214);
              swift_bridgeObjectRelease();
              *v204 = v13;
              v204[1] = (char *)v39;
              v174 = v203;
              v199 = v202;
              v80 = v201;
              v198 = v200;
              v39 = (timeval *)(v121[7] + 32 * a3);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
              outlined init with take of Any(&v318, v39);
              v197 = (unint64_t)v310;
              if (!v310)
                goto LABEL_222;
            }
            else
            {
              if (v121[2] >= v121[3])
                goto LABEL_351;
              *(_QWORD *)((char *)v121 + ((v214 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v214;
              v216 = (char **)(v121[6] + 16 * v214);
              *v216 = v13;
              v216[1] = (char *)v39;
              outlined init with take of Any(&v318, (_OWORD *)(v121[7] + 32 * v214));
              v217 = v121[2];
              v67 = __OFADD__(v217, 1);
              v218 = v217 + 1;
              if (v67)
                goto LABEL_352;
              v121[2] = v218;
              v197 = (unint64_t)v310;
              if (!v310)
                goto LABEL_222;
            }
LABEL_221:
            v310 = (char *)((v197 - 1) & v197);
          }
        }
        goto LABEL_353;
      }
      *(_QWORD *)&v320 = 0;
      *((_QWORD *)&v320 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v320 = 0xD000000000000014;
      *((_QWORD *)&v320 + 1) = 0x8000000182306980;
      LODWORD(v318) = v33;
      v288._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v288);
      swift_bridgeObjectRelease();
LABEL_376:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181C8292CLL);
    }
    swift_release();
    swift_release();
  }
  v291 = 0;
  v27 = 1;
LABEL_69:
  v80 = (uint64_t)v310;
  v292 = v16;
  if ((a7 & 1) != 0)
  {
    v295 = v27;
    goto LABEL_76;
  }
  v81 = (_QWORD *)swift_allocObject();
  v81[2] = v13;
  v81[3] = a6;
  v81[4] = v310;
  v81[5] = a3;
  if (a6 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_374;
  }
  swift_bridgeObjectRetain();
  if (((unsigned __int16)S_IWUSR.getter() & (unsigned __int16)a6) != 0)
  {
    swift_retain();
    if (chmod(v13, a6))
    {
      LODWORD(a6) = MEMORY[0x186DA4118]();
      v323.tv_sec = MEMORY[0x1E0DEE9E0];
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v84 = v83;
      tv_sec = v310;
      v329.tv_sec = a3;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)v330, (uint64_t)v82, v84);
      v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v13 = v86;
      URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v310, a3, (uint64_t)&tv_sec);
      if (*(double *)&tv_sec == 0.0)
      {
        memset(v330, 0, sizeof(v330));
        v331 = 0;
      }
      else
      {
        *(_QWORD *)v326 = tv_sec;
        *(timeval *)&v326[8] = v329;
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      specialized Dictionary.subscript.setter((uint64_t)v330, (uint64_t)v85, (uint64_t)v13);
      a3 = v323.tv_sec;
      v318 = (char *)v323.tv_sec;
      swift_bridgeObjectRetain();
      if ((_DWORD)a6 == 102)
        goto LABEL_260;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v13 = v186;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v187 = (int)POSIXErrorCode.rawValue.getter();
        v188 = objc_allocWithZone((Class)NSError);
        v189 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v80 = (uint64_t)objc_msgSend(v188, sel_initWithDomain_code_userInfo_, v189, v187, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v190 = objc_msgSend((id)v80, sel_domain);
        v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
        v193 = v192;

        if (v191 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v193 == v194)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v229 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v229 & 1) == 0)
            goto LABEL_372;
        }
        tv_sec = (char *)v80;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)v330, (uint64_t)v185, (uint64_t)v13);
        a3 = (unint64_t)v318;
LABEL_260:
        CocoaError.Code.init(fileErrno:reading:)(a6, 0);
        v39 = *(timeval **)(a3 + 16);
        v290 = (void (__cdecl *)())v316;
        if (v39)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v121 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v121 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v303 = a3 + 64;
        v230 = -1;
        v231 = -1 << *(_BYTE *)(a3 + 32);
        if (-v231 < 64)
          v230 = ~(-1 << -(char)v231);
        v232 = v230 & *(_QWORD *)(a3 + 64);
        v233 = &v330[1];
        v234 = &v326[16];
        v235 = &v329.tv_usec;
        v298 = (unint64_t)(63 - v231) >> 6;
        swift_bridgeObjectRetain();
        v309 = 0;
        if (v232)
          goto LABEL_268;
LABEL_269:
        v242 = v309 + 1;
        if (__OFADD__(v309, 1))
        {
          __break(1u);
          goto LABEL_362;
        }
        if (v242 < v298)
        {
          v243 = *(_QWORD *)(v303 + 8 * v242);
          v244 = v309 + 1;
          if (v243)
            goto LABEL_288;
          v244 = v309 + 2;
          if (v309 + 2 < v298)
          {
            v243 = *(_QWORD *)(v303 + 8 * v244);
            if (v243)
              goto LABEL_288;
            v244 = v309 + 3;
            if (v309 + 3 < v298)
            {
              v243 = *(_QWORD *)(v303 + 8 * v244);
              if (v243)
                goto LABEL_288;
              v244 = v309 + 4;
              if (v309 + 4 < v298)
              {
                v243 = *(_QWORD *)(v303 + 8 * v244);
                if (v243)
                  goto LABEL_288;
                v244 = v309 + 5;
                if (v309 + 5 < v298)
                {
                  v243 = *(_QWORD *)(v303 + 8 * v244);
                  if (v243)
                    goto LABEL_288;
                  v244 = v309 + 6;
                  if (v309 + 6 < v298)
                  {
                    v243 = *(_QWORD *)(v303 + 8 * v244);
                    if (v243)
                      goto LABEL_288;
                    v245 = v309 + 7;
                    if (v309 + 7 < v298)
                    {
                      v243 = *(_QWORD *)(v303 + 8 * v245);
                      if (!v243)
                      {
                        while (1)
                        {
                          v244 = v245 + 1;
                          if (__OFADD__(v245, 1))
                            goto LABEL_371;
                          if (v244 >= v298)
                            goto LABEL_294;
                          v243 = *(_QWORD *)(v303 + 8 * v244);
                          ++v245;
                          if (v243)
                            goto LABEL_288;
                        }
                      }
                      v244 = v309 + 7;
LABEL_288:
                      v309 = v244;
                      v310 = (char *)((v243 - 1) & v243);
                      for (k = __clz(__rbit64(v243)) + (v244 << 6); ; k = __clz(__rbit64(v232)) | (v309 << 6))
                      {
                        v246 = (__darwin_time_t *)(*(_QWORD *)(a3 + 48) + 16 * k);
                        v248 = *v246;
                        v247 = v246[1];
                        outlined init with copy of AnyHashable(*(_QWORD *)(a3 + 56) + 40 * k, (uint64_t)v233);
                        v330[0].tv_sec = v248;
                        *(_QWORD *)&v330[0].tv_usec = v247;
                        v249 = v233[1];
                        v323 = *v233;
                        v324 = v249;
                        v325 = v233[2].tv_sec;
                        *(_QWORD *)v326 = v248;
                        *(_QWORD *)&v326[8] = v247;
                        swift_bridgeObjectRetain();
                        swift_dynamicCast();
                        v13 = *(char **)v326;
                        v39 = *(timeval **)&v326[8];
                        outlined init with take of Any(v234, v235);
                        outlined init with take of Any(v235, &v320);
                        outlined init with take of Any(&v320, &tv_sec);
                        v250 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13, (uint64_t)v39);
                        v80 = v250;
                        if ((v251 & 1) != 0)
                        {
                          v236 = v233;
                          v237 = v235;
                          v238 = v234;
                          v239 = a3;
                          v240 = (char **)(v121[6] + 16 * v250);
                          swift_bridgeObjectRelease();
                          *v240 = v13;
                          v240[1] = (char *)v39;
                          a3 = v239;
                          v234 = v238;
                          v235 = v237;
                          v233 = v236;
                          v39 = (timeval *)(v121[7] + 32 * v80);
                          __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
                          outlined init with take of Any(&tv_sec, v39);
                          v232 = (unint64_t)v310;
                          if (!v310)
                            goto LABEL_269;
                        }
                        else
                        {
                          if (v121[2] >= v121[3])
                            goto LABEL_354;
                          *(_QWORD *)((char *)v121 + ((v250 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v250;
                          v252 = (char **)(v121[6] + 16 * v250);
                          *v252 = v13;
                          v252[1] = (char *)v39;
                          outlined init with take of Any(&tv_sec, (_OWORD *)(v121[7] + 32 * v250));
                          v253 = v121[2];
                          v67 = __OFADD__(v253, 1);
                          v254 = v253 + 1;
                          if (v67)
                            goto LABEL_355;
                          v121[2] = v254;
                          v232 = (unint64_t)v310;
                          if (!v310)
                            goto LABEL_269;
                        }
LABEL_268:
                        v310 = (char *)((v232 - 1) & v232);
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_294:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v255 = objc_allocWithZone((Class)NSError);
        v256 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v257 = objc_msgSend(v255, sel_initWithDomain_code_userInfo_, v256, v290, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v258 = objc_msgSend(v257, sel_domain);
        v259 = static String._unconditionallyBridgeFromObjectiveC(_:)(v258);
        v261 = v260;

        if (v259 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v261 != v262)
        {
          v264 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v168 = v291;
          if ((v264 & 1) != 0)
          {
LABEL_301:
            swift_willThrow();
            swift_release_n();
            goto LABEL_302;
          }
          __break(1u);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v168 = v291;
        goto LABEL_301;
      }
LABEL_374:
      v330[0].tv_sec = 0;
      *(_QWORD *)&v330[0].tv_usec = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v330[0].tv_sec = 0xD000000000000014;
      *(_QWORD *)&v330[0].tv_usec = 0x8000000182306980;
      LODWORD(tv_sec) = a6;
      v287._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v287);
      swift_bridgeObjectRelease();
      goto LABEL_376;
    }
    v295 = v27;
    swift_release_n();
LABEL_76:
    v87 = 0;
    v300 = 1;
    if (*(_QWORD *)(a8 + 16))
      goto LABEL_77;
LABEL_87:
    memset(v330, 0, sizeof(v330));
LABEL_88:
    outlined destroy of Any?((uint64_t)v330, &demangling cache variable for type metadata for Any?);
    v306 = 0;
    v93 = 0;
    goto LABEL_89;
  }
  v295 = v27;
  v300 = 0;
  v87 = partial apply for closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:);
  if (!*(_QWORD *)(a8 + 16))
    goto LABEL_87;
LABEL_77:
  v88 = CFSTR("NSFileOwnerAccountName");
  v89 = specialized __RawDictionaryStorage.find<A>(_:)(v88);
  if ((v90 & 1) != 0)
    outlined init with copy of Any(*(_QWORD *)(a8 + 56) + 32 * v89, (uint64_t)v330);
  else
    memset(v330, 0, sizeof(v330));

  if (!*(_QWORD *)&v330[1].tv_usec)
    goto LABEL_88;
  v91 = swift_dynamicCast();
  v92 = (uint64_t)tv_sec;
  if (!v91)
    v92 = 0;
  v306 = v92;
  if (v91)
    v93 = v329.tv_sec;
  else
    v93 = 0;
LABEL_89:
  v290 = (void (__cdecl *)())v87;
  if (*(_QWORD *)(a8 + 16))
  {
    v94 = CFSTR("NSFileOwnerAccountID");
    v95 = specialized __RawDictionaryStorage.find<A>(_:)(v94);
    if ((v96 & 1) != 0)
      outlined init with copy of Any(*(_QWORD *)(a8 + 56) + 32 * v95, (uint64_t)v330);
    else
      memset(v330, 0, sizeof(v330));

  }
  else
  {
    memset(v330, 0, sizeof(v330));
  }
  v97 = (unint64_t)specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)v330);
  v99 = v98;
  outlined destroy of Any?((uint64_t)v330, &demangling cache variable for type metadata for Any?);
  if (*(_QWORD *)(a8 + 16))
  {
    v100 = CFSTR("NSFileGroupOwnerAccountName");
    v101 = specialized __RawDictionaryStorage.find<A>(_:)(v100);
    if ((v102 & 1) != 0)
      outlined init with copy of Any(*(_QWORD *)(a8 + 56) + 32 * v101, (uint64_t)v330);
    else
      memset(v330, 0, sizeof(v330));

    if (*(_QWORD *)&v330[1].tv_usec)
    {
      v103 = swift_dynamicCast();
      v104 = (uint64_t)tv_sec;
      if (!v103)
        v104 = 0;
      v304 = v104;
      if (v103)
        v105 = v329.tv_sec;
      else
        v105 = 0;
      if (!*(_QWORD *)(a8 + 16))
        goto LABEL_107;
      goto LABEL_109;
    }
  }
  else
  {
    memset(v330, 0, sizeof(v330));
  }
  outlined destroy of Any?((uint64_t)v330, &demangling cache variable for type metadata for Any?);
  v304 = 0;
  v105 = 0;
  if (!*(_QWORD *)(a8 + 16))
  {
LABEL_107:
    memset(v330, 0, sizeof(v330));
    goto LABEL_113;
  }
LABEL_109:
  v106 = CFSTR("NSFileGroupOwnerAccountID");
  v107 = specialized __RawDictionaryStorage.find<A>(_:)(v106);
  if ((v108 & 1) != 0)
    outlined init with copy of Any(*(_QWORD *)(a8 + 56) + 32 * v107, (uint64_t)v330);
  else
    memset(v330, 0, sizeof(v330));

LABEL_113:
  v109 = (unint64_t)specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)v330);
  v111 = v110;
  outlined destroy of Any?((uint64_t)v330, &demangling cache variable for type metadata for Any?);
  if (v93)
  {
    if ((v99 & 1) != 0 || HIDWORD(v97))
    {
      v97 = specialized String.withCString<A>(_:)(v306, v93, (uint64_t)closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:), (uint64_t (*)(_QWORD *))MEMORY[0x1E0C83790]);
      v112 = v293;
      swift_bridgeObjectRelease();
      if ((v97 & 0x100000000) != 0)
        goto LABEL_124;
LABEL_127:
      if ((v111 & 1) != 0)
        goto LABEL_130;
      goto LABEL_128;
    }
LABEL_126:
    swift_bridgeObjectRelease();
    v112 = v293;
    goto LABEL_127;
  }
  if ((v99 & 1) == 0)
  {
    if (!HIDWORD(v97))
      goto LABEL_126;
LABEL_123:
    v112 = v293;
    goto LABEL_124;
  }
  if (v105)
    goto LABEL_123;
  v112 = v293;
  if ((v111 & 1) != 0)
    goto LABEL_136;
LABEL_124:
  LODWORD(v97) = -1;
  if ((v111 & 1) != 0)
    goto LABEL_130;
LABEL_128:
  if (!HIDWORD(v109))
  {
    swift_bridgeObjectRelease();
    goto LABEL_133;
  }
LABEL_130:
  if (!v105
    || (v109 = specialized String.withCString<A>(_:)(v304, v105, (uint64_t)closure #1 in static _FileManagerImpl._groupAccountNameToNumber(_:), MEMORY[0x1E0C83690]), swift_bridgeObjectRelease(), (v109 & 0x100000000) != 0))
  {
    LODWORD(v109) = -1;
  }
LABEL_133:
  if (!chown(v13, v97, v109))
  {
LABEL_136:
    specialized static _FileManagerImpl._setCatInfoAttributes(_:path:)(a8, (uint64_t)v310, a3);
    if (v112)
    {
      v119 = (uint64_t)v290;
LABEL_341:
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v119);
      v265 = v291;
      goto LABEL_342;
    }
    v170 = String._bridgeToObjectiveCImpl()();
    v24 = (uint64_t)v290;
    if (*(_QWORD *)(a8 + 16) && (v171 = specialized __RawDictionaryStorage.find<A>(_:)(v170), (v172 & 1) != 0))
      outlined init with copy of Any(*(_QWORD *)(a8 + 56) + 32 * v171, (uint64_t)v330);
    else
      memset(v330, 0, sizeof(v330));
    swift_unknownObjectRelease();
    if (*(_QWORD *)&v330[1].tv_usec)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      if ((swift_dynamicCast() & 1) != 0)
      {
        specialized static _FileManagerImpl._setAttributes(_:at:followSymLinks:)((uint64_t)tv_sec);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v330, &demangling cache variable for type metadata for Any?);
    }
    if (*(_QWORD *)(a8 + 16))
    {
      v266 = CFSTR("NSFileModificationDate");
      v267 = specialized __RawDictionaryStorage.find<A>(_:)(v266);
      if ((v268 & 1) != 0)
        outlined init with copy of Any(*(_QWORD *)(a8 + 56) + 32 * v267, (uint64_t)v330);
      else
        memset(v330, 0, sizeof(v330));

      if (*(_QWORD *)&v330[1].tv_usec)
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v269 = COERCE_UNSIGNED_INT64(*(double *)&tv_sec + 978307200.0) & 0x7FF0000000000000;
          v270 = trunc(*(double *)&tv_sec + 978307200.0);
          v271 = v269 == 0x7FF0000000000000 ? *(double *)&tv_sec + 978307200.0 : v270;
          if (v271 > -9.22337204e18 && v271 < 9.22337204e18 && v271 == trunc(v271))
          {
            v272 = (*(double *)&tv_sec + 978307200.0 - v270) * 1000000.0;
            if (v269 == 0x7FF0000000000000)
              v272 = 0.0;
            v273 = round(v272);
            if (v273 > -2147483650.0 && v273 < 2147483650.0)
            {
              v330[0].tv_sec = (uint64_t)v271;
              v330[0].tv_usec = (int)v273;
              v330[1].tv_sec = (uint64_t)v271;
              v330[1].tv_usec = (int)v273;
              closure #1 in closure #4 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(v330, v13, (uint64_t)v310, a3, (unint64_t)&tv_sec);
              if ((v300 & 1) != 0)
              {
LABEL_327:
                if ((v295 & 1) == 0)
                {
                  swift_retain();
                  ((void (__cdecl *)())v291)();
                  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v291);
                }
                if (*(_QWORD *)(a8 + 16))
                {
                  v274 = CFSTR("NSFileProtectionKey");
                  v275 = specialized __RawDictionaryStorage.find<A>(_:)(v274);
                  if ((v276 & 1) != 0)
                    outlined init with copy of Any(*(_QWORD *)(a8 + 56) + 32 * v275, (uint64_t)v330);
                  else
                    memset(v330, 0, sizeof(v330));

                  if (*(_QWORD *)&v330[1].tv_usec)
                  {
                    type metadata accessor for NSFileProtectionType(0);
                    if ((swift_dynamicCast() & 1) != 0)
                    {
                      v39 = tv_sec;
                      v277 = NSFileProtectionType.intValue.getter(v39);
                      if ((v277 & 0x100000000) == 0)
                      {
                        v121 = (_QWORD *)v277;
                        v80 = v292;
                        getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(v292, v13, (uint64_t)v310, a3, (uint64_t)v326);
                        outlined init with take of LocalePreferences?((uint64_t)v326, (uint64_t)&tv_sec, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
                        outlined init with take of LocalePreferences?((uint64_t)&tv_sec, (uint64_t)v330, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
                        v278 = _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)v330);
                        v137 = (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>;
                        if (v278 == 1)
                        {
                          outlined init with take of LocalePreferences?((uint64_t)&tv_sec, (uint64_t)&v323, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
                          *(_QWORD *)&v313[0] = *(_QWORD *)destructiveProjectEnumData for PredicateCodableError(&v323, v279);
                          lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
                          swift_willThrowTypedImpl();
LABEL_358:

                          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v290);
                          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v291);
                          return swift_release();
                        }
LABEL_356:
                        outlined init with take of LocalePreferences?((uint64_t)&tv_sec, (uint64_t)&v323, v137);
                        v281 = *(unsigned __int16 *)(destructiveProjectEnumData for PredicateCodableError(&v323, v280)
                                                   + 4);
                        v282 = S_IFMT.getter() & v281;
                        if (v282 == (unsigned __int16)S_IFREG.getter())
                        {
LABEL_357:
                          specialized static _FileManagerImpl._setFileProtectionValueForPath(_:_:newValue:)((uint64_t)v310, a3, v13, (uint64_t)v121);
                          goto LABEL_358;
                        }
LABEL_362:
                        getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(v80, v13, (uint64_t)v310, a3, (uint64_t)&v316);
                        outlined init with take of LocalePreferences?((uint64_t)&v316, (uint64_t)&v318, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
                        outlined init with take of LocalePreferences?((uint64_t)&v318, (uint64_t)&v320, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
                        if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)&v320) == 1)
                        {
                          outlined init with take of LocalePreferences?((uint64_t)&v318, (uint64_t)v314, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
                          destructiveProjectEnumData for PredicateCodableError(v314, v283);
                          lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
                          swift_willThrowTypedImpl();

                          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v290);
                          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v291);
                          return swift_release();
                        }
                        outlined init with take of LocalePreferences?((uint64_t)&v318, (uint64_t)v314, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
                        v285 = *(unsigned __int16 *)(destructiveProjectEnumData for PredicateCodableError(v314, v284) + 4);
                        v286 = S_IFMT.getter() & v285;
                        if (v286 != (unsigned __int16)S_IFDIR.getter())
                          goto LABEL_358;
                        goto LABEL_357;
                      }
                      goto LABEL_349;
                    }
LABEL_340:
                    v119 = v24;
                    goto LABEL_341;
                  }
                }
                else
                {
                  memset(v330, 0, sizeof(v330));
                }
                outlined destroy of Any?((uint64_t)v330, &demangling cache variable for type metadata for Any?);
                goto LABEL_340;
              }
LABEL_326:
              swift_retain();
              v290();
              outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v290);
              goto LABEL_327;
            }
          }
        }
LABEL_325:
        if ((v300 & 1) != 0)
          goto LABEL_327;
        goto LABEL_326;
      }
    }
    else
    {
      memset(v330, 0, sizeof(v330));
    }
    outlined destroy of Any?((uint64_t)v330, &demangling cache variable for type metadata for Any?);
    goto LABEL_325;
  }
  LODWORD(a6) = MEMORY[0x186DA4118]();
  v323.tv_sec = MEMORY[0x1E0DEE9E0];
  v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v115 = v114;
  v80 = (uint64_t)v310;
  tv_sec = v310;
  v329.tv_sec = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)v330, (uint64_t)v113, v115);
  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v118 = v117;
  URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v310, a3, (uint64_t)&tv_sec);
  if (*(double *)&tv_sec == 0.0)
  {
    memset(v330, 0, sizeof(v330));
    v331 = 0;
  }
  else
  {
    *(_QWORD *)v326 = tv_sec;
    *(timeval *)&v326[8] = v329;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  specialized Dictionary.subscript.setter((uint64_t)v330, (uint64_t)v116, v118);
  v318 = (char *)v323.tv_sec;
  swift_bridgeObjectRetain();
  if ((_DWORD)a6 == 102)
  {
LABEL_140:
    v120 = 512;
  }
  else
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_374;
    v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v124 = v123;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v125 = (int)POSIXErrorCode.rawValue.getter();
    v126 = objc_allocWithZone((Class)NSError);
    v127 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v80 = (uint64_t)objc_msgSend(v126, sel_initWithDomain_code_userInfo_, v127, v125, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v128 = objc_msgSend((id)v80, sel_domain);
    v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
    v131 = v130;

    if (v129 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v131 == v132)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v173 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v173 & 1) == 0)
      {
LABEL_368:
        __break(1u);
LABEL_369:
        __break(1u);
        goto LABEL_370;
      }
    }
    tv_sec = (char *)v80;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)v330, (uint64_t)v122, v124);
    v120 = 4;
    switch((int)a6)
    {
      case 1:
      case 13:
        v120 = 513;
        break;
      case 2:
        break;
      case 17:
        v120 = 516;
        break;
      case 28:
      case 69:
        v120 = 640;
        break;
      case 30:
        v120 = 642;
        break;
      case 63:
        v120 = 514;
        break;
      default:
        goto LABEL_140;
    }
  }
  a3 = (unint64_t)v318;
  v289 = v120;
  if (*((_QWORD *)v318 + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v121 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v121 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v301 = v318 + 64;
  v133 = -1;
  v134 = -1 << v318[32];
  if (-v134 < 64)
    v133 = ~(-1 << -(char)v134);
  v135 = v133 & *((_QWORD *)v318 + 8);
  v39 = &v330[1];
  v136 = &v326[16];
  v13 = (char *)&v329.tv_usec;
  v296 = (unint64_t)(63 - v134) >> 6;
  swift_bridgeObjectRetain();
  v307 = 0;
  v24 = 40;
  if (v135)
    goto LABEL_153;
LABEL_154:
  v144 = v307 + 1;
  if (__OFADD__(v307, 1))
  {
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
    goto LABEL_356;
  }
  if (v144 < v296)
  {
    v145 = *(_QWORD *)&v301[8 * v144];
    if (v145)
    {
LABEL_170:
      v307 = v144;
      v310 = (char *)((v145 - 1) & v145);
      for (m = __clz(__rbit64(v145)) + (v144 << 6); ; m = __clz(__rbit64(v135)) | (v307 << 6))
      {
        v147 = (__darwin_time_t *)(*(_QWORD *)(a3 + 48) + 16 * m);
        v149 = *v147;
        v148 = v147[1];
        outlined init with copy of AnyHashable(*(_QWORD *)(a3 + 56) + 40 * m, (uint64_t)v39);
        v330[0].tv_sec = v149;
        *(_QWORD *)&v330[0].tv_usec = v148;
        v150 = v39[1];
        v323 = *v39;
        v324 = v150;
        v325 = v39[2].tv_sec;
        *(_QWORD *)v326 = v149;
        *(_QWORD *)&v326[8] = v148;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v151 = *(_QWORD *)v326;
        v152 = *(_QWORD *)&v326[8];
        outlined init with take of Any(v136, v13);
        outlined init with take of Any(v13, &v320);
        outlined init with take of Any(&v320, &tv_sec);
        v153 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v152);
        v80 = v153;
        if ((v154 & 1) != 0)
        {
          v138 = v39;
          v139 = v13;
          v140 = v136;
          v141 = a3;
          v142 = (uint64_t *)(v121[6] + 16 * v153);
          swift_bridgeObjectRelease();
          *v142 = v151;
          v142[1] = v152;
          a3 = v141;
          v136 = v140;
          v13 = v139;
          v39 = v138;
          v24 = 40;
          v80 = v121[7] + 32 * v80;
          __swift_destroy_boxed_opaque_existential_1(v80);
          outlined init with take of Any(&tv_sec, (_OWORD *)v80);
          v135 = (unint64_t)v310;
          if (!v310)
            goto LABEL_154;
        }
        else
        {
          if (v121[2] >= v121[3])
            goto LABEL_347;
          *(_QWORD *)((char *)v121 + ((v153 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v153;
          v155 = (uint64_t *)(v121[6] + 16 * v153);
          *v155 = v151;
          v155[1] = v152;
          outlined init with take of Any(&tv_sec, (_OWORD *)(v121[7] + 32 * v153));
          v156 = v121[2];
          v67 = __OFADD__(v156, 1);
          v157 = v156 + 1;
          if (v67)
            goto LABEL_348;
          v121[2] = v157;
          v135 = (unint64_t)v310;
          if (!v310)
            goto LABEL_154;
        }
LABEL_153:
        v310 = (char *)((v135 - 1) & v135);
      }
    }
    v146 = v307 + 2;
    if (v307 + 2 < v296)
    {
      v145 = *(_QWORD *)&v301[8 * v146];
      if (v145)
        goto LABEL_169;
      v146 = v307 + 3;
      if (v307 + 3 >= v296)
        goto LABEL_180;
      v145 = *(_QWORD *)&v301[8 * v146];
      if (v145)
        goto LABEL_169;
      v146 = v307 + 4;
      if (v307 + 4 >= v296)
        goto LABEL_180;
      v145 = *(_QWORD *)&v301[8 * v146];
      if (v145)
        goto LABEL_169;
      v146 = v307 + 5;
      if (v307 + 5 >= v296)
        goto LABEL_180;
      v145 = *(_QWORD *)&v301[8 * v146];
      if (v145)
        goto LABEL_169;
      v146 = v307 + 6;
      if (v307 + 6 >= v296)
        goto LABEL_180;
      v145 = *(_QWORD *)&v301[8 * v146];
      if (v145)
      {
LABEL_169:
        v144 = v146;
        goto LABEL_170;
      }
      v146 = v307 + 7;
      if (v307 + 7 < v296)
      {
        v145 = *(_QWORD *)&v301[8 * v146];
        if (v145)
          goto LABEL_169;
        while (1)
        {
          v144 = v146 + 1;
          if (__OFADD__(v146, 1))
            goto LABEL_367;
          if (v144 >= v296)
            break;
          v145 = *(_QWORD *)&v301[8 * v144];
          ++v146;
          if (v145)
            goto LABEL_170;
        }
      }
    }
  }
LABEL_180:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v158 = objc_allocWithZone((Class)NSError);
  v159 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v160 = objc_msgSend(v158, sel_initWithDomain_code_userInfo_, v159, v289, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v161 = objc_msgSend(v160, sel_domain);
  v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
  v164 = v163;

  if (v162 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v164 == v165)
    goto LABEL_186;
  v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v168 = v291;
  v169 = (uint64_t)v290;
  if ((v167 & 1) == 0)
  {
    __break(1u);
LABEL_186:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v168 = v291;
    v169 = (uint64_t)v290;
  }
  swift_willThrow();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v169);
LABEL_302:
  v265 = v168;
LABEL_342:
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v265);
  return swift_release();
}

