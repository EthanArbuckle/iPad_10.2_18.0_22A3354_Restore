uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v50 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v50 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v5) = v11;
    if (*(_QWORD *)(v50 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v50;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v5 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      if ((v5 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
      *(double *)v19 = a1;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 16) = 3;
LABEL_47:
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v50;
      if ((v11 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, *(uint64_t *)&a1, 0, 3, (_QWORD *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v20 = static _DictionaryStorage.copy(original:)();
  v16 = v20;
  if (!*(_QWORD *)(v50 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v21 = (char *)(v20 + 64);
  v22 = (char *)(v50 + 64);
  v23 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v50 + 64;
  if (v16 != v50 || v21 >= &v22[8 * v23])
    memmove(v21, v22, 8 * v23);
  v24 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v50 + 16);
  v25 = 1 << *(_BYTE *)(v50 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(v50 + 64);
  v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      v48 = (v27 - 1) & v27;
      v49 = v24;
      v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }
    v39 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v39 >= v45)
      goto LABEL_45;
    v40 = *(_QWORD *)(v44 + 8 * v39);
    v41 = v24 + 1;
    if (!v40)
    {
      v41 = v24 + 2;
      if (v24 + 2 >= v45)
        goto LABEL_45;
      v40 = *(_QWORD *)(v44 + 8 * v41);
      if (!v40)
      {
        v41 = v24 + 3;
        if (v24 + 3 >= v45)
          goto LABEL_45;
        v40 = *(_QWORD *)(v44 + 8 * v41);
        if (!v40)
        {
          v41 = v24 + 4;
          if (v24 + 4 >= v45)
            goto LABEL_45;
          v40 = *(_QWORD *)(v44 + 8 * v41);
          if (!v40)
          {
            v41 = v24 + 5;
            if (v24 + 5 >= v45)
              goto LABEL_45;
            v40 = *(_QWORD *)(v44 + 8 * v41);
            if (!v40)
            {
              v41 = v24 + 6;
              if (v24 + 6 >= v45)
                goto LABEL_45;
              v40 = *(_QWORD *)(v44 + 8 * v41);
              if (!v40)
              {
                v41 = v24 + 7;
                if (v24 + 7 >= v45)
                  goto LABEL_45;
                v40 = *(_QWORD *)(v44 + 8 * v41);
                if (!v40)
                {
                  v41 = v24 + 8;
                  if (v24 + 8 >= v45)
                    goto LABEL_45;
                  v40 = *(_QWORD *)(v44 + 8 * v41);
                  if (!v40)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v48 = (v40 - 1) & v40;
    v49 = v41;
    v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    v29 = 24 * v28;
    v30 = *(_QWORD *)(v50 + 48) + v29;
    v31 = *(_QWORD *)v30;
    v32 = *(_QWORD *)(v30 + 8);
    v33 = *(_QWORD *)(v50 + 56) + v29;
    v46 = *(_QWORD *)v33;
    v34 = *(_QWORD *)v33;
    v47 = *(_QWORD *)(v33 + 8);
    v35 = *(_QWORD *)(v16 + 48) + v29;
    v36 = *(_BYTE *)(v30 + 16);
    v37 = *(_BYTE *)(v33 + 16);
    *(_QWORD *)v35 = *(_QWORD *)v30;
    *(_QWORD *)(v35 + 8) = v32;
    *(_BYTE *)(v35 + 16) = v36;
    v38 = *(_QWORD *)(v16 + 56) + v29;
    *(_QWORD *)v38 = v34;
    *(_QWORD *)(v38 + 8) = v47;
    *(_BYTE *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    v27 = v48;
    v24 = v49;
  }
  v42 = v24 + 9;
  if (v24 + 9 >= v45)
    goto LABEL_45;
  v40 = *(_QWORD *)(v44 + 8 * v42);
  if (v40)
  {
    v41 = v24 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v45)
      goto LABEL_45;
    v40 = *(_QWORD *)(v44 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode<A>(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  char *v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD v75[2];
  unsigned __int8 v76;
  unint64_t v77;

  v73 = a4;
  v74 = a5;
  v72 = a1;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v66 - v12;
  v70 = a2;
  v71 = v5;
  v14 = *(_QWORD *)(*(_QWORD *)v5 + 40);
  v15 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v66 - v12, a2, v8, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v8);
  v16 = *(_QWORD *)(a3 + 24);
  swift_retain();
  v17 = v77;
  __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(v72, v14, (uint64_t)v13, v73, v8, v74, v16, v75);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }
  v73 = 0;
  v74 = v9;
  v19 = v71;
  v20 = v76;
  if (v76 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    v20 = 7;
    v21 = swift_allocObject();
    v77 = 0;
    *(_QWORD *)(v21 + 16) = MEMORY[0x1E0DEE9E0];
  }
  else
  {
    v21 = v75[0];
    v77 = v75[1];
  }
  (*(void (**)(char *, unint64_t))(v10 + 8))(v13, v74);
  swift_release();
  v22 = *(_QWORD *)(v19 + 8);
  v23 = *(_QWORD *)(v19 + 16);
  v24 = *(unsigned __int8 *)(v19 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v22, v23, *(_BYTE *)(v19 + 24));
  v25 = dispatch thunk of CodingKey.stringValue.getter();
  if (v24 != 7)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v27 = v25;
  v28 = v26;
  outlined copy of _XMLPlistEncodingFormat.Reference(v22, v23, 7);
  swift_bridgeObjectRetain();
  v72 = v21;
  v29 = v20;
  outlined copy of _XMLPlistEncodingFormat.Reference(v21, v77, v20);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31 = *(_QWORD *)(v22 + 16);
  v74 = v27;
  v75[0] = v31;
  *(_QWORD *)(v22 + 16) = 0x8000000000000000;
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28, 0);
  v34 = *(_QWORD *)(v31 + 16);
  v35 = (v32 & 1) == 0;
  v36 = v34 + v35;
  if (__OFADD__(v34, v35))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v21) = v32;
    if (*(_QWORD *)(v31 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      v37 = v75[0];
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v28, 0);
      if ((v21 & 1) != (v39 & 1))
        goto LABEL_57;
      v33 = v38;
      if ((v21 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v40 = *(_QWORD *)(v37 + 56) + 24 * v33;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_BYTE *)(v40 + 16));
      v41 = v72;
      v42 = v77;
      *(_QWORD *)v40 = v72;
      *(_QWORD *)(v40 + 8) = v42;
      *(_BYTE *)(v40 + 16) = v29;
LABEL_52:
      *(_QWORD *)(v22 + 16) = v37;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v22, v23, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v22, v23, 7);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v41, v42, v29);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v37 = v31;
      if ((v32 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      v41 = v72;
      v42 = v77;
      specialized _NativeDictionary._insert(at:key:value:)(v33, v74, v28, 0, v72, v77, v29, (_QWORD *)v37);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  v66 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v43 = static _DictionaryStorage.copy(original:)();
  v37 = v43;
  if (!*(_QWORD *)(v31 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v33 = v66;
    if ((v21 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v44 = (char *)(v43 + 64);
  v45 = 1 << *(_BYTE *)(v37 + 32);
  v68 = (char *)(v31 + 64);
  v46 = (unint64_t)(v45 + 63) >> 6;
  if (v37 != v31 || v44 >= &v68[8 * v46])
    memmove(v44, v68, 8 * v46);
  v69 = 0;
  *(_QWORD *)(v37 + 16) = *(_QWORD *)(v31 + 16);
  v47 = 1 << *(_BYTE *)(v31 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v71 = v48 & *(_QWORD *)(v31 + 64);
  v67 = (unint64_t)(v47 + 63) >> 6;
  while (1)
  {
    if (v71)
    {
      v49 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      v50 = v49 | (v69 << 6);
      goto LABEL_24;
    }
    v62 = v69 + 1;
    if (__OFADD__(v69, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v62 >= v67)
      goto LABEL_50;
    v63 = *(_QWORD *)&v68[8 * v62];
    v64 = v69 + 1;
    if (!v63)
    {
      v64 = v69 + 2;
      if (v69 + 2 >= v67)
        goto LABEL_50;
      v63 = *(_QWORD *)&v68[8 * v64];
      if (!v63)
      {
        v64 = v69 + 3;
        if (v69 + 3 >= v67)
          goto LABEL_50;
        v63 = *(_QWORD *)&v68[8 * v64];
        if (!v63)
        {
          v64 = v69 + 4;
          if (v69 + 4 >= v67)
            goto LABEL_50;
          v63 = *(_QWORD *)&v68[8 * v64];
          if (!v63)
          {
            v64 = v69 + 5;
            if (v69 + 5 >= v67)
              goto LABEL_50;
            v63 = *(_QWORD *)&v68[8 * v64];
            if (!v63)
            {
              v64 = v69 + 6;
              if (v69 + 6 >= v67)
                goto LABEL_50;
              v63 = *(_QWORD *)&v68[8 * v64];
              if (!v63)
              {
                v64 = v69 + 7;
                if (v69 + 7 >= v67)
                  goto LABEL_50;
                v63 = *(_QWORD *)&v68[8 * v64];
                if (!v63)
                {
                  v64 = v69 + 8;
                  if (v69 + 8 >= v67)
                    goto LABEL_50;
                  v63 = *(_QWORD *)&v68[8 * v64];
                  if (!v63)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v71 = (v63 - 1) & v63;
    v69 = v64;
    v50 = __clz(__rbit64(v63)) + (v64 << 6);
LABEL_24:
    v51 = 24 * v50;
    v52 = *(_QWORD *)(v31 + 48) + v51;
    v53 = *(_QWORD *)v52;
    v54 = *(_QWORD *)(v52 + 8);
    v55 = *(_QWORD *)(v31 + 56) + v51;
    v57 = *(_QWORD *)(v55 + 8);
    v70 = *(_QWORD *)v55;
    v56 = v70;
    v58 = *(_QWORD *)(v37 + 48) + v51;
    v59 = *(_BYTE *)(v52 + 16);
    v60 = *(_BYTE *)(v55 + 16);
    *(_QWORD *)v58 = v53;
    *(_QWORD *)(v58 + 8) = v54;
    *(_BYTE *)(v58 + 16) = v59;
    v61 = *(_QWORD *)(v37 + 56) + v51;
    *(_QWORD *)v61 = v56;
    *(_QWORD *)(v61 + 8) = v57;
    *(_BYTE *)(v61 + 16) = v60;
    outlined copy of _XMLPlistEncodingFormat.Reference(v53, v54, v59);
    outlined copy of _XMLPlistEncodingFormat.Reference(v70, v57, v60);
  }
  v65 = v69 + 9;
  if (v69 + 9 >= v67)
    goto LABEL_50;
  v63 = *(_QWORD *)&v68[8 * v65];
  if (v63)
  {
    v64 = v69 + 9;
    goto LABEL_49;
  }
  while (1)
  {
    v64 = v65 + 1;
    if (__OFADD__(v65, 1))
      break;
    if (v64 >= v67)
      goto LABEL_50;
    v63 = *(_QWORD *)&v68[8 * v64];
    ++v65;
    if (v63)
      goto LABEL_49;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *boxed_opaque_existential_1;
  void (*v95)(char *, uint64_t);
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t result;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;

  v7 = v6;
  v114 = a5;
  v12 = *(_QWORD *)(a3 + 16);
  v116 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](a1);
  v111 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  v117 = *(_QWORD *)(v14 - 8);
  v118 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v102 - v18;
  v20 = *(_QWORD *)(a3 + 24);
  v115 = a2;
  v110 = v20;
  v120 = dispatch thunk of CodingKey.stringValue.getter();
  if (*((_BYTE *)v7 + 24) != 7)
    goto LABEL_65;
  v22 = v21;
  v24 = v7[1];
  v23 = v7[2];
  v25 = *(_QWORD *)(v24 + 16);
  v26 = *(_QWORD *)(v25 + 16);
  v121 = v21;
  v112 = a6;
  v113 = a4;
  v119 = v12;
  if (v26)
  {
    v27 = v16;
    outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = v22;
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v22, 0);
    if ((v30 & 1) != 0)
    {
      v31 = *(_QWORD *)(v25 + 56) + 24 * v29;
      v33 = *(_QWORD *)v31;
      v32 = *(_QWORD *)(v31 + 8);
      v34 = *(unsigned __int8 *)(v31 + 16);
      outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v31, v32, *(_BYTE *)(v31 + 16));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
      if (v34 == 7)
      {
LABEL_53:
        v74 = *v7;
        v75 = v7[4];
        v76 = v116;
        v77 = v19;
        v78 = v19;
        v79 = v119;
        (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v78, v115, v119);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v77, 0, 1, v79);
        v80 = v117;
        v81 = v27;
        v82 = v79;
        v83 = v77;
        v84 = v77;
        v85 = v118;
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v81, v84, v118);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v81, 1, v82) == 1)
        {
          v86 = *(void (**)(char *, uint64_t))(v80 + 8);
          swift_retain();
          v86(v83, v85);
          v86(v81, v85);
          swift_retain();
LABEL_61:
          v122 = v74;
          v123 = v33;
          v124 = v32;
          v125 = 7;
          v126 = v75;
          swift_retain();
          outlined copy of _XMLPlistEncodingFormat.Reference(v33, v32, 7);
          v100 = type metadata accessor for _PlistKeyedEncodingContainerXML(0, v113, v114, v99);
          swift_retain();
          MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistKeyedEncodingContainerXML<A>, v100);
          KeyedEncodingContainer.init<A>(_:)();
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of _XMLPlistEncodingFormat.Reference(v33, v32, 7);
          return swift_release();
        }
        v120 = v33;
        v87 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
        v88 = v81;
        v89 = v111;
        v87(v111, v88, v82);
        v90 = v83;
        v91 = v80;
        v92 = (uint64_t *)swift_allocObject();
        v93 = v110;
        v92[5] = v82;
        v92[6] = v93;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v92 + 2);
        v87((char *)boxed_opaque_existential_1, v89, v82);
        v95 = *(void (**)(char *, uint64_t))(v91 + 8);
        swift_retain();
        v95(v90, v85);
        v92[7] = v75;
        if (v75 >> 62)
        {
          if (v75 >> 62 != 1)
          {
            v33 = v120;
            v98 = 1;
            goto LABEL_60;
          }
          v96 = (uint64_t *)((v75 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v96 = (uint64_t *)(v75 + 64);
        }
        v33 = v120;
        v97 = *v96;
        swift_retain();
        v98 = v97 + 1;
        if (!__OFADD__(v97, 1))
        {
LABEL_60:
          v92[8] = v98;
          v75 = (unint64_t)v92;
          goto LABEL_61;
        }
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
    v22 = v28;
    v16 = v27;
    v12 = v119;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = MEMORY[0x1E0DEE9E0];
  outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v122 = *(_QWORD *)(v24 + 16);
  v36 = v122;
  *(_QWORD *)(v24 + 16) = 0x8000000000000000;
  v38 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v22, 0);
  v39 = *(_QWORD *)(v36 + 16);
  v40 = (v37 & 1) == 0;
  v41 = v39 + v40;
  if (__OFADD__(v39, v40))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v36 + 24) < v41)
    {
      v42 = v37;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
      v43 = v122;
      v44 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v121, 0);
      if ((v42 & 1) != (v45 & 1))
        goto LABEL_67;
      v38 = v44;
      v27 = v16;
      if ((v42 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v46 = *(_QWORD *)(v43 + 56) + 24 * v38;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v46, *(_QWORD *)(v46 + 8), *(_BYTE *)(v46 + 16));
      *(_QWORD *)v46 = v33;
      *(_QWORD *)(v46 + 8) = 0;
      *(_BYTE *)(v46 + 16) = 7;
LABEL_52:
      *(_QWORD *)(v24 + 16) = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
      swift_release();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, 7);
      v32 = 0;
      goto LABEL_53;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v43 = v36;
      v27 = v16;
      if ((v37 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v38, v120, v121, 0, v33, 0, 7, (_QWORD *)v43);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  v102 = v38;
  v103 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v47 = static _DictionaryStorage.copy(original:)();
  v43 = v47;
  if (!*(_QWORD *)(v36 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v38 = v102;
    v27 = v16;
    if ((v103 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v48 = (void *)(v47 + 64);
  v49 = (unint64_t)((1 << *(_BYTE *)(v43 + 32)) + 63) >> 6;
  if (v43 != v36 || (unint64_t)v48 >= v36 + 64 + 8 * v49)
    memmove(v48, (const void *)(v36 + 64), 8 * v49);
  v104 = v36 + 64;
  v50 = 0;
  *(_QWORD *)(v43 + 16) = *(_QWORD *)(v36 + 16);
  v51 = 1 << *(_BYTE *)(v36 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & *(_QWORD *)(v36 + 64);
  v105 = (unint64_t)(v51 + 63) >> 6;
  while (1)
  {
    if (v53)
    {
      v108 = (v53 - 1) & v53;
      v109 = v50;
      v54 = __clz(__rbit64(v53)) | (v50 << 6);
      goto LABEL_24;
    }
    v66 = v50 + 1;
    if (__OFADD__(v50, 1))
      goto LABEL_64;
    if (v66 >= v105)
      goto LABEL_50;
    v67 = *(_QWORD *)(v104 + 8 * v66);
    v68 = v50 + 1;
    if (!v67)
    {
      v68 = v50 + 2;
      if (v50 + 2 >= v105)
        goto LABEL_50;
      v67 = *(_QWORD *)(v104 + 8 * v68);
      if (!v67)
      {
        v68 = v50 + 3;
        if (v50 + 3 >= v105)
          goto LABEL_50;
        v67 = *(_QWORD *)(v104 + 8 * v68);
        if (!v67)
        {
          v68 = v50 + 4;
          if (v50 + 4 >= v105)
            goto LABEL_50;
          v67 = *(_QWORD *)(v104 + 8 * v68);
          if (!v67)
          {
            v68 = v50 + 5;
            if (v50 + 5 >= v105)
              goto LABEL_50;
            v67 = *(_QWORD *)(v104 + 8 * v68);
            if (!v67)
            {
              v68 = v50 + 6;
              if (v50 + 6 >= v105)
                goto LABEL_50;
              v67 = *(_QWORD *)(v104 + 8 * v68);
              if (!v67)
              {
                v68 = v50 + 7;
                if (v50 + 7 >= v105)
                  goto LABEL_50;
                v67 = *(_QWORD *)(v104 + 8 * v68);
                if (!v67)
                {
                  v68 = v50 + 8;
                  if (v50 + 8 >= v105)
                    goto LABEL_50;
                  v67 = *(_QWORD *)(v104 + 8 * v68);
                  if (!v67)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v108 = (v67 - 1) & v67;
    v109 = v68;
    v54 = __clz(__rbit64(v67)) + (v68 << 6);
LABEL_24:
    v55 = 24 * v54;
    v56 = *(_QWORD *)(v36 + 48) + v55;
    v57 = *(_QWORD *)v56;
    v58 = *(_QWORD *)(v56 + 8);
    v59 = *(_QWORD *)(v36 + 56) + v55;
    v60 = *(_QWORD *)(v59 + 8);
    v106 = *(_QWORD *)v59;
    v61 = v106;
    v107 = v60;
    v62 = *(_QWORD *)(v43 + 48) + v55;
    v63 = *(_BYTE *)(v56 + 16);
    v64 = *(_BYTE *)(v59 + 16);
    *(_QWORD *)v62 = v57;
    *(_QWORD *)(v62 + 8) = v58;
    *(_BYTE *)(v62 + 16) = v63;
    v65 = *(_QWORD *)(v43 + 56) + v55;
    *(_QWORD *)v65 = v61;
    *(_QWORD *)(v65 + 8) = v60;
    *(_BYTE *)(v65 + 16) = v64;
    outlined copy of _XMLPlistEncodingFormat.Reference(v57, v58, v63);
    outlined copy of _XMLPlistEncodingFormat.Reference(v106, v107, v64);
    v53 = v108;
    v50 = v109;
  }
  v69 = v50 + 9;
  if (v50 + 9 >= v105)
    goto LABEL_50;
  v70 = v12;
  v71 = v16;
  v72 = v33;
  v73 = v19;
  v67 = *(_QWORD *)(v104 + 8 * v69);
  if (v67)
  {
    v68 = v69;
    goto LABEL_49;
  }
  while (1)
  {
    v68 = v69 + 1;
    if (__OFADD__(v69, 1))
      break;
    v19 = v73;
    v33 = v72;
    v16 = v71;
    if (v68 >= v105)
      goto LABEL_50;
    v12 = v70;
    v67 = *(_QWORD *)(v104 + 8 * v68);
    ++v69;
    if (v67)
      goto LABEL_49;
  }
LABEL_66:
  __break(1u);
LABEL_67:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *boxed_opaque_existential_1;
  void (*v84)(char *, uint64_t);
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t result;
  unint64_t v90;
  int v91;
  const void *v92;
  int64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v103 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v98 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for Optional();
  v101 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v105 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v90 - v12;
  v14 = *(_QWORD *)(a2 + 24);
  v102 = a1;
  v97 = v14;
  v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*((_BYTE *)v4 + 24) != 7)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v17 = v15;
  v18 = v16;
  v20 = v4[1];
  v19 = v4[2];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = *(_QWORD *)(v21 + 16);
  v100 = a3;
  v106 = v16;
  if (v22)
  {
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
    swift_bridgeObjectRetain();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18, 0);
    if ((v24 & 1) != 0)
    {
      v25 = *(_QWORD *)(v21 + 56) + 24 * v23;
      v27 = *(_QWORD *)v25;
      v26 = *(_QWORD *)(v25 + 8);
      v28 = *(unsigned __int8 *)(v25 + 16);
      outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v25, v26, *(_BYTE *)(v25 + 16));
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
      if (v28 != 6)
      {
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v99 = v26;
      v29 = v105;
LABEL_53:
      v70 = *v4;
      v71 = v4[4];
      v72 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v13, v102, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v13, 0, 1, v8);
      v73 = v101;
      v74 = v104;
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v29, v13, v104);
      v75 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v29, 1, v8) == 1)
      {
        v76 = *(void (**)(char *, uint64_t))(v73 + 8);
        swift_retain();
        v76(v75, v74);
        v76(v29, v74);
        swift_retain();
        swift_bridgeObjectRelease();
LABEL_61:
        v88 = v100;
        v100[3] = (uint64_t)&unk_1E0F28EF0;
        v88[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
        result = swift_allocObject();
        *v88 = result;
        *(_QWORD *)(result + 16) = v70;
        *(_QWORD *)(result + 24) = v27;
        *(_QWORD *)(result + 32) = v99;
        *(_BYTE *)(result + 40) = 6;
        *(_QWORD *)(result + 48) = v71;
        return result;
      }
      v77 = v29;
      v78 = v27;
      v79 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      v80 = v98;
      v79(v98, v77, v8);
      v81 = (uint64_t *)swift_allocObject();
      v82 = v97;
      v81[5] = v8;
      v81[6] = v82;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81 + 2);
      v79((char *)boxed_opaque_existential_1, v80, v8);
      v84 = *(void (**)(char *, uint64_t))(v73 + 8);
      swift_retain();
      v84(v75, v74);
      v81[7] = v71;
      if (v71 >> 62)
      {
        if (v71 >> 62 != 1)
        {
          v27 = v78;
          v87 = 1;
          goto LABEL_60;
        }
        v85 = (uint64_t *)((v71 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v85 = (uint64_t *)(v71 + 64);
      }
      v27 = v78;
      v86 = *v85;
      swift_retain();
      v87 = v86 + 1;
      if (!__OFADD__(v86, 1))
      {
LABEL_60:
        v81[8] = v87;
        swift_bridgeObjectRelease();
        v71 = (unint64_t)v81;
        goto LABEL_61;
      }
      __break(1u);
      goto LABEL_64;
    }
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = MEMORY[0x1E0DEE9D8];
  outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31 = v18;
  v32 = isUniquelyReferenced_nonNull_native;
  v107 = *(_QWORD *)(v20 + 16);
  v33 = v107;
  *(_QWORD *)(v20 + 16) = 0x8000000000000000;
  v99 = v17;
  v35 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v31, 0);
  v36 = *(_QWORD *)(v33 + 16);
  v37 = (v34 & 1) == 0;
  v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v33 + 24) < v38)
    {
      v39 = v34;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v32);
      v40 = v106;
      v41 = v107;
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v106, 0);
      if ((v39 & 1) != (v43 & 1))
        goto LABEL_68;
      v35 = v42;
      v29 = v105;
      if ((v39 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v44 = *(_QWORD *)(v41 + 56) + 24 * v35;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v44, *(_QWORD *)(v44 + 8), *(_BYTE *)(v44 + 16));
      *(_QWORD *)v44 = v27;
      *(_QWORD *)(v44 + 8) = 0;
      *(_BYTE *)(v44 + 16) = 6;
LABEL_52:
      *(_QWORD *)(v20 + 16) = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
      swift_release();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
      v99 = 0;
      goto LABEL_53;
    }
    if ((v32 & 1) != 0)
    {
      v41 = v33;
      v29 = v105;
      v40 = v106;
      if ((v34 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v35, v99, v40, 0, v27, 0, 6, (_QWORD *)v41);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  v90 = v35;
  v91 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v45 = static _DictionaryStorage.copy(original:)();
  v41 = v45;
  v29 = v105;
  v40 = v106;
  if (!*(_QWORD *)(v33 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v35 = v90;
    if ((v91 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v46 = (void *)(v45 + 64);
  v47 = (unint64_t)((1 << *(_BYTE *)(v41 + 32)) + 63) >> 6;
  v92 = (const void *)(v33 + 64);
  if (v41 != v33 || (unint64_t)v46 >= v33 + 64 + 8 * v47)
    memmove(v46, v92, 8 * v47);
  v48 = 0;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v33 + 16);
  v49 = 1 << *(_BYTE *)(v33 + 32);
  v50 = -1;
  if (v49 < 64)
    v50 = ~(-1 << v49);
  v51 = v50 & *(_QWORD *)(v33 + 64);
  v93 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    v29 = v105;
    v40 = v106;
    if (v51)
    {
      v95 = v48;
      v96 = (v51 - 1) & v51;
      v52 = __clz(__rbit64(v51)) | (v48 << 6);
      goto LABEL_24;
    }
    v64 = v48 + 1;
    if (__OFADD__(v48, 1))
      goto LABEL_65;
    if (v64 >= v93)
      goto LABEL_50;
    v65 = *((_QWORD *)v92 + v64);
    v66 = v48 + 1;
    if (!v65)
    {
      v66 = v48 + 2;
      if (v48 + 2 >= v93)
        goto LABEL_50;
      v65 = *((_QWORD *)v92 + v66);
      if (!v65)
      {
        v66 = v48 + 3;
        if (v48 + 3 >= v93)
          goto LABEL_50;
        v65 = *((_QWORD *)v92 + v66);
        if (!v65)
        {
          v66 = v48 + 4;
          if (v48 + 4 >= v93)
            goto LABEL_50;
          v65 = *((_QWORD *)v92 + v66);
          if (!v65)
          {
            v66 = v48 + 5;
            if (v48 + 5 >= v93)
              goto LABEL_50;
            v65 = *((_QWORD *)v92 + v66);
            if (!v65)
            {
              v66 = v48 + 6;
              if (v48 + 6 >= v93)
                goto LABEL_50;
              v65 = *((_QWORD *)v92 + v66);
              if (!v65)
              {
                v66 = v48 + 7;
                if (v48 + 7 >= v93)
                  goto LABEL_50;
                v65 = *((_QWORD *)v92 + v66);
                if (!v65)
                {
                  v66 = v48 + 8;
                  if (v48 + 8 >= v93)
                    goto LABEL_50;
                  v65 = *((_QWORD *)v92 + v66);
                  if (!v65)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v95 = v66;
    v96 = (v65 - 1) & v65;
    v52 = __clz(__rbit64(v65)) + (v66 << 6);
LABEL_24:
    v53 = 24 * v52;
    v54 = *(_QWORD *)(v33 + 48) + v53;
    v55 = *(_QWORD *)v54;
    v56 = *(_QWORD *)(v54 + 8);
    v57 = *(_QWORD *)(v33 + 56) + v53;
    v59 = *(_QWORD *)(v57 + 8);
    v94 = *(_QWORD *)v57;
    v58 = v94;
    v60 = *(_QWORD *)(v41 + 48) + v53;
    v61 = *(_BYTE *)(v54 + 16);
    v62 = *(_BYTE *)(v57 + 16);
    *(_QWORD *)v60 = v55;
    *(_QWORD *)(v60 + 8) = v56;
    *(_BYTE *)(v60 + 16) = v61;
    v63 = *(_QWORD *)(v41 + 56) + v53;
    *(_QWORD *)v63 = v58;
    *(_QWORD *)(v63 + 8) = v59;
    *(_BYTE *)(v63 + 16) = v62;
    outlined copy of _XMLPlistEncodingFormat.Reference(v55, v56, v61);
    outlined copy of _XMLPlistEncodingFormat.Reference(v94, v59, v62);
    v48 = v95;
    v51 = v96;
  }
  v67 = v48 + 9;
  if (v48 + 9 >= v93)
    goto LABEL_50;
  v68 = v13;
  v69 = v27;
  v65 = *((_QWORD *)v92 + v67);
  if (v65)
  {
    v66 = v67;
    goto LABEL_49;
  }
  while (1)
  {
    v66 = v67 + 1;
    if (__OFADD__(v67, 1))
      break;
    v29 = v105;
    v40 = v106;
    v27 = v69;
    v13 = v68;
    if (v66 >= v93)
      goto LABEL_50;
    v65 = *((_QWORD *)v92 + v66);
    ++v67;
    if (v65)
      goto LABEL_49;
  }
LABEL_67:
  __break(1u);
LABEL_68:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_BYTE *)(v1 + 24);
  v8 = type metadata accessor for __PlistReferencingEncoderXML();
  v9 = swift_allocObject();
  swift_retain();
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v6, v7);
  v10 = specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(v3, 0x7265707573, 0xE500000000000000, 0, 0, v5, v4, v6, v7, v9);
  a1[3] = v8;
  result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML, 255, (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML, (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  a1[4] = result;
  *a1 = v10;
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21[2];
  char v22;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_BYTE *)(v3 + 24);
  v21[0] = v9;
  v21[1] = v11;
  v22 = v12;
  v13 = type metadata accessor for __PlistReferencingEncoderXML();
  v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
  swift_retain();
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v9, v11, v12);
  v15 = specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(v8, (uint64_t)v7, v10, v21, v14, v4, *(_QWORD *)(v19 + 24));
  v16 = v20;
  v20[3] = v13;
  result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML, 255, (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML, (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  v16[4] = result;
  *v16 = v15;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return _PlistKeyedEncodingContainerXML.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(char a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(uint64_t a1, uint64_t a2)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(double a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(float a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(uint64_t a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(__int16 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(int a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unsigned __int8 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unsigned __int16 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unsigned int a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return _PlistKeyedEncodingContainerXML.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistKeyedEncodingContainerXML.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

void _PlistUnkeyedEncodingContainerXML.encodeNil()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v0 + 24) == 6)
  {
    v1 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(*(_QWORD *)v0 + 56);
    v4 = *(_QWORD *)(*(_QWORD *)v0 + 64);
    v5 = *(_BYTE *)(*(_QWORD *)v0 + 72);
    v2 = *(_QWORD *)(v0 + 8);
    v6 = (uint64_t *)(v2 + 16);
    v7 = *(_QWORD *)(v2 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, 6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 16) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v7 = *v6;
    }
    v10 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v7 = *v6;
    }
    *(_QWORD *)(v7 + 16) = v10 + 1;
    v11 = v7 + 24 * v10;
    *(_QWORD *)(v11 + 32) = v3;
    *(_QWORD *)(v11 + 40) = v4;
    *(_BYTE *)(v11 + 48) = v5;
    *(_QWORD *)(v2 + 16) = v7;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _PlistUnkeyedEncodingContainerXML.encode(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if ((result & 1) != 0)
    v2 = (uint64_t *)(*(_QWORD *)v1 + 80);
  else
    v2 = (uint64_t *)(*(_QWORD *)v1 + 104);
  if ((result & 1) != 0)
    v3 = (unint64_t *)(*(_QWORD *)v1 + 88);
  else
    v3 = (unint64_t *)(*(_QWORD *)v1 + 112);
  if ((result & 1) != 0)
    v4 = (char *)(*(_QWORD *)v1 + 96);
  else
    v4 = (char *)(*(_QWORD *)v1 + 120);
  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v6 = *(_QWORD *)(v1 + 16);
    v7 = *v2;
    v8 = *v3;
    v9 = *v4;
    v5 = *(_QWORD *)(v1 + 8);
    v10 = (uint64_t *)(v5 + 16);
    v11 = *(_QWORD *)(v5 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(*v2, *v3, *v4);
    outlined copy of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
    outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = *v10;
    }
    v14 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      v11 = *v10;
    }
    *(_QWORD *)(v11 + 16) = v14 + 1;
    v15 = v11 + 24 * v14;
    *(_QWORD *)(v15 + 32) = v7;
    *(_QWORD *)(v15 + 40) = v8;
    *(_BYTE *)(v15 + 48) = v9;
    *(_QWORD *)(v5 + 16) = v11;
    outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
    return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 2;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 2;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 2;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 2;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 1;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 1;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 1;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 1;
    *(_QWORD *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _PlistUnkeyedEncodingContainerXML.encode(_:)(float a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(double *)(v10 + 32) = a1;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 3;
    *(_QWORD *)(v3 + 16) = v6;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
}

void _PlistUnkeyedEncodingContainerXML.encode(_:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v1 + 24) == 6)
  {
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 8);
    v5 = (uint64_t *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v6 = *v5;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v6 = *v5;
    }
    *(_QWORD *)(v6 + 16) = v9 + 1;
    v10 = v6 + 24 * v9;
    *(double *)(v10 + 32) = a1;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 3;
    *(_QWORD *)(v3 + 16) = v6;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _PlistUnkeyedEncodingContainerXML.encode(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(v2 + 24) == 6)
  {
    v4 = result;
    v6 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 8);
    v7 = (uint64_t *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 16) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
      v8 = *v7;
    }
    v11 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
    if (v11 >= v10 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      v8 = *v7;
    }
    *(_QWORD *)(v8 + 16) = v11 + 1;
    v12 = v8 + 24 * v11;
    *(_QWORD *)(v12 + 32) = v4;
    *(_QWORD *)(v12 + 40) = a2;
    *(_BYTE *)(v12 + 48) = 0;
    *(_QWORD *)(v5 + 16) = v8;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistUnkeyedEncodingContainerXML.encode<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v30[2];
  unsigned __int8 v31;
  unint64_t v32;

  v5 = v4;
  v6 = v3;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v3;
  result = (*(uint64_t (**)(char *, __n128))(v9 + 16))(v12, v10);
  v15 = *(_QWORD *)(v13 + 40);
  v16 = *((unsigned __int8 *)v6 + 24);
  if (v16 != 7 && v16 != 6)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6[1] + 16) + 16);
  swift_retain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)((unint64_t)v12, v15, v17, 0, 0, 2, a2, a3, v30);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, unint64_t))(v9 + 8))(v12, a2);
  }
  v18 = v31;
  if (v31 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    v18 = 7;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = MEMORY[0x1E0DEE9E0];
    swift_release();
    v32 = 0;
  }
  else
  {
    v19 = v30[0];
    v32 = v30[1];
    swift_release();
  }
  result = (*(uint64_t (**)(char *, unint64_t))(v9 + 8))(v12, a2);
  if (*((_BYTE *)v6 + 24) != 6)
    goto LABEL_15;
  v21 = v6[1];
  v20 = v6[2];
  v22 = (uint64_t *)(v21 + 16);
  v23 = *(_QWORD *)(v21 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(v21, v20, 6);
  outlined copy of _XMLPlistEncodingFormat.Reference(v19, v32, v18);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v21 + 16) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
    v23 = *v22;
  }
  v26 = *(_QWORD *)(v23 + 16);
  v25 = *(_QWORD *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
    v23 = *v22;
  }
  *(_QWORD *)(v23 + 16) = v26 + 1;
  v27 = v23 + 24 * v26;
  v28 = v32;
  *(_QWORD *)(v27 + 32) = v19;
  *(_QWORD *)(v27 + 40) = v28;
  *(_BYTE *)(v27 + 48) = v18;
  *(_QWORD *)(v21 + 16) = v23;
  outlined consume of _XMLPlistEncodingFormat.Reference(v21, v20, 6);
  return outlined consume of _XMLPlistEncodingFormat.Reference(v19, v28, v18);
}

void _PlistUnkeyedEncodingContainerXML.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = v3;
  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(unsigned __int8 *)(v3 + 24);
  if (v8 != 7 && v8 != 6)
    goto LABEL_17;
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9E0];
  if (v8 == 6)
  {
    v11 = v10;
    v12 = (uint64_t *)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v6, v7, 6);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 16) = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = *v12;
    }
    v16 = *(_QWORD *)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v13 = *v12;
    }
    *(_QWORD *)(v13 + 16) = v16 + 1;
    v17 = v13 + 24 * v16;
    *(_QWORD *)(v17 + 32) = v11;
    *(_QWORD *)(v17 + 40) = 0;
    *(_BYTE *)(v17 + 48) = 7;
    *(_QWORD *)(v6 + 16) = v13;
    outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, 6);
    v18 = *(_QWORD *)(v4 + 32);
    v19 = (_QWORD *)swift_allocObject();
    v19[5] = &type metadata for _CodingKey;
    v19[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v20 = swift_allocObject();
    v19[2] = v20;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 16) = v9;
    *(_BYTE *)(v20 + 40) = 2;
    v19[7] = v18;
    if (v18 >> 62)
    {
      v22 = 0;
      if (v18 >> 62 != 1)
      {
LABEL_13:
        if (!__OFADD__(v22, 1))
        {
          v19[8] = v22 + 1;
          v24 = type metadata accessor for _PlistKeyedEncodingContainerXML(0, a2, a3, v21);
          swift_retain();
          MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistKeyedEncodingContainerXML<A>, v24);
          KeyedEncodingContainer.init<A>(_:)();
          return;
        }
        __break(1u);
        goto LABEL_16;
      }
      v23 = (uint64_t *)((v18 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v23 = (uint64_t *)(v18 + 64);
    }
    v22 = *v23;
    swift_retain();
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

void _PlistUnkeyedEncodingContainerXML.nestedUnkeyedContainer()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v2 = (uint64_t *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 24);
  if (v6 != 7 && v6 != 6)
    goto LABEL_17;
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9D8];
  if (v6 == 6)
  {
    v9 = v8;
    v10 = (uint64_t *)(v4 + 16);
    v11 = *(_QWORD *)(v4 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, 6);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = *v10;
    }
    v14 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      v11 = *v10;
    }
    *(_QWORD *)(v11 + 16) = v14 + 1;
    v15 = v11 + 24 * v14;
    *(_QWORD *)(v15 + 32) = v9;
    *(_QWORD *)(v15 + 40) = 0;
    *(_BYTE *)(v15 + 48) = 6;
    *(_QWORD *)(v4 + 16) = v11;
    outlined consume of _XMLPlistEncodingFormat.Reference(v4, v5, 6);
    v16 = *v2;
    v17 = v2[4];
    v18 = (_QWORD *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v19 = swift_allocObject();
    v18[2] = v19;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 16) = v7;
    *(_BYTE *)(v19 + 40) = 2;
    v18[7] = v17;
    if (v17 >> 62)
    {
      v20 = 0;
      if (v17 >> 62 != 1)
      {
LABEL_13:
        if (!__OFADD__(v20, 1))
        {
          v18[8] = v20 + 1;
          a1[3] = (uint64_t)&unk_1E0F28EF0;
          a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
          v22 = swift_allocObject();
          *a1 = v22;
          *(_QWORD *)(v22 + 16) = v16;
          *(_QWORD *)(v22 + 24) = v9;
          *(_QWORD *)(v22 + 32) = 0;
          *(_BYTE *)(v22 + 40) = 6;
          *(_QWORD *)(v22 + 48) = v18;
          swift_retain();
          return;
        }
        __break(1u);
        goto LABEL_16;
      }
      v21 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v21 = (uint64_t *)(v17 + 64);
    }
    v20 = *v21;
    swift_retain();
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

void _PlistUnkeyedEncodingContainerXML.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 24);
  if (v6 == 7 || v6 == 6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
    v8 = *(_QWORD *)(v4 + 40);
    v11[0] = v3;
    v11[1] = v5;
    v12 = v6;
    v9 = type metadata accessor for __PlistReferencingEncoderXML();
    swift_allocObject();
    swift_retain();
    swift_retain();
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v5, v6);
    v10 = __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(v4, v7, v8, (uint64_t)v11);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML, 255, (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML, (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
    *a1 = v10;
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistUnkeyedEncodingContainerXML()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 == 7 || v1 == 6)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) + 16);
  __break(1u);
  return result;
}

void protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistUnkeyedEncodingContainerXML()
{
  _PlistUnkeyedEncodingContainerXML.encodeNil()();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(uint64_t a1)
{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1, a2);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(double a1)
{
  _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(float a1)
{
  _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistUnkeyedEncodingContainerXML(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return _PlistUnkeyedEncodingContainerXML.encode<A>(_:)(a1, a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encodeNil()()
{
  char *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v4, 1);
    v7 = *(_QWORD *)v0;
    goto LABEL_5;
  }
  v8 = *((_QWORD *)v0 + 2);
  v0 += 16;
  v7 = v8;
  v1 = *((_QWORD *)v0 + 5);
  v2 = *((_QWORD *)v0 + 6);
  v3 = v0[56];
  outlined copy of _XMLPlistEncodingFormat.Reference(v1, v2, v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v0 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
    v7 = *(_QWORD *)v0;
  }
  v5 = *(_QWORD *)(v7 + 16);
  v6 = *(_QWORD *)(v7 + 24);
  v4 = v5 + 1;
  if (v5 >= v6 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v7 + 16) = v4;
  v10 = v7 + 24 * v5;
  *(_QWORD *)(v10 + 32) = v1;
  *(_QWORD *)(v10 + 40) = v2;
  *(_BYTE *)(v10 + 48) = v3;
  *(_QWORD *)v0 = v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Bool a1)
{
  _QWORD *v1;
  unint64_t v2;
  char v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t *v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v6 = a1;
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_15:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v4, 1);
    v8 = *v1;
    goto LABEL_13;
  }
  v9 = v1[2];
  v1 += 2;
  v8 = v9;
  v10 = v1 + 8;
  v11 = (v6 & 1) == 0;
  if ((v6 & 1) == 0)
    v10 = v1 + 11;
  v6 = *v10;
  if (v11)
    v12 = v1 + 12;
  else
    v12 = v1 + 9;
  v2 = *v12;
  if (v11)
    v13 = (char *)(v1 + 13);
  else
    v13 = (char *)(v1 + 10);
  v3 = *v13;
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v2, *v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
    v8 = *v1;
  }
  v5 = *(_QWORD *)(v8 + 16);
  v7 = *(_QWORD *)(v8 + 24);
  v4 = v5 + 1;
  if (v5 >= v7 >> 1)
    goto LABEL_15;
LABEL_13:
  *(_QWORD *)(v8 + 16) = v4;
  v15 = v8 + 24 * v5;
  *(_QWORD *)(v15 + 32) = v6;
  *(_QWORD *)(v15 + 40) = v2;
  *(_BYTE *)(v15 + 48) = v3;
  *v1 = v8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Int8 a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 2;
  *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Int16 a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 2;
  *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Int32 a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 2;
  *v1 = v6;
}

uint64_t __PlistEncoderXML.encode(_:)(uint64_t a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((result & 1) == 0)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 2;
  *v1 = v6;
  return result;
}

{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((result & 1) == 0)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 1;
  *v1 = v6;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::UInt8 a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 1;
  *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::UInt16 a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 1;
  *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::UInt32 a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 1;
  *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::String a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v2, 1);
    v7 = *v1;
    goto LABEL_5;
  }
  v8 = v1[2];
  v1 += 2;
  v7 = v8;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
    v7 = *v1;
  }
  v3 = *(_QWORD *)(v7 + 16);
  v6 = *(_QWORD *)(v7 + 24);
  v2 = v3 + 1;
  if (v3 >= v6 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v7 + 16) = v2;
  v10 = v7 + 24 * v3;
  *(_QWORD *)(v10 + 32) = countAndFlagsBits;
  *(_QWORD *)(v10 + 40) = object;
  *(_BYTE *)(v10 + 48) = 0;
  *v1 = v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Float a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(double *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 3;
  *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Double a1)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    v6 = *v1;
    goto LABEL_5;
  }
  v7 = v1[2];
  v1 += 2;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v1;
  }
  v3 = *(_QWORD *)(v6 + 16);
  v5 = *(_QWORD *)(v6 + 24);
  v2 = v3 + 1;
  if (v3 >= v5 >> 1)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(v6 + 16) = v2;
  v9 = v6 + 24 * v3;
  *(Swift::Double *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 3;
  *v1 = v6;
}

uint64_t __PlistEncoderXML.encode<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned __int8 v18;

  v7 = v4;
  if (((*(uint64_t (**)(void))(*v3 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_12:
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, a2, 1);
    v14 = *v3;
    goto LABEL_10;
  }
  v12 = v3[5];
  swift_retain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1, v12, 0, 0, 0, 255, a2, a3, v17);
  if (v7)
    return swift_release();
  LOBYTE(a1) = v18;
  if (v18 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    LOBYTE(a1) = 7;
    a3 = swift_allocObject();
    *(_QWORD *)(a3 + 16) = MEMORY[0x1E0DEE9E0];
    swift_release();
    v5 = 0;
  }
  else
  {
    a3 = v17[0];
    v5 = v17[1];
    swift_release();
  }
  v15 = v3[2];
  v3 += 2;
  v14 = v15;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v15;
  if ((result & 1) == 0)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
    v14 = *v3;
  }
  v6 = *(_QWORD *)(v14 + 16);
  v11 = *(_QWORD *)(v14 + 24);
  a2 = v6 + 1;
  if (v6 >= v11 >> 1)
    goto LABEL_12;
LABEL_10:
  *(_QWORD *)(v14 + 16) = a2;
  v16 = v14 + 24 * v6;
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = v5;
  *(_BYTE *)(v16 + 48) = a1;
  *v3 = v14;
  return result;
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistEncoderXML()
{
  __PlistEncoderXML.encodeNil()();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Bool a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(uint64_t a1, uint64_t a2)
{
  __PlistEncoderXML.encode(_:)(*(Swift::String *)&a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Double a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Float a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(uint64_t a1)
{
  return __PlistEncoderXML.encode(_:)(a1);
}

{
  return __PlistEncoderXML.encode(_:)(a1);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(a1);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Int8 a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Int16 a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Int32 a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::UInt8 a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::UInt16 a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::UInt32 a1)
{
  __PlistEncoderXML.encode(_:)(a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistEncoderXML(unint64_t a1, unint64_t a2, uint64_t a3)
{
  return __PlistEncoderXML.encode<A>(_:)(a1, a2, a3);
}

uint64_t specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v4[3] = type metadata accessor for __PlistEncoderXML();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, v2, (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML, (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v4[3] = type metadata accessor for __PlistEncoderXML();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, v2, (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML, (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)@<X0>(void (*a1)(_QWORD *)@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v15)(_QWORD *);
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unsigned __int8 v28;
  __int128 v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *);
  __int128 v34;
  unsigned __int8 v35;
  unint64_t v36;

  v9 = v7;
  v15 = a1;
  v16 = v9 + 2;
  v36 = *(_QWORD *)(v9[2] + 16);
  if (a6 != -1)
  {
    v33 = a1;
    v32 = v8;
    v17 = (_QWORD *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v18 = swift_allocObject();
    v17[2] = v18;
    *(_QWORD *)(v18 + 16) = a3;
    *(_QWORD *)(v18 + 24) = a4;
    *(_QWORD *)(v18 + 32) = a5;
    *(_BYTE *)(v18 + 40) = a6;
    v17[7] = a2;
    v31 = a3;
    v19 = a4;
    if (a2 >> 62)
    {
      if (a2 >> 62 != 1)
      {
        v25 = a5;
        v23 = 1;
LABEL_10:
        v17[8] = v23;
        v21 = v9[5];
        v22 = v9[6];
        v9[5] = v17;
        v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v31, v19, v25, a6);
        v24 = v36;
        v8 = v32;
        goto LABEL_12;
      }
      v20 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v20 = (uint64_t *)(a2 + 64);
    }
    v25 = a5;
    v26 = *v20;
    result = swift_retain();
    v23 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    goto LABEL_10;
  }
  v21 = v9[5];
  v22 = v9[6];
  v9[5] = a2;
  if (!(a2 >> 62))
  {
    v31 = a3;
    v32 = v8;
    v19 = a4;
    v25 = a5;
    v33 = a1;
    v23 = *(_QWORD *)(a2 + 64);
    swift_retain();
    goto LABEL_11;
  }
  if (a2 >> 62 == 1)
  {
    v33 = a1;
    v23 = *(_QWORD *)(a2 + 32);
    swift_retain();
    v24 = v36;
LABEL_12:
    swift_retain();
    v15 = v33;
    goto LABEL_13;
  }
  v23 = 0;
  v24 = v36;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (!v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    result = swift_release();
    if (v24 < *(_QWORD *)(v9[2] + 16))
    {
      result = specialized ContiguousArray._customRemoveLast()((uint64_t)&v34);
      v28 = v35;
      if (v35 == 255)
      {
        result = specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v16 + 16) - 1, (uint64_t)&v34);
        v29 = v34;
        v28 = v35;
      }
      else
      {
        v29 = v34;
      }
      *(_OWORD *)a7 = v29;
      *(_BYTE *)(a7 + 16) = v28;
      return result;
    }
LABEL_22:
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_BYTE *)(a7 + 16) = -1;
    return result;
  }
  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v24 < *(_QWORD *)(v9[2] + 16))
  {
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v34);
    if (v35 == 255)
    {
      specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v16 + 16) - 1, (uint64_t)&v34);
      outlined consume of _XMLPlistEncodingFormat.Reference(v34, *((unint64_t *)&v34 + 1), v35);
    }
    else
    {
      outlined consume of _XMLPlistEncodingFormat.Reference?(v34, *((unint64_t *)&v34 + 1), v35);
    }
  }
  return swift_willThrow();
}

uint64_t __PlistEncoderXML._wrapGeneric<A>(_:for:_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, __n128);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  char *v41;
  unsigned __int8 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *);
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  unsigned __int8 v54;
  unint64_t v55;

  v50 = a1;
  v8 = v7;
  v48 = a6;
  v49 = a2;
  v55 = a3;
  v45 = a7;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v45 - v19;
  v21 = v8[2];
  v46 = (char *)(v8 + 2);
  v52 = *(_QWORD *)(v21 + 16);
  v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v22((char *)&v45 - v19, a4, v13, v18);
  ((void (*)(char *, char *, uint64_t))v22)(v16, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, a5) != 1)
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v30 = v47;
    v29(v47, v16, a5);
    v31 = (uint64_t *)swift_allocObject();
    v32 = v48;
    v31[5] = a5;
    v31[6] = v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31 + 2);
    v29((char *)boxed_opaque_existential_1, v30, a5);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    v34 = v55;
    v31[7] = v55;
    v35 = v34 >> 62;
    if (v34 >> 62)
    {
      if ((_DWORD)v35 != 1)
      {
        v28 = 1;
        if (!__OFSUB__((_DWORD)v35, 1))
          goto LABEL_12;
        goto LABEL_24;
      }
      v36 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v36 = (uint64_t *)(v34 + 64);
    }
    v37 = *v36;
    swift_retain();
    v38 = __OFADD__(v37, 1);
    v28 = v37 + 1;
    if (!v38)
    {
LABEL_12:
      v31[8] = v28;
      v24 = v8[5];
      v25 = v8[6];
      v8[5] = v31;
      goto LABEL_13;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v20, v13);
  v23(v16, v13);
  v24 = v8[5];
  v25 = v8[6];
  v26 = v55;
  v27 = v55 >> 62;
  v8[5] = v55;
  if (v26 >> 62)
  {
    if ((_DWORD)v27 != 1)
    {
      v28 = 0;
      goto LABEL_14;
    }
    v28 = *(_QWORD *)(v26 + 32);
    swift_retain();
  }
  else
  {
    v28 = *(_QWORD *)(v26 + 64);
    swift_retain();
  }
LABEL_13:
  swift_retain();
LABEL_14:
  v8[6] = v28;
  v39 = v51;
  v50(v8);
  if (v39)
  {
    v8[5] = v24;
    swift_retain();
    swift_release();
    v8[6] = v25;
    swift_release();
    swift_release();
    if (v52 >= *(_QWORD *)(v8[2] + 16))
      return swift_willThrow();
    v20 = v46;
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v53);
    if (v54 != 255)
    {
      outlined consume of _XMLPlistEncodingFormat.Reference?(v53, *((unint64_t *)&v53 + 1), v54);
      return swift_willThrow();
    }
LABEL_25:
    specialized ContiguousArray.remove(at:)(*(_QWORD *)(*(_QWORD *)v20 + 16) - 1, (uint64_t)&v53);
    outlined consume of _XMLPlistEncodingFormat.Reference(v53, *((unint64_t *)&v53 + 1), v54);
    return swift_willThrow();
  }
  v8[5] = v24;
  swift_retain();
  swift_release();
  v8[6] = v25;
  swift_release();
  result = swift_release();
  if (v52 >= *(_QWORD *)(v8[2] + 16))
  {
    v44 = v45;
    *v45 = 0;
    v44[1] = 0;
    v42 = -1;
  }
  else
  {
    v41 = v46;
    result = specialized ContiguousArray._customRemoveLast()((uint64_t)&v53);
    v42 = v54;
    if (v54 == 255)
    {
      result = specialized ContiguousArray.remove(at:)(*(_QWORD *)(*(_QWORD *)v41 + 16) - 1, (uint64_t)&v53);
      v43 = v53;
      v42 = v54;
    }
    else
    {
      v43 = v53;
    }
    v44 = v45;
    *(_OWORD *)v45 = v43;
  }
  *((_BYTE *)v44 + 16) = v42;
  return result;
}

uint64_t __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v7 = *(unsigned __int8 *)(a4 + 16);
  *(_QWORD *)(v4 + 128) = a1;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)a4;
  *(_QWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 160) = a2;
  *(_QWORD *)(v4 + 168) = 0;
  v9 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v10 = (_QWORD *)swift_allocObject();
  v10[5] = &type metadata for _CodingKey;
  v10[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  v10[2] = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  v12 = a3 >> 62;
  v10[7] = a3;
  if (a3 >> 62)
  {
    v13 = 0;
    if ((_DWORD)v12 != 1)
      goto LABEL_6;
    v14 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v14 = (uint64_t *)(a3 + 64);
  }
  v13 = *v14;
  result = swift_retain();
LABEL_6:
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    v10[8] = v13 + 1;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
      {
        v15 = *(_QWORD *)(a3 + 32);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRetain();
        v15 = 0;
      }
    }
    else
    {
      v15 = *(_QWORD *)(a3 + 64);
      swift_bridgeObjectRetain();
      swift_release();
    }
    *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v4 + 24) = v9;
    *(_QWORD *)(v4 + 32) = v8;
    *(_QWORD *)(v4 + 40) = v10;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 48) = v15;
    *(_BYTE *)(v4 + 72) = 8;
    *(_OWORD *)(v4 + 80) = xmmword_182068080;
    *(_BYTE *)(v4 + 96) = 8;
    *(_OWORD *)(v4 + 104) = xmmword_182068790;
    *(_BYTE *)(v4 + 120) = 8;
    return v4;
  }
  return result;
}

BOOL __PlistReferencingEncoderXML.canEncodeNewValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0[2] + 16);
  v2 = v0[5];
  swift_retain();
  v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0[16] + 40);
  swift_retain();
  v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

uint64_t __PlistReferencingEncoderXML.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  return outlined consume of __PlistReferencingEncoderXML.Reference(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
}

uint64_t __PlistReferencingEncoderXML.__deallocating_deinit()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  uint64_t result;
  unint64_t v56;
  char v57;
  int64_t v58;
  char *__src;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 v67;

  v3 = v0;
  v5 = *(_QWORD *)(v0 + 16);
  v4 = v0 + 16;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 == 1)
  {
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v65);
    v9 = v67;
    if (v67 == 255)
    {
      specialized ContiguousArray.remove(at:)(*(_QWORD *)(*(_QWORD *)v4 + 16) - 1, (uint64_t)&v65);
      v11 = v65;
      v10 = v66;
      v9 = v67;
    }
    else
    {
      v11 = v65;
      v10 = v66;
    }
  }
  else
  {
    if (v6)
      goto LABEL_68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    v9 = 7;
    v11 = swift_allocObject();
    v10 = 0;
    *(_QWORD *)(v11 + 16) = MEMORY[0x1E0DEE9E0];
  }
  v12 = *(_QWORD *)(v3 + 136);
  v13 = *(_QWORD *)(v3 + 152);
  v14 = *(_QWORD *)(v3 + 160);
  if ((v13 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(v3 + 152) == 6)
    {
      v15 = *(_QWORD *)(v12 + 16);
      v12 += 16;
      if (*(_QWORD *)(v15 + 16) < v14)
      {
        __break(1u);
      }
      else if ((v14 & 0x8000000000000000) == 0)
      {
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(*(_QWORD *)(v3 + 160), *(_QWORD *)(v3 + 160), v11, v10, v9);
LABEL_63:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v49 = *(_QWORD *)(v3 + 80);
        v50 = *(_QWORD *)(v3 + 88);
        v51 = *(_QWORD *)(v3 + 104);
        v52 = *(_QWORD *)(v3 + 112);
        v53 = *(_BYTE *)(v3 + 96);
        v54 = *(_BYTE *)(v3 + 120);
        outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_BYTE *)(v3 + 72));
        outlined consume of _XMLPlistEncodingFormat.Reference(v49, v50, v53);
        outlined consume of _XMLPlistEncodingFormat.Reference(v51, v52, v54);
        swift_release();
        outlined consume of __PlistReferencingEncoderXML.Reference(*(_QWORD *)(v3 + 136), *(_QWORD *)(v3 + 144), *(_QWORD *)(v3 + 152));
        return swift_deallocClassInstance();
      }
      __break(1u);
      goto LABEL_23;
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (*(_QWORD *)(v3 + 152) != 7)
    goto LABEL_66;
  v16 = *(_QWORD *)(v3 + 144);
  v1 = *(_QWORD *)(v3 + 168);
  outlined copy of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
  outlined copy of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
  outlined copy of __PlistReferencingEncoderXML.Reference(v12, v16, v13);
  v64 = v16;
  outlined copy of _XMLPlistEncodingFormat.Reference(v12, v16, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v65 = *(_QWORD *)(v12 + 16);
  v2 = v65;
  *(_QWORD *)(v12 + 16) = 0x8000000000000000;
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v1, 0);
  v18 = *(_QWORD *)(v2 + 16);
  v19 = (v7 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (*(_QWORD *)(v2 + 24) < v20)
  {
    v21 = v7;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
    v22 = v65;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v1, 0);
    if ((v21 & 1) != (v24 & 1))
      goto LABEL_69;
    v8 = v23;
    v25 = v21;
    v26 = v64;
    if ((v25 & 1) == 0)
      goto LABEL_61;
    goto LABEL_20;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v22 = v2;
    v26 = v64;
    if ((v7 & 1) == 0)
    {
LABEL_61:
      specialized _NativeDictionary._insert(at:key:value:)(v8, v14, v1, 0, v11, v10, v9, (_QWORD *)v22);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    }
LABEL_20:
    v27 = *(_QWORD *)(v22 + 56) + 24 * v8;
    outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
    *(_QWORD *)v27 = v11;
    *(_QWORD *)(v27 + 8) = v10;
    *(_BYTE *)(v27 + 16) = v9;
LABEL_62:
    *(_QWORD *)(v12 + 16) = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v12, v26, 7);
    outlined consume of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
    outlined consume of _XMLPlistEncodingFormat.Reference(v12, v26, 7);
    goto LABEL_63;
  }
LABEL_24:
  v56 = v8;
  v57 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v28 = static _DictionaryStorage.copy(original:)();
  v22 = v28;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    v26 = v64;
    v8 = v56;
    if ((v57 & 1) == 0)
      goto LABEL_61;
    goto LABEL_20;
  }
  v29 = (char *)(v28 + 64);
  __src = (char *)(v2 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  if (v22 != v2 || v29 >= &__src[8 * v30])
    memmove(v29, __src, 8 * v30);
  v60 = 0;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v2 + 16);
  v31 = 1 << *(_BYTE *)(v2 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v63 = v32 & *(_QWORD *)(v2 + 64);
  v58 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v63)
    {
      v33 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v34 = v33 | (v60 << 6);
      goto LABEL_32;
    }
    v45 = v60 + 1;
    if (__OFADD__(v60, 1))
      goto LABEL_65;
    if (v45 >= v58)
      goto LABEL_60;
    v46 = *(_QWORD *)&__src[8 * v45];
    v47 = v60 + 1;
    if (!v46)
    {
      v47 = v60 + 2;
      if (v60 + 2 >= v58)
        goto LABEL_60;
      v46 = *(_QWORD *)&__src[8 * v47];
      if (!v46)
      {
        v47 = v60 + 3;
        if (v60 + 3 >= v58)
          goto LABEL_60;
        v46 = *(_QWORD *)&__src[8 * v47];
        if (!v46)
        {
          v47 = v60 + 4;
          if (v60 + 4 >= v58)
            goto LABEL_60;
          v46 = *(_QWORD *)&__src[8 * v47];
          if (!v46)
          {
            v47 = v60 + 5;
            if (v60 + 5 >= v58)
              goto LABEL_60;
            v46 = *(_QWORD *)&__src[8 * v47];
            if (!v46)
            {
              v47 = v60 + 6;
              if (v60 + 6 >= v58)
                goto LABEL_60;
              v46 = *(_QWORD *)&__src[8 * v47];
              if (!v46)
              {
                v47 = v60 + 7;
                if (v60 + 7 >= v58)
                  goto LABEL_60;
                v46 = *(_QWORD *)&__src[8 * v47];
                if (!v46)
                {
                  v47 = v60 + 8;
                  if (v60 + 8 >= v58)
                    goto LABEL_60;
                  v46 = *(_QWORD *)&__src[8 * v47];
                  if (!v46)
                  {
                    v47 = v60 + 9;
                    if (v60 + 9 >= v58)
                      goto LABEL_60;
                    v46 = *(_QWORD *)&__src[8 * v47];
                    if (!v46)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    v63 = (v46 - 1) & v46;
    v60 = v47;
    v34 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_32:
    v35 = 24 * v34;
    v36 = *(_QWORD *)(v2 + 48) + v35;
    v37 = *(_QWORD *)v36;
    v38 = *(_QWORD *)(v36 + 8);
    v39 = *(_QWORD *)(v2 + 56) + v35;
    v61 = *(_QWORD *)v39;
    v40 = *(_QWORD *)v39;
    v62 = *(_QWORD *)(v39 + 8);
    v41 = *(_QWORD *)(v22 + 48) + v35;
    v42 = *(_BYTE *)(v36 + 16);
    v43 = *(_BYTE *)(v39 + 16);
    *(_QWORD *)v41 = *(_QWORD *)v36;
    *(_QWORD *)(v41 + 8) = v38;
    *(_BYTE *)(v41 + 16) = v42;
    v44 = *(_QWORD *)(v22 + 56) + v35;
    *(_QWORD *)v44 = v40;
    *(_QWORD *)(v44 + 8) = v62;
    *(_BYTE *)(v44 + 16) = v43;
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v38, v42);
    outlined copy of _XMLPlistEncodingFormat.Reference(v61, v62, v43);
  }
  v48 = v60 + 10;
  if (v60 + 10 >= v58)
    goto LABEL_60;
  v46 = *(_QWORD *)&__src[8 * v48];
  if (v46)
  {
    v47 = v60 + 10;
    goto LABEL_59;
  }
  while (1)
  {
    v47 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v47 >= v58)
      goto LABEL_60;
    v46 = *(_QWORD *)&__src[8 * v47];
    ++v48;
    if (v46)
      goto LABEL_59;
  }
LABEL_67:
  __break(1u);
LABEL_68:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_69:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for __PlistReferencingEncoderXML()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for _XMLPlistEncodingFormat.Reference.Box()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _XMLPlistEncodingFormat.Reference.Box.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _XMLPlistEncodingFormat.Reference.Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _XMLPlistEncodingFormat.Reference.Box);
}

uint64_t outlined copy of __PlistReferencingEncoderXML.Reference(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    return outlined copy of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  outlined copy of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t destroy for __PlistReferencingEncoderXML.Reference(uint64_t a1)
{
  return outlined consume of __PlistReferencingEncoderXML.Reference(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t outlined consume of __PlistReferencingEncoderXML.Reference(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    return outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of __PlistReferencingEncoderXML.Reference(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of __PlistReferencingEncoderXML.Reference(*a2, v4, v5);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of __PlistReferencingEncoderXML.Reference(v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v7;
  a1[4] = v3;
  outlined consume of __PlistReferencingEncoderXML.Reference(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for __PlistReferencingEncoderXML.Reference(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 4;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for __PlistReferencingEncoderXML.Reference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 16 * -a2;
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for __PlistReferencingEncoderXML.Reference(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 63;
}

uint64_t destructiveProjectEnumData for __PlistReferencingEncoderXML.Reference(uint64_t result)
{
  *(_QWORD *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for __PlistReferencingEncoderXML.Reference(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFLL | (a2 << 63);
  return result;
}

void *type metadata accessor for __PlistReferencingEncoderXML.Reference()
{
  return &unk_1E0F27880;
}

uint64_t destroy for _XMLPlistEncodingFormat(uint64_t a1)
{
  outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_BYTE *)(v2 + 40);
  outlined copy of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(v2 + 48);
  v11 = *(_QWORD *)(v2 + 56);
  LOBYTE(v2) = *(_BYTE *)(v2 + 64);
  outlined copy of _XMLPlistEncodingFormat.Reference(v10, v11, v2);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v2;
  return a1;
}

uint64_t assignWithCopy for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(_QWORD *)(v2 + 32);
  v12 = *(_BYTE *)(v2 + 40);
  outlined copy of _XMLPlistEncodingFormat.Reference(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v12;
  outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, v15);
  v16 = *(_QWORD *)(v2 + 48);
  v17 = *(_QWORD *)(v2 + 56);
  LOBYTE(v2) = *(_BYTE *)(v2 + 64);
  outlined copy of _XMLPlistEncodingFormat.Reference(v16, v17, v2);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  v20 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v2;
  outlined consume of _XMLPlistEncodingFormat.Reference(v18, v19, v20);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  v8 = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of _XMLPlistEncodingFormat.Reference(v9, v10, v11);
  v12 = *(_BYTE *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v15 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v12;
  outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 248);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 8)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 248;
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat()
{
  return &type metadata for _XMLPlistEncodingFormat;
}

void *type metadata accessor for _PlistEncodingStorageXML()
{
  return &unk_1E0F25FF8;
}

_UNKNOWN **associated type witness table accessor for PlistEncodingFormat.Writer : PlistWriting in _XMLPlistEncodingFormat()
{
  return &protocol witness table for _XMLPlistEncodingFormat.Writer;
}

_UNKNOWN **associated type witness table accessor for PlistWriting.Reference : PlistEncodingReference in _XMLPlistEncodingFormat.Writer()
{
  return &protocol witness table for _XMLPlistEncodingFormat.Reference;
}

unint64_t lazy protocol witness table accessor for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference;
  if (!lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _XMLPlistEncodingFormat.Reference, &type metadata for _XMLPlistEncodingFormat.Reference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference);
  }
  return result;
}

void _XMLPlistEncodingFormat.Writer.append(_:)(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if ((a3 & 1) == 0)
  {
    if (a1)
    {
      _XMLPlistEncodingFormat.Writer.append(_:)(a1, a2);
      return;
    }
    __break(1u);
    goto LABEL_11;
  }
  a4 = HIDWORD(a1);
  if (HIDWORD(a1))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    v4 = (a1 & 0x3F) << 8;
    if (a1 <= 0x7FF)
    {
      v5 = (v4 | (a1 >> 6)) + 33217;
      goto LABEL_9;
    }
LABEL_16:
    v7 = (v4 | (a1 >> 6) & 0x3F) << 8;
    v8 = (((v7 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    v9 = (v7 | (a1 >> 12)) + 8487393;
    if ((_DWORD)a4)
      v5 = v8;
    else
      v5 = v9;
    goto LABEL_9;
  }
  LODWORD(a4) = a1 >> 11;
  if (a1 >> 11 == 27)
  {
    __break(1u);
    goto LABEL_16;
  }
  LODWORD(a4) = WORD1(a1);
  if (WORD1(a1) > 0x10u)
    goto LABEL_12;
  if (a1 > 0x7F)
    goto LABEL_13;
  v5 = a1 + 1;
LABEL_9:
  v6 = __clz(v5);
  v10 = (v5 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v6 >> 3))));
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)&v10, 4 - (v6 >> 3));
}

void _XMLPlistEncodingFormat.Writer.append(_:indentation:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(a1 + 16);
  _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a2);
  __asm { BR              X9 }
}

uint64_t sub_181D7F27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v0 + 176) = 60;
  *(_QWORD *)(v0 + 184) = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  swift_bridgeObjectRelease();
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"string", 6);
  *(_QWORD *)(v0 + 176) = 62;
  *(_QWORD *)(v0 + 184) = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = v2;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176), v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 176) = 12092;
  *(_QWORD *)(v0 + 184) = 0xE200000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  swift_bridgeObjectRelease();
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"string", 6);
  *(_QWORD *)(v0 + 176) = 2622;
  *(_QWORD *)(v0 + 184) = 0xE200000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)(v0 + 176));
  return swift_bridgeObjectRelease();
}

void _XMLPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 1)
    return;
  v3 = v2;
  v4 = v2[2];
  if ((unint64_t)a2 < 0x2000)
  {
    v5 = 0x2000 - v4;
    if (__OFSUB__(0x2000, v4))
    {
      __break(1u);
    }
    else
    {
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = 0x2000 - v4;
      if (v5 < a2)
        goto LABEL_8;
      if (!*v3)
      {
LABEL_17:
        __break(1u);
        return;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      if (!__OFADD__(v4, v6))
      {
        v3[2] = v4 + v6;
        return;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_8:
  if (v4 >= 1)
  {
    Data._Representation.append(contentsOf:)();
    v3[2] = 0;
  }
  Data._Representation.append(contentsOf:)();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendIndents(_:)(Swift::Int a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;

  v1 = a1;
  if (a1 >= 4)
  {
    do
    {
      v4 = xmmword_18215F910;
      _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)&v4, 4);
      swift_bridgeObjectRelease();
      v1 -= 4;
    }
    while (v1 > 3);
  }
  switch(v1)
  {
    case 1uLL:
      v2 = 9;
      v3 = 0xE100000000000000;
      break;
    case 2uLL:
      v2 = 2313;
      v3 = 0xE200000000000000;
      break;
    case 3uLL:
      v2 = 592137;
      v3 = 0xE300000000000000;
      break;
    default:
      return;
  }
  *(_QWORD *)&v4 = v2;
  *((_QWORD *)&v4 + 1) = v3;
  specialized String.withUTF8<A>(_:)((uint64_t *)&v4);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation::XMLPlistTag _, Swift::Bool withNewLine)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v8 = 60;
  v9 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v8);
  swift_bridgeObjectRelease();
  v4 = XMLPlistTag.tagName.getter(_);
  _XMLPlistEncodingFormat.Writer.append(_:)(v4, v5, v6, v7);
  if (withNewLine)
  {
    v8 = 2622;
    v9 = 0xE200000000000000;
  }
  else
  {
    v8 = 62;
    v9 = 0xE100000000000000;
  }
  specialized String.withUTF8<A>(_:)(&v8);
  swift_bridgeObjectRelease();
}

uint64_t _XMLPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t v3;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  a3(v6, v3);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation::XMLPlistTag a1)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v6 = 12092;
  v7 = 0xE200000000000000;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
  v2 = XMLPlistTag.tagName.getter(a1);
  _XMLPlistEncodingFormat.Writer.append(_:)(v2, v3, v4, v5);
  v6 = 2622;
  v7 = 0xE200000000000000;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
}

uint64_t _XMLPlistEncodingFormat.Writer.appendArray(_:indentation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = 60;
    v7 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v6);
    swift_bridgeObjectRelease();
    _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"array", 5);
    v6 = 2622;
    v7 = 0xE200000000000000;
    specialized String.withUTF8<A>(_:)(&v6);
    swift_bridgeObjectRelease();
    if (!__OFADD__(a2, 1))
    {
      swift_retain();
      v2 = *(unsigned __int8 *)(a1 + 48);
      outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a2 + 1);
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x181D8143CLL);
  }
  v6 = 60;
  v7 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"array", 5);
  v6 = 671279;
  v7 = 0xE300000000000000;
  specialized String.withUTF8<A>(_:)(&v6);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)(Swift::OpaquePointer _, Swift::Int indentation)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = v2;
  v20 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)_._rawValue + 2))
  {
    v18 = 60;
    v19 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v18);
    swift_bridgeObjectRelease();
    _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"dict", 4);
    v18 = 2622;
    v19 = 0xE200000000000000;
    specialized String.withUTF8<A>(_:)(&v18);
    swift_bridgeObjectRelease();
    v4 = swift_bridgeObjectRetain();
    v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
    swift_bridgeObjectRelease();
    v18 = (uint64_t)v5;
    specialized MutableCollection<>.sort(by:)((_QWORD **)&v18);
    v6 = (_QWORD *)v18;
    if (specialized Array.count.getter(v18))
    {
      if (!__OFADD__(indentation, 1))
      {
        v15 = v6 + 4;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v6);
        v7 = v6[4];
        v8 = v6[5];
        v9 = v6[7];
        v10 = v15[4];
        v11 = v3;
        v12 = *((unsigned __int8 *)v15 + 40);
        v13 = *((unsigned __int8 *)v15 + 16);
        outlined copy of _XMLPlistEncodingFormat.Reference(*v15, v15[1], *((_BYTE *)v15 + 16));
        outlined copy of _XMLPlistEncodingFormat.Reference(v9, v10, v12);
        _XMLPlistEncodingFormat.Writer.appendIndents(_:)(indentation + 1);
        v16 = 60;
        v17 = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)(&v16);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"key", 3);
        v16 = 62;
        v17 = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)(&v16);
        swift_bridgeObjectRelease();
        if (!v13)
        {
          v16 = v7;
          v17 = v8;
          swift_bridgeObjectRetain_n();
          specialized String.withUTF8<A>(_:)(&v16, v11);
          swift_bridgeObjectRelease();
          outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, 0);
          v16 = 12092;
          v17 = 0xE200000000000000;
          specialized String.withUTF8<A>(_:)(&v16);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)"key", 3);
          v16 = 2622;
          v17 = 0xE200000000000000;
          specialized String.withUTF8<A>(_:)(&v16);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.appendIndents(_:)(indentation + 1);
          __asm { BR              X8 }
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181D83948);
      }
      __break(1u);
      JUMPOUT(0x181D838C4);
    }
    swift_release();
    _XMLPlistEncodingFormat.Writer.appendIndents(_:)(indentation);
    _XMLPlistEncodingFormat.Writer.appendClose(_:)(Foundation_XMLPlistTag_dict);
  }
  else
  {
    _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation_XMLPlistTag_dict);
  }
}

void _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[10];
  _BYTE v5[80];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = v5;
  v4[3] = v4;
  v4[4] = v5;
  if (a3 >= 8)
    v3 = 8;
  else
    v3 = a3;
  v4[5] = v3;
  v4[7] = v5;
  v4[8] = 80;
  __asm { BR              X10 }
}

void sub_181D83AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char *v14;
  char v15[168];

  v8 = v5;
  v9 = v7;
  v10 = BYTE2(v7);
  v11 = BYTE3(v7);
  v12 = BYTE4(v7);
  v13 = BYTE5(v7);
  closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(&v8, BYTE6(v7), &v14, v15, a5, v6, (uint64_t)v15);
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendDate(_:)(Foundation::Date a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  unint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36[2];
  char v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[18];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = *v1;
  if (one-time initialization token for cache != -1)
LABEL_23:
    swift_once();
  v3 = static CalendarCache.cache + 16;
  v4 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in CalendarCache.fixed(_:)(v3, 7, v49);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  v39 = v49[0];
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = static TimeZoneCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v5, 0, v49);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  if (!*(_QWORD *)&v49[0])
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  Calendar.timeZone.setter((uint64_t *)v49);
  v35 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v7 = static _SetStorage.allocate(capacity:)();
  v8 = 0;
  v9 = v7 + 56;
  do
  {
    v10 = outlined read-only object #0 of _XMLPlistEncodingFormat.Writer.appendDate(_:)[v8 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v10);
    v11 = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v7 + 32);
    v13 = v11 & ~v12;
    v14 = v13 >> 6;
    v15 = *(_QWORD *)(v9 + 8 * (v13 >> 6));
    v16 = 1 << v13;
    v17 = *(_QWORD *)(v7 + 48);
    if (((1 << v13) & v15) != 0)
    {
      if (*(unsigned __int8 *)(v17 + v13) == (_DWORD)v10)
        goto LABEL_6;
      v18 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v18;
        v14 = v13 >> 6;
        v15 = *(_QWORD *)(v9 + 8 * (v13 >> 6));
        v16 = 1 << v13;
        if ((v15 & (1 << v13)) == 0)
          break;
        if (*(unsigned __int8 *)(v17 + v13) == (_DWORD)v10)
          goto LABEL_6;
      }
    }
    *(_QWORD *)(v9 + 8 * v14) = v16 | v15;
    *(_BYTE *)(v17 + v13) = v10;
    v19 = *(_QWORD *)(v7 + 16);
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
      goto LABEL_23;
    }
    *(_QWORD *)(v7 + 16) = v21;
LABEL_6:
    ++v8;
  }
  while (v8 != 7);
  v45 = v35;
  swift_unknownObjectRetain();
  v22 = swift_retain();
  Calendar.ComponentSet.init(_:)(v22, &v43);
  v23 = 1.59271755e13;
  if (v2 <= 1.59271755e13)
    v23 = v2;
  *(_QWORD *)&v42 = fmax(v23, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v43, (double *)&v42, v49);
  swift_unknownObjectRelease();
  swift_release();
  v24 = static TimeZoneCache.cache + 16;
  v25 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v25);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v24, 0, &v45);
  os_unfair_lock_unlock(v25);
  swift_release_n();
  v26 = v45;
  if (!(_QWORD)v45)
    goto LABEL_25;
  v27 = *((_QWORD *)&v45 + 1);
  v28 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v28 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v28[4], 0, &v45);
  os_unfair_lock_unlock(v28 + 36);
  swift_release_n();
  if (!(_QWORD)v45)
    goto LABEL_26;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v43 = v26;
  v44 = v27;
  if (one-time initialization token for cache != -1)
    swift_once();
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  inited = swift_initStaticObject();
  swift_release();
  v30 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged((unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized, 255, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleUnlocalized, (uint64_t)&protocol conformance descriptor for _LocaleUnlocalized);
  *(_QWORD *)&v42 = inited;
  *((_QWORD *)&v42 + 1) = v30;
  v40 = 0;
  v41 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v38, &v43, &v42, 2, 0, 4, 0, (uint64_t)&v40);
  LODWORD(v45) = 0x10000;
  BYTE4(v45) = 1;
  *((_QWORD *)&v45 + 1) = 0;
  v46 = v31;
  v47 = v26;
  v48 = v27;
  v37 = 0;
  MEMORY[0x1E0C80A78](v31);
  closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)&v34, 129, (uint64_t)&v45, (uint64_t)v49, &v37, 0, 0, v36);
  v32 = v36[0];
  v33 = v36[1];
  swift_unknownObjectRelease();
  swift_release();
  v43 = v32;
  v44 = v33;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v43);
  swift_bridgeObjectRelease();
  outlined release of DateComponents((uint64_t)v49);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendEmpty(_:)(Foundation::XMLPlistTag a1)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v6 = 60;
  v7 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
  v2 = XMLPlistTag.tagName.getter(a1);
  _XMLPlistEncodingFormat.Writer.append(_:)(v2, v3, v4, v5);
  v6 = 671279;
  v7 = 0xE300000000000000;
  specialized String.withUTF8<A>(_:)(&v6);
  swift_bridgeObjectRelease();
}

void closure #1 in _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(char *__src, uint64_t a2, _QWORD *a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (__src)
  {
    if (a2 < 1)
      return;
    v4 = __src;
    v5 = &__src[a2];
    while (1)
    {
      v6 = v5 - v4;
      if (v5 == v4)
      {
        v15 = v5;
        if (v6 < 1)
          return;
        goto LABEL_27;
      }
      v7 = *v4;
      v8 = v7 > 0x3E;
      v9 = (1 << v7) & 0x5000004000000000;
      if (v8 || v9 == 0)
        break;
      v11 = 0;
LABEL_10:
      _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)v4, v11);
      _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(v4[v11]);
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v4 += v11 + 1;
      if (v4 >= v5)
        return;
    }
    if (v6 == 1)
    {
      v15 = v4;
    }
    else
    {
      v11 = 1;
      while (1)
      {
        v12 = v4[v11];
        v8 = v12 > 0x3E;
        v13 = (1 << v12) & 0x5000004000000000;
        if (!v8 && v13 != 0)
          break;
        if (v6 == ++v11)
          goto LABEL_24;
      }
      if ((v11 & 0x8000000000000000) == 0)
        goto LABEL_10;
      __break(1u);
LABEL_24:
      v15 = v4;
      if (v6 < 1)
        return;
LABEL_27:
      if ((unint64_t)v6 >> 13)
      {
        if ((uint64_t)a3[2] <= 0)
          goto LABEL_38;
        goto LABEL_37;
      }
    }
    v16 = a3[2];
    v17 = 0x2000 - v16;
    if (__OFSUB__(0x2000, v16))
      goto LABEL_45;
    if (v17 >= v6)
      v18 = v5 - v4;
    else
      v18 = 0x2000 - v16;
    if (v17 >= v6)
    {
      if (!*a3)
        goto LABEL_48;
      memmove((void *)(*a3 + v16), v15, v5 - v4);
      if (!__OFADD__(v16, v18))
      {
        a3[2] = v16 + v18;
        return;
      }
      goto LABEL_46;
    }
    if (v16 <= 0)
      goto LABEL_38;
LABEL_37:
    Data._Representation.append(contentsOf:)();
    a3[2] = 0;
LABEL_38:
    if (v5 != v4)
      Data._Representation.append(contentsOf:)();
    return;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(Swift::UInt8 a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  switch(a1)
  {
    case '&':
      v1 = 0x3B706D6126;
      v2 = 0xE500000000000000;
LABEL_8:
      v8 = v1;
      v9 = v2;
      specialized String.withUTF8<A>(_:)(&v8);
      swift_bridgeObjectRelease();
      return;
    case '>':
      v1 = 997484326;
LABEL_7:
      v2 = 0xE400000000000000;
      goto LABEL_8;
    case '<':
      v1 = 997485606;
      goto LABEL_7;
  }
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v8 = 0xD00000000000002DLL;
  v9 = 0x800000018230CFB0;
  v4 = (((a1 & 0x3F) << 8) | (a1 >> 6)) + 33217;
  if ((a1 & 0x80) == 0)
    v4 = (a1 + 1);
  v7 = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v4) >> 3)) & 7)));
  v5._countAndFlagsBits = MEMORY[0x186DA46D0](&v7);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 39;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void one-time initialization function for dataEncodeTable()
{
  static _XMLPlistEncodingFormat.Writer.dataEncodeTable = &outlined read-only object #0 of one-time initialization function for dataEncodeTable;
}

void closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(_BYTE *a1, uint64_t a2, char **a3, char *a4, Swift::Int a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  __objc2_class *v14;
  __objc2_class *v15;
  unint64_t v16;
  char *v17;
  __objc2_class *superclass;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __objc2_class *v23;
  unint64_t v24;
  unint64_t cache;
  __objc2_class_ro **p_info;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  Swift::Int v38;
  Swift::Int v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  unint64_t v44;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  if (a2 < 1)
  {
    LOBYTE(v7) = 0;
LABEL_27:
    if (a2 % 3 != 1)
    {
      if (!(a2 % 3))
      {
        v32 = *a3;
        goto LABEL_37;
      }
      v11 = *a3;
      if (one-time initialization token for dataEncodeTable != -1)
        goto LABEL_54;
      goto LABEL_34;
    }
    v11 = *a3;
    if (one-time initialization token for dataEncodeTable != -1)
      goto LABEL_52;
    goto LABEL_31;
  }
  v10 = 0;
  v11 = 0;
  v12 = &a1[a2];
  v13 = 8 * a5;
  v14 = &OBJC_METACLASS___NSFileWritingClaim;
  v15 = &OBJC_METACLASS___NSFileWritingClaim;
  v16 = (unint64_t)(a5 - 0x1000000000000000) >> 61;
  v44 = v16;
  while (!__OFADD__(v10, 1))
  {
    v7 = a1[v10];
    if (v10 == 3 * (v10 / 3))
    {
      v17 = *a3;
      if (v14[29].info != (__objc2_class_ro *)-1)
      {
        v48 = a1[v10];
        v41 = a1;
        v11 = (char *)a5;
        v30 = v16;
        swift_once();
        v16 = v30;
        v15 = &OBJC_METACLASS___NSFileWritingClaim;
        v14 = &OBJC_METACLASS___NSFileWritingClaim;
        a1 = v41;
        v7 = v48;
        a5 = (Swift::Int)v11;
      }
      superclass = v15[52].superclass;
      v19 = (char *)(v7 >> 2);
      if (superclass->cache <= (void *)(v7 >> 2))
        goto LABEL_47;
LABEL_15:
      v20 = &v19[(_QWORD)superclass + 32];
      v21 = 1;
      goto LABEL_21;
    }
    if (v10 % 3 == 1)
    {
      v17 = *a3;
      if (v14[29].info != (__objc2_class_ro *)-1)
      {
        v47 = a1[v10];
        v38 = a5;
        v40 = a1;
        v29 = v16;
        swift_once();
        v16 = v29;
        v15 = &OBJC_METACLASS___NSFileWritingClaim;
        v14 = &OBJC_METACLASS___NSFileWritingClaim;
        a5 = v38;
        a1 = v40;
        v7 = v47;
      }
      superclass = v15[52].superclass;
      v19 = (char *)(((unint64_t)(v7 | ((_DWORD)v11 << 8)) >> 4) & 0x3F);
      if (v19 >= superclass->cache)
        goto LABEL_46;
      goto LABEL_15;
    }
    v22 = *a3;
    if (v14[29].info != (__objc2_class_ro *)-1)
    {
      v49 = a1[v10];
      v39 = a5;
      v42 = a1;
      v31 = v16;
      swift_once();
      v16 = v31;
      v15 = &OBJC_METACLASS___NSFileWritingClaim;
      v14 = &OBJC_METACLASS___NSFileWritingClaim;
      a5 = v39;
      a1 = v42;
      v7 = v49;
    }
    v23 = v15[52].superclass;
    v24 = ((unint64_t)(v7 | ((_DWORD)v11 << 8)) >> 6) & 0x3F;
    cache = (unint64_t)v23->cache;
    if (v24 >= cache)
      goto LABEL_48;
    p_info = &v23->info;
    *v22 = *((_BYTE *)p_info + v24);
    if ((v7 & 0x3F) >= cache)
      goto LABEL_49;
    v17 = *a3 + 1;
    v20 = (char *)p_info + (v7 & 0x3F);
    v21 = 2;
LABEL_21:
    *v17 = *v20;
    v27 = &(*a3)[v21];
    *a3 = v27;
    if (v16 < 7)
      goto LABEL_43;
    if (__OFADD__(v27 - a4, v13))
      goto LABEL_44;
    if (v27 - a4 + v13 >= 76)
    {
      v46 = (_BYTE *)v7;
      v7 = (unint64_t)a1;
      *v27 = 10;
      v28 = *a3 - a4 + 1;
      v11 = (char *)a5;
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a5);
      if (v28 < 0)
        goto LABEL_45;
      _XMLPlistEncodingFormat.Writer.append(_:)(a7, v28);
      *a3 = a4;
      a5 = (Swift::Int)v11;
      a1 = (_BYTE *)v7;
      v7 = (unint64_t)v46;
      v14 = &OBJC_METACLASS___NSFileWritingClaim;
      v15 = &OBJC_METACLASS___NSFileWritingClaim;
      v16 = v44;
    }
    ++v10;
    v11 = (char *)v7;
    if (&a1[v10] >= v12)
      goto LABEL_27;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    v36 = a5;
    swift_once();
    a5 = v36;
LABEL_31:
    v33 = 16 * (v7 & 3);
    if (v33 < *((_QWORD *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + 2))
    {
      *v11 = *((_BYTE *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + v33 + 32);
      (*a3)[1] = 61;
      (*a3)[2] = 61;
      v32 = *a3 + 3;
LABEL_36:
      *a3 = v32;
LABEL_37:
      v11 = (char *)(v32 - a4);
      if (v32 - a4 < 1)
        return;
      *v32 = 10;
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a5);
      v35 = (uint64_t)(v11 + 1);
      if (__OFADD__(v11, 1))
        continue;
      if ((v35 & 0x8000000000000000) == 0)
      {
        _XMLPlistEncodingFormat.Writer.append(_:)(a7, v35);
        return;
      }
      goto LABEL_51;
    }
    break;
  }
  __break(1u);
LABEL_54:
  v37 = a5;
  swift_once();
  a5 = v37;
LABEL_34:
  v34 = 4 * (v7 & 0xF);
  if (v34 < *((_QWORD *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + 2))
  {
    *v11 = *((_BYTE *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + v34 + 32);
    (*a3)[1] = 61;
    v32 = *a3 + 2;
    goto LABEL_36;
  }
  __break(1u);
}

Swift::Int _XMLPlistEncodingFormat.Reference.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  Swift::Int result;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _XMLPlistEncodingFormat.Reference()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(_BYTE *)(v0 + 16))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v3 = v0;
    v1 = *(_QWORD *)v0;
    v2 = *(_QWORD *)(v3 + 8);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    return outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _XMLPlistEncodingFormat.Reference()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  Swift::Int result;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Comparable.<= infix(_:_:));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Comparable.>= infix(_:_:));
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (*((_BYTE *)a2 + 16) || *((_BYTE *)a1 + 16))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v2 = *a1;
    v3 = a1[1];
    v4 = *a2;
    v5 = a2[1];
    if (v4 == v2 && v5 == v3)
      return 0;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1);
}

char *specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t v7;
  int64_t v8;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int isUniquelyReferenced_nonNull_native;
  int64_t v16;
  uint64_t v17;
  char *result;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v5 = v7;
  if (!isUniquelyReferenced_nonNull_native || v12 > *(_QWORD *)(v7 + 24) >> 1)
  {
    if (v8 <= v12)
      v16 = v8 + v11;
    else
      v16 = v8;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 1);
    v7 = *v5;
  }
  v17 = v7 + 32 + 24 * a1;
  result = (char *)swift_arrayDestroy();
  if (!v11)
    goto LABEL_20;
  v19 = *(_QWORD *)(v7 + 16);
  v20 = __OFSUB__(v19, a2);
  v21 = v19 - a2;
  if (v20)
    goto LABEL_26;
  if ((v21 & 0x8000000000000000) == 0)
  {
    result = (char *)(v17 + 24);
    v22 = (char *)(v7 + 32 + 24 * a2);
    v23 = 24 * v21;
    if ((char *)(v17 + 24) != v22 || result >= &v22[v23])
      result = (char *)memmove(result, v22, v23);
    v24 = *(_QWORD *)(v7 + 16);
    v20 = __OFADD__(v24, v11);
    v25 = v24 + v11;
    if (!v20)
    {
      *(_QWORD *)(v7 + 16) = v25;
LABEL_20:
      *(_QWORD *)v17 = a3;
      *(_QWORD *)(v17 + 8) = a4;
      *(_BYTE *)(v17 + 16) = a5;
      *v5 = v7;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFADD__(v6, v9))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v6 + v9 > *(_QWORD *)(v5 + 24) >> 1)
  {
    MEMORY[0x186DA5480]();
    v5 = *v3;
  }
  v12 = (_QWORD *)(v5 + 32 + 8 * a1);
  type metadata accessor for _BPlistEncodingFormat.Reference();
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_17;
  v13 = *(_QWORD *)(v5 + 16);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_23;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)(v12 + 1);
    v17 = (char *)(v5 + 32 + 8 * a2);
    if (v12 + 1 != (_QWORD *)v17 || v16 >= &v17[8 * v15])
      memmove(v16, v17, 8 * v15);
    v18 = *(_QWORD *)(v5 + 16);
    v14 = __OFADD__(v18, v9);
    v19 = v18 + v9;
    if (!v14)
    {
      *(_QWORD *)(v5 + 16) = v19;
LABEL_17:
      *v12 = a3;
      return specialized ContiguousArray._endMutation()();
    }
    goto LABEL_24;
  }
LABEL_25:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  unint64_t v32;
  unint64_t v33;

  if (a1 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v6;
  if (!(_DWORD)result || v12 > *(_QWORD *)(v6 + 24) >> 1)
  {
    if (v7 <= v12)
      v15 = v7 + v11;
    else
      v15 = v7;
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v15, 1);
    v6 = *v4;
  }
  v16 = v6 + 32;
  v17 = (char *)(v6 + 32 + a1);
  v18 = &v17[a3];
  if (!v11)
  {
LABEL_20:
    if (a3 < 1)
    {
LABEL_34:
      *v4 = v6;
      return result;
    }
    v25 = a3 + a1 + v6 + 32;
    if (v25 <= v6 + a1 + 33)
      v25 = v6 + a1 + 33;
    v26 = v25 - (v6 + a1) - 33;
    if (v26 >= a3)
      v26 = a3;
    v27 = v26 + 1;
    if (v27 > 0x20)
    {
      v29 = v27 & 0x1F;
      if ((v27 & 0x1F) == 0)
        v29 = 32;
      v28 = v27 - v29;
      v17 += v28;
      v30 = vdupq_n_s8(a4);
      v31 = (int8x16_t *)(a1 + v6 + 48);
      v32 = v28;
      do
      {
        v31[-1] = v30;
        *v31 = v30;
        v31 += 2;
        v32 -= 32;
      }
      while (v32);
    }
    else
    {
      v28 = 0;
    }
    v33 = a3 - v28;
    while (v33)
    {
      *v17++ = a4;
      --v33;
      if (v17 >= v18)
        goto LABEL_34;
    }
    __break(1u);
    goto LABEL_36;
  }
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = (char *)(v16 + a2);
    if (v18 != (char *)(v16 + a2) || v18 >= &v21[v20])
      result = (uint64_t)memmove(&v17[a3], v21, v20);
    v22 = *(_QWORD *)(v6 + 16);
    v23 = __OFADD__(v22, v11);
    v24 = v22 + v11;
    if (v23)
      goto LABEL_42;
    *(_QWORD *)(v6 + 16) = v24;
    goto LABEL_20;
  }
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of _XMLPlistEncodingFormat.Reference?(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined consume of _XMLPlistEncodingFormat.Reference(result, a2, a3);
  return result;
}

uint64_t sub_181D85E7C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181D85EAC()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *boxed_opaque_existential_1;
  void (*v40)(char *, uint64_t);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];

  v51 = a6;
  v52[3] = &type metadata for _CodingKey;
  v48 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v52[4] = v48;
  v17 = swift_allocObject();
  v52[0] = v17;
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)(v17 + 32) = a4;
  *(_BYTE *)(v17 + 40) = a5;
  *(_QWORD *)(a10 + 128) = a1;
  swift_retain();
  swift_retain();
  _CodingKey.stringValue.getter(a2, a3, a4, a5);
  *(_QWORD *)(a10 + 136) = a7;
  *(_QWORD *)(a10 + 144) = a8;
  *(_QWORD *)(a10 + 152) = a9 | 0x8000000000000000;
  *(_QWORD *)(a10 + 160) = v18;
  *(_QWORD *)(a10 + 168) = v19;
  swift_release();
  v20 = *(_QWORD *)(a1 + 32);
  v49 = *(_QWORD *)(a1 + 24);
  v50 = v20;
  v21 = __swift_project_boxed_opaque_existential_1(v52, (uint64_t)&type metadata for _CodingKey);
  v22 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  initializeWithCopy for _CodingKey((uint64_t)v25, (uint64_t)v21);
  v26 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v25, 0, 1u);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v29);
  (*(void (**)(char *, char *, uint64_t, __n128))(v23 + 16))(v25, v25, v22, v30);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v25, 1u) == 1)
  {
    v31 = *(void (**)(char *, uint64_t))(v23 + 8);
    v32 = v50;
    swift_bridgeObjectRetain();
    v31(v25, v22);
    v31(v25, v22);
    v33 = v51;
    swift_retain();
    swift_release();
    v34 = v33 >> 62;
    v35 = (uint64_t *)v33;
    v36 = v32;
    if (v33 >> 62)
    {
LABEL_3:
      if ((_DWORD)v34 != 1)
      {
        v42 = 0;
LABEL_14:
        v46 = v49;
        *(_QWORD *)(a10 + 16) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a10 + 24) = v46;
        *(_QWORD *)(a10 + 32) = v36;
        *(_QWORD *)(a10 + 40) = v35;
        *(_QWORD *)(a10 + 56) = 0;
        *(_QWORD *)(a10 + 64) = 0;
        *(_QWORD *)(a10 + 48) = v42;
        *(_BYTE *)(a10 + 72) = 8;
        *(_OWORD *)(a10 + 80) = xmmword_182068080;
        *(_BYTE *)(a10 + 96) = 8;
        *(_OWORD *)(a10 + 104) = xmmword_182068790;
        *(_BYTE *)(a10 + 120) = 8;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        return a10;
      }
      v37 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      v42 = *v37;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    v37 = (uint64_t *)(v33 + 64);
    goto LABEL_13;
  }
  __swift_memcpy25_8((uint64_t)v28, (uint64_t)v25);
  v35 = (uint64_t *)swift_allocObject();
  v38 = v48;
  v35[5] = (uint64_t)&type metadata for _CodingKey;
  v35[6] = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v28);
  v40 = *(void (**)(char *, uint64_t))(v23 + 8);
  v36 = v50;
  swift_bridgeObjectRetain();
  v40(v25, v22);
  v33 = v51;
  v35[7] = v51;
  v34 = v33 >> 62;
  if (v33 >> 62)
  {
    if ((_DWORD)v34 != 1)
    {
      v45 = 1;
LABEL_11:
      v35[8] = v45;
      swift_release();
      if ((_DWORD)v34)
        goto LABEL_3;
      goto LABEL_12;
    }
    v41 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v41 = (uint64_t *)(v33 + 64);
  }
  v43 = *v41;
  result = swift_retain();
  v45 = v43 + 1;
  if (!__OFADD__(v43, 1))
    goto LABEL_11;
  __break(1u);
  return result;
}

uint64_t specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53[3];
  __int128 v54;

  v52 = a3;
  *(_QWORD *)&v54 = a6;
  *((_QWORD *)&v54 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a2, a6);
  v13 = *a4;
  v14 = a4[1];
  v15 = *((unsigned __int8 *)a4 + 16);
  *(_QWORD *)(a5 + 128) = a1;
  swift_retain();
  swift_retain();
  v16 = dispatch thunk of CodingKey.stringValue.getter();
  *(_QWORD *)(a5 + 136) = v13;
  *(_QWORD *)(a5 + 144) = v14;
  *(_QWORD *)(a5 + 152) = v15 | 0x8000000000000000;
  *(_QWORD *)(a5 + 160) = v16;
  *(_QWORD *)(a5 + 168) = v17;
  swift_release();
  v49 = *(_QWORD *)(a1 + 24);
  v50 = a1;
  v51 = *(_QWORD *)(a1 + 32);
  v48 = v54;
  v18 = v54;
  v19 = __swift_project_boxed_opaque_existential_1(v53, v54);
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = MEMORY[0x1E0C80A78](v20);
  v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v25 + 16))((char *)&v48 - v24, v19, v18, v23);
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))((char *)&v48 - v24, 0, 1, v18);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v29);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))((char *)&v48 - v24, (char *)&v48 - v24, v20, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))((char *)&v48 - v24, 1, v18) == 1)
  {
    v31 = *(void (**)(char *, uint64_t))(v21 + 8);
    v32 = v51;
    swift_bridgeObjectRetain();
    v31((char *)&v48 - v24, v20);
    v31((char *)&v48 - v24, v20);
    v33 = v52;
    swift_retain();
    swift_release();
    v34 = v33 >> 62;
    v35 = v33;
    v36 = v32;
    if (v33 >> 62)
    {
LABEL_3:
      if ((_DWORD)v34 != 1)
      {
        v43 = 0;
LABEL_14:
        v47 = v49;
        *(_QWORD *)(a5 + 16) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a5 + 24) = v47;
        *(_QWORD *)(a5 + 32) = v36;
        *(_QWORD *)(a5 + 40) = v35;
        *(_QWORD *)(a5 + 56) = 0;
        *(_QWORD *)(a5 + 64) = 0;
        *(_QWORD *)(a5 + 48) = v43;
        *(_BYTE *)(a5 + 72) = 8;
        *(_OWORD *)(a5 + 80) = xmmword_182068080;
        *(_BYTE *)(a5 + 96) = 8;
        *(_OWORD *)(a5 + 104) = xmmword_182068790;
        *(_BYTE *)(a5 + 120) = 8;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
        return a5;
      }
      v37 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      v43 = *v37;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    v37 = (uint64_t *)(v33 + 64);
    goto LABEL_13;
  }
  v38 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v38(v28, (char *)&v48 - v24, v18);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 40) = v48;
  v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v35 + 16));
  v38((char *)v39, v28, v18);
  v40 = *(void (**)(char *, uint64_t))(v21 + 8);
  v41 = v51;
  swift_bridgeObjectRetain();
  v40((char *)&v48 - v24, v20);
  v33 = v52;
  *(_QWORD *)(v35 + 56) = v52;
  v34 = v33 >> 62;
  v36 = v41;
  if (v33 >> 62)
  {
    if ((_DWORD)v34 != 1)
    {
      v46 = 1;
LABEL_11:
      *(_QWORD *)(v35 + 64) = v46;
      swift_release();
      if ((_DWORD)v34)
        goto LABEL_3;
      goto LABEL_12;
    }
    v42 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v42 = (uint64_t *)(v33 + 64);
  }
  v44 = *v42;
  result = swift_retain();
  v46 = v44 + 1;
  if (!__OFADD__(v44, 1))
    goto LABEL_11;
  __break(1u);
  return result;
}

uint64_t specialized static _XMLPlistEncodingFormat.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a2 + 16))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

uint64_t specialized static _XMLPlistEncodingFormat.Reference.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a2 + 16))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    return 0;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistUnkeyedEncodingContainerXML, &unk_1E0F28EF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML);
  }
  return result;
}

uint64_t sub_181D86768()
{
  uint64_t v0;

  swift_release();
  outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistKeyedEncodingContainerXML);
}

uint64_t specialized _XMLPlistEncodingFormat.Writer.realDescription(_:)(double a1)
{
  uint64_t v1;
  Swift::String v2;
  Swift::Bool v3;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
  {
    if (a1 <= 0.0)
      return 0x74696E69666E692DLL;
    else
      return 0x74696E69666E692BLL;
  }
  else
  {
    v1 = Double.description.getter();
    swift_bridgeObjectRetain();
    v2._countAndFlagsBits = 12334;
    v2._object = (void *)0xE200000000000000;
    v3 = String.hasSuffix(_:)(v2);
    swift_bridgeObjectRelease();
    if (v3)
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  return v1;
}

void partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(_BYTE *a1, uint64_t a2)
{
  partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(a1, a2);
}

{
  uint64_t v2;

  closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(a1, a2, *(char ***)(v2 + 16), *(char **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t outlined release of Date.ISO8601FormatStyle(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  return a1;
}

uint64_t destroy for _PlistKeyedEncodingContainerXML(uint64_t a1)
{
  swift_release();
  outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return swift_release();
}

uint64_t initializeWithCopy for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

void *type metadata accessor for _PlistUnkeyedEncodingContainerXML()
{
  return &unk_1E0F28EF0;
}

uint64_t destroy for _XMLPlistEncodingFormat.Writer(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for _XMLPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

_QWORD *assignWithCopy for _XMLPlistEncodingFormat.Writer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v3 = a2[3];
  v4 = a2[4];
  outlined copy of Data._Representation(v3, v4);
  v5 = a1[3];
  v6 = a1[4];
  a1[3] = v3;
  a1[4] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v3;
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat.Writer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat.Writer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat.Writer()
{
  return &type metadata for _XMLPlistEncodingFormat.Writer;
}

uint64_t destroy for _XMLPlistEncodingFormat.Reference(uint64_t a1)
{
  return outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat.Reference(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 248);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 8)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat.Reference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 248;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _XMLPlistEncodingFormat.Reference(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 7u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 8);
}

uint64_t destructiveInjectEnumTag for _XMLPlistEncodingFormat.Reference(uint64_t result, unsigned int a2)
{
  if (a2 >= 8)
  {
    *(_QWORD *)result = a2 - 8;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 8;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat.Reference()
{
  return &type metadata for _XMLPlistEncodingFormat.Reference;
}

double static TimeZone.gmt.getter@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  os_unfair_lock_s *v3;
  double result;
  __int128 v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static TimeZoneCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v2, 0, &v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  result = *(double *)&v5;
  if ((_QWORD)v5)
    *a1 = v5;
  else
    __break(1u);
  return result;
}

double static TimeZone.default.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v2;
  os_unfair_lock_s *v3;
  double result;
  __int128 v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.default.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

Swift::Bool __swiftcall TimeZone.isDaylightSavingTime(for:)(Foundation::Date a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;

  v3 = *v1;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v7 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 64))(&v7, ObjectType, v4) & 1;
}

Swift::Double __swiftcall TimeZone.daylightSavingTimeOffset(for:)(Foundation::Date a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  Swift::Double result;
  uint64_t v7;

  v3 = *v1;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v7 = v3;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 72))(&v7, ObjectType, v4);
  return result;
}

Foundation::Date_optional __swiftcall TimeZone.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;
  Swift::Double v7;
  uint64_t v8;
  Foundation::Date_optional result;

  v3 = *v1;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v8 = v3;
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 80))(&v8, ObjectType, v4);
  result.value = *(Foundation::Date *)&v7;
  result.is_nil = v6;
  return result;
}

uint64_t TimeZone.localizedName(for:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD v9[2];

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v9[0] = v4;
  v9[1] = v5;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v6 + 88))(a1, v9, ObjectType, v6);
}

uint64_t static TimeZone.abbreviationDictionary.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static TimeZoneCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t static TimeZone.default.setter(__int128 *a1)
{
  __int128 v1;
  __int128 v3;
  uint64_t v4[3];
  uint64_t v5;

  v1 = *a1;
  v3 = *a1;
  if (one-time initialization token for cache != -1)
  {
    swift_once();
    v1 = v3;
  }
  v5 = static TimeZoneCache.cache;
  *(_OWORD *)v4 = v1;
  TimeZoneCache.setDefault(_:)(v4);
  return swift_unknownObjectRelease();
}

uint64_t TimeZone.nextDaylightSavingTimeTransition.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  timespec __tp;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  return (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 80))(&__tp, ObjectType, v1);
}

uint64_t (*static TimeZone.default.modify(_OWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v5[4];

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.default.getter(v2, v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  *a1 = *(_OWORD *)v5;
  return static TimeZone.default.modify;
}

uint64_t static TimeZone.default.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  TimeZoneCache.setDefault(_:)(v3);
  return swift_unknownObjectRelease();
}

uint64_t static TimeZone.abbreviationDictionary.setter(uint64_t a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static TimeZoneCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(v2, a1);
  os_unfair_lock_unlock(v3);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t (*static TimeZone.abbreviationDictionary.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static TimeZoneCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v2, &v5);
  a1[1] = 0;
  os_unfair_lock_unlock(v3);
  swift_release_n();
  *a1 = v5;
  return static TimeZone.abbreviationDictionary.modify;
}

uint64_t static TimeZone.abbreviationDictionary.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *a1;
  v4 = static TimeZoneCache.cache + 16;
  v5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v5);
    closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(v4, v3);
    os_unfair_lock_unlock(v5);
    swift_release_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v5);
    closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(v4, v3);
    os_unfair_lock_unlock(v5);
    swift_release_n();
  }
  return swift_bridgeObjectRelease();
}

void static TimeZone.cldrKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 31348;
  a1[1] = 0xE200000000000000;
}

void static TimeZone.legacyKeywordKey.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x656E6F7A656D6974;
  a1[1] = 0xE800000000000000;
}

uint64_t TimeZone.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 112))(a1, ObjectType, v3);
}

Swift::Int TimeZone.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeZone()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t TimeZone.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  __darwin_time_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __darwin_time_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[3];
  timespec __tp;
  uint64_t v29;

  v27[1] = a1;
  v29 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_182065BB0;
  *(_OWORD *)(v11 + 32) = xmmword_182069A60;
  ObjectType = swift_getObjectType();
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 32);
  swift_unknownObjectRetain();
  v14 = v13(ObjectType, v9);
  v16 = v15;
  swift_unknownObjectRelease();
  *(_QWORD *)(v11 + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v11 + 48) = v14;
  *(_QWORD *)(v11 + 56) = v16;
  *(_OWORD *)(v11 + 80) = xmmword_18215FFC0;
  *(_QWORD *)(v11 + 120) = ObjectType;
  *(_QWORD *)(v11 + 96) = v10;
  *(_OWORD *)(v11 + 128) = xmmword_18215FFD0;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  v17 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v9 + 56))(&__tp, ObjectType, v9);
  v19 = v18;
  *(_QWORD *)(v11 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v11 + 144) = v17;
  *(_QWORD *)(v11 + 152) = v19;
  *(_OWORD *)(v11 + 176) = xmmword_18215FFE0;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  v20 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v9 + 40))(&__tp, ObjectType, v9);
  v21 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v11 + 192) = v20;
  *(_QWORD *)(v11 + 216) = v21;
  *(_QWORD *)(v11 + 224) = 0xD000000000000014;
  *(_QWORD *)(v11 + 232) = 0x800000018230D010;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  v22 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v9 + 64))(&__tp, ObjectType, v9);
  *(_QWORD *)(v11 + 264) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v11 + 240) = v22 & 1;
  __tp.tv_sec = v10;
  __tp.tv_nsec = v9;
  v27[2] = v11;
  v23 = *MEMORY[0x1E0DEDFB8];
  v24 = type metadata accessor for Mirror.DisplayStyle();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v8, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v8, 0, 1, v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeZone.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TimeZone.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeZone.CodingKeys()
{
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeZone.CodingKeys()
{
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id static TimeZone._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t static TimeZone._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance TimeZone()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 120))(ObjectType, v1);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance TimeZone(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance TimeZone(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance TimeZone@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = result;
    type metadata accessor for _NSSwiftTimeZone();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v2;
      v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
      result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSTimeZone._toCustomAnyHashable()()
{
  void *v0;
  id v1;

  type metadata accessor for _NSSwiftTimeZone();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    *(_QWORD *)(swift_allocObject() + 16) = v0;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    v1 = v0;
  }
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSTimeZone()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for _NSSwiftTimeZone();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    *(_QWORD *)(swift_allocObject() + 16) = v1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    v2 = v1;
  }
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  AnyHashable.init<A>(_:)();

}

BOOL static TimeZone.DaylightSavingTimePolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TimeZone.DaylightSavingTimePolicy.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TimeZone.DaylightSavingTimePolicy.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for TimeZone(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[2] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[3] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  result = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy;
  if (!lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone.DaylightSavingTimePolicy, &type metadata for TimeZone.DaylightSavingTimePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy);
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeZone.DaylightSavingTimePolicy()
{
  return &type metadata for TimeZone.DaylightSavingTimePolicy;
}

uint64_t storeEnumTagSinglePayload for TimeZone.DaylightSavingTimePolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181D88348 + 4 * byte_18215FFF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181D8837C + 4 * byte_18215FFF0[v4]))();
}

uint64_t sub_181D8837C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D88384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181D8838CLL);
  return result;
}

uint64_t sub_181D88398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181D883A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181D883A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D883AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t specialized TimeZone.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616470756F747561 && a2 == 0xEC000000676E6974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized _PlistDecodingStorage.topContainer.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[32];

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    outlined init with copy of Any(a1 + 32 * v3, (uint64_t)v7);
    outlined init with copy of Any?((uint64_t)v7, (uint64_t)&v5);
    if (v6)
    {
      outlined init with take of Any(&v5, a2);
      return outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
    }
  }
  else
  {
    __break(1u);
  }
  result = outlined destroy of Any?((uint64_t)&v5, &demangling cache variable for type metadata for Any?);
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecodingStorage.popContainer()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)v0;
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    v1 = (_QWORD *)result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      goto LABEL_4;
    goto LABEL_7;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v3 = v1[2];
  if (v3)
  {
LABEL_4:
    v4 = v3 - 1;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[4 * v3]);
    v1[2] = v4;
    *(_QWORD *)v0 = v1;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t __PlistDictionaryDecoder.unbox<A>(_:as:)@<X0>(_QWORD *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  if (a2 == &type metadata for Date)
  {
    result = __PlistDictionaryDecoder.unbox(_:as:)(a1, (uint64_t)&v17);
    if (v5)
      return result;
    *(_QWORD *)&v21[0] = v17;
    BYTE8(v21[0]) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
LABEL_14:
    v16 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v16 ^ 1u, 1, a3);
  }
  if (a2 == &type metadata for Data)
  {
    result = specialized __PlistDictionaryDecoder.unbox(_:as:)(a1);
    if (v5)
      return result;
    v17 = result;
    v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    goto LABEL_14;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v17);
  outlined init with copy of Any((uint64_t)&v17, (uint64_t)v21);
  v8 = (_QWORD *)(v4 + 16);
  v9 = *(_QWORD **)(v4 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 16) = v9;
  v22 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *v8 = v9;
  }
  v9[2] = v12 + 1;
  outlined init with take of Any(v21, &v9[4 * v12 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  v19 = type metadata accessor for __PlistDictionaryDecoder();
  v20 = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  v17 = v4;
  swift_retain();
  v13 = v22;
  dispatch thunk of Decodable.init(from:)();
  if (!v5)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v13, 0, 1, a3);
  return specialized _PlistDecodingStorage.popContainer()();
}

uint64_t __PlistDictionaryDecoder.unbox<A>(_:as:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(_QWORD *, char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  _OWORD v30[2];
  uint64_t v31;

  v26 = a2;
  v7 = v6;
  v25 = a3;
  v28 = a6;
  v31 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v24 - v12;
  outlined init with copy of Any(a1, (uint64_t)v29);
  outlined init with copy of Any((uint64_t)v29, (uint64_t)v30);
  v15 = (_QWORD *)(v7 + 16);
  v14 = *(_QWORD **)(v7 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v7 + 16) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    *v15 = v14;
  }
  v18 = v14[2];
  v17 = v14[3];
  if (v18 >= v17 >> 1)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
    *v15 = v14;
  }
  v14[2] = v18 + 1;
  outlined init with take of Any(v30, &v14[4 * v18 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v29[3] = type metadata accessor for __PlistDictionaryDecoder();
  v29[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  v29[0] = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, AssociatedTypeWitness);
  v19 = *(void (**)(_QWORD *, char *, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  v20 = v27;
  v21 = v28;
  v22 = v31;
  v19(v29, v13, v31, a5);
  if (!v20)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 0, 1, v22);
  return specialized _PlistDecodingStorage.popContainer()();
}

_QWORD *__PlistDictionaryDecoder.init(referencing:at:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v12[2];
  _BYTE v13[32];

  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3[2] = MEMORY[0x1E0DEE9D8];
  outlined init with copy of Any(a1, (uint64_t)v13);
  outlined init with copy of Any((uint64_t)v13, (uint64_t)v12);
  v3[2] = v7;
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v7);
  v3[2] = v8;
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
    v3[2] = v8;
  }
  v8[2] = v10 + 1;
  outlined init with take of Any(v12, &v8[4 * v10 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1(a1);
  v3[3] = a3;
  v3[4] = a2;
  return v3;
}

uint64_t __PlistDictionaryDecoder.topValueIsNull.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v5[4];
  _OWORD v6[2];

  v0 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v0, v6);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  v1 = v5[3];
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (!v1)
    return 1;
  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v6);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v5[0] == 0x6C6C756E24 && v5[1] == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t __PlistDictionaryDecoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if ((__PlistDictionaryDecoder.topValueIsNull.getter() & 1) != 0)
  {
    v6 = type metadata accessor for DecodingError();
    swift_allocError();
    v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v8 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, *MEMORY[0x1E0DEC460], v6);
  }
  else
  {
    v9 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v9, &v18);
    swift_bridgeObjectRelease();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v12 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)&v18 = v3;
      *((_QWORD *)&v18 + 1) = v17;
      v19 = v12;
      v13 = type metadata accessor for _PlistDictionaryKeyedDecodingContainer(0, a2, a3, v11);
      swift_retain();
      swift_bridgeObjectRetain();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryKeyedDecodingContainer<A>, v13);
      return KeyedDecodingContainer.init<A>(_:)();
    }
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v15, &v18);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v10, &v18, v16);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  return swift_willThrow();
}

uint64_t __PlistDictionaryDecoder.unkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD v14[2];

  if ((__PlistDictionaryDecoder.topValueIsNull.getter() & 1) != 0)
  {
    v3 = type metadata accessor for DecodingError();
    swift_allocError();
    v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, *MEMORY[0x1E0DEC460], v3);
  }
  else
  {
    v6 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v6, v14);
    swift_bridgeObjectRelease();
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = *(_QWORD *)(v1 + 32);
      a1[3] = &unk_1E0F2A168;
      a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      v9 = (_QWORD *)swift_allocObject();
      *a1 = v9;
      v9[2] = v1;
      v9[3] = v13;
      v9[4] = v8;
      v9[5] = 0;
      swift_retain();
      return swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v11, v14);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v7, v14, v12);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return swift_willThrow();
}

uint64_t __PlistDictionaryDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryDecoder()
{
  return objc_opt_self();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance __PlistDictionaryDecoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistDictionaryDecoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance __PlistDictionaryDecoder@<X0>(_QWORD *a1@<X8>)
{
  return __PlistDictionaryDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance __PlistDictionaryDecoder@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for __PlistDictionaryDecoder();
  a1[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance __PlistDictionaryDecoder@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return __PlistDictionaryDecoder.decode<A>(_:)(a1, a2, a3);
}

uint64_t __PlistDictionaryDecoder.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  ValueMetadata **v13;
  ValueMetadata **v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _OWORD v21[2];

  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v20 - v8;
  v10 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v10, v21);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v20[0] == 0x6C6C756E24 && v20[1] == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      v12 = type metadata accessor for DecodingError();
      swift_allocError();
      v14 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v14 = a1;
      *(_QWORD *)&v21[0] = 0;
      *((_QWORD *)&v21[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v21[0] = 0x6465746365707845;
      *((_QWORD *)&v21[0] + 1) = 0xE900000000000020;
      v15._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._object = (void *)0x800000018230D090;
      v16._countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v16);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC460], v12);
      return swift_willThrow();
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_6;
  }
  v18 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v18, v21);
  swift_bridgeObjectRelease();
  __PlistDictionaryDecoder.unbox<A>(_:as:)(v21, a1, a2, (uint64_t)v9);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (!v3)
  {
    v19 = *(_QWORD *)(a2 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, a2);
    if ((_DWORD)result == 1)
      __break(1u);
    else
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a3, v9, a2);
  }
  return result;
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:configuration:) in conformance __PlistDictionaryDecoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __PlistDictionaryDecoder.decode<A>(_:configuration:)(a1, a2, a3, a4, a5);
}

uint64_t __PlistDictionaryDecoder.decode<A>(_:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v24 - v12;
  v14 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v14, v25);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v24[0] == 0x6C6C756E24 && v24[1] == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_7:
      v16 = type metadata accessor for DecodingError();
      swift_allocError();
      v18 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v18 = a1;
      *(_QWORD *)&v25[0] = 0;
      *((_QWORD *)&v25[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v25[0] = 0x6465746365707845;
      *((_QWORD *)&v25[0] + 1) = 0xE900000000000020;
      v19._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._object = (void *)0x800000018230D090;
      v20._countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
      return swift_willThrow();
    }
    v26 = a5;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v26 = a5;
  }
  v22 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v22, v25);
  swift_bridgeObjectRelease();
  __PlistDictionaryDecoder.unbox<A>(_:as:configuration:)((uint64_t)v25, a1, a2, a3, a4, (uint64_t)v13);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  if (!v5)
  {
    v23 = *(_QWORD *)(a3 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 1, a3);
    if ((_DWORD)result == 1)
      __break(1u);
    else
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v13, a3);
  }
  return result;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.allKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = a4;
  v9[3] = a5;
  swift_bridgeObjectRetain();
  v7 = _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5((void (*)(_QWORD *))partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter, (uint64_t)v9, a2, a4);
  swift_bridgeObjectRelease();
  return v7;
}

BOOL _PlistDictionaryKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _BOOL8 v8;
  __int128 v10;
  __int128 v11;

  v4 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a3 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    v8 = *((_QWORD *)&v11 + 1) != 0;
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
  return v8;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  char *v29;

  v10 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11), (v13 & 1) == 0))
  {
    v26 = 0u;
    v27 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v12, (uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    v29 = (char *)v16
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v17[3] = a5;
    v17[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v28[0] = 0;
    *((_QWORD *)&v28[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v28[0] = 0xD00000000000001DLL;
    *((_QWORD *)&v28[0] + 1) = 0x800000018230D870;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 2238496;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v14 = v28;
    v22._countAndFlagsBits = 3025186;
    v22._object = (void *)0xE300000000000000;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC448], v15);
    swift_willThrow();
    return v14 & 1;
  }
  outlined init with take of Any(&v26, v28);
  outlined init with copy of Any((uint64_t)v28, (uint64_t)&v26);
  if (swift_dynamicCast())
  {
    if (v24 == 0x6C6C756E24 && v25 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v14) = 1;
    }
    else
    {
      LOBYTE(v14) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    LOBYTE(v14) = 0;
  }
  return v14 & 1;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  __int128 *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  _QWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  char *v42;

  v37[1] = a4;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) == 0))
  {
    v38 = 0u;
    v39 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v16, (uint64_t)&v38);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v39 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v38, &demangling cache variable for type metadata for Any?);
    v28 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    v42 = (char *)v29
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v30[3] = a5;
    v30[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v38 = 0xD00000000000001DLL;
    *((_QWORD *)&v38 + 1) = 0x800000018230D870;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 2238496;
    v33._object = (void *)0xE300000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    v18 = &v38;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 3025186;
    v35._object = (void *)0xE300000000000000;
    String.append(_:)(v35);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC448], v28);
    swift_willThrow();
    return v18 & 1;
  }
  outlined init with take of Any(&v38, v41);
  v37[0] = *(_QWORD *)(v11 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v37[0])(v13, a1, a5);
  v18 = *(__int128 **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 32) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    *(_QWORD *)(a2 + 32) = v18;
  }
  v21 = *((_QWORD *)v18 + 2);
  v20 = *((_QWORD *)v18 + 3);
  if (v21 >= v20 >> 1)
  {
    v18 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    *(_QWORD *)(a2 + 32) = v18;
  }
  *((_QWORD *)&v39 + 1) = a5;
  v40 = a6;
  v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
  ((void (*)(uint64_t *, char *, uint64_t))v37[0])(v22, v13, a5);
  *((_QWORD *)v18 + 2) = v21 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v38, (uint64_t)v18 + 40 * v21 + 32);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  LOBYTE(v18) = a2;
  v23 = v42;
  v24 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v41);
  if (!v23)
  {
    if (v24 != 2)
    {
      LOBYTE(v18) = v24 & 1;
      $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      return v18 & 1;
    }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    v42 = (char *)v26
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *v27 = MEMORY[0x1E0DEAFA0];
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v18 = &v38;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC460], v25);
    swift_willThrow();
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return v18 & 1;
}

uint64_t $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 32);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  v1 = a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v4 = v2[2];
  if (v4)
  {
LABEL_4:
    v5 = v4 - 1;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(_QWORD *)(v1 + 32) = v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

__int128 *_PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_OWORD *), uint64_t a8, void (*a9)(char *, uint64_t, uint64_t), uint64_t (*a10)(_OWORD *))
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[2];
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_OWORD *);
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;

  v45 = a8;
  v46 = a4;
  v47 = a7;
  v52 = a2;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    v48 = 0u;
    v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v49 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    v31 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    v47 = (uint64_t (*)(_OWORD *))((char *)v32
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v48 = 0;
    *((_QWORD *)&v48 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = 0xD00000000000001DLL;
    *((_QWORD *)&v48 + 1) = 0x800000018230D870;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 2238496;
    v36._object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    v37._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    v29 = &v48;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 3025186;
    v38._object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x1E0DEC448], v31);
    swift_willThrow();
    return v29;
  }
  outlined init with take of Any(&v48, v51);
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  v22 = v52;
  v23 = *(_QWORD **)(v52 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *(_QWORD *)(v22 + 32) = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *(_QWORD *)(v52 + 32) = v23;
  }
  *((_QWORD *)&v49 + 1) = a5;
  v50 = a6;
  v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  v44((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  v28 = v52;
  v29 = (__int128 *)v52;
  v30 = v47(v51);
  if (!v10)
  {
    v29 = (__int128 *)v30;
    if ((v30 & 0x100) != 0)
    {
      v47 = a10;
      v44 = a9;
      v40 = type metadata accessor for DecodingError();
      swift_allocError();
      v42 = v41;
      v43[1] = (char *)v41
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                      + 48);
      *v42 = v45;
      *(_QWORD *)&v48 = 0;
      *((_QWORD *)&v48 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v29 = &v48;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x1E0DEC460], v40);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v29;
}

{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[2];
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_OWORD *);
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;

  v45 = a8;
  v46 = a4;
  v47 = a7;
  v52 = a2;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    v48 = 0u;
    v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v49 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    v31 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    v47 = (uint64_t (*)(_OWORD *))((char *)v32
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v48 = 0;
    *((_QWORD *)&v48 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = 0xD00000000000001DLL;
    *((_QWORD *)&v48 + 1) = 0x800000018230D870;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 2238496;
    v36._object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    v37._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    v29 = &v48;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 3025186;
    v38._object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x1E0DEC448], v31);
    swift_willThrow();
    return v29;
  }
  outlined init with take of Any(&v48, v51);
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  v22 = v52;
  v23 = *(_QWORD **)(v52 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *(_QWORD *)(v22 + 32) = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *(_QWORD *)(v52 + 32) = v23;
  }
  *((_QWORD *)&v49 + 1) = a5;
  v50 = a6;
  v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  v44((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  v28 = v52;
  v29 = (__int128 *)v52;
  v30 = v47(v51);
  if (!v10)
  {
    v29 = (__int128 *)v30;
    if ((v30 & 0x10000) != 0)
    {
      v47 = a10;
      v44 = a9;
      v40 = type metadata accessor for DecodingError();
      swift_allocError();
      v42 = v41;
      v43[1] = (char *)v41
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                      + 48);
      *v42 = v45;
      *(_QWORD *)&v48 = 0;
      *((_QWORD *)&v48 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v29 = &v48;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x1E0DEC460], v40);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v29;
}

{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[2];
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_OWORD *);
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;

  v45 = a8;
  v46 = a4;
  v47 = a7;
  v52 = a2;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    v48 = 0u;
    v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v49 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    v31 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    v47 = (uint64_t (*)(_OWORD *))((char *)v32
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v48 = 0;
    *((_QWORD *)&v48 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = 0xD00000000000001DLL;
    *((_QWORD *)&v48 + 1) = 0x800000018230D870;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 2238496;
    v36._object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    v37._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    v29 = &v48;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 3025186;
    v38._object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x1E0DEC448], v31);
    swift_willThrow();
    return v29;
  }
  outlined init with take of Any(&v48, v51);
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  v22 = v52;
  v23 = *(_QWORD **)(v52 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *(_QWORD *)(v22 + 32) = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *(_QWORD *)(v52 + 32) = v23;
  }
  *((_QWORD *)&v49 + 1) = a5;
  v50 = a6;
  v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  v44((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  v28 = v52;
  v29 = (__int128 *)v52;
  v30 = v47(v51);
  if (!v10)
  {
    v29 = (__int128 *)v30;
    if ((v30 & 0x100000000) != 0)
    {
      v47 = a10;
      v44 = a9;
      v40 = type metadata accessor for DecodingError();
      swift_allocError();
      v42 = v41;
      v43[1] = (char *)v41
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                      + 48);
      *v42 = v45;
      *(_QWORD *)&v48 = 0;
      *((_QWORD *)&v48 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v29 = &v48;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x1E0DEC460], v40);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v29;
}

{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD v44[2];
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_OWORD *);
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;

  v46 = a8;
  v47 = a4;
  v48 = a7;
  v53 = a2;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    v49 = 0u;
    v50 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v50 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v49, &demangling cache variable for type metadata for Any?);
    v32 = type metadata accessor for DecodingError();
    swift_allocError();
    v34 = v33;
    v48 = (uint64_t (*)(_OWORD *))((char *)v33
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v49 = 0xD00000000000001DLL;
    *((_QWORD *)&v49 + 1) = 0x800000018230D870;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 2238496;
    v37._object = (void *)0xE300000000000000;
    String.append(_:)(v37);
    v38._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    v29 = &v49;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 3025186;
    v39._object = (void *)0xE300000000000000;
    String.append(_:)(v39);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC448], v32);
    swift_willThrow();
    return v29;
  }
  outlined init with take of Any(&v49, v52);
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v45(v17, a1, a5);
  v22 = v53;
  v23 = *(_QWORD **)(v53 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 32) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *(_QWORD *)(v22 + 32) = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *(_QWORD *)(v53 + 32) = v23;
  }
  *((_QWORD *)&v50 + 1) = a5;
  v51 = a6;
  v27 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
  v45((char *)v27, (uint64_t)v17, a5);
  v23[2] = v26 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v49, (uint64_t)&v23[5 * v26 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  v28 = v53;
  v29 = (__int128 *)v53;
  v30 = v48(v52);
  if (v10)
    goto LABEL_15;
  if ((v31 & 1) != 0)
  {
    v48 = a10;
    v45 = a9;
    v41 = type metadata accessor for DecodingError();
    swift_allocError();
    v43 = v42;
    v44[1] = (char *)v42
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                    + 48);
    *v43 = v46;
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v29 = &v49;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, *MEMORY[0x1E0DEC460], v41);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    return v29;
  }
  v29 = (__int128 *)v30;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return v29;
}

float _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _OWORD v45[2];

  v40 = a4;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) == 0))
  {
    v42 = 0u;
    v43 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v17, (uint64_t)&v42);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v43 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    v26 = type metadata accessor for DecodingError();
    swift_allocError();
    v28 = v27;
    v41 = (char *)v27
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v28[3] = a5;
    v28[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42 = 0xD00000000000001DLL;
    *((_QWORD *)&v42 + 1) = 0x800000018230D870;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 2238496;
    v31._object = (void *)0xE300000000000000;
    String.append(_:)(v31);
    v32._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 3025186;
    v33._object = (void *)0xE300000000000000;
    String.append(_:)(v33);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC448], v26);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v42, v45);
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v39(v14, a1, a5);
  v19 = *(_QWORD **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 32) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *(_QWORD *)(a2 + 32) = v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
    *(_QWORD *)(a2 + 32) = v19;
  }
  *((_QWORD *)&v43 + 1) = a5;
  v44 = a6;
  v23 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
  v39((char *)v23, (uint64_t)v14, a5);
  v19[2] = v22 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, (uint64_t)&v19[5 * v22 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a5);
  v24 = v41;
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(v45);
  if (v24)
    goto LABEL_15;
  if ((v25 & 0x100000000) != 0)
  {
    v35 = type metadata accessor for DecodingError();
    swift_allocError();
    v37 = v36;
    v41 = (char *)v36
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *v37 = MEMORY[0x1E0DEB188];
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x1E0DEC460], v35);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    return v6;
  }
  v6 = *(float *)&v25;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  return v6;
}

double _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];

  v41 = a4;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) == 0))
  {
    v43 = 0u;
    v44 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v17, (uint64_t)&v43);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v44 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
    v27 = type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v28;
    v42 = (char *)v28
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v29[3] = a5;
    v29[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v43 = 0xD00000000000001DLL;
    *((_QWORD *)&v43 + 1) = 0x800000018230D870;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 2238496;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    v33._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 3025186;
    v34._object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC448], v27);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v43, v46);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v40(v14, a1, a5);
  v19 = *(_QWORD **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 32) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *(_QWORD *)(a2 + 32) = v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
    *(_QWORD *)(a2 + 32) = v19;
  }
  *((_QWORD *)&v44 + 1) = a5;
  v45 = a6;
  v23 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
  v40((char *)v23, (uint64_t)v14, a5);
  v19[2] = v22 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v43, (uint64_t)&v19[5 * v22 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a5);
  v24 = v42;
  v25 = specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)v46);
  if (v24)
    goto LABEL_15;
  if ((v26 & 1) != 0)
  {
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    v42 = (char *)v37
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *v38 = MEMORY[0x1E0DEB070];
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v36);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return v6;
  }
  v6 = *(double *)&v25;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return v6;
}

__int128 *_PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  __int128 *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  char *v44;

  v39[1] = a4;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) == 0))
  {
    v40 = 0u;
    v41 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v16, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    v27 = type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v28;
    v44 = (char *)v28
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v29[3] = a5;
    v29[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v40 = 0xD00000000000001DLL;
    *((_QWORD *)&v40 + 1) = 0x800000018230D870;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 2238496;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    v33._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    v23 = &v40;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 3025186;
    v34._object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC448], v27);
    swift_willThrow();
    return v23;
  }
  outlined init with take of Any(&v40, v43);
  v39[0] = *(_QWORD *)(v11 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v39[0])(v13, a1, a5);
  v18 = *(_QWORD **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 32) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *(_QWORD *)(a2 + 32) = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    *(_QWORD *)(a2 + 32) = v18;
  }
  *((_QWORD *)&v41 + 1) = a5;
  v42 = a6;
  v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v40);
  ((void (*)(uint64_t *, char *, uint64_t))v39[0])(v22, v13, a5);
  v18[2] = v21 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v40, (uint64_t)&v18[5 * v21 + 4]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  v23 = (__int128 *)a2;
  v24 = v44;
  v25 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v43);
  if (!v24)
  {
    if (v26)
    {
      v23 = (__int128 *)v25;
      $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      return v23;
    }
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    v44 = (char *)v37
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *v38 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v23 = &v40;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v36);
    swift_willThrow();
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  return v23;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  ValueMetadata *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;

  v57 = a7;
  v55 = a5;
  v56 = a1;
  v64 = a3;
  v54 = a9;
  v53 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v16 = (char *)&v50 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a4 + 16)
    || (v59 = a4, v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v24 & 1) == 0))
  {
    v60 = 0u;
    v61 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(v59 + 56) + 32 * v23, (uint64_t)&v60);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v61 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    v41 = type metadata accessor for DecodingError();
    v58 = swift_allocError();
    v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v43[3] = a6;
    v43[4] = a8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(boxed_opaque_existential_1, a2, a6);
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v60 = 0xD00000000000001DLL;
    *((_QWORD *)&v60 + 1) = 0x800000018230D870;
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 2238496;
    v46._object = (void *)0xE300000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 3025186;
    v48._object = (void *)0xE300000000000000;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, *MEMORY[0x1E0DEC448], v41);
    return swift_willThrow();
  }
  v52 = a10;
  outlined init with take of Any(&v60, v63);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v51(v20, a2, a6);
  v25 = v64;
  v26 = *(_QWORD **)(v64 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v25 + 32) = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    *(_QWORD *)(v64 + 32) = v26;
  }
  v29 = v26[2];
  v28 = v26[3];
  if (v29 >= v28 >> 1)
  {
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v26);
    *(_QWORD *)(v64 + 32) = v26;
  }
  *((_QWORD *)&v61 + 1) = a6;
  v62 = a8;
  v30 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
  v51((char *)v30, (uint64_t)v20, a6);
  v26[2] = v29 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v60, (uint64_t)&v26[5 * v29 + 4]);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, a6);
  v31 = v57;
  v32 = v64;
  v33 = v58;
  __PlistDictionaryDecoder.unbox<A>(_:as:)(v63, v56, v57, (uint64_t)v16);
  if (v33)
    goto LABEL_14;
  v34 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v16, 1, v31) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v54, v16, v31);
LABEL_14:
    v40 = v32;
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v53);
  v35 = type metadata accessor for DecodingError();
  v58 = swift_allocError();
  v37 = v36;
  v54 = (char *)v36
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
               + 48);
  *v37 = v56;
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v60 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v60 = 0x6465746365707845;
  *((_QWORD *)&v60 + 1) = 0xE900000000000020;
  v38._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 0xD00000000000001ELL;
  v39._object = (void *)0x800000018230D890;
  String.append(_:)(v39);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x1E0DEC460], v35);
  swift_willThrow();
  v40 = v32;
LABEL_15:
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v40);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, __n128);
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  _QWORD *v42;
  _QWORD v43[4];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v43[3] = a4;
  v44 = a6;
  v46 = a3;
  v43[1] = a8;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void (**)(char *, __n128))(v12 + 16);
  v16(v15, v13);
  v17 = *(_QWORD **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v45 = a2;
  *(_QWORD *)(a2 + 32) = v17;
  v19 = a7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *(_QWORD *)(v45 + 32) = v17;
  }
  v21 = v17[2];
  v20 = v17[3];
  if (v21 >= v20 >> 1)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v17);
    *(_QWORD *)(v45 + 32) = v17;
  }
  v47 = a9;
  v51 = a5;
  v52 = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v50);
  ((void (*)(uint64_t *, char *, uint64_t))v16)(boxed_opaque_existential_1, v15, a5);
  v17[2] = v21 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v50, (uint64_t)&v17[5 * v21 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
  v23 = dispatch thunk of CodingKey.stringValue.getter();
  v25 = v46;
  if (*(_QWORD *)(v46 + 16))
  {
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    v27 = v44;
    if ((v28 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&v48);
    }
    else
    {
      v48 = 0u;
      v49 = 0u;
    }
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
    v27 = v44;
  }
  v29 = v47;
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v49 + 1))
  {
    outlined init with take of Any(&v48, &v50);
    outlined init with copy of Any((uint64_t)&v50, (uint64_t)&v48);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v32 = v45;
      v33 = *(_QWORD *)(v45 + 32);
      *(_QWORD *)&v48 = v45;
      *((_QWORD *)&v48 + 1) = v53;
      *(_QWORD *)&v49 = v33;
      v34 = type metadata accessor for _PlistDictionaryKeyedDecodingContainer(0, v27, v29, v31);
      swift_retain();
      swift_bridgeObjectRetain();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryKeyedDecodingContainer<A>, v34);
      KeyedDecodingContainer.init<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
      return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v30, &v50, v42);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for Any?);
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    v44 = (uint64_t)v37
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *v38 = type metadata accessor for KeyedDecodingContainer();
    *(_QWORD *)&v50 = 0;
    *((_QWORD *)&v50 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(64);
    v39._object = (void *)0x800000018230D830;
    v39._countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v39);
    v40._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 34;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v36);
    swift_willThrow();
  }
  return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v45);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v42 = a4;
  v41 = a7;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(char *, __n128))(v11 + 16);
  v44 = v16;
  v15(v14, v12);
  v17 = *(_QWORD **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v43 = a2;
  *(_QWORD *)(a2 + 32) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *(_QWORD *)(v43 + 32) = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    *(_QWORD *)(v43 + 32) = v17;
  }
  v48 = a5;
  v49 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
  ((void (*)(uint64_t *, char *, uint64_t))v15)(boxed_opaque_existential_1, v14, a5);
  v17[2] = v20 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)&v17[5 * v20 + 4]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
  v22 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a3 + 16))
  {
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
    if ((v25 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v24, (uint64_t)&v45);
    }
    else
    {
      v45 = 0u;
      v46 = 0u;
    }
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v46 + 1))
  {
    outlined init with take of Any(&v45, &v47);
    outlined init with copy of Any((uint64_t)&v47, (uint64_t)&v45);
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v27 = v50;
      v28 = v43;
      v29 = *(_QWORD *)(v43 + 32);
      v30 = v41;
      v41[3] = &unk_1E0F2A168;
      v30[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      v31 = (_QWORD *)swift_allocObject();
      *v30 = v31;
      v31[2] = v28;
      v31[3] = v27;
      v31[4] = v29;
      v31[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
      return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v26, &v47, v39);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v45, &demangling cache variable for type metadata for Any?);
    v33 = type metadata accessor for DecodingError();
    swift_allocError();
    v35 = v34;
    v42 = (char *)v34
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    *(_QWORD *)&v47 = 0;
    *((_QWORD *)&v47 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(66);
    v36._object = (void *)0x800000018230D7F0;
    v36._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v36);
    v37._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 34;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC460], v33);
    swift_willThrow();
  }
  return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v43);
}

uint64_t _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _BYTE v40[24];
  __int128 v41;
  __int128 v42;

  v37 = a5;
  v38 = a6;
  v36 = a4;
  v34 = a7;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)a1, (uint64_t)&v41);
  v10 = *(_QWORD **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 32) = v10;
  v35 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *(_QWORD *)(a2 + 32) = v10;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    *(_QWORD *)(a2 + 32) = v10;
  }
  v33 = v42;
  v14 = v42;
  v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v41, v42);
  v16 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v16 + 16))(v19, v17);
  *(_OWORD *)&v40[8] = v33;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v19, v14);
  v10[2] = v13 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v39, (uint64_t)&v10[5 * v13 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v21 = dispatch thunk of CodingKey.stringValue.getter();
  v23 = v35;
  if (*(_QWORD *)(v35 + 16) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v25 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v23 + 56) + 32 * v24, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    *(_OWORD *)v40 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v40[8])
  {
    outlined init with take of Any(&v39, &v41);
  }
  else
  {
    *(_QWORD *)&v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    v26 = swift_allocObject();
    *(_QWORD *)&v41 = v26;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    outlined destroy of Any?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of Any((uint64_t)&v41, (uint64_t)&v39);
  v28 = *(_QWORD *)(a2 + 24);
  v27 = *(_QWORD *)(a2 + 32);
  v29 = type metadata accessor for __PlistDictionaryDecoder();
  v30 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v39, v27, v28);
  v31 = v34;
  v34[3] = v29;
  v31[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  *v31 = v30;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.superDecoder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD v14[5];

  v14[3] = &type metadata for _CodingKey;
  v14[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v12 = swift_allocObject();
  v14[0] = v12;
  *(_OWORD *)(v12 + 16) = xmmword_18206AAD0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  return _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16[5];

  v16[3] = a5;
  v16[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  return _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)(v16, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _PlistDictionaryKeyedDecodingContainer.allKeys.getter(*v1, v1[1], v1[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _PlistDictionaryKeyedDecodingContainer.contains(_:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, _PlistDictionaryKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

__int128 *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

__int128 *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEB418], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002ALL, (uint64_t (*)(_OWORD *))0x800000018230DA60);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDA70], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002BLL, (uint64_t (*)(_OWORD *))0x800000018230DA30);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDB58], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x800000018230DA00);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDBC8], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x800000018230D9D0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDC60], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x800000018230D9A0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEBB98], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002BLL, (uint64_t (*)(_OWORD *))0x800000018230D970);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDE70], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x800000018230D940);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEE068], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002DLL, (uint64_t (*)(_OWORD *))0x800000018230D910);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEE0F8], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002DLL, (uint64_t (*)(_OWORD *))0x800000018230D8E0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEE190], (void (*)(char *, uint64_t, uint64_t))0xD00000000000002DLL, (uint64_t (*)(_OWORD *))0x800000018230D8B0);
}

__int128 *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *), uint64_t a5, void (*a6)(char *, uint64_t, uint64_t), uint64_t (*a7)(_OWORD *))
{
  uint64_t *v7;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t *v7;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t *v7;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t *v7;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5, a6, a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))_PlistDictionaryKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))_PlistDictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_PlistDictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _PlistDictionaryKeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return _PlistDictionaryKeyedDecodingContainer.superDecoder()(*v2, v2[1], v2[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_PlistDictionaryKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.decodeNil()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[14];

  v18[13] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v2 = v0[3];
  if (v2 < *(_QWORD *)(v1 + 16))
  {
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_14;
    }
    outlined init with copy of Any(v1 + 32 * v2 + 32, (uint64_t)v18);
    if (swift_dynamicCast())
    {
      if (v16 == 0x6C6C756E24 && v17 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
LABEL_9:
        v12 = v0[3];
        v13 = __OFADD__(v12, 1);
        v14 = v12 + 1;
        if (!v13)
        {
          v0[3] = v14;
          v10 = 1;
          return v10 & 1;
        }
LABEL_14:
        __break(1u);
      }
    }
    v10 = 0;
    return v10 & 1;
  }
  v3 = type metadata accessor for DecodingError();
  swift_allocError();
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = *(_QWORD *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  v8 = v0[3];
  *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v9 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 40) = 2;
  v18[0] = v6;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, *MEMORY[0x1E0DEC460], v3);
  swift_willThrow();
  return v10 & 1;
}

uint64_t $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = *(_QWORD **)(*a1 + 32);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v4 = v2[2];
  if (v4)
  {
LABEL_4:
    v5 = v4 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(_QWORD *)(v1 + 32) = v2;
    return swift_release();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  ValueMetadata **v30;
  ValueMetadata **v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  ValueMetadata **v44;
  ValueMetadata **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  ValueMetadata *v64;
  _OWORD v65[2];
  _QWORD v66[4];
  __int128 v67;
  ValueMetadata *v68;
  uint64_t v69;
  uint64_t v70;

  v6 = v4;
  v70 = *MEMORY[0x1E0C80C00];
  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11);
  v15 = v6[1];
  v16 = v6[3];
  if (v16 >= *(_QWORD *)(v15 + 16))
  {
    v29 = type metadata accessor for DecodingError();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v31 = a1;
    v32 = *(_QWORD *)(*v6 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    v34 = v6[3];
    *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v35 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v35;
    *(_QWORD *)(v35 + 16) = v34;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = 0;
    *(_BYTE *)(v35 + 40) = 2;
    *(_QWORD *)&v67 = v32;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(ValueMetadata **, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x1E0DEC460], v29);
    return swift_willThrow();
  }
  v61 = a3;
  v62 = (char *)&v56 - v13;
  v63 = v5;
  v58 = v14;
  v59 = v12;
  v60 = a4;
  v17 = *v6;
  v18 = *(_QWORD **)(*v6 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v17 + 32) = v18;
  v64 = a1;
  v20 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *(_QWORD *)(v17 + 32) = v18;
  }
  v22 = v18[2];
  v21 = v18[3];
  v23 = (_QWORD *)(v22 + 1);
  if (v22 >= v21 >> 1)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v18);
    *(_QWORD *)(v17 + 32) = v18;
  }
  v68 = &type metadata for _CodingKey;
  v57 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v69 = v57;
  v24 = swift_allocObject();
  *(_QWORD *)&v67 = v24;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 16) = v16;
  *(_BYTE *)(v24 + 40) = 2;
  v18[2] = v23;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v67, (uint64_t)&v18[5 * v22 + 4]);
  if (v16 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v16 < *(_QWORD *)(v15 + 16))
  {
    outlined init with copy of Any(v15 + 32 * v16 + 32, (uint64_t)v66);
    if (v64 == &type metadata for Date)
    {
      v37 = v63;
      __PlistDictionaryDecoder.unbox(_:as:)(v66, (uint64_t)&v67);
      if (v37)
        goto LABEL_19;
      v22 = (unint64_t)v20;
      *(_QWORD *)&v65[0] = v67;
      BYTE8(v65[0]) = BYTE8(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      v20 = v62;
    }
    else
    {
      v22 = (unint64_t)v20;
      if (v64 != &type metadata for Data)
      {
        outlined init with copy of Any((uint64_t)v66, (uint64_t)&v67);
        outlined init with copy of Any((uint64_t)&v67, (uint64_t)v65);
        v18 = (_QWORD *)(v17 + 16);
        v23 = *(_QWORD **)(v17 + 16);
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 16) = v23;
        v20 = v62;
        if ((v25 & 1) != 0)
          goto LABEL_11;
        goto LABEL_31;
      }
      v38 = v63;
      v39 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v66);
      v20 = v62;
      if (v38)
        goto LABEL_19;
      *(_QWORD *)&v67 = v39;
      *((_QWORD *)&v67 + 1) = v40;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    }
    v42 = swift_dynamicCast();
    v41 = *(_QWORD *)(v22 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v41 + 56))(v20, v42 ^ 1u, 1, v22);
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v41 + 48))(v20, 1, v22) == 1)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v20, v59);
      v43 = type metadata accessor for DecodingError();
      swift_allocError();
      v45 = v44;
      v63 = (char *)v44
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                   + 48);
      *v45 = v64;
      v46 = *(_QWORD *)(*v6 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v47 = swift_initStackObject();
      *(_OWORD *)(v47 + 16) = xmmword_18205C850;
      v48 = v6[3];
      v49 = v57;
      *(_QWORD *)(v47 + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(v47 + 64) = v49;
      v50 = swift_allocObject();
      *(_QWORD *)(v47 + 32) = v50;
      *(_QWORD *)(v50 + 16) = v48;
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 32) = 0;
      *(_BYTE *)(v50 + 40) = 2;
      *(_QWORD *)&v67 = v46;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v47);
      *(_QWORD *)&v67 = 0;
      *((_QWORD *)&v67 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v67 = 0x6465746365707845;
      *((_QWORD *)&v67 + 1) = 0xE900000000000020;
      v51._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._object = (void *)0x800000018230D530;
      v52._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v52);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, *MEMORY[0x1E0DEC460], v43);
      swift_willThrow();
    }
    else
    {
      (*(void (**)(uint64_t, char *, unint64_t))(v41 + 32))(v60, v20, v22);
      v53 = v6[3];
      v54 = __OFADD__(v53, 1);
      v55 = v53 + 1;
      if (v54)
        __break(1u);
      v6[3] = v55;
    }
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v6);
  }
  __break(1u);
LABEL_31:
  v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
  *v18 = v23;
LABEL_11:
  v27 = v23[2];
  v26 = v23[3];
  if (v27 >= v26 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v23);
    *v18 = v23;
  }
  v23[2] = v27 + 1;
  outlined init with take of Any(v65, &v23[4 * v27 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  v68 = (ValueMetadata *)type metadata accessor for __PlistDictionaryDecoder();
  v69 = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
  *(_QWORD *)&v67 = v17;
  swift_retain();
  v28 = v63;
  dispatch thunk of Decodable.init(from:)();
  if (!v28)
  {
    v41 = *(_QWORD *)(v22 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v41 + 56))(v20, 0, 1, v22);
    specialized _PlistDecodingStorage.popContainer()();
    goto LABEL_23;
  }
  specialized _PlistDecodingStorage.popContainer()();
LABEL_19:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v6);
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  __int128 v33;
  ValueMetadata *v34;
  unint64_t v35;

  v6 = *v3;
  v7 = v3[3];
  v8 = *(_QWORD **)(*v3 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 32) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *(_QWORD *)(v6 + 32) = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *(_QWORD *)(v6 + 32) = v8;
  }
  v34 = &type metadata for _CodingKey;
  v35 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v12 = swift_allocObject();
  *(_QWORD *)&v33 = v12;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = v7;
  *(_BYTE *)(v12 + 40) = 2;
  v8[2] = v11 + 1;
  result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v8[5 * v11 + 4]);
  v14 = v3[1];
  if (v7 >= *(_QWORD *)(v14 + 16))
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v17 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
  }
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v14 + 32 * v7 + 32, (uint64_t)&v33);
    outlined init with copy of Any((uint64_t)&v33, (uint64_t)v32);
    if (swift_dynamicCast())
    {
      if (v30 == 0x6C6C756E24 && v31 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        v19 = type metadata accessor for DecodingError();
        swift_allocError();
        v21 = v20;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v21 = type metadata accessor for KeyedDecodingContainer();
        swift_bridgeObjectRetain();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
LABEL_18:
        swift_willThrow();
        goto LABEL_19;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
        goto LABEL_13;
    }
    outlined init with copy of Any((uint64_t)&v33, (uint64_t)v32);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._typeMismatch(at:expectation:reality:)(v22, &v33, v29);
      goto LABEL_18;
    }
    v24 = v3[3];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v3[3] = v26;
      v27 = *(_QWORD *)(*v3 + 32);
      v32[0] = *v3;
      v32[1] = v30;
      v32[2] = v27;
      v28 = type metadata accessor for _PlistDictionaryKeyedDecodingContainer(0, a2, a3, v23);
      swift_retain();
      swift_bridgeObjectRetain();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryKeyedDecodingContainer<A>, v28);
      KeyedDecodingContainer.init<A>(_:)();
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
    }
  }
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[32];
  __int128 v30;
  ValueMetadata *v31;
  unint64_t v32;

  v3 = *v1;
  v4 = v1[3];
  v5 = *(_QWORD **)(*v1 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 32) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(_QWORD *)(v3 + 32) = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *(_QWORD *)(v3 + 32) = v5;
  }
  v31 = &type metadata for _CodingKey;
  v32 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v9 = swift_allocObject();
  *(_QWORD *)&v30 = v9;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v4;
  *(_BYTE *)(v9 + 40) = 2;
  v5[2] = v8 + 1;
  result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v30, (uint64_t)&v5[5 * v8 + 4]);
  v11 = v1[1];
  if (v4 >= *(_QWORD *)(v11 + 16))
  {
    v12 = type metadata accessor for DecodingError();
    swift_allocError();
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC460], v12);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v1);
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v11 + 32 * v4 + 32, (uint64_t)&v30);
    outlined init with copy of Any((uint64_t)&v30, (uint64_t)v29);
    if (swift_dynamicCast())
    {
      if (v27 == 0x6C6C756E24 && v28 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        v16 = type metadata accessor for DecodingError();
        swift_allocError();
        v18 = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
        swift_bridgeObjectRetain();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
LABEL_18:
        swift_willThrow();
        goto LABEL_19;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        goto LABEL_13;
    }
    outlined init with copy of Any((uint64_t)&v30, (uint64_t)v29);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._typeMismatch(at:expectation:reality:)(v19, &v30, v26);
      goto LABEL_18;
    }
    v20 = v1[3];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v1[3] = v22;
      v23 = *v1;
      v24 = *(_QWORD *)(*v1 + 32);
      a1[3] = &unk_1E0F2A168;
      a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      v25 = (_QWORD *)swift_allocObject();
      *a1 = v25;
      v25[2] = v23;
      v25[3] = v27;
      v25[4] = v24;
      v25[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
      return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v1);
    }
  }
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = v1;
  v4 = *v1;
  v5 = v1[3];
  v6 = *(_QWORD **)(*v1 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 32) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    *(_QWORD *)(v4 + 32) = v6;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    *(_QWORD *)(v4 + 32) = v6;
  }
  v21 = &type metadata for _CodingKey;
  v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v20 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v5;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v6[5 * v9 + 4]);
  v12 = v2[1];
  if (v5 >= *(_QWORD *)(v12 + 16))
  {
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    v13 = *(_QWORD *)(v4 + 32);
    v2[3] = v5 + 1;
    outlined init with copy of Any(v12 + 32 * v5 + 32, (uint64_t)&v20);
    v14 = *(_QWORD *)(v4 + 24);
    v15 = type metadata accessor for __PlistDictionaryDecoder();
    v16 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v20, v13, v14);
    a1[3] = v15;
    a1[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryDecoder);
    *a1 = v16;
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) >= *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return _PlistDictionaryUnkeyedDecodingContainer.decodeNil()() & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)() & 1;
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

__int128 *protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEB418]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDA70]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDB58]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDC60]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEBB98]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDE70]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEE068]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEE190]);
}

double protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

float protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

unint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEDBC8]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E0DEE0F8]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>(ValueMetadata *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED2E0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED300]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED308]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED310]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED328]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED320]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED330]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED338]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED348]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent<A>(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistDictionaryUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>(_QWORD *a1@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>(uint64_t *a1@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.superDecoder()(a1);
}

Swift::Bool __swiftcall __PlistDictionaryDecoder.decodeNil()()
{
  uint64_t v0;
  char v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v0 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v0, &v6);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v4 == 0x6C6C756E24 && v5 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      v2 = 1;
    }
    else
    {
      v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v2 = 0;
  }
  return v2 & 1;
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance __PlistDictionaryDecoder()
{
  return __PlistDictionaryDecoder.decodeNil()();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __PlistDictionaryDecoder()
{
  return specialized __PlistDictionaryDecoder.decode(_:)() & 1;
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

_OWORD *protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __PlistDictionaryDecoder()
{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

__int128 *specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  _BOOL4 v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  __n128 v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  _QWORD v89[2];
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD v101[4];
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t, __n128);

  v3 = v1;
  v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v98 == 0x6C6C756E24 && *((_QWORD *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  if (swift_dynamicCast())
    return (__int128 *)v98;
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v91 = v3;
    v93 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v8 = v103;
    v7 = v104;
    v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v95 = v89;
    v10 = *(_QWORD *)(v8 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v89 - v13, v12);
    v15 = *(_QWORD *)(v7 + 8);
    v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v17 = v16;
    v94 = v89;
    v18 = MEMORY[0x1E0C80A78](v16);
    v105 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v89 - v13, (char *)v89 - v13, v8, v18);
    v97 = (char *)v89 - v13;
    v19 = v15;
    v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
    v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    v33 = v32((char *)v89 - v13, v8);
    v34 = MEMORY[0x1E0C80A78](v33);
    v35 = (char *)v89 - v13;
    v105((char *)v89 - v13, v97, v8, v34);
    v96 = v89;
    if (v20)
    {
      *(_QWORD *)&v98 = 0x8000000000000000;
      v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 64)
        {
LABEL_48:
          v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v32;
          v32(v35, v8);
          v52 = v97;
          if (v68 < (uint64_t)v98)
            goto LABEL_55;
LABEL_26:
          v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v54 = MEMORY[0x1E0C80A78](v53);
          v105((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v8, v54);
          v92 = v89;
          if (v53 < 65)
          {
            v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            if (v57 == 64)
            {
              v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v56 = v55 ^ 1;
            }
            else
            {
              v56 = 0;
            }
          }
          else
          {
            v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            v56 = 1;
          }
          v62 = MEMORY[0x1E0C80A78](v55);
          v63 = (char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          v105(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            goto LABEL_45;
          }
          v64 = v51;
          *(_QWORD *)&v98 = 0x7FFFFFFFFFFFFFFFLL;
          v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 64)
            {
              MEMORY[0x1E0C80A78](v66);
              lazy protocol witness table accessor for type Int and conformance Int();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              v51 = v64;
              v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
              v64(v63, v8);
              v52 = v97;
              goto LABEL_50;
            }
          }
          else if (v66 >= 64)
          {
            v105 = (void (*)(char *, char *, uint64_t, __n128))v89;
            v101[0] = 0x7FFFFFFFFFFFFFFFLL;
            MEMORY[0x1E0C80A78](v66);
            lazy protocol witness table accessor for type Int and conformance Int();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            v51 = v64;
            v64(v63, v8);
            v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_50:
            if ((v67 & 1) != 0)
              goto LABEL_55;
LABEL_45:
            v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return v4;
          }
          dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v64;
          v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
          goto LABEL_45;
        }
        goto LABEL_33;
      }
      v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 64)
        {
          v90 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          v92 = v89;
          MEMORY[0x1E0C80A78](AssociatedTypeWitness);
          v89[0] = (char *)v89 - v70;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          v72 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          v89[1] = v89;
          MEMORY[0x1E0C80A78](v72);
          v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          v90 = v36;
          v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          v51 = v32;
          v75 = v32((char *)v89 - v73, v8);
          v76 = MEMORY[0x1E0C80A78](v75);
          v77 = (char *)v89 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v89 - v73, v35, v8, v76);
          v52 = v97;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }
          else
          {
            v78 = v98;
            v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v79 >= v78)
              goto LABEL_26;
          }
LABEL_55:
          v51(v52, v8);
          v80 = type metadata accessor for DecodingError();
          swift_allocError();
          v82 = v81;
          *(_QWORD *)&v98 = 0;
          *((_QWORD *)&v98 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52);
          v83._countAndFlagsBits = 0xD00000000000001DLL;
          v83._object = (void *)0x800000018230D0E0;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          v4 = &v98;
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._object = (void *)0x800000018230D100;
          v85._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v85);
          v86._countAndFlagsBits = 7630409;
          v86._object = (void *)0xE300000000000000;
          String.append(_:)(v86);
          v87._countAndFlagsBits = 46;
          v87._object = (void *)0xE100000000000000;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v82, *MEMORY[0x1E0DEC458], v80);
          goto LABEL_56;
        }
LABEL_33:
        MEMORY[0x1E0C80A78](v37);
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v51 = v32;
        v32((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        v32(v35, v8);
        v52 = v97;
        if ((v59 & 1) == 0)
          goto LABEL_26;
        goto LABEL_55;
      }
      if (v37 < 64)
        goto LABEL_48;
      v51 = v32;
      v32(v35, v8);
    }
    else
    {
      v32((char *)v89 - v13, v8);
      v51 = v32;
    }
    v52 = v97;
    goto LABEL_26;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v22 = MEMORY[0x1E0C80A78](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    lazy protocol witness table accessor for type Int and conformance Int();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v98) & 1) == 0)
    {
      v4 = (__int128 *)v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return v4;
    }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    *(_QWORD *)&v98 = 0;
    *((_QWORD *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v4 = &v98;
    _StringGuts.grow(_:)(52);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x800000018230D0E0;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x800000018230D100;
    v29._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 7630409;
    v30._object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC458], v25);
LABEL_56:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    return v4;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v38 = (void *)v98;
    v39 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v40;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x800000018230D0E0;
    String.append(_:)(v42);
    v43 = objc_msgSend(v38, sel_description);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    v4 = (__int128 *)v102;
    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x800000018230D100;
    v48._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 7630409;
    v49._object = (void *)0xE300000000000000;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x1E0DEC458], v39);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEB418], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v4;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t);
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;

  v3 = v1;
  v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v83 == 0x6C6C756E24 && *((_QWORD *)&v83 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  if (swift_dynamicCast())
    return (__int128 *)v83;
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v79 = v3;
    v80 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v8 = v88;
    v7 = v89;
    v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v90 = &v73;
    v10 = *(_QWORD **)(v8 - 8);
    v11 = v10[8];
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = (char *)&v73 - v13;
    v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)&v73 - v13, v12);
    v16 = *(_QWORD *)(v7 + 8);
    v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    v82 = &v73;
    v18 = MEMORY[0x1E0C80A78](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)&v73 - v13, (char *)&v73 - v13, v8, v18);
    v81 = v10;
    if ((v7 & 1) != 0)
    {
      v78 = (char *)&v73 - v13;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v77 = &v73;
      MEMORY[0x1E0C80A78](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v21 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v76 = &v73;
      MEMORY[0x1E0C80A78](v21);
      v22 = v81;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)&v73 - v13, v8);
      v23((char *)&v73 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v78, v8);
LABEL_37:
        v64 = type metadata accessor for DecodingError();
        swift_allocError();
        v66 = v65;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v67._countAndFlagsBits = 0xD00000000000001DLL;
        v67._object = (void *)0x800000018230D0E0;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        v4 = &v83;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._object = (void *)0x800000018230D100;
        v69._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v69);
        v70._countAndFlagsBits = 1953384789;
        v70._object = (void *)0xE400000000000000;
        String.append(_:)(v70);
        v71._countAndFlagsBits = 46;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v66, *MEMORY[0x1E0DEC458], v64);
        goto LABEL_38;
      }
      v14 = v78;
    }
    else
    {
      v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)&v73 - v13, v8);
    }
    v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v49 = MEMORY[0x1E0C80A78](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v8, v49);
    if (v48 <= 63)
    {
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_24:
      v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }
    v77 = &v73;
    *(_QWORD *)&v83 = -1;
    v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 64)
      {
        v78 = v14;
        v75 = v16;
        v74 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16);
        v52 = swift_getAssociatedTypeWitness();
        v76 = &v73;
        MEMORY[0x1E0C80A78](v52);
        v53 = swift_getAssociatedConformanceWitness();
        v54 = MEMORY[0x186DA5E34](&unk_18206D478, 256, v52, v53);
        v73 = (uint64_t)&v73;
        MEMORY[0x1E0C80A78](v54);
        v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v74) = dispatch thunk of static Comparable.> infix(_:_:)();
        v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)&v73 - v55, v8);
        v76 = (uint64_t *)v83;
        v57 = MEMORY[0x1E0C80A78](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v81[4])((char *)&v73 - v55, (char *)&v73 - v55, v8, v57);
        if ((v74 & 1) == 0)
        {
          v23((char *)&v73 - v55, v8);
          v14 = v78;
          goto LABEL_24;
        }
        v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)&v73 - v55, v8);
        v59 = (unint64_t)v76 >= v58;
        v14 = v78;
LABEL_35:
        if (v59)
          goto LABEL_24;
        goto LABEL_36;
      }
    }
    else if (v51 <= 64)
    {
      v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      v59 = (unint64_t)v83 >= v63;
      goto LABEL_35;
    }
    MEMORY[0x1E0C80A78](v51);
    lazy protocol witness table accessor for type UInt and conformance UInt();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    if ((v62 & 1) == 0)
      goto LABEL_24;
LABEL_36:
    v23(v14, v8);
    goto LABEL_37;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v25 = MEMORY[0x1E0C80A78](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
    lazy protocol witness table accessor for type UInt and conformance UInt();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v83) & 1) == 0)
    {
      v4 = (__int128 *)v83;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }
    v28 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v4 = &v83;
    _StringGuts.grow(_:)(52);
    v31._countAndFlagsBits = 0xD00000000000001DLL;
    v31._object = (void *)0x800000018230D0E0;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._object = (void *)0x800000018230D100;
    v32._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v32);
    v33._countAndFlagsBits = 1953384789;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 46;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC458], v28);
LABEL_38:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    return v4;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v35 = (void *)v83;
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    v87[0] = 0;
    v87[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v39._countAndFlagsBits = 0xD00000000000001DLL;
    v39._object = (void *)0x800000018230D0E0;
    String.append(_:)(v39);
    v40 = objc_msgSend(v35, sel_description);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v4 = (__int128 *)v87;
    v44._countAndFlagsBits = (uint64_t)v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._object = (void *)0x800000018230D100;
    v45._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 1953384789;
    v46._object = (void *)0xE400000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 46;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC458], v36);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEBB98], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v4;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  _BOOL4 v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  __n128 v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  _QWORD v89[2];
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD v101[4];
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t, __n128);

  v3 = v1;
  v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v98 == 0x6C6C756E24 && *((_QWORD *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  if (swift_dynamicCast())
    return (__int128 *)v98;
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v91 = v3;
    v93 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v8 = v103;
    v7 = v104;
    v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v95 = v89;
    v10 = *(_QWORD *)(v8 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v89 - v13, v12);
    v15 = *(_QWORD *)(v7 + 8);
    v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v17 = v16;
    v94 = v89;
    v18 = MEMORY[0x1E0C80A78](v16);
    v105 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v89 - v13, (char *)v89 - v13, v8, v18);
    v97 = (char *)v89 - v13;
    v19 = v15;
    v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
    v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    v33 = v32((char *)v89 - v13, v8);
    v34 = MEMORY[0x1E0C80A78](v33);
    v35 = (char *)v89 - v13;
    v105((char *)v89 - v13, v97, v8, v34);
    v96 = v89;
    if (v20)
    {
      *(_QWORD *)&v98 = 0x8000000000000000;
      v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 64)
        {
LABEL_48:
          v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v32;
          v32(v35, v8);
          v52 = v97;
          if (v68 < (uint64_t)v98)
            goto LABEL_55;
LABEL_26:
          v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v54 = MEMORY[0x1E0C80A78](v53);
          v105((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v8, v54);
          v92 = v89;
          if (v53 < 65)
          {
            v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            if (v57 == 64)
            {
              v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v56 = v55 ^ 1;
            }
            else
            {
              v56 = 0;
            }
          }
          else
          {
            v55 = v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            v56 = 1;
          }
          v62 = MEMORY[0x1E0C80A78](v55);
          v63 = (char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          v105(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            goto LABEL_45;
          }
          v64 = v51;
          *(_QWORD *)&v98 = 0x7FFFFFFFFFFFFFFFLL;
          v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 64)
            {
              MEMORY[0x1E0C80A78](v66);
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              v51 = v64;
              v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
              v64(v63, v8);
              v52 = v97;
              goto LABEL_50;
            }
          }
          else if (v66 >= 64)
          {
            v105 = (void (*)(char *, char *, uint64_t, __n128))v89;
            v101[0] = 0x7FFFFFFFFFFFFFFFLL;
            MEMORY[0x1E0C80A78](v66);
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            v51 = v64;
            v64(v63, v8);
            v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_50:
            if ((v67 & 1) != 0)
              goto LABEL_55;
LABEL_45:
            v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return v4;
          }
          dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v64;
          v64((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
          goto LABEL_45;
        }
        goto LABEL_33;
      }
      v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 64)
        {
          v90 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          v92 = v89;
          MEMORY[0x1E0C80A78](AssociatedTypeWitness);
          v89[0] = (char *)v89 - v70;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          v72 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          v89[1] = v89;
          MEMORY[0x1E0C80A78](v72);
          v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          v90 = v36;
          v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          v51 = v32;
          v75 = v32((char *)v89 - v73, v8);
          v76 = MEMORY[0x1E0C80A78](v75);
          v77 = (char *)v89 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v89 - v73, v35, v8, v76);
          v52 = v97;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }
          else
          {
            v78 = v98;
            v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v79 >= v78)
              goto LABEL_26;
          }
LABEL_55:
          v51(v52, v8);
          v80 = type metadata accessor for DecodingError();
          swift_allocError();
          v82 = v81;
          *(_QWORD *)&v98 = 0;
          *((_QWORD *)&v98 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52);
          v83._countAndFlagsBits = 0xD00000000000001DLL;
          v83._object = (void *)0x800000018230D0E0;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          v4 = &v98;
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._object = (void *)0x800000018230D100;
          v85._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v85);
          v86._countAndFlagsBits = 0x3436746E49;
          v86._object = (void *)0xE500000000000000;
          String.append(_:)(v86);
          v87._countAndFlagsBits = 46;
          v87._object = (void *)0xE100000000000000;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v82, *MEMORY[0x1E0DEC458], v80);
          goto LABEL_56;
        }
LABEL_33:
        MEMORY[0x1E0C80A78](v37);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v51 = v32;
        v32((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        v32(v35, v8);
        v52 = v97;
        if ((v59 & 1) == 0)
          goto LABEL_26;
        goto LABEL_55;
      }
      if (v37 < 64)
        goto LABEL_48;
      v51 = v32;
      v32(v35, v8);
    }
    else
    {
      v32((char *)v89 - v13, v8);
      v51 = v32;
    }
    v52 = v97;
    goto LABEL_26;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v22 = MEMORY[0x1E0C80A78](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v98) & 1) == 0)
    {
      v4 = (__int128 *)v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return v4;
    }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    *(_QWORD *)&v98 = 0;
    *((_QWORD *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v4 = &v98;
    _StringGuts.grow(_:)(52);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x800000018230D0E0;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x800000018230D100;
    v29._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0x3436746E49;
    v30._object = (void *)0xE500000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC458], v25);
LABEL_56:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    return v4;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v38 = (void *)v98;
    v39 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v40;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x800000018230D0E0;
    String.append(_:)(v42);
    v43 = objc_msgSend(v38, sel_description);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    v4 = (__int128 *)v102;
    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x800000018230D100;
    v48._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 0x3436746E49;
    v49._object = (void *)0xE500000000000000;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x1E0DEC458], v39);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEDC60], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v4;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t);
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;

  v3 = v1;
  v4 = (__int128 *)a1;
  outlined init with copy of Any(a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v83 == 0x6C6C756E24 && *((_QWORD *)&v83 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  if (swift_dynamicCast())
    return (__int128 *)v83;
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v79 = v3;
    v80 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v8 = v88;
    v7 = v89;
    v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v90 = &v73;
    v10 = *(_QWORD **)(v8 - 8);
    v11 = v10[8];
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = (char *)&v73 - v13;
    v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)&v73 - v13, v12);
    v16 = *(_QWORD *)(v7 + 8);
    v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    v82 = &v73;
    v18 = MEMORY[0x1E0C80A78](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)&v73 - v13, (char *)&v73 - v13, v8, v18);
    v81 = v10;
    if ((v7 & 1) != 0)
    {
      v78 = (char *)&v73 - v13;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v77 = &v73;
      MEMORY[0x1E0C80A78](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v21 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v76 = &v73;
      MEMORY[0x1E0C80A78](v21);
      v22 = v81;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)&v73 - v13, v8);
      v23((char *)&v73 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v78, v8);
LABEL_37:
        v64 = type metadata accessor for DecodingError();
        swift_allocError();
        v66 = v65;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v67._countAndFlagsBits = 0xD00000000000001DLL;
        v67._object = (void *)0x800000018230D0E0;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        v4 = &v83;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._object = (void *)0x800000018230D100;
        v69._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v69);
        v70._countAndFlagsBits = 0x3436746E4955;
        v70._object = (void *)0xE600000000000000;
        String.append(_:)(v70);
        v71._countAndFlagsBits = 46;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v66, *MEMORY[0x1E0DEC458], v64);
        goto LABEL_38;
      }
      v14 = v78;
    }
    else
    {
      v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)&v73 - v13, v8);
    }
    v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v49 = MEMORY[0x1E0C80A78](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v8, v49);
    if (v48 <= 63)
    {
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_24:
      v4 = (__int128 *)dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }
    v77 = &v73;
    *(_QWORD *)&v83 = -1;
    v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 64)
      {
        v78 = v14;
        v75 = v16;
        v74 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16);
        v52 = swift_getAssociatedTypeWitness();
        v76 = &v73;
        MEMORY[0x1E0C80A78](v52);
        v53 = swift_getAssociatedConformanceWitness();
        v54 = MEMORY[0x186DA5E34](&unk_18206D478, 256, v52, v53);
        v73 = (uint64_t)&v73;
        MEMORY[0x1E0C80A78](v54);
        v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v74) = dispatch thunk of static Comparable.> infix(_:_:)();
        v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)&v73 - v55, v8);
        v76 = (uint64_t *)v83;
        v57 = MEMORY[0x1E0C80A78](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v81[4])((char *)&v73 - v55, (char *)&v73 - v55, v8, v57);
        if ((v74 & 1) == 0)
        {
          v23((char *)&v73 - v55, v8);
          v14 = v78;
          goto LABEL_24;
        }
        v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)&v73 - v55, v8);
        v59 = (unint64_t)v76 >= v58;
        v14 = v78;
LABEL_35:
        if (v59)
          goto LABEL_24;
        goto LABEL_36;
      }
    }
    else if (v51 <= 64)
    {
      v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      v59 = (unint64_t)v83 >= v63;
      goto LABEL_35;
    }
    MEMORY[0x1E0C80A78](v51);
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    v23((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    if ((v62 & 1) == 0)
      goto LABEL_24;
LABEL_36:
    v23(v14, v8);
    goto LABEL_37;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v25 = MEMORY[0x1E0C80A78](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v83) & 1) == 0)
    {
      v4 = (__int128 *)v83;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return v4;
    }
    v28 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v4 = &v83;
    _StringGuts.grow(_:)(52);
    v31._countAndFlagsBits = 0xD00000000000001DLL;
    v31._object = (void *)0x800000018230D0E0;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._object = (void *)0x800000018230D100;
    v32._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v32);
    v33._countAndFlagsBits = 0x3436746E4955;
    v33._object = (void *)0xE600000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 46;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC458], v28);
LABEL_38:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    return v4;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v35 = (void *)v83;
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    v87[0] = 0;
    v87[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v39._countAndFlagsBits = 0xD00000000000001DLL;
    v39._object = (void *)0x800000018230D0E0;
    String.append(_:)(v39);
    v40 = objc_msgSend(v35, sel_description);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v4 = (__int128 *)v87;
    v44._countAndFlagsBits = (uint64_t)v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._object = (void *)0x800000018230D100;
    v45._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 0x3436746E4955;
    v46._object = (void *)0xE600000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 46;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC458], v36);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEE190], v4, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v4;
}

void specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t);
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unsigned __int8 v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v83 == 0x6C6C756E24 && *((_QWORD *)&v83 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
    return;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v78 = v3;
    v79 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v8 = v88;
    v7 = v89;
    v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v82 = v72;
    v10 = *(_QWORD **)(v8 - 8);
    v11 = v10[8];
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = (char *)v72 - v13;
    v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)v72 - v13, v12);
    v16 = *(_QWORD *)(v7 + 8);
    v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    v81 = v72;
    v18 = MEMORY[0x1E0C80A78](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v72 - v13, (char *)v72 - v13, v8, v18);
    v80 = v10;
    if ((v7 & 1) != 0)
    {
      v77 = (char *)v72 - v13;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v76 = v72;
      MEMORY[0x1E0C80A78](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v21 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v75 = v72;
      MEMORY[0x1E0C80A78](v21);
      v22 = v80;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)v72 - v13, v8);
      v23((char *)v72 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v77, v8);
LABEL_36:
        v64 = type metadata accessor for DecodingError();
        swift_allocError();
        v66 = v65;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v67._countAndFlagsBits = 0xD00000000000001DLL;
        v67._object = (void *)0x800000018230D0E0;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._object = (void *)0x800000018230D100;
        v69._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v69);
        v70._countAndFlagsBits = 0x38746E4955;
        v70._object = (void *)0xE500000000000000;
        String.append(_:)(v70);
        v71._countAndFlagsBits = 46;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v66, *MEMORY[0x1E0DEC458], v64);
LABEL_37:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        return;
      }
      v14 = v77;
    }
    else
    {
      v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)v72 - v13, v8);
    }
    v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v49 = MEMORY[0x1E0C80A78](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v8, v49);
    if (v48 <= 7)
    {
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_23:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }
    v76 = v72;
    LOBYTE(v83) = -1;
    v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 8)
      {
        v77 = v14;
        v74 = v16;
        v73 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16);
        v52 = swift_getAssociatedTypeWitness();
        v75 = v72;
        MEMORY[0x1E0C80A78](v52);
        v53 = swift_getAssociatedConformanceWitness();
        v54 = MEMORY[0x186DA5E34](&unk_18206D478, 256, v52, v53);
        v72[1] = v72;
        MEMORY[0x1E0C80A78](v54);
        v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v73) = dispatch thunk of static Comparable.> infix(_:_:)();
        v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)v72 - v55, v8);
        LODWORD(v75) = v83;
        v57 = MEMORY[0x1E0C80A78](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v80[4])((char *)v72 - v55, (char *)v72 - v55, v8, v57);
        if ((v73 & 1) == 0)
        {
          v23((char *)v72 - v55, v8);
          v14 = v77;
          goto LABEL_23;
        }
        v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)v72 - v55, v8);
        v59 = v75 >= v58;
        v14 = v77;
LABEL_34:
        if (v59)
          goto LABEL_23;
        goto LABEL_35;
      }
    }
    else if (v51 <= 8)
    {
      v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      v59 = v83 >= v63;
      goto LABEL_34;
    }
    MEMORY[0x1E0C80A78](v51);
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    if ((v62 & 1) == 0)
      goto LABEL_23;
LABEL_35:
    v23(v14, v8);
    goto LABEL_36;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v25 = MEMORY[0x1E0C80A78](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE1(v83) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }
    v28 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v31._countAndFlagsBits = 0xD00000000000001DLL;
    v31._object = (void *)0x800000018230D0E0;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._object = (void *)0x800000018230D100;
    v32._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v32);
    v33._countAndFlagsBits = 0x38746E4955;
    v33._object = (void *)0xE500000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 46;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC458], v28);
    goto LABEL_37;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v35 = (void *)v83;
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    v87[0] = 0;
    v87[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v39._countAndFlagsBits = 0xD00000000000001DLL;
    v39._object = (void *)0x800000018230D0E0;
    String.append(_:)(v39);
    v40 = objc_msgSend(v35, sel_description);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v44._countAndFlagsBits = (uint64_t)v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._object = (void *)0x800000018230D100;
    v45._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 0x38746E4955;
    v46._object = (void *)0xE500000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 46;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC458], v36);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEDE70], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t);
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  __n128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unsigned __int16 v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unsigned __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v83 == 0x6C6C756E24 && *((_QWORD *)&v83 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
    return;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v78 = v3;
    v79 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v8 = v88;
    v7 = v89;
    v9 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v82 = v72;
    v10 = *(_QWORD **)(v8 - 8);
    v11 = v10[8];
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = (char *)v72 - v13;
    v15 = (void (*)(char *, __n128))v10[2];
    v15((char *)v72 - v13, v12);
    v16 = *(_QWORD *)(v7 + 8);
    v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v17;
    v81 = v72;
    v18 = MEMORY[0x1E0C80A78](v17);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v72 - v13, (char *)v72 - v13, v8, v18);
    v80 = v10;
    if ((v7 & 1) != 0)
    {
      v77 = (char *)v72 - v13;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v76 = v72;
      MEMORY[0x1E0C80A78](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v21 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v75 = v72;
      MEMORY[0x1E0C80A78](v21);
      v22 = v80;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      v23 = (void (*)(char *, uint64_t))v22[1];
      v23((char *)v72 - v13, v8);
      v23((char *)v72 - v13, v8);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v23(v77, v8);
LABEL_36:
        v64 = type metadata accessor for DecodingError();
        swift_allocError();
        v66 = v65;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v67._countAndFlagsBits = 0xD00000000000001DLL;
        v67._object = (void *)0x800000018230D0E0;
        String.append(_:)(v67);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._object = (void *)0x800000018230D100;
        v69._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v69);
        v70._countAndFlagsBits = 0x3631746E4955;
        v70._object = (void *)0xE600000000000000;
        String.append(_:)(v70);
        v71._countAndFlagsBits = 46;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v66, *MEMORY[0x1E0DEC458], v64);
LABEL_37:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        return;
      }
      v14 = v77;
    }
    else
    {
      v23 = (void (*)(char *, uint64_t))v10[1];
      v23((char *)v72 - v13, v8);
    }
    v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v49 = MEMORY[0x1E0C80A78](v48);
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v8, v49);
    if (v48 <= 15)
    {
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_23:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v23(v14, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }
    v76 = v72;
    LOWORD(v83) = -1;
    v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v50 & 1) != 0)
    {
      if (v51 <= 16)
      {
        v77 = v14;
        v74 = v16;
        v73 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16);
        v52 = swift_getAssociatedTypeWitness();
        v75 = v72;
        MEMORY[0x1E0C80A78](v52);
        v53 = swift_getAssociatedConformanceWitness();
        v54 = MEMORY[0x186DA5E34](&unk_18206D478, 256, v52, v53);
        v72[1] = v72;
        MEMORY[0x1E0C80A78](v54);
        v55 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v73) = dispatch thunk of static Comparable.> infix(_:_:)();
        v56 = ((uint64_t (*)(char *, uint64_t))v23)((char *)v72 - v55, v8);
        LODWORD(v75) = (unsigned __int16)v83;
        v57 = MEMORY[0x1E0C80A78](v56);
        ((void (*)(char *, char *, uint64_t, __n128))v80[4])((char *)v72 - v55, (char *)v72 - v55, v8, v57);
        if ((v73 & 1) == 0)
        {
          v23((char *)v72 - v55, v8);
          v14 = v77;
          goto LABEL_23;
        }
        v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v23((char *)v72 - v55, v8);
        v59 = v75 >= v58;
        v14 = v77;
LABEL_34:
        if (v59)
          goto LABEL_23;
        goto LABEL_35;
      }
    }
    else if (v51 <= 16)
    {
      v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      v59 = (unsigned __int16)v83 >= v63;
      goto LABEL_34;
    }
    MEMORY[0x1E0C80A78](v51);
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    v23((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    if ((v62 & 1) == 0)
      goto LABEL_23;
LABEL_35:
    v23(v14, v8);
    goto LABEL_36;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v24 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v25 = MEMORY[0x1E0C80A78](v24);
    (*(void (**)(char *, __n128))(v27 + 16))((char *)v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE2(v83) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      return;
    }
    v28 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v31._countAndFlagsBits = 0xD00000000000001DLL;
    v31._object = (void *)0x800000018230D0E0;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    v32._object = (void *)0x800000018230D100;
    v32._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v32);
    v33._countAndFlagsBits = 0x3631746E4955;
    v33._object = (void *)0xE600000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 46;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC458], v28);
    goto LABEL_37;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v35 = (void *)v83;
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    v87[0] = 0;
    v87[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v39._countAndFlagsBits = 0xD00000000000001DLL;
    v39._object = (void *)0x800000018230D0E0;
    String.append(_:)(v39);
    v40 = objc_msgSend(v35, sel_description);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v44._countAndFlagsBits = (uint64_t)v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._object = (void *)0x800000018230D100;
    v45._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 0x3631746E4955;
    v46._object = (void *)0xE600000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 46;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC458], v36);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEE068], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  _BOOL4 v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  __n128 v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  _QWORD v88[3];
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t, __n128);
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _BYTE v101[32];
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;

  v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v98 == 0x6C6C756E24 && *((_QWORD *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
    return;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v90 = v3;
    v92 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v8 = v103;
    v7 = v104;
    v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v94 = v88;
    v10 = *(_QWORD *)(v8 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v88 - v13, v12);
    v15 = *(_QWORD *)(v7 + 8);
    v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v17 = v16;
    v93 = v88;
    v18 = MEMORY[0x1E0C80A78](v16);
    v97 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v88 - v13, (char *)v88 - v13, v8, v18);
    v96 = (char *)v88 - v13;
    v19 = v15;
    v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 8;
    v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    v33 = v32((char *)v88 - v13, v8);
    v34 = MEMORY[0x1E0C80A78](v33);
    v35 = (char *)v88 - v13;
    v97((char *)v88 - v13, v96, v8, v34);
    v95 = v88;
    if (v20)
    {
      LOBYTE(v98) = 0x80;
      v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 8)
        {
LABEL_47:
          v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v32;
          v32(v35, v8);
          v52 = v96;
          if ((char)v98 > v68)
            goto LABEL_54;
LABEL_25:
          v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v54 = MEMORY[0x1E0C80A78](v53);
          v97((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v8, v54);
          v91 = v88;
          if (v53 < 9)
          {
            v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            if (v57 == 8)
            {
              v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v56 = v55 ^ 1;
            }
            else
            {
              v56 = 0;
            }
          }
          else
          {
            v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            v56 = 1;
          }
          v62 = MEMORY[0x1E0C80A78](v55);
          v63 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          v97(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            goto LABEL_44;
          }
          v64 = v51;
          LOBYTE(v98) = 127;
          v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 8)
            {
              MEMORY[0x1E0C80A78](v66);
              lazy protocol witness table accessor for type Int8 and conformance Int8();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              v51 = v64;
              v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
              v64(v63, v8);
              v52 = v96;
              goto LABEL_49;
            }
          }
          else if (v66 >= 8)
          {
            v97 = (void (*)(char *, char *, uint64_t, __n128))v88;
            v101[0] = 127;
            MEMORY[0x1E0C80A78](v66);
            lazy protocol witness table accessor for type Int8 and conformance Int8();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            v51 = v64;
            v64(v63, v8);
            v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_49:
            if ((v67 & 1) != 0)
              goto LABEL_54;
LABEL_44:
            dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return;
          }
          dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v64;
          v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
          goto LABEL_44;
        }
        goto LABEL_32;
      }
      v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 8)
        {
          v89 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          v91 = v88;
          MEMORY[0x1E0C80A78](AssociatedTypeWitness);
          v88[1] = (char *)v88 - v70;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          v72 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          v88[2] = v88;
          MEMORY[0x1E0C80A78](v72);
          v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          v89 = v36;
          v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          v51 = v32;
          v75 = v32((char *)v88 - v73, v8);
          v76 = MEMORY[0x1E0C80A78](v75);
          v77 = (char *)v88 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v88 - v73, v35, v8, v76);
          v52 = v96;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }
          else
          {
            v78 = (char)v98;
            v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v78 <= v79)
              goto LABEL_25;
          }
LABEL_54:
          v51(v52, v8);
          v80 = type metadata accessor for DecodingError();
          swift_allocError();
          v82 = v81;
          *(_QWORD *)&v98 = 0;
          *((_QWORD *)&v98 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52);
          v83._countAndFlagsBits = 0xD00000000000001DLL;
          v83._object = (void *)0x800000018230D0E0;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._object = (void *)0x800000018230D100;
          v85._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v85);
          v86._countAndFlagsBits = 947154505;
          v86._object = (void *)0xE400000000000000;
          String.append(_:)(v86);
          v87._countAndFlagsBits = 46;
          v87._object = (void *)0xE100000000000000;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v82, *MEMORY[0x1E0DEC458], v80);
LABEL_55:
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          return;
        }
LABEL_32:
        MEMORY[0x1E0C80A78](v37);
        lazy protocol witness table accessor for type Int8 and conformance Int8();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v51 = v32;
        v32((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        v32(v35, v8);
        v52 = v96;
        if ((v59 & 1) == 0)
          goto LABEL_25;
        goto LABEL_54;
      }
      if (v37 < 8)
        goto LABEL_47;
      v51 = v32;
      v32(v35, v8);
    }
    else
    {
      v32((char *)v88 - v13, v8);
      v51 = v32;
    }
    v52 = v96;
    goto LABEL_25;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v22 = MEMORY[0x1E0C80A78](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    lazy protocol witness table accessor for type Int8 and conformance Int8();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE1(v98) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return;
    }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    *(_QWORD *)&v98 = 0;
    *((_QWORD *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x800000018230D0E0;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x800000018230D100;
    v29._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 947154505;
    v30._object = (void *)0xE400000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC458], v25);
    goto LABEL_55;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v38 = (void *)v98;
    v39 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v40;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x800000018230D0E0;
    String.append(_:)(v42);
    v43 = objc_msgSend(v38, sel_description);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x800000018230D100;
    v48._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 947154505;
    v49._object = (void *)0xE400000000000000;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x1E0DEC458], v39);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEDA70], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  _BOOL4 v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  __n128 v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  char v65;
  uint64_t v66;
  char v67;
  __int16 v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  _QWORD v88[3];
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t, __n128);
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _WORD v101[16];
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;

  v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v98 == 0x6C6C756E24 && *((_QWORD *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
    return;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v90 = v3;
    v92 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v8 = v103;
    v7 = v104;
    v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v94 = v88;
    v10 = *(_QWORD *)(v8 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    v12 = MEMORY[0x1E0C80A78](v9);
    v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    v14 = *(void (**)(char *, __n128))(v10 + 16);
    v14((char *)v88 - v13, v12);
    v15 = *(_QWORD *)(v7 + 8);
    v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v17 = v16;
    v93 = v88;
    v18 = MEMORY[0x1E0C80A78](v16);
    v97 = (void (*)(char *, char *, uint64_t, __n128))v14;
    ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)v88 - v13, (char *)v88 - v13, v8, v18);
    v96 = (char *)v88 - v13;
    v19 = v15;
    v20 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 16;
    v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    v33 = v32((char *)v88 - v13, v8);
    v34 = MEMORY[0x1E0C80A78](v33);
    v35 = (char *)v88 - v13;
    v97((char *)v88 - v13, v96, v8, v34);
    v95 = v88;
    if (v20)
    {
      LOWORD(v98) = 0x8000;
      v36 = v19;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 16)
        {
LABEL_47:
          v68 = dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v32;
          v32(v35, v8);
          v52 = v96;
          if ((__int16)v98 > v68)
            goto LABEL_54;
LABEL_25:
          v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v54 = MEMORY[0x1E0C80A78](v53);
          v97((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v8, v54);
          v91 = v88;
          if (v53 < 17)
          {
            v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            if (v57 == 16)
            {
              v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v56 = v55 ^ 1;
            }
            else
            {
              v56 = 0;
            }
          }
          else
          {
            v55 = v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            v56 = 1;
          }
          v62 = MEMORY[0x1E0C80A78](v55);
          v63 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          v97(v63, v52, v8, v62);
          if ((v56 & 1) == 0)
          {
            v51((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            goto LABEL_44;
          }
          v64 = v51;
          LOWORD(v98) = 0x7FFF;
          v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
          v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v65 & 1) != 0)
          {
            if (v66 > 16)
            {
              MEMORY[0x1E0C80A78](v66);
              lazy protocol witness table accessor for type Int16 and conformance Int16();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              v51 = v64;
              v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
              v64(v63, v8);
              v52 = v96;
              goto LABEL_49;
            }
          }
          else if (v66 >= 16)
          {
            v97 = (void (*)(char *, char *, uint64_t, __n128))v88;
            v101[0] = 0x7FFF;
            MEMORY[0x1E0C80A78](v66);
            lazy protocol witness table accessor for type Int16 and conformance Int16();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v67 = dispatch thunk of static Comparable.< infix(_:_:)();
            v51 = v64;
            v64(v63, v8);
            v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
LABEL_49:
            if ((v67 & 1) != 0)
              goto LABEL_54;
LABEL_44:
            dispatch thunk of BinaryInteger._lowWord.getter();
            v51(v52, v8);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return;
          }
          dispatch thunk of BinaryInteger._lowWord.getter();
          v51 = v64;
          v64((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
          goto LABEL_44;
        }
        goto LABEL_32;
      }
      v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v58 & 1) != 0)
      {
        if (v37 <= 16)
        {
          v89 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          v91 = v88;
          MEMORY[0x1E0C80A78](AssociatedTypeWitness);
          v88[1] = (char *)v88 - v70;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          v72 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          v88[2] = v88;
          MEMORY[0x1E0C80A78](v72);
          v73 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          v89 = v36;
          v74 = dispatch thunk of static Comparable.< infix(_:_:)();
          v51 = v32;
          v75 = v32((char *)v88 - v73, v8);
          v76 = MEMORY[0x1E0C80A78](v75);
          v77 = (char *)v88 - v73;
          (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))((char *)v88 - v73, v35, v8, v76);
          v52 = v96;
          if ((v74 & 1) != 0)
          {
            v32(v77, v8);
          }
          else
          {
            v78 = (__int16)v98;
            v79 = dispatch thunk of BinaryInteger._lowWord.getter();
            v32(v77, v8);
            if (v78 <= v79)
              goto LABEL_25;
          }
LABEL_54:
          v51(v52, v8);
          v80 = type metadata accessor for DecodingError();
          swift_allocError();
          v82 = v81;
          *(_QWORD *)&v98 = 0;
          *((_QWORD *)&v98 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52);
          v83._countAndFlagsBits = 0xD00000000000001DLL;
          v83._object = (void *)0x800000018230D0E0;
          String.append(_:)(v83);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v84);
          swift_bridgeObjectRelease();
          v85._object = (void *)0x800000018230D100;
          v85._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v85);
          v86._countAndFlagsBits = 0x3631746E49;
          v86._object = (void *)0xE500000000000000;
          String.append(_:)(v86);
          v87._countAndFlagsBits = 46;
          v87._object = (void *)0xE100000000000000;
          String.append(_:)(v87);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v82, *MEMORY[0x1E0DEC458], v80);
LABEL_55:
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          return;
        }
LABEL_32:
        MEMORY[0x1E0C80A78](v37);
        lazy protocol witness table accessor for type Int16 and conformance Int16();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v51 = v32;
        v32((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        v32(v35, v8);
        v52 = v96;
        if ((v59 & 1) == 0)
          goto LABEL_25;
        goto LABEL_54;
      }
      if (v37 < 16)
        goto LABEL_47;
      v51 = v32;
      v32(v35, v8);
    }
    else
    {
      v32((char *)v88 - v13, v8);
      v51 = v32;
    }
    v52 = v96;
    goto LABEL_25;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v22 = MEMORY[0x1E0C80A78](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    lazy protocol witness table accessor for type Int16 and conformance Int16();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE2(v98) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return;
    }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    *(_QWORD *)&v98 = 0;
    *((_QWORD *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x800000018230D0E0;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x800000018230D100;
    v29._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0x3631746E49;
    v30._object = (void *)0xE500000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC458], v25);
    goto LABEL_55;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v38 = (void *)v98;
    v39 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v40;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x800000018230D0E0;
    String.append(_:)(v42);
    v43 = objc_msgSend(v38, sel_description);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x800000018230D100;
    v48._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 0x3631746E49;
    v49._object = (void *)0xE500000000000000;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x1E0DEC458], v39);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEDB58], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  void (*v15)(char *, __n128);
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  _BOOL4 v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  __n128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  __n128 v63;
  char *v64;
  uint64_t (*v65)(char *, uint64_t);
  char v66;
  uint64_t v67;
  char v68;
  int v69;
  uint64_t AssociatedTypeWitness;
  uint64_t v71;
  uint64_t AssociatedConformanceWitness;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  __n128 v77;
  char *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  _QWORD v89[2];
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _DWORD v101[8];
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t, __n128);

  v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v98 == 0x6C6C756E24 && *((_QWORD *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_7;
    }
    v7 = 1;
    goto LABEL_46;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    v7 = 0;
LABEL_46:
    LOBYTE(v102[0]) = v7;
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v91 = v3;
    v93 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v9 = v103;
    v8 = v104;
    v10 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v95 = v89;
    v11 = *(_QWORD *)(v9 - 8);
    v12 = *(_QWORD *)(v11 + 64);
    v13 = MEMORY[0x1E0C80A78](v10);
    v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = *(void (**)(char *, __n128))(v11 + 16);
    v15((char *)v89 - v14, v13);
    v16 = *(_QWORD *)(v8 + 8);
    v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v18 = v17;
    v94 = v89;
    v19 = MEMORY[0x1E0C80A78](v17);
    v105 = (void (*)(char *, char *, uint64_t, __n128))v15;
    ((void (*)(char *, char *, uint64_t, __n128))v15)((char *)v89 - v14, (char *)v89 - v14, v9, v19);
    v97 = (char *)v89 - v14;
    v20 = v16;
    v21 = (v18 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 32;
    v33 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v34 = v33((char *)v89 - v14, v9);
    v35 = MEMORY[0x1E0C80A78](v34);
    v36 = (char *)v89 - v14;
    v105((char *)v89 - v14, v97, v9, v35);
    v96 = v89;
    if (v21)
    {
      LODWORD(v98) = 0x80000000;
      v37 = v20;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
        v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v38 < 32)
        {
LABEL_49:
          v69 = dispatch thunk of BinaryInteger._lowWord.getter();
          v52 = v33;
          v33(v36, v9);
          v53 = v97;
          if ((int)v98 > v69)
            goto LABEL_56;
LABEL_26:
          v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v55 = MEMORY[0x1E0C80A78](v54);
          v105((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v53, v9, v55);
          v92 = v89;
          if (v54 < 33)
          {
            v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v56 = v52((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
            if (v58 == 32)
            {
              v56 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v57 = v56 ^ 1;
            }
            else
            {
              v57 = 0;
            }
          }
          else
          {
            v56 = v52((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
            v57 = 1;
          }
          v63 = MEMORY[0x1E0C80A78](v56);
          v64 = (char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
          v105(v64, v53, v9, v63);
          if ((v57 & 1) == 0)
          {
            v52((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
            goto LABEL_45;
          }
          v65 = v52;
          LODWORD(v98) = 0x7FFFFFFF;
          v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
          v67 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if ((v66 & 1) != 0)
          {
            if (v67 > 32)
            {
              MEMORY[0x1E0C80A78](v67);
              lazy protocol witness table accessor for type Int32 and conformance Int32();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v68 = dispatch thunk of static Comparable.< infix(_:_:)();
              v52 = v65;
              v65((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
              v65(v64, v9);
              v53 = v97;
              goto LABEL_51;
            }
          }
          else if (v67 >= 32)
          {
            v105 = (void (*)(char *, char *, uint64_t, __n128))v89;
            v101[0] = 0x7FFFFFFF;
            MEMORY[0x1E0C80A78](v67);
            lazy protocol witness table accessor for type Int32 and conformance Int32();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v68 = dispatch thunk of static Comparable.< infix(_:_:)();
            v52 = v65;
            v65(v64, v9);
            v65((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
LABEL_51:
            if ((v68 & 1) != 0)
              goto LABEL_56;
LABEL_45:
            dispatch thunk of BinaryInteger._lowWord.getter();
            v52(v53, v9);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            v7 = 0;
            goto LABEL_46;
          }
          dispatch thunk of BinaryInteger._lowWord.getter();
          v52 = v65;
          v65((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
          goto LABEL_45;
        }
        goto LABEL_33;
      }
      v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v59 & 1) != 0)
      {
        if (v38 <= 32)
        {
          v90 = *(_QWORD *)(*(_QWORD *)(v20 + 24) + 16);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          v92 = v89;
          MEMORY[0x1E0C80A78](AssociatedTypeWitness);
          v89[0] = (char *)v89 - v71;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          v73 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          v89[1] = v89;
          MEMORY[0x1E0C80A78](v73);
          v74 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          v90 = v37;
          v75 = dispatch thunk of static Comparable.< infix(_:_:)();
          v52 = v33;
          v76 = v33((char *)v89 - v74, v9);
          v77 = MEMORY[0x1E0C80A78](v76);
          v78 = (char *)v89 - v74;
          (*(void (**)(char *, char *, uint64_t, __n128))(v11 + 32))((char *)v89 - v74, v36, v9, v77);
          v53 = v97;
          if ((v75 & 1) != 0)
          {
            v33(v78, v9);
          }
          else
          {
            v79 = v98;
            v80 = dispatch thunk of BinaryInteger._lowWord.getter();
            v33(v78, v9);
            if (v79 <= v80)
              goto LABEL_26;
          }
LABEL_56:
          v52(v53, v9);
          v81 = type metadata accessor for DecodingError();
          swift_allocError();
          v83 = v82;
          *(_QWORD *)&v98 = 0;
          *((_QWORD *)&v98 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(52);
          v84._countAndFlagsBits = 0xD00000000000001DLL;
          v84._object = (void *)0x800000018230D0E0;
          String.append(_:)(v84);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          v85._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v85);
          swift_bridgeObjectRelease();
          v86._object = (void *)0x800000018230D100;
          v86._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v86);
          v87._countAndFlagsBits = 0x3233746E49;
          v87._object = (void *)0xE500000000000000;
          String.append(_:)(v87);
          v88._countAndFlagsBits = 46;
          v88._object = (void *)0xE100000000000000;
          String.append(_:)(v88);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v83, *MEMORY[0x1E0DEC458], v81);
LABEL_57:
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
          return;
        }
LABEL_33:
        MEMORY[0x1E0C80A78](v38);
        lazy protocol witness table accessor for type Int32 and conformance Int32();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v60 = dispatch thunk of static Comparable.< infix(_:_:)();
        v52 = v33;
        v33((char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
        v33(v36, v9);
        v53 = v97;
        if ((v60 & 1) == 0)
          goto LABEL_26;
        goto LABEL_56;
      }
      if (v38 < 32)
        goto LABEL_49;
      v52 = v33;
      v33(v36, v9);
    }
    else
    {
      v33((char *)v89 - v14, v9);
      v52 = v33;
    }
    v53 = v97;
    goto LABEL_26;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    v22 = __swift_project_boxed_opaque_existential_1(v102, v103);
    v23 = MEMORY[0x1E0C80A78](v22);
    (*(void (**)(char *, __n128))(v25 + 16))((char *)v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v23);
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE4(v98) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      v7 = 0;
      goto LABEL_46;
    }
    v26 = type metadata accessor for DecodingError();
    swift_allocError();
    v28 = v27;
    *(_QWORD *)&v98 = 0;
    *((_QWORD *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v29._countAndFlagsBits = 0xD00000000000001DLL;
    v29._object = (void *)0x800000018230D0E0;
    String.append(_:)(v29);
    _print_unlocked<A, B>(_:_:)();
    v30._object = (void *)0x800000018230D100;
    v30._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 0x3233746E49;
    v31._object = (void *)0xE500000000000000;
    String.append(_:)(v31);
    v32._countAndFlagsBits = 46;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC458], v26);
    goto LABEL_57;
  }
  v100 = 0;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v39 = (void *)v98;
    v40 = type metadata accessor for DecodingError();
    swift_allocError();
    v42 = v41;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v43._countAndFlagsBits = 0xD00000000000001DLL;
    v43._object = (void *)0x800000018230D0E0;
    String.append(_:)(v43);
    v44 = objc_msgSend(v39, sel_description);
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    v48._countAndFlagsBits = (uint64_t)v45;
    v48._object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._object = (void *)0x800000018230D100;
    v49._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 0x3233746E49;
    v50._object = (void *)0xE500000000000000;
    String.append(_:)(v50);
    v51._countAndFlagsBits = 46;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x1E0DEC458], v40);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v62 = v61;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEDBC8], a1, v62);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  char *v15;
  void (*v16)(char *, __n128);
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(char *, uint64_t);
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  __n128 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  unsigned int v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[32];
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;

  v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v83 == 0x6C6C756E24 && *((_QWORD *)&v83 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_7;
    }
    v7 = 1;
    goto LABEL_15;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  if (swift_dynamicCast())
  {
    v7 = 0;
LABEL_15:
    LOBYTE(v87[0]) = v7;
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    v79 = v3;
    v80 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v9 = v88;
    v8 = v89;
    v10 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v90 = &v73;
    v11 = *(_QWORD **)(v9 - 8);
    v12 = v11[8];
    v13 = MEMORY[0x1E0C80A78](v10);
    v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15 = (char *)&v73 - v14;
    v16 = (void (*)(char *, __n128))v11[2];
    v16((char *)&v73 - v14, v13);
    v17 = *(_QWORD *)(v8 + 8);
    v18 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v8) = v18;
    v82 = &v73;
    v19 = MEMORY[0x1E0C80A78](v18);
    ((void (*)(char *, char *, uint64_t, __n128))v16)((char *)&v73 - v14, (char *)&v73 - v14, v9, v19);
    v81 = v11;
    if ((v8 & 1) != 0)
    {
      v78 = (char *)&v73 - v14;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v77 = &v73;
      MEMORY[0x1E0C80A78](AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v22 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v76 = &v73;
      MEMORY[0x1E0C80A78](v22);
      v23 = v81;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
      v24 = (void (*)(char *, uint64_t))v23[1];
      v24((char *)&v73 - v14, v9);
      v24((char *)&v73 - v14, v9);
      if ((AssociatedTypeWitness & 1) != 0)
      {
        v24(v78, v9);
LABEL_38:
        v65 = type metadata accessor for DecodingError();
        swift_allocError();
        v67 = v66;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v68._countAndFlagsBits = 0xD00000000000001DLL;
        v68._object = (void *)0x800000018230D0E0;
        String.append(_:)(v68);
        __swift_project_boxed_opaque_existential_1(v87, v88);
        v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        v70._object = (void *)0x800000018230D100;
        v70._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v70);
        v71._countAndFlagsBits = 0x3233746E4955;
        v71._object = (void *)0xE600000000000000;
        String.append(_:)(v71);
        v72._countAndFlagsBits = 46;
        v72._object = (void *)0xE100000000000000;
        String.append(_:)(v72);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v67, *MEMORY[0x1E0DEC458], v65);
LABEL_39:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        return;
      }
      v15 = v78;
    }
    else
    {
      v24 = (void (*)(char *, uint64_t))v11[1];
      v24((char *)&v73 - v14, v9);
    }
    v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v50 = MEMORY[0x1E0C80A78](v49);
    ((void (*)(char *, char *, uint64_t, __n128))v16)((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v9, v50);
    if (v49 <= 31)
    {
      v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
LABEL_25:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v24(v15, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      v7 = 0;
      goto LABEL_15;
    }
    v77 = &v73;
    LODWORD(v83) = -1;
    v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v51 & 1) != 0)
    {
      if (v52 <= 32)
      {
        v78 = v15;
        v75 = v17;
        v74 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16);
        v53 = swift_getAssociatedTypeWitness();
        v76 = &v73;
        MEMORY[0x1E0C80A78](v53);
        v54 = swift_getAssociatedConformanceWitness();
        v55 = MEMORY[0x186DA5E34](&unk_18206D478, 256, v53, v54);
        v73 = (uint64_t)&v73;
        MEMORY[0x1E0C80A78](v55);
        v56 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        LODWORD(v74) = dispatch thunk of static Comparable.> infix(_:_:)();
        v57 = ((uint64_t (*)(char *, uint64_t))v24)((char *)&v73 - v56, v9);
        LODWORD(v76) = v83;
        v58 = MEMORY[0x1E0C80A78](v57);
        ((void (*)(char *, char *, uint64_t, __n128))v81[4])((char *)&v73 - v56, (char *)&v73 - v56, v9, v58);
        if ((v74 & 1) == 0)
        {
          v24((char *)&v73 - v56, v9);
          v15 = v78;
          goto LABEL_25;
        }
        v59 = dispatch thunk of BinaryInteger._lowWord.getter();
        v24((char *)&v73 - v56, v9);
        v60 = v76 >= v59;
        v15 = v78;
LABEL_36:
        if (v60)
          goto LABEL_25;
        goto LABEL_37;
      }
    }
    else if (v52 <= 32)
    {
      v64 = dispatch thunk of BinaryInteger._lowWord.getter();
      v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      v60 = v83 >= v64;
      goto LABEL_36;
    }
    MEMORY[0x1E0C80A78](v52);
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v63 = dispatch thunk of static Comparable.< infix(_:_:)();
    v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    v24((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    if ((v63 & 1) == 0)
      goto LABEL_25;
LABEL_37:
    v24(v15, v9);
    goto LABEL_38;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v83, (uint64_t)v87);
    v25 = __swift_project_boxed_opaque_existential_1(v87, v88);
    v26 = MEMORY[0x1E0C80A78](v25);
    (*(void (**)(char *, __n128))(v28 + 16))((char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE4(v83) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
      v7 = 0;
      goto LABEL_15;
    }
    v29 = type metadata accessor for DecodingError();
    swift_allocError();
    v31 = v30;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v32._countAndFlagsBits = 0xD00000000000001DLL;
    v32._object = (void *)0x800000018230D0E0;
    String.append(_:)(v32);
    _print_unlocked<A, B>(_:_:)();
    v33._object = (void *)0x800000018230D100;
    v33._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 0x3233746E4955;
    v34._object = (void *)0xE600000000000000;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 46;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x1E0DEC458], v29);
    goto LABEL_39;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  outlined destroy of Any?((uint64_t)&v83, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v87);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v36 = (void *)v83;
    v37 = type metadata accessor for DecodingError();
    swift_allocError();
    v39 = v38;
    v87[0] = 0;
    v87[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v40._countAndFlagsBits = 0xD00000000000001DLL;
    v40._object = (void *)0x800000018230D0E0;
    String.append(_:)(v40);
    v41 = objc_msgSend(v36, sel_description);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

    v45._countAndFlagsBits = (uint64_t)v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._object = (void *)0x800000018230D100;
    v46._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0x3233746E4955;
    v47._object = (void *)0xE600000000000000;
    String.append(_:)(v47);
    v48._countAndFlagsBits = 46;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, *MEMORY[0x1E0DEC458], v37);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v62 = v61;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEE0F8], a1, v62);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

_QWORD *specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(uint64_t a1)
{
  _QWORD *v1;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[32];
  _QWORD v51[3];
  uint64_t v52;

  v1 = (_QWORD *)a1;
  outlined init with copy of Any(a1, (uint64_t)v51);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v47 == 0x6C6C756E24 && *((_QWORD *)&v47 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v51);
  if (swift_dynamicCast())
    return (_QWORD *)v47;
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    v4 = v52;
    v5 = __swift_project_boxed_opaque_existential_1(v51, v52);
    v6 = MEMORY[0x1E0C80A78](v5);
    v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(_BYTE *, __n128))(v9 + 16))(v8, v6);
    v10 = specialized BinaryFloatingPoint.init<A>(exactly:)(v8, v4);
    if ((v11 & 1) != 0)
    {
      v1 = (_QWORD *)type metadata accessor for DecodingError();
      swift_allocError();
      v13 = v12;
      *(_QWORD *)&v47 = 0;
      *((_QWORD *)&v47 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(52);
      v14._countAndFlagsBits = 0xD00000000000001DLL;
      v14._object = (void *)0x800000018230D0E0;
      String.append(_:)(v14);
      _print_unlocked<A, B>(_:_:)();
      v15._object = (void *)0x800000018230D100;
      v15._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v15);
      v16._countAndFlagsBits = 0x656C62756F44;
      v16._object = (void *)0xE600000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = 46;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(v1 - 1) + 104))(v13, *MEMORY[0x1E0DEC458], v1);
LABEL_20:
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      return v1;
    }
    goto LABEL_16;
  }
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    v18 = v52;
    v19 = __swift_project_boxed_opaque_existential_1(v51, v52);
    v20 = MEMORY[0x1E0C80A78](v19);
    v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v23 + 16))(v22, v20);
    v10 = Double.init<A>(exactly:)((uint64_t)v22, v18);
    if ((v24 & 1) != 0)
    {
      v1 = (_QWORD *)type metadata accessor for DecodingError();
      swift_allocError();
      v38 = v37;
      *(_QWORD *)&v47 = 0;
      *((_QWORD *)&v47 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(52);
      v39._countAndFlagsBits = 0xD00000000000001DLL;
      v39._object = (void *)0x800000018230D0E0;
      String.append(_:)(v39);
      __swift_project_boxed_opaque_existential_1(v51, v52);
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._object = (void *)0x800000018230D100;
      v41._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v41);
      v42._countAndFlagsBits = 0x656C62756F44;
      v42._object = (void *)0xE600000000000000;
      String.append(_:)(v42);
      v43._countAndFlagsBits = 46;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(v1 - 1) + 104))(v38, *MEMORY[0x1E0DEC458], v1);
      goto LABEL_20;
    }
LABEL_16:
    v1 = (_QWORD *)v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    return v1;
  }
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v51);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v1 = (_QWORD *)v47;
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    v51[0] = 0;
    v51[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x800000018230D0E0;
    String.append(_:)(v28);
    v29 = objc_msgSend(v1, sel_description);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33._countAndFlagsBits = (uint64_t)v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._object = (void *)0x800000018230D100;
    v34._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 0x656C62756F44;
    v35._object = (void *)0xE600000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = 46;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC458], v25);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v45 = v44;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEB070], v1, v45);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v1;
}

void specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(_QWORD *a1)
{
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[32];
  _QWORD v51[3];
  uint64_t v52;

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v51);
  if (swift_dynamicCast())
  {
    if ((_QWORD)v47 == 0x6C6C756E24 && *((_QWORD *)&v47 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
        goto LABEL_7;
    }
    v4 = 1;
    goto LABEL_14;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v51);
  if (swift_dynamicCast())
  {
    v4 = 0;
LABEL_14:
    LOBYTE(v51[0]) = v4;
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    v5 = v52;
    v6 = __swift_project_boxed_opaque_existential_1(v51, v52);
    v7 = MEMORY[0x1E0C80A78](v6);
    v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(_BYTE *, __n128))(v10 + 16))(v9, v7);
    if ((specialized BinaryFloatingPoint.init<A>(exactly:)(v9, v5) & 0x100000000) == 0)
    {
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      v4 = 0;
      goto LABEL_14;
    }
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    *(_QWORD *)&v47 = 0;
    *((_QWORD *)&v47 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v20._countAndFlagsBits = 0xD00000000000001DLL;
    v20._object = (void *)0x800000018230D0E0;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)();
    v21._object = (void *)0x800000018230D100;
    v21._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 0x74616F6C46;
    v22._object = (void *)0xE500000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = 46;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC458], v17);
    goto LABEL_22;
  }
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)v51);
    v11 = v52;
    v12 = __swift_project_boxed_opaque_existential_1(v51, v52);
    v13 = MEMORY[0x1E0C80A78](v12);
    v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v16 + 16))(v15, v13);
    if ((Float.init<A>(exactly:)((uint64_t)v15, v11) & 0x100000000) == 0)
      goto LABEL_11;
    v37 = type metadata accessor for DecodingError();
    swift_allocError();
    v39 = v38;
    *(_QWORD *)&v47 = 0;
    *((_QWORD *)&v47 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v40._countAndFlagsBits = 0xD00000000000001DLL;
    v40._object = (void *)0x800000018230D0E0;
    String.append(_:)(v40);
    __swift_project_boxed_opaque_existential_1(v51, v52);
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._object = (void *)0x800000018230D100;
    v42._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v42);
    v43._countAndFlagsBits = 0x74616F6C46;
    v43._object = (void *)0xE500000000000000;
    String.append(_:)(v43);
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, *MEMORY[0x1E0DEC458], v37);
LABEL_22:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    return;
  }
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v51);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v24 = (void *)v47;
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    v51[0] = 0;
    v51[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x800000018230D0E0;
    String.append(_:)(v28);
    v29 = objc_msgSend(v24, sel_description);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33._countAndFlagsBits = (uint64_t)v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._object = (void *)0x800000018230D100;
    v34._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 0x74616F6C46;
    v35._object = (void *)0xE500000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = 46;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC458], v25);
    swift_willThrow();

  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v46 = v45;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEB188], a1, v46);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

uint64_t __PlistDictionaryDecoder.unbox(_:as:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v11);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_7;
  if (v9 == 0x6C6C756E24 && v10 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
LABEL_11:
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
    return result;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v11);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v8 = v7;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)((uint64_t)&type metadata for Date, a1, v8);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t Float.init<A>(exactly:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  float v9;
  uint64_t v10;
  float v11;
  unsigned __int8 v12;
  int v13;

  if (dispatch thunk of BinaryInteger.bitWidth.getter() > 64)
  {
    lazy protocol witness table accessor for type Float and conformance Float();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v4 = static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    if ((v4 & 1) != 0)
    {
      LODWORD(v5) = v13;
LABEL_13:
      v12 = 0;
      v5 = v5;
      return v5 | ((unint64_t)v12 << 32);
    }
LABEL_14:
    v5 = 0;
    v12 = 1;
    return v5 | ((unint64_t)v12 << 32);
  }
  v6 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v7 = dispatch thunk of BinaryInteger._lowWord.getter();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if ((v6 & 1) != 0)
  {
    v9 = (float)v7;
    if ((float)v7 >= 9.2234e18)
      goto LABEL_14;
    *(float *)&v5 = (float)v7;
    if ((~LODWORD(v9) & 0x7F800000) != 0)
    {
      if (v9 > -9.2234e18)
      {
        v10 = (uint64_t)v9;
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v11 = (float)(unint64_t)v7;
    if ((float)(unint64_t)v7 >= 1.8447e19)
      goto LABEL_14;
    *(float *)&v5 = (float)(unint64_t)v7;
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      v10 = (unint64_t)v11;
LABEL_12:
      if (v7 == v10)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for __PlistDictionaryDecoder();
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized BinaryFloatingPoint.init<A>(exactly:)(_BYTE *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(_BYTE *, uint64_t);
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  int v65;
  void (*v67)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v68;
  _BYTE *v69;
  int v70;
  void (*v72)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v73;
  _BYTE *v74;
  int v75;
  float v76;
  void (*v77)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v78;
  _BYTE *v79;
  char v80;
  uint64_t v81;
  _BYTE *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  __int16 v94;
  _BYTE *v95;
  void (*v96)(_BYTE *, uint64_t);
  uint64_t v97;
  char v98;
  _BYTE *v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v106;
  _BYTE *v107;
  void (*v108)(_BYTE *, uint64_t);
  uint64_t v109;
  __int16 v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _BYTE *v115;
  void (*v116)(_BYTE *, uint64_t);
  uint64_t v117;
  unsigned __int8 v118;
  _BYTE *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t AssociatedConformanceWitness;
  _BYTE *v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  char v131;
  void (*v132)(_BYTE *, uint64_t);
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  char v137;
  void (*v138)(_BYTE *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  char v146;
  uint64_t v147;
  char v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  char v152;
  _BYTE *v153;
  uint64_t v154;
  void (*v155)(_BYTE *, uint64_t);
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  BOOL v159;
  _BYTE *v160;
  void (*v161)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  char v169;
  void (*v170)(_BYTE *, uint64_t);
  _BYTE *v171;
  _BYTE *v172;
  int64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  _BYTE *v177;
  _BYTE *v178;
  char v179;
  _BYTE *v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  _BYTE *v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE v199[4];
  int v200;
  _BYTE *v201;
  _BYTE *v202;
  _BYTE *v203;
  _BYTE *v204;
  _BYTE *v205;
  _BYTE *v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  _BYTE *v214;
  _BYTE *v215;
  _BYTE *v216;
  _BYTE *v217;
  _BYTE *v218;
  _BYTE *v219;
  _BYTE *v220;
  _BYTE *v221;
  _BYTE *v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE *v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE *v228;
  void (*v229)(_BYTE *, uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  _BYTE *v234;
  uint64_t v235;
  int64_t v236;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v226 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v227 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v225 = &v199[-v5];
  v6 = swift_getAssociatedTypeWitness();
  v223 = *(_QWORD *)(v6 - 8);
  v224 = v6;
  MEMORY[0x1E0C80A78](v6);
  v222 = &v199[-v7];
  swift_getAssociatedTypeWitness();
  v230 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v213 = *(_QWORD *)(*(_QWORD *)(v230 + 24) + 16);
  v209 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v209);
  v208 = &v199[-v8];
  v233 = swift_checkMetadataState();
  v231 = *(_QWORD *)(v233 - 8);
  MEMORY[0x1E0C80A78](v233);
  v215 = &v199[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v214 = &v199[-v11];
  MEMORY[0x1E0C80A78](v12);
  v202 = &v199[-v13];
  MEMORY[0x1E0C80A78](v14);
  v204 = &v199[-v15];
  MEMORY[0x1E0C80A78](v16);
  v212 = &v199[-v17];
  MEMORY[0x1E0C80A78](v18);
  v221 = &v199[-v19];
  MEMORY[0x1E0C80A78](v20);
  v203 = &v199[-v21];
  MEMORY[0x1E0C80A78](v22);
  v205 = &v199[-v23];
  MEMORY[0x1E0C80A78](v24);
  v206 = &v199[-v25];
  MEMORY[0x1E0C80A78](v26);
  v207 = &v199[-v27];
  MEMORY[0x1E0C80A78](v28);
  v228 = &v199[-v29];
  MEMORY[0x1E0C80A78](v30);
  v210 = &v199[-v31];
  MEMORY[0x1E0C80A78](v32);
  v232 = &v199[-v33];
  v34 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v35);
  v220 = &v199[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v37);
  v217 = &v199[-v38];
  MEMORY[0x1E0C80A78](v39);
  v219 = &v199[-v40];
  MEMORY[0x1E0C80A78](v41);
  v216 = &v199[-v42];
  MEMORY[0x1E0C80A78](v43);
  v218 = &v199[-v44];
  MEMORY[0x1E0C80A78](v45);
  v47 = &v199[-v46];
  MEMORY[0x1E0C80A78](v48);
  v50 = &v199[-v49];
  MEMORY[0x1E0C80A78](v51);
  v53 = &v199[-v52];
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(a1, a2);
    return 0;
  }
  v211 = v34;
  v234 = a1;
  if (dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter() >= 12)
  {
    v55 = v211;
    v229 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v211 + 16);
    v229(v53, (uint64_t)v234, a2);
    v56 = v233;
LABEL_7:
    v58 = dispatch thunk of FloatingPoint.isFinite.getter();
    goto LABEL_9;
  }
  v57 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  v55 = v211;
  v229 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v211 + 16);
  v229(v53, (uint64_t)v234, a2);
  v56 = v233;
  if (v57 >= 53)
    goto LABEL_7;
  v58 = 0;
LABEL_9:
  v59 = *(void (**)(_BYTE *, uint64_t))(v55 + 8);
  v59(v53, a2);
  v229(v50, (uint64_t)v234, a2);
  if ((v58 & 1) == 0)
  {
    v59(v50, a2);
    goto LABEL_15;
  }
  v60 = dispatch thunk of FloatingPoint.isZero.getter();
  v59(v50, a2);
  if ((v60 & 1) != 0)
    goto LABEL_15;
  v201 = v47;
  dispatch thunk of FloatingPoint.exponent.getter();
  v61 = Double.exponent.getter();
  v236 = v61;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_35:
      v85 = dispatch thunk of BinaryInteger._lowWord.getter();
      v84 = v231;
      if (v85 >= v61)
        goto LABEL_36;
      goto LABEL_59;
    }
LABEL_31:
    lazy protocol witness table accessor for type Int and conformance Int();
    v82 = v228;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v83 = dispatch thunk of static Comparable.< infix(_:_:)();
    v84 = v231;
    (*(void (**)(_BYTE *, uint64_t))(v231 + 8))(v82, v56);
    if ((v83 & 1) == 0)
      goto LABEL_36;
    goto LABEL_59;
  }
  v80 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v81 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v80 & 1) == 0)
  {
    if (v81 < 64)
      goto LABEL_35;
    v128 = v231;
    v129 = v210;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v231 + 16))(v210, v232, v56);
    v235 = v61;
    if (v61 <= 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v128 + 8))(v129, v56);
    }
    else
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v130 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v131 = dispatch thunk of static Comparable.< infix(_:_:)();
      v132 = *(void (**)(_BYTE *, uint64_t))(v231 + 8);
      v133 = v130;
      v84 = v231;
      v132(v133, v56);
      v132(v210, v56);
      if ((v131 & 1) != 0)
        goto LABEL_59;
    }
    goto LABEL_36;
  }
  if (v81 > 64)
    goto LABEL_31;
  v122 = v209;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, v122, AssociatedConformanceWitness);
  v124 = v228;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v125 = v232;
  v200 = dispatch thunk of static Comparable.< infix(_:_:)();
  v126 = v124;
  v84 = v231;
  v210 = *(_BYTE **)(v231 + 8);
  ((void (*)(_BYTE *, uint64_t))v210)(v126, v56);
  v127 = v207;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 16))(v207, v125, v56);
  if ((v200 & 1) != 0)
  {
    ((void (*)(_BYTE *, uint64_t))v210)(v127, v56);
    goto LABEL_59;
  }
  v141 = v236;
  v142 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(_BYTE *, uint64_t))v210)(v127, v56);
  v159 = v142 < v141;
  v84 = v231;
  if (!v159)
  {
LABEL_36:
    v86 = Double.exponent.getter();
    v236 = v86;
    v87 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v88 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v87 & 1) != 0)
    {
      if (v88 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        v89 = v228;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v90 = v232;
LABEL_54:
        v137 = dispatch thunk of static Comparable.< infix(_:_:)();
        v138 = *(void (**)(_BYTE *, uint64_t))(v231 + 8);
        v138(v89, v56);
        v138(v90, v56);
        v93 = v234;
        if ((v137 & 1) == 0)
        {
LABEL_55:
          v139 = dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
          v140 = Double.significandWidth.getter();
          v47 = v201;
          if (v140 < v139)
            goto LABEL_86;
LABEL_15:
          v62 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
          v63 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
          if (v62 == 11)
          {
            if (v63 == 52)
            {
              v69 = v234;
              v229(v47, (uint64_t)v234, a2);
              v70 = swift_dynamicCast();
              _D8 = *(double *)&v236;
              v72 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32);
              v73 = v218;
              v72(v218, (uint64_t)v69, a2);
              if (v70)
              {
                v59(v73, a2);
              }
              else
              {
                v106 = dispatch thunk of FloatingPoint.sign.getter();
                v107 = v222;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v108 = v59;
                v109 = v224;
                swift_getAssociatedConformanceWitness();
                v110 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v223 + 8))(v107, v109);
                v111 = v225;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v108(v73, a2);
                v112 = v227;
                swift_getAssociatedConformanceWitness();
                v113 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v226 + 8))(v111, v112);
                *(_QWORD *)&_D8 = (v106 << 63) | ((unint64_t)(v110 & 0x7FF) << 52) | v113 & 0xFFFFFFFFFFFFFLL;
              }
              return *(_QWORD *)&_D8;
            }
          }
          else if (v62 == 8)
          {
            if (v63 == 23)
            {
              v74 = v234;
              v229(v216, (uint64_t)v234, a2);
              v75 = swift_dynamicCast();
              v76 = *(float *)&v236;
              v77 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32);
              v78 = v219;
              v77(v219, (uint64_t)v74, a2);
              if (v75)
              {
                v59(v78, a2);
                _D8 = v76;
              }
              else
              {
                v114 = dispatch thunk of FloatingPoint.sign.getter();
                v115 = v222;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v116 = v59;
                v117 = v224;
                swift_getAssociatedConformanceWitness();
                v118 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v223 + 8))(v115, v117);
                v119 = v225;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v116(v78, a2);
                v120 = v227;
                swift_getAssociatedConformanceWitness();
                v121 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v226 + 8))(v119, v120);
                _D8 = COERCE_FLOAT((v114 << 31) | (v118 << 23) | v121 & 0x7FFFFF);
              }
              return *(_QWORD *)&_D8;
            }
          }
          else if (v62 == 5 && v63 == 10)
          {
            v64 = v234;
            v229(v217, (uint64_t)v234, a2);
            v65 = swift_dynamicCast();
            _H8 = v236;
            v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 32);
            v68 = v220;
            v67(v220, (uint64_t)v64, a2);
            if (v65)
            {
              v59(v68, a2);
            }
            else
            {
              v94 = dispatch thunk of FloatingPoint.sign.getter();
              v95 = v222;
              dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
              v96 = v59;
              v97 = v224;
              swift_getAssociatedConformanceWitness();
              v98 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v223 + 8))(v95, v97);
              v99 = v225;
              dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
              v96(v68, a2);
              v100 = v227;
              swift_getAssociatedConformanceWitness();
              v101 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v226 + 8))(v99, v100);
              _H8 = (v94 << 15) | ((v98 & 0x1F) << 10) | v101 & 0x3FF;
            }
            __asm { FCVT            D8, H8 }
            return *(_QWORD *)&_D8;
          }
          lazy protocol witness table accessor for type Double and conformance Double();
          v79 = v234;
          static BinaryFloatingPoint._convert<A>(from:)();
          v59(v79, a2);
          _D8 = *(double *)&v236;
          return *(_QWORD *)&_D8;
        }
LABEL_86:
        v171 = v93;
LABEL_120:
        v59(v171, a2);
        return 0;
      }
    }
    else if (v88 >= 64)
    {
      v235 = v86;
      v134 = v231;
      v135 = v206;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v231 + 32))(v206, v232, v56);
      if (v86 < 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v134 + 8))(v135, v56);
        v93 = v234;
        goto LABEL_86;
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      v136 = v135;
      v89 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v90 = v136;
      goto LABEL_54;
    }
    v91 = v232;
    v92 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(_BYTE *, uint64_t))(v231 + 8))(v91, v56);
    v93 = v234;
    if (v236 >= v92)
      goto LABEL_55;
    goto LABEL_86;
  }
LABEL_59:
  v143 = Double.exponent.getter();
  v236 = v143;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v144 = v232;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v145 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_65;
    }
    goto LABEL_70;
  }
  v146 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v147 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v146 & 1) == 0)
  {
    if (v147 >= 64)
    {
      v167 = v205;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 16))(v205, v232, v56);
      v235 = v143;
      if (v143 <= 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v167, v56);
        v144 = v232;
      }
      else
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        v168 = v228;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v169 = dispatch thunk of static Comparable.< infix(_:_:)();
        v170 = *(void (**)(_BYTE *, uint64_t))(v84 + 8);
        v170(v168, v56);
        v170(v205, v56);
        v144 = v232;
        if ((v169 & 1) != 0)
          goto LABEL_89;
      }
      goto LABEL_71;
    }
    v144 = v232;
LABEL_70:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= v143)
      goto LABEL_71;
    goto LABEL_89;
  }
  if (v147 <= 64)
  {
    v162 = v209;
    v163 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, v162, v163);
    v164 = v228;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v165 = v232;
    LOBYTE(v162) = dispatch thunk of static Comparable.< infix(_:_:)();
    v210 = *(_BYTE **)(v84 + 8);
    ((void (*)(_BYTE *, uint64_t))v210)(v164, v56);
    v166 = v203;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 16))(v203, v165, v56);
    if ((v162 & 1) != 0)
    {
      ((void (*)(_BYTE *, uint64_t))v210)(v166, v56);
      v144 = v232;
    }
    else
    {
      v172 = v166;
      v173 = v236;
      v174 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(_BYTE *, uint64_t))v210)(v172, v56);
      v159 = v174 < v173;
      v144 = v232;
      if (!v159)
        goto LABEL_71;
    }
LABEL_89:
    v59(v234, a2);
    (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v144, v56);
    return 0;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  v145 = v228;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v144 = v232;
LABEL_65:
  v148 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v145, v56);
  if ((v148 & 1) != 0)
    goto LABEL_89;
LABEL_71:
  v210 = v59;
  v207 = (_BYTE *)dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
  v149 = *(_BYTE **)(v84 + 32);
  v150 = v84;
  v151 = v221;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v149)(v221, v144, v56);
  v152 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v153 = v212;
  v232 = *(_BYTE **)(v150 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v232)(v212, v151, v56);
  if ((v152 & 1) == 0)
  {
    v155 = *(void (**)(_BYTE *, uint64_t))(v150 + 8);
    v155(v153, v56);
    goto LABEL_77;
  }
  v206 = v149;
  v154 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v155 = *(void (**)(_BYTE *, uint64_t))(v150 + 8);
  v155(v153, v56);
  v156 = v214;
  if (v154 < 65)
  {
    v160 = v221;
    v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
    goto LABEL_104;
  }
  v157 = v204;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v232)(v204, v221, v56);
  v236 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      v158 = dispatch thunk of BinaryInteger._lowWord.getter();
      result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v157, v56);
      v159 = v158 < v236;
      v160 = v221;
      goto LABEL_103;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    v180 = v228;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v179 = dispatch thunk of static Comparable.< infix(_:_:)();
    v155(v180, v56);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v157, v56);
    v160 = v221;
LABEL_95:
    v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
    if ((v179 & 1) != 0)
      goto LABEL_123;
LABEL_104:
    v189 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v161(v156, v160, v56);
    if (v189 <= 64)
    {
      v192 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v155(v156, v56);
      if (v192 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
        goto LABEL_117;
    }
    else
    {
      v155(v156, v56);
    }
    v156 = v215;
    v161(v215, v160, v56);
    v236 = 0x7FFFFFFFFFFFFFFFLL;
    v190 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v191 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v190 & 1) != 0)
    {
      if (v191 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        while (1)
        {
          v195 = v228;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v156 = v215;
          v196 = dispatch thunk of static Comparable.< infix(_:_:)();
          v155(v195, v56);
          v155(v156, v56);
          if ((v196 & 1) == 0)
            break;
LABEL_114:
          __break(1u);
LABEL_115:
          v235 = 0x7FFFFFFFFFFFFFFFLL;
          lazy protocol witness table accessor for type Int and conformance Int();
        }
        goto LABEL_117;
      }
    }
    else if (v191 >= 64)
    {
      goto LABEL_115;
    }
    v193 = v215;
    v194 = dispatch thunk of BinaryInteger._lowWord.getter();
    v155(v193, v56);
    if (v236 < v194)
      goto LABEL_114;
LABEL_117:
    v197 = dispatch thunk of BinaryInteger._lowWord.getter();
    v155(v160, v56);
    v198 = Double.exponent.getter();
    if (!__OFSUB__(v197, v198))
    {
      v59 = (void (*)(_BYTE *, uint64_t))v210;
      v55 = v211;
      v47 = v201;
      if (v197 - v198 < (uint64_t)v207)
      {
        v171 = v234;
        goto LABEL_120;
      }
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_122;
  }
  v175 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v176 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v175 & 1) == 0)
  {
    if (v176 < 64)
    {
      v181 = v204;
      v56 = v233;
      v182 = dispatch thunk of BinaryInteger._lowWord.getter();
      result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v181, v56);
      v159 = v182 < v236;
      goto LABEL_102;
    }
    v56 = v233;
    v155(v204, v233);
LABEL_77:
    v160 = v221;
    v156 = v214;
    v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
    goto LABEL_104;
  }
  if (v176 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v177 = v228;
    v56 = v233;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v178 = v204;
    v179 = dispatch thunk of static Comparable.< infix(_:_:)();
    v155(v177, v56);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v178, v56);
    v160 = v221;
    v156 = v214;
    goto LABEL_95;
  }
  v56 = v233;
  v183 = v209;
  v184 = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, v183, v184);
  v185 = v228;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v186 = v204;
  LOBYTE(v183) = dispatch thunk of static Comparable.< infix(_:_:)();
  v155(v185, v56);
  v156 = v202;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v206)(v202, v186, v56);
  if ((v183 & 1) != 0)
  {
LABEL_122:
    result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v156, v56);
    goto LABEL_123;
  }
  v187 = v236;
  v188 = dispatch thunk of BinaryInteger._lowWord.getter();
  result = ((uint64_t (*)(_BYTE *, uint64_t))v155)(v156, v56);
  v159 = v188 < v187;
LABEL_102:
  v160 = v221;
  v156 = v214;
LABEL_103:
  v161 = (void (*)(_BYTE *, _BYTE *, uint64_t))v232;
  if (!v159)
    goto LABEL_104;
LABEL_123:
  __break(1u);
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(_BYTE *, uint64_t);
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  int v66;
  void (*v68)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v69;
  _BYTE *v70;
  int v71;
  double v72;
  void (*v73)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v74;
  _BYTE *v76;
  int v77;
  void (*v78)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v79;
  _BYTE *v80;
  unint64_t result;
  char v82;
  uint64_t v83;
  _BYTE *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  _BYTE *v95;
  __int16 v96;
  _BYTE *v97;
  void (*v98)(_BYTE *, uint64_t);
  uint64_t v99;
  char v100;
  _BYTE *v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v108;
  _BYTE *v109;
  void (*v110)(_BYTE *, uint64_t);
  uint64_t v111;
  __int16 v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  _BYTE *v117;
  void (*v118)(_BYTE *, uint64_t);
  uint64_t v119;
  unsigned __int8 v120;
  _BYTE *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t AssociatedConformanceWitness;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  char v133;
  void (*v134)(_BYTE *, uint64_t);
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  char v139;
  void (*v140)(_BYTE *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;
  char v150;
  _BYTE *v151;
  uint64_t v152;
  _BYTE *v153;
  char v154;
  _BYTE *v155;
  uint64_t v156;
  void (*v157)(_BYTE *, uint64_t);
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  BOOL v161;
  _BYTE *v162;
  void (*v163)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  _BYTE *v170;
  char v171;
  void (*v172)(_BYTE *, uint64_t);
  _BYTE *v173;
  _BYTE *v174;
  int64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  char v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  int64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  _BYTE *v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE v201[4];
  int v202;
  _BYTE *v203;
  _BYTE *v204;
  _BYTE *v205;
  _BYTE *v206;
  _BYTE *v207;
  _BYTE *v208;
  _BYTE *v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  _BYTE *v216;
  _BYTE *v217;
  _BYTE *v218;
  _BYTE *v219;
  _BYTE *v220;
  _BYTE *v221;
  _BYTE *v222;
  _BYTE *v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  void (*v231)(_BYTE *, uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233;
  _BYTE *v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  int64_t v238;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v228 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v229 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v227 = &v201[-v5];
  v6 = swift_getAssociatedTypeWitness();
  v225 = *(_QWORD *)(v6 - 8);
  v226 = v6;
  MEMORY[0x1E0C80A78](v6);
  v224 = &v201[-v7];
  swift_getAssociatedTypeWitness();
  v232 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v215 = *(_QWORD *)(*(_QWORD *)(v232 + 24) + 16);
  v211 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v211);
  v210 = &v201[-v8];
  v235 = swift_checkMetadataState();
  v233 = *(_QWORD *)(v235 - 8);
  MEMORY[0x1E0C80A78](v235);
  v217 = &v201[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v216 = &v201[-v11];
  MEMORY[0x1E0C80A78](v12);
  v204 = &v201[-v13];
  MEMORY[0x1E0C80A78](v14);
  v206 = &v201[-v15];
  MEMORY[0x1E0C80A78](v16);
  v214 = &v201[-v17];
  MEMORY[0x1E0C80A78](v18);
  v223 = &v201[-v19];
  MEMORY[0x1E0C80A78](v20);
  v205 = &v201[-v21];
  MEMORY[0x1E0C80A78](v22);
  v207 = &v201[-v23];
  MEMORY[0x1E0C80A78](v24);
  v208 = &v201[-v25];
  MEMORY[0x1E0C80A78](v26);
  v209 = &v201[-v27];
  MEMORY[0x1E0C80A78](v28);
  v230 = &v201[-v29];
  MEMORY[0x1E0C80A78](v30);
  v212 = &v201[-v31];
  MEMORY[0x1E0C80A78](v32);
  v234 = &v201[-v33];
  v34 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v35);
  v222 = &v201[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v37);
  v219 = &v201[-v38];
  MEMORY[0x1E0C80A78](v39);
  v221 = &v201[-v40];
  MEMORY[0x1E0C80A78](v41);
  v218 = &v201[-v42];
  MEMORY[0x1E0C80A78](v43);
  v220 = &v201[-v44];
  MEMORY[0x1E0C80A78](v45);
  v47 = &v201[-v46];
  MEMORY[0x1E0C80A78](v48);
  v50 = &v201[-v49];
  MEMORY[0x1E0C80A78](v51);
  v53 = &v201[-v52];
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(a1, a2);
LABEL_3:
    v54 = 0;
    v55 = 1;
LABEL_29:
    LOBYTE(v238) = v55;
    return v54 | ((unint64_t)v55 << 32);
  }
  v213 = v34;
  v236 = a1;
  if (dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter() >= 9)
  {
    v56 = v213;
    v231 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v213 + 16);
    v231(v53, (uint64_t)v236, a2);
    v57 = v235;
LABEL_7:
    v59 = dispatch thunk of FloatingPoint.isFinite.getter();
    goto LABEL_9;
  }
  v58 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  v56 = v213;
  v231 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v213 + 16);
  v231(v53, (uint64_t)v236, a2);
  v57 = v235;
  if (v58 >= 24)
    goto LABEL_7;
  v59 = 0;
LABEL_9:
  v60 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v60(v53, a2);
  v231(v50, (uint64_t)v236, a2);
  if ((v59 & 1) == 0)
  {
    v60(v50, a2);
    goto LABEL_15;
  }
  v61 = dispatch thunk of FloatingPoint.isZero.getter();
  v60(v50, a2);
  if ((v61 & 1) != 0)
    goto LABEL_15;
  v203 = v47;
  dispatch thunk of FloatingPoint.exponent.getter();
  v62 = Float.exponent.getter();
  v238 = v62;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_36:
      v87 = dispatch thunk of BinaryInteger._lowWord.getter();
      v86 = v233;
      if (v87 >= v62)
        goto LABEL_37;
      goto LABEL_60;
    }
LABEL_32:
    lazy protocol witness table accessor for type Int and conformance Int();
    v84 = v230;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v85 = dispatch thunk of static Comparable.< infix(_:_:)();
    v86 = v233;
    (*(void (**)(_BYTE *, uint64_t))(v233 + 8))(v84, v57);
    if ((v85 & 1) == 0)
      goto LABEL_37;
    goto LABEL_60;
  }
  v82 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v83 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v82 & 1) == 0)
  {
    if (v83 < 64)
      goto LABEL_36;
    v130 = v233;
    v131 = v212;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v233 + 16))(v212, v234, v57);
    v237 = v62;
    if (v62 <= 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v131, v57);
    }
    else
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v132 = v230;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v133 = dispatch thunk of static Comparable.< infix(_:_:)();
      v134 = *(void (**)(_BYTE *, uint64_t))(v233 + 8);
      v135 = v132;
      v86 = v233;
      v134(v135, v57);
      v134(v212, v57);
      if ((v133 & 1) != 0)
        goto LABEL_60;
    }
    goto LABEL_37;
  }
  if (v83 > 64)
    goto LABEL_32;
  v124 = v211;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, v124, AssociatedConformanceWitness);
  v126 = v230;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v127 = v234;
  v202 = dispatch thunk of static Comparable.< infix(_:_:)();
  v128 = v126;
  v86 = v233;
  v212 = *(_BYTE **)(v233 + 8);
  ((void (*)(_BYTE *, uint64_t))v212)(v128, v57);
  v129 = v209;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v86 + 16))(v209, v127, v57);
  if ((v202 & 1) != 0)
  {
    ((void (*)(_BYTE *, uint64_t))v212)(v129, v57);
    goto LABEL_60;
  }
  v143 = v238;
  v144 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(_BYTE *, uint64_t))v212)(v129, v57);
  v161 = v144 < v143;
  v86 = v233;
  if (!v161)
  {
LABEL_37:
    v88 = Float.exponent.getter();
    v238 = v88;
    v89 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v90 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v89 & 1) != 0)
    {
      if (v90 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        v91 = v230;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v92 = v234;
LABEL_55:
        v139 = dispatch thunk of static Comparable.< infix(_:_:)();
        v140 = *(void (**)(_BYTE *, uint64_t))(v233 + 8);
        v140(v91, v57);
        v140(v92, v57);
        v95 = v236;
        if ((v139 & 1) == 0)
        {
LABEL_56:
          v141 = dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
          v142 = Float.significandWidth.getter();
          v47 = v203;
          if (v142 < v141)
            goto LABEL_87;
LABEL_15:
          v63 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
          v64 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
          if (v63 == 11)
          {
            if (v64 == 52)
            {
              v70 = v236;
              v231(v47, (uint64_t)v236, a2);
              v71 = swift_dynamicCast();
              v72 = *(double *)&v238;
              v73 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32);
              v74 = v220;
              v73(v220, (uint64_t)v70, a2);
              if (v71)
              {
                v60(v74, a2);
                *(float *)&_S8 = v72;
              }
              else
              {
                v108 = dispatch thunk of FloatingPoint.sign.getter();
                v109 = v224;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v110 = v60;
                v111 = v226;
                swift_getAssociatedConformanceWitness();
                v112 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v225 + 8))(v109, v111);
                v113 = v227;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v110(v74, a2);
                v114 = v229;
                swift_getAssociatedConformanceWitness();
                v115 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v228 + 8))(v113, v114);
                *(float *)&_S8 = COERCE_DOUBLE((v108 << 63) | ((unint64_t)(v112 & 0x7FF) << 52) | v115 & 0xFFFFFFFFFFFFFLL);
              }
              goto LABEL_28;
            }
          }
          else if (v63 == 8)
          {
            if (v64 == 23)
            {
              v76 = v236;
              v231(v218, (uint64_t)v236, a2);
              v77 = swift_dynamicCast();
              _S8 = v238;
              v78 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32);
              v79 = v221;
              v78(v221, (uint64_t)v76, a2);
              if (v77)
              {
                v60(v79, a2);
              }
              else
              {
                v116 = dispatch thunk of FloatingPoint.sign.getter();
                v117 = v224;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v118 = v60;
                v119 = v226;
                swift_getAssociatedConformanceWitness();
                v120 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v225 + 8))(v117, v119);
                v121 = v227;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v118(v79, a2);
                v122 = v229;
                swift_getAssociatedConformanceWitness();
                v123 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v228 + 8))(v121, v122);
                _S8 = (v116 << 31) | (v120 << 23) | v123 & 0x7FFFFF;
              }
              goto LABEL_28;
            }
          }
          else if (v63 == 5 && v64 == 10)
          {
            v65 = v236;
            v231(v219, (uint64_t)v236, a2);
            v66 = swift_dynamicCast();
            _H8 = v238;
            v68 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32);
            v69 = v222;
            v68(v222, (uint64_t)v65, a2);
            if (v66)
            {
              v60(v69, a2);
            }
            else
            {
              v96 = dispatch thunk of FloatingPoint.sign.getter();
              v97 = v224;
              dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
              v98 = v60;
              v99 = v226;
              swift_getAssociatedConformanceWitness();
              v100 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v225 + 8))(v97, v99);
              v101 = v227;
              dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
              v98(v69, a2);
              v102 = v229;
              swift_getAssociatedConformanceWitness();
              v103 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v228 + 8))(v101, v102);
              _H8 = (v96 << 15) | ((v100 & 0x1F) << 10) | v103 & 0x3FF;
            }
            __asm { FCVT            S8, H8 }
            goto LABEL_28;
          }
          lazy protocol witness table accessor for type Float and conformance Float();
          v80 = v236;
          static BinaryFloatingPoint._convert<A>(from:)();
          v60(v80, a2);
          _S8 = v238;
LABEL_28:
          v55 = 0;
          v54 = _S8;
          goto LABEL_29;
        }
LABEL_87:
        v173 = v95;
LABEL_121:
        v60(v173, a2);
        goto LABEL_3;
      }
    }
    else if (v90 >= 64)
    {
      v237 = v88;
      v136 = v233;
      v137 = v208;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v233 + 32))(v208, v234, v57);
      if (v88 < 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v136 + 8))(v137, v57);
        v95 = v236;
        goto LABEL_87;
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      v138 = v137;
      v91 = v230;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v92 = v138;
      goto LABEL_55;
    }
    v93 = v234;
    v94 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(_BYTE *, uint64_t))(v233 + 8))(v93, v57);
    v95 = v236;
    if (v238 >= v94)
      goto LABEL_56;
    goto LABEL_87;
  }
LABEL_60:
  v145 = Float.exponent.getter();
  v238 = v145;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v146 = v234;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v147 = v230;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_66;
    }
    goto LABEL_71;
  }
  v148 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v149 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v148 & 1) == 0)
  {
    if (v149 >= 64)
    {
      v169 = v207;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v86 + 16))(v207, v234, v57);
      v237 = v145;
      if (v145 <= 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v169, v57);
        v146 = v234;
      }
      else
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        v170 = v230;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v171 = dispatch thunk of static Comparable.< infix(_:_:)();
        v172 = *(void (**)(_BYTE *, uint64_t))(v86 + 8);
        v172(v170, v57);
        v172(v207, v57);
        v146 = v234;
        if ((v171 & 1) != 0)
          goto LABEL_90;
      }
      goto LABEL_72;
    }
    v146 = v234;
LABEL_71:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= v145)
      goto LABEL_72;
    goto LABEL_90;
  }
  if (v149 <= 64)
  {
    v164 = v211;
    v165 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, v164, v165);
    v166 = v230;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v167 = v234;
    LOBYTE(v164) = dispatch thunk of static Comparable.< infix(_:_:)();
    v212 = *(_BYTE **)(v86 + 8);
    ((void (*)(_BYTE *, uint64_t))v212)(v166, v57);
    v168 = v205;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v86 + 16))(v205, v167, v57);
    if ((v164 & 1) != 0)
    {
      ((void (*)(_BYTE *, uint64_t))v212)(v168, v57);
      v146 = v234;
    }
    else
    {
      v174 = v168;
      v175 = v238;
      v176 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(_BYTE *, uint64_t))v212)(v174, v57);
      v161 = v176 < v175;
      v146 = v234;
      if (!v161)
        goto LABEL_72;
    }
LABEL_90:
    v60(v236, a2);
    (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v146, v57);
    goto LABEL_3;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  v147 = v230;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v146 = v234;
LABEL_66:
  v150 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v147, v57);
  if ((v150 & 1) != 0)
    goto LABEL_90;
LABEL_72:
  v212 = v60;
  v209 = (_BYTE *)dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
  v151 = *(_BYTE **)(v86 + 32);
  v152 = v86;
  v153 = v223;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v151)(v223, v146, v57);
  v154 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v155 = v214;
  v234 = *(_BYTE **)(v152 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v234)(v214, v153, v57);
  if ((v154 & 1) == 0)
  {
    v157 = *(void (**)(_BYTE *, uint64_t))(v152 + 8);
    v157(v155, v57);
    goto LABEL_78;
  }
  v208 = v151;
  v156 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v157 = *(void (**)(_BYTE *, uint64_t))(v152 + 8);
  v157(v155, v57);
  v158 = v216;
  if (v156 < 65)
  {
    v162 = v223;
    v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
    goto LABEL_105;
  }
  v159 = v206;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v234)(v206, v223, v57);
  v238 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      v160 = dispatch thunk of BinaryInteger._lowWord.getter();
      result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v159, v57);
      v161 = v160 < v238;
      v162 = v223;
      goto LABEL_104;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    v182 = v230;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v181 = dispatch thunk of static Comparable.< infix(_:_:)();
    v157(v182, v57);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v159, v57);
    v162 = v223;
LABEL_96:
    v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
    if ((v181 & 1) != 0)
      goto LABEL_124;
LABEL_105:
    v191 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v163(v158, v162, v57);
    if (v191 <= 64)
    {
      v194 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v157(v158, v57);
      if (v194 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
        goto LABEL_118;
    }
    else
    {
      v157(v158, v57);
    }
    v158 = v217;
    v163(v217, v162, v57);
    v238 = 0x7FFFFFFFFFFFFFFFLL;
    v192 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v193 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v192 & 1) != 0)
    {
      if (v193 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        while (1)
        {
          v197 = v230;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v158 = v217;
          v198 = dispatch thunk of static Comparable.< infix(_:_:)();
          v157(v197, v57);
          v157(v158, v57);
          if ((v198 & 1) == 0)
            break;
LABEL_115:
          __break(1u);
LABEL_116:
          v237 = 0x7FFFFFFFFFFFFFFFLL;
          lazy protocol witness table accessor for type Int and conformance Int();
        }
        goto LABEL_118;
      }
    }
    else if (v193 >= 64)
    {
      goto LABEL_116;
    }
    v195 = v217;
    v196 = dispatch thunk of BinaryInteger._lowWord.getter();
    v157(v195, v57);
    if (v238 < v196)
      goto LABEL_115;
LABEL_118:
    v199 = dispatch thunk of BinaryInteger._lowWord.getter();
    v157(v162, v57);
    v200 = Float.exponent.getter();
    if (!__OFSUB__(v199, v200))
    {
      v60 = (void (*)(_BYTE *, uint64_t))v212;
      v56 = v213;
      v47 = v203;
      if (v199 - v200 < (uint64_t)v209)
      {
        v173 = v236;
        goto LABEL_121;
      }
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_123;
  }
  v177 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v178 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v177 & 1) == 0)
  {
    if (v178 < 64)
    {
      v183 = v206;
      v57 = v235;
      v184 = dispatch thunk of BinaryInteger._lowWord.getter();
      result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v183, v57);
      v161 = v184 < v238;
      goto LABEL_103;
    }
    v57 = v235;
    v157(v206, v235);
LABEL_78:
    v162 = v223;
    v158 = v216;
    v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
    goto LABEL_105;
  }
  if (v178 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v179 = v230;
    v57 = v235;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v180 = v206;
    v181 = dispatch thunk of static Comparable.< infix(_:_:)();
    v157(v179, v57);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v180, v57);
    v162 = v223;
    v158 = v216;
    goto LABEL_96;
  }
  v57 = v235;
  v185 = v211;
  v186 = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, v185, v186);
  v187 = v230;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v188 = v206;
  LOBYTE(v185) = dispatch thunk of static Comparable.< infix(_:_:)();
  v157(v187, v57);
  v158 = v204;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v208)(v204, v188, v57);
  if ((v185 & 1) != 0)
  {
LABEL_123:
    result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v158, v57);
    goto LABEL_124;
  }
  v189 = v238;
  v190 = dispatch thunk of BinaryInteger._lowWord.getter();
  result = ((uint64_t (*)(_BYTE *, uint64_t))v157)(v158, v57);
  v161 = v190 < v189;
LABEL_103:
  v162 = v223;
  v158 = v216;
LABEL_104:
  v163 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
  if (!v161)
    goto LABEL_105;
LABEL_124:
  __break(1u);
  return result;
}

uint64_t specialized __PlistDictionaryDecoder.unbox(_:as:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v10);
  if (swift_dynamicCast())
  {
    v3 = v8;
    v4 = v8 == 0x6C6C756E24 && v9 == 0xE500000000000000;
    if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 32);
    type metadata accessor for DecodingError();
    swift_allocError();
    v6 = v5;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEA968], a1, v6);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v3;
}

{
  char v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_7;
  if (v7 == 0x6C6C756E24 && v8 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    return 2;
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if (swift_dynamicCast())
    return v7;
  type metadata accessor for DecodingError();
  swift_allocError();
  v6 = v5;
  swift_bridgeObjectRetain();
  static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E0DEAFA0], a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

{
  char v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_7;
  if (v7 == 0x6C6C756E24 && v8 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    return 0;
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if (swift_dynamicCast())
    return v7;
  type metadata accessor for DecodingError();
  swift_allocError();
  v6 = v5;
  swift_bridgeObjectRetain();
  static DecodingError._typeMismatch(at:expectation:reality:)((uint64_t)&type metadata for Data, a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

_OWORD *specialized __PlistDictionaryDecoder.decode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v14);
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x1E0DEA968];
  if (swift_dynamicCast())
  {
    if (v12 == 0x6C6C756E24 && v13 == 0xE500000000000000)
      goto LABEL_10;
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
    {
LABEL_11:
      v8 = type metadata accessor for DecodingError();
      swift_allocError();
      v10 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v10 = v2;
      *(_QWORD *)&v14[0] = 0;
      *((_QWORD *)&v14[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      v6 = v14;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DEC460], v8);
      swift_willThrow();
      return v6;
    }
  }
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v14);
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)specialized __PlistDictionaryDecoder.unbox(_:as:)(v14);
  v2 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v0 && !v2)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return v6;
}

uint64_t specialized __PlistDictionaryDecoder.decode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
        goto LABEL_7;
    }
    v8 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v10 = MEMORY[0x1E0DEAFA0];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DEC460], v8);
    swift_willThrow();
    return v7 & 1;
  }
LABEL_7:
  v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  v5 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v13);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (v0)
    return v7 & 1;
  if (v5 != 2)
  {
    v7 = v5 & 1;
    return v7 & 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (!swift_dynamicCast())
    goto LABEL_7;
  if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
LABEL_10:
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEB070];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    return swift_willThrow();
  }
LABEL_7:
  v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)v13);
  if (v0)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  v10 = v5;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v10 & 1) != 0)
    __break(1u);
  return result;
}

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v8 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v10 = MEMORY[0x1E0DEBB98];
    *(_QWORD *)&v15[0] = 0;
    *((_QWORD *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DEC460], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  v0 = v6;
  v11 = v7;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v8 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v10 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v15[0] = 0;
    *((_QWORD *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DEC460], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  v0 = v6;
  v11 = v7;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEDA70];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  v0 = v6;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (((unsigned __int16)v0 & 0x100) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEDB58];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  v0 = v6;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x10000) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEDBC8];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = (unint64_t)v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    swift_willThrow();
    return v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return v0;
  }
  v0 = (unint64_t)v6;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x100000000) == 0)
    return v0;
  __break(1u);
  return result;
}

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v8 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v10 = MEMORY[0x1E0DEDC60];
    *(_QWORD *)&v15[0] = 0;
    *((_QWORD *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DEC460], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  v0 = v6;
  v11 = v7;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEDE70];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  v0 = v6;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (((unsigned __int16)v0 & 0x100) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEE068];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  v0 = v6;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x10000) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEE0F8];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = (unint64_t)v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    swift_willThrow();
    return v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return v0;
  }
  v0 = (unint64_t)v6;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x100000000) == 0)
    return v0;
  __break(1u);
  return result;
}

{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        goto LABEL_7;
    }
    v8 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v10 = MEMORY[0x1E0DEE190];
    *(_QWORD *)&v15[0] = 0;
    *((_QWORD *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DEC460], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  v0 = v6;
  v11 = v7;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0)
    return (uint64_t)v0;
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (!swift_dynamicCast())
    goto LABEL_7;
  if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
LABEL_10:
    v7 = type metadata accessor for DecodingError();
    swift_allocError();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v9 = MEMORY[0x1E0DEB188];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    return swift_willThrow();
  }
LABEL_7:
  v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(v13);
  if (v0)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  v10 = v5;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v10 & 0x100000000) != 0)
    __break(1u);
  return result;
}

__int128 *specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  ValueMetadata *v34;
  unint64_t v35;
  uint64_t v36;

  v2 = v0;
  v36 = *MEMORY[0x1E0C80C00];
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v14 = type metadata accessor for DecodingError();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v16 = MEMORY[0x1E0DEA968];
    v17 = *(_QWORD *)(*v0 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    v19 = v2[3];
    *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v20 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v20;
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_BYTE *)(v20 + 40) = 2;
    *(_QWORD *)&v33 = v17;
    swift_bridgeObjectRetain();
    v5 = &v33;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
    swift_willThrow();
    return v5;
  }
  v5 = (__int128 *)*v0;
  v6 = *(_QWORD **)(*v2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *((_QWORD *)v5 + 4) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    *((_QWORD *)v5 + 4) = v6;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    *((_QWORD *)v5 + 4) = v6;
  }
  v34 = &type metadata for _CodingKey;
  v10 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v35 = v10;
  v11 = swift_allocObject();
  *(_QWORD *)&v33 = v11;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v4;
  *(_BYTE *)(v11 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v6[5 * v9 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v33);
  v12 = specialized __PlistDictionaryDecoder.unbox(_:as:)(&v33);
  if (!v1)
  {
    v5 = (__int128 *)v12;
    v22 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    if (!v22)
    {
      v26 = type metadata accessor for DecodingError();
      swift_allocError();
      v28 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v28 = MEMORY[0x1E0DEA968];
      v29 = *(_QWORD *)(*v2 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v30 = swift_initStackObject();
      *(_OWORD *)(v30 + 16) = xmmword_18205C850;
      v31 = v2[3];
      *(_QWORD *)(v30 + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(v30 + 64) = v10;
      v32 = swift_allocObject();
      *(_QWORD *)(v30 + 32) = v32;
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0;
      *(_BYTE *)(v32 + 40) = 2;
      *(_QWORD *)&v33 = v29;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v30);
      *(_QWORD *)&v33 = 0;
      *((_QWORD *)&v33 + 1) = 0xE000000000000000;
      v5 = &v33;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC460], v26);
      swift_willThrow();
      goto LABEL_10;
    }
    v23 = v2[3];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v2[3] = v25;
      $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
      return v5;
    }
LABEL_19:
    __break(1u);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
LABEL_10:
  $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  return v5;
}

uint64_t specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  __int128 v32;
  ValueMetadata *v33;
  unint64_t v34;
  uint64_t v35;

  v2 = v0;
  v35 = *MEMORY[0x1E0C80C00];
  v3 = v0[1];
  v4 = v0[3];
  if (v4 < *(_QWORD *)(v3 + 16))
  {
    v5 = (__int128 *)*v0;
    v6 = *(_QWORD **)(*v2 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((_QWORD *)v5 + 4) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      *((_QWORD *)v5 + 4) = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
      *((_QWORD *)v5 + 4) = v6;
    }
    v33 = &type metadata for _CodingKey;
    v10 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v34 = v10;
    v11 = swift_allocObject();
    *(_QWORD *)&v32 = v11;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = v4;
    *(_BYTE *)(v11 + 40) = 2;
    v6[2] = v9 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v32, (uint64_t)&v6[5 * v9 + 4]);
    if (v4 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v4 < *(_QWORD *)(v3 + 16))
    {
      outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v32);
      v12 = specialized __PlistDictionaryDecoder.unbox(_:as:)(&v32);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
LABEL_13:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
        return v5 & 1;
      }
      v20 = v12;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      if (v20 == 2)
      {
        v21 = type metadata accessor for DecodingError();
        swift_allocError();
        v23 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v23 = MEMORY[0x1E0DEAFA0];
        v24 = *(_QWORD *)(*v2 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v26 = v2[3];
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = v10;
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0;
        *(_BYTE *)(v27 + 40) = 2;
        *(_QWORD *)&v32 = v24;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(_QWORD *)&v32 = 0;
        *((_QWORD *)&v32 + 1) = 0xE000000000000000;
        v5 = &v32;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC460], v21);
        swift_willThrow();
        goto LABEL_13;
      }
      v29 = v2[3];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (!v30)
      {
        LOBYTE(v5) = v20 & 1;
        v2[3] = v31;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
        return v5 & 1;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v13 = type metadata accessor for DecodingError();
  swift_allocError();
  v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v15 = MEMORY[0x1E0DEAFA0];
  v16 = *(_QWORD *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_18205C850;
  v18 = v2[3];
  *(_QWORD *)(v17 + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(v17 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v19 = swift_allocObject();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_BYTE *)(v19 + 40) = 2;
  *(_QWORD *)&v32 = v16;
  swift_bridgeObjectRetain();
  v5 = &v32;
  specialized Array.append<A>(contentsOf:)(v17);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC460], v13);
  swift_willThrow();
  return v5 & 1;
}

__int128 *specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  __int128 v36;
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;

  v5 = v2;
  v39 = *MEMORY[0x1E0C80C00];
  v6 = v2[1];
  v7 = v2[3];
  if (v7 < *(_QWORD *)(v6 + 16))
  {
    v9 = (__int128 *)*v2;
    v10 = *(_QWORD **)(*v5 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((_QWORD *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *((_QWORD *)v9 + 4) = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *((_QWORD *)v9 + 4) = v10;
    }
    v37 = &type metadata for _CodingKey;
    v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v38 = v34;
    v14 = swift_allocObject();
    *(_QWORD *)&v36 = v14;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(_QWORD *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      v9 = (__int128 *)v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if (((unsigned __int16)v9 & 0x100) != 0)
      {
        v26 = type metadata accessor for DecodingError();
        swift_allocError();
        v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v28 = a2;
        v29 = *(_QWORD *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v31 = v5[3];
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = v34;
        v32 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v32;
        *(_QWORD *)(v32 + 16) = v31;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 32) = 0;
        *(_BYTE *)(v32 + 40) = 2;
        *(_QWORD *)&v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(_QWORD *)&v36 = 0;
        *((_QWORD *)&v36 + 1) = 0xE000000000000000;
        v9 = &v36;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC460], v26);
        swift_willThrow();
        goto LABEL_15;
      }
      v23 = v5[3];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v16 = type metadata accessor for DecodingError();
  swift_allocError();
  v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v18 = a2;
  v19 = *(_QWORD *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_18205C850;
  v21 = v5[3];
  *(_QWORD *)(v20 + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v22 = swift_allocObject();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  *(_BYTE *)(v22 + 40) = 2;
  *(_QWORD *)&v36 = v19;
  swift_bridgeObjectRetain();
  v9 = &v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
  swift_willThrow();
  return v9;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  __int128 v36;
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;

  v5 = v2;
  v39 = *MEMORY[0x1E0C80C00];
  v6 = v2[1];
  v7 = v2[3];
  if (v7 < *(_QWORD *)(v6 + 16))
  {
    v9 = (__int128 *)*v2;
    v10 = *(_QWORD **)(*v5 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((_QWORD *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *((_QWORD *)v9 + 4) = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *((_QWORD *)v9 + 4) = v10;
    }
    v37 = &type metadata for _CodingKey;
    v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v38 = v34;
    v14 = swift_allocObject();
    *(_QWORD *)&v36 = v14;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(_QWORD *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      v9 = (__int128 *)v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if ((v9 & 0x10000) != 0)
      {
        v26 = type metadata accessor for DecodingError();
        swift_allocError();
        v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v28 = a2;
        v29 = *(_QWORD *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v31 = v5[3];
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = v34;
        v32 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v32;
        *(_QWORD *)(v32 + 16) = v31;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 32) = 0;
        *(_BYTE *)(v32 + 40) = 2;
        *(_QWORD *)&v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(_QWORD *)&v36 = 0;
        *((_QWORD *)&v36 + 1) = 0xE000000000000000;
        v9 = &v36;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC460], v26);
        swift_willThrow();
        goto LABEL_15;
      }
      v23 = v5[3];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v16 = type metadata accessor for DecodingError();
  swift_allocError();
  v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v18 = a2;
  v19 = *(_QWORD *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_18205C850;
  v21 = v5[3];
  *(_QWORD *)(v20 + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v22 = swift_allocObject();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  *(_BYTE *)(v22 + 40) = 2;
  *(_QWORD *)&v36 = v19;
  swift_bridgeObjectRetain();
  v9 = &v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
  swift_willThrow();
  return v9;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  __int128 v38;
  ValueMetadata *v39;
  unint64_t v40;
  uint64_t v41;

  v5 = v2;
  v41 = *MEMORY[0x1E0C80C00];
  v6 = v2[1];
  v7 = v2[3];
  if (v7 < *(_QWORD *)(v6 + 16))
  {
    v9 = (__int128 *)*v2;
    v10 = *(_QWORD **)(*v5 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((_QWORD *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *((_QWORD *)v9 + 4) = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *((_QWORD *)v9 + 4) = v10;
    }
    v39 = &type metadata for _CodingKey;
    v36 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v40 = v36;
    v14 = swift_allocObject();
    *(_QWORD *)&v38 = v14;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v38, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(_QWORD *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v38);
      v15 = a1(&v38);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      v9 = (__int128 *)v15;
      v24 = v16;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      if ((v24 & 1) != 0)
      {
        v28 = type metadata accessor for DecodingError();
        swift_allocError();
        v30 = v29;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v30 = a2;
        v31 = *(_QWORD *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v33 = v5[3];
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = v36;
        v34 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v34;
        *(_QWORD *)(v34 + 16) = v33;
        *(_QWORD *)(v34 + 24) = 0;
        *(_QWORD *)(v34 + 32) = 0;
        *(_BYTE *)(v34 + 40) = 2;
        *(_QWORD *)&v38 = v31;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(_QWORD *)&v38 = 0;
        *((_QWORD *)&v38 + 1) = 0xE000000000000000;
        v9 = &v38;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC460], v28);
        swift_willThrow();
        goto LABEL_15;
      }
      v25 = v5[3];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (!v26)
      {
        v5[3] = v27;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v17 = type metadata accessor for DecodingError();
  swift_allocError();
  v19 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v19 = a2;
  v20 = *(_QWORD *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  v21 = swift_initStackObject();
  *(_OWORD *)(v21 + 16) = xmmword_18205C850;
  v22 = v5[3];
  *(_QWORD *)(v21 + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(v21 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v23 = swift_allocObject();
  *(_QWORD *)(v21 + 32) = v23;
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  *(_BYTE *)(v23 + 40) = 2;
  *(_QWORD *)&v38 = v20;
  swift_bridgeObjectRetain();
  v9 = &v38;
  specialized Array.append<A>(contentsOf:)(v21);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
  swift_willThrow();
  return v9;
}

unint64_t specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  __int128 v36;
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;

  v5 = v2;
  v39 = *MEMORY[0x1E0C80C00];
  v6 = v2[1];
  v7 = v2[3];
  if (v7 < *(_QWORD *)(v6 + 16))
  {
    v9 = *v2;
    v10 = *(_QWORD **)(*v5 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v9 + 32) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *(_QWORD *)(v9 + 32) = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *(_QWORD *)(v9 + 32) = v10;
    }
    v37 = &type metadata for _CodingKey;
    v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v38 = v34;
    v14 = swift_allocObject();
    *(_QWORD *)&v36 = v14;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 16) = v7;
    *(_BYTE *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(_QWORD *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      v9 = v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if ((v9 & 0x100000000) != 0)
      {
        v26 = type metadata accessor for DecodingError();
        swift_allocError();
        v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v28 = a2;
        v29 = *(_QWORD *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v31 = v5[3];
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = v34;
        v32 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v32;
        *(_QWORD *)(v32 + 16) = v31;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 32) = 0;
        *(_BYTE *)(v32 + 40) = 2;
        *(_QWORD *)&v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(_QWORD *)&v36 = 0;
        *((_QWORD *)&v36 + 1) = 0xE000000000000000;
        v9 = (unint64_t)&v36;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC460], v26);
        swift_willThrow();
        goto LABEL_15;
      }
      v23 = v5[3];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v16 = type metadata accessor for DecodingError();
  swift_allocError();
  v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v18 = a2;
  v19 = *(_QWORD *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_18205C850;
  v21 = v5[3];
  *(_QWORD *)(v20 + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v22 = swift_allocObject();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  *(_BYTE *)(v22 + 40) = 2;
  *(_QWORD *)&v36 = v19;
  swift_bridgeObjectRetain();
  v9 = (unint64_t)&v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
  swift_willThrow();
  return v9;
}

float specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  float v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  ValueMetadata *v34;
  unint64_t v35;
  uint64_t v36;

  v3 = v0;
  v36 = *MEMORY[0x1E0C80C00];
  v4 = v0[1];
  v5 = v0[3];
  if (v5 < *(_QWORD *)(v4 + 16))
  {
    v6 = *v0;
    v7 = *(_QWORD **)(*v3 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 32) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      *(_QWORD *)(v6 + 32) = v7;
    }
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      *(_QWORD *)(v6 + 32) = v7;
    }
    v34 = &type metadata for _CodingKey;
    v11 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v35 = v11;
    v12 = swift_allocObject();
    *(_QWORD *)&v33 = v12;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 16) = v5;
    *(_BYTE *)(v12 + 40) = 2;
    v7[2] = v10 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v7[5 * v10 + 4]);
    if (v5 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v5 < *(_QWORD *)(v4 + 16))
    {
      outlined init with copy of Any(v4 + 32 * v5 + 32, (uint64_t)&v33);
      specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(&v33);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
      v21 = v13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      if ((v21 & 0x100000000) != 0)
      {
        v25 = type metadata accessor for DecodingError();
        swift_allocError();
        v27 = v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v27 = MEMORY[0x1E0DEB188];
        v28 = *(_QWORD *)(*v3 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v30 = v3[3];
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = v11;
        v31 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v31;
        *(_QWORD *)(v31 + 16) = v30;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0;
        *(_BYTE *)(v31 + 40) = 2;
        *(_QWORD *)&v33 = v28;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(_QWORD *)&v33 = 0;
        *((_QWORD *)&v33 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC460], v25);
        swift_willThrow();
        goto LABEL_15;
      }
      v22 = v3[3];
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (!v23)
      {
        v2 = *(float *)&v21;
        v3[3] = v24;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v14 = type metadata accessor for DecodingError();
  swift_allocError();
  v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v16 = MEMORY[0x1E0DEB188];
  v17 = *(_QWORD *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_18205C850;
  v19 = v3[3];
  *(_QWORD *)(v18 + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(v18 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v20 = swift_allocObject();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  *(_BYTE *)(v20 + 40) = 2;
  *(_QWORD *)&v33 = v17;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v18);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
  swift_willThrow();
  return v2;
}

double specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  double v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  ValueMetadata *v36;
  unint64_t v37;
  uint64_t v38;

  v3 = v0;
  v38 = *MEMORY[0x1E0C80C00];
  v4 = v0[1];
  v5 = v0[3];
  if (v5 < *(_QWORD *)(v4 + 16))
  {
    v6 = *v0;
    v7 = *(_QWORD **)(*v3 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 32) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      *(_QWORD *)(v6 + 32) = v7;
    }
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      *(_QWORD *)(v6 + 32) = v7;
    }
    v36 = &type metadata for _CodingKey;
    v11 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v37 = v11;
    v12 = swift_allocObject();
    *(_QWORD *)&v35 = v12;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 16) = v5;
    *(_BYTE *)(v12 + 40) = 2;
    v7[2] = v10 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v35, (uint64_t)&v7[5 * v10 + 4]);
    if (v5 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v5 < *(_QWORD *)(v4 + 16))
    {
      outlined init with copy of Any(v4 + 32 * v5 + 32, (uint64_t)&v35);
      v13 = specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)&v35);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
      v22 = v13;
      v23 = v14;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      if ((v23 & 1) != 0)
      {
        v27 = type metadata accessor for DecodingError();
        swift_allocError();
        v29 = v28;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v29 = MEMORY[0x1E0DEB070];
        v30 = *(_QWORD *)(*v3 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v32 = v3[3];
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = v11;
        v33 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v33;
        *(_QWORD *)(v33 + 16) = v32;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0;
        *(_BYTE *)(v33 + 40) = 2;
        *(_QWORD *)&v35 = v30;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(_QWORD *)&v35 = 0;
        *((_QWORD *)&v35 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC460], v27);
        swift_willThrow();
        goto LABEL_15;
      }
      v24 = v3[3];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (!v25)
      {
        v2 = *(double *)&v22;
        v3[3] = v26;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v15 = type metadata accessor for DecodingError();
  swift_allocError();
  v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v17 = MEMORY[0x1E0DEB070];
  v18 = *(_QWORD *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_18205C850;
  v20 = v3[3];
  *(_QWORD *)(v19 + 56) = &type metadata for _CodingKey;
  *(_QWORD *)(v19 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v21 = swift_allocObject();
  *(_QWORD *)(v19 + 32) = v21;
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_BYTE *)(v21 + 40) = 2;
  *(_QWORD *)&v35 = v18;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v19);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
  swift_willThrow();
  return v2;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int16 and conformance Int16()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int16 and conformance Int16;
  if (!lazy protocol witness table cache variable for type Int16 and conformance Int16)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDB90], MEMORY[0x1E0DEDB58]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int16 and conformance Int16);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int16 and conformance Int16;
  if (!lazy protocol witness table cache variable for type Int16 and conformance Int16)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDB80], MEMORY[0x1E0DEDB58]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int16 and conformance Int16);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int8 and conformance Int8()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int8 and conformance Int8;
  if (!lazy protocol witness table cache variable for type Int8 and conformance Int8)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDAA8], MEMORY[0x1E0DEDA70]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int8 and conformance Int8);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int8 and conformance Int8;
  if (!lazy protocol witness table cache variable for type Int8 and conformance Int8)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDA98], MEMORY[0x1E0DEDA70]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int8 and conformance Int8);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB190], MEMORY[0x1E0DEB188]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer;
  if (!lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryUnkeyedDecodingContainer, &unk_1E0F2A168);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer);
  }
  return result;
}

uint64_t sub_181D9FC0C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for _PlistDictionaryKeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistDictionaryKeyedDecodingContainer);
}

_QWORD *initializeBufferWithCopyOfBuffer for _PlistDictionaryKeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _PlistDictionaryKeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for _PlistDictionaryKeyedDecodingContainer()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for _PlistDictionaryUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _PlistDictionaryUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void *type metadata accessor for _PlistDictionaryUnkeyedDecodingContainer()
{
  return &unk_1E0F2A168;
}

uint64_t sub_181D9FEBC()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_181D9FEE8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain();
  return MEMORY[0x186DA61C4](v4, v5, v2, v3);
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance __PlistDictionaryDecoder@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance __PlistDictionaryDecoder(a1, a2, a3);
}

uint64_t _CalendarICU.firstWeekday.getter(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  a1(&v6);
  v4 = v6;
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return v4;
}

uint64_t _CalendarICU.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  Swift::UInt Attribute;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  Swift::UInt v27;
  _QWORD v29[18];
  _BYTE v30[144];
  _BYTE v31[48];
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher._combine(_:)(v5);
  v6 = *(_QWORD *)(v1 + 48);
  ObjectType = swift_getObjectType();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 112);
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v6);
  swift_unknownObjectRelease();
  if (*(_BYTE *)(v1 + 64) == 1)
    Attribute = (int)ucal_getAttribute();
  else
    Attribute = *(_QWORD *)(v1 + 56);
  Hasher._combine(_:)(Attribute);
  if (*(_BYTE *)(v1 + 80) == 1)
    v10 = (int)ucal_getAttribute();
  else
    v10 = *(_QWORD *)(v1 + 72);
  Hasher._combine(_:)(v10);
  if (*(_QWORD *)(v1 + 104))
  {
    v11 = *(_QWORD *)(v1 + 112);
    v12 = swift_getObjectType();
    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
    swift_unknownObjectRetain();
    v13(v12, v11);
    swift_unknownObjectRelease();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 104))
  {
    v14 = *(_QWORD *)(v1 + 112);
    v15 = swift_getObjectType();
    v16 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v14 + 464);
    swift_unknownObjectRetain();
    v16(v29, v15, v14);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v30, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) != 1)
    {
      v17 = v32;
      swift_bridgeObjectRetain();
      outlined release of LocalePreferences?((uint64_t)v30);
      if (v17)
      {
        if (*(_QWORD *)(v17 + 16))
        {
          v18 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
          if ((v19 & 1) != 0)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
            swift_bridgeObjectRelease();
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v20);
            if (!*(_QWORD *)(v2 + 104))
              goto LABEL_24;
            goto LABEL_18;
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  Hasher._combine(_:)(0);
  if (!*(_QWORD *)(v2 + 104))
  {
LABEL_24:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_18:
  v21 = *(_QWORD *)(v2 + 112);
  v22 = swift_getObjectType();
  v23 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 464);
  swift_unknownObjectRetain();
  v23(v29, v22, v21);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v30, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) == 1)
    goto LABEL_24;
  v24 = v33;
  swift_bridgeObjectRetain();
  outlined release of LocalePreferences?((uint64_t)v30);
  if (!v24)
    goto LABEL_24;
  if (!*(_QWORD *)(v24 + 16) || (v25 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v26 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v27);
LABEL_25:
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t closure #1 in _CalendarICU.minimumRange(of:)@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  int Limit;
  uint64_t result;
  uint64_t v6;
  int v7;

  Limit = ucal_getLimit();
  result = ucal_getLimit();
  if (a1 != 2)
  {
LABEL_6:
    v7 = result + 1;
    if (!__OFADD__((_DWORD)result, 1))
    {
      if (v7 >= Limit)
      {
        v6 = Limit;
        goto LABEL_9;
      }
LABEL_13:
      __break(1u);
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  LODWORD(v6) = Limit + 1;
  if (__OFADD__(Limit, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = result + 2;
  if (__OFADD__((_DWORD)result, 2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = (int)v6;
  if (v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_6;
  }
LABEL_9:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t _CalendarICU.maximumRange(of:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for closure #1 in _CalendarICU.maximumRange(of:)((uint64_t)&v4);
  v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

Swift::Int _CalendarICU._locked_algorithmA(smaller:larger:at:)(char *a1, char *a2, uint64_t *a3)
{
  char v3;
  char v4;
  uint64_t v5;
  double v6;
  double time;
  Swift::Int value;
  uint64_t v10;
  char v11;
  Foundation::Date v12;
  double v13;
  char v14;
  Swift::Int_optional v15;
  Swift::Int_optional v16;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  v11 = *a2;
  v10 = v5;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v11);
  if ((v14 & 1) != 0)
    return 0;
  time = v12._time;
  v6 = v13;
  LOBYTE(v10) = v3;
  v11 = v4;
  v12._time = v12._time + 0.1;
  v15 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, v12);
  if (v15.is_nil)
    return 0;
  value = v15.value;
  LOBYTE(v10) = v3;
  v11 = v4;
  v12._time = v6 + time + -0.1;
  v16 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, v12);
  if (v16.is_nil)
    return 0;
  if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1))
    {
      __break(1u);
    }
    else if (v16.value + 1 >= value)
    {
      return value;
    }
    __break(1u);
    JUMPOUT(0x181DA0628);
  }
  return value;
}

Swift::Int _CalendarICU._locked_algorithmB(smaller:larger:at:)(char *a1, char *a2, double *a3)
{
  char v3;
  double v4;
  double v5;
  double time;
  Swift::Int v7;
  Swift::Int value;
  double v9;
  double v10;
  double v11;
  Swift::Int v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  Swift::Int v19;
  BOOL v20;
  Swift::Int v21;
  BOOL v22;
  Swift::Double v24;
  char v25;
  Foundation::Date v26;
  double v27;
  char v28;
  Swift::Int_optional v29;
  Swift::Int_optional v30;
  Swift::Int_optional v31;

  v3 = *a1;
  v4 = *a3;
  v25 = *a2;
  v24 = v4;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v25);
  if ((v28 & 1) != 0)
    goto LABEL_9;
  time = v26._time;
  v5 = v27;
  v25 = 2;
  v24 = v26._time + 1.0;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v25);
  if ((v28 & 1) == 0)
  {
    v10 = v26._time;
    v9 = v27;
    LOBYTE(v24) = v3;
    v25 = 2;
    v26._time = v26._time + 0.1;
    v29 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, v26);
    if (!v29.is_nil)
    {
      value = v29.value;
      LOBYTE(v24) = v3;
      v25 = 2;
      v11 = v9 + v10;
      v26._time = v11 + -0.1;
      v30 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, COERCE_FOUNDATION_DATE(v11 + -0.1));
      if (!v30.is_nil)
      {
        if (v30.value < value)
          goto LABEL_10;
        v12 = v30.value + 1;
        if (__OFADD__(v30.value, 1))
        {
LABEL_38:
          __break(1u);
        }
        else if (v12 >= value)
        {
          v13 = v5 + time + -1.0;
          v14 = v11 + 1.0;
          if (v11 + 1.0 >= v13)
            goto LABEL_10;
          v15 = -13;
          v7 = value;
          while (1)
          {
            v25 = 2;
            v24 = v14;
            _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v25);
            if ((v28 & 1) != 0)
              goto LABEL_4;
            v17 = v26._time;
            v16 = v27;
            LOBYTE(v24) = v3;
            v25 = 2;
            v26._time = v26._time + 0.1;
            v31 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, v26);
            if (v31.is_nil
              || (value = v31.value,
                  LOBYTE(v24) = v3,
                  v25 = 2,
                  v18 = v16 + v17,
                  v26._time = v18 + -0.1,
                  v30 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, COERCE_FOUNDATION_DATE(v18 + -0.1)), v30.is_nil))
            {
              value = v7;
              goto LABEL_10;
            }
            if (v7 == v12)
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
            if (value >= v7)
              value = v7;
            v19 = v12 - v7;
            if (__OFSUB__(v12, v7))
              goto LABEL_34;
            v20 = __OFADD__(value, v19);
            v21 = value + v19;
            if (v20)
              goto LABEL_35;
            v12 = v21 + v30.value;
            if (__OFADD__(v21, v30.value))
              goto LABEL_36;
            if (v12 < value)
              goto LABEL_37;
            v14 = v18 + 1.0;
            v22 = v18 + 1.0 >= v13 || v15++ == 0;
            v7 = value;
            if (v22)
              goto LABEL_10;
          }
        }
        __break(1u);
        return v30.value;
      }
    }
LABEL_9:
    value = 0;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_4:
  value = v7;
LABEL_10:
  v30.value = value;
  return v30.value;
}

Swift::Int _CalendarICU._locked_algorithmC(smaller:larger:at:)(char *a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t v4;
  Swift::Int value;
  double v6;
  double time;
  uint64_t v9;
  char v10;
  Foundation::Date v11;
  double v12;
  char v13;
  Swift::Int_optional v14;
  Swift::Int_optional v15;

  v3 = *a1;
  v4 = *a3;
  v10 = *a2;
  v9 = v4;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v10);
  if ((v13 & 1) != 0)
  {
    value = 0;
  }
  else
  {
    time = v11._time;
    v6 = v12;
    LOBYTE(v9) = v3;
    v10 = 1;
    v11._time = v11._time + 0.1;
    v14 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v9, (Foundation::Calendar::Component)&v10, v11);
    if (v14.is_nil
      || (value = v14.value,
          LOBYTE(v9) = v3,
          v10 = 1,
          v11._time = v6 + time + -0.1,
          v15 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v9, (Foundation::Calendar::Component)&v10, v11), v15.is_nil))
    {
      value = 0;
    }
    else if (v15.value >= value)
    {
      if (__OFADD__(v15.value, 1))
      {
        __break(1u);
      }
      else if (v15.value + 1 >= value)
      {
        goto LABEL_8;
      }
      __break(1u);
      return v15.value;
    }
  }
LABEL_8:
  v15.value = value;
  return v15.value;
}

Swift::Int _CalendarICU._locked_algorithmD(at:)(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  Swift::Int value;
  double v8;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  char v14;
  Swift::Int_optional v15;
  Swift::Int_optional v16;

  v1 = *a1;
  v11 = 10;
  v10 = v1;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v11);
  if ((v14 & 1) != 0)
    return 0;
  v3 = v12;
  v2 = v13;
  v11 = 2;
  v10 = v1;
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v11);
  if ((v14 & 1) != 0)
    return 0;
  v5 = v12;
  v4 = v13;
  v6 = v3 >= v12 ? v3 : v12;
  LOBYTE(v10) = 3;
  v11 = 2;
  v12 = v6 + 0.1;
  v15 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, COERCE_FOUNDATION_DATE(v6 + 0.1));
  if (v15.is_nil)
    return 0;
  value = v15.value;
  v8 = v2 + v3;
  if (v2 + v3 >= v4 + v5)
    v8 = v4 + v5;
  LOBYTE(v10) = 3;
  v11 = 2;
  v12 = v8 + -0.1;
  v16 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, COERCE_FOUNDATION_DATE(v8 + -0.1));
  if (v16.is_nil)
    return 0;
  if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1))
    {
      __break(1u);
    }
    else if (v16.value + 1 >= value)
    {
      return value;
    }
    __break(1u);
    JUMPOUT(0x181DA0D6CLL);
  }
  return value;
}

void _CalendarICU._locked_start(of:at:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DA0E58@<X0>(unsigned __int8 a1@<W8>)
{
  uint64_t v1;
  uint64_t result;
  double v3;
  unsigned __int8 v4;

  v4 = a1;
  _CalendarICU._locked_setToFirstInstant(of:at:)(&v4);
  result = ucal_getMillis();
  *(double *)v1 = v3 / 1000.0 + -978307200.0;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

Swift::Bool __swiftcall _CalendarICU.isDateInWeekend(_:)(Foundation::Date a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  Swift::Bool v3;
  Swift::Bool v5;

  v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  partial apply for closure #1 in _CalendarICU.isDateInWeekend(_:)(&v5);
  v3 = v5;
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  return v3;
}

double _CalendarICU.totalSecondsInSmallUnits(_:status:)(int a1)
{
  double v1;

  v1 = 0.0;
  if (a1 != 14 && a1 != 21)
  {
    v1 = (double)(int)ucal_get() / 1000.0 + 0.0;
    if (a1 != 13)
    {
      v1 = v1 + (double)(int)ucal_get();
      if (a1 != 12)
        return v1 + (double)(int)ucal_get() * 60.0;
    }
  }
  return v1;
}

void protocol witness for _CalendarProtocol.gregorianStartDate.getter in conformance _CalendarICU(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 88);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarICU()
{
  uint64_t v0;
  __int128 v2;

  BYTE8(v2) = 0;
  *(_QWORD *)&v2 = *(unsigned __int8 *)(*(_QWORD *)v0 + 24);
  _print_unlocked<A, B>(_:_:)();
  return *(_QWORD *)((char *)&v2 + 1);
}

_QWORD *Calendar.eraSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.longEraSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.monthSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.shortMonthSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.veryShortMonthSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.standaloneMonthSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.shortStandaloneMonthSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.veryShortStandaloneMonthSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.weekdaySymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.shortWeekdaySymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.veryShortWeekdaySymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.standaloneWeekdaySymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.shortStandaloneWeekdaySymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.veryShortStandaloneWeekdaySymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.quarterSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.shortQuarterSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.standaloneQuarterSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

_QWORD *Calendar.shortStandaloneQuarterSymbols.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  v4 = v14;
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

uint64_t Calendar.amSymbol.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v5 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v5, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v14 = v24;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v1)
  {
    v3 = ICUDateFormatter.symbols(for:)();
    result = swift_release();
    if (v3[2])
    {
LABEL_3:
      v4 = v3[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t Calendar.pmSymbol.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v5 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v5, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  v7 = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v14 = v24;
  v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v1)
  {
    v3 = ICUDateFormatter.symbols(for:)();
    result = swift_release();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v3[2] < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v4 = v3[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t specialized static _CalendarICU.icuCalendar(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void (*v22)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  uint64_t result;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  _QWORD v43[18];
  _DWORD v44[36];
  _QWORD __dst[44];
  _QWORD v46[25];
  __int16 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD __src[22];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v9 = *a2;
  v8 = a2[1];
  v10 = *(_QWORD *)(a3 + 8);
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 64);
  swift_unknownObjectRetain();
  v13 = v12(ObjectType, v10);
  v15 = v14;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v39 = v13;
  Locale.Components.init(identifier:)(v13, v15, v46);
  __src[0] = *(_OWORD *)v46;
  __src[1] = *(_OWORD *)&v46[2];
  __src[2] = *(_OWORD *)&v46[4];
  __src[3] = *(_OWORD *)&v46[6];
  __src[4] = *(_OWORD *)&v46[8];
  __src[5] = *(_OWORD *)&v46[10];
  LOBYTE(__src[6]) = v7;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v46[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v46[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v46[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v46[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v46[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v46[23];
  WORD4(__src[12]) = v47;
  __src[13] = v48;
  __src[14] = v49;
  __src[15] = v50;
  __src[16] = v51;
  __src[17] = v52;
  __src[18] = v53;
  __src[19] = v54;
  __src[20] = v55;
  __src[21] = v56;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  v16 = swift_getObjectType();
  v17 = *(_QWORD *)(v8 + 32);
  swift_unknownObjectRetain();
  v18 = ((uint64_t (*)(uint64_t, uint64_t))v17)(v16, v8);
  v20 = v19;
  swift_unknownObjectRelease();
  v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v18, v20);
  swift_bridgeObjectRelease();
  if (v21[2] >> 31)
  {
    __break(1u);
    goto LABEL_35;
  }
  String.utf8CString.getter();
  v9 = ucal_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v9)
    goto LABEL_44;
  swift_bridgeObjectRelease();
  v17 = v7;
  if (v7)
  {
    if ((a5 & 1) == 0)
      goto LABEL_5;
LABEL_9:
    v22 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v22(v43, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v44, (uint64_t)__dst, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)__dst) == 1)
      goto LABEL_25;
    v23 = __dst[6];
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v44);
    if (!v23)
      goto LABEL_25;
    if (!*(_QWORD *)(v23 + 16))
      goto LABEL_24;
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v25 & 1) == 0)
      goto LABEL_24;
    v15 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
    swift_bridgeObjectRelease();
    if (v15 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v15 <= 0x7FFFFFFF)
      {
        if ((int)v15 < 1 || v15 >= 8)
          goto LABEL_25;
        if (one-time initialization token for weekdays == -1)
          goto LABEL_18;
        goto LABEL_39;
      }
LABEL_38:
      __break(1u);
LABEL_39:
      swift_once();
LABEL_18:
      v26 = static Locale.Weekday.weekdays;
      if ((unint64_t)v15 > *((_QWORD *)static Locale.Weekday.weekdays + 2))
      {
        __break(1u);
        goto LABEL_41;
      }
      v27 = *((_BYTE *)static Locale.Weekday.weekdays + v15 + 31);
      swift_bridgeObjectRetain();
      v28 = specialized Collection<>.firstIndex(of:)(v27, (uint64_t)v26);
      v15 = v29;
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        v30 = v28 + 1;
        if (!__OFADD__(v28, 1))
        {
          if (v30 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v30 <= 0x7FFFFFFF)
              goto LABEL_7;
            __break(1u);
LABEL_24:
            swift_bridgeObjectRelease();
            goto LABEL_25;
          }
LABEL_42:
          __break(1u);
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      __break(1u);
LABEL_44:
      __dst[0] = 0;
      __dst[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v35._object = (void *)0x800000018230DC10;
      v35._countAndFlagsBits = 0xD000000000000030;
      String.append(_:)(v35);
      v36._countAndFlagsBits = v39;
      v36._object = (void *)v15;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 32;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      LOBYTE(v44[0]) = v7;
      _print_unlocked<A, B>(_:_:)();
      v38._countAndFlagsBits = 8250;
      v38._object = (void *)0xE200000000000000;
      String.append(_:)(v38);
      v44[0] = 0;
      type metadata accessor for UErrorCode(0);
      _print_unlocked<A, B>(_:_:)();
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  ucal_getGregorianChange();
  ucal_setGregorianChange();
  if ((a5 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_7:
  ucal_setAttribute();
LABEL_25:
  if ((a7 & 1) != 0)
  {
    v31 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v31(v43, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v44, (uint64_t)__dst, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)__dst) != 1)
    {
      v32 = __dst[7];
      swift_bridgeObjectRetain();
      outlined release of LocalePreferences?((uint64_t)v44);
      if (v32)
      {
        if (*(_QWORD *)(v32 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v17), (v33 & 1) != 0))
        {
          swift_bridgeObjectRelease();
          ucal_setAttribute();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  else
  {
    ucal_setAttribute();
  }
  outlined release of Locale.Components((uint64_t *)__src);
  return v9;
}

uint64_t outlined release of LocalePreferences?(uint64_t a1)
{
  outlined consume of LocalePreferences?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80), *(void **)(a1 + 88), *(void **)(a1 + 96));
  return a1;
}

uint64_t partial apply for closure #1 in _CalendarICU.minimumRange(of:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _CalendarICU.minimumRange(of:)(*(_BYTE *)(v1 + 28), a1);
}

uint64_t static AnyHashable._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;

  outlined destroy of AnyHashable?(a2);
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  v3 = a1;
  return AnyHashable.init<A>(_:)();
}

BOOL static AnyHashable._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4;
  _BOOL8 v5;
  _QWORD v7[5];

  outlined destroy of AnyHashable?(a2);
  v7[0] = a1;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  v4 = a1;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable?(a2, (uint64_t)v7);
  v5 = v7[3] != 0;
  outlined destroy of AnyHashable?((uint64_t)v7);
  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AnyHashable(void *a1, uint64_t a2)
{
  id v3;

  outlined destroy of AnyHashable?(a2);
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  v3 = a1;
  return AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AnyHashable(void *a1)
{
  id v2;

  if (a1)
  {
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    v2 = a1;
  }
  return AnyHashable.init<A>(_:)();
}

void NSDate.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v3, sel_setDateStyle_, 2);
  objc_msgSend(v3, sel_setTimeStyle_, 1);
  v4 = objc_msgSend(v3, sel_stringFromDate_, v1);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 32) = 0;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSDate(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v4, sel_setDateStyle_, 2);
  objc_msgSend(v4, sel_setTimeStyle_, 1);
  v5 = objc_msgSend(v4, sel_stringFromDate_, v3);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 32) = 0;
}

void PredicateExpressions.Range.init(lower:upper:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.Range, a7);
}

uint64_t PredicateExpressions.Range.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t TupleTypeMetadata2;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;

  v47 = a3;
  v4 = *(_QWORD *)(a2 + 32);
  v49 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - v10;
  v12 = *(_QWORD **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v50 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v47 - v17;
  v19 = *a1;
  v51 = v19;
  v20 = v53;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v4 + 16))(&v51, v5, v4, v16);
  if (!v20)
  {
    v53 = v11;
    v22 = v49;
    v23 = v50;
    v51 = v19;
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v49 + 40) + 16))(&v51, *(_QWORD *)(v49 + 24));
    v24 = *(_QWORD *)(v22 + 48);
    if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
    {
      v25 = v12;
      v26 = v18;
      v49 = v24;
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        v27 = TupleTypeMetadata2;
        v28 = v53;
        v29 = &v53[*(int *)(TupleTypeMetadata2 + 48)];
        v30 = (void (*)(char *, char *, uint64_t))v25[4];
        v30(v53, v26, AssociatedTypeWitness);
        v31 = v29;
        v30(v29, v50, AssociatedTypeWitness);
        v32 = v8;
        v33 = &v8[*(int *)(v27 + 48)];
        v34 = (void (*)(char *, char *, uint64_t))v25[2];
        v34(v32, v28, AssociatedTypeWitness);
        v34(v33, v31, AssociatedTypeWitness);
        v35 = v47;
        v30(v47, v32, AssociatedTypeWitness);
        v36 = (void (*)(char *, uint64_t))v25[1];
        v36(v33, AssociatedTypeWitness);
        v37 = (uint64_t (*)(char *, uint64_t))v36;
        v38 = &v32[*(int *)(TupleTypeMetadata2 + 48)];
        v30(v32, v28, AssociatedTypeWitness);
        v30(v38, v31, AssociatedTypeWitness);
        v39 = type metadata accessor for Range();
        v30(&v35[*(int *)(v39 + 36)], v38, AssociatedTypeWitness);
        return v37(v32, AssociatedTypeWitness);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v51 = 0;
      v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v40._countAndFlagsBits = 0xD000000000000020;
      v40._object = (void *)0x800000018230DC50;
      String.append(_:)(v40);
      _print_unlocked<A, B>(_:_:)();
      v41._object = (void *)0x800000018230DC80;
      v41._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v41);
      _print_unlocked<A, B>(_:_:)();
      v42._countAndFlagsBits = 41;
      v42._object = (void *)0xE100000000000000;
      String.append(_:)(v42);
      v43 = v51;
      v44 = v52;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(_QWORD *)v45 = v43;
      *(_QWORD *)(v45 + 8) = v44;
      *(_BYTE *)(v45 + 16) = 2;
      swift_willThrow();
      v46 = (void (*)(char *, uint64_t))v12[1];
      v46(v23, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v46)(v18, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Range<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return PredicateExpressions.Range.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_Range<A, B>(lower:upper:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.Range, a7);
}

uint64_t PredicateExpressions.Range.description.getter(int a1)
{
  return PredicateExpressions.Range.description.getter(a1, 27, 0x6F6C2865676E6152, (void *)0xED0000203A726577);
}

uint64_t PredicateExpressions.Range<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.Range<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Range<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.Range<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.ClosedRange.lower.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void PredicateExpressions.ClosedRange.init(lower:upper:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.ClosedRange, a7);
}

uint64_t PredicateExpressions.ClosedRange.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t TupleTypeMetadata2;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v38 = a3;
  v4 = *(_QWORD *)(a2 + 32);
  v40 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v37 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v41 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v37 - v17;
  v19 = *a1;
  v43 = v19;
  v20 = v42;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v4 + 16))(&v43, v5, v4, v16);
  if (!v20)
  {
    v22 = v12;
    v42 = v11;
    v23 = v40;
    v43 = v19;
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v40 + 40) + 16))(&v43, *(_QWORD *)(v40 + 24));
    v24 = *(_QWORD *)(v23 + 48);
    v25 = AssociatedTypeWitness;
    v40 = v24;
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v26 = TupleTypeMetadata2;
      v27 = v42;
      v28 = &v42[*(int *)(TupleTypeMetadata2 + 48)];
      v29 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
      v29(v42, v18, v25);
      v37 = v28;
      v29(v28, v41, v25);
      v30 = &v8[*(int *)(v26 + 48)];
      v31 = v22;
      v32 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
      v32(v8, v27, v25);
      v32(v30, v28, v25);
      v33 = v38;
      v29(v38, v8, v25);
      v34 = *(void (**)(char *, uint64_t))(v31 + 8);
      v34(v30, v25);
      v35 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
      v29(v8, v27, v25);
      v29(v35, v37, v25);
      v36 = type metadata accessor for ClosedRange();
      v29(&v33[*(int *)(v36 + 36)], v35, v25);
      return ((uint64_t (*)(char *, uint64_t))v34)(v8, v25);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ClosedRange<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return PredicateExpressions.ClosedRange.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_ClosedRange<A, B>(lower:upper:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.ClosedRange, a7);
}

uint64_t PredicateExpressions.ClosedRange.description.getter(int a1)
{
  return PredicateExpressions.Range.description.getter(a1, 33, 0xD000000000000013, (void *)0x800000018230DCA0);
}

uint64_t PredicateExpressions.Range.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x3A7265707075202CLL;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t PredicateExpressions.ClosedRange<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ClosedRange<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ClosedRange<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.ClosedRange<>.init(from:), a5, a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ClosedRange<A, B>(_QWORD *a1)
{
  return PredicateExpressions.ClosedRange<>.encode(to:)(a1);
}

void PredicateExpressions.RangeExpressionContains.init(range:element:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.RangeExpressionContains, a7);
}

uint64_t PredicateExpressions.RangeExpressionContains.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 24);
  v24 = *(_QWORD *)(a2 + 40);
  v22 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v23 = (char *)&v20 - v6;
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  v14 = *a1;
  v26 = v14;
  v15 = v25;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16))(&v26, v8, v7, v11);
  if (!v15)
  {
    v16 = v9;
    v17 = AssociatedTypeWitness;
    v26 = v14;
    v18 = v23;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v26, v22);
    LOBYTE(v2) = dispatch thunk of RangeExpression.contains(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v16);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.RangeExpressionContains<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.RangeExpressionContains.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

void static PredicateExpressions.build_contains<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.RangeExpressionContains, a7);
}

uint64_t PredicateExpressions.RangeExpressionContains.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(47);
  v0._object = (void *)0x800000018230DCC0;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x6E656D656C65202CLL;
  v1._object = (void *)0xEB00000000203A74;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.RangeExpressionContains<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.RangeExpressionContains<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Range<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Range<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Range<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Range<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ClosedRange<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.ClosedRange<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ClosedRange<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ClosedRange<A, B>);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.RangeExpressionContains<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.RangeExpressionContains<>.init(from:), a5, a6);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Range(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181DA3C9C + 4 * byte_182160B80[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Range(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Range<A, B>(_QWORD *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ClosedRange<A, B>(a1);
}

uint64_t dispatch thunk of static AttributeScope.decodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static AttributeScope.encodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LoadedScopeCache.ScopeType(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  if (*a1)
    v2 = *a2 == 0;
  else
    v2 = 1;
  if (v2)
    return (*a1 | *a2) == 0;
  else
    return *a1 == *a2;
}

uint64_t getEnumTagSinglePayload for LoadedScopeCache.ScopeType(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LoadedScopeCache.ScopeType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithCopy for ScopeDescription(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ScopeDescription(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t PredicateExpressions.StringContainsRegex.subject.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.StringContainsRegex.regex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.StringContainsRegex.init(subject:regex:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.StringContainsRegex();
}

uint64_t sub_181DA4248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 68), v2, v1);
}

void type metadata accessor for PredicateExpressions.StringContainsRegex()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t PredicateExpressions.StringContainsRegex.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(43);
  v0._object = (void *)0x800000018230DF40;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3A7865676572202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.StringContainsRegex.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = a2;
  v4 = a2[5];
  v23 = v2[3];
  v24 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v25 = (char *)&v21 - v6;
  v7 = v2[4];
  v8 = v2[2];
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v21 - v12;
  v14 = *a1;
  v27 = v14;
  v15 = v26;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16))(&v27, v8, v7, v11);
  if (!v15)
  {
    v26 = v10;
    v16 = v9;
    v18 = v21;
    v17 = v22;
    v27 = v14;
    v19 = v25;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v27, v23);
    LOBYTE(v2) = BidirectionalCollection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v17);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v16);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringContainsRegex<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.StringContainsRegex.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t sub_181DA45D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 68), v2, v1);
}

uint64_t type metadata accessor for PredicateExpressions.PredicateRegex(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for PredicateExpressions.PredicateRegex);
}

uint64_t PredicateExpressions.PredicateRegex.regex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v5, v7);
}

uint64_t type metadata accessor for PredicateExpressions.PredicateRegex._Storage(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for PredicateExpressions.PredicateRegex._Storage);
}

uint64_t PredicateExpressions.PredicateRegex.stringRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PredicateExpressions.PredicateRegex(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PredicateExpressions.PredicateRegex.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v22[1] = a3;
  v24 = a4;
  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Regex();
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  v23 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of RegexComponent.regex.getter();
  Regex<A>.init<A>(_:)();
  v14 = Regex._literalPattern.getter();
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (v16)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v10, v7);
    v17 = (uint64_t *)&v13[*(int *)(v11 + 20)];
    *v17 = v14;
    v17[1] = v16;
    v18 = v24;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v13, v24, type metadata accessor for PredicateExpressions.PredicateRegex);
    v19 = 0;
    v20 = v18;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v19 = 1;
    v20 = v24;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, v19, 1, v11);
}

uint64_t PredicateExpressions.PredicateRegex.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  _QWORD *v26;

  v23 = a2;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  v3 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = (uint64_t)v26;
  dispatch thunk of Decoder.singleValueContainer()();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v26 = a1;
  v21 = v8;
  v22 = v11;
  v13 = v24;
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  v14 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v15 = (uint64_t)v22;
  v16 = (uint64_t *)&v22[*(int *)(v9 + 20)];
  *v16 = v14;
  v16[1] = v17;
  swift_bridgeObjectRetain();
  Regex<A>.init(_:)();
  v18 = (uint64_t)v21;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v21, v5, v13);
  outlined init with take of ICUNumberFormatter.Signature(v18, v15, type metadata accessor for PredicateExpressions.PredicateRegex._Storage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  outlined init with copy of ICUNumberFormatter.Signature(v15, v23, type metadata accessor for PredicateExpressions.PredicateRegex);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return outlined destroy of PredicateExpressions.PredicateRegex(v15);
}

uint64_t PredicateExpressions.PredicateRegex.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  type metadata accessor for PredicateExpressions.PredicateRegex(0);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.PredicateRegex@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.PredicateRegex.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.PredicateRegex(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance PredicateExpressions.PredicateRegex@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v1, (uint64_t)v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v5, v7);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a3;
  v36 = a4;
  v32[1] = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Regex();
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  v34 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateRegex?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  v32[0] = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v33 = (uint64_t)v32 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, a2, v21);
  dispatch thunk of RegexComponent.regex.getter();
  Regex<A>.init<A>(_:)();
  v23 = v7;
  v24 = Regex._literalPattern.getter();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a2);
  if (v26)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v19, v9, v23);
    v27 = (uint64_t *)&v19[*(int *)(v17 + 20)];
    *v27 = v24;
    v27[1] = v26;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v19, (uint64_t)v16, type metadata accessor for PredicateExpressions.PredicateRegex);
    v28 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v23);
    v28 = 1;
  }
  v29 = v32[0];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32[0] + 56))(v16, v28, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of PredicateExpressions.PredicateRegex?((uint64_t)v16);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v30 = v33;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v16, v33, type metadata accessor for PredicateExpressions.PredicateRegex);
    return outlined init with take of ICUNumberFormatter.Signature(v30, v36, type metadata accessor for PredicateExpressions.PredicateRegex);
  }
  return result;
}

uint64_t outlined destroy of PredicateExpressions.PredicateRegex?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateRegex?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PredicateExpressions.StringContainsRegex<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.StringContainsRegex<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[4] = a5;
  v14[5] = a4;
  v14[8] = a3;
  v14[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[9] = v8;
  v14[10] = v8;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.StringContainsRegex();
}

uint64_t sub_181DA524C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 208) = v6;
  *(_QWORD *)(v4 - 200) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 192) = v8;
  v10 = v2;
  v11 = *(_QWORD *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  v12 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 32))(v13, v12, *(_QWORD *)(v4 - 136));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 184) + 32))(v13 + *(int *)(v14 + 68), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  v15 = *(_QWORD *)(v4 - 208);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 176), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.StringContainsRegex<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>(_QWORD *a1)
{
  return PredicateExpressions.StringContainsRegex<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringContainsRegex(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181DA55B4 + 4 * byte_1821610B0[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.StringContainsRegex(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateRegex(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateRegex()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181DA5ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateRegex()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181DA5B68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void type metadata completion function for PredicateExpressions.PredicateRegex()
{
  unint64_t v0;

  type metadata accessor for Regex<AnyRegexOutput>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Regex<AnyRegexOutput>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Regex<AnyRegexOutput>)
  {
    type metadata accessor for AnyRegexOutput();
    v0 = type metadata accessor for Regex();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Regex<AnyRegexOutput>);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateRegex._Storage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181DA5E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateRegex._Storage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181DA5E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for PredicateExpressions.PredicateRegex._Storage()
{
  unint64_t v0;

  type metadata accessor for Regex<AnyRegexOutput>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t ObjCClassFromMetadata;
  _QWORD *v13;
  void *v14;
  _QWORD v15[6];

  swift_getAssociatedTypeWitness();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a3;
  v13[5] = a4;
  v15[4] = partial apply for closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:);
  v15[5] = v13;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  v15[3] = &block_descriptor_18;
  v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_registerObjectOfClass_visibility_loadHandler_, ObjCClassFromMetadata, a2, v14);
  _Block_release(v14);
}

uint64_t sub_181DA6050()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD, _OWORD *);
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t (**)(_QWORD, _OWORD *))(v2 + 32);
  v5[1] = *(_OWORD *)(v2 + 16);
  v6 = a1;
  v7 = a2;
  return v3(partial apply for closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:), v5);
}

uint64_t closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v19 - v14, a1, v11, v13);
  v16 = *(_QWORD *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v17 = 0;
  }
  else
  {
    v17 = MEMORY[0x186DA5660](a5, a6);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, a5);
  }
  a3(v17, a2);
  return swift_unknownObjectRelease();
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(_QWORD, uint64_t);
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();
  return v5;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, id a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  id v7;

  if (a2)
  {
    v5 = a2;
    v6 = _swift_stdlib_bridgeErrorToNSError();
  }
  else
  {
    v6 = 0;
  }
  v7 = (id)v6;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

id NSItemProvider.canLoadObject<A>(ofClass:)()
{
  void *v0;

  swift_getAssociatedTypeWitness();
  return objc_msgSend(v0, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata());
}

id NSItemProvider.loadObject<A>(ofClass:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t ObjCClassFromMetadata;
  _QWORD *v11;
  void *v12;
  id v13;
  _QWORD v15[6];

  swift_getAssociatedTypeWitness();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a2;
  v11[5] = a3;
  v15[4] = partial apply for closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:);
  v15[5] = v11;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ();
  v15[3] = &block_descriptor_6_2;
  v12 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v13 = objc_msgSend(v5, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v12);
  _Block_release(v12);
  return v13;
}

uint64_t closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[2];

  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v14 - v11;
  if (a1)
  {
    v14[1] = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSItemProviderReading);
    swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v12, 0, 1, a5);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v12, 1, 1, a5);
  }
  a3(v12, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t partial apply for closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)(a1, a2, *(void (**)(char *, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_181DA6580()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t initializeWithCopy for AttributedString._InternalRuns(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AttributedString._InternalRuns(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for AttributedString._InternalRuns(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._InternalRuns(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._InternalRuns(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRuns()
{
  return &type metadata for AttributedString._InternalRuns;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._InternalRuns> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._InternalRuns>, MEMORY[0x1E0DEC908]);
}

uint64_t AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  swift_unknownObjectRetain();
  v14 = specialized Rope.find<A>(at:in:preferEnd:)(a1, a2, a3, a4, a5, a6);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  result = swift_unknownObjectRelease();
  if (v14 == a6)
  {
    if (a3)
    {
      swift_unknownObjectRetain();
      v22 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a6, v16, v18, a3, a4);
      result = swift_unknownObjectRelease();
      v23 = a1 - v20;
      if (!__OFSUB__(a1, v20))
      {
LABEL_4:
        *a7 = a6;
        a7[1] = v16;
        a7[2] = v18;
        a7[3] = v22;
        a7[4] = v23;
        a7[5] = v20;
        return result;
      }
    }
    else
    {
      v22 = 0;
      v23 = a1 - v20;
      if (!__OFSUB__(a1, v20))
        goto LABEL_4;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t AttributedString._InternalRuns.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;

  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(result + 16);
  if ((_QWORD)v7 == a5)
  {
    outlined init with take of LocalePreferences?((uint64_t)&v8, (uint64_t)v9, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    if (v10)
    {
      v6 = *(_QWORD *)(v10 + 24 * ((*((_QWORD *)&v7 + 1) >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v6 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v7 + 1), a2);
      swift_unknownObjectRelease();
    }
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString._InternalRuns.index(before:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;

  v5 = *(_OWORD *)result;
  v19 = v5;
  v6 = *(_QWORD *)(result + 24);
  v20 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)(result + 32);
  v17 = v5;
  v18 = v20;
  v8 = v6 - 1;
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  if ((_QWORD)v5 != a3)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2)
  {
    v11 = *(unsigned __int8 *)(a2 + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    v11 = 0;
  }
  result = outlined init with take of LocalePreferences?((uint64_t)&v20, (uint64_t)v21, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v11 >= *((_QWORD *)&v19 + 1))
    goto LABEL_20;
  outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v22, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v22)
  {
    v12 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
    if (((*((_QWORD *)&v19 + 1) >> v12) & 0xFLL) != 0)
    {
      v13 = ((((*((_QWORD *)&v19 + 1) >> v12) & 0xFLL) - 1) << v12) | ((-15 << v12) - 1) & *((_QWORD *)&v19 + 1);
      *((_QWORD *)&v17 + 1) = v13;
      result = swift_unknownObjectRelease();
      goto LABEL_12;
    }
  }
  swift_unknownObjectRetain();
  v14 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v17, a2);
  result = swift_unknownObjectRelease_n();
  if ((v14 & 1) != 0)
  {
    v13 = *((_QWORD *)&v17 + 1);
LABEL_12:
    if ((_QWORD)v17 == a3)
    {
      v15 = v18;
      if (v18)
      {
        v16 = *(_QWORD *)(v18 + 24 * ((v13 >> ((4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v16 = specialized Rope._Node.subscript.getter(v13, a2);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (!__OFSUB__(v7, v16))
      {
        *a4 = a3;
        a4[1] = v13;
        a4[2] = v15;
        a4[3] = v8;
        a4[4] = v7 - v16;
        return result;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRuns.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v10 = swift_unknownObjectRetain();
  v11 = specialized Rope._endPath.getter(v10);
  result = swift_unknownObjectRelease();
  if (a1)
    v13 = a3;
  else
    v13 = 0;
  if (a1)
    v14 = a2;
  else
    v14 = 0;
  *a5 = a4;
  a5[1] = v11;
  a5[2] = 0;
  a5[3] = v14;
  a5[4] = v13;
  return result;
}

uint64_t AttributedString._InternalRuns.index(after:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;

  v20 = *(_OWORD *)result;
  v7 = *(_QWORD *)(result + 24);
  v21 = *(_QWORD *)(result + 16);
  v8 = *(_QWORD *)(result + 32);
  v18 = v20;
  v19 = v21;
  v9 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((_QWORD)v20 != a5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)&v21, (uint64_t)v22, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  outlined init with take of LocalePreferences?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v23)
  {
    v14 = *(_QWORD *)(v23 + 24 * ((*((_QWORD *)&v20 + 1) >> ((4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v14 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v20 + 1), a2);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v15 = __OFADD__(v8, v14);
  v16 = v8 + v14;
  if (!v15)
  {
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v18, a2, a3, a4, a5);
    result = swift_unknownObjectRelease();
    v17 = v19;
    *(_OWORD *)a6 = v18;
    *(_QWORD *)(a6 + 16) = v17;
    *(_QWORD *)(a6 + 24) = v9;
    *(_QWORD *)(a6 + 32) = v16;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRuns.index(atRunOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;

  if (a2)
    v7 = a3;
  else
    v7 = 0;
  if (result < 0 || (v8 = result, v7 < result))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v9 = a5;
  v10 = a4;
  if (!a2 || a3 <= result || !*(_WORD *)(a2 + 16))
  {
    v24 = swift_unknownObjectRetain();
    v25 = specialized Rope._endPath.getter(v24);
    result = swift_unknownObjectRelease();
    v15 = 0;
    if (!a2)
      goto LABEL_53;
    goto LABEL_28;
  }
  v13 = *(unsigned __int8 *)(a2 + 18);
  if (!*(_BYTE *)(a2 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v27 = 0;
    v14 = v8;
    v15 = a2;
    v28 = *(unsigned __int16 *)(a2 + 16);
    if (*(_WORD *)(a2 + 16))
      goto LABEL_30;
LABEL_41:
    v29 = v14;
    goto LABEL_51;
  }
  result = swift_unknownObjectRetain_n();
  v14 = v8;
  v15 = a2;
  do
  {
    v17 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
    {
      v18 = *(_QWORD *)(v15 + 32);
      v19 = __OFSUB__(v14, v18);
      v20 = v14 - v18;
      if (v19)
        goto LABEL_59;
      if (__OFADD__(v20, 1))
        goto LABEL_60;
      if (v20 + 1 < 1)
      {
        v17 = 0;
        goto LABEL_13;
      }
      if ((_DWORD)v17 != 1)
      {
        v21 = (uint64_t *)(v15 + 56);
        v22 = 1;
        while (1)
        {
          v23 = *v21;
          v21 += 3;
          v14 = v20 - v23;
          if (__OFSUB__(v20, v23))
            break;
          if (__OFADD__(v14, 1))
            goto LABEL_57;
          if (v14 + 1 < 1)
          {
            v17 = v22;
            v14 = v20;
            goto LABEL_13;
          }
          ++v22;
          v20 = v14;
          if (v17 == v22)
            goto LABEL_12;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v14 = v20;
    }
LABEL_12:
    if (v14)
      goto LABEL_58;
LABEL_13:
    v16 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
    v13 = ((-15 << v16) - 1) & v13 | (v17 << v16);
    v15 = *(_QWORD *)(v15 + 24 + 24 * v17);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v15 + 18));
  v27 = v13 & 0xFFFFFFFFFFFFF0FFLL;
  v10 = a4;
  v9 = a5;
  v28 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
    goto LABEL_41;
LABEL_30:
  v29 = v14 - 1;
  if (__OFSUB__(v14, 1))
    goto LABEL_63;
  if (__OFADD__(v29, 1))
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    return result;
  }
  if (v14 < 1)
  {
    v28 = 0;
    goto LABEL_52;
  }
  if ((_DWORD)v28 != 1)
  {
    v30 = v28 - 2;
    if (v29 < v28 - 2)
      v30 = v14 - 1;
    if (v30 >= v14 + 0x7FFFFFFFFFFFFFFFLL)
      v30 = v14 + 0x7FFFFFFFFFFFFFFFLL;
    v31 = v30 + 1;
    if (v31 >= 5)
    {
      v33 = v31 & 3;
      if ((v31 & 3) == 0)
        v33 = 4;
      v34 = v31 - v33;
      v32 = v34 + 1;
      v35 = 0uLL;
      v36 = (int64x2_t)(unint64_t)(v14 - 1);
      v37.i64[0] = -1;
      v37.i64[1] = -1;
      do
      {
        v36 = vaddq_s64(v36, v37);
        v35 = vaddq_s64(v35, v37);
        v34 -= 4;
      }
      while (v34);
      v29 = vaddvq_s64(vaddq_s64(v35, v36));
    }
    else
    {
      v32 = 1;
    }
    while (v14 + 0x8000000000000000 != v32)
    {
      if (v14 == v32)
      {
        v28 = v14;
        goto LABEL_52;
      }
      ++v32;
      --v29;
      if (v28 == v32)
        goto LABEL_51;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
LABEL_51:
  if (v29)
    goto LABEL_65;
LABEL_52:
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  v25 = v27 | (v28 << 8);
  if (a2)
  {
LABEL_28:
    swift_unknownObjectRetain();
    v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v25, v15, a2, a3, v10);
    result = swift_unknownObjectRelease();
    goto LABEL_54;
  }
LABEL_53:
  v26 = 0;
LABEL_54:
  *a6 = v9;
  a6[1] = v25;
  a6[2] = v15;
  a6[3] = v8;
  a6[4] = v26;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32) >= *(_QWORD *)(a1 + 32);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) >= *(_QWORD *)(a2 + 32);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32) < *(_QWORD *)(a1 + 32);
}

_QWORD *AttributedString._InternalRuns.formIndex(after:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = result[3];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = result;
  result[3] = v7;
  if (*result != a5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = result[1];
  v13 = result[2];
  if (v13)
  {
    v15 = *(_QWORD *)(v13 + 24 * ((v14 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v15 = specialized Rope._Node.subscript.getter(v14, a2);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  v16 = v9[4];
  v6 = __OFADD__(v16, v15);
  v17 = v16 + v15;
  if (!v6)
  {
    v9[4] = v17;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(v9, a2, a3, a4, a5);
    return (_QWORD *)swift_unknownObjectRelease();
  }
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *AttributedString._InternalRuns.formIndex(before:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = result[3];
  v6 = __OFSUB__(v5, 1);
  v7 = v5 - 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_18;
  }
  v8 = a5;
  v9 = result;
  result[3] = v7;
  if (*result != a5)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = result[1];
  if (!a2)
  {
    if (v11)
      goto LABEL_5;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = *(unsigned __int8 *)(a2 + 18);
  swift_unknownObjectRetain();
  if (v12 >= v11)
    goto LABEL_13;
LABEL_5:
  v13 = v9[2];
  if (v13 && specialized closure #1 in Rope.formIndex(before:)(v13 + 16, (uint64_t)v9))
  {
    result = (_QWORD *)swift_unknownObjectRelease();
    goto LABEL_9;
  }
  swift_unknownObjectRetain();
  v14 = specialized Rope._Node.formPredecessor(of:)((uint64_t)v9, a2);
  result = (_QWORD *)swift_unknownObjectRelease_n();
  if ((v14 & 1) != 0)
  {
LABEL_9:
    if (*v9 == v8)
    {
      v8 = v9[1];
      v15 = v9[2];
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 24 * ((v8 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      }
LABEL_14:
      swift_unknownObjectRetain();
      v16 = specialized Rope._Node.subscript.getter(v8, a2);
      swift_unknownObjectRelease();
LABEL_15:
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      v17 = v9[4];
      v6 = __OFSUB__(v17, v16);
      v18 = v17 - v16;
      if (!v6)
      {
        v9[4] = v18;
        return result;
      }
      goto LABEL_20;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRuns.index(_:offsetBy:limitedBy:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v8 = a7;
  v12 = a2;
  v15 = *a1;
  if (a2 < 0)
  {
    v16 = a1[4];
    if (v16 >= a3[4])
      goto LABEL_11;
  }
  else
  {
    v16 = a1[4];
    if (a3[4] >= v16)
    {
      v34 = a1[2];
      v37 = a1[1];
      v30 = a3[1];
      v32 = *a3;
      v28 = a3[2];
      swift_unknownObjectRetain();
      v17 = v8;
      v18 = specialized Rope.distance<A>(from:to:in:)(v15, v37, v34, v32, v30, v28, a4, a5, a6, v8);
      result = swift_unknownObjectRelease();
      if (v18 >= v12)
        goto LABEL_7;
LABEL_12:
      v22 = 0;
      a6 = 0;
      v25 = 0;
      v26 = 0;
      v8 = 1;
LABEL_13:
      *a8 = v22;
      a8[1] = a6;
      a8[2] = v8;
      a8[3] = v25;
      a8[4] = v26;
      return result;
    }
  }
  v17 = a7;
LABEL_7:
  while (1)
  {
    v38 = v16;
    v40 = v15;
    v35 = a8;
    v20 = a6;
    v41 = v12;
    v42 = v12;
    v12 = a5;
    v21 = a1[1];
    a5 = a1[2];
    v43 = v15;
    v44 = v21;
    v45 = a5;
    swift_unknownObjectRetain();
    v15 = v17;
    specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v43, &v42, 0, a4, v12, a6, v17);
    swift_unknownObjectRelease();
    v22 = v43;
    a6 = v44;
    v8 = v45;
    swift_unknownObjectRetain();
    v16 = specialized Rope.distance<A>(from:to:in:)(v40, v21, a5, v22, a6, v8, a4, v12, v20, v15);
    result = swift_unknownObjectRelease();
    v23 = a1[3];
    v24 = __OFADD__(v23, v41);
    v25 = v23 + v41;
    if (v24)
      break;
    a8 = v35;
    v26 = v38 + v16;
    if (!__OFADD__(v38, v16))
      goto LABEL_13;
    __break(1u);
LABEL_11:
    v36 = a1[2];
    v39 = a1[1];
    v31 = a3[1];
    v33 = *a3;
    v29 = a3[2];
    swift_unknownObjectRetain();
    v17 = v8;
    v27 = specialized Rope.distance<A>(from:to:in:)(v15, v39, v36, v33, v31, v29, a4, a5, a6, v8);
    result = swift_unknownObjectRelease();
    if (v27 > v12)
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns(a1, (void (*)(_OWORD *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))AttributedString._InternalRuns.index(before:), a2);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString._InternalRuns(_QWORD *a1)
{
  uint64_t v1;

  return AttributedString._InternalRuns.formIndex(before:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void protocol witness for Collection.startIndex.getter in conformance AttributedString._InternalRuns(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*v1)
    v2 = *(unsigned __int8 *)(v2 + 18);
  *a1 = v1[3];
  a1[1] = v2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._InternalRuns@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = swift_unknownObjectRetain();
  v8 = specialized Rope._endPath.getter(v7);
  result = swift_unknownObjectRelease();
  if (v3)
    v10 = v6;
  else
    v10 = 0;
  if (v3)
    v11 = v4;
  else
    v11 = 0;
  *a1 = v5;
  a1[1] = v8;
  a1[2] = 0;
  a1[3] = v11;
  a1[4] = v10;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t *v2;
  char *v5;
  __int128 v6;
  void (*v7)(void **);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (char *)malloc(0x68uLL);
  *a1 = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *((_OWORD *)v5 + 1) = v6;
  *((_QWORD *)v5 + 4) = *(_QWORD *)(a2 + 32);
  v7 = AttributedString._InternalRuns.subscript.read((void (**)(void **))v5 + 5, (uint64_t)v5, *v2, v2[1], v2[2], v2[3]);
  *((_QWORD *)v5 + 9) = v8;
  v5 += 72;
  *((_QWORD *)v5 + 2) = v9;
  *((_QWORD *)v5 + 3) = v7;
  *((_QWORD *)v5 + 1) = v10;
  return protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns;
}

void protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 40);
  free(v1);
}

void (*AttributedString._InternalRuns.subscript.read(void (**a1)(void **a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(void **a1)
{
  void (*result)(void **);
  void (*v11)(void **);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  *(_OWORD *)result = *(_OWORD *)a2;
  *((_QWORD *)result + 2) = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)result == a6)
  {
    v11 = result;
    v12 = (uint64_t)result + 24;
    v13 = (uint64_t)result + 32;
    outlined init with take of LocalePreferences?((uint64_t)result + 16, (uint64_t)result + 32, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    outlined init with take of LocalePreferences?(v13, v12, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    v14 = *((_QWORD *)v11 + 3);
    if (v14)
    {
      v15 = v14 + 24 * ((*((_QWORD *)v11 + 1) >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xFLL);
      v16 = *(_QWORD *)(v15 + 32);
      v17 = *(_QWORD *)(v15 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v18 = *((_QWORD *)v11 + 1);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v18, a3);
      v16 = v19;
      v17 = v20;
      swift_unknownObjectRelease();
    }
    *((_QWORD *)v11 + 5) = v16;
    *((_QWORD *)v11 + 6) = v17;
    return AttributedString._InternalRuns.subscript.read;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AttributedString._InternalRuns.subscript.read(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._InternalRuns@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];

  v3 = a1[3];
  v6[2] = a1[2];
  v6[3] = v3;
  v6[4] = a1[4];
  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return specialized Collection<>.subscript.getter((uint64_t)v6, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._InternalRuns@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return specialized Collection<>.indices.getter(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AttributedString._InternalRuns()
{
  _QWORD *v0;
  BOOL v1;
  uint64_t v2;
  unint64_t v3;

  if (*v0)
    v1 = v0[2] == 0;
  else
    v1 = 1;
  v2 = v1;
  v3 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v3);
  swift_unknownObjectRelease();
  return v2;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString._InternalRuns(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 2;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString._InternalRuns@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v6 = a1[1];
  v7 = a1[2];
  v20 = a1[3];
  v9 = *v3;
  v8 = v3[1];
  v17 = a1[4];
  v18 = v8;
  v11 = v3[2];
  v10 = v3[3];
  v22 = *a1;
  v5 = v22;
  v23 = v6;
  v24 = v7;
  v21 = a2;
  swift_unknownObjectRetain();
  specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v22, &v21, 0, v9, v8, v11, v10);
  swift_unknownObjectRelease();
  v12 = v22;
  v13 = v23;
  v14 = v24;
  swift_unknownObjectRetain();
  v15 = specialized Rope.distance<A>(from:to:in:)(v5, v6, v7, v12, v13, v14, v9, v18, v11, v10);
  result = swift_unknownObjectRelease();
  if (__OFADD__(v20, a2))
  {
    __break(1u);
  }
  else if (!__OFADD__(v17, v15))
  {
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
    a3[3] = v20 + a2;
    a3[4] = v17 + v15;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString._InternalRuns@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7[5];

  AttributedString._InternalRuns.index(_:offsetBy:limitedBy:)(a1, a2, a3, *(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v7);
  return outlined init with take of LocalePreferences?((uint64_t)v7, a4, &demangling cache variable for type metadata for AttributedString._InternalRuns.Index?);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString._InternalRuns(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = *v2;
  v10 = v2[1];
  v12 = v2[2];
  v11 = v2[3];
  swift_unknownObjectRetain();
  v13 = specialized Rope.distance<A>(from:to:in:)(v3, v4, v5, v6, v7, v8, v9, v10, v12, v11);
  swift_unknownObjectRelease();
  return v13;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString._InternalRuns(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(a2 + 72);
  if (v2 >= *(_QWORD *)(a2 + 32))
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  if (v2 < *(_QWORD *)(a2 + 32) || *(_QWORD *)(a2 + 72) < v2)
    __break(1u);
  return result;
}

{
  if (*(_QWORD *)(result + 32) < *(_QWORD *)(a2 + 32) || *(_QWORD *)(a2 + 72) < *(_QWORD *)(result + 72))
    __break(1u);
  return result;
}

double protocol witness for Collection.index(after:) in conformance AttributedString._InternalRuns@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns(a1, (void (*)(_OWORD *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))AttributedString._InternalRuns.index(after:), a2);
}

double protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns@<D0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  double result;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;

  a2(v7, a1, *v3, v3[1], v3[2], v3[3]);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = v8;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance AttributedString._InternalRuns(_QWORD *a1)
{
  uint64_t *v1;

  return AttributedString._InternalRuns.formIndex(after:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void protocol witness for Sequence.makeIterator() in conformance AttributedString._InternalRuns(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[2];
  v2 = v1[3];
  v4 = *v1;
  if (*v1)
    v4 = *(unsigned __int8 *)(v4 + 18);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString._InternalRuns()
{
  _QWORD *v0;

  if (*v0)
    return v0[1];
  else
    return 0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._InternalRuns()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._InternalRuns(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._InternalRuns@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K4RunsVABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRuns, &type metadata for AttributedString._InternalRuns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRuns, &type metadata for AttributedString._InternalRuns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRuns, &type metadata for AttributedString._InternalRuns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRuns.Index, &type metadata for AttributedString._InternalRuns.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRuns.Index, &type metadata for AttributedString._InternalRuns.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRuns> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRuns>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRuns> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRuns>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRuns>, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRuns> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRuns>, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = lazy protocol witness table accessor for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns();
    result = MEMORY[0x186DA9D64](a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized closure #1 in AttributedString._InternalRuns.updateAndCoalesce(at:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *a3 = v6;
  a3[1] = v7;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized Rope.remove(at:)(uint64_t *a1)
{
  unint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = specialized Rope._remove(at:)((uint64_t)&v9, *a1, a1[1]);
  v4 = *v1;
  v5 = v1[3];
  if (v3 >= specialized Rope._endPath.getter(*v1))
  {
    v4 = 0;
  }
  else if (*(_BYTE *)(v4 + 18))
  {
    v6 = (v3 >> ((4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    v7 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v4 + 24, v6, v3);
    swift_unknownObjectRelease();
    v4 = v7;
  }
  *a1 = v5;
  a1[1] = v3;
  a1[2] = v4;
  return v9;
}

uint64_t specialized static Rope._Node.redistributeChildren(_:_:to:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v22;
  BOOL v23;

  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v6 = specialized Rope._Node.copy()(*a1);
    v8 = v7;
    v10 = v9;
    swift_unknownObjectRelease();
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
  }
  result = swift_isUniquelyReferenced_nonNull();
  v12 = *a2;
  if ((result & 1) == 0)
  {
    v12 = specialized Rope._Node.copy()(*a2);
    v14 = v13;
    v16 = v15;
    result = swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }
  v17 = *(unsigned __int16 *)(*a1 + 16);
  v18 = *(unsigned __int16 *)(v12 + 16) + v17;
  if (v18 >= a3)
    v18 = a3;
  v19 = v18 - v17;
  if (__OFSUB__(v18, v17))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v19)
    return result;
  if (v19 <= 0)
  {
    v23 = __OFSUB__(0, v19);
    v19 = v17 - v18;
    if (!v23)
    {
      v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:);
      v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:);
      v22 = a1;
      return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v22, v19, v20, v21);
    }
LABEL_16:
    __break(1u);
    return result;
  }
  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:);
  v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:);
  v22 = a2;
  return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v22, v19, v20, v21);
}

uint64_t specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(uint64_t *a1, uint64_t a2)
{
  return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:));
}

uint64_t specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = *v4;
  v10 = *(unsigned __int8 *)(*v4 + 18);
  v11 = *v4 + 24;
  v12 = *a1;
  v13 = *a1 + 24;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v14 = v9 + 16;
  v15 = v12 + 16;
  if (v10)
    v16 = a4(v15, v13, a2, v14, v11);
  else
    v16 = a3(v15, v13, a2, v14, v11);
  v18 = v16;
  v19 = v17;
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  v21 = v4[1];
  v22 = __OFADD__(v21, v18);
  v23 = v21 + v18;
  if (v22)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4[1] = v23;
  v24 = v4[2];
  v22 = __OFADD__(v24, v19);
  v25 = v24 + v19;
  if (v22)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v4[2] = v25;
  v26 = a1[1];
  v22 = __OFSUB__(v26, v18);
  v27 = v26 - v18;
  if (v22)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  a1[1] = v27;
  v28 = a1[2];
  v22 = __OFSUB__(v28, v19);
  v29 = v28 - v19;
  if (!v22)
  {
    a1[2] = v29;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:)(_WORD *a1, char *__dst, uint64_t a3, _WORD *a4, uint64_t a5)
{
  char *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *i;
  uint64_t v24;

  if (a3 < 1)
    return 0;
  v10 = (char *)(a5 + 24 * (unsigned __int16)*a4);
  v11 = &__dst[24 * a3];
  if (v10 != __dst || v10 >= v11)
    memmove(v10, __dst, 24 * a3);
  v13 = (unsigned __int16)*a1 - a3;
  if (v13 < 0)
    goto LABEL_32;
  memmove(__dst, v11, 24 * v13);
  v14 = (unsigned __int16)*a4;
  v15 = __OFADD__(v14, a3);
  v16 = v14 + a3;
  if (v15)
    goto LABEL_28;
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v16 >> 16)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  *a4 = v16;
  v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = 0;
  *a1 = v17;
  v19 = (unsigned __int16)*a4;
  v20 = v19 - a3;
  if (v19 < a3)
    v20 = 0;
  if (v20 != v19)
  {
    v21 = 0;
    result = 0;
    if (a3 >= v19)
      v22 = (unsigned __int16)*a4;
    else
      v22 = a3;
    for (i = (_QWORD *)(24 * (unsigned __int16)*a4 - 24 * v22 + a5 + 16); ; i += 3)
    {
      v24 = *(i - 1);
      v15 = __OFADD__(result, v24);
      result += v24;
      if (v15)
        break;
      v15 = __OFADD__(v21, *i);
      v21 += *i;
      if (v15)
        goto LABEL_27;
      if (!--v22)
        return result;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

{
  char *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *i;

  if (a3 < 1)
    return 0;
  v10 = (char *)(a5 + 24 * (unsigned __int16)*a4);
  v11 = &__dst[24 * a3];
  if (v10 != __dst || v10 >= v11)
    memmove(v10, __dst, 24 * a3);
  v13 = (unsigned __int16)*a1 - a3;
  if (v13 < 0)
    goto LABEL_32;
  memmove(__dst, v11, 24 * v13);
  v14 = (unsigned __int16)*a4;
  v15 = __OFADD__(v14, a3);
  v16 = v14 + a3;
  if (v15)
    goto LABEL_28;
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v16 >> 16)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  *a4 = v16;
  v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = 0;
  *a1 = v17;
  v19 = (unsigned __int16)*a4;
  v20 = v19 - a3;
  if (v19 < a3)
    v20 = 0;
  if (v20 != v19)
  {
    v21 = 0;
    v22 = 0;
    if (a3 >= v19)
      v23 = (unsigned __int16)*a4;
    else
      v23 = a3;
    for (i = (_QWORD *)(a5 + 24 * (unsigned __int16)*a4 - 24 * v23); ; i += 3)
    {
      result = v21 + 1;
      if (__OFADD__(v21, 1))
        break;
      v15 = __OFADD__(v22, *i);
      v22 += *i;
      if (v15)
        goto LABEL_27;
      if (v23 == ++v21)
        return result;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

char *specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, char *__src)
{
  char *result;
  unint64_t v11;
  char *v12;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *i;
  uint64_t v21;

  if (a3 < 1)
    return 0;
  result = (char *)memmove(&__src[24 * a3], __src, 24 * (unsigned __int16)*a4);
  v11 = a2 + 24 * (unsigned __int16)*a1;
  v12 = (char *)(v11 - 24 * a3);
  if (v11 <= (unint64_t)__src || v12 != __src)
    result = (char *)memmove(__src, v12, 24 * a3);
  v14 = (unsigned __int16)*a4;
  v15 = __OFADD__(v14, a3);
  v16 = v14 + a3;
  if (v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v16 >> 16)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *a4 = v16;
  v17 = (unsigned __int16)*a1 - a3;
  if (v17 >= 0)
  {
    *a1 = v17;
    v18 = (unsigned __int16)*a4;
    if (v18 >= a3)
      v18 = a3;
    if (v18)
    {
      v19 = 0;
      result = 0;
      for (i = __src + 16; ; i += 3)
      {
        v21 = *(i - 1);
        v15 = __OFADD__(result, v21);
        result += v21;
        if (v15)
          break;
        v15 = __OFADD__(v19, *i);
        v19 += *i;
        if (v15)
          goto LABEL_21;
        if (!--v18)
          return result;
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    return 0;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, char *__src)
{
  _QWORD *v5;
  uint64_t result;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a3 < 1)
    return 0;
  v5 = __src;
  result = (uint64_t)memmove(&__src[24 * a3], __src, 24 * (unsigned __int16)*a4);
  v11 = a2 + 24 * (unsigned __int16)*a1;
  v12 = (_QWORD *)(v11 - 24 * a3);
  if (v11 <= (unint64_t)v5 || v12 != v5)
    result = (uint64_t)memmove(v5, v12, 24 * a3);
  v14 = (unsigned __int16)*a4;
  v15 = __OFADD__(v14, a3);
  v16 = v14 + a3;
  if (v15)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v16 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *a4 = v16;
  v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  *a1 = v17;
  v18 = 0;
  if ((unsigned __int16)*a4 >= a3)
    result = a3;
  else
    result = (unsigned __int16)*a4;
  if (result)
  {
    v19 = 0x7FFFFFFFFFFFFFFFLL;
    v20 = result;
    while (v19)
    {
      v15 = __OFADD__(v18, *v5);
      v18 += *v5;
      if (v15)
        goto LABEL_23;
      --v19;
      v5 += 3;
      if (!--v20)
        return result;
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

uint64_t specialized Rope._UnsafeHandle._removeChild(at:)(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;

  v3 = (unsigned __int16)*a2;
  v4 = __OFSUB__(v3, a1);
  v5 = v3 - a1;
  if (v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = __OFSUB__(v5, 1);
  v6 = v5 - 1;
  if (v4)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = (uint64_t *)(a3 + 24 * a1);
    v9 = *v8;
    memmove(v8, v8 + 3, 24 * v6);
    if (*a2)
    {
      --*a2;
      return v9;
    }
    goto LABEL_8;
  }
LABEL_9:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.fixDeficiency(on:)(unsigned __int16 *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *a1;
  if (v3 < 2)
    return 1;
  v7 = *((unsigned __int8 *)a1 + 2);
  v8 = ((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF;
  if (!v8)
  {
    v20 = *(unsigned __int16 *)(*a2 + 16);
    v14 = a2 + 3;
    v15 = v20 + *(unsigned __int16 *)(a2[3] + 16);
    if (v15 > 0xF)
    {
      specialized static Rope._Node.redistributeChildren(_:_:to:)(a2, v14, v15 >> 1);
      return 0;
    }
    v13 = 1;
LABEL_16:
    specialized static Rope._Node.redistributeChildren(_:_:to:)(&a2[3 * v8], v14, v15);
    specialized Rope._UnsafeHandle._removeChild(at:)(v13, a1, (uint64_t)a2);
    swift_unknownObjectRelease();
    return 0;
  }
  v9 = &a2[3 * (int)v8 - 3];
  v10 = *(unsigned __int16 *)(*v9 + 16);
  v11 = &a2[3 * (((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF)];
  v12 = *(unsigned __int16 *)(*v11 + 16);
  if ((unint64_t)(v12 + v10) < 0x10)
  {
    specialized static Rope._Node.redistributeChildren(_:_:to:)(v9, &a2[3 * (((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF)], v12 + v10);
    specialized Rope._UnsafeHandle._removeChild(at:)(v8, a1, (uint64_t)a2);
    result = swift_unknownObjectRelease();
    if (((v7 - 1) & 0xFFFFFF00) == 0)
    {
      v21 = *a3 & ((-15 << ((4 * v7 + 8) & 0x3C)) - 1) | ((v8 - 1) << ((4 * v7 + 8) & 0x3C));
      v19 = ((((v21 >> ((4 * (v7 - 1) + 8) & 0x3C)) & 0xF) + v10) << ((4 * (v7 - 1) + 8) & 0x3C)) | v21 & ((-15 << ((4 * (v7 - 1) + 8) & 0x3C)) - 1);
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_19;
  }
  v13 = v8 + 1;
  if (v8 + 1 < v3)
  {
    v14 = &a2[3 * v13];
    v15 = v12 + *(unsigned __int16 *)(*v14 + 16);
    if (v15 <= 0xF)
      goto LABEL_16;
  }
  result = specialized static Rope._Node.redistributeChildren(_:_:to:)(v9, &a2[3 * v8], (unint64_t)(v12 + v10) >> 1);
  if (((v7 - 1) & 0xFFFFFF00) == 0)
  {
    v17 = (4 * (v7 - 1) + 8) & 0x3C;
    v18 = (((unint64_t)*a3 >> v17) & 0xF) - v12 + *(unsigned __int16 *)(*v11 + 16);
    if (v18 >= 0)
    {
      v19 = (v18 << v17) | *a3 & ((-15 << v17) - 1);
LABEL_14:
      *a3 = v19;
      return 1;
    }
    goto LABEL_20;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24 * a2);
  if (!*(_BYTE *)(v3 + 18))
    return *(_QWORD *)(a1 + 24 * a2);
  v5 = (a3 >> ((4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C)) & 0xF;
  swift_unknownObjectRetain();
  v6 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v3 + 24, v5, a3);
  swift_unknownObjectRelease();
  return v6;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRuns.Index()
{
  return &type metadata for AttributedString._InternalRuns.Index;
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TY0_()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v5;
    *v5 = v0;
    v5[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TQ1_;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TQ1_(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 0x1FF);
  if (*(_QWORD *)(v4 + 24))
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY0_()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v5;
    *v5 = v0;
    v5[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TQ1_;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TQ1_(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 0x1FF);
  if (*(_QWORD *)(v4 + 24))
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY2_()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(void **a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *a1;
  v6[0] = 0;
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v1, v6);
  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    if (v6[0])
    {
      v6[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v4 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v2;
}

uint64_t URL.AsyncBytes.AsyncIterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t URL.AsyncBytes.AsyncIterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*URL.AsyncBytes.AsyncIterator.buffer.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t URL.AsyncBytes.AsyncIterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v10;
  id v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;

  v1 = *(void **)(v0 + 104);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = _foundation_swift_url_feature_enabled();
  v4 = *(void **)(v0 + 104);
  if (!v3)
  {
    v8 = objc_msgSend(*(id *)(v0 + 104), sel_isFileURL);

    goto LABEL_9;
  }
  URL.scheme.getter();
  if (!v5)
  {

    swift_release();
    swift_release();
    goto LABEL_13;
  }
  v6 = String.lowercased()();
  swift_bridgeObjectRelease();
  v7 = *(void **)(v0 + 104);
  if (v6._countAndFlagsBits != 1701603686 || v6._object != (void *)0xE400000000000000)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();

LABEL_9:
    swift_release();
    swift_release();
    if ((v8 & 1) != 0)
      goto LABEL_10;
LABEL_13:
    v10 = *(_QWORD *)(v0 + 120);
    v16 = *(_OWORD *)(v0 + 104);
    v11 = objc_msgSend((id)objc_opt_self(), sel_sharedSession);
    *(_QWORD *)(v0 + 136) = v11;
    type metadata accessor for NSURLSession.CancelState();
    inited = swift_initStackObject();
    *(_QWORD *)(v0 + 144) = inited;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
    v13 = swift_initStackObject();
    *(_QWORD *)(v0 + 152) = v13;
    *(_DWORD *)(v13 + 32) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(inited + 16) = v13;
    v14 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v14;
    *(_QWORD *)(v14 + 16) = v11;
    *(_OWORD *)(v14 + 24) = v16;
    *(_QWORD *)(v14 + 40) = v10;
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = inited;
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
    *v15 = v0;
    v15[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
LABEL_10:
  if (one-time initialization token for default != -1)
    swift_once();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  void *v6[4];

  v1 = (void *)v0[14];
  v2 = (void *)v0[15];
  v3 = (void *)v0[13];
  type metadata accessor for NSFileHandle();
  v6[0] = v3;
  v6[1] = v1;
  v6[2] = v2;
  v4 = v3;
  swift_retain();
  swift_retain();
  v0[16] = @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(v6);
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  int *v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD);

  v1 = (void *)v0[16];
  type metadata accessor for _AsyncBytesBuffer.Storage();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  v3 = v1;
  v4 = objc_msgSend(v3, sel_fileDescriptor);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = v3;
  v7 = swift_dynamicCastClassUnconditional();
  v8 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = &async function pointer to partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
  *(_QWORD *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);

  swift_unknownObjectRelease();
  v9 = (uint64_t *)v0[12];
  *v9 = v2;
  v9[1] = v2 + 33;
  v9[2] = v2 + 33;
  result = swift_dynamicCastClassUnconditional();
  v11 = *(int **)(result + 16);
  v0[23] = v11;
  v0[24] = *(_QWORD *)(result + 24);
  if (v11)
  {
    v13 = (uint64_t (*)(_QWORD))((char *)v11 + *v11);
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc();
    v0[25] = v12;
    *v12 = v0;
    v12[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
    return v13(v0[12]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  int *v23;
  _QWORD *v24;
  uint64_t (*v25)(_QWORD);

  v1 = *(void **)(v0 + 136);
  swift_release();

  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(void **)(v0 + 88);
  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (!v4)
    goto LABEL_10;
  v5 = (void *)v4;
  v6 = (void *)objc_opt_self();
  v7 = v3;
  if (objc_msgSend(v6, sel_isErrorStatusCode_, objc_msgSend(v5, sel_statusCode)))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain"));
    v8 = objc_allocWithZone((Class)NSError);
    v9 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, -1011, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v11 = objc_msgSend(v10, sel_domain);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain")) && v14 == v15)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v3 = v15;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    swift_willThrow();

    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_9:

LABEL_10:
  type metadata accessor for _AsyncBytesBuffer.Storage();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 32) = 0;
  swift_retain_n();
  v19 = swift_dynamicCastClassUnconditional();
  v20 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v19 + 16) = &async function pointer to partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(_QWORD *)(v19 + 24) = v2;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v20);
  swift_release_n();

  swift_unknownObjectRelease();
  v21 = *(uint64_t **)(v0 + 96);
  *v21 = v18;
  v21[1] = v18 + 33;
  v21[2] = v18 + 33;
  result = swift_dynamicCastClassUnconditional();
  v23 = *(int **)(result + 16);
  *(_QWORD *)(v0 + 184) = v23;
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(result + 24);
  if (v23)
  {
    v25 = (uint64_t (*)(_QWORD))((char *)v23 + *v23);
    swift_retain();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v24;
    *v24 = v0;
    v24[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
    return v25(*(_QWORD *)(v0 + 96));
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  swift_release();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 216));
}

{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 216) = a1;
  return swift_task_switch();
}

uint64_t _s10Foundation3URLV10AsyncBytesV0C8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5Tu);
  v7 = (_QWORD *)swift_task_alloc();
  v4[4] = v7;
  *v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

uint64_t URL.AsyncBytes.makeAsyncIterator()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  type metadata accessor for _AsyncBytesBuffer.Storage();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v1;
  v5[4] = v3;
  swift_retain();
  v6 = v2;
  swift_retain();
  v7 = swift_dynamicCastClassUnconditional();
  v8 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = &async function pointer to partial apply for closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  *(_QWORD *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);
  return v4;
}

uint64_t partial apply for closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v7 = *(_OWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(_QWORD *)(v5 + 120) = v4;
  *(_OWORD *)(v5 + 104) = v7;
  *(_QWORD *)(v5 + 96) = a1;
  return swift_task_switch();
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance URL.AsyncBytes(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  type metadata accessor for _AsyncBytesBuffer.Storage();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v5;
  swift_retain();
  v8 = v4;
  swift_retain();
  v9 = swift_dynamicCastClassUnconditional();
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = &closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)partial apply;
  *(_QWORD *)(v9 + 24) = v7;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v10);
  swift_release();
  swift_release();

  *a1 = v6;
  a1[1] = v6 + 33;
  a1[2] = v6 + 33;
}

uint64_t URL.resourceBytes.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  a1[2] = v4;
  swift_retain();
  v5 = v3;
  return swift_retain();
}

uint64_t URL.lines.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  a1[2] = v4;
  swift_retain();
  v5 = v3;
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator;
  if (!lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.AsyncBytes.AsyncIterator, &type metadata for URL.AsyncBytes.AsyncIterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator);
  }
  return result;
}

uint64_t destroy for URL.AsyncBytes(id *a1)
{

  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for URL.AsyncBytes(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for URL.AsyncBytes(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for URL.AsyncBytes(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for URL.AsyncBytes()
{
  return &type metadata for URL.AsyncBytes;
}

ValueMetadata *type metadata accessor for URL.AsyncBytes.AsyncIterator()
{
  return &type metadata for URL.AsyncBytes.AsyncIterator;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)partial apply(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v7 = *(_OWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(_QWORD *)(v5 + 120) = v4;
  *(_OWORD *)(v5 + 104) = v7;
  *(_QWORD *)(v5 + 96) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #2 in NSURLSession.bytes(from:delegate:)()
{
  uint64_t v0;

  return closure #2 in NSURLSession.bytes(from:delegate:)(v0);
}

unint64_t type metadata accessor for NSFileHandle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSFileHandle;
  if (!lazy cache variable for type metadata for NSFileHandle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileHandle);
  }
  return result;
}

uint64_t sub_181DA9F20()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t FloatingPointFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Currency.format(_:)(a1, a2, (uint64_t)type metadata accessor for ICUCurrencyNumberFormatter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t FloatingPointFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  void (*v13)(_QWORD, __n128);
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13(0, v10);
  v14 = *(_QWORD *)(a2 + 24);
  if (!a4(v4, v8, v14))
  {
    v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
LABEL_4:
    v15(v12, a1, v8);
    specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v12, v8, v14);
    return Double.description.getter();
  }
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
  v15(v12, a1, v8);
  specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v12, v8, v14);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  v17 = swift_retain_n();
  MEMORY[0x1E0C80A78](v17);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v20[-64], v21);
  v18 = v21[0];
  v19 = v21[1];
  swift_release();
  swift_release_n();
  if (!v19)
    goto LABEL_4;
  return v18;
}

uint64_t FloatingPointFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 FloatingPointFormatStyle.locale.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*FloatingPointFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v3, a1);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static FloatingPointFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for FloatingPointFormatStyle.CodingKeys, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.CodingKeys);
}

Swift::Int FloatingPointFormatStyle.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.hash(into:));
}

uint64_t FloatingPointFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;

  v32 = a4;
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v7);
  v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FloatingPointFormatStyle.CodingKeys(255, a2, a3, v9);
  v35 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.CodingKeys, v10);
  v34 = type metadata accessor for KeyedDecodingContainer();
  v30 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v12 = (char *)&v29 - v11;
  v14 = type metadata accessor for FloatingPointFormatStyle(0, a2, a3, v13);
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (_OWORD *)((char *)&v29 - v15);
  v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = 0;
  *((_QWORD *)v18 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v18 + 7) = 0;
  *((_QWORD *)v18 + 8) = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  v19 = &v18[v7[9]];
  v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = &v18[v7[10]];
  *(_QWORD *)v21 = 0;
  v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v33 = v12;
  v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v18, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    v23 = v30;
    v24 = (uint64_t)v31;
    v36 = v14;
    v25 = v32;
    v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    v26 = v29;
    v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointFormatStyle.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>(_QWORD *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t (*FloatingPointFormatStyle.Percent.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

uint64_t FloatingPointFormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, v5, a4);
  v11 = a5 + *(int *)(a4 + 36);
  v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    v17 = v11 + *(int *)(v12 + 40);
    *(_QWORD *)v17 = a2;
    *(_BYTE *)(v17 + 8) = 1;
  }
  return result;
}

uint64_t static FloatingPointFormatStyle.Percent.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.Percent.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent.CodingKeys);
}

Swift::Int FloatingPointFormatStyle.Percent.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Percent.hash(into:));
}

uint64_t FloatingPointFormatStyle.Percent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;

  v32 = a4;
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v7);
  v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys(255, a2, a3, v9);
  v35 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent.CodingKeys, v10);
  v34 = type metadata accessor for KeyedDecodingContainer();
  v30 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v12 = (char *)&v29 - v11;
  v14 = type metadata accessor for FloatingPointFormatStyle.Percent(0, a2, a3, v13);
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (_OWORD *)((char *)&v29 - v15);
  v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  v19 = &v18[v7[9]];
  v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)v18 = 0x4059000000000000;
  v18[8] = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = 0;
  *((_QWORD *)v18 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v18 + 7) = 0;
  *((_QWORD *)v18 + 8) = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  v21 = &v18[v7[10]];
  *(_QWORD *)v21 = 0;
  v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v33 = v12;
  v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v18, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    v23 = v30;
    v24 = (uint64_t)v31;
    v36 = v14;
    v25 = v32;
    v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    v26 = v29;
    v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointFormatStyle.Percent.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Percent(_QWORD *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Percent.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Percent(__int128 *a1, __int128 *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Percent.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t (*FloatingPointFormatStyle.Currency.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.Currency.currencyCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FloatingPointFormatStyle.Currency.init(code:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  *(_OWORD *)a6 = *a3;
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  v6 = a6 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, a4, a5, a4) + 40);
  v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v8 = v6 + v7[9];
  v9 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  v11 = v6 + v7[10];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

uint64_t FloatingPointFormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 73) = v6;
  return result;
}

__n128 FloatingPointFormatStyle.Currency.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __n128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a1[1];
  v12 = *a1;
  v10 = (__n128)a1[2];
  v6 = *((_QWORD *)a1 + 6);
  v7 = *((_BYTE *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v8 = a3 + *(int *)(a2 + 40);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  if (v7)
    v11 = 256;
  else
    v11 = 0;
  v12 = v11 | v6;
  if (v8)
    v13 = 0x10000;
  else
    v13 = 0;
  if (v9)
    v14 = 0x1000000;
  else
    v14 = 0;
  *(_DWORD *)(a3 + *(int *)(a2 + 40) + 74) = v12 | v13 | v14;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 78) = v6;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, v5, a4);
  v11 = a5 + *(int *)(a4 + 40);
  v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    v17 = v11 + *(int *)(v12 + 40);
    *(_QWORD *)v17 = a2;
    *(_BYTE *)(v17 + 8) = 1;
  }
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;

  v4 = v3;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v4, a1);
  v9 = a2 + *(int *)(a1 + 40);
  *(double *)v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = a3 + *(int *)(a2 + 40);
  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = a3 + *(int *)(a2 + 40);
  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v7 + *(int *)(result + 48)) = v6;
  return result;
}

void FloatingPointFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t);
  Swift::UInt8 v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  uint64_t v59;
  Swift::UInt64 v60;
  Swift::UInt64 v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  Swift::UInt v68;
  int *v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  _QWORD v104[18];
  _BYTE v105[144];
  _BYTE v106[152];

  v3 = v2;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  v83 = v6;
  v84 = v7;
  MEMORY[0x1E0C80A78](v6);
  v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain();
  if ((v14(ObjectType, v12) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(ObjectType, v12);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 464);
    swift_unknownObjectRetain();
    v16(v104, ObjectType, v12);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      v15 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      v18 = 0;
    }
    else
    {
      v18 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    v19 = v87;
    v80 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v19 + 16));
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89)
            goto LABEL_15;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v22 = v90;
          if (!v90)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }
LABEL_22:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_23:
          v24 = v91;
          v76 = v2;
          if (v91)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v24);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          v25 = v93;
          v27 = v94;
          v26 = v95;
          v28 = v96;
          v77 = v96;
          v78 = v92;
          if (v92)
          {
            v81 = v11;
            v29 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v30 = v25;
            v31 = v27;
            v32 = v26;
            v33 = v28;
            v34 = v29;
            v11 = v81;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
            v35 = v28;
            v36 = v25;
            v37 = v27;
            v38 = v26;
          }
          v3 = v76;
          v81 = v26;
          v39 = v11;
          if (v25)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v40 = v25;
            v41 = v25;
            v42 = v27;
            v43 = v41;
            _CFObject.hash(into:)();

            v27 = v42;
            v79 = v42;
            if (v42)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v44 = v27;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }
          }
          else
          {
            v40 = 0;
            Hasher._combine(_:)(0);
            v79 = v27;
            if (v27)
              goto LABEL_31;
          }
          Hasher._combine(_:)(0);
LABEL_34:
          v45 = v81;
          v46 = v40;
          v11 = v39;
          v47 = v77;
          if (v81)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v48 = v45;
            _CFObject.hash(into:)();

            if (v47)
            {
LABEL_36:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v49 = v47;
              _CFObject.hash(into:)();

              goto LABEL_39;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v47)
              goto LABEL_36;
          }
          Hasher._combine(_:)(0);
          v49 = 0;
LABEL_39:
          v50 = v81;
          v51 = v79;

          v52 = v97;
          if (v52)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          a2 = v80;
          v53 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v53);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_44:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_47:
              v17 = v83;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v54 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }
              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v55 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v55);
              }
              if (v102 == 2)
              {
                v56 = 0;
              }
              else
              {
                v56 = v102 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v56);
              if (v103 == 2)
              {
                v57 = 0;
              }
              else
              {
                v58 = v103 & 1;
                Hasher._combine(_:)(1u);
                v57 = v58;
              }
              Hasher._combine(_:)(v57);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_60;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v99)
              goto LABEL_44;
          }
          Hasher._combine(_:)(0);
          goto LABEL_47;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v22 = v90;
        if (!v90)
          goto LABEL_16;
        goto LABEL_22;
      }
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      v23 = v85;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = v86;
    }
    outlined retain of LocalePreferences(v23);
    if (!v88)
      goto LABEL_14;
    goto LABEL_20;
  }
  v15 = 1;
LABEL_5:
  Hasher._combine(_:)(v15);
  swift_unknownObjectRelease();
  v17 = v83;
LABEL_60:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v59 = v3 + *(int *)(a2 + 40);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v60 = *(_QWORD *)v59;
    Hasher._combine(_:)(1u);
    if ((v60 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v61 = v60;
    else
      v61 = 0;
    Hasher._combine(_:)(v61);
  }
  v62 = v84;
  outlined init with take of LocalePreferences?(v59 + 16, (uint64_t)v106, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v63 = *(unsigned __int8 *)(v59 + 73);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }
  v65 = *(unsigned int *)(v59 + 74);
  if (*(_DWORD *)(v59 + 74) == 2)
  {
    LOBYTE(v66) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v65 & 1);
    Hasher._combine(_:)((v65 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v65) & 1);
    v66 = BYTE3(v65) & 1;
  }
  Hasher._combine(_:)(v66);
  v67 = *(unsigned __int8 *)(v59 + 78);
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v68 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }
  v69 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v59 + v69[9], (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v70 = v82;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v82, v11, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v17);
  }
  v71 = v59 + v69[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v73 = *(_QWORD *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v74 = v73;
      else
        v74 = 0;
      Hasher._combine(_:)(v74);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v73);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v59 + v69[11]));
  v75 = *(unsigned __int8 *)(v59 + v69[12]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }
}

uint64_t static FloatingPointFormatStyle.Currency.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v8 = *a1;
  v13 = *a2;
  v14 = v8;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0)
    return 0;
  v9 = *((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2) && *((_QWORD *)a1 + 3) == v9;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  v11 = type metadata accessor for FloatingPointFormatStyle.Currency(0, a3, a4, v9);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + *(int *)(v11 + 40), (char *)a2 + *(int *)(v11 + 40));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.Currency.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  char v15;

  v5 = type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency.CodingKeys, v5);
  v6 = type metadata accessor for KeyedEncodingContainer();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10 = (__int128 *)v13[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = *v10;
  v15 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  v11 = v13[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, type metadata accessor for CurrencyFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int FloatingPointFormatStyle.Currency.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Currency.hash(into:));
}

uint64_t FloatingPointFormatStyle.Currency.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  char v32;

  v23 = a4;
  v27 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v27);
  v26 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys(255, a2, a3, v8);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency.CodingKeys, v9);
  v28 = type metadata accessor for KeyedDecodingContainer();
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v11 = (char *)&v23 - v10;
  v24 = type metadata accessor for FloatingPointFormatStyle.Currency(0, a2, a3, v12);
  v13 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v15 = (char *)&v23 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v29 = v11;
  v16 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v18 = v24;
  v17 = v25;
  v30 = v13;
  v19 = (uint64_t)v26;
  v32 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)v15 = v31;
  LOBYTE(v31) = 1;
  *((_QWORD *)v15 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((_QWORD *)v15 + 3) = v20;
  LOBYTE(v31) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, type metadata accessor for CurrencyFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v28);
  outlined init with take of ICUNumberFormatter.Signature(v19, (uint64_t)&v15[*(int *)(v18 + 40)], type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v21 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v23, v15, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v18);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FloatingPointFormatStyle.Currency.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Currency(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FloatingPointFormatStyle.Currency.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Currency.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Currency(__int128 *a1, __int128 *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Currency.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = FloatingPointFormatStyle.Currency.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t FloatingPointFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.parseStrategy.getter(a1, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>, a2);
}

uint64_t FloatingPointFormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __int128 *v12;
  void (*v13)(__int128 *, uint64_t, uint64_t, __n128);
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void (*v17)(__int128 *, uint64_t);
  __int128 v19;

  v5 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (__int128 *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v8 + 16);
  v13(v12, v2, a1, v10);
  ((void (*)(uint64_t, __int128 *, uint64_t))v13)(a2, v12, a1);
  v14 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, a1);
  v15 = (int *)type metadata accessor for FloatingPointParseStrategy(0, a1, v14, *(_QWORD *)(a1 + 24));
  *(_BYTE *)(a2 + v15[11]) = 1;
  v16 = v15[13];
  v19 = *v12;
  *(_OWORD *)(a2 + v16) = v19;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v12 + *(int *)(a1 + 40), (uint64_t)v7, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v17 = *(void (**)(__int128 *, uint64_t))(v8 + 8);
  swift_unknownObjectRetain();
  v17(v12, a1);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v7, a2 + v15[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t FloatingPointFormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.parseStrategy.getter(a1, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, a2);
}

uint64_t FloatingPointFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  void (*v10)(_OWORD *, __n128);
  uint64_t v11;
  int *v12;
  uint64_t v14;

  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (_OWORD *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void (**)(_OWORD *, __n128))(v9 + 16);
  v10(v8, v6);
  ((void (*)(uint64_t, _OWORD *, uint64_t))v10)(a3, v8, a1);
  v11 = MEMORY[0x186DA9D64](a2, a1);
  v12 = (int *)type metadata accessor for FloatingPointParseStrategy(0, a1, v11, *(_QWORD *)(a1 + 24));
  *(_BYTE *)(a3 + v12[11]) = 1;
  *(_OWORD *)(a3 + v12[13]) = *v8;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8 + *(int *)(a1 + 36), a3 + v12[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t FloatingPointFormatStyle.Attributed.Style.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v6, v7, a4);
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - v9;
  v12 = type metadata accessor for FloatingPointFormatStyle.Currency(0, v6, v7, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v33 - v14;
  v17 = type metadata accessor for FloatingPointFormatStyle(0, v6, v7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v33 - v19;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))(v24, v4, a2, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v24, v12);
      v27 = v36;
      Hasher._combine(_:)(1uLL);
      FloatingPointFormatStyle.Currency.hash(into:)(v27, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    else
    {
      v31 = v34;
      v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v10, v24, v35);
      v32 = v36;
      Hasher._combine(_:)(2uLL);
      FloatingPointFormatStyle.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v30);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, v17);
    v29 = v36;
    Hasher._combine(_:)(0);
    FloatingPointFormatStyle.hash(into:)(v29, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
}

uint64_t static FloatingPointFormatStyle.Attributed.Style.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t TupleTypeMetadata2;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, __n128);
  int EnumCaseMultiPayload;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  __int128 *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;

  v62 = a1;
  v63 = a2;
  v57 = type metadata accessor for FloatingPointFormatStyle.Percent(0, a3, a4, a4);
  v55 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v53 = (char *)&v52 - v6;
  v58 = type metadata accessor for FloatingPointFormatStyle.Currency(0, a3, a4, v7);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v54 = (char *)&v52 - v8;
  v10 = type metadata accessor for FloatingPointFormatStyle(0, a3, a4, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (__int128 *)((char *)&v52 - v12);
  v15 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, a3, a4, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v59 = (char *)&v52 - v20;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v52 - v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v61 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v25 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v27 = (char *)&v52 - v26;
  v29 = (char *)&v52 + *(int *)(v28 + 48) - v26;
  v60 = v16;
  v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v30((char *)&v52 - v26, v62, v15, v25);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v29, v63, v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v32 = v59;
      ((void (*)(char *, char *, uint64_t))v30)(v59, v27, v15);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v33 = v56;
        v34 = v54;
        v35 = v29;
        v36 = v58;
        (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v54, v35, v58);
        v37 = *(_OWORD *)v32;
        v64 = *(_OWORD *)v34;
        v65 = v37;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (*((_QWORD *)v32 + 2) == *((_QWORD *)v34 + 2) && *((_QWORD *)v32 + 3) == *((_QWORD *)v34 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v32[*(int *)(v36 + 40)], &v34[*(int *)(v36 + 40)]) & 1) != 0)
        {
          v38 = *(void (**)(char *, uint64_t))(v33 + 8);
          v38(v34, v36);
          v39 = v32;
LABEL_16:
          v44 = v36;
LABEL_24:
          v38(v39, v44);
          v45 = 1;
LABEL_29:
          v46 = v60;
          goto LABEL_30;
        }
        v47 = *(void (**)(char *, uint64_t))(v33 + 8);
        v47(v34, v36);
        v48 = v32;
LABEL_26:
        v50 = v36;
        goto LABEL_28;
      }
      (*(void (**)(char *, uint64_t))(v56 + 8))(v32, v58);
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v30)(v18, v27, v15);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v40 = v55;
        v41 = (__int128 *)v53;
        v42 = v29;
        v36 = v57;
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v53, v42, v57);
        v43 = *(_OWORD *)v18;
        v64 = *v41;
        v65 = v43;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(&v18[*(int *)(v36 + 36)], (char *)v41 + *(int *)(v36 + 36)) & 1) != 0)
        {
          v38 = *(void (**)(char *, uint64_t))(v40 + 8);
          v38((char *)v41, v36);
          v39 = v18;
          goto LABEL_16;
        }
        v47 = *(void (**)(char *, uint64_t))(v40 + 8);
        v47((char *)v41, v36);
        v48 = v18;
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v57);
    }
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v30)(v23, v27, v15);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(__int128 *, char *, uint64_t))(v11 + 32))(v13, v29, v10);
      v49 = *(_OWORD *)v23;
      v64 = *v13;
      v65 = v49;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(&v23[*(int *)(v10 + 36)], (char *)v13 + *(int *)(v10 + 36)) & 1) != 0)
      {
        v38 = *(void (**)(char *, uint64_t))(v11 + 8);
        v38((char *)v13, v10);
        v39 = v23;
        v44 = v10;
        goto LABEL_24;
      }
      v47 = *(void (**)(char *, uint64_t))(v11 + 8);
      v47((char *)v13, v10);
      v48 = v23;
      v50 = v10;
LABEL_28:
      v47(v48, v50);
      v45 = 0;
      goto LABEL_29;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v23, v10);
  }
  v45 = 0;
  v46 = v61;
  v15 = TupleTypeMetadata2;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v15);
  return v45;
}

uint64_t FloatingPointFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E6974616F6C66 && a2 == 0xED0000746E696F50;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t FloatingPointFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x676E6974616F6C66;
  if (a1 == 1)
    return 0x79636E6572727563;
  return 0x746E6563726570;
}

uint64_t FloatingPointFormatStyle.Attributed.Style.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int EnumCaseMultiPayload;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;

  v75 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys(255, v5, v6, a4);
  v66 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys, v8);
  v67 = v8;
  v72 = type metadata accessor for KeyedEncodingContainer();
  v50 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v70 = (char *)&v49 - v9;
  v71 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v5, v6, v10);
  v69 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v68 = (char *)&v49 - v11;
  v13 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys(255, v5, v6, v12);
  v58 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, v13);
  v59 = v13;
  v65 = type metadata accessor for KeyedEncodingContainer();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v62 = (char *)&v49 - v14;
  v64 = type metadata accessor for FloatingPointFormatStyle.Currency(0, v5, v6, v15);
  v61 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v60 = (char *)&v49 - v16;
  v18 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys(255, v5, v6, v17);
  v19 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys, v18);
  v53 = v18;
  v52 = v19;
  v57 = type metadata accessor for KeyedEncodingContainer();
  v51 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v49 - v20;
  v56 = type metadata accessor for FloatingPointFormatStyle(0, v5, v6, v21);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v73 = (char *)&v49 - v22;
  v23 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys(255, v5, v6, v27);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys, v28);
  v29 = type metadata accessor for KeyedEncodingContainer();
  v74 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v49 - v30;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v76, v75);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v33 = v31;
    if (EnumCaseMultiPayload == 1)
    {
      v35 = v60;
      v34 = v61;
      v36 = v26;
      v37 = v64;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v36, v64);
      v78 = 1;
      v38 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v37);
      v39 = v65;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v40 = v63;
    }
    else
    {
      v35 = v68;
      v34 = v69;
      v47 = v26;
      v37 = v71;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v47, v71);
      v79 = 2;
      v38 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, v37);
      v39 = v72;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v40 = v50;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
  }
  else
  {
    v41 = v51;
    v42 = v54;
    v43 = v26;
    v44 = v56;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v73, v43, v56);
    v77 = 0;
    v45 = v55;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>, v44);
    v46 = v57;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v31;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v46);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v73, v44);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v33, v29);
}

Swift::Int FloatingPointFormatStyle.Attributed.Style.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  FloatingPointFormatStyle.Attributed.Style.hash(into:)((uint64_t)v5, a1, v2, v3);
  return Hasher._finalize()();
}

uint64_t FloatingPointFormatStyle.Attributed.Style.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;

  v97 = a5;
  v93 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys(255, a2, a3, a4);
  v91 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys, v93);
  v85 = type metadata accessor for KeyedDecodingContainer();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v94 = (char *)&v75 - v8;
  v10 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys(255, a2, a3, v9);
  v89 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, v10);
  v90 = v10;
  v83 = type metadata accessor for KeyedDecodingContainer();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v92 = (char *)&v75 - v11;
  v13 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys(255, a2, a3, v12);
  v14 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys, v13);
  v87 = v13;
  v86 = v14;
  v81 = type metadata accessor for KeyedDecodingContainer();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v88 = (char *)&v75 - v15;
  v17 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys(255, a2, a3, v16);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys, v17);
  v101 = type metadata accessor for KeyedDecodingContainer();
  v96 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v19 = (char *)&v75 - v18;
  v98 = a3;
  v99 = a2;
  v95 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, a2, a3, v20);
  v100 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v75 - v24;
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v75 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v75 - v30;
  v32 = a1;
  v33 = a1[3];
  v102 = v32;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  v34 = v103;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v34)
    goto LABEL_11;
  v75 = v28;
  v76 = v25;
  v77 = v22;
  v35 = v98;
  v78 = v31;
  v37 = v96;
  v36 = v97;
  v103 = 0;
  v79 = v19;
  v38 = KeyedDecodingContainer.allKeys.getter();
  v39 = _ArrayBuffer.requestNativeBuffer()();
  if (!v39)
  {
    v108 = v38;
    v40 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v40);
    v39 = _copyCollectionToContiguousArray<A>(_:)();
  }
  v41 = v39;
  swift_bridgeObjectRelease();
  v42 = v37;
  v43 = v100;
  v44 = (2 * *(_QWORD *)(v41 + 16)) | 1;
  v104 = v41;
  v105 = v41 + 32;
  v106 = 0;
  v107 = v44;
  v45 = type metadata accessor for ArraySlice();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEBF88], v45);
  Collection<>.popFirst()();
  v46 = v99;
  if (v108 == 3 || v106 != v107 >> 1)
  {
    v56 = type metadata accessor for DecodingError();
    swift_allocError();
    v58 = v57;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v58 = v95;
    v59 = v101;
    v60 = v79;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v58, *MEMORY[0x1E0DEC450], v56);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v60, v59);
LABEL_11:
    v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }
  if (!(_BYTE)v108)
  {
    LOBYTE(v108) = 0;
    v63 = v88;
    v48 = v101;
    v49 = v79;
    v64 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v64)
    {
      v66 = type metadata accessor for FloatingPointFormatStyle(0, v46, v35, v65);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>, v66);
      v53 = v75;
      v67 = v81;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v63, v67);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      v55 = v95;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v108 != 1)
  {
    LOBYTE(v108) = 2;
    v68 = v94;
    v48 = v101;
    v49 = v79;
    v69 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v69)
    {
      v71 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v46, v35, v70);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, v71);
      v53 = v77;
      v72 = v85;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v68, v72);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      v55 = v95;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  LOBYTE(v108) = 1;
  v47 = v92;
  v48 = v101;
  v49 = v79;
  v50 = v103;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v50)
  {
LABEL_16:
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v49, v48);
    v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }
  v52 = type metadata accessor for FloatingPointFormatStyle.Currency(0, v46, v35, v51);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v52);
  v53 = v76;
  v54 = v83;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v47, v54);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
  v55 = v95;
LABEL_18:
  swift_storeEnumTagMultiPayload();
  v73 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v74 = v78;
  v73(v78, v53, v55);
  v73(v36, v74, v55);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  char *v0;

  return FloatingPointFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = FloatingPointFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Attributed.Style@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return FloatingPointFormatStyle.Attributed.Style.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Attributed.Style(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FloatingPointFormatStyle.Attributed.Style.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Attributed.Style.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t FloatingPointFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t *v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  uint64_t *v65;
  os_unfair_lock_s *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t ObjectType;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  uint64_t *v110;
  _OWORD *v111;
  __int128 v112;
  __int128 v113;
  uint64_t *v114;
  os_unfair_lock_s *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t *v148;
  _OWORD *v149;
  __int128 v150;
  __int128 v151;
  uint64_t *v152;
  os_unfair_lock_s *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t result;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t *v174;
  unint64_t v175;
  __int128 v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  __int128 v201[3];
  _BYTE v202[104];
  __int128 v203;
  __int128 v204[3];
  __int128 v205[3];
  _OWORD v206[3];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  char *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;

  v181 = a1;
  v182 = 0;
  v170 = a4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v5, v6, a3);
  v168 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v167 = (char *)&v163 - v8;
  v10 = type metadata accessor for FloatingPointFormatStyle.Currency(0, v5, v6, v9);
  v165 = *(_QWORD *)(v10 - 8);
  v166 = v10;
  MEMORY[0x1E0C80A78](v10);
  v164 = (char *)&v163 - v11;
  v179 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12);
  v180 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v178);
  v15 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FloatingPointFormatStyle(0, v5, v6, v16);
  v169 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v163 - v18;
  v21 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v5, v6, v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v163 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v163 - v23, v4, v21, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v19, v24, v17);
    v177 = &v19[*(int *)(v17 + 36)];
    v72 = *((_QWORD *)v19 + 1);
    ObjectType = swift_getObjectType();
    v74 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 472);
    swift_unknownObjectRetain();
    v75 = v74(ObjectType, v72);
    *(_QWORD *)&v176 = v76;
    *((_QWORD *)&v176 + 1) = v75;
    swift_unknownObjectRelease();
    v77 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v72 + 464);
    swift_unknownObjectRetain();
    v77(&v193, ObjectType, v72);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)&v193, (uint64_t)v201, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v177, (uint64_t)v15, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v78 = v178;
    v79 = &v15[*(int *)(v178 + 20)];
    v80 = v176;
    *(_QWORD *)v79 = *((_QWORD *)&v176 + 1);
    *((_QWORD *)v79 + 1) = v80;
    outlined init with take of LocalePreferences?((uint64_t)v201, (uint64_t)&v15[*(int *)(v78 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
    v81 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v15);
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v15, type metadata accessor for ICUNumberFormatter.Signature);
    if (v81)
    {
      v167 = v19;
      v168 = v17;
      v82 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
      *(double *)&v83 = specialized BinaryFloatingPoint.init<A>(_:)(v82, v5, v6);
      ICUNumberFormatterBase.attributedFormatPositions(_:)(v83, 0, 0x100000000);
      *((_QWORD *)&v176 + 1) = v86;
      if (v86)
      {
        v87 = v84;
        v88 = v85;
        swift_bridgeObjectRetain();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v204, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v193);
        v89 = v193;
        v90 = *(_QWORD *)(v88 + 16);
        if (v90)
        {
          *(_QWORD *)&v176 = v87;
          v166 = v81;
          v173 = (char *)&v184 + 8;
          v174 = &v198;
          swift_bridgeObjectRetain();
          v175 = lazy protocol witness table accessor for type String and conformance String();
          v165 = v88;
          v91 = v88 + 48;
          do
          {
            v181 = v91;
            v182 = v90;
            v92 = *(_DWORD *)(v91 - 16);
            v93 = v176;
            v184 = v176;
            swift_bridgeObjectRetain();
            v94 = String.Index.init<A>(utf16Offset:in:)();
            v184 = v93;
            swift_bridgeObjectRetain();
            v95 = String.Index.init<A>(utf16Offset:in:)();
            if (v95 >> 14 < v94 >> 14)
              goto LABEL_83;
            v96 = v95;
            swift_retain();
            specialized Range<>.init<A>(_range:in:)(v94, v96, (_OWORD *)v89, (unint64_t *)&v184);
            v97 = v186;
            if (v186 == 2)
              goto LABEL_89;
            v178 = *((_QWORD *)&v184 + 1);
            v179 = v184;
            v177 = (char *)v185;
            v98 = v187;
            v99 = v188;
            v100 = v189;
            v180 = v190;
            v203 = MEMORY[0x1E0DEE9E0];
            v101 = 0;
            v102 = 2;
            switch(v92)
            {
              case 0:
                goto LABEL_33;
              case 1:
                v101 = 1;
LABEL_33:
                specialized AttributeContainer.subscript.setter(v101);
                break;
              case 2:
                goto LABEL_38;
              case 6:
                v102 = 0;
                goto LABEL_38;
              case 7:
                v102 = 3;
                goto LABEL_38;
              case 8:
                v102 = 4;
                goto LABEL_38;
              case 10:
                v102 = 1;
LABEL_38:
                specialized AttributeContainer.subscript.setter(v102);
                break;
              default:
                break;
            }
            v192 = v203;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v103 = *(_OWORD *)(v89 + 32);
              v215 = *(_OWORD *)(v89 + 16);
              v216 = v103;
              v217 = *(_OWORD *)(v89 + 48);
              v105 = *(_QWORD *)(v89 + 64);
              v104 = *(_QWORD *)(v89 + 72);
              v106 = *(_QWORD *)(v89 + 80);
              v171 = *(_QWORD *)(v89 + 88);
              v172 = v104;
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)&v215);
              swift_unknownObjectRetain();
              v107 = AttributedString.Guts.init(string:runs:)(&v215, v105, v172, v106, v171);
              swift_release();
              v89 = v107;
            }
            v108 = v180;
            v109 = *(_OWORD *)(v89 + 32);
            v212 = *(_OWORD *)(v89 + 16);
            v213 = v109;
            v214 = *(_OWORD *)(v89 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            *(_QWORD *)&v207 = v179;
            *((_QWORD *)&v207 + 1) = v178;
            *(_QWORD *)&v208 = v177;
            *((_QWORD *)&v208 + 1) = v97;
            *(_QWORD *)&v209 = v98;
            *((_QWORD *)&v209 + 1) = v99;
            v210 = v100;
            v211 = v108;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)v205);
            outlined release of Locale((uint64_t)&v193);
            v111 = v173;
            v110 = v174;
            v112 = *((_OWORD *)v174 + 1);
            *(_OWORD *)v173 = *(_OWORD *)v174;
            v111[1] = v112;
            v113 = *((_OWORD *)v110 + 3);
            v111[2] = *((_OWORD *)v110 + 2);
            v111[3] = v113;
            *(_QWORD *)&v184 = v89;
            if (one-time initialization token for currentIdentity != -1)
              swift_once();
            v114 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            v115 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v115);
            closure #1 in static AttributedString._nextModifyIdentity.getter(v114, &v183);
            os_unfair_lock_unlock(v115);
            swift_release();
            v116 = v183;
            v191 = v183;
            BigString.init()();
            v183 = 0;
            MEMORY[0x186DA9E90](&v183, 8);
            v117 = v183;
            type metadata accessor for AttributedString.Guts();
            v118 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0)
              goto LABEL_86;
            v119 = v206[1];
            *(_OWORD *)(v118 + 16) = v206[0];
            *(_OWORD *)(v118 + 32) = v119;
            *(_OWORD *)(v118 + 48) = v206[2];
            *(_QWORD *)(v118 + 64) = 0;
            *(_QWORD *)(v118 + 72) = 0;
            *(_QWORD *)(v118 + 80) = 0;
            *(_QWORD *)(v118 + 88) = v117;
            swift_release();
            LOBYTE(v183) = 0;
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v192, (char *)&v183);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v191 != v116)
              goto LABEL_91;
            v91 = v181 + 24;
            v89 = v184;
            swift_release();
            v90 = v182 - 1;
          }
          while (v182 != 1);
          swift_bridgeObjectRelease();
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        Double.description.getter();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(&v193, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v184);
        swift_release();
        v89 = v184;
      }
      v160 = v169;
      v161 = v167;
      v162 = v168;
      *v170 = v89;
      return (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v161, v162);
    }
    (*(void (**)(char *, uint64_t))(v169 + 8))(v19, v17);
LABEL_71:
    v158 = (uint64_t)v180;
    (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
    specialized BinaryFloatingPoint.init<A>(_:)(v158, v5, v6);
    Double.description.getter();
    BigString.init(_:)();
    result = AttributedString.init(_:attributes:)(v201, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v193);
    *v170 = v193;
    return result;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v28 = v167;
    v27 = v168;
    (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v167, v24, v7);
    type metadata accessor for ICUPercentNumberFormatter();
    v120 = static ICUPercentNumberFormatter.create<A>(for:)((uint64_t)v28, v5, v6);
    if (v120)
    {
      v121 = v120;
      v122 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
      *(double *)&v123 = specialized BinaryFloatingPoint.init<A>(_:)(v122, v5, v6);
      ICUNumberFormatterBase.attributedFormatPositions(_:)(v123, 0, 0x100000000);
      *((_QWORD *)&v176 + 1) = v126;
      if (v126)
      {
        v127 = v124;
        v128 = v125;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v176 = v127;
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v205, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v201);
        v129 = *(_QWORD *)&v201[0];
        if (*(_QWORD *)(v128 + 16))
        {
          v181 = *(_QWORD *)(v128 + 16);
          v166 = v121;
          v169 = v7;
          v173 = (char *)&v193 + 8;
          v174 = (uint64_t *)v202;
          swift_bridgeObjectRetain();
          v175 = lazy protocol witness table accessor for type String and conformance String();
          v165 = v128;
          v130 = v128 + 48;
          do
          {
            v131 = *(_DWORD *)(v130 - 16);
            v182 = v130;
            v132 = v176;
            v193 = v176;
            swift_bridgeObjectRetain();
            v133 = String.Index.init<A>(utf16Offset:in:)();
            v193 = v132;
            swift_bridgeObjectRetain();
            v134 = String.Index.init<A>(utf16Offset:in:)();
            if (v134 >> 14 < v133 >> 14)
              goto LABEL_84;
            v135 = v134;
            swift_retain();
            specialized Range<>.init<A>(_range:in:)(v133, v135, (_OWORD *)v129, (unint64_t *)&v193);
            v136 = v195;
            if (v195 == 2)
              goto LABEL_90;
            v178 = *((_QWORD *)&v193 + 1);
            v179 = v193;
            v177 = (char *)v194;
            v137 = v196;
            v138 = v197;
            v139 = v198;
            v180 = v199;
            v204[0] = MEMORY[0x1E0DEE9E0];
            v140 = 0;
            v141 = 2;
            switch(v131)
            {
              case 0:
                goto LABEL_55;
              case 1:
                v140 = 1;
LABEL_55:
                specialized AttributeContainer.subscript.setter(v140);
                break;
              case 2:
                goto LABEL_60;
              case 6:
                v141 = 0;
                goto LABEL_60;
              case 7:
                v141 = 3;
                goto LABEL_60;
              case 8:
                v141 = 4;
                goto LABEL_60;
              case 10:
                v141 = 1;
LABEL_60:
                specialized AttributeContainer.subscript.setter(v141);
                break;
              default:
                break;
            }
            v203 = v204[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v142 = *(_OWORD *)(v129 + 32);
              v207 = *(_OWORD *)(v129 + 16);
              v208 = v142;
              v209 = *(_OWORD *)(v129 + 48);
              v144 = *(_QWORD *)(v129 + 64);
              v143 = *(_QWORD *)(v129 + 72);
              v145 = *(_QWORD *)(v129 + 88);
              v171 = *(_QWORD *)(v129 + 80);
              v172 = v143;
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)&v207);
              swift_unknownObjectRetain();
              v146 = AttributedString.Guts.init(string:runs:)(&v207, v144, v172, v171, v145);
              swift_release();
              v129 = v146;
            }
            v147 = *(_OWORD *)(v129 + 32);
            v215 = *(_OWORD *)(v129 + 16);
            v216 = v147;
            v217 = *(_OWORD *)(v129 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            *(_QWORD *)&v184 = v179;
            *((_QWORD *)&v184 + 1) = v178;
            v185 = (uint64_t)v177;
            v186 = v136;
            v187 = v137;
            v188 = v138;
            v189 = v139;
            v190 = v180;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)v206);
            outlined release of Locale((uint64_t)v201);
            v149 = v173;
            v148 = v174;
            v150 = *((_OWORD *)v174 + 1);
            *(_OWORD *)v173 = *(_OWORD *)v174;
            v149[1] = v150;
            v151 = *((_OWORD *)v148 + 3);
            v149[2] = *((_OWORD *)v148 + 2);
            v149[3] = v151;
            *(_QWORD *)&v193 = v129;
            if (one-time initialization token for currentIdentity != -1)
              swift_once();
            v152 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            v153 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v153);
            closure #1 in static AttributedString._nextModifyIdentity.getter(v152, (uint64_t *)&v192);
            os_unfair_lock_unlock(v153);
            swift_release();
            v154 = v192;
            v200 = v192;
            BigString.init()();
            *(_QWORD *)&v192 = 0;
            MEMORY[0x186DA9E90](&v192, 8);
            v155 = v192;
            type metadata accessor for AttributedString.Guts();
            v156 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0)
              goto LABEL_87;
            v157 = v213;
            *(_OWORD *)(v156 + 16) = v212;
            *(_OWORD *)(v156 + 32) = v157;
            *(_OWORD *)(v156 + 48) = v214;
            *(_QWORD *)(v156 + 64) = 0;
            *(_QWORD *)(v156 + 72) = 0;
            *(_QWORD *)(v156 + 80) = 0;
            *(_QWORD *)(v156 + 88) = v155;
            swift_release();
            LOBYTE(v192) = 0;
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v203, (char *)&v192);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v200 != v154)
              goto LABEL_91;
            v130 = v182 + 24;
            v129 = v193;
            swift_release();
            --v181;
          }
          while (v181);
          swift_bridgeObjectRelease();
          v27 = v168;
          v7 = v169;
          v28 = v167;
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        Double.description.getter();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v201, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v193);
        swift_release();
        v129 = v193;
      }
      *v170 = v129;
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v28, v7);
    }
    goto LABEL_69;
  }
  v28 = v164;
  v27 = v165;
  v7 = v166;
  (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v164, v24, v166);
  type metadata accessor for ICUCurrencyNumberFormatter();
  v29 = static ICUCurrencyNumberFormatter.create<A>(for:)(v28, v5, v6);
  if (!v29)
  {
LABEL_69:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v7);
    goto LABEL_71;
  }
  v30 = v29;
  v31 = (uint64_t)v180;
  (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v180, v181, v5);
  *(double *)&v32 = specialized BinaryFloatingPoint.init<A>(_:)(v31, v5, v6);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(v32, 0, 0x100000000);
  if (!v34)
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v201, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v193);
    swift_release();
    v39 = v193;
    goto LABEL_76;
  }
  v36 = v33;
  v37 = v34;
  v38 = v35;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v176 = v36;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v205, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v201);
  v39 = *(_QWORD *)&v201[0];
  if (!*(_QWORD *)(v38 + 16))
    goto LABEL_72;
  v181 = *(_QWORD *)(v38 + 16);
  *((_QWORD *)&v176 + 1) = v37;
  v169 = v30;
  v173 = (char *)&v193 + 8;
  v174 = (uint64_t *)v202;
  swift_bridgeObjectRetain();
  v175 = lazy protocol witness table accessor for type String and conformance String();
  v168 = v38;
  v40 = (char *)(v38 + 48);
  do
  {
    v41 = *((_DWORD *)v40 - 4);
    v180 = v40;
    v42 = v176;
    v193 = v176;
    swift_bridgeObjectRetain();
    v43 = String.Index.init<A>(utf16Offset:in:)();
    v193 = v42;
    swift_bridgeObjectRetain();
    v44 = String.Index.init<A>(utf16Offset:in:)();
    if (v44 >> 14 < v43 >> 14)
    {
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181DAEF98);
    }
    v45 = v44;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v43, v45, (_OWORD *)v39, (unint64_t *)&v193);
    v46 = v195;
    if (v195 == 2)
      goto LABEL_88;
    v47 = *((_QWORD *)&v193 + 1);
    v179 = v194;
    v48 = v197;
    v177 = (char *)v193;
    v178 = v196;
    v50 = v198;
    v49 = v199;
    v204[0] = MEMORY[0x1E0DEE9E0];
    v51 = 0;
    v52 = 2;
    switch(v41)
    {
      case 0:
        goto LABEL_11;
      case 1:
        v51 = 1;
LABEL_11:
        specialized AttributeContainer.subscript.setter(v51);
        break;
      case 2:
        goto LABEL_16;
      case 6:
        v52 = 0;
        goto LABEL_16;
      case 7:
        v52 = 3;
        goto LABEL_16;
      case 8:
        v52 = 4;
        goto LABEL_16;
      case 10:
        v52 = 1;
LABEL_16:
        specialized AttributeContainer.subscript.setter(v52);
        break;
      default:
        break;
    }
    v203 = v204[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v53 = *(_OWORD *)(v39 + 32);
      v207 = *(_OWORD *)(v39 + 16);
      v208 = v53;
      v209 = *(_OWORD *)(v39 + 48);
      v172 = v47;
      v54 = *(_QWORD *)(v39 + 64);
      v55 = *(_QWORD *)(v39 + 72);
      v56 = *(_QWORD *)(v39 + 80);
      v171 = *(_QWORD *)(v39 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v207);
      swift_unknownObjectRetain();
      v57 = v55;
      v47 = v172;
      v58 = AttributedString.Guts.init(string:runs:)(&v207, v54, v57, v56, v171);
      swift_release();
      v39 = v58;
    }
    v59 = v179;
    v60 = *(_OWORD *)(v39 + 32);
    v215 = *(_OWORD *)(v39 + 16);
    v216 = v60;
    v217 = *(_OWORD *)(v39 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    *(_QWORD *)&v184 = v177;
    *((_QWORD *)&v184 + 1) = v47;
    v185 = v59;
    v186 = v46;
    v187 = v178;
    v188 = v48;
    v189 = v50;
    v190 = v49;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v206);
    outlined release of Locale((uint64_t)v201);
    v62 = v173;
    v61 = v174;
    v63 = *((_OWORD *)v174 + 1);
    *(_OWORD *)v173 = *(_OWORD *)v174;
    v62[1] = v63;
    v64 = *((_OWORD *)v61 + 3);
    v62[2] = *((_OWORD *)v61 + 2);
    v62[3] = v64;
    *(_QWORD *)&v193 = v39;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v65 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v66 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v66);
    v67 = v182;
    closure #1 in static AttributedString._nextModifyIdentity.getter(v65, (uint64_t *)&v192);
    v182 = v67;
    os_unfair_lock_unlock(v66);
    swift_release();
    v68 = v192;
    v200 = v192;
    BigString.init()();
    *(_QWORD *)&v192 = 0;
    MEMORY[0x186DA9E90](&v192, 8);
    v69 = v192;
    type metadata accessor for AttributedString.Guts();
    v70 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
      goto LABEL_85;
    v71 = v213;
    *(_OWORD *)(v70 + 16) = v212;
    *(_OWORD *)(v70 + 32) = v71;
    *(_OWORD *)(v70 + 48) = v214;
    *(_QWORD *)(v70 + 64) = 0;
    *(_QWORD *)(v70 + 72) = 0;
    *(_QWORD *)(v70 + 80) = 0;
    *(_QWORD *)(v70 + 88) = v69;
    swift_release();
    LOBYTE(v192) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v203, (char *)&v192);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v200 != v68)
      goto LABEL_91;
    v40 = v180 + 24;
    v39 = v193;
    swift_release();
    --v181;
  }
  while (v181);
  swift_bridgeObjectRelease();
  v27 = v165;
  v7 = v166;
  v28 = v164;
LABEL_72:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_76:
  *v170 = v39;
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v28, v7);
}

uint64_t FloatingPointFormatStyle.Attributed.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v7, v8, a3);
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v42 - v10);
  v13 = type metadata accessor for FloatingPointFormatStyle.Currency(0, v7, v8, v12);
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v42 - v14);
  v17 = type metadata accessor for FloatingPointFormatStyle(0, v7, v8, v16);
  v42 = *(_QWORD *)(v17 - 8);
  v43 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)((char *)&v42 - v18);
  v21 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v7, v8, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v42 - v24;
  v27 = *a1;
  v26 = a1[1];
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 16);
  v49 = a4;
  v29 = a4;
  v30 = v48;
  v28(v29, v48, a2, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v30, v21);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v33 = v44;
      v32 = v45;
      (*(void (**)(_QWORD *, char *, uint64_t))(v44 + 32))(v15, v25, v45);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v15 = v27;
      v15[1] = v26;
      v34 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v33 + 16))(v34, v15, v32);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v33 + 8))(v15, v32);
    }
    else
    {
      v40 = v46;
      v39 = v47;
      (*(void (**)(_QWORD *, char *, uint64_t))(v46 + 32))(v11, v25, v47);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v11 = v27;
      v11[1] = v26;
      v41 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v40 + 16))(v41, v11, v39);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v40 + 8))(v11, v39);
    }
  }
  else
  {
    v37 = v42;
    v36 = v43;
    (*(void (**)(_QWORD *, char *, uint64_t))(v42 + 32))(v19, v25, v43);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v19 = v27;
    v19[1] = v26;
    v38 = v49;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v37 + 16))(v38, v19, v36);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v37 + 8))(v19, v36);
  }
}

uint64_t FloatingPointFormatStyle.Attributed.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v5, v6, a4);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - v8;
  v11 = type metadata accessor for FloatingPointFormatStyle.Currency(0, v5, v6, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - v13;
  v16 = type metadata accessor for FloatingPointFormatStyle(0, v5, v6, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v33 - v18;
  v21 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v5, v6, v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v33 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v33 - v23, v4, v21, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v24, v11);
      v27 = v36;
      Hasher._combine(_:)(1uLL);
      FloatingPointFormatStyle.Currency.hash(into:)(v27, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    else
    {
      v31 = v34;
      v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v9, v24, v35);
      v32 = v36;
      Hasher._combine(_:)(2uLL);
      FloatingPointFormatStyle.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v30);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v24, v16);
    v29 = v36;
    Hasher._combine(_:)(0);
    FloatingPointFormatStyle.hash(into:)(v29, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t FloatingPointFormatStyle.Attributed.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys(255, v5, v6, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.CodingKeys, v7);
  v8 = type metadata accessor for KeyedEncodingContainer();
  v14 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v5, v6, v11);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style, v12);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
}

Swift::Int FloatingPointFormatStyle.Attributed.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Attributed.hash(into:));
}

uint64_t FloatingPointFormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v28 = a5;
  v29 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, a2, a3, a4);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v30 = (char *)&v24 - v8;
  v10 = type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys(255, a2, a3, v9);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.CodingKeys, v10);
  v31 = type metadata accessor for KeyedDecodingContainer();
  v25 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v12 = (char *)&v24 - v11;
  v24 = type metadata accessor for FloatingPointFormatStyle.Attributed(0, a2, a3, v13);
  v14 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v16 = (char *)&v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v26 = v12;
  v17 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    v32 = v14;
    v18 = v25;
    v20 = v27;
    v19 = v28;
    v21 = v29;
    MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed.Style, v29);
    v22 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v31);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v16, v30, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v19, v16, v24);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return FloatingPointFormatStyle.Attributed.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Attributed(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FloatingPointFormatStyle.Attributed.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))FloatingPointFormatStyle.Attributed.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Attributed.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t FloatingPointFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>, a1);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t FloatingPointFormatStyle.Percent.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t FloatingPointFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t *a8@<X8>)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(_OWORD *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;

  v39 = a7;
  v37 = a1;
  v41 = a4;
  v42 = a5;
  v40 = a3;
  v38 = a2;
  v43 = a8;
  v9 = *(_QWORD *)(a6 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (_OWORD *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x186DA9D64](v14, v13, v10);
  v16 = (int *)type metadata accessor for FloatingPointParseStrategy(0, a6, v15, *(_QWORD *)(a6 + 24));
  v17 = *((_QWORD *)v16 - 1);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v34 - v18;
  v20 = *(_QWORD *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v22 - 8);
  v35 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v34 - v24);
  v26 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v9 + 16);
  v26(v12, v36, a6, v23);
  ((void (*)(char *, _OWORD *, uint64_t))v26)(v19, v12, a6);
  v19[v16[11]] = 0;
  *(_OWORD *)&v19[v16[13]] = *v12;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v12 + *(int *)(a6 + 36), (uint64_t)&v19[v16[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  FloatingPointParseStrategy.parse(_:startingAt:in:)(v37, v38, v40, v42, v16, v25);
  (*(void (**)(char *, int *))(v17 + 8))(v19, v16);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v25, v35);
    v27 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v43, 1, 1, v27);
  }
  else
  {
    v29 = *v25;
    v30 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    v31 = swift_getTupleTypeMetadata2();
    v32 = v43;
    v33 = (char *)v43 + *(int *)(v31 + 48);
    *v43 = v29;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v33, v30, v20);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v32, 0, 1, v31);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.Percent.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>.Percent(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, a1);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t FloatingPointFormatStyle.Currency.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(char *, __int128 *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(__int128 *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;

  v49 = a4;
  v50 = a5;
  v48 = a3;
  v45 = a1;
  v46 = a2;
  v51 = a7;
  v44 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v44);
  v41 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a6 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (__int128 *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, a6, v11);
  v15 = (int *)type metadata accessor for FloatingPointParseStrategy(0, a6, v14, *(_QWORD *)(a6 + 24));
  v42 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v39 - v19;
  v47 = *(_QWORD *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v22 - 8);
  v40 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v39 - v24);
  v26 = *(void (**)(char *, __int128 *, uint64_t))(v9 + 16);
  ((void (*)(__int128 *, _QWORD, uint64_t, __n128))v26)(v13, v43, a6, v23);
  v26(v17, v13, a6);
  v17[v15[11]] = 0;
  v27 = v15[13];
  v43 = *v13;
  *(_OWORD *)&v17[v27] = v43;
  v28 = v41;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v13 + *(int *)(a6 + 40), v41, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v29 = *(void (**)(__int128 *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v29(v13, a6);
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature(v28, (uint64_t)&v17[v15[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  v30 = v42;
  (*(void (**)(char *, char *, int *))(v42 + 32))(v20, v17, v15);
  FloatingPointParseStrategy.parse(_:startingAt:in:)(v45, v46, v48, v50, v15, v25);
  (*(void (**)(char *, int *))(v30 + 8))(v20, v15);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v25, v40);
    v31 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v51, 1, 1, v31);
  }
  else
  {
    v33 = *v25;
    v34 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    v35 = v47;
    v36 = swift_getTupleTypeMetadata2();
    v37 = v51;
    v38 = (char *)v51 + *(int *)(v36 + 48);
    *v51 = v33;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v38, v34, v35);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v37, 0, 1, v36);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.Currency.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>.Currency(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, a1);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.localizedDouble(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>)
              + 36);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v6 = &v4[v5[9]];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = &v4[v5[10]];
  *(_QWORD *)v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedDoublePercentage(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent)
              + 36);
  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v6 = &v4[v5[9]];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)v4 = 0x4059000000000000;
  v4[8] = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  v8 = &v4[v5[10]];
  *(_QWORD *)v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Percent.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Currency.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.CodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Currency()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Currency(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
}

void associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in FloatingPointFormatStyle<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Currency(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Percent(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Attributed(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Attributed);
}

void base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>.Percent()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>.Currency()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Percent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Percent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Currency()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181DB0418(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 40)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Currency()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_181DB04A0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 40)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int (*v38)(const void *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__dst;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v8 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v7, v6, a4) - 8)
                 + 80);
  if ((v8 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v24 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0, v7, v6, v10) + 36);
      v25 = a1 + v24;
      v26 = (uint64_t)a2 + v24;
      *(_QWORD *)v25 = *(uint64_t *)((char *)a2 + v24);
      *(_BYTE *)(v25 + 8) = *((_BYTE *)a2 + v24 + 8);
      v27 = *(_OWORD *)((char *)a2 + v24 + 32);
      *(_OWORD *)(v25 + 16) = *(_OWORD *)((char *)a2 + v24 + 16);
      *(_OWORD *)(v25 + 32) = v27;
      *(_OWORD *)(v25 + 48) = *(_OWORD *)((char *)a2 + v24 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
      *(_BYTE *)(v25 + 73) = *((_BYTE *)a2 + v24 + 73);
      *(_WORD *)(v25 + 74) = *(_WORD *)((char *)a2 + v24 + 74);
      *(_BYTE *)(v25 + 76) = *((_BYTE *)a2 + v24 + 76);
      *(_BYTE *)(v25 + 77) = *((_BYTE *)a2 + v24 + 77);
      v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v29 = v28[9];
      v30 = (void *)(v25 + v29);
      v31 = (const void *)(v26 + v29);
      v32 = type metadata accessor for FloatingPointRoundingRule();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
      swift_unknownObjectRetain();
      if (v34(v31, 1, v32))
      {
LABEL_10:
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
LABEL_14:
        v43 = v28[10];
        v44 = v25 + v43;
        v45 = v26 + v43;
        *(_QWORD *)v44 = *(_QWORD *)v45;
        *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
        *(_BYTE *)(v25 + v28[11]) = *(_BYTE *)(v26 + v28[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v11 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v11;
        v12 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, v7, v6, v10) + 40);
        v13 = a1 + v12;
        v14 = (uint64_t)a2 + v12;
        *(_QWORD *)v13 = *(uint64_t *)((char *)a2 + v12);
        *(_BYTE *)(v13 + 8) = *((_BYTE *)a2 + v12 + 8);
        v15 = *(_OWORD *)((char *)a2 + v12 + 32);
        *(_OWORD *)(v13 + 16) = *(_OWORD *)((char *)a2 + v12 + 16);
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)(v13 + 48) = *(_OWORD *)((char *)a2 + v12 + 48);
        *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + v12 + 57);
        *(_BYTE *)(v13 + 73) = *((_BYTE *)a2 + v12 + 73);
        *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)a2 + v12 + 74);
        *(_BYTE *)(v13 + 78) = *((_BYTE *)a2 + v12 + 78);
        v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v17 = v16[9];
        __dst = (void *)(v13 + v17);
        v18 = (const void *)(v14 + v17);
        v19 = type metadata accessor for FloatingPointRoundingRule();
        v20 = *(_QWORD *)(v19 - 8);
        v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v21(v18, 1, v19))
        {
          v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(__dst, v18, v19);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
        }
        v40 = v16[10];
        v41 = v13 + v40;
        v42 = v14 + v40;
        *(_QWORD *)v41 = *(_QWORD *)v42;
        *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
        *(_BYTE *)(v13 + v16[11]) = *(_BYTE *)(v14 + v16[11]);
        *(_BYTE *)(v13 + v16[12]) = *(_BYTE *)(v14 + v16[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v35 = *(int *)(type metadata accessor for FloatingPointFormatStyle(0, v7, v6, v10) + 36);
      v25 = a1 + v35;
      v26 = (uint64_t)a2 + v35;
      *(_QWORD *)v25 = *(uint64_t *)((char *)a2 + v35);
      *(_BYTE *)(v25 + 8) = *((_BYTE *)a2 + v35 + 8);
      v36 = *(_OWORD *)((char *)a2 + v35 + 32);
      *(_OWORD *)(v25 + 16) = *(_OWORD *)((char *)a2 + v35 + 16);
      *(_OWORD *)(v25 + 32) = v36;
      *(_OWORD *)(v25 + 48) = *(_OWORD *)((char *)a2 + v35 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v35 + 57);
      *(_BYTE *)(v25 + 73) = *((_BYTE *)a2 + v35 + 73);
      *(_WORD *)(v25 + 74) = *(_WORD *)((char *)a2 + v35 + 74);
      *(_BYTE *)(v25 + 76) = *((_BYTE *)a2 + v35 + 76);
      *(_BYTE *)(v25 + 77) = *((_BYTE *)a2 + v35 + 77);
      v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v37 = v28[9];
      v30 = (void *)(v25 + v37);
      v31 = (const void *)(v26 + v37);
      v32 = type metadata accessor for FloatingPointRoundingRule();
      v33 = *(_QWORD *)(v32 - 8);
      v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
      swift_unknownObjectRetain();
      if (v38(v31, 1, v32))
        goto LABEL_10;
    }
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    goto LABEL_14;
  }
  v23 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v23 + ((v8 + 16) & ~(unint64_t)v8);
  swift_retain();
  return a1;
}

uint64_t destroy for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v6, v5, a4);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v9 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v6, v5, v10);
LABEL_6:
    v11 = *(int *)(v9 + 36);
    v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_unknownObjectRelease();
    v9 = type metadata accessor for FloatingPointFormatStyle(0, v6, v5, v8);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, v6, v5, v13) + 40);
  v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v14 = a1 + *(int *)(v12 + 36) + v11;
  v15 = type metadata accessor for FloatingPointRoundingRule();
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

uint64_t initializeWithCopy for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int *v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v7, v6, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v23 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0, v7, v6, v9) + 36);
    v24 = a1 + v23;
    v25 = a2 + v23;
    *(_QWORD *)v24 = *(_QWORD *)(a2 + v23);
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(a2 + v23 + 8);
    v26 = *(_OWORD *)(a2 + v23 + 32);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)(a2 + v23 + 16);
    *(_OWORD *)(v24 + 32) = v26;
    *(_OWORD *)(v24 + 48) = *(_OWORD *)(a2 + v23 + 48);
    *(_OWORD *)(v24 + 57) = *(_OWORD *)(a2 + v23 + 57);
    *(_BYTE *)(v24 + 73) = *(_BYTE *)(a2 + v23 + 73);
    *(_WORD *)(v24 + 74) = *(_WORD *)(a2 + v23 + 74);
    *(_BYTE *)(v24 + 76) = *(_BYTE *)(a2 + v23 + 76);
    *(_BYTE *)(v24 + 77) = *(_BYTE *)(a2 + v23 + 77);
    v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v28 = v27[9];
    v29 = (void *)(v24 + v28);
    v30 = (const void *)(v25 + v28);
    v31 = type metadata accessor for FloatingPointRoundingRule();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
    swift_unknownObjectRetain();
    if (v33(v30, 1, v31))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v53 = v27[10];
    v54 = v24 + v53;
    v55 = v25 + v53;
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
    v56 = v27[11];
    v51 = (_BYTE *)(v24 + v56);
    v52 = (_BYTE *)(v25 + v56);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v10;
    v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, v7, v6, v9) + 40);
    v12 = a1 + v11;
    v13 = a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)(a2 + v11);
    *(_BYTE *)(v12 + 8) = *(_BYTE *)(a2 + v11 + 8);
    v14 = *(_OWORD *)(a2 + v11 + 32);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 + v11 + 16);
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)(v12 + 48) = *(_OWORD *)(a2 + v11 + 48);
    *(_OWORD *)(v12 + 57) = *(_OWORD *)(a2 + v11 + 57);
    *(_BYTE *)(v12 + 73) = *(_BYTE *)(a2 + v11 + 73);
    *(_DWORD *)(v12 + 74) = *(_DWORD *)(a2 + v11 + 74);
    *(_BYTE *)(v12 + 78) = *(_BYTE *)(a2 + v11 + 78);
    v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v16 = v15[9];
    v17 = (void *)(v12 + v16);
    v18 = (const void *)(v13 + v16);
    v19 = type metadata accessor for FloatingPointRoundingRule();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v47 = v15[10];
    v48 = v12 + v47;
    v49 = v13 + v47;
    *(_QWORD *)v48 = *(_QWORD *)v49;
    *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
    *(_BYTE *)(v12 + v15[11]) = *(_BYTE *)(v13 + v15[11]);
    v50 = v15[12];
    v51 = (_BYTE *)(v12 + v50);
    v52 = (_BYTE *)(v13 + v50);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v35 = *(int *)(type metadata accessor for FloatingPointFormatStyle(0, v7, v6, v9) + 36);
    v36 = a1 + v35;
    v37 = a2 + v35;
    *(_QWORD *)v36 = *(_QWORD *)(a2 + v35);
    *(_BYTE *)(v36 + 8) = *(_BYTE *)(a2 + v35 + 8);
    v38 = *(_OWORD *)(a2 + v35 + 32);
    *(_OWORD *)(v36 + 16) = *(_OWORD *)(a2 + v35 + 16);
    *(_OWORD *)(v36 + 32) = v38;
    *(_OWORD *)(v36 + 48) = *(_OWORD *)(a2 + v35 + 48);
    *(_OWORD *)(v36 + 57) = *(_OWORD *)(a2 + v35 + 57);
    *(_BYTE *)(v36 + 73) = *(_BYTE *)(a2 + v35 + 73);
    *(_WORD *)(v36 + 74) = *(_WORD *)(a2 + v35 + 74);
    *(_BYTE *)(v36 + 76) = *(_BYTE *)(a2 + v35 + 76);
    *(_BYTE *)(v36 + 77) = *(_BYTE *)(a2 + v35 + 77);
    v39 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v40 = v39[9];
    v41 = (void *)(v36 + v40);
    v42 = (const void *)(v37 + v40);
    v43 = type metadata accessor for FloatingPointRoundingRule();
    v44 = *(_QWORD *)(v43 - 8);
    v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
    swift_unknownObjectRetain();
    if (v45(v42, 1, v43))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
    v57 = v39[10];
    v58 = v36 + v57;
    v59 = v37 + v57;
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
    v60 = v39[11];
    v51 = (_BYTE *)(v36 + v60);
    v52 = (_BYTE *)(v37 + v60);
  }
  *v51 = *v52;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int *v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *__dst;

  if (a1 != a2)
  {
    v7 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v8 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v7, v6, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v24 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v7, v6, v10);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, v7, v6, v10) + 40);
        v12 = a1 + v11;
        v13 = a2 + v11;
        LOBYTE(v11) = *(_BYTE *)(a2 + v11 + 8);
        *(_QWORD *)v12 = *(_QWORD *)v13;
        *(_BYTE *)(v12 + 8) = v11;
        v14 = *(_OWORD *)(v13 + 57);
        v16 = *(_OWORD *)(v13 + 32);
        v15 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
        *(_OWORD *)(v12 + 32) = v16;
        *(_OWORD *)(v12 + 48) = v15;
        *(_OWORD *)(v12 + 57) = v14;
        *(_BYTE *)(v12 + 73) = *(_BYTE *)(v13 + 73);
        *(_DWORD *)(v12 + 74) = *(_DWORD *)(v13 + 74);
        *(_BYTE *)(v12 + 78) = *(_BYTE *)(v13 + 78);
        v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v18 = v17[9];
        __dst = (void *)(v12 + v18);
        v19 = (const void *)(v13 + v18);
        v20 = type metadata accessor for FloatingPointRoundingRule();
        v21 = *(_QWORD *)(v20 - 8);
        v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v22(v19, 1, v20))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
        }
        v46 = v17[10];
        v47 = v12 + v46;
        v48 = (uint64_t *)(v13 + v46);
        v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(_QWORD *)v47 = v49;
        *(_BYTE *)(v12 + v17[11]) = *(_BYTE *)(v13 + v17[11]);
        v50 = v17[12];
        v44 = (_BYTE *)(v12 + v50);
        v45 = (_BYTE *)(v13 + v50);
LABEL_14:
        *v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v24 = type metadata accessor for FloatingPointFormatStyle(0, v7, v6, v10);
    }
    v25 = *(int *)(v24 + 36);
    v26 = a1 + v25;
    v27 = a2 + v25;
    LOBYTE(v25) = *(_BYTE *)(a2 + v25 + 8);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *(_BYTE *)(v26 + 8) = v25;
    v28 = *(_OWORD *)(v27 + 57);
    v30 = *(_OWORD *)(v27 + 32);
    v29 = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)(v27 + 16);
    *(_OWORD *)(v26 + 32) = v30;
    *(_OWORD *)(v26 + 48) = v29;
    *(_OWORD *)(v26 + 57) = v28;
    *(_BYTE *)(v26 + 73) = *(_BYTE *)(v27 + 73);
    LOWORD(v25) = *(_WORD *)(v27 + 74);
    *(_BYTE *)(v26 + 76) = *(_BYTE *)(v27 + 76);
    *(_WORD *)(v26 + 74) = v25;
    *(_BYTE *)(v26 + 77) = *(_BYTE *)(v27 + 77);
    v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v32 = v31[9];
    v33 = (void *)(v26 + v32);
    v34 = (const void *)(v27 + v32);
    v35 = type metadata accessor for FloatingPointRoundingRule();
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
    swift_unknownObjectRetain();
    if (v37(v34, 1, v35))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v39 = v31[10];
    v40 = v26 + v39;
    v41 = (uint64_t *)(v27 + v39);
    v42 = *v41;
    *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
    *(_QWORD *)v40 = v42;
    v43 = v31[11];
    v44 = (_BYTE *)(v26 + v43);
    v45 = (_BYTE *)(v27 + v43);
    goto LABEL_14;
  }
  return a1;
}

_OWORD *initializeWithTake for FloatingPointFormatStyle.Attributed(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v7, v6, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v22 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v7, v6, v9);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, v7, v6, v9) + 40);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      *(_QWORD *)v12 = *(_QWORD *)((char *)a2 + v11);
      v12[8] = *((_BYTE *)a2 + v11 + 8);
      v14 = *(_OWORD *)((char *)a2 + v11 + 32);
      *((_OWORD *)v12 + 1) = *(_OWORD *)((char *)a2 + v11 + 16);
      *((_OWORD *)v12 + 2) = v14;
      *((_OWORD *)v12 + 3) = *(_OWORD *)((char *)a2 + v11 + 48);
      *(_OWORD *)(v12 + 57) = *(_OWORD *)((char *)a2 + v11 + 57);
      v12[73] = *((_BYTE *)a2 + v11 + 73);
      *(_DWORD *)(v12 + 74) = *(_DWORD *)((char *)a2 + v11 + 74);
      v12[78] = *((_BYTE *)a2 + v11 + 78);
      v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v16 = v15[9];
      v17 = &v12[v16];
      v18 = &v13[v16];
      v19 = type metadata accessor for FloatingPointRoundingRule();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v40 = v15[10];
      v41 = &v12[v40];
      v42 = &v13[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v12[v15[11]] = v13[v15[11]];
      v43 = v15[12];
      v38 = &v12[v43];
      v39 = &v13[v43];
      goto LABEL_13;
    }
    *a1 = *a2;
    v22 = type metadata accessor for FloatingPointFormatStyle(0, v7, v6, v9);
  }
  v23 = *(int *)(v22 + 36);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)((char *)a2 + v23);
  v24[8] = *((_BYTE *)a2 + v23 + 8);
  v26 = *(_OWORD *)((char *)a2 + v23 + 32);
  *((_OWORD *)v24 + 1) = *(_OWORD *)((char *)a2 + v23 + 16);
  *((_OWORD *)v24 + 2) = v26;
  *((_OWORD *)v24 + 3) = *(_OWORD *)((char *)a2 + v23 + 48);
  *(_OWORD *)(v24 + 57) = *(_OWORD *)((char *)a2 + v23 + 57);
  v24[73] = *((_BYTE *)a2 + v23 + 73);
  *((_WORD *)v24 + 37) = *(_WORD *)((char *)a2 + v23 + 74);
  v24[76] = *((_BYTE *)a2 + v23 + 76);
  v24[77] = *((_BYTE *)a2 + v23 + 77);
  v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v28 = v27[9];
  v29 = &v24[v28];
  v30 = &v25[v28];
  v31 = type metadata accessor for FloatingPointRoundingRule();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v34 = v27[10];
  v35 = &v24[v34];
  v36 = &v25[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  v37 = v27[11];
  v38 = &v24[v37];
  v39 = &v25[v37];
LABEL_13:
  *v38 = *v39;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FloatingPointFormatStyle.Attributed(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;

  if (a1 != a2)
  {
    v7 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v8 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, v7, v6, a4);
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v23 = type metadata accessor for FloatingPointFormatStyle.Percent(0, v7, v6, v10);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        v12 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, v7, v6, v10) + 40);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
        v13[8] = *((_BYTE *)a2 + v12 + 8);
        v15 = *(_OWORD *)((char *)a2 + v12 + 32);
        *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)a2 + v12 + 16);
        *((_OWORD *)v13 + 2) = v15;
        *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)a2 + v12 + 48);
        *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + v12 + 57);
        v13[73] = *((_BYTE *)a2 + v12 + 73);
        *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)a2 + v12 + 74);
        v13[78] = *((_BYTE *)a2 + v12 + 78);
        v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v17 = v16[9];
        v18 = &v13[v17];
        v19 = &v14[v17];
        v20 = type metadata accessor for FloatingPointRoundingRule();
        v21 = *(_QWORD *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        v41 = v16[10];
        v42 = &v13[v41];
        v43 = &v14[v41];
        *(_QWORD *)v42 = *(_QWORD *)v43;
        v42[8] = v43[8];
        v13[v16[11]] = v14[v16[11]];
        v44 = v16[12];
        v39 = &v13[v44];
        v40 = &v14[v44];
LABEL_14:
        *v39 = *v40;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v23 = type metadata accessor for FloatingPointFormatStyle(0, v7, v6, v10);
    }
    v24 = *(int *)(v23 + 36);
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    *(_QWORD *)v25 = *(_QWORD *)((char *)a2 + v24);
    v25[8] = *((_BYTE *)a2 + v24 + 8);
    v27 = *(_OWORD *)((char *)a2 + v24 + 32);
    *((_OWORD *)v25 + 1) = *(_OWORD *)((char *)a2 + v24 + 16);
    *((_OWORD *)v25 + 2) = v27;
    *((_OWORD *)v25 + 3) = *(_OWORD *)((char *)a2 + v24 + 48);
    *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
    v25[73] = *((_BYTE *)a2 + v24 + 73);
    *((_WORD *)v25 + 37) = *(_WORD *)((char *)a2 + v24 + 74);
    v25[76] = *((_BYTE *)a2 + v24 + 76);
    v25[77] = *((_BYTE *)a2 + v24 + 77);
    v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v29 = v28[9];
    v30 = &v25[v29];
    v31 = &v26[v29];
    v32 = type metadata accessor for FloatingPointRoundingRule();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v35 = v28[10];
    v36 = &v25[v35];
    v37 = &v26[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v28[11];
    v39 = &v25[v38];
    v40 = &v26[v38];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181DB1924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181DB1970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a2, v6);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Percent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181DB1A0C + 4 * byte_182161605[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181DB1A40 + 4 * asc_182161600[v4]))();
}

uint64_t sub_181DB1A40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181DB1A48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181DB1A50);
  return result;
}

uint64_t sub_181DB1A5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181DB1A64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181DB1A68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181DB1A70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for FloatingPointFormatStyle(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for FloatingPointFormatStyle.Currency(319, v4, v5, v7);
    if (v10 <= 0x3F)
    {
      result = type metadata accessor for FloatingPointFormatStyle.Percent(319, v4, v5, v9);
      if (v11 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int *v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(const void *, uint64_t, uint64_t);
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v22 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8)+ 36);
      v23 = a1 + v22;
      v24 = (uint64_t)a2 + v22;
      *(_QWORD *)v23 = *(uint64_t *)((char *)a2 + v22);
      *(_BYTE *)(v23 + 8) = *((_BYTE *)a2 + v22 + 8);
      v25 = *(_OWORD *)((char *)a2 + v22 + 32);
      *(_OWORD *)(v23 + 16) = *(_OWORD *)((char *)a2 + v22 + 16);
      *(_OWORD *)(v23 + 32) = v25;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)((char *)a2 + v22 + 48);
      *(_OWORD *)(v23 + 57) = *(_OWORD *)((char *)a2 + v22 + 57);
      *(_BYTE *)(v23 + 73) = *((_BYTE *)a2 + v22 + 73);
      *(_WORD *)(v23 + 74) = *(_WORD *)((char *)a2 + v22 + 74);
      *(_BYTE *)(v23 + 76) = *((_BYTE *)a2 + v22 + 76);
      *(_BYTE *)(v23 + 77) = *((_BYTE *)a2 + v22 + 77);
      v26 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v27 = v26[9];
      v28 = (void *)(v23 + v27);
      v29 = (const void *)(v24 + v27);
      v30 = type metadata accessor for FloatingPointRoundingRule();
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
      swift_unknownObjectRetain();
      if (v32(v29, 1, v30))
      {
LABEL_10:
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
LABEL_14:
        v41 = v26[10];
        v42 = v23 + v41;
        v43 = v24 + v41;
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_BYTE *)(v23 + v26[11]) = *(_BYTE *)(v24 + v26[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v9 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v9;
        v10 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8)+ 40);
        v11 = a1 + v10;
        v12 = (uint64_t)a2 + v10;
        *(_QWORD *)v11 = *(uint64_t *)((char *)a2 + v10);
        *(_BYTE *)(v11 + 8) = *((_BYTE *)a2 + v10 + 8);
        v13 = *(_OWORD *)((char *)a2 + v10 + 32);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)((char *)a2 + v10 + 16);
        *(_OWORD *)(v11 + 32) = v13;
        *(_OWORD *)(v11 + 48) = *(_OWORD *)((char *)a2 + v10 + 48);
        *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + v10 + 57);
        *(_BYTE *)(v11 + 73) = *((_BYTE *)a2 + v10 + 73);
        *(_DWORD *)(v11 + 74) = *(_DWORD *)((char *)a2 + v10 + 74);
        *(_BYTE *)(v11 + 78) = *((_BYTE *)a2 + v10 + 78);
        v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v15 = v14[9];
        __dst = (void *)(v11 + v15);
        v16 = (const void *)(v12 + v15);
        v17 = type metadata accessor for FloatingPointRoundingRule();
        v18 = *(_QWORD *)(v17 - 8);
        v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v19(v16, 1, v17))
        {
          v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(__dst, v16, v17);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
        }
        v38 = v14[10];
        v39 = v11 + v38;
        v40 = v12 + v38;
        *(_QWORD *)v39 = *(_QWORD *)v40;
        *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
        *(_BYTE *)(v11 + v14[11]) = *(_BYTE *)(v12 + v14[11]);
        *(_BYTE *)(v11 + v14[12]) = *(_BYTE *)(v12 + v14[12]);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v33 = *(int *)(type metadata accessor for FloatingPointFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8)+ 36);
      v23 = a1 + v33;
      v24 = (uint64_t)a2 + v33;
      *(_QWORD *)v23 = *(uint64_t *)((char *)a2 + v33);
      *(_BYTE *)(v23 + 8) = *((_BYTE *)a2 + v33 + 8);
      v34 = *(_OWORD *)((char *)a2 + v33 + 32);
      *(_OWORD *)(v23 + 16) = *(_OWORD *)((char *)a2 + v33 + 16);
      *(_OWORD *)(v23 + 32) = v34;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)((char *)a2 + v33 + 48);
      *(_OWORD *)(v23 + 57) = *(_OWORD *)((char *)a2 + v33 + 57);
      *(_BYTE *)(v23 + 73) = *((_BYTE *)a2 + v33 + 73);
      *(_WORD *)(v23 + 74) = *(_WORD *)((char *)a2 + v33 + 74);
      *(_BYTE *)(v23 + 76) = *((_BYTE *)a2 + v33 + 76);
      *(_BYTE *)(v23 + 77) = *((_BYTE *)a2 + v33 + 77);
      v26 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v35 = v26[9];
      v28 = (void *)(v23 + v35);
      v29 = (const void *)(v24 + v35);
      v30 = type metadata accessor for FloatingPointRoundingRule();
      v31 = *(_QWORD *)(v30 - 8);
      v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
      swift_unknownObjectRetain();
      if (v36(v29, 1, v30))
        goto LABEL_10;
    }
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    goto LABEL_14;
  }
  v21 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    v6 = type metadata accessor for FloatingPointFormatStyle.Percent(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v7);
LABEL_6:
    v8 = *(int *)(v6 + 36);
    v9 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    swift_unknownObjectRelease();
    v6 = type metadata accessor for FloatingPointFormatStyle(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v5);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v10)+ 40);
  v9 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v11 = a1 + *(int *)(v9 + 36) + v8;
  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

uint64_t initializeWithCopy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(const void *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int *v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__dst;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v20 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 36);
    v21 = a1 + v20;
    v22 = a2 + v20;
    *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
    *(_BYTE *)(v21 + 8) = *(_BYTE *)(a2 + v20 + 8);
    v23 = *(_OWORD *)(a2 + v20 + 32);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(a2 + v20 + 16);
    *(_OWORD *)(v21 + 32) = v23;
    *(_OWORD *)(v21 + 48) = *(_OWORD *)(a2 + v20 + 48);
    *(_OWORD *)(v21 + 57) = *(_OWORD *)(a2 + v20 + 57);
    *(_BYTE *)(v21 + 73) = *(_BYTE *)(a2 + v20 + 73);
    *(_WORD *)(v21 + 74) = *(_WORD *)(a2 + v20 + 74);
    *(_BYTE *)(v21 + 76) = *(_BYTE *)(a2 + v20 + 76);
    *(_BYTE *)(v21 + 77) = *(_BYTE *)(a2 + v20 + 77);
    v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v25 = v24[9];
    v26 = (void *)(v21 + v25);
    v27 = (const void *)(v22 + v25);
    v28 = type metadata accessor for FloatingPointRoundingRule();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
    swift_unknownObjectRetain();
    if (v30(v27, 1, v28))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v50 = v24[10];
    v51 = v21 + v50;
    v52 = v22 + v50;
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
    v53 = v24[11];
    v48 = (_BYTE *)(v21 + v53);
    v49 = (_BYTE *)(v22 + v53);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
    v10 = a1 + v9;
    v11 = a2 + v9;
    *(_QWORD *)v10 = *(_QWORD *)(a2 + v9);
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(a2 + v9 + 8);
    v12 = *(_OWORD *)(a2 + v9 + 32);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 + v9 + 16);
    *(_OWORD *)(v10 + 32) = v12;
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)(a2 + v9 + 57);
    *(_BYTE *)(v10 + 73) = *(_BYTE *)(a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)(a2 + v9 + 74);
    *(_BYTE *)(v10 + 78) = *(_BYTE *)(a2 + v9 + 78);
    v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v14 = v13[9];
    __dst = (void *)(v10 + v14);
    v15 = (const void *)(v11 + v14);
    v16 = type metadata accessor for FloatingPointRoundingRule();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v44 = v13[10];
    v45 = v10 + v44;
    v46 = v11 + v44;
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
    *(_BYTE *)(v10 + v13[11]) = *(_BYTE *)(v11 + v13[11]);
    v47 = v13[12];
    v48 = (_BYTE *)(v10 + v47);
    v49 = (_BYTE *)(v11 + v47);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v32 = *(int *)(type metadata accessor for FloatingPointFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 36);
    v33 = a1 + v32;
    v34 = a2 + v32;
    *(_QWORD *)v33 = *(_QWORD *)(a2 + v32);
    *(_BYTE *)(v33 + 8) = *(_BYTE *)(a2 + v32 + 8);
    v35 = *(_OWORD *)(a2 + v32 + 32);
    *(_OWORD *)(v33 + 16) = *(_OWORD *)(a2 + v32 + 16);
    *(_OWORD *)(v33 + 32) = v35;
    *(_OWORD *)(v33 + 48) = *(_OWORD *)(a2 + v32 + 48);
    *(_OWORD *)(v33 + 57) = *(_OWORD *)(a2 + v32 + 57);
    *(_BYTE *)(v33 + 73) = *(_BYTE *)(a2 + v32 + 73);
    *(_WORD *)(v33 + 74) = *(_WORD *)(a2 + v32 + 74);
    *(_BYTE *)(v33 + 76) = *(_BYTE *)(a2 + v32 + 76);
    *(_BYTE *)(v33 + 77) = *(_BYTE *)(a2 + v32 + 77);
    v36 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v37 = v36[9];
    v38 = (void *)(v33 + v37);
    v39 = (const void *)(v34 + v37);
    v40 = type metadata accessor for FloatingPointRoundingRule();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
    swift_unknownObjectRetain();
    if (v42(v39, 1, v40))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v54 = v36[10];
    v55 = v33 + v54;
    v56 = v34 + v54;
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
    v57 = v36[11];
    v48 = (_BYTE *)(v33 + v57);
    v49 = (_BYTE *)(v34 + v57);
  }
  *v48 = *v49;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void *__dst;

  if (a1 != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v21 = type metadata accessor for FloatingPointFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v8 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
        v9 = a1 + v8;
        v10 = a2 + v8;
        LOBYTE(v8) = *(_BYTE *)(a2 + v8 + 8);
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *(_BYTE *)(v9 + 8) = v8;
        v11 = *(_OWORD *)(v10 + 57);
        v13 = *(_OWORD *)(v10 + 32);
        v12 = *(_OWORD *)(v10 + 48);
        *(_OWORD *)(v9 + 16) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v9 + 32) = v13;
        *(_OWORD *)(v9 + 48) = v12;
        *(_OWORD *)(v9 + 57) = v11;
        *(_BYTE *)(v9 + 73) = *(_BYTE *)(v10 + 73);
        *(_DWORD *)(v9 + 74) = *(_DWORD *)(v10 + 74);
        *(_BYTE *)(v9 + 78) = *(_BYTE *)(v10 + 78);
        v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v15 = v14[9];
        __dst = (void *)(v9 + v15);
        v16 = (const void *)(v10 + v15);
        v17 = type metadata accessor for FloatingPointRoundingRule();
        v18 = *(_QWORD *)(v17 - 8);
        v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v19(v16, 1, v17))
        {
          v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(__dst, v16, v17);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
        }
        v43 = v14[10];
        v44 = v9 + v43;
        v45 = (uint64_t *)(v10 + v43);
        v46 = *v45;
        *(_BYTE *)(v44 + 8) = *((_BYTE *)v45 + 8);
        *(_QWORD *)v44 = v46;
        *(_BYTE *)(v9 + v14[11]) = *(_BYTE *)(v10 + v14[11]);
        v47 = v14[12];
        v41 = (_BYTE *)(v9 + v47);
        v42 = (_BYTE *)(v10 + v47);
LABEL_14:
        *v41 = *v42;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v21 = type metadata accessor for FloatingPointFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
    }
    v22 = *(int *)(v21 + 36);
    v23 = a1 + v22;
    v24 = a2 + v22;
    LOBYTE(v22) = *(_BYTE *)(a2 + v22 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_BYTE *)(v23 + 8) = v22;
    v25 = *(_OWORD *)(v24 + 57);
    v27 = *(_OWORD *)(v24 + 32);
    v26 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
    *(_OWORD *)(v23 + 32) = v27;
    *(_OWORD *)(v23 + 48) = v26;
    *(_OWORD *)(v23 + 57) = v25;
    *(_BYTE *)(v23 + 73) = *(_BYTE *)(v24 + 73);
    LOWORD(v22) = *(_WORD *)(v24 + 74);
    *(_BYTE *)(v23 + 76) = *(_BYTE *)(v24 + 76);
    *(_WORD *)(v23 + 74) = v22;
    *(_BYTE *)(v23 + 77) = *(_BYTE *)(v24 + 77);
    v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v29 = v28[9];
    v30 = (void *)(v23 + v29);
    v31 = (const void *)(v24 + v29);
    v32 = type metadata accessor for FloatingPointRoundingRule();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
    swift_unknownObjectRetain();
    if (v34(v31, 1, v32))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v36 = v28[10];
    v37 = v23 + v36;
    v38 = (uint64_t *)(v24 + v36);
    v39 = *v38;
    *(_BYTE *)(v37 + 8) = *((_BYTE *)v38 + 8);
    *(_QWORD *)v37 = v39;
    v40 = v28[11];
    v41 = (_BYTE *)(v23 + v40);
    v42 = (_BYTE *)(v24 + v40);
    goto LABEL_14;
  }
  return a1;
}

_OWORD *initializeWithTake for FloatingPointFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v20 = type metadata accessor for FloatingPointFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
      v10[8] = *((_BYTE *)a2 + v9 + 8);
      v12 = *(_OWORD *)((char *)a2 + v9 + 32);
      *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
      *((_OWORD *)v10 + 2) = v12;
      *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
      *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
      v10[73] = *((_BYTE *)a2 + v9 + 73);
      *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
      v10[78] = *((_BYTE *)a2 + v9 + 78);
      v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v14 = v13[9];
      v15 = &v10[v14];
      v16 = &v11[v14];
      v17 = type metadata accessor for FloatingPointRoundingRule();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v38 = v13[10];
      v39 = &v10[v38];
      v40 = &v11[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      v10[v13[11]] = v11[v13[11]];
      v41 = v13[12];
      v36 = &v10[v41];
      v37 = &v11[v41];
      goto LABEL_13;
    }
    *a1 = *a2;
    v20 = type metadata accessor for FloatingPointFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
  }
  v21 = *(int *)(v20 + 36);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v21);
  v22[8] = *((_BYTE *)a2 + v21 + 8);
  v24 = *(_OWORD *)((char *)a2 + v21 + 32);
  *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
  *((_OWORD *)v22 + 2) = v24;
  *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
  *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
  v22[73] = *((_BYTE *)a2 + v21 + 73);
  *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
  v22[76] = *((_BYTE *)a2 + v21 + 76);
  v22[77] = *((_BYTE *)a2 + v21 + 77);
  v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v26 = v25[9];
  v27 = &v22[v26];
  v28 = &v23[v26];
  v29 = type metadata accessor for FloatingPointRoundingRule();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = v25[10];
  v33 = &v22[v32];
  v34 = &v23[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v34[8];
  v35 = v25[11];
  v36 = &v22[v35];
  v37 = &v23[v35];
LABEL_13:
  *v36 = *v37;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FloatingPointFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  if (a1 != a2)
  {
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v20 = type metadata accessor for FloatingPointFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        v9 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
        v10[8] = *((_BYTE *)a2 + v9 + 8);
        v12 = *(_OWORD *)((char *)a2 + v9 + 32);
        *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
        *((_OWORD *)v10 + 2) = v12;
        *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
        *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
        v10[73] = *((_BYTE *)a2 + v9 + 73);
        *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
        v10[78] = *((_BYTE *)a2 + v9 + 78);
        v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        v14 = v13[9];
        v15 = &v10[v14];
        v16 = &v11[v14];
        v17 = type metadata accessor for FloatingPointRoundingRule();
        v18 = *(_QWORD *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        v38 = v13[10];
        v39 = &v10[v38];
        v40 = &v11[v38];
        *(_QWORD *)v39 = *(_QWORD *)v40;
        v39[8] = v40[8];
        v10[v13[11]] = v11[v13[11]];
        v41 = v13[12];
        v36 = &v10[v41];
        v37 = &v11[v41];
LABEL_14:
        *v36 = *v37;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      v20 = type metadata accessor for FloatingPointFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
    }
    v21 = *(int *)(v20 + 36);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v21);
    v22[8] = *((_BYTE *)a2 + v21 + 8);
    v24 = *(_OWORD *)((char *)a2 + v21 + 32);
    *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
    *((_OWORD *)v22 + 2) = v24;
    *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
    *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
    v22[73] = *((_BYTE *)a2 + v21 + 73);
    *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
    v22[76] = *((_BYTE *)a2 + v21 + 76);
    v22[77] = *((_BYTE *)a2 + v21 + 77);
    v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v26 = v25[9];
    v27 = &v22[v26];
    v28 = &v23[v26];
    v29 = type metadata accessor for FloatingPointRoundingRule();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v25[10];
    v33 = &v22[v32];
    v34 = &v23[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v25[11];
    v36 = &v22[v35];
    v37 = &v23[v35];
    goto LABEL_14;
  }
  return a1;
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Attributed.Style.CodingKeys);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Currency.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181DB2F54 + 4 * byte_18216160F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181DB2F88 + 4 * byte_18216160A[v4]))();
}

uint64_t sub_181DB2F88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181DB2F90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181DB2F98);
  return result;
}

uint64_t sub_181DB2FA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181DB2FACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181DB2FB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181DB2FB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Attributed.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181DB3004 + 4 * byte_182161614[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181DB3024 + 4 * byte_182161619[v4]))();
}

_BYTE *sub_181DB3004(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181DB3024(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181DB302C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181DB3034(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181DB303C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181DB3044(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

_QWORD *AttributedString.CharacterView.index(after:)@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD v18[3];
  __int128 v19[3];
  _BYTE v20[40];

  v4 = *result >> 10;
  v5 = v2[5] >> 10;
  if (v4 >= v2[1] >> 10 && v5 >= v4)
  {
    v7 = *v2;
    v8 = *(_OWORD *)(*v2 + 16);
    v9 = *(_OWORD *)(*v2 + 48);
    v18[1] = *(_OWORD *)(*v2 + 32);
    v18[2] = v9;
    v18[0] = v8;
    v10 = *(_OWORD *)(v7 + 16);
    v19[1] = *(_OWORD *)(v7 + 32);
    v19[2] = v9;
    v19[0] = v10;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
    outlined retain of Locale((uint64_t)v20);
    v11 = BigString.index(after:)();
    v13 = v12;
    v15 = v14;
    v17 = v16;
    result = (_QWORD *)outlined release of Locale((uint64_t)v18);
    if (v5 >= v11 >> 10)
    {
      *a2 = v11;
      a2[1] = v13;
      a2[2] = v15;
      a2[3] = v17;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedString.CharacterView.index(before:)@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD v18[3];
  __int128 v19[3];
  _BYTE v20[40];

  v4 = *result >> 10;
  v5 = v2[1] >> 10;
  if (v4 >= v5 && v2[5] >> 10 >= v4)
  {
    v7 = *v2;
    v8 = *(_OWORD *)(*v2 + 16);
    v9 = *(_OWORD *)(*v2 + 48);
    v18[1] = *(_OWORD *)(*v2 + 32);
    v18[2] = v9;
    v18[0] = v8;
    v10 = *(_OWORD *)(v7 + 16);
    v19[1] = *(_OWORD *)(v7 + 32);
    v19[2] = v9;
    v19[0] = v10;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
    outlined retain of Locale((uint64_t)v20);
    v11 = BigString.index(before:)();
    v13 = v12;
    v15 = v14;
    v17 = v16;
    result = (_QWORD *)outlined release of Locale((uint64_t)v18);
    if (v5 <= v11 >> 10)
    {
      *a2 = v11;
      a2[1] = v13;
      a2[2] = v15;
      a2[3] = v17;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL specialized Set.isEmpty.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

_QWORD *specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(_QWORD *result)
{
  _QWORD *v1;
  _OWORD *v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v19[48];
  _BYTE v20[48];
  unint64_t v21[8];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (*result >> 10 < v1[1] >> 10)
  {
    __break(1u);
  }
  else if (v1[5] >> 10 >= result[4] >> 10)
  {
    v2 = (_OWORD *)*v1;
    v3 = *(_OWORD *)(*v1 + 32);
    v25 = *(_OWORD *)(*v1 + 16);
    v26 = v3;
    v27 = v2[3];
    BigString.unicodeScalars.getter();
    v4 = BigString.UnicodeScalarView.index(roundingDown:)();
    v6 = v5;
    v8 = v7;
    v10 = v9;
    outlined release of Locale((uint64_t)v19);
    v11 = v2[2];
    v22 = v2[1];
    v23 = v11;
    v24 = v2[3];
    BigString.unicodeScalars.getter();
    v12 = BigString.UnicodeScalarView.index(roundingDown:)();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    outlined release of Locale((uint64_t)v20);
    v21[0] = v4;
    v21[1] = v6;
    v21[2] = v8;
    v21[3] = v10;
    v21[4] = v12;
    v21[5] = v14;
    v21[6] = v16;
    v21[7] = v18;
    return (_QWORD *)specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v21);
  }
  __break(1u);
  return result;
}

_QWORD *specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(_QWORD *result, int a2)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[48];
  _BYTE v22[48];
  unint64_t v23[8];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (*result >> 10 < v2[1] >> 10)
  {
    __break(1u);
  }
  else if (v2[5] >> 10 >= result[4] >> 10)
  {
    v3 = (_OWORD *)*v2;
    v4 = *(_OWORD *)(*v2 + 32);
    v27 = *(_OWORD *)(*v2 + 16);
    v28 = v4;
    v29 = v3[3];
    BigString.unicodeScalars.getter();
    v5 = BigString.UnicodeScalarView.index(roundingDown:)();
    v7 = v6;
    v9 = v8;
    v11 = v10;
    outlined release of Locale((uint64_t)v21);
    v12 = v3[2];
    v24 = v3[1];
    v25 = v12;
    v26 = v3[3];
    BigString.unicodeScalars.getter();
    v13 = BigString.UnicodeScalarView.index(roundingDown:)();
    v15 = v14;
    v17 = v16;
    v19 = v18;
    outlined release of Locale((uint64_t)v22);
    v23[0] = v5;
    v23[1] = v7;
    v23[2] = v9;
    v23[3] = v11;
    v23[4] = v13;
    v23[5] = v15;
    v23[6] = v17;
    v23[7] = v19;
    return (_QWORD *)specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v23, a2);
  }
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[48];
  _QWORD v58[6];
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE v67[48];
  _BYTE v68[48];
  unint64_t v69[8];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  BigString.init()();
  v58[0] = 0;
  MEMORY[0x186DA9E90](v58, 8);
  v5 = v58[0];
  type metadata accessor for AttributedString.Guts();
  v6 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
    goto LABEL_10;
  *(_OWORD *)(v6 + 16) = v54;
  *(_OWORD *)(v6 + 32) = v55;
  *(_OWORD *)(v6 + 48) = v56;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = v5;
  v8 = BigString.startIndex.getter();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = BigString.endIndex.getter();
  v76 = v8;
  v77 = v10;
  v78 = v12;
  v79 = v14;
  v80 = v15;
  v81 = v16;
  v82 = v17;
  v83 = v18;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v57);
  outlined release of Locale((uint64_t)v58);
  result = swift_release();
  v19 = v59;
  v20 = v60;
  v21 = v61;
  v22 = v62;
  v23 = v63;
  v24 = v64;
  v25 = v65;
  v45 = (_OWORD *)v6;
  v46 = v59;
  v47 = v60;
  v48 = v61;
  v49 = v62;
  v50 = v63;
  v51 = v64;
  v52 = v65;
  v53 = v66;
  if (a2)
  {
    if (a2 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    while (v50 >> 10 >= v46 >> 10)
    {
      v26 = v45[2];
      v73 = v45[1];
      v74 = v26;
      v75 = v45[3];
      BigString.unicodeScalars.getter();
      v27 = BigString.UnicodeScalarView.index(roundingDown:)();
      v29 = v28;
      v31 = v30;
      v44 = a2;
      v33 = v32;
      outlined release of Locale((uint64_t)v67);
      v34 = v45[2];
      v70 = v45[1];
      v71 = v34;
      v72 = v45[3];
      BigString.unicodeScalars.getter();
      v35 = BigString.UnicodeScalarView.index(roundingDown:)();
      v37 = v36;
      v39 = v38;
      v41 = v40;
      outlined release of Locale((uint64_t)v68);
      v69[0] = v27;
      v69[1] = v29;
      v69[2] = v31;
      v69[3] = v33;
      v69[4] = v35;
      v69[5] = v37;
      v69[6] = v39;
      v69[7] = v41;
      result = specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v69, a1);
      a2 = v44 - 1;
      if (v44 == 1)
      {
        v6 = (uint64_t)v45;
        v19 = v46;
        v20 = v47;
        v21 = v48;
        v22 = v49;
        v23 = v50;
        v24 = v51;
        v25 = v52;
        v42 = v53;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v42 = v66;
LABEL_8:
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = v21;
  *(_QWORD *)(a3 + 32) = v22;
  *(_QWORD *)(a3 + 40) = v23;
  *(_QWORD *)(a3 + 48) = v24;
  *(_QWORD *)(a3 + 56) = v25;
  *(_OWORD *)(a3 + 64) = v42;
  return result;
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67[8];
  _OWORD v68[3];
  _OWORD v69[3];
  __int128 v70[3];
  _BYTE v71[48];

  BigString.init()();
  v55 = 0;
  MEMORY[0x186DA9E90](&v55, 8);
  v6 = v55;
  type metadata accessor for AttributedString.Guts();
  v7 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
    goto LABEL_10;
  v9 = v65;
  *(_OWORD *)(v7 + 16) = v64;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v66;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = v6;
  v10 = BigString.startIndex.getter();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  result = BigString.endIndex.getter();
  v55 = (_OWORD *)v7;
  v56 = v10;
  v57 = v12;
  v58 = v14;
  v59 = v16;
  v60 = result;
  v61 = v17;
  v62 = v18;
  v63 = v19;
  if (a3)
  {
    if (a3 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    while (1)
    {
      v20 = v60;
      if (v60 >> 10 < v56 >> 10)
        break;
      v22 = v62;
      v21 = v63;
      v23 = v61;
      v24 = a3;
      v25 = v55;
      v26 = v55[1];
      v27 = v55[3];
      v69[1] = v55[2];
      v69[2] = v27;
      v69[0] = v26;
      swift_bridgeObjectRetain();
      outlined retain of Locale((uint64_t)v69);
      v28 = MEMORY[0x186DA3EC0](v20, v23, v22, v21);
      v30 = v29;
      v53 = v32;
      v54 = v31;
      outlined release of Locale((uint64_t)v69);
      v33 = v25[1];
      v34 = v25[3];
      v68[1] = v25[2];
      v68[2] = v34;
      v68[0] = v33;
      v35 = v25[1];
      v70[1] = v25[2];
      v70[2] = v34;
      v70[0] = v35;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v70, (uint64_t)v71);
      outlined retain of Locale((uint64_t)v71);
      v36 = MEMORY[0x186DA3EC0](v20, v23, v22, v21);
      v38 = v37;
      v40 = v39;
      v42 = v41;
      outlined release of Locale((uint64_t)v68);
      v67[0] = v28;
      v67[1] = v30;
      v67[2] = v54;
      v67[3] = v53;
      v67[4] = v36;
      v67[5] = v38;
      v67[6] = v40;
      v67[7] = v42;
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v67, a1, a2);
      result = swift_bridgeObjectRelease();
      a3 = v24 - 1;
      if (v24 == 1)
      {
        result = swift_bridgeObjectRelease();
        v7 = (uint64_t)v55;
        v43 = v56;
        v12 = v57;
        v44 = v58;
        v16 = v59;
        v45 = v60;
        v47 = v61;
        v46 = v62;
        v48 = v63;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v47 = v17;
  v46 = v18;
  v49 = v19;
  v50 = result;
  result = swift_bridgeObjectRelease();
  v45 = v50;
  v48 = v49;
  v44 = v14;
  v43 = v10;
LABEL_8:
  *(_QWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v43;
  *(_QWORD *)(a4 + 16) = v12;
  *(_QWORD *)(a4 + 24) = v44;
  *(_QWORD *)(a4 + 32) = v16;
  *(_QWORD *)(a4 + 40) = v45;
  *(_QWORD *)(a4 + 48) = v47;
  *(_QWORD *)(a4 + 56) = v46;
  *(_OWORD *)(a4 + 64) = v48;
  return result;
}

uint64_t specialized RangeReplaceableCollection.append<A>(contentsOf:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35[8];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v1 = v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v4 = (char *)&v22 - v3;
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = v4;
  v26 = AssociatedTypeWitness;
  v24 = AssociatedConformanceWitness;
  result = dispatch thunk of IteratorProtocol.next()();
  if ((v32 & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  while (v1[5] >> 10 >= v1[1] >> 10)
  {
    v30 = v31;
    v7 = (_OWORD *)*v1;
    v8 = *(_OWORD *)(*v1 + 32);
    v39 = *(_OWORD *)(*v1 + 16);
    v40 = v8;
    v41 = v7[3];
    BigString.unicodeScalars.getter();
    v9 = BigString.UnicodeScalarView.index(roundingDown:)();
    v28 = v10;
    v29 = v9;
    v12 = v11;
    v27 = v13;
    outlined release of Locale((uint64_t)&v33);
    v14 = v7[2];
    v36 = v7[1];
    v37 = v14;
    v38 = v7[3];
    BigString.unicodeScalars.getter();
    v15 = BigString.UnicodeScalarView.index(roundingDown:)();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    outlined release of Locale((uint64_t)&v34);
    v35[0] = v29;
    v35[1] = v28;
    v35[2] = v12;
    v35[3] = v27;
    v35[4] = v15;
    v35[5] = v17;
    v35[6] = v19;
    v35[7] = v21;
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v35, v30);
    result = dispatch thunk of IteratorProtocol.next()();
    if (v32 == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  }
  __break(1u);
  return result;
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40[8];
  _OWORD v41[3];
  _OWORD v42[3];
  __int128 v43[3];
  _BYTE v44[40];
  __int128 v45[3];
  _BYTE v46[48];

  v1 = v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31[0] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v4 = (char *)v31 - v3;
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v32 = v4;
  v33 = AssociatedTypeWitness;
  v31[1] = AssociatedConformanceWitness;
  while (1)
  {
    result = dispatch thunk of IteratorProtocol.next()();
    v7 = v39;
    if (!v39)
      return (*(uint64_t (**)(char *, uint64_t))(v31[0] + 8))(v32, v33);
    v8 = v1[5];
    if (v8 >> 10 < v1[1] >> 10)
      break;
    v37 = v38;
    v9 = v1[7];
    v10 = v1[8];
    v11 = v1[6];
    v12 = (_OWORD *)*v1;
    v13 = *(_OWORD *)(*v1 + 16);
    v14 = *(_OWORD *)(*v1 + 48);
    v42[1] = *(_OWORD *)(*v1 + 32);
    v42[2] = v14;
    v42[0] = v13;
    v15 = v12[1];
    v43[1] = v12[2];
    v43[2] = v14;
    v43[0] = v15;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v43, (uint64_t)v44);
    outlined retain of Locale((uint64_t)v44);
    v16 = MEMORY[0x186DA3EC0](v8, v11, v9, v10);
    v35 = v17;
    v36 = v16;
    v19 = v18;
    v34 = v20;
    outlined release of Locale((uint64_t)v42);
    v21 = v12[1];
    v22 = v12[3];
    v41[1] = v12[2];
    v41[2] = v22;
    v41[0] = v21;
    v23 = v12[1];
    v45[1] = v12[2];
    v45[2] = v22;
    v45[0] = v23;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v45, (uint64_t)v46);
    outlined retain of Locale((uint64_t)v46);
    v24 = MEMORY[0x186DA3EC0](v8, v11, v9, v10);
    v26 = v25;
    v28 = v27;
    v30 = v29;
    outlined release of Locale((uint64_t)v41);
    v40[0] = v36;
    v40[1] = v19;
    v40[2] = v35;
    v40[3] = v34;
    v40[4] = v24;
    v40[5] = v26;
    v40[6] = v28;
    v40[7] = v30;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v40, v37, v7);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void specialized RangeReplaceableCollection.removeFirst()()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[4];
  _BYTE v17[48];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v1 = v0[1];
  v2 = v0[5];
  v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = v0[2];
  v5 = v0[3];
  v6 = v0[4];
  v7 = *v0;
  v8 = *(_OWORD *)(*v0 + 32);
  v24 = *(_OWORD *)(*v0 + 16);
  v25 = v8;
  v26 = *(_OWORD *)(v7 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v17);
  v16[0] = v1;
  v16[1] = v4;
  v16[2] = v5;
  v16[3] = v6;
  v9 = v0[8];
  v13 = v2;
  v14 = *((_OWORD *)v0 + 3);
  v15 = v9;
  AttributedString.UnicodeScalarView._index(_:offsetBy:limitedBy:)(v16, &v13, (unint64_t *)&v18);
  v10 = v20;
  if (v20 != 2)
  {
    v11 = v18;
    if (v3 <= (unint64_t)v18 >> 10)
    {
      v12 = v19;
      *(_QWORD *)&v18 = v1;
      *((_QWORD *)&v18 + 1) = v4;
      v19 = v5;
      v20 = v6;
      v21 = v11;
      v22 = v12;
      v23 = v10;
      specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(&v18);
      return;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
}

{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[4];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[3];
  __int128 v26[3];
  _BYTE v27[48];

  v1 = v0[1];
  v2 = v0[5];
  v3 = v1 >> 10;
  if (v1 >> 10 == v2 >> 10)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= v2 >> 10)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = v0[2];
  v5 = v0[3];
  v6 = v0[4];
  v7 = *v0;
  v8 = *(_OWORD *)(*v0 + 16);
  v9 = *(_OWORD *)(*v0 + 48);
  v25[1] = *(_OWORD *)(*v0 + 32);
  v25[2] = v9;
  v25[0] = v8;
  v10 = *(_OWORD *)(v7 + 16);
  v26[1] = *(_OWORD *)(v7 + 32);
  v26[2] = v9;
  v26[0] = v10;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v25);
  v18[0] = v1;
  v18[1] = v4;
  v18[2] = v5;
  v18[3] = v6;
  v11 = v0[8];
  v15 = v2;
  v16 = *((_OWORD *)v0 + 3);
  v17 = v11;
  AttributedString.CharacterView._index(_:offsetBy:limitedBy:)(v18, &v15, (unint64_t *)&v19);
  v12 = v21;
  if (v21 != 2)
  {
    v13 = v19;
    if (v3 <= (unint64_t)v19 >> 10)
    {
      v14 = v20;
      *(_QWORD *)&v19 = v1;
      *((_QWORD *)&v19 + 1) = v4;
      v20 = v5;
      v21 = v6;
      v22 = v13;
      v23 = v14;
      v24 = v12;
      specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)&v19);
      return;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t a1)
{
  return specialized RangeReplaceableCollection.removeFirst(_:)(a1, (_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t, _OWORD *))AttributedString.UnicodeScalarView._index(_:offsetBy:limitedBy:), (uint64_t (*)(__int128 *))specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t result, _QWORD *(*a2)(__int128 *__return_ptr, _QWORD *, uint64_t, _OWORD *), uint64_t (*a3)(__int128 *))
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v5 = *(_QWORD *)(v3 + 8);
      v6 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      v8 = *(_QWORD *)(v3 + 32);
      v14[0] = v5;
      v14[1] = v6;
      v14[2] = v7;
      v14[3] = v8;
      v9 = *(_OWORD *)(v3 + 56);
      v13[0] = *(_OWORD *)(v3 + 40);
      v13[1] = v9;
      result = (uint64_t)a2(&v15, v14, result, v13);
      v10 = v17;
      if (v17 == 2)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      v11 = v15;
      if ((unint64_t)v15 >> 10 >= v5 >> 10)
      {
        v12 = v16;
        *(_QWORD *)&v15 = v5;
        *((_QWORD *)&v15 + 1) = v6;
        v16 = v7;
        v17 = v8;
        v18 = v11;
        v19 = v12;
        v20 = v10;
        return a3(&v15);
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(uint64_t *))
{
  uint64_t *v1;
  _OWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 *v57;
  unint64_t v59;
  _OWORD *v60;
  unint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75[48];
  char v76[48];
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85[48];
  char v86[48];
  char v87[48];
  char v88[48];
  unint64_t v89[8];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v2 = (_OWORD *)*v1;
  v3 = v1[1];
  v4 = v1[5];
  swift_retain();
  BigString.init()();
  v62 = 0;
  MEMORY[0x186DA9E90](&v62, 8);
  v5 = v62;
  type metadata accessor for AttributedString.Guts();
  v6 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v60 = v2;
  v52 = v1;
  v8 = v73;
  *(_OWORD *)(v6 + 16) = v72;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v74;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = v5;
  v9 = BigString.startIndex.getter();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = BigString.endIndex.getter();
  v102 = v9;
  v103 = v11;
  v104 = v13;
  v105 = v15;
  v106 = v16;
  v107 = v17;
  v108 = v18;
  v109 = v19;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v75);
  outlined release of Locale((uint64_t)v76);
  result = swift_release();
  v20 = v78;
  v21 = v79;
  v22 = v80;
  v23 = v3;
  v24 = v81;
  v25 = v82;
  v26 = v83;
  v27 = v84;
  v63 = (_OWORD *)v6;
  v64 = v77;
  v65 = v78;
  v66 = v79;
  v67 = v80;
  v68 = v81;
  v69 = v82;
  v70 = v83;
  v28 = v4 >> 10;
  v71 = v84;
  v59 = v23 >> 10;
  if (v23 >> 10 != v4 >> 10)
  {
    v57 = v60 + 1;
    v32 = v23;
    v61 = v4 >> 10;
    while (v32 >> 10 >= v59 && v32 >> 10 < v28)
    {
      v48 = v60[2];
      v99 = *v57;
      v100 = v48;
      v101 = v60[3];
      BigString.unicodeScalars.getter();
      v49 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v85);
      v50 = v60[2];
      v96 = *v57;
      v97 = v50;
      v98 = v60[3];
      BigString.unicodeScalars.getter();
      swift_retain();
      v32 = BigString.UnicodeScalarView.index(after:)();
      outlined release of Locale((uint64_t)v86);
      result = swift_release();
      if (v61 < v32 >> 10)
        goto LABEL_21;
      LODWORD(v62) = v49;
      v51 = v110;
      result = a1(&v62);
      v110 = v51;
      if (v51)
        goto LABEL_16;
      if ((result & 1) == 0)
      {
        if (v68 >> 10 < v64 >> 10)
        {
          __break(1u);
LABEL_16:
          swift_release();
          return swift_release();
        }
        v33 = v63;
        v34 = v63[2];
        v93 = v63[1];
        v94 = v34;
        v95 = v63[3];
        BigString.unicodeScalars.getter();
        v35 = BigString.UnicodeScalarView.index(roundingDown:)();
        v55 = v36;
        v56 = v35;
        v53 = v38;
        v54 = v37;
        outlined release of Locale((uint64_t)v87);
        v39 = v33[2];
        v90 = v33[1];
        v91 = v39;
        v92 = v33[3];
        BigString.unicodeScalars.getter();
        v40 = BigString.UnicodeScalarView.index(roundingDown:)();
        v42 = v41;
        v44 = v43;
        v46 = v45;
        outlined release of Locale((uint64_t)v88);
        v89[0] = v56;
        v89[1] = v55;
        v89[2] = v54;
        v89[3] = v53;
        v89[4] = v40;
        v89[5] = v42;
        v89[6] = v44;
        v89[7] = v46;
        result = specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v89, v49);
      }
      v28 = v61;
      if (v32 >> 10 == v61)
      {
        result = swift_release_n();
        v6 = (uint64_t)v63;
        v30 = v64;
        v20 = v65;
        v21 = v66;
        v22 = v67;
        v24 = v68;
        v25 = v69;
        v26 = v70;
        v31 = v71;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v29 = v77;
  result = swift_release_n();
  v30 = v29;
  v31 = v27;
LABEL_18:
  *v52 = v6;
  v52[1] = v30;
  v52[2] = v20;
  v52[3] = v21;
  v52[4] = v22;
  v52[5] = v24;
  v52[6] = v25;
  v52[7] = v26;
  *((_OWORD *)v52 + 4) = v31;
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(_QWORD *))
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  __int128 *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v79;
  _OWORD *v80;
  unint64_t v81;
  _QWORD v82[2];
  _OWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95[8];
  _OWORD v96[3];
  _OWORD v97[3];
  _OWORD v98[3];
  _OWORD v99[3];
  __int128 v100[3];
  _BYTE v101[40];
  __int128 v102[3];
  _BYTE v103[40];
  __int128 v104[3];
  _BYTE v105[48];
  uint64_t v106;

  v2 = v1;
  v3 = v1[1];
  v80 = (_OWORD *)*v1;
  v4 = v1[5];
  swift_retain();
  BigString.init()();
  v82[0] = 0;
  MEMORY[0x186DA9E90](v82, 8);
  v5 = v82[0];
  type metadata accessor for AttributedString.Guts();
  v6 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v8 = v93;
  *(_OWORD *)(v6 + 16) = v92;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v94;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = v5;
  v9 = BigString.startIndex.getter();
  v11 = v10;
  v12 = v4;
  v14 = v13;
  v16 = v15;
  result = BigString.endIndex.getter();
  v83 = (_OWORD *)v6;
  v84 = v9;
  v74 = v9;
  v76 = v11;
  v85 = v11;
  v86 = v14;
  v87 = v16;
  v88 = result;
  v89 = v17;
  v90 = v18;
  v91 = v19;
  v81 = v12 >> 10;
  v79 = v3 >> 10;
  if (v3 >> 10 != v12 >> 10)
  {
    v69 = v1;
    v32 = v80 + 1;
    v33 = v12 >> 10;
    while (v3 >> 10 >= v79 && v3 >> 10 < v33)
    {
      v57 = *v32;
      v58 = v80[3];
      v99[1] = v80[2];
      v99[2] = v58;
      v99[0] = v57;
      v59 = *v32;
      v100[1] = v80[2];
      v100[2] = v58;
      v100[0] = v59;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v100, (uint64_t)v101);
      outlined retain of Locale((uint64_t)v101);
      v60 = BigString.subscript.getter();
      v62 = v61;
      outlined release of Locale((uint64_t)v99);
      v63 = *v32;
      v64 = v80[3];
      v98[1] = v80[2];
      v98[2] = v64;
      v98[0] = v63;
      swift_retain();
      outlined retain of Locale((uint64_t)v98);
      v33 = v81;
      v3 = BigString.index(after:)();
      outlined release of Locale((uint64_t)v98);
      result = swift_release();
      v65 = v3 >> 10;
      if (v81 < v3 >> 10)
        goto LABEL_21;
      v82[0] = v60;
      v82[1] = v62;
      v66 = v106;
      v67 = a1(v82);
      v106 = v66;
      if (v66)
        goto LABEL_16;
      if ((v67 & 1) == 0)
      {
        v68 = v88;
        if (v88 >> 10 < v84 >> 10)
        {
          __break(1u);
LABEL_16:
          swift_release();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        v75 = v60;
        v77 = v3;
        v35 = v90;
        v34 = v91;
        v36 = v89;
        v37 = v83;
        v38 = v83[1];
        v39 = v83[3];
        v97[1] = v83[2];
        v97[2] = v39;
        v97[0] = v38;
        v40 = v83[1];
        v102[1] = v83[2];
        v102[2] = v39;
        v102[0] = v40;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v102, (uint64_t)v103);
        outlined retain of Locale((uint64_t)v103);
        v41 = MEMORY[0x186DA3EC0](v68, v36, v35, v34);
        v72 = v42;
        v73 = v41;
        v70 = v44;
        v71 = v43;
        outlined release of Locale((uint64_t)v97);
        v45 = v37[1];
        v46 = v37[3];
        v96[1] = v37[2];
        v96[2] = v46;
        v96[0] = v45;
        v47 = v37[1];
        v104[1] = v37[2];
        v104[2] = v46;
        v104[0] = v47;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v104, (uint64_t)v105);
        outlined retain of Locale((uint64_t)v105);
        v48 = v35;
        v3 = v77;
        v49 = MEMORY[0x186DA3EC0](v68, v36, v48, v34);
        v51 = v50;
        v53 = v52;
        v55 = v54;
        outlined release of Locale((uint64_t)v96);
        v95[0] = v73;
        v95[1] = v72;
        v95[2] = v71;
        v95[3] = v70;
        v95[4] = v49;
        v95[5] = v51;
        v33 = v81;
        v95[6] = v53;
        v95[7] = v55;
        specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v95, v75, v62);
      }
      result = swift_bridgeObjectRelease();
      if (v65 == v33)
      {
        result = swift_release_n();
        v6 = (uint64_t)v83;
        v31 = v84;
        v30 = v85;
        v21 = v86;
        v22 = v87;
        v28 = v88;
        v27 = v89;
        v26 = v90;
        v29 = v91;
        v2 = v69;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v20 = v19;
  v21 = v14;
  v22 = v16;
  v23 = result;
  v24 = v17;
  v25 = v18;
  result = swift_release_n();
  v26 = v25;
  v27 = v24;
  v28 = v23;
  v29 = v20;
  v31 = v74;
  v30 = v76;
LABEL_18:
  *v2 = v6;
  v2[1] = v31;
  v2[2] = v30;
  v2[3] = v21;
  v2[4] = v22;
  v2[5] = v28;
  v2[6] = v27;
  v2[7] = v26;
  *((_OWORD *)v2 + 4) = v29;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.characters.getter in conformance AttributedString@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *v1;
  v4 = BigString.startIndex.getter();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = BigString.endIndex.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = 0;
  return swift_retain();
}

uint64_t AttributedString.CharacterView.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  BigString.init()();
  v16 = 0;
  MEMORY[0x186DA9E90](&v16, 8);
  v2 = v16;
  type metadata accessor for AttributedString.Guts();
  v3 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v5 = v18;
    *(_OWORD *)(v3 + 16) = v17;
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v19;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = v2;
    v6 = BigString.startIndex.getter();
    v8 = v7;
    v10 = v9;
    v12 = v11;
    result = BigString.endIndex.getter();
    *a1 = v3;
    a1[1] = v6;
    a1[2] = v8;
    a1[3] = v10;
    a1[4] = v12;
    a1[5] = result;
    a1[6] = v13;
    a1[7] = v14;
    a1[8] = v15;
    a1[9] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for AttributedString.characters : AttributedString@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = BigString.startIndex.getter();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = BigString.endIndex.getter();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v6;
  a2[3] = v8;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  a2[8] = v14;
  a2[9] = 0;
  return swift_retain();
}

uint64_t key path setter for AttributedString.characters : AttributedString(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[9];
  v3 = *a1;
  v4 = *(_OWORD *)(a1 + 1);
  v5 = *(_OWORD *)(a1 + 3);
  v6 = *(_OWORD *)(a1 + 5);
  v7 = *(_OWORD *)(a1 + 7);
  v8 = v1;
  swift_retain();
  return AttributedString.characters.setter(&v3);
}

uint64_t AttributedString.characters.setter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[8];
  _OWORD v83[3];
  uint64_t v84;
  _OWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _OWORD v92[3];
  _OWORD v93[6];
  _OWORD v94[6];
  __int128 v95[3];
  _BYTE v96[40];
  __int128 v97[3];
  _BYTE v98[56];

  v2 = v1;
  v3 = (_OWORD *)*a1;
  v4 = a1[1];
  v5 = (_OWORD *)a1[2];
  v6 = a1[3];
  v75 = a1[5];
  v76 = a1[4];
  v7 = a1[7];
  v74 = a1[6];
  v8 = a1[8];
  v9 = *(_OWORD *)(*(_QWORD *)v1 + 16);
  v10 = *(_OWORD *)(*(_QWORD *)v1 + 48);
  v94[4] = *(_OWORD *)(*(_QWORD *)v1 + 32);
  v94[5] = v10;
  v94[3] = v9;
  v11 = BigString.startIndex.getter();
  v70 = v13;
  v71 = v12;
  v69 = v14;
  v15 = BigString.endIndex.getter();
  v72 = v11;
  v19 = v11 >> 10;
  if (v15 >> 10 < v19)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  v67 = v3;
  v68 = v15 >> 10;
  v58 = v18;
  v59 = v17;
  v60 = v16;
  v61 = v15;
  v62 = v6;
  v63 = v5;
  v64 = v4;
  v65 = v8;
  v66 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v20 = *(_QWORD **)v1;
    v21 = *(_OWORD *)(*(_QWORD *)v1 + 16);
    v22 = *(_OWORD *)(*(_QWORD *)v1 + 48);
    v94[1] = *(_OWORD *)(*(_QWORD *)v1 + 32);
    v94[2] = v22;
    v94[0] = v21;
    v23 = v20[8];
    v24 = v20[9];
    v25 = v20[10];
    v26 = v20[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v94);
    swift_unknownObjectRetain();
    *(_QWORD *)v2 = AttributedString.Guts.init(string:runs:)(v94, v23, v24, v25, v26);
    swift_release();
  }
  v5 = *(_OWORD **)v2;
  v27 = *(_OWORD *)(*(_QWORD *)v2 + 32);
  v93[3] = *(_OWORD *)(*(_QWORD *)v2 + 16);
  v93[4] = v27;
  v93[5] = v5[3];
  v6 = BigString.startIndex.getter();
  v8 = BigString.endIndex.getter();
  v77 = v5;
  v28 = one-time initialization token for currentIdentity;
  swift_retain();
  if (v28 != -1)
    goto LABEL_11;
LABEL_5:
  v29 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  v30 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v30);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v29, (uint64_t *)v83);
  os_unfair_lock_unlock(v30);
  swift_release();
  v31 = *(_QWORD *)&v83[0];
  v78 = *(_QWORD *)&v83[0];
  BigString.init()();
  *(_QWORD *)&v83[0] = 0;
  MEMORY[0x186DA9E90](v83, 8);
  v32 = *(_QWORD *)&v83[0];
  type metadata accessor for AttributedString.Guts();
  v33 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_OWORD *)(v33 + 16) = v79;
  *(_OWORD *)(v33 + 32) = v80;
  *(_OWORD *)(v33 + 48) = v81;
  *(_QWORD *)(v33 + 64) = 0;
  *(_QWORD *)(v33 + 72) = 0;
  *(_QWORD *)(v33 + 80) = 0;
  *(_QWORD *)(v33 + 88) = v32;
  *(_QWORD *)v2 = v33;
  swift_release();
  if (v19 < v6 >> 10 || v8 >> 10 < v68)
    goto LABEL_13;
  v35 = v5[1];
  v36 = v5[2];
  v34 = v5 + 1;
  v37 = v34[2];
  v93[1] = v36;
  v93[2] = v37;
  v93[0] = v35;
  v38 = *v34;
  v95[1] = v34[1];
  v95[2] = v37;
  v95[0] = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v95, (uint64_t)v96);
  outlined retain of Locale((uint64_t)v96);
  v39 = MEMORY[0x186DA3EC0](v72, v71, v70, v69);
  v41 = v40;
  v43 = v42;
  v73 = v31;
  v45 = v44;
  outlined release of Locale((uint64_t)v93);
  v46 = *v34;
  v47 = v34[2];
  v92[1] = v34[1];
  v92[2] = v47;
  v92[0] = v46;
  v48 = *v34;
  v97[1] = v34[1];
  v97[2] = v47;
  v97[0] = v48;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v97, (uint64_t)v98);
  outlined retain of Locale((uint64_t)v98);
  v49 = MEMORY[0x186DA3EC0](v61, v60, v59, v58);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  outlined release of Locale((uint64_t)v92);
  v82[0] = v39;
  v82[1] = v41;
  v82[2] = v43;
  v82[3] = v45;
  v82[4] = v49;
  v82[5] = v51;
  v82[6] = v53;
  v82[7] = v55;
  v56 = v67[2];
  v83[0] = v67[1];
  v83[1] = v56;
  v83[2] = v67[3];
  v84 = v64;
  v85 = v63;
  v86 = v62;
  v87 = v76;
  v88 = v75;
  v89 = v74;
  v90 = v66;
  v91 = v65;
  swift_unknownObjectRetain();
  swift_retain();
  specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v82, (uint64_t)v83);
  swift_unknownObjectRelease();
  swift_release();
  if (v78 == v73)
  {
    *(_QWORD *)v2 = v77;
    swift_release();
    return swift_release();
  }
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AttributedString.characters.modify(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v4 = malloc(0xF8uLL);
  *a1 = v4;
  v4[29] = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 32);
    v6 = *(_OWORD *)(*v2 + 48);
    *((_OWORD *)v4 + 5) = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)v4 + 6) = v7;
    *((_OWORD *)v4 + 7) = v6;
    v8 = v5[8];
    v9 = v5[9];
    v10 = v5[10];
    v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v4 + 10));
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)((_OWORD *)v4 + 5, v8, v9, v10, v11);
    swift_release();
  }
  v12 = *v2;
  v14 = *(_OWORD *)(*v2 + 32);
  v13 = *(_OWORD *)(*v2 + 48);
  *((_OWORD *)v4 + 8) = *(_OWORD *)(*v2 + 16);
  *((_OWORD *)v4 + 9) = v14;
  *((_OWORD *)v4 + 10) = v13;
  v15 = BigString.startIndex.getter();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = BigString.endIndex.getter();
  *v4 = v12;
  v4[1] = v15;
  v4[2] = v17;
  v4[3] = v19;
  v4[4] = v21;
  v4[5] = v22;
  v4[6] = v23;
  v4[7] = v24;
  v4[8] = v25;
  v26 = one-time initialization token for currentIdentity;
  swift_retain();
  if (v26 != -1)
    swift_once();
  v27 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  v28 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v28);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v27, &v34);
  os_unfair_lock_unlock(v28);
  swift_release();
  v29 = v34;
  v4[30] = v34;
  v4[9] = v29;
  BigString.init()();
  v4[28] = 0;
  MEMORY[0x186DA9E90](v4 + 28, 8);
  v30 = v4[28];
  type metadata accessor for AttributedString.Guts();
  v31 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v33 = *((_OWORD *)v4 + 12);
    *(_OWORD *)(v31 + 16) = *((_OWORD *)v4 + 11);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *((_OWORD *)v4 + 13);
    *(_QWORD *)(v31 + 64) = 0;
    *(_QWORD *)(v31 + 72) = 0;
    *(_QWORD *)(v31 + 80) = 0;
    *(_QWORD *)(v31 + 88) = v30;
    *v2 = v31;
    swift_release();
    return (uint64_t)AttributedString.characters.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AttributedString.characters.modify(uint64_t a1)
{
  _QWORD **v1;

  v1 = *(_QWORD ***)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 72) == *(_QWORD *)(*(_QWORD *)a1 + 240))
  {
    *v1[29] = *v1;
    swift_retain();
    swift_release();
    swift_release();
    free(v1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t *specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31[8];
  _OWORD v32[3];
  _OWORD v33[3];
  __int128 v34[3];
  _BYTE v35[40];
  __int128 v36[3];
  _BYTE v37[48];

  v2 = *result;
  if ((unint64_t)*result >> 10 < v1[1] >> 10)
  {
    __break(1u);
  }
  else
  {
    v3 = result[4];
    if (v1[5] >> 10 >= v3 >> 10)
    {
      v4 = result[1];
      v5 = result[2];
      v6 = result[3];
      v7 = result[6];
      v30 = result[7];
      v8 = result[5];
      v9 = (_OWORD *)*v1;
      v10 = *(_OWORD *)(*v1 + 16);
      v11 = *(_OWORD *)(*v1 + 48);
      v33[1] = *(_OWORD *)(*v1 + 32);
      v33[2] = v11;
      v33[0] = v10;
      v12 = v9[1];
      v34[1] = v9[2];
      v34[2] = v11;
      v34[0] = v12;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v34, (uint64_t)v35);
      outlined retain of Locale((uint64_t)v35);
      v13 = MEMORY[0x186DA3EC0](v2, v4, v5, v6);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      outlined release of Locale((uint64_t)v33);
      v20 = v9[1];
      v21 = v9[3];
      v32[1] = v9[2];
      v32[2] = v21;
      v32[0] = v20;
      v22 = v9[1];
      v36[1] = v9[2];
      v36[2] = v21;
      v36[0] = v22;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
      outlined retain of Locale((uint64_t)v37);
      v23 = MEMORY[0x186DA3EC0](v3, v8, v7, v30);
      v25 = v24;
      v27 = v26;
      v29 = v28;
      outlined release of Locale((uint64_t)v32);
      v31[0] = v13;
      v31[1] = v15;
      v31[2] = v17;
      v31[3] = v19;
      v31[4] = v23;
      v31[5] = v25;
      v31[6] = v27;
      v31[7] = v29;
      return (uint64_t *)specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v31);
    }
  }
  __break(1u);
  return result;
}

uint64_t *specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v35[8];
  _OWORD v36[3];
  _OWORD v37[3];
  __int128 v38[3];
  _BYTE v39[40];
  __int128 v40[3];
  _BYTE v41[48];

  v4 = *result;
  if ((unint64_t)*result >> 10 < v3[1] >> 10)
  {
    __break(1u);
  }
  else
  {
    v5 = result[4];
    if (v3[5] >> 10 >= v5 >> 10)
    {
      v7 = result[1];
      v6 = result[2];
      v8 = result[3];
      v9 = result[6];
      v32 = result[7];
      v10 = result[5];
      v11 = (_OWORD *)*v3;
      v12 = *(_OWORD *)(*v3 + 16);
      v13 = *(_OWORD *)(*v3 + 48);
      v37[1] = *(_OWORD *)(*v3 + 32);
      v37[2] = v13;
      v37[0] = v12;
      v14 = v11[1];
      v38[1] = v11[2];
      v38[2] = v13;
      v38[0] = v14;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
      outlined retain of Locale((uint64_t)v39);
      v15 = MEMORY[0x186DA3EC0](v4, v7, v6, v8);
      v17 = v16;
      v19 = v18;
      v21 = v20;
      outlined release of Locale((uint64_t)v37);
      v22 = v11[1];
      v23 = v11[3];
      v36[1] = v11[2];
      v36[2] = v23;
      v36[0] = v22;
      v24 = v11[1];
      v40[1] = v11[2];
      v40[2] = v23;
      v40[0] = v24;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v40, (uint64_t)v41);
      outlined retain of Locale((uint64_t)v41);
      v25 = MEMORY[0x186DA3EC0](v5, v10, v9, v32);
      v27 = v26;
      v29 = v28;
      v31 = v30;
      outlined release of Locale((uint64_t)v36);
      v35[0] = v15;
      v35[1] = v17;
      v35[2] = v19;
      v35[3] = v21;
      v35[4] = v25;
      v35[5] = v27;
      v35[6] = v29;
      v35[7] = v31;
      return (uint64_t *)specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v35, a2, a3);
    }
  }
  __break(1u);
  return result;
}

uint64_t *specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[48];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[8];
  _OWORD v45[11];
  _OWORD v46[3];
  _OWORD v47[3];
  _OWORD v48[3];
  __int128 v49[3];
  _BYTE v50[40];
  __int128 v51[3];
  _BYTE v52[48];

  v3 = *result;
  if ((unint64_t)*result >> 10 < v2[1] >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = result[4];
    if (v2[5] >> 10 >= v4 >> 10)
    {
      v6 = result[1];
      v7 = result[2];
      v8 = result[3];
      v9 = result[7];
      v37 = result[6];
      v38 = result[5];
      v10 = (_OWORD *)*v2;
      v11 = *(_OWORD *)(*v2 + 16);
      v12 = *(_OWORD *)(*v2 + 48);
      v48[1] = *(_OWORD *)(*v2 + 32);
      v48[2] = v12;
      v48[0] = v11;
      v13 = v10[1];
      v49[1] = v10[2];
      v49[2] = v12;
      v49[0] = v13;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v49, (uint64_t)v50);
      outlined retain of Locale((uint64_t)v50);
      v14 = MEMORY[0x186DA3EC0](v3, v6, v7, v8);
      v16 = v15;
      v18 = v17;
      v20 = v19;
      outlined release of Locale((uint64_t)v48);
      v21 = v10[1];
      v22 = v10[3];
      v47[1] = v10[2];
      v47[2] = v22;
      v47[0] = v21;
      v23 = v10[1];
      v51[1] = v10[2];
      v51[2] = v22;
      v51[0] = v23;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v51, (uint64_t)v52);
      outlined retain of Locale((uint64_t)v52);
      v24 = MEMORY[0x186DA3EC0](v4, v38, v37, v9);
      v26 = v25;
      v28 = v27;
      v30 = v29;
      outlined release of Locale((uint64_t)v47);
      v44[0] = v14;
      v44[1] = v16;
      v44[2] = v18;
      v44[3] = v20;
      v44[4] = v24;
      v44[5] = v26;
      v44[6] = v28;
      v44[7] = v30;
      v31 = *(_OWORD *)(a2 + 16);
      v45[7] = *(_OWORD *)a2;
      v45[8] = v31;
      v32 = *(_OWORD *)(a2 + 48);
      v45[9] = *(_OWORD *)(a2 + 32);
      v45[10] = v32;
      v33 = *(_OWORD **)(a2 + 64);
      v34 = v33[1];
      v35 = v33[3];
      v46[1] = v33[2];
      v46[2] = v35;
      v46[0] = v34;
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Locale((uint64_t)v46);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v46);
      outlined release of Locale((uint64_t)v39);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      v36 = v33[2];
      v45[0] = v33[1];
      v45[1] = v36;
      v45[2] = v33[3];
      v45[3] = v40;
      v45[4] = v41;
      v45[5] = v42;
      v45[6] = v43;
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v44, (uint64_t)v45);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      return (uint64_t *)swift_unknownObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t *AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *result, __int128 *a2, ValueMetadata *a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57[48];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62[8];
  _OWORD v63[11];
  _OWORD v64[3];
  _OWORD v65[3];
  _OWORD v66[3];
  __int128 v67[3];
  _BYTE v68[40];
  __int128 v69[3];
  _BYTE v70[48];

  v4 = *result;
  if ((unint64_t)*result >> 10 < v3[1] >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = result[4];
  if (v3[5] >> 10 < v5 >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v8 = result[1];
  v7 = result[2];
  v9 = result[3];
  v10 = result[6];
  v46 = result[5];
  v11 = result[7];
  v12 = (_OWORD *)*v3;
  v13 = *(_OWORD *)(*v3 + 16);
  v14 = *(_OWORD *)(*v3 + 48);
  v66[1] = *(_OWORD *)(*v3 + 32);
  v66[2] = v14;
  v66[0] = v13;
  v15 = v12[1];
  v67[1] = v12[2];
  v67[2] = v14;
  v67[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v67, (uint64_t)v68);
  outlined retain of Locale((uint64_t)v68);
  v16 = MEMORY[0x186DA3EC0](v4, v8, v7, v9);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  outlined release of Locale((uint64_t)v66);
  v23 = v12[1];
  v24 = v12[3];
  v65[1] = v12[2];
  v65[2] = v24;
  v65[0] = v23;
  v25 = v12[1];
  v69[1] = v12[2];
  v69[2] = v24;
  v69[0] = v25;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v69, (uint64_t)v70);
  outlined retain of Locale((uint64_t)v70);
  v26 = MEMORY[0x186DA3EC0](v5, v46, v10, v11);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  outlined release of Locale((uint64_t)v65);
  v62[0] = v16;
  v62[1] = v18;
  v62[2] = v20;
  v62[3] = v22;
  v62[4] = v26;
  v62[5] = v28;
  v62[6] = v30;
  v62[7] = v32;
  if (a3 == &type metadata for AttributedString.CharacterView)
  {
    v33 = *(_QWORD *)a2;
    v34 = *(_OWORD *)(*(_QWORD *)a2 + 32);
    v48 = *(_OWORD *)(*(_QWORD *)a2 + 16);
    v49 = v34;
    v35 = *(__int128 *)((char *)a2 + 8);
    v50 = *(_OWORD *)(v33 + 48);
    v51 = v35;
    v36 = *(__int128 *)((char *)a2 + 40);
    v52 = *(__int128 *)((char *)a2 + 24);
    v53 = v36;
    v54 = *(__int128 *)((char *)a2 + 56);
    swift_unknownObjectRetain();
    swift_retain();
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v62, (uint64_t)&v48);
    swift_unknownObjectRelease();
    return (uint64_t *)swift_release();
  }
  else if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.CharacterView>) == a3)
  {
    v37 = a2[3];
    v50 = a2[2];
    v51 = v37;
    v38 = a2[8];
    v39 = a2[6];
    v55 = a2[7];
    v56 = v38;
    v40 = a2[5];
    v52 = a2[4];
    v53 = v40;
    v54 = v39;
    v41 = a2[1];
    v48 = *a2;
    v49 = v41;
    v63[7] = v48;
    v63[8] = v41;
    v63[9] = v50;
    v63[10] = v51;
    v42 = (_OWORD *)v52;
    v43 = *(_OWORD *)(v52 + 16);
    v44 = *(_OWORD *)(v52 + 48);
    v64[1] = *(_OWORD *)(v52 + 32);
    v64[2] = v44;
    v64[0] = v43;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined retain of Locale((uint64_t)v64);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v64);
    outlined release of Locale((uint64_t)v57);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    v45 = v42[2];
    v63[0] = v42[1];
    v63[1] = v45;
    v63[2] = v42[3];
    v63[3] = v58;
    v63[4] = v59;
    v63[5] = v60;
    v63[6] = v61;
    swift_unknownObjectRetain();
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v62, (uint64_t)v63);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v48);
    return (uint64_t *)swift_unknownObjectRelease();
  }
  else
  {
    return (uint64_t *)AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v62, a2, (uint64_t)a3);
  }
}

__n128 AttributedString.CharacterView.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.CharacterView.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.CharacterView._count.getter()
{
  uint64_t v0;

  swift_unknownObjectRetain();
  v0 = BigSubstring.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

_QWORD *AttributedString.CharacterView._index(_:offsetBy:)@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v19[3];
  __int128 v20[3];
  _BYTE v21[40];

  v4 = *result >> 10;
  v5 = v2[1] >> 10;
  v6 = v2[5] >> 10;
  if (v4 >= v5 && v6 >= v4)
  {
    v8 = *v2;
    v9 = *(_OWORD *)(*v2 + 16);
    v10 = *(_OWORD *)(*v2 + 48);
    v19[1] = *(_OWORD *)(*v2 + 32);
    v19[2] = v10;
    v19[0] = v9;
    v11 = *(_OWORD *)(v8 + 16);
    v20[1] = *(_OWORD *)(v8 + 32);
    v20[2] = v10;
    v20[0] = v11;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v20, (uint64_t)v21);
    outlined retain of Locale((uint64_t)v21);
    v12 = BigString.index(_:offsetBy:)();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    result = (_QWORD *)outlined release of Locale((uint64_t)v19);
    if (v12 >> 10 >= v5 && v6 >= v12 >> 10)
    {
      *a2 = v12;
      a2[1] = v14;
      a2[2] = v16;
      a2[3] = v18;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *AttributedString.CharacterView._index(_:offsetBy:limitedBy:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X2>, unint64_t *a3@<X8>)
{
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD v25[3];
  __int128 v26[3];
  _BYTE v27[48];

  v5 = *result >> 10;
  v6 = v3[1] >> 10;
  v7 = v3[5] >> 10;
  v8 = *a2 >> 10;
  if (v7 < v8 || v8 < v6 || v5 < v6 || v7 < v5)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  v23 = v3[5] >> 10;
  v24 = v3[1] >> 10;
  v12 = *v3;
  v13 = *(_OWORD *)(*v3 + 16);
  v14 = *(_OWORD *)(*v3 + 48);
  v25[1] = *(_OWORD *)(*v3 + 32);
  v25[2] = v14;
  v25[0] = v13;
  v15 = *(_OWORD *)(v12 + 16);
  v26[1] = *(_OWORD *)(v12 + 32);
  v26[2] = v14;
  v26[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  v16 = BigString.index(_:offsetBy:limitedBy:)();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  result = (_QWORD *)outlined release of Locale((uint64_t)v25);
  if (v22 == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 2;
    return result;
  }
  if (v16 >> 10 < v24 || v23 < v16 >> 10)
    goto LABEL_18;
  *a3 = v16;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v22;
  return result;
}

_QWORD *AttributedString.CharacterView._distance(from:to:)(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v10;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = *result >> 10;
  v5 = *(_QWORD *)(v2 + 8) >> 10;
  v6 = *a2 >> 10;
  if (v3 >> 10 >= v6 && v6 >= v5 && v4 >= v5 && v3 >> 10 >= v4)
  {
    swift_unknownObjectRetain();
    v10 = BigSubstring.distance(from:to:)();
    swift_unknownObjectRelease();
    return (_QWORD *)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *AttributedString.CharacterView.subscript.getter(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[3];
  __int128 v10[3];
  _BYTE v11[40];

  v2 = *result >> 10;
  if (v2 < v1[1] >> 10 || v2 >= v1[5] >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1;
    v5 = *(_OWORD *)(*v1 + 16);
    v6 = *(_OWORD *)(*v1 + 48);
    v9[1] = *(_OWORD *)(*v1 + 32);
    v9[2] = v6;
    v9[0] = v5;
    v7 = *(_OWORD *)(v4 + 16);
    v10[1] = *(_OWORD *)(v4 + 32);
    v10[2] = v6;
    v10[0] = v7;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v10, (uint64_t)v11);
    outlined retain of Locale((uint64_t)v11);
    v8 = BigString.subscript.getter();
    outlined release of Locale((uint64_t)v9);
    return (_QWORD *)v8;
  }
  return result;
}

_QWORD *key path getter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[3];

  v4 = *a2 >> 10;
  if (v4 < result[1] >> 10 || v4 >= result[5] >> 10)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_OWORD *)(*result + 16);
    v7 = *(_OWORD *)(*result + 48);
    v11[1] = *(_OWORD *)(*result + 32);
    v11[2] = v7;
    v11[0] = v6;
    swift_retain();
    outlined retain of Locale((uint64_t)v11);
    v8 = BigString.subscript.getter();
    v10 = v9;
    outlined release of Locale((uint64_t)v11);
    result = (_QWORD *)swift_release();
    *a3 = v8;
    a3[1] = v10;
  }
  return result;
}

uint64_t key path setter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];

  v3 = *a1;
  v4 = a1[1];
  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized AttributedString.CharacterView.subscript.setter(v3, v4, (uint64_t *)v7);
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.CharacterView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  specialized AttributedString.CharacterView.subscript.setter(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  char v39;
  int64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int Enum;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  __int128 v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *i;
  __int128 v174;
  _OWORD *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _OWORD *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  int64_t v199;
  uint64_t v200;
  unint64_t v201;
  __int128 *v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  int64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  int64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int128 *v247;
  uint64_t v248;
  __int128 v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  unint64_t v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int64_t v265;
  int64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  int64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  int64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  int64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  unint64_t v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int64_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int64_t v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int64_t v333;
  int64_t v334;
  int64_t v335;
  int v336;
  int v337;
  uint64_t v338;
  _QWORD *v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  __int128 v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 *v356;
  uint64_t v357;
  uint64_t v358;
  __int128 *v359;
  unint64_t *v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  __int128 v366;
  unint64_t v367;
  uint64_t *v368;
  unint64_t v369;
  uint64_t v370;
  int v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int64_t v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  __int128 v384;
  _OWORD v385[2];
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  int64_t v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  char v402[112];
  char v403[48];
  __int128 v404;
  __int128 v405;
  uint64_t v406;
  char v407[48];
  unint64_t v408[4];
  uint64_t v409;
  uint64_t v410[4];
  uint64_t v411;
  char v412[48];
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  _BYTE v419[48];
  _BYTE v420[48];
  char v421[48];
  char v422[48];
  char v423[48];
  char v424[48];
  char v425[48];
  char v426[48];
  char v427[48];
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  _OWORD v437[2];
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  _OWORD v442[2];
  __int128 v443;
  _OWORD v444[3];
  _QWORD v445[5];
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  _OWORD v452[12];
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  _OWORD v466[2];
  uint64_t v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  uint64_t v474;
  uint64_t v475;
  __int128 *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  _BYTE v488[40];
  _BYTE v489[56];

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 16);
    v8 = *(_OWORD *)(*v2 + 32);
    v484 = *(_OWORD *)(*v2 + 48);
    v483 = v8;
    v482 = v7;
    v9 = v6[8];
    v10 = v6[9];
    v11 = v6[10];
    v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    v13 = swift_allocObject();
    v14 = BigString.isEmpty.getter();
    if (v9)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v482);
      swift_unknownObjectRelease();
    }
    else
    {
      outlined retain of Locale((uint64_t)&v482);
    }
    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v9);
    swift_unknownObjectRelease();
    if (v9)
    {
      swift_unknownObjectRelease();
      if ((((v11 == 0) ^ v14) & 1) == 0)
      {
LABEL_7:
        v15 = v483;
        *(_OWORD *)(v13 + 16) = v482;
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)(v13 + 48) = v484;
        *(_QWORD *)(v13 + 64) = v9;
        *(_QWORD *)(v13 + 72) = v10;
        *(_QWORD *)(v13 + 80) = v11;
        *(_QWORD *)(v13 + 88) = v12;
        *v3 = v13;
        swift_release();
        goto LABEL_8;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_251;
  }
LABEL_8:
  v16 = *v3;
  v17 = v3[1];
  v18 = v3[2];
  v19 = (__int128 *)v3[3];
  v20 = v3[4];
  v21 = v3[5];
  v22 = v3[6];
  v23 = v3[7];
  v24 = v3[8];
  v25 = *(_OWORD *)(*v3 + 32);
  v471 = *(_OWORD *)(*v3 + 16);
  v472 = v25;
  v473 = *(_OWORD *)(v16 + 48);
  v357 = v18;
  v358 = v17;
  v474 = v17;
  v475 = v18;
  v355 = v20;
  v356 = v19;
  v476 = v19;
  v477 = v20;
  v353 = v22;
  v354 = v21;
  v478 = v21;
  v479 = v22;
  v350 = v24;
  v352 = v23;
  v480 = v23;
  v481 = v24;
  outlined retain of Locale(a2);
  swift_unknownObjectRetain();
  BigSubstring.subscript.getter();
  swift_unknownObjectRelease();
  v348 = BigSubstring.isIdentical(to:)();
  v359 = (__int128 *)a2;
  outlined release of Locale(a2);
  outlined release of Locale((uint64_t)v402);
  v26 = *v3;
  v27 = *(_OWORD *)(*v3 + 32);
  v468 = *(_OWORD *)(*v3 + 16);
  v469 = v27;
  v470 = *(_OWORD *)(v26 + 48);
  result = BigString.isEmpty.getter();
  v368 = v3;
  v360 = (unint64_t *)a1;
  if ((result & 1) != 0)
  {
    v345 = MEMORY[0x1E0DEE9E0];
    goto LABEL_41;
  }
  v29 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= 0x800uLL && (*(_QWORD *)(a1 + 32) ^ v29) <= 0x3FF)
  {
    BigString.utf8.getter();
    v29 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v403);
  }
  v30 = *(_QWORD *)(v26 + 64);
  v31 = *(_QWORD *)(v26 + 80);
  if (v30)
    v32 = *(_QWORD *)(v26 + 80);
  else
    v32 = 0;
  v33 = v29 >> 11;
  if (v32 < (uint64_t)(v29 >> 11))
    goto LABEL_368;
  v34 = *(_QWORD *)(v26 + 72);
  v35 = *(_QWORD *)(v26 + 88);
  if (v30 && v33 < v31 && *(_WORD *)(v30 + 16))
  {
    v375 = *(_QWORD *)(v26 + 72);
    v36 = *(unsigned __int8 *)(v30 + 18);
    if (*(_BYTE *)(v30 + 18))
    {
      result = swift_unknownObjectRetain_n();
      v37 = 24;
      v38 = v30;
      while (1)
      {
        v40 = *(unsigned __int16 *)(v38 + 16);
        if (!*(_WORD *)(v38 + 16))
          goto LABEL_23;
        v41 = *(_QWORD *)(v38 + 40);
        v42 = __OFSUB__(v33, v41);
        v43 = v33 - v41;
        if (v42)
          goto LABEL_354;
        if (__OFADD__(v43, 1))
        {
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
          goto LABEL_374;
        }
        if (v43 + 1 >= 1)
          break;
        v40 = 0;
LABEL_24:
        v39 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
        v36 = ((-15 << v39) - 1) & v36 | (v40 << v39);
        a1 = *(_QWORD *)(v38 + 24 + 24 * v40);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v38 = a1;
        if (!*(_BYTE *)(a1 + 18))
          goto LABEL_295;
      }
      if ((_DWORD)v40 != 1)
      {
        v44 = (uint64_t *)(v38 + 64);
        v45 = 1;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v33 = v43 - v46;
          if (__OFSUB__(v43, v46))
            goto LABEL_336;
          if (__OFADD__(v33, 1))
            goto LABEL_337;
          if (v33 + 1 < 1)
            break;
          ++v45;
          v43 = v33;
          if (v40 == v45)
            goto LABEL_23;
        }
        v40 = v45;
        v33 = v43;
        goto LABEL_24;
      }
      v33 = v43;
LABEL_23:
      if (v33)
        goto LABEL_353;
      goto LABEL_24;
    }
    swift_unknownObjectRetain_n();
    a1 = v30;
LABEL_295:
    result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v33, 0, (_WORD *)(a1 + 16), (uint64_t *)(a1 + 24));
    if (result < 0)
      goto LABEL_382;
    v321 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v48 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v321 << 8);
    v34 = v375;
    goto LABEL_39;
  }
  v47 = swift_unknownObjectRetain_n();
  v48 = specialized Rope._endPath.getter(v47);
  swift_unknownObjectRelease();
  a1 = 0;
  v49 = 0;
  if (v30)
  {
LABEL_39:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v48, a1, v30, v34);
    swift_unknownObjectRelease_n();
    v49 = a1;
  }
  v50 = *(_QWORD *)(v26 + 64);
  v51 = *(_QWORD *)(v26 + 72);
  v52 = *(_QWORD *)(v26 + 80);
  v53 = *(_QWORD *)(v26 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v35, v48, v49, v50, v51, v52, v53);
  swift_unknownObjectRelease();
  v54 = swift_bridgeObjectRetain();
  v345 = specialized _NativeDictionary.filter(_:)(v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v3 = v368;
LABEL_41:
  a1 = *v3;
  v55 = v359;
  v56 = *v360 >> 11;
  v376 = v360[4] >> 11;
  v370 = v56;
  v346 = v376 - v56;
  if (v376 == v56)
  {
    v344 = *v360 >> 11;
    v364 = v344;
LABEL_162:
    v174 = *(_OWORD *)(a1 + 32);
    v460 = *(_OWORD *)(a1 + 16);
    v461 = v174;
    v462 = *(_OWORD *)(a1 + 48);
    BigString.utf8.getter();
    v374 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v412);
    v175 = (_OWORD *)*v3;
    v176 = *(_OWORD *)(*v3 + 32);
    v395 = *(_OWORD *)(*v3 + 16);
    v396 = v176;
    v397 = v175[3];
    *(_QWORD *)&v398 = v358;
    *((_QWORD *)&v398 + 1) = v357;
    *(_QWORD *)&v399 = v356;
    *((_QWORD *)&v399 + 1) = v355;
    *(_QWORD *)&v400 = v354;
    *((_QWORD *)&v400 + 1) = v353;
    *(_QWORD *)&v401 = v352;
    *((_QWORD *)&v401 + 1) = v350;
    swift_unknownObjectRetain();
    BigString.init()();
    v177 = v414;
    v175[1] = v413;
    v175[2] = v177;
    v175[3] = v415;
    swift_unknownObjectRelease();
    if ((v348 & 1) == 0)
    {
      v178 = v55[5];
      v457 = v55[4];
      v458 = v178;
      v459 = v55[6];
      v179 = v55[1];
      v453 = *v55;
      v454 = v179;
      v180 = v55[2];
      v456 = v55[3];
      v455 = v180;
      outlined retain of Locale((uint64_t)v55);
      lazy protocol witness table accessor for type BigSubstring and conformance BigSubstring();
      BigSubstring.replaceSubrange<A>(_:with:)();
    }
    v181 = (_OWORD *)*v3;
    v457 = v399;
    v458 = v400;
    v459 = v401;
    v453 = v395;
    v454 = v396;
    v456 = v398;
    v455 = v397;
    v182 = v398;
    v183 = v399;
    v184 = v400;
    v185 = v401;
    BigSubstring.base.getter();
    v186 = v417;
    v181[1] = v416;
    v181[2] = v186;
    v181[3] = v418;
    swift_unknownObjectRelease();
    specialized Range.init(uncheckedBounds:)(v182, *((uint64_t *)&v182 + 1), v183, *((uint64_t *)&v183 + 1), v184, *((uint64_t *)&v184 + 1), v185, *((uint64_t *)&v185 + 1), &v384);
    v187 = v385[0];
    *(_OWORD *)(v368 + 1) = v384;
    *(_OWORD *)(v368 + 3) = v187;
    v188 = v386;
    *(_OWORD *)(v368 + 5) = v385[1];
    *(_OWORD *)(v368 + 7) = v188;
    v189 = *v368;
    v190 = *(_OWORD *)(*v368 + 32);
    v452[9] = *(_OWORD *)(*v368 + 16);
    v452[10] = v190;
    v452[11] = *(_OWORD *)(v189 + 48);
    BigString.utf8.getter();
    v30 = (uint64_t)v419;
    v191 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v419);
    v192 = v191 - v374;
    if (__OFSUB__(v191, v374))
      goto LABEL_360;
    v193 = v346 + v192;
    if (__OFADD__(v346, v192))
      goto LABEL_361;
    swift_bridgeObjectRetain();
    v194 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v370, v376, v193, v345, v194);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v195 = *v368;
    v196 = *(_OWORD *)(*v368 + 32);
    v452[6] = *(_OWORD *)(*v368 + 16);
    v452[7] = v196;
    v452[8] = *(_OWORD *)(v195 + 48);
    BigString.utf8.getter();
    v30 = (uint64_t)v420;
    v197 = BigString.UTF8View.count.getter();
    result = outlined release of Locale((uint64_t)v420);
    v198 = v197 - v374;
    if (__OFSUB__(v197, v374))
      goto LABEL_362;
    v42 = __OFADD__(v364, v198);
    v199 = v364 + v198;
    if (v42)
      goto LABEL_363;
    if (v199 < (uint64_t)v344)
      goto LABEL_364;
    v200 = *(_QWORD *)(v195 + 80);
    if (!*(_QWORD *)(v195 + 64))
    {
      v240 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v240);
      swift_unknownObjectRelease();
      goto LABEL_206;
    }
    *(_QWORD *)&v343 = v199;
    v201 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v201);
    swift_unknownObjectRelease_n();
    if (!v200)
      goto LABEL_206;
    v202 = (__int128 *)(v195 + 16);
    v203 = *(_OWORD *)(v195 + 32);
    v452[3] = *(_OWORD *)(v195 + 16);
    v452[4] = v203;
    v452[5] = *(_OWORD *)(v195 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v204 = BigString.UTF8View.index(_:offsetBy:)();
    v206 = v205;
    v208 = v207;
    v210 = v209;
    outlined release of Locale((uint64_t)v421);
    v211 = *(_OWORD *)(v195 + 32);
    v452[0] = *(_OWORD *)(v195 + 16);
    v452[1] = v211;
    v452[2] = *(_OWORD *)(v195 + 48);
    v30 = (uint64_t)v452;
    result = BigString.utf8.getter();
    if (__OFSUB__((_QWORD)v343, v344))
      goto LABEL_375;
    v212 = BigString.UTF8View.index(_:offsetBy:)();
    v214 = v213;
    v216 = v215;
    v218 = v217;
    outlined release of Locale((uint64_t)v422);
    specialized Range.init(uncheckedBounds:)(v204, v206, v208, v210, v212, v214, v216, v218, v445);
    *(_QWORD *)&v444[0] = MEMORY[0x1E0DEE9E0];
    v219 = *(_OWORD *)(v195 + 32);
    v449 = *v202;
    v450 = v219;
    v451 = *(_OWORD *)(v195 + 48);
    BigString.unicodeScalars.getter();
    v341 = v445[0];
    v220 = BigString.UnicodeScalarView.index(roundingDown:)();
    v222 = v221;
    v224 = v223;
    v226 = v225;
    outlined release of Locale((uint64_t)v423);
    v227 = *(_OWORD *)(v195 + 32);
    v446 = *v202;
    v447 = v227;
    v356 = (__int128 *)(v195 + 16);
    v448 = *(_OWORD *)(v195 + 48);
    BigString.unicodeScalars.getter();
    v340 = v445[4];
    v30 = BigString.UnicodeScalarView.index(roundingUp:)();
    result = outlined release of Locale((uint64_t)v424);
    *(_QWORD *)&v485 = v220;
    *((_QWORD *)&v485 + 1) = v222;
    *(_QWORD *)&v486 = v224;
    *((_QWORD *)&v486 + 1) = v226;
    v38 = v220 >> 11;
    a1 = (unint64_t)v30 >> 11;
    if ((unint64_t)v30 >> 11 < v220 >> 11)
      goto LABEL_376;
    v30 = *(_QWORD *)(v195 + 64);
    if (v30)
      v228 = *(_QWORD *)(v195 + 80);
    else
      v228 = 0;
    if (v228 < v38)
      goto LABEL_377;
    v229 = *(_QWORD *)(v195 + 72);
    v35 = *(_QWORD *)(v195 + 88);
    v353 = v195;
    if (!v30 || v38 >= *(_QWORD *)(v195 + 80) || !*(_WORD *)(v30 + 16))
    {
      swift_retain_n();
      v241 = swift_unknownObjectRetain_n();
      v242 = specialized Rope._endPath.getter(v241);
      swift_unknownObjectRelease();
      v37 = 0;
      v230 = 0;
      if (!v30)
        goto LABEL_341;
      goto LABEL_208;
    }
    *(_QWORD *)&v372 = *(_QWORD *)(v195 + 72);
    v31 = *(unsigned __int8 *)(v30 + 18);
    if (!*(_BYTE *)(v30 + 18))
    {
      swift_unknownObjectRetain_n();
      result = swift_retain_n();
      v230 = v38;
      v37 = v30;
LABEL_298:
      v107 = *(unsigned __int16 *)(v37 + 16);
      if (!*(_WORD *)(v37 + 16))
        goto LABEL_304;
      v322 = *(_QWORD *)(v37 + 24);
      v108 = v230 - v322;
      if (__OFSUB__(v230, v322))
        goto LABEL_386;
      if (__OFADD__(v108, 1))
        goto LABEL_387;
      if (v108 + 1 <= 0)
      {
        v107 = 0;
      }
      else
      {
        if ((_DWORD)v107 != 1)
          goto LABEL_322;
        v230 -= v322;
LABEL_304:
        if (v230)
        {
          __break(1u);
LABEL_306:
          if (v107 < (uint64_t)v343)
            goto LABEL_307;
LABEL_309:
          LOBYTE(v38) = 0;
          goto LABEL_310;
        }
      }
      goto LABEL_340;
    }
    swift_unknownObjectRetain_n();
    result = swift_retain_n();
    v230 = v38;
    v231 = v30;
    while (1)
    {
      v233 = *(unsigned __int16 *)(v231 + 16);
      if (!*(_WORD *)(v231 + 16))
        goto LABEL_183;
      v234 = *(_QWORD *)(v231 + 40);
      v235 = v230 - v234;
      if (__OFSUB__(v230, v234))
        goto LABEL_357;
      if (__OFADD__(v235, 1))
        goto LABEL_358;
      if (v235 + 1 <= 0)
      {
        v233 = 0;
      }
      else
      {
        if ((_DWORD)v233 == 1)
        {
          v230 -= v234;
          goto LABEL_183;
        }
        v236 = *(_QWORD *)(v231 + 64);
        v42 = __OFSUB__(v235, v236);
        v237 = v235 - v236;
        if (v42)
          goto LABEL_372;
        if (__OFADD__(v237, 1))
          goto LABEL_373;
        if (v237 + 1 < 1)
        {
          v233 = 1;
          v230 = v235;
        }
        else
        {
          if ((_DWORD)v233 == 2)
          {
            v230 = v237;
LABEL_183:
            if (v230)
              goto LABEL_356;
            goto LABEL_184;
          }
          v238 = (_QWORD *)(v231 + 88);
          v239 = 2;
          while (1)
          {
            if (v233 == v239)
              goto LABEL_350;
            v230 = v237 - *v238;
            if (__OFSUB__(v237, *v238))
              goto LABEL_351;
            if (__OFADD__(v230, 1))
              goto LABEL_352;
            if (v230 + 1 < 1)
              break;
            ++v239;
            v238 += 3;
            v237 = v230;
            if (v233 == v239)
              goto LABEL_183;
          }
          v233 = v239;
          v230 = v237;
        }
      }
LABEL_184:
      v232 = (4 * *(_BYTE *)(v231 + 18) + 8) & 0x3C;
      v31 = ((-15 << v232) - 1) & v31 | (v233 << v232);
      v37 = *(_QWORD *)(v231 + 24 + 24 * v233);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v231 = v37;
      if (!*(_BYTE *)(v37 + 18))
        goto LABEL_298;
    }
  }
  v344 = *v360;
  *(_QWORD *)&v384 = *v360 >> 11;
  v57 = *(_QWORD *)(a1 + 64);
  v58 = *(_QWORD *)(a1 + 72);
  v60 = *(_QWORD *)(a1 + 80);
  v59 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain_n();
  v61 = specialized Rope.find<A>(at:in:preferEnd:)(v56, 0, v57, v58, v60, v59);
  v63 = v62;
  v65 = v64;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v61, v63, v65, v57, v58, v60, v59);
  swift_unknownObjectRelease_n();
  v66 = *(_QWORD *)(a1 + 64);
  v67 = *(_QWORD *)(a1 + 72);
  v69 = *(_QWORD *)(a1 + 80);
  v68 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v61, v63, v65, v66, v67, v69, v68);
  v30 = v70;
  v361 = v71;
  swift_unknownObjectRelease();
  v72 = swift_bridgeObjectRetain();
  v73 = specialized _NativeDictionary.filter(_:)(v72);
  swift_bridgeObjectRelease_n();
  v35 = *(_QWORD *)(v73 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v38 = 0;
  *(_QWORD *)&v395 = result;
  v74 = 1 << *(_BYTE *)(v73 + 32);
  v43 = -1;
  if (v74 < 64)
    v43 = ~(-1 << v74);
  v37 = v73 + 64;
  v31 = v43 & *(_QWORD *)(v73 + 64);
  v75 = (unint64_t)(v74 + 63) >> 6;
  while (1)
  {
    if (v31)
    {
      v76 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v77 = v76 | (v38 << 6);
      goto LABEL_47;
    }
    v40 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_336:
      __break(1u);
LABEL_337:
      __break(1u);
LABEL_338:
      __break(1u);
LABEL_339:
      v107 = v43;
      v230 = v40;
      goto LABEL_340;
    }
    if (v40 >= v75)
      goto LABEL_67;
    v80 = *(_QWORD *)(v37 + 8 * v40);
    ++v38;
    if (!v80)
    {
      v38 = v40 + 1;
      if (v40 + 1 >= v75)
        goto LABEL_67;
      v80 = *(_QWORD *)(v37 + 8 * v38);
      if (!v80)
      {
        v38 = v40 + 2;
        if (v40 + 2 >= v75)
          goto LABEL_67;
        v80 = *(_QWORD *)(v37 + 8 * v38);
        if (!v80)
        {
          v38 = v40 + 3;
          if (v40 + 3 >= v75)
            goto LABEL_67;
          v80 = *(_QWORD *)(v37 + 8 * v38);
          if (!v80)
          {
            v38 = v40 + 4;
            if (v40 + 4 >= v75)
              goto LABEL_67;
            v80 = *(_QWORD *)(v37 + 8 * v38);
            if (!v80)
              break;
          }
        }
      }
    }
LABEL_66:
    v31 = (v80 - 1) & v80;
    v77 = __clz(__rbit64(v80)) + (v38 << 6);
LABEL_47:
    v78 = (uint64_t *)(*(_QWORD *)(v73 + 48) + 16 * v77);
    v35 = *v78;
    v79 = v78[1];
    swift_bridgeObjectRetain();
    v30 = (uint64_t)&v395;
    specialized Set._Variant.insert(_:)((unint64_t *)&v453, v35, v79);
    result = swift_bridgeObjectRelease();
  }
  v81 = v40 + 5;
  if (v81 < v75)
  {
    v80 = *(_QWORD *)(v37 + 8 * v81);
    if (!v80)
    {
      while (1)
      {
        v38 = v81 + 1;
        if (__OFADD__(v81, 1))
          break;
        if (v38 >= v75)
          goto LABEL_67;
        v80 = *(_QWORD *)(v37 + 8 * v38);
        ++v81;
        if (v80)
          goto LABEL_66;
      }
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
      goto LABEL_378;
    }
    v38 = v81;
    goto LABEL_66;
  }
LABEL_67:
  v365 = v73;
  swift_release();
  v82 = v395;
  *(_QWORD *)&v378 = v395;
  if (v344 > 0x7FF)
  {
    v87 = *(_QWORD *)(a1 + 64);
    v88 = *(_QWORD *)(a1 + 72);
    v89 = *(_QWORD *)(a1 + 80);
    v90 = *(_QWORD *)(a1 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v87, v88, v89, v90, &v404);
    v372 = v404;
    v343 = v405;
    v86 = v406;
    swift_unknownObjectRelease();
    v85 = v343;
    v84 = v372;
  }
  else
  {
    v83 = (_QWORD *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v83, 0, (unint64_t *)&v404);
    v84 = v404;
    v85 = v405;
    v86 = v406;
  }
  v91 = v376;
  v395 = v84;
  v396 = v85;
  *(_QWORD *)&v397 = v86;
  v92 = *(_QWORD *)(a1 + 64);
  v93 = *(_QWORD *)(a1 + 72);
  v94 = *(_QWORD *)(a1 + 80);
  v95 = *(_QWORD *)(a1 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v372) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v92, v93, v94, v95, (uint64_t *)&v453);
  v97 = v455;
  swift_unknownObjectRelease();
  if (v97 < v86 && *(_QWORD *)(v82 + 16))
  {
    while (1)
    {
      v31 = *((_QWORD *)&v395 + 1);
      v98 = v395;
      v99 = v396;
      v100 = *(_QWORD *)(a1 + 64);
      v101 = *(_QWORD *)(a1 + 80);
      v102 = swift_unknownObjectRetain();
      result = specialized Rope._endPath.getter(v102);
      if (v100)
      {
        result = swift_unknownObjectRelease();
        if (v86 != v101)
          goto LABEL_96;
      }
      else if (v86)
      {
LABEL_96:
        v117 = *(_QWORD *)(a1 + 64);
        v116 = *(_QWORD *)(a1 + 72);
        v118 = *(_QWORD *)(a1 + 80);
        v30 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)&v453 = v98;
        *((_QWORD *)&v453 + 1) = v31;
        *(_QWORD *)&v454 = v99;
        v119 = *((_QWORD *)&v99 + 1) - 1;
        if (__OFSUB__(*((_QWORD *)&v99 + 1), 1))
          goto LABEL_365;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v453, v117, v116, v118, v30);
        v120 = *((_QWORD *)&v453 + 1);
        v31 = v454;
        v105 = v453;
        v121 = specialized Rope.subscript.getter(v453, *((unint64_t *)&v453 + 1), v454, v117, v116, v118, v30);
        v30 = v122;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v123 = v86 - v121;
        if (__OFSUB__(v86, v121))
          goto LABEL_366;
        v37 = v370;
        v106 = v365;
        goto LABEL_124;
      }
      v103 = *(_QWORD *)(a1 + 64);
      v104 = *(_QWORD *)(a1 + 72);
      v30 = *(_QWORD *)(a1 + 80);
      v105 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)&v343 = v30;
      if (v103)
      {
        v342 = *(_QWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 88);
        v37 = v370;
        v106 = v365;
        if (v30 < v370)
          goto LABEL_369;
        if (*(_WORD *)(v103 + 16))
        {
          v35 = *(unsigned __int8 *)(v103 + 18);
          if (*(_BYTE *)(v103 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v30 = v370;
            v107 = v103;
            while (1)
            {
              v110 = *(unsigned __int16 *)(v107 + 16);
              if (!*(_WORD *)(v107 + 16))
                goto LABEL_392;
              v111 = *(_QWORD *)(v107 + 40);
              v42 = __OFSUB__(v30, v111);
              v112 = v30 - v111;
              if (v42)
                goto LABEL_345;
              if (v112 <= 0)
              {
                v108 = 0;
              }
              else
              {
                if ((_DWORD)v110 == 1)
                  goto LABEL_394;
                v113 = *(_QWORD *)(v107 + 64);
                v30 = v112 - v113;
                if (__OFSUB__(v112, v113))
                  goto LABEL_349;
                if (v30 >= 1)
                {
                  if ((_DWORD)v110 == 2)
                    goto LABEL_394;
                  v114 = (_QWORD *)(v107 + 88);
                  v108 = 2;
                  while (v110 != v108)
                  {
                    v115 = v30 - *v114;
                    if (__OFSUB__(v30, *v114))
                      goto LABEL_321;
                    if (v115 < 1)
                      goto LABEL_80;
                    ++v108;
                    v114 += 3;
                    v30 = v115;
                    if (v110 == v108)
                      goto LABEL_394;
                  }
                  __break(1u);
LABEL_321:
                  __break(1u);
LABEL_322:
                  v338 = *(_QWORD *)(v37 + 48);
                  v42 = __OFSUB__(v108, v338);
                  v40 = v108 - v338;
                  if (v42)
                    goto LABEL_390;
                  if (__OFADD__(v40, 1))
                    goto LABEL_391;
                  if (v40 + 1 >= 1)
                  {
                    if ((_DWORD)v107 != 2)
                    {
                      v339 = (_QWORD *)(v37 + 72);
                      v43 = 2;
                      while (v107 != v43)
                      {
                        v230 = v40 - *v339;
                        if (__OFSUB__(v40, *v339))
                          goto LABEL_384;
                        if (__OFADD__(v230, 1))
                          goto LABEL_385;
                        if (v230 + 1 < 1)
                          goto LABEL_339;
                        ++v43;
                        v339 += 3;
                        v40 = v230;
                        if (v107 == v43)
                          goto LABEL_304;
                      }
                      goto LABEL_383;
                    }
                    v230 = v40;
                    goto LABEL_304;
                  }
                  v107 = 1;
                  v230 = v108;
LABEL_340:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v242 = v31 & 0xFFFFFFFFFFFFF0FFLL | (v107 << 8);
                  v195 = v353;
                  v229 = v372;
                  if (!v30)
                  {
LABEL_341:
                    result = swift_release();
                    v243 = 0;
                    v244 = v38 - v230;
                    if (!__OFSUB__(v38, v230))
                    {
LABEL_209:
                      *(_QWORD *)&v390 = v195;
                      *((_QWORD *)&v390 + 1) = v38;
                      *(_QWORD *)&v391 = a1;
                      *((_QWORD *)&v391 + 1) = v35;
                      *(_QWORD *)&v392 = v242;
                      *((_QWORD *)&v392 + 1) = v37;
                      v393 = v243;
                      v394 = v244;
                      specialized IndexingIterator.next()();
                      if (v245)
                      {
                        v246 = v245;
                        v247 = v356;
                        while (1)
                        {
                          v249 = v247[1];
                          v434 = *v247;
                          v435 = v249;
                          v436 = v247[2];
                          BigString.utf8.getter();
                          v250 = v485;
                          v251 = BigString.UTF8View.index(_:offsetBy:)();
                          v253 = v252;
                          v255 = v254;
                          v257 = v256;
                          outlined release of Locale((uint64_t)v425);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v258 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v246);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v351 = v255;
                          v347 = v253;
                          v349 = v257;
                          if ((v258 & 1) != 0 && v251 >> 10 > v250 >> 10)
                            break;
LABEL_211:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v485, v251, v347, v351, v349);
                          specialized IndexingIterator.next()();
                          v246 = v248;
                          if (!v248)
                            goto LABEL_253;
                        }
                        v259 = v250;
                        v363 = v246 + 64;
LABEL_216:
                        v260 = v247[1];
                        v431 = *v247;
                        v432 = v260;
                        v433 = v247[2];
                        BigString.unicodeScalars.getter();
                        v371 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v426);
                        v261 = v247[1];
                        v428 = *v247;
                        v429 = v261;
                        v430 = v247[2];
                        BigString.unicodeScalars.getter();
                        v367 = v259;
                        v369 = BigString.UnicodeScalarView.index(after:)();
                        outlined release of Locale((uint64_t)v427);
                        v262 = 1 << *(_BYTE *)(v246 + 32);
                        if (v262 < 64)
                          v263 = ~(-1 << v262);
                        else
                          v263 = -1;
                        v264 = v263 & *(_QWORD *)(v246 + 64);
                        v265 = (unint64_t)(v262 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        v266 = 0;
                        while (1)
                        {
                          if (v264)
                          {
                            v267 = __clz(__rbit64(v264));
                            v264 &= v264 - 1;
                            v268 = v267 | (v266 << 6);
                            goto LABEL_223;
                          }
                          v272 = v266 + 1;
                          if (__OFADD__(v266, 1))
                            break;
                          if (v272 >= v265)
                            goto LABEL_232;
                          v273 = *(_QWORD *)(v363 + 8 * v272);
                          if (v273)
                            goto LABEL_227;
                          if (v266 + 2 >= v265)
                          {
                            ++v266;
LABEL_232:
                            v264 = 0;
                            v383 = 0;
                            v381 = 0u;
                            v382 = 0u;
                            v379 = 0u;
                            v380 = 0u;
                            v378 = 0u;
                            goto LABEL_233;
                          }
                          v273 = *(_QWORD *)(v363 + 8 * (v266 + 2));
                          if (v273)
                          {
                            v272 = v266 + 2;
                            goto LABEL_227;
                          }
                          if (v266 + 3 >= v265)
                          {
                            v266 += 2;
                            goto LABEL_232;
                          }
                          v273 = *(_QWORD *)(v363 + 8 * (v266 + 3));
                          if (v273)
                          {
                            v272 = v266 + 3;
                            goto LABEL_227;
                          }
                          v272 = v266 + 4;
                          if (v266 + 4 >= v265)
                          {
                            v266 += 3;
                            goto LABEL_232;
                          }
                          v273 = *(_QWORD *)(v363 + 8 * v272);
                          if (v273)
                            goto LABEL_227;
                          do
                          {
                            if (v265 - 5 == v266)
                            {
                              v266 = v265 - 1;
                              goto LABEL_232;
                            }
                            v273 = *(_QWORD *)(v246 + 104 + 8 * v266++);
                          }
                          while (!v273);
                          v272 = v266 + 4;
LABEL_227:
                          v264 = (v273 - 1) & v273;
                          v268 = __clz(__rbit64(v273)) + (v272 << 6);
                          v266 = v272;
LABEL_223:
                          v269 = *(_QWORD *)(v246 + 56);
                          v270 = (_QWORD *)(*(_QWORD *)(v246 + 48) + 16 * v268);
                          v271 = v270[1];
                          *(_QWORD *)&v378 = *v270;
                          *((_QWORD *)&v378 + 1) = v271;
                          outlined init with copy of AttributedString._AttributeValue(v269 + 72 * v268, (uint64_t)&v379);
                          swift_bridgeObjectRetain();
LABEL_233:
                          outlined init with take of LocalePreferences?((uint64_t)&v378, (uint64_t)&v384, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
                          v274 = *((_QWORD *)&v384 + 1);
                          if (!*((_QWORD *)&v384 + 1))
                          {
                            swift_release();
                            v247 = v356;
                            v259 = v369;
                            if (v251 >> 10 <= v369 >> 10)
                              goto LABEL_211;
                            goto LABEL_216;
                          }
                          v275 = v384;
                          v276 = *((_QWORD *)&v386 + 1);
                          v277 = v387;
                          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v386 + 1), v387);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)v385);
                          if (v277 != 1)
                          {
                            *(_QWORD *)&v378 = v276;
                            *((_QWORD *)&v378 + 1) = v277;
                            v278 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v276, v277);
                            if ((v278 & 0x100000000) == 0 && v371 != (_DWORD)v278)
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v275, v274, v367, v369, (uint64_t *)v444);
                          }
                          swift_bridgeObjectRelease();
                        }
                        __break(1u);
LABEL_253:
                        v279 = *(_QWORD *)&v444[0];
LABEL_254:
                        result = swift_release();
                        v280 = 0;
                        v281 = v279 + 64;
                        v282 = 1 << *(_BYTE *)(v279 + 32);
                        v283 = -1;
                        if (v282 < 64)
                          v283 = ~(-1 << v282);
                        v284 = v283 & *(_QWORD *)(v279 + 64);
                        v377 = (unint64_t)(v282 + 63) >> 6;
                        v30 = v353;
                        while (1)
                        {
                          if (v284)
                          {
                            v285 = __clz(__rbit64(v284));
                            v284 &= v284 - 1;
                            v286 = v285 | (v280 << 6);
                          }
                          else
                          {
                            v42 = __OFADD__(v280++, 1);
                            if (v42)
                              goto LABEL_346;
                            if (v280 >= v377)
                            {
LABEL_279:
                              swift_release();
                              a1 = v344;
                              v295 = v341 >> 10;
                              if (specialized Range.isEmpty.getter())
                              {
                                v296 = v356[1];
                                v390 = *v356;
                                v391 = v296;
                                v392 = v356[2];
                                if (v295 > (unint64_t)BigString.startIndex.getter() >> 10)
                                {
                                  v30 = (uint64_t)&v390;
                                  if (v295 < (unint64_t)BigString.endIndex.getter() >> 10)
                                  {
                                    result = v344 - 1;
                                    if (__OFSUB__(v344, 1))
                                      goto LABEL_389;
                                    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v344) & 1) != 0)
                                    {
                                      v297 = *v356;
                                      v298 = v356[2];
                                      v486 = v356[1];
                                      v487 = v298;
                                      v485 = v297;
                                      v299 = *v356;
                                      v379 = v356[1];
                                      v380 = v298;
                                      v378 = v299;
                                      outlined init with take of any PredicateExpression<Self.Output == B1>(&v378, (uint64_t)v444);
                                      outlined retain of Locale((uint64_t)v444);
                                      v300 = BigString.index(before:)();
                                      v302 = v301;
                                      v304 = v303;
                                      v306 = v305;
                                      outlined release of Locale((uint64_t)&v485);
                                      AttributedString.Guts._paragraphExtending(from:)(v300, v302, v304, v306, (uint64_t)&v384);
                                      v35 = Range<>._utf8OffsetRange.getter();
                                      v107 = v307;
                                      goto LABEL_309;
                                    }
                                  }
                                }
                                goto LABEL_206;
                              }
                              v308 = v356[1];
                              v444[0] = *v356;
                              v444[1] = v308;
                              v444[2] = v356[2];
                              v30 = (uint64_t)v444;
                              if (v295 <= (unint64_t)BigString.startIndex.getter() >> 10)
                                goto LABEL_289;
                              result = v344 - 1;
                              if (__OFSUB__(v344, 1))
                                goto LABEL_388;
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v344) & 1) != 0)
                              {
                                v309 = *v356;
                                v310 = v356[1];
                                v443 = v356[2];
                                v442[1] = v310;
                                v442[0] = v309;
                                v311 = *v356;
                                v486 = v356[1];
                                v487 = v443;
                                v485 = v311;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v485, (uint64_t)v488);
                                outlined retain of Locale((uint64_t)v488);
                                v312 = BigString.index(before:)();
                                v314 = v313;
                                v316 = v315;
                                v318 = v317;
                                outlined release of Locale((uint64_t)v442);
                                AttributedString.Guts._paragraphExtending(from:)(v312, v314, v316, v318, (uint64_t)&v378);
                                v35 = Range<>._utf8OffsetRange.getter();
                                v107 = v319;
                                LOBYTE(v38) = 0;
                              }
                              else
                              {
LABEL_289:
                                v35 = 0;
                                v107 = 0;
                                LOBYTE(v38) = 1;
                              }
                              v320 = v356[1];
                              v439 = *v356;
                              v440 = v320;
                              v441 = v356[2];
                              if (v340 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                if ((v38 & 1) == 0)
                                  goto LABEL_306;
                                if ((uint64_t)v343 < 1)
                                {
LABEL_206:
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  return swift_unknownObjectRelease();
                                }
LABEL_307:
                                if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v343 - 1, v343) & 1) != 0)
                                {
                                  v323 = *v356;
                                  v324 = v356[1];
                                  v438 = v356[2];
                                  v437[1] = v324;
                                  v437[0] = v323;
                                  v325 = *v356;
                                  v391 = v356[1];
                                  v392 = v438;
                                  v390 = v325;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v390, (uint64_t)v489);
                                  outlined retain of Locale((uint64_t)v489);
                                  v326 = BigString.index(before:)();
                                  v328 = v327;
                                  v330 = v329;
                                  v332 = v331;
                                  outlined release of Locale((uint64_t)v437);
                                  AttributedString.Guts._paragraphExtending(from:)(v326, v328, v330, v332, (uint64_t)&v384);
                                  v333 = Range<>._utf8OffsetRange.getter();
                                  v335 = v334;
                                  v336 = 1;
                                  goto LABEL_311;
                                }
                              }
LABEL_310:
                              v333 = 0;
                              v335 = 0;
                              v336 = 0;
LABEL_311:
                              if ((v38 & 1) == 0 && a1 < v107)
                              {
                                v388 = 0;
                                v389 = 0;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v388, v35, a1, v107);
                              }
                              if ((uint64_t)v343 < v335)
                                v337 = v336;
                              else
                                v337 = 0;
                              if (v337 == 1)
                              {
                                v388 = 0;
                                v389 = 0;
                                AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v388, v333, v343, v335);
                              }
                              goto LABEL_206;
                            }
                            v287 = *(_QWORD *)(v281 + 8 * v280);
                            if (!v287)
                            {
                              v288 = v280 + 1;
                              if (v280 + 1 >= v377)
                                goto LABEL_279;
                              v287 = *(_QWORD *)(v281 + 8 * v288);
                              if (!v287)
                              {
                                v288 = v280 + 2;
                                if (v280 + 2 >= v377)
                                  goto LABEL_279;
                                v287 = *(_QWORD *)(v281 + 8 * v288);
                                if (!v287)
                                {
                                  v288 = v280 + 3;
                                  if (v280 + 3 >= v377)
                                    goto LABEL_279;
                                  v287 = *(_QWORD *)(v281 + 8 * v288);
                                  if (!v287)
                                  {
                                    while (1)
                                    {
                                      v280 = v288 + 1;
                                      if (__OFADD__(v288, 1))
                                        goto LABEL_359;
                                      if (v280 >= v377)
                                        goto LABEL_279;
                                      v287 = *(_QWORD *)(v281 + 8 * v280);
                                      ++v288;
                                      if (v287)
                                        goto LABEL_269;
                                    }
                                  }
                                }
                              }
                              v280 = v288;
                            }
LABEL_269:
                            v284 = (v287 - 1) & v287;
                            v286 = __clz(__rbit64(v287)) + (v280 << 6);
                          }
                          v289 = (unint64_t *)(*(_QWORD *)(v279 + 48) + 16 * v286);
                          v291 = *v289;
                          v290 = v289[1];
                          v292 = *(_QWORD *)(*(_QWORD *)(v279 + 56) + 8 * v286);
                          result = specialized Array.count.getter(v292);
                          if (result)
                          {
                            v293 = result;
                            if (result < 1)
                              goto LABEL_344;
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            v294 = (uint64_t *)(v292 + 40);
                            do
                            {
                              AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v291, v290, *(v294 - 1), *v294, 0);
                              v294 += 2;
                              --v293;
                            }
                            while (v293);
                            swift_bridgeObjectRelease();
                            result = swift_bridgeObjectRelease();
                          }
                        }
                      }
LABEL_251:
                      v279 = MEMORY[0x1E0DEE9E0];
                      goto LABEL_254;
                    }
LABEL_343:
                    __break(1u);
LABEL_344:
                    __break(1u);
LABEL_345:
                    __break(1u);
LABEL_346:
                    __break(1u);
LABEL_347:
                    __break(1u);
LABEL_348:
                    __break(1u);
LABEL_349:
                    __break(1u);
LABEL_350:
                    __break(1u);
LABEL_351:
                    __break(1u);
LABEL_352:
                    __break(1u);
LABEL_353:
                    __break(1u);
LABEL_354:
                    __break(1u);
                    goto LABEL_355;
                  }
LABEL_208:
                  swift_unknownObjectRetain();
                  v243 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v242, v37, v30, v229);
                  swift_release();
                  result = swift_unknownObjectRelease_n();
                  v244 = v38 - v230;
                  if (!__OFSUB__(v38, v230))
                    goto LABEL_209;
                  goto LABEL_343;
                }
                v30 = v112;
                v108 = 1;
              }
LABEL_80:
              v109 = (4 * *(_BYTE *)(v107 + 18) + 8) & 0x3C;
              v35 = ((-15 << v109) - 1) & v35 | (v108 << v109);
              v31 = *(_QWORD *)(v107 + 24 + 24 * v108);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v107 = v31;
              if (!*(_BYTE *)(v31 + 18))
                goto LABEL_107;
            }
          }
          result = swift_unknownObjectRetain_n();
          v30 = v370;
          v31 = v103;
LABEL_107:
          v124 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16))
            goto LABEL_395;
          v125 = *(_QWORD *)(v31 + 24);
          v42 = __OFSUB__(v30, v125);
          v126 = v30 - v125;
          if (v42)
            goto LABEL_380;
          v104 = v342;
          if (v126 <= 0)
          {
            v129 = 0;
          }
          else
          {
            if ((_DWORD)v124 == 1)
              goto LABEL_397;
            v127 = *(_QWORD *)(v31 + 48);
            v30 = v126 - v127;
            if (__OFSUB__(v126, v127))
              goto LABEL_381;
            if (v30 >= 1)
            {
              if ((_DWORD)v124 == 2)
                goto LABEL_397;
              v128 = (_QWORD *)(v31 + 72);
              v129 = 2;
              while (v124 != v129)
              {
                v130 = v30 - *v128;
                if (__OFSUB__(v30, *v128))
                  goto LABEL_348;
                if (v130 < 1)
                  goto LABEL_122;
                ++v129;
                v128 += 3;
                v30 = v130;
                if (v124 == v129)
                  goto LABEL_397;
              }
              goto LABEL_347;
            }
            v30 = v126;
            v129 = 1;
          }
LABEL_122:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v120 = v35 & 0xFFFFFFFFFFFFF0FFLL | (v129 << 8);
LABEL_103:
          swift_unknownObjectRetain();
          v119 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v105, v120, v31, v103, v104);
          result = swift_unknownObjectRelease_n();
          v123 = v37 - v30;
          if (__OFSUB__(v37, v30))
            goto LABEL_367;
          goto LABEL_124;
        }
        v104 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        v37 = v370;
        v106 = v365;
        if (v344 >= 0x800)
          goto LABEL_379;
      }
      swift_unknownObjectRetain_n();
      v120 = specialized Rope._endPath.getter(v103);
      swift_unknownObjectRelease();
      v31 = 0;
      v30 = 0;
      if (v103)
        goto LABEL_103;
      v119 = 0;
      v123 = v37;
LABEL_124:
      *(_QWORD *)&v395 = v105;
      *((_QWORD *)&v395 + 1) = v120;
      *(_QWORD *)&v396 = v31;
      *((_QWORD *)&v396 + 1) = v119;
      *(_QWORD *)&v397 = v123;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v395, 0, v37, (_QWORD *)a1, (uint64_t *)&v378, v106, v361, (uint64_t)&v384);
      swift_bridgeObjectRelease();
      swift_release();
      v86 = v397;
      v131 = *(_QWORD *)(a1 + 64);
      v132 = *(_QWORD *)(a1 + 72);
      v133 = *(_QWORD *)(a1 + 80);
      v134 = *(_QWORD *)(a1 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v372 & 1, v131, v132, v133, v134, (uint64_t *)&v453);
      v135 = v455;
      swift_unknownObjectRelease();
      if (v135 >= v86 || !*(_QWORD *)(v378 + 16))
      {
        swift_release();
        v91 = v376;
        goto LABEL_128;
      }
    }
  }
  swift_release();
LABEL_128:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v395 = v91;
  v136 = *(_QWORD *)(a1 + 64);
  v137 = *(_QWORD *)(a1 + 72);
  v138 = *(_QWORD *)(a1 + 80);
  v139 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v91 - 1, v372 & 1, v136, v137, v138, v139, (uint64_t *)&v453);
  v362 = v454;
  v366 = v453;
  v140 = v455;
  swift_unknownObjectRelease();
  v466[0] = v366;
  v466[1] = v362;
  v467 = v140;
  v141 = *(_QWORD *)(a1 + 64);
  v142 = *(_QWORD *)(a1 + 72);
  v143 = *(_QWORD *)(a1 + 80);
  v144 = *(_QWORD *)(a1 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v466, v141, v142, v143, v144);
  v146 = v145;
  v37 = v147;
  swift_unknownObjectRelease();
  v35 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v146);
  v149 = v148;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v35 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v31 = 0;
  *(_QWORD *)&v378 = result;
  v150 = 1 << *(_BYTE *)(v35 + 32);
  v43 = -1;
  if (v150 < 64)
    v43 = ~(-1 << v150);
  v151 = v35 + 64;
  v152 = v43 & *(_QWORD *)(v35 + 64);
  v38 = (unint64_t)(v150 + 63) >> 6;
  while (1)
  {
    if (v152)
    {
      v153 = __clz(__rbit64(v152));
      v152 &= v152 - 1;
      v154 = v153 | (v31 << 6);
      goto LABEL_132;
    }
    v40 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_338;
    if (v40 >= v38)
    {
LABEL_152:
      swift_release();
      v159 = *(_OWORD *)(a1 + 32);
      v463 = *(_OWORD *)(a1 + 16);
      v464 = v159;
      v465 = *(_OWORD *)(a1 + 48);
      BigString.utf8.getter();
      v30 = BigString.UTF8View.count.getter();
      result = outlined release of Locale((uint64_t)v407);
      if (v30 < v376)
        goto LABEL_370;
      v160 = *(_QWORD *)(a1 + 64);
      v161 = *(_QWORD *)(a1 + 72);
      v162 = *(_QWORD *)(a1 + 80);
      v163 = *(_QWORD *)(a1 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      v164 = v163;
      v165 = v376;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v376, v372 & 1, v160, v161, v162, v164, (uint64_t *)&v453);
      v373 = v453;
      v166 = v454;
      v167 = v455;
      swift_unknownObjectRelease();
      v453 = v373;
      v454 = v166;
      *(_QWORD *)&v455 = v167;
      if (v376 != v30)
        goto LABEL_157;
LABEL_158:
      AttributedString._InternalRunsSlice.startIndex.getter((_QWORD *)a1, v165, v408);
      for (i = &v409; v167 < *i && *(_QWORD *)(v378 + 16); i = &v411)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v453, v165, v30, (_QWORD *)a1, (uint64_t *)&v378, v35, v149, (uint64_t)&v395);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((_QWORD *)a1, v165, v30, (uint64_t *)&v453);
        v167 = v455;
        if (v165 == v30)
          goto LABEL_158;
LABEL_157:
        v168 = *(_QWORD *)(a1 + 72);
        v169 = *(_QWORD *)(a1 + 80);
        v170 = *(_QWORD *)(a1 + 88);
        v171 = swift_unknownObjectRetain();
        v172 = v170;
        v165 = v376;
        AttributedString._InternalRuns.endIndex.getter(v171, v168, v169, v172, v410);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_bridgeObjectRelease();
      if ((uint64_t)v395 < (uint64_t)v384)
        goto LABEL_371;
      v364 = v395;
      v344 = v384;
      v3 = v368;
      v55 = v359;
      goto LABEL_162;
    }
    v157 = *(_QWORD *)(v151 + 8 * v40);
    ++v31;
    if (!v157)
    {
      v31 = v40 + 1;
      if (v40 + 1 >= v38)
        goto LABEL_152;
      v157 = *(_QWORD *)(v151 + 8 * v31);
      if (!v157)
      {
        v31 = v40 + 2;
        if (v40 + 2 >= v38)
          goto LABEL_152;
        v157 = *(_QWORD *)(v151 + 8 * v31);
        if (!v157)
        {
          v31 = v40 + 3;
          if (v40 + 3 >= v38)
            goto LABEL_152;
          v157 = *(_QWORD *)(v151 + 8 * v31);
          if (!v157)
          {
            v31 = v40 + 4;
            if (v40 + 4 >= v38)
              goto LABEL_152;
            v157 = *(_QWORD *)(v151 + 8 * v31);
            if (!v157)
              break;
          }
        }
      }
    }
LABEL_151:
    v152 = (v157 - 1) & v157;
    v154 = __clz(__rbit64(v157)) + (v31 << 6);
LABEL_132:
    v155 = (unint64_t *)(*(_QWORD *)(v35 + 48) + 16 * v154);
    v37 = *v155;
    v156 = v155[1];
    swift_bridgeObjectRetain();
    v30 = (uint64_t)&v378;
    specialized Set._Variant.insert(_:)((unint64_t *)&v453, v37, v156);
    result = swift_bridgeObjectRelease();
  }
  v158 = v40 + 5;
  if (v158 >= v38)
    goto LABEL_152;
  v157 = *(_QWORD *)(v151 + 8 * v158);
  if (v157)
  {
    v31 = v158;
    goto LABEL_151;
  }
  while (1)
  {
    v31 = v158 + 1;
    if (__OFADD__(v158, 1))
      break;
    if (v31 >= v38)
      goto LABEL_152;
    v157 = *(_QWORD *)(v151 + 8 * v31);
    ++v158;
    if (v157)
      goto LABEL_151;
  }
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  if (!v30)
    __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  if (!v30)
    __break(1u);
LABEL_397:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(unint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  unint64_t v19;
  int64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __int128 v77;
  unsigned __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int Enum;
  uint64_t v89;
  __int128 v90;
  unsigned __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  uint64_t v143;
  unint64_t v144;
  int64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  int64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *i;
  __int128 v166;
  uint64_t v167;
  _OWORD *v168;
  unsigned __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  __int128 *v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 *v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  unint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  int64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  int64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  int64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  int64_t v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int64_t v291;
  int64_t v292;
  int64_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int64_t v305;
  char v306;
  __int128 v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int64_t v319;
  int64_t v320;
  int64_t v321;
  int v322;
  int v323;
  uint64_t v324;
  _QWORD *v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  unsigned __int128 v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  unsigned __int128 v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v348;
  __int128 v349;
  int v350;
  uint64_t v351;
  int64_t v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  unsigned __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  char v378[48];
  __int128 v379;
  unsigned __int128 v380;
  uint64_t v381;
  char v382[48];
  unint64_t v383[4];
  uint64_t v384;
  uint64_t v385[4];
  uint64_t v386;
  char v387[48];
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  char v394[48];
  char v395[48];
  char v396[48];
  char v397[48];
  char v398[48];
  char v399[48];
  char v400[48];
  char v401[48];
  char v402[48];
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  _OWORD v412[2];
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  _OWORD v417[2];
  __int128 v418;
  _OWORD v419[3];
  _QWORD v420[5];
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  unsigned __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  _OWORD v452[2];
  uint64_t v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  _BYTE v467[40];
  _BYTE v468[56];

  v5 = v1;
  v6 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = (_QWORD *)*v1;
    v8 = *(_OWORD *)(*v1 + 16);
    v9 = *(_OWORD *)(*v1 + 32);
    v459 = *(_OWORD *)(*v1 + 48);
    v458 = v9;
    v457 = v8;
    v10 = v7[8];
    v11 = v7[9];
    v12 = v7[10];
    v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    v14 = swift_allocObject();
    v15 = BigString.isEmpty.getter();
    if (v10)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v457);
      swift_unknownObjectRelease();
      v2 = v10;
    }
    else
    {
      outlined retain of Locale((uint64_t)&v457);
      v2 = 0;
    }
    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v10);
    swift_unknownObjectRelease();
    if (v10)
    {
      swift_unknownObjectRelease();
      if ((((v12 == 0) ^ v15) & 1) == 0)
      {
LABEL_7:
        v16 = v458;
        *(_OWORD *)(v14 + 16) = v457;
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v459;
        *(_QWORD *)(v14 + 64) = v10;
        *(_QWORD *)(v14 + 72) = v11;
        *(_QWORD *)(v14 + 80) = v12;
        *(_QWORD *)(v14 + 88) = v13;
        *v5 = v14;
        swift_release();
        v6 = a1;
        goto LABEL_8;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      if ((v15 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_8:
  v4 = *v5;
  v17 = *(_OWORD *)(*v5 + 32);
  v454 = *(_OWORD *)(*v5 + 16);
  v455 = v17;
  v456 = *(_OWORD *)(v4 + 48);
  result = BigString.isEmpty.getter();
  v340 = v5;
  if ((result & 1) != 0)
  {
    v330 = MEMORY[0x1E0DEE9E0];
    goto LABEL_26;
  }
  v19 = *v6;
  if (*v6 >= 0x800 && (v6[4] ^ v19) <= 0x3FF)
  {
    v2 = v6[2];
    BigString.utf8.getter();
    v19 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v378);
  }
  v15 = *(_QWORD *)(v4 + 64);
  v3 = *(_QWORD *)(v4 + 80);
  if (v15)
    v20 = *(_QWORD *)(v4 + 80);
  else
    v20 = 0;
  v13 = v19 >> 11;
  if (v20 < (uint64_t)(v19 >> 11))
  {
LABEL_395:
    __break(1u);
    goto LABEL_396;
  }
  v12 = *(_QWORD *)(v4 + 72);
  v10 = *(_QWORD *)(v4 + 88);
  if (!v15 || (v13 < v3 ? (v21 = *(unsigned __int16 *)(v15 + 16) == 0) : (v21 = 1), v21))
  {
    v22 = swift_unknownObjectRetain_n();
    v23 = specialized Rope._endPath.getter(v22);
    swift_unknownObjectRelease();
    v24 = 0;
    v25 = 0;
    if (!v15)
      goto LABEL_25;
LABEL_24:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v23, v24, v15, v12);
    swift_unknownObjectRelease_n();
    v25 = v24;
    goto LABEL_25;
  }
LABEL_41:
  v351 = v12;
  v40 = *(unsigned __int8 *)(v15 + 18);
  if (*(_BYTE *)(v15 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v2 = 24;
    v41 = v15;
    while (1)
    {
      v43 = *(unsigned __int16 *)(v41 + 16);
      if (!*(_WORD *)(v41 + 16))
        goto LABEL_44;
      v44 = *(_QWORD *)(v41 + 40);
      v45 = __OFSUB__(v13, v44);
      v46 = v13 - v44;
      if (v45)
        goto LABEL_380;
      if (__OFADD__(v46, 1))
      {
LABEL_381:
        __break(1u);
LABEL_382:
        __break(1u);
LABEL_383:
        __break(1u);
LABEL_384:
        __break(1u);
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
      if (v46 + 1 >= 1)
        break;
      v43 = 0;
LABEL_45:
      v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
      v40 = ((-15 << v42) - 1) & v40 | (v43 << v42);
      v24 = *(_QWORD *)(v41 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v41 = v24;
      if (!*(_BYTE *)(v24 + 18))
        goto LABEL_74;
    }
    if ((_DWORD)v43 != 1)
    {
      v47 = (uint64_t *)(v41 + 64);
      v48 = 1;
      while (1)
      {
        v49 = *v47;
        v47 += 3;
        v13 = v46 - v49;
        if (__OFSUB__(v46, v49))
          goto LABEL_366;
        if (__OFADD__(v13, 1))
          goto LABEL_367;
        if (v13 + 1 < 1)
          break;
        ++v48;
        v46 = v13;
        if (v43 == v48)
          goto LABEL_44;
      }
      v43 = v48;
      v13 = v46;
      goto LABEL_45;
    }
    v13 = v46;
LABEL_44:
    if (v13)
      goto LABEL_379;
    goto LABEL_45;
  }
  swift_unknownObjectRetain_n();
  v24 = v15;
LABEL_74:
  result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v13, 0, (_WORD *)(v24 + 16), (uint64_t *)(v24 + 24));
  if (result < 0)
    goto LABEL_409;
  v58 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v23 = v40 & 0xFFFFFFFFFFFFF0FFLL | (v58 << 8);
  v25 = v24;
  v12 = v351;
  if (v15)
    goto LABEL_24;
LABEL_25:
  v26 = *(_QWORD *)(v4 + 64);
  v27 = *(_QWORD *)(v4 + 72);
  v28 = *(_QWORD *)(v4 + 80);
  v29 = *(_QWORD *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v10, v23, v25, v26, v27, v28, v29);
  swift_unknownObjectRelease();
  v30 = swift_bridgeObjectRetain();
  v330 = specialized _NativeDictionary.filter(_:)(v30);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  v5 = v340;
  v6 = a1;
LABEL_26:
  v3 = *v5;
  v337 = *v6;
  v31 = *v6 >> 11;
  v32 = v6[4] >> 11;
  v339 = v32 - v31;
  if (v32 == v31)
  {
    v329 = v337 >> 11;
    v33 = v337 >> 11;
    goto LABEL_195;
  }
  v359 = v337 >> 11;
  v10 = *(_QWORD *)(v3 + 64);
  v2 = *(_QWORD *)(v3 + 80);
  if (v10)
    v34 = *(_QWORD *)(v3 + 80);
  else
    v34 = 0;
  if (v34 < v31)
  {
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
    goto LABEL_402;
  }
  v35 = *(_QWORD *)(v3 + 72);
  v15 = *(_QWORD *)(v3 + 88);
  v351 = v32;
  if (!v10)
    goto LABEL_38;
  if (*(_WORD *)(v10 + 16))
    v36 = v31 < v2;
  else
    v36 = 0;
  if (!v36)
  {
    swift_unknownObjectRetain();
LABEL_38:
    v37 = swift_unknownObjectRetain();
    v38 = specialized Rope._endPath.getter(v37);
    swift_unknownObjectRelease();
    v39 = 0;
    goto LABEL_80;
  }
  *(_QWORD *)&v349 = *(_QWORD *)(v3 + 80);
  v50 = *(unsigned __int8 *)(v10 + 18);
  if (*(_BYTE *)(v10 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v2 = -15;
    v13 = v31;
    v51 = v10;
    while (1)
    {
      v52 = *(unsigned __int16 *)(v51 + 16);
      if (*(_WORD *)(v51 + 16))
      {
        v54 = 0;
        v55 = (uint64_t *)(v51 + 40);
        while (1)
        {
          v56 = *v55;
          v55 += 3;
          v57 = v13 - v56;
          if (__OFSUB__(v13, v56))
          {
            __break(1u);
LABEL_352:
            __break(1u);
            goto LABEL_353;
          }
          if (__OFADD__(v57, 1))
            goto LABEL_352;
          if (v57 + 1 < 1)
            break;
          ++v54;
          v13 = v57;
          if (v52 == v54)
            goto LABEL_71;
        }
        v52 = v54;
      }
      else
      {
        v57 = v13;
LABEL_71:
        if (v57)
          goto LABEL_382;
        v13 = 0;
      }
      v53 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
      v50 = ((-15 << v53) - 1) & v50 | (v52 << v53);
      v39 = *(_QWORD *)(v51 + 24 + 24 * v52);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v51 = v39;
      if (!*(_BYTE *)(v39 + 18))
        goto LABEL_78;
    }
  }
  swift_unknownObjectRetain_n();
  v13 = v31;
  v39 = v10;
LABEL_78:
  result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v13, 0, (_WORD *)(v39 + 16), (uint64_t *)(v39 + 24));
  if (result < 0)
    goto LABEL_411;
  v59 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v38 = v50 & 0xFFFFFFFFFFFFF0FFLL | (v59 << 8);
  v2 = v349;
LABEL_80:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v15, v38, v39, v10, v35, v2, v15);
  swift_unknownObjectRelease_n();
  v60 = *(_QWORD *)(v3 + 64);
  v61 = *(_QWORD *)(v3 + 72);
  v2 = *(_QWORD *)(v3 + 80);
  v62 = *(_QWORD *)(v3 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v15, v38, v39, v60, v61, v2, v62);
  v343 = v63;
  swift_unknownObjectRelease();
  v64 = swift_bridgeObjectRetain();
  v10 = specialized _NativeDictionary.filter(_:)(v64);
  swift_bridgeObjectRelease_n();
  v15 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v65 = 0;
  *(_QWORD *)&v371 = result;
  v66 = 1 << *(_BYTE *)(v10 + 32);
  v46 = -1;
  if (v66 < 64)
    v46 = ~(-1 << v66);
  v67 = v10 + 64;
  v68 = v46 & *(_QWORD *)(v10 + 64);
  v13 = (unint64_t)(v66 + 63) >> 6;
  while (1)
  {
    if (v68)
    {
      v69 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      v70 = v69 | (v65 << 6);
      goto LABEL_84;
    }
    v43 = v65 + 1;
    if (__OFADD__(v65, 1))
      goto LABEL_365;
    if (v43 >= v13)
      break;
    v73 = *(_QWORD *)(v67 + 8 * v43);
    ++v65;
    if (!v73)
    {
      v65 = v43 + 1;
      if (v43 + 1 >= v13)
        break;
      v73 = *(_QWORD *)(v67 + 8 * v65);
      if (!v73)
      {
        v65 = v43 + 2;
        if (v43 + 2 >= v13)
          break;
        v73 = *(_QWORD *)(v67 + 8 * v65);
        if (!v73)
        {
          v65 = v43 + 3;
          if (v43 + 3 >= v13)
            break;
          v73 = *(_QWORD *)(v67 + 8 * v65);
          if (!v73)
          {
            v65 = v43 + 4;
            if (v43 + 4 >= v13)
              break;
            v73 = *(_QWORD *)(v67 + 8 * v65);
            if (!v73)
            {
              v74 = v43 + 5;
              if (v74 >= v13)
                break;
              v73 = *(_QWORD *)(v67 + 8 * v74);
              if (!v73)
              {
                while (1)
                {
                  v65 = v74 + 1;
                  if (__OFADD__(v74, 1))
                    break;
                  if (v65 >= v13)
                    goto LABEL_104;
                  v73 = *(_QWORD *)(v67 + 8 * v65);
                  ++v74;
                  if (v73)
                    goto LABEL_103;
                }
LABEL_405:
                __break(1u);
                goto LABEL_406;
              }
              v65 = v74;
            }
          }
        }
      }
    }
LABEL_103:
    v68 = (v73 - 1) & v73;
    v70 = __clz(__rbit64(v73)) + (v65 << 6);
LABEL_84:
    v71 = (unint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v70);
    v72 = *v71;
    v2 = v71[1];
    swift_bridgeObjectRetain();
    v15 = (uint64_t)&v371;
    specialized Set._Variant.insert(_:)((unint64_t *)&v439, v72, v2);
    result = swift_bridgeObjectRelease();
  }
LABEL_104:
  swift_release();
  v75 = v371;
  *(_QWORD *)&v353 = v371;
  v341 = v10;
  if (v337 > 0x7FF)
  {
    v80 = *(_QWORD *)(v3 + 64);
    v81 = *(_QWORD *)(v3 + 72);
    v82 = *(_QWORD *)(v3 + 80);
    v83 = *(_QWORD *)(v3 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v80, v81, v82, v83, &v379);
    v349 = v379;
    v336 = v380;
    v79 = v381;
    swift_unknownObjectRelease();
    v78 = v336;
    v77 = v349;
  }
  else
  {
    v76 = (_QWORD *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v76, 0, (unint64_t *)&v379);
    v77 = v379;
    v78 = v380;
    v79 = v381;
  }
  v371 = v77;
  v372 = v78;
  *(_QWORD *)&v373 = v79;
  v84 = *(_QWORD *)(v3 + 64);
  v85 = *(_QWORD *)(v3 + 72);
  v86 = *(_QWORD *)(v3 + 80);
  v87 = *(_QWORD *)(v3 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v349) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v84, v85, v86, v87, (uint64_t *)&v439);
  v89 = v441;
  swift_unknownObjectRelease();
  if (v89 < v79 && *(_QWORD *)(v75 + 16))
  {
    do
    {
      v90 = v371;
      v91 = v372;
      v92 = *(_QWORD *)(v3 + 64);
      v2 = *(_QWORD *)(v3 + 72);
      v93 = *(_QWORD *)(v3 + 80);
      v94 = swift_unknownObjectRetain();
      result = specialized Rope._endPath.getter(v94);
      if (v92)
      {
        result = swift_unknownObjectRelease();
        if (v79 != v93)
          goto LABEL_133;
      }
      else if (v79)
      {
LABEL_133:
        v107 = *(_QWORD *)(v3 + 64);
        v108 = *(_QWORD *)(v3 + 72);
        v2 = *(_QWORD *)(v3 + 80);
        v109 = *(_QWORD *)(v3 + 88);
        v439 = v90;
        *(_QWORD *)&v440 = v91;
        v110 = *((_QWORD *)&v91 + 1) - 1;
        if (__OFSUB__(*((_QWORD *)&v91 + 1), 1))
          goto LABEL_392;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v439, v107, v108, v2, v109);
        v111 = *((_QWORD *)&v439 + 1);
        v100 = v440;
        v96 = v439;
        v112 = specialized Rope.subscript.getter(v439, *((unint64_t *)&v439 + 1), v440, v107, v108, v2, v109);
        v2 = v113;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v114 = v79 - v112;
        if (__OFSUB__(v79, v112))
          goto LABEL_393;
        v97 = v337 >> 11;
        v115 = v343;
        goto LABEL_159;
      }
      v95 = *(_QWORD *)(v3 + 64);
      v10 = *(_QWORD *)(v3 + 72);
      v96 = *(_QWORD *)(v3 + 88);
      *(_QWORD *)&v336 = *(_QWORD *)(v3 + 80);
      if (v95)
      {
        v13 = *(_QWORD *)(v3 + 88);
        v97 = v337 >> 11;
        if (*(_QWORD *)(v3 + 80) < (int64_t)(v337 >> 11))
          goto LABEL_397;
        if (*(_WORD *)(v95 + 16))
        {
          v15 = *(unsigned __int8 *)(v95 + 18);
          if (*(_BYTE *)(v95 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v2 = v337 >> 11;
            v98 = v95;
            while (1)
            {
              v101 = *(unsigned __int16 *)(v98 + 16);
              if (!*(_WORD *)(v98 + 16))
                goto LABEL_422;
              v102 = *(_QWORD *)(v98 + 40);
              v45 = __OFSUB__(v2, v102);
              v103 = v2 - v102;
              if (v45)
                break;
              if (v103 <= 0)
              {
                v54 = 0;
              }
              else
              {
                if ((_DWORD)v101 == 1)
                  goto LABEL_424;
                v104 = *(_QWORD *)(v98 + 64);
                v2 = v103 - v104;
                if (__OFSUB__(v103, v104))
                  goto LABEL_375;
                if (v2 >= 1)
                {
                  if ((_DWORD)v101 == 2)
                    goto LABEL_424;
                  v105 = (_QWORD *)(v98 + 88);
                  v54 = 2;
                  while (v101 != v54)
                  {
                    v106 = v2 - *v105;
                    if (__OFSUB__(v2, *v105))
                      goto LABEL_345;
                    if (v106 < 1)
                      goto LABEL_117;
                    ++v54;
                    v105 += 3;
                    v2 = v106;
                    if (v101 == v54)
                      goto LABEL_424;
                  }
                  __break(1u);
LABEL_345:
                  __break(1u);
LABEL_346:
                  v324 = *(_QWORD *)(v2 + 48);
                  v45 = __OFSUB__(v54, v324);
                  v43 = v54 - v324;
                  if (v45)
                    goto LABEL_420;
                  if (__OFADD__(v43, 1))
                    goto LABEL_421;
                  if (v43 + 1 >= 1)
                  {
                    if ((_DWORD)v98 != 2)
                    {
                      v325 = (_QWORD *)(v2 + 72);
                      v46 = 2;
                      while (v98 != v46)
                      {
                        v216 = v43 - *v325;
                        if (__OFSUB__(v43, *v325))
                          goto LABEL_413;
                        if (__OFADD__(v216, 1))
                          goto LABEL_414;
                        if (v216 + 1 < 1)
                          goto LABEL_369;
                        ++v46;
                        v325 += 3;
                        v43 = v216;
                        if (v98 == v46)
                          goto LABEL_360;
                      }
                      goto LABEL_412;
                    }
                    v216 = v43;
                    goto LABEL_360;
                  }
LABEL_353:
                  v98 = 1;
                  v216 = v54;
                  goto LABEL_361;
                }
                v2 = v103;
                v54 = 1;
              }
LABEL_117:
              v99 = (4 * *(_BYTE *)(v98 + 18) + 8) & 0x3C;
              v15 = ((-15 << v99) - 1) & v15 | (v54 << v99);
              v100 = *(_QWORD *)(v98 + 24 + 24 * v54);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v98 = v100;
              if (!*(_BYTE *)(v100 + 18))
                goto LABEL_142;
            }
LABEL_371:
            __break(1u);
LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
LABEL_375:
            __break(1u);
LABEL_376:
            __break(1u);
LABEL_377:
            __break(1u);
LABEL_378:
            __break(1u);
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
            goto LABEL_381;
          }
          result = swift_unknownObjectRetain_n();
          v2 = v337 >> 11;
          v100 = v95;
LABEL_142:
          v116 = *(unsigned __int16 *)(v100 + 16);
          if (!*(_WORD *)(v100 + 16))
            goto LABEL_425;
          v117 = *(_QWORD *)(v100 + 24);
          v45 = __OFSUB__(v2, v117);
          v118 = v2 - v117;
          if (v45)
            goto LABEL_408;
          v115 = v343;
          if (v118 <= 0)
          {
            v121 = 0;
          }
          else
          {
            if ((_DWORD)v116 == 1)
              goto LABEL_427;
            v119 = *(_QWORD *)(v100 + 48);
            v2 = v118 - v119;
            if (__OFSUB__(v118, v119))
              goto LABEL_410;
            if (v2 >= 1)
            {
              if ((_DWORD)v116 == 2)
                goto LABEL_427;
              v120 = (_QWORD *)(v100 + 72);
              v121 = 2;
              while (v116 != v121)
              {
                v122 = v2 - *v120;
                if (__OFSUB__(v2, *v120))
                  goto LABEL_374;
                if (v122 < 1)
                  goto LABEL_157;
                ++v121;
                v120 += 3;
                v2 = v122;
                if (v116 == v121)
                  goto LABEL_427;
              }
              goto LABEL_373;
            }
            v2 = v118;
            v121 = 1;
          }
LABEL_157:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v111 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v121 << 8);
LABEL_138:
          swift_unknownObjectRetain();
          v110 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v96, v111, v100, v95, v10);
          result = swift_unknownObjectRelease_n();
          v114 = v97 - v2;
          if (__OFSUB__(v97, v2))
            goto LABEL_394;
          goto LABEL_159;
        }
      }
      else
      {
        v97 = v337 >> 11;
        if (v337 >= 0x800)
          goto LABEL_407;
      }
      swift_unknownObjectRetain_n();
      v111 = specialized Rope._endPath.getter(v95);
      swift_unknownObjectRelease();
      v100 = 0;
      v2 = 0;
      v115 = v343;
      if (v95)
        goto LABEL_138;
      v110 = 0;
      v114 = v97;
LABEL_159:
      *(_QWORD *)&v371 = v96;
      *((_QWORD *)&v371 + 1) = v111;
      *(_QWORD *)&v372 = v100;
      *((_QWORD *)&v372 + 1) = v110;
      *(_QWORD *)&v373 = v114;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v371, 0, v97, (_QWORD *)v3, (uint64_t *)&v353, v341, v115, (uint64_t)&v359);
      swift_bridgeObjectRelease();
      swift_release();
      v79 = v373;
      v123 = *(_QWORD *)(v3 + 64);
      v124 = *(_QWORD *)(v3 + 72);
      v125 = *(_QWORD *)(v3 + 80);
      v126 = *(_QWORD *)(v3 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v349 & 1, v123, v124, v125, v126, (uint64_t *)&v439);
      v127 = v441;
      swift_unknownObjectRelease();
    }
    while (v127 < v79 && *(_QWORD *)(v353 + 16));
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v371 = v351;
  v128 = *(_QWORD *)(v3 + 64);
  v129 = *(_QWORD *)(v3 + 72);
  v130 = *(_QWORD *)(v3 + 80);
  v131 = *(_QWORD *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v351 - 1, v349 & 1, v128, v129, v130, v131, (uint64_t *)&v439);
  v342 = v440;
  v344 = v439;
  v132 = v441;
  swift_unknownObjectRelease();
  v452[0] = v344;
  v452[1] = v342;
  v453 = v132;
  v133 = *(_QWORD *)(v3 + 64);
  v134 = *(_QWORD *)(v3 + 72);
  v135 = *(_QWORD *)(v3 + 80);
  v136 = *(_QWORD *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v452, v133, v134, v135, v136);
  v138 = v137;
  v2 = v139;
  swift_unknownObjectRelease();
  v10 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v138);
  v141 = v140;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v142 = 0;
  *(_QWORD *)&v353 = result;
  v143 = 1 << *(_BYTE *)(v10 + 32);
  v46 = -1;
  if (v143 < 64)
    v46 = ~(-1 << v143);
  v13 = v10 + 64;
  v144 = v46 & *(_QWORD *)(v10 + 64);
  v145 = (unint64_t)(v143 + 63) >> 6;
  while (1)
  {
    if (v144)
    {
      v146 = __clz(__rbit64(v144));
      v144 &= v144 - 1;
      v147 = v146 | (v142 << 6);
      goto LABEL_165;
    }
    v43 = v142 + 1;
    if (__OFADD__(v142, 1))
      goto LABEL_368;
    if (v43 >= v145)
      break;
    v150 = *(_QWORD *)(v13 + 8 * v43);
    ++v142;
    if (!v150)
    {
      v142 = v43 + 1;
      if (v43 + 1 >= v145)
        break;
      v150 = *(_QWORD *)(v13 + 8 * v142);
      if (!v150)
      {
        v142 = v43 + 2;
        if (v43 + 2 >= v145)
          break;
        v150 = *(_QWORD *)(v13 + 8 * v142);
        if (!v150)
        {
          v142 = v43 + 3;
          if (v43 + 3 >= v145)
            break;
          v150 = *(_QWORD *)(v13 + 8 * v142);
          if (!v150)
          {
            v142 = v43 + 4;
            if (v43 + 4 >= v145)
              break;
            v150 = *(_QWORD *)(v13 + 8 * v142);
            if (!v150)
            {
              v151 = v43 + 5;
              if (v151 >= v145)
                break;
              v150 = *(_QWORD *)(v13 + 8 * v151);
              if (!v150)
              {
                while (1)
                {
                  v142 = v151 + 1;
                  if (__OFADD__(v151, 1))
                    break;
                  if (v142 >= v145)
                    goto LABEL_185;
                  v150 = *(_QWORD *)(v13 + 8 * v142);
                  ++v151;
                  if (v150)
                    goto LABEL_184;
                }
LABEL_406:
                __break(1u);
LABEL_407:
                __break(1u);
LABEL_408:
                __break(1u);
LABEL_409:
                __break(1u);
LABEL_410:
                __break(1u);
LABEL_411:
                __break(1u);
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
LABEL_414:
                __break(1u);
LABEL_415:
                __break(1u);
LABEL_416:
                __break(1u);
LABEL_417:
                __break(1u);
LABEL_418:
                __break(1u);
LABEL_419:
                __break(1u);
LABEL_420:
                __break(1u);
LABEL_421:
                __break(1u);
LABEL_422:
                if (!v2)
                  __break(1u);
LABEL_424:
                __break(1u);
LABEL_425:
                if (!v2)
                  __break(1u);
LABEL_427:
                __break(1u);
                return result;
              }
              v142 = v151;
            }
          }
        }
      }
    }
LABEL_184:
    v144 = (v150 - 1) & v150;
    v147 = __clz(__rbit64(v150)) + (v142 << 6);
LABEL_165:
    v148 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v147);
    v2 = *v148;
    v149 = v148[1];
    swift_bridgeObjectRetain();
    v15 = (uint64_t)&v353;
    specialized Set._Variant.insert(_:)((unint64_t *)&v439, v2, v149);
    result = swift_bridgeObjectRelease();
  }
LABEL_185:
  swift_release();
  v152 = *(_OWORD *)(v3 + 32);
  v449 = *(_OWORD *)(v3 + 16);
  v450 = v152;
  v451 = *(_OWORD *)(v3 + 48);
  BigString.utf8.getter();
  v153 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v382);
  if (v153 < v351)
    goto LABEL_398;
  v2 = *(_QWORD *)(v3 + 64);
  v154 = *(_QWORD *)(v3 + 72);
  v155 = *(_QWORD *)(v3 + 80);
  v156 = *(_QWORD *)(v3 + 88);
  swift_unknownObjectRetain();
  swift_retain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v351, v349 & 1, v2, v154, v155, v156, (uint64_t *)&v439);
  v349 = v439;
  v158 = *((_QWORD *)&v440 + 1);
  v157 = v440;
  v159 = v441;
  swift_unknownObjectRelease();
  v439 = v349;
  v440 = __PAIR128__(v158, v157);
  v32 = v351;
  *(_QWORD *)&v441 = v159;
  *(_QWORD *)&v349 = &v386;
  if (v351 != v153)
    goto LABEL_190;
LABEL_191:
  AttributedString._InternalRunsSlice.startIndex.getter((_QWORD *)v3, v32, v383);
  for (i = &v384; v159 < *i && *(_QWORD *)(v353 + 16); i = &v386)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v439, v32, v153, (_QWORD *)v3, (uint64_t *)&v353, v10, v141, (uint64_t)&v371);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((_QWORD *)v3, v32, v153, (uint64_t *)&v439);
    v159 = v441;
    if (v32 == v153)
      goto LABEL_191;
LABEL_190:
    v2 = *(_QWORD *)(v3 + 64);
    v160 = *(_QWORD *)(v3 + 72);
    v161 = *(_QWORD *)(v3 + 80);
    v162 = *(_QWORD *)(v3 + 88);
    v163 = swift_unknownObjectRetain();
    v164 = v161;
    v32 = v351;
    AttributedString._InternalRuns.endIndex.getter(v163, v160, v164, v162, v385);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  v33 = v371;
  v329 = v359;
  if ((uint64_t)v371 < v359)
    goto LABEL_399;
  v5 = v340;
  v31 = v337 >> 11;
LABEL_195:
  v166 = *(_OWORD *)(v3 + 32);
  v446 = *(_OWORD *)(v3 + 16);
  v447 = v166;
  v448 = *(_OWORD *)(v3 + 48);
  BigString.utf8.getter();
  v167 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v387);
  v168 = (_OWORD *)*v5;
  v169 = *(_OWORD *)(*v5 + 32);
  v371 = *(_OWORD *)(*v5 + 16);
  v372 = v169;
  v170 = *(_OWORD *)(v5 + 1);
  v373 = v168[3];
  v374 = v170;
  v171 = *(_OWORD *)(v5 + 5);
  v375 = *(_OWORD *)(v5 + 3);
  v376 = v171;
  v377 = *(_OWORD *)(v5 + 7);
  swift_unknownObjectRetain();
  BigString.init()();
  v172 = v389;
  v168[1] = v388;
  v168[2] = v172;
  v168[3] = v390;
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<Character>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x1E0DEC778]);
  BigSubstring.replaceSubrange<A>(_:with:)();
  v2 = *v5;
  v443 = v375;
  v444 = v376;
  v445 = v377;
  v439 = v371;
  v440 = v372;
  v442 = v374;
  v441 = v373;
  v463 = v377;
  v462 = v376;
  v460 = v374;
  v461 = v375;
  BigSubstring.base.getter();
  v173 = v392;
  *(_OWORD *)(v2 + 16) = v391;
  *(_OWORD *)(v2 + 32) = v173;
  *(_OWORD *)(v2 + 48) = v393;
  swift_unknownObjectRelease();
  v174 = v461;
  *(_OWORD *)(v5 + 1) = v460;
  *(_OWORD *)(v5 + 3) = v174;
  v175 = v463;
  *(_OWORD *)(v5 + 5) = v462;
  *(_OWORD *)(v5 + 7) = v175;
  v176 = *v5;
  v177 = *(_OWORD *)(*v5 + 32);
  v436 = *(_OWORD *)(*v5 + 16);
  v437 = v177;
  v438 = *(_OWORD *)(v176 + 48);
  BigString.utf8.getter();
  v178 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v394);
  v179 = v178 - v167;
  if (__OFSUB__(v178, v167))
    goto LABEL_387;
  v180 = v339 + v179;
  if (__OFADD__(v339, v179))
  {
LABEL_388:
    __break(1u);
    goto LABEL_389;
  }
  swift_bridgeObjectRetain();
  v2 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v31, v32, v180, v330, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v181 = *v5;
  v182 = *(_OWORD *)(*v5 + 32);
  v433 = *(_OWORD *)(*v5 + 16);
  v434 = v182;
  v435 = *(_OWORD *)(v181 + 48);
  BigString.utf8.getter();
  v183 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v395);
  v184 = v183 - v167;
  if (__OFSUB__(v183, v167))
  {
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  v45 = __OFADD__(v33, v184);
  v185 = v33 + v184;
  if (v45)
  {
LABEL_390:
    __break(1u);
    goto LABEL_391;
  }
  if (v185 < v329)
  {
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
    goto LABEL_395;
  }
  v186 = *(_QWORD *)(v181 + 80);
  if (!*(_QWORD *)(v181 + 64))
  {
    v226 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v226);
    swift_unknownObjectRelease();
    goto LABEL_237;
  }
  v328 = v185;
  v187 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v187);
  swift_unknownObjectRelease_n();
  if (!v186)
    goto LABEL_237;
  v335 = (_QWORD *)v181;
  v188 = (__int128 *)(v181 + 16);
  v189 = *(_OWORD *)(v181 + 32);
  v430 = *(_OWORD *)(v181 + 16);
  v431 = v189;
  v432 = *(_OWORD *)(v181 + 48);
  BigString.utf8.getter();
  BigString.startIndex.getter();
  v190 = BigString.UTF8View.index(_:offsetBy:)();
  v2 = v191;
  v193 = v192;
  v195 = v194;
  outlined release of Locale((uint64_t)v396);
  v196 = *(_OWORD *)(v181 + 32);
  v427 = *(_OWORD *)(v181 + 16);
  v428 = v196;
  v429 = *(_OWORD *)(v181 + 48);
  result = BigString.utf8.getter();
  if (__OFSUB__(v328, v329))
  {
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }
  v197 = BigString.UTF8View.index(_:offsetBy:)();
  v199 = v198;
  v201 = v200;
  v203 = v202;
  outlined release of Locale((uint64_t)v397);
  specialized Range.init(uncheckedBounds:)(v190, v2, v193, v195, v197, v199, v201, v203, v420);
  *(_QWORD *)&v419[0] = MEMORY[0x1E0DEE9E0];
  v204 = v188[1];
  v424 = *v188;
  v425 = v204;
  v426 = v188[2];
  BigString.unicodeScalars.getter();
  v327 = v420[0];
  v205 = BigString.UnicodeScalarView.index(roundingDown:)();
  v207 = v206;
  v2 = v208;
  v210 = v209;
  outlined release of Locale((uint64_t)v398);
  v211 = v188[1];
  v421 = *v188;
  v422 = v211;
  *(_QWORD *)&v336 = v188;
  v423 = v188[2];
  BigString.unicodeScalars.getter();
  v326 = v420[4];
  v212 = BigString.UnicodeScalarView.index(roundingUp:)();
  result = outlined release of Locale((uint64_t)v399);
  *(_QWORD *)&v464 = v205;
  *((_QWORD *)&v464 + 1) = v207;
  *(_QWORD *)&v465 = v2;
  *((_QWORD *)&v465 + 1) = v210;
  v13 = v205 >> 11;
  v3 = v212 >> 11;
  if (v212 >> 11 < v205 >> 11)
  {
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
    goto LABEL_405;
  }
  v213 = v335;
  v15 = v335[8];
  if (v15)
    v214 = v335[10];
  else
    v214 = 0;
  if (v214 < v13)
    goto LABEL_404;
  v215 = v335[9];
  v10 = v335[11];
  if (!v15 || v13 >= v335[10] || !*(_WORD *)(v15 + 16))
  {
    swift_retain_n();
    v227 = swift_unknownObjectRetain_n();
    v228 = specialized Rope._endPath.getter(v227);
    swift_unknownObjectRelease();
    v2 = 0;
    v216 = 0;
    if (!v15)
      goto LABEL_362;
    goto LABEL_239;
  }
  *(_QWORD *)&v349 = v335[9];
  v351 = v3;
  v3 = *(unsigned __int8 *)(v15 + 18);
  if (*(_BYTE *)(v15 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain_n();
    v216 = v13;
    v217 = v15;
    while (1)
    {
      v219 = *(unsigned __int16 *)(v217 + 16);
      if (!*(_WORD *)(v217 + 16))
        goto LABEL_214;
      v220 = *(_QWORD *)(v217 + 40);
      v221 = v216 - v220;
      if (__OFSUB__(v216, v220))
        goto LABEL_384;
      if (__OFADD__(v221, 1))
        goto LABEL_385;
      if (v221 + 1 <= 0)
      {
        v219 = 0;
      }
      else
      {
        if ((_DWORD)v219 == 1)
        {
          v216 -= v220;
          goto LABEL_214;
        }
        v222 = *(_QWORD *)(v217 + 64);
        v45 = __OFSUB__(v221, v222);
        v223 = v221 - v222;
        if (v45)
          goto LABEL_400;
        if (__OFADD__(v223, 1))
          goto LABEL_401;
        if (v223 + 1 < 1)
        {
          v219 = 1;
          v216 = v221;
        }
        else
        {
          if ((_DWORD)v219 == 2)
          {
            v216 = v223;
LABEL_214:
            if (v216)
              goto LABEL_383;
            goto LABEL_215;
          }
          v224 = (_QWORD *)(v217 + 88);
          v225 = 2;
          while (1)
          {
            if (v219 == v225)
              goto LABEL_376;
            v216 = v223 - *v224;
            if (__OFSUB__(v223, *v224))
              goto LABEL_377;
            if (__OFADD__(v216, 1))
              goto LABEL_378;
            if (v216 + 1 < 1)
              break;
            ++v225;
            v224 += 3;
            v223 = v216;
            if (v219 == v225)
              goto LABEL_214;
          }
          v219 = v225;
          v216 = v223;
        }
      }
LABEL_215:
      v218 = (4 * *(_BYTE *)(v217 + 18) + 8) & 0x3C;
      v3 = ((-15 << v218) - 1) & v3 | (v219 << v218);
      v2 = *(_QWORD *)(v217 + 24 + 24 * v219);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v217 = v2;
      if (!*(_BYTE *)(v2 + 18))
        goto LABEL_324;
    }
  }
  swift_unknownObjectRetain_n();
  result = swift_retain_n();
  v216 = v13;
  v2 = v15;
LABEL_324:
  v98 = *(unsigned __int16 *)(v2 + 16);
  if (*(_WORD *)(v2 + 16))
  {
    v308 = *(_QWORD *)(v2 + 24);
    v54 = v216 - v308;
    if (__OFSUB__(v216, v308))
      goto LABEL_416;
    if (__OFADD__(v54, 1))
      goto LABEL_417;
    if (v54 + 1 <= 0)
    {
      v98 = 0;
      goto LABEL_361;
    }
    if ((_DWORD)v98 != 1)
      goto LABEL_346;
    v216 -= v308;
  }
LABEL_360:
  if (v216)
    goto LABEL_415;
LABEL_361:
  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v228 = v3 & 0xFFFFFFFFFFFFF0FFLL | (v98 << 8);
    v213 = v335;
    v3 = v351;
    v215 = v349;
    if (!v15)
      break;
LABEL_239:
    swift_unknownObjectRetain();
    v229 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v228, v2, v15, v215);
    swift_release();
    swift_unknownObjectRelease_n();
    v43 = v13 - v216;
    if (!__OFSUB__(v13, v216))
      goto LABEL_240;
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    v98 = v46;
    v216 = v43;
  }
LABEL_362:
  swift_release();
  v229 = 0;
  v43 = v13 - v216;
  if (__OFSUB__(v13, v216))
    goto LABEL_364;
LABEL_240:
  *(_QWORD *)&v366 = v213;
  *((_QWORD *)&v366 + 1) = v13;
  *(_QWORD *)&v367 = v3;
  *((_QWORD *)&v367 + 1) = v10;
  *(_QWORD *)&v368 = v228;
  *((_QWORD *)&v368 + 1) = v2;
  v369 = v229;
  v370 = v43;
  specialized IndexingIterator.next()();
  if (!v230)
  {
    v264 = MEMORY[0x1E0DEE9E0];
    goto LABEL_283;
  }
  v231 = v230;
  v232 = (__int128 *)v336;
  while (1)
  {
    v235 = v232[1];
    v409 = *v232;
    v410 = v235;
    v411 = v232[2];
    BigString.utf8.getter();
    v236 = v464;
    v237 = BigString.UTF8View.index(_:offsetBy:)();
    v239 = v238;
    v241 = v240;
    v243 = v242;
    outlined release of Locale((uint64_t)v400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v244 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v231);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v334 = v241;
    v332 = v239;
    v333 = v243;
    v331 = v237;
    if ((v244 & 1) != 0)
    {
      v338 = v237 >> 10;
      if (v237 >> 10 > v236 >> 10)
        break;
    }
LABEL_242:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v464, v331, v332, v334, v333);
    specialized IndexingIterator.next()();
    v2 = v233;
    v231 = v234;
    if (!v234)
      goto LABEL_282;
  }
  v245 = v236;
  v345 = v231 + 64;
  while (2)
  {
    v246 = v232[1];
    v406 = *v232;
    v407 = v246;
    v408 = v232[2];
    BigString.unicodeScalars.getter();
    v350 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v401);
    v247 = v232[1];
    v403 = *v232;
    v404 = v247;
    v405 = v232[2];
    BigString.unicodeScalars.getter();
    v346 = v245;
    v348 = BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v402);
    v248 = 1 << *(_BYTE *)(v231 + 32);
    if (v248 < 64)
      v249 = ~(-1 << v248);
    else
      v249 = -1;
    v250 = v249 & *(_QWORD *)(v231 + 64);
    v251 = (unint64_t)(v248 + 63) >> 6;
    swift_bridgeObjectRetain();
    v2 = 0;
LABEL_252:
    if (v250)
    {
      v252 = __clz(__rbit64(v250));
      v250 &= v250 - 1;
      v253 = v252 | (v2 << 6);
      goto LABEL_254;
    }
    v257 = v2 + 1;
    if (!__OFADD__(v2, 1))
    {
      if (v257 < v251)
      {
        v258 = *(_QWORD *)(v345 + 8 * v257);
        if (v258)
        {
LABEL_258:
          v250 = (v258 - 1) & v258;
          v253 = __clz(__rbit64(v258)) + (v257 << 6);
          v2 = v257;
LABEL_254:
          v254 = *(_QWORD *)(v231 + 56);
          v255 = (_QWORD *)(*(_QWORD *)(v231 + 48) + 16 * v253);
          v256 = v255[1];
          *(_QWORD *)&v353 = *v255;
          *((_QWORD *)&v353 + 1) = v256;
          outlined init with copy of AttributedString._AttributeValue(v254 + 72 * v253, (uint64_t)&v354);
          swift_bridgeObjectRetain();
LABEL_264:
          outlined init with take of LocalePreferences?((uint64_t)&v353, (uint64_t)&v359, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
          v259 = v360;
          if (!v360)
          {
            swift_release();
            v245 = v348;
            v232 = (__int128 *)v336;
            if (v338 <= v348 >> 10)
              goto LABEL_242;
            continue;
          }
          v260 = v359;
          v261 = v362;
          v262 = v363;
          outlined copy of AttributedString.AttributeRunBoundaries?(v362, v363);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v361);
          if (v262 != 1)
          {
            *(_QWORD *)&v353 = v261;
            *((_QWORD *)&v353 + 1) = v262;
            v263 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v261, v262);
            if ((v263 & 0x100000000) == 0 && v350 != (_DWORD)v263)
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v260, v259, v346, v348, (uint64_t *)v419);
          }
          swift_bridgeObjectRelease();
          goto LABEL_252;
        }
        if (v2 + 2 >= v251)
        {
          ++v2;
        }
        else
        {
          v258 = *(_QWORD *)(v345 + 8 * (v2 + 2));
          if (v258)
          {
            v257 = v2 + 2;
            goto LABEL_258;
          }
          if (v2 + 3 >= v251)
          {
            v2 += 2;
          }
          else
          {
            v258 = *(_QWORD *)(v345 + 8 * (v2 + 3));
            if (v258)
            {
              v257 = v2 + 3;
              goto LABEL_258;
            }
            v257 = v2 + 4;
            if (v2 + 4 >= v251)
            {
              v2 += 3;
            }
            else
            {
              v258 = *(_QWORD *)(v345 + 8 * v257);
              if (v258)
                goto LABEL_258;
              while (v251 - 5 != v2)
              {
                v258 = *(_QWORD *)(v231 + 104 + 8 * v2++);
                if (v258)
                {
                  v257 = v2 + 4;
                  goto LABEL_258;
                }
              }
              v2 = v251 - 1;
            }
          }
        }
      }
      v250 = 0;
      v358 = 0;
      v356 = 0u;
      v357 = 0u;
      v354 = 0u;
      v355 = 0u;
      v353 = 0u;
      goto LABEL_264;
    }
    break;
  }
  __break(1u);
LABEL_282:
  v264 = *(_QWORD *)&v419[0];
LABEL_283:
  result = swift_release();
  v265 = 0;
  v266 = v264 + 64;
  v267 = 1 << *(_BYTE *)(v264 + 32);
  v268 = -1;
  if (v267 < 64)
    v268 = ~(-1 << v267);
  v269 = v268 & *(_QWORD *)(v264 + 64);
  v352 = (unint64_t)(v267 + 63) >> 6;
  while (2)
  {
    if (v269)
    {
      v270 = __clz(__rbit64(v269));
      v269 &= v269 - 1;
      v271 = v270 | (v265 << 6);
LABEL_299:
      v274 = (unint64_t *)(*(_QWORD *)(v264 + 48) + 16 * v271);
      v276 = *v274;
      v275 = v274[1];
      v2 = *(_QWORD *)(*(_QWORD *)(v264 + 56) + 8 * v271);
      result = specialized Array.count.getter(v2);
      if (result)
      {
        v277 = result;
        if (result < 1)
        {
          __break(1u);
          goto LABEL_371;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v278 = (uint64_t *)(v2 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v276, v275, *(v278 - 1), *v278, 0);
          v278 += 2;
          --v277;
        }
        while (v277);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      continue;
    }
    break;
  }
  v45 = __OFADD__(v265++, 1);
  if (v45)
    goto LABEL_372;
  if (v265 < v352)
  {
    v272 = *(_QWORD *)(v266 + 8 * v265);
    if (!v272)
    {
      v273 = v265 + 1;
      if (v265 + 1 >= v352)
        goto LABEL_308;
      v272 = *(_QWORD *)(v266 + 8 * v273);
      if (!v272)
      {
        v273 = v265 + 2;
        if (v265 + 2 >= v352)
          goto LABEL_308;
        v272 = *(_QWORD *)(v266 + 8 * v273);
        if (!v272)
        {
          v273 = v265 + 3;
          if (v265 + 3 >= v352)
            goto LABEL_308;
          v272 = *(_QWORD *)(v266 + 8 * v273);
          if (!v272)
          {
            while (1)
            {
              v265 = v273 + 1;
              if (__OFADD__(v273, 1))
                break;
              if (v265 >= v352)
                goto LABEL_308;
              v272 = *(_QWORD *)(v266 + 8 * v265);
              ++v273;
              if (v272)
                goto LABEL_298;
            }
LABEL_386:
            __break(1u);
LABEL_387:
            __break(1u);
            goto LABEL_388;
          }
        }
      }
      v265 = v273;
    }
LABEL_298:
    v269 = (v272 - 1) & v272;
    v271 = __clz(__rbit64(v272)) + (v265 << 6);
    goto LABEL_299;
  }
LABEL_308:
  swift_release();
  v279 = v327 >> 10;
  if (!specialized Range.isEmpty.getter())
  {
    v294 = *(_OWORD *)(v336 + 16);
    v419[0] = *(_OWORD *)v336;
    v419[1] = v294;
    v419[2] = *(_OWORD *)(v336 + 32);
    if (v279 <= (unint64_t)BigString.startIndex.getter() >> 10)
      goto LABEL_318;
    result = v329 - 1;
    if (__OFSUB__(v329, 1))
      goto LABEL_418;
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v329) & 1) != 0)
    {
      v295 = *(_OWORD *)v336;
      v296 = *(_OWORD *)(v336 + 16);
      v418 = *(_OWORD *)(v336 + 32);
      v417[1] = v296;
      v417[0] = v295;
      v297 = *(_OWORD *)v336;
      v465 = *(_OWORD *)(v336 + 16);
      v466 = v418;
      v464 = v297;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v464, (uint64_t)v467);
      outlined retain of Locale((uint64_t)v467);
      v298 = BigString.index(before:)();
      v300 = v299;
      v302 = v301;
      v304 = v303;
      outlined release of Locale((uint64_t)v417);
      AttributedString.Guts._paragraphExtending(from:)(v298, v300, v302, v304, (uint64_t)&v353);
      v291 = Range<>._utf8OffsetRange.getter();
      v293 = v305;
      v306 = 0;
    }
    else
    {
LABEL_318:
      v291 = 0;
      v293 = 0;
      v306 = 1;
    }
    v307 = *(_OWORD *)(v336 + 16);
    v414 = *(_OWORD *)v336;
    v415 = v307;
    v416 = *(_OWORD *)(v336 + 32);
    if (v326 >> 10 >= (unint64_t)BigString.endIndex.getter() >> 10)
      goto LABEL_334;
    if ((v306 & 1) != 0)
    {
      if (v328 < 1)
        goto LABEL_237;
    }
    else if (v293 >= v328)
    {
LABEL_333:
      v306 = 0;
      goto LABEL_334;
    }
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v328 - 1, v328) & 1) != 0)
    {
      v309 = *(_OWORD *)v336;
      v310 = *(_OWORD *)(v336 + 16);
      v413 = *(_OWORD *)(v336 + 32);
      v412[1] = v310;
      v412[0] = v309;
      v311 = *(_OWORD *)v336;
      v367 = *(_OWORD *)(v336 + 16);
      v368 = v413;
      v366 = v311;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v366, (uint64_t)v468);
      outlined retain of Locale((uint64_t)v468);
      v312 = BigString.index(before:)();
      v314 = v313;
      v316 = v315;
      v318 = v317;
      outlined release of Locale((uint64_t)v412);
      AttributedString.Guts._paragraphExtending(from:)(v312, v314, v316, v318, (uint64_t)&v359);
      v319 = Range<>._utf8OffsetRange.getter();
      v321 = v320;
      v322 = 1;
      goto LABEL_335;
    }
LABEL_334:
    v319 = 0;
    v321 = 0;
    v322 = 0;
LABEL_335:
    if ((v306 & 1) == 0 && v329 < v293)
    {
      v364 = 0;
      v365 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v364, v291, v329, v293);
    }
    if (v328 < v321)
      v323 = v322;
    else
      v323 = 0;
    if (v323 == 1)
    {
      v364 = 0;
      v365 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v364, v319, v328, v321);
    }
    goto LABEL_237;
  }
  v280 = *(_OWORD *)(v336 + 16);
  v366 = *(_OWORD *)v336;
  v367 = v280;
  v368 = *(_OWORD *)(v336 + 32);
  if (v279 > (unint64_t)BigString.startIndex.getter() >> 10
    && v279 < (unint64_t)BigString.endIndex.getter() >> 10)
  {
    result = v329 - 1;
    if (__OFSUB__(v329, 1))
      goto LABEL_419;
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v329) & 1) != 0)
    {
      v281 = *(_OWORD *)v336;
      v282 = *(_OWORD *)(v336 + 32);
      v465 = *(_OWORD *)(v336 + 16);
      v466 = v282;
      v464 = v281;
      v283 = *(_OWORD *)v336;
      v354 = *(_OWORD *)(v336 + 16);
      v355 = v282;
      v353 = v283;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v353, (uint64_t)v419);
      outlined retain of Locale((uint64_t)v419);
      v284 = BigString.index(before:)();
      v286 = v285;
      v288 = v287;
      v290 = v289;
      outlined release of Locale((uint64_t)&v464);
      AttributedString.Guts._paragraphExtending(from:)(v284, v286, v288, v290, (uint64_t)&v359);
      v291 = Range<>._utf8OffsetRange.getter();
      v293 = v292;
      goto LABEL_333;
    }
  }
LABEL_237:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[3];

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = (_QWORD *)*v1;
    v5 = *(_OWORD *)(*v1 + 16);
    v6 = *(_OWORD *)(*v1 + 48);
    v15[1] = *(_OWORD *)(*v1 + 32);
    v15[2] = v6;
    v15[0] = v5;
    v7 = v4[8];
    v8 = v4[9];
    v9 = v4[10];
    v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v15);
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)(v15, v7, v8, v9, v10);
    swift_release();
  }
  v11 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(a1);
  v13 = v12;
  MEMORY[0x1E0C80A78](v11);
  AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(a1, v11, v13, (void (*)(__int128 *, _QWORD *))partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int64_t v4;
  uint64_t *v5;
  unint64_t *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  unint64_t v20;
  int64_t v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int Enum;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  int64_t v155;
  __int128 v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *i;
  __int128 v171;
  uint64_t v172;
  _OWORD *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _OWORD *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  int64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  __int128 *v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  int64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 *v235;
  uint64_t v236;
  __int128 v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  unint64_t v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  int64_t v253;
  int64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  int64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  int64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int64_t v295;
  int64_t v296;
  int64_t v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int64_t v309;
  char v310;
  __int128 v311;
  uint64_t v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int64_t v323;
  int64_t v324;
  int64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  _QWORD *v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int128 v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v344;
  __int128 v345;
  int64_t *v346;
  uint64_t v347;
  uint64_t v348;
  __int128 v349;
  unint64_t v350;
  unint64_t v351;
  int v353;
  __int128 v354;
  uint64_t v355;
  int64_t v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  int64_t v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  char v382[48];
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  char v386[48];
  unint64_t v387[4];
  uint64_t v388;
  uint64_t v389[4];
  uint64_t v390;
  char v391[48];
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  char v398[48];
  char v399[48];
  char v400[48];
  char v401[48];
  char v402[48];
  char v403[48];
  char v404[48];
  char v405[48];
  char v406[48];
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  _OWORD v416[2];
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  _OWORD v421[2];
  __int128 v422;
  _OWORD v423[3];
  _QWORD v424[5];
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  _OWORD v431[12];
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  _OWORD v445[2];
  uint64_t v446;
  _OWORD v447[3];
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  _BYTE v458[40];
  _BYTE v459[56];

  v5 = v3;
  v7 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = (_QWORD *)*v3;
    v9 = *(_OWORD *)(*v3 + 16);
    v10 = *(_OWORD *)(*v3 + 32);
    v450 = *(_OWORD *)(*v3 + 48);
    v449 = v10;
    v448 = v9;
    v11 = v8[8];
    v12 = v8[9];
    v13 = v8[10];
    v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    v15 = swift_allocObject();
    v16 = BigString.isEmpty.getter();
    if (v11)
    {
      swift_unknownObjectRetain_n();
      outlined retain of Locale((uint64_t)&v448);
      swift_unknownObjectRelease();
    }
    else
    {
      outlined retain of Locale((uint64_t)&v448);
    }
    swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    if (v11)
    {
      swift_unknownObjectRelease();
      if ((((v13 == 0) ^ v16) & 1) == 0)
      {
LABEL_7:
        v17 = v449;
        *(_OWORD *)(v15 + 16) = v448;
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = v450;
        *(_QWORD *)(v15 + 64) = v11;
        *(_QWORD *)(v15 + 72) = v12;
        *(_QWORD *)(v15 + 80) = v13;
        *(_QWORD *)(v15 + 88) = v14;
        *v5 = v15;
        swift_release();
        v7 = a1;
        goto LABEL_8;
      }
    }
    else
    {
      swift_unknownObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_40;
  }
LABEL_8:
  v342 = a3;
  v346 = v5;
  v4 = *v5;
  v18 = *(_OWORD *)(*v5 + 32);
  v447[0] = *(_OWORD *)(*v5 + 16);
  v447[1] = v18;
  v447[2] = *(_OWORD *)(v4 + 48);
  v16 = (uint64_t)v447;
  result = BigString.isEmpty.getter();
  a3 = MEMORY[0x1E0DEE9E0];
  if ((result & 1) != 0)
    goto LABEL_25;
  v20 = *v7;
  if (*v7 >= 0x800 && (v7[4] ^ v20) <= 0x3FF)
  {
    BigString.utf8.getter();
    v20 = BigString.UTF8View.index(before:)();
    result = outlined release of Locale((uint64_t)v382);
  }
  v16 = *(_QWORD *)(v4 + 64);
  a3 = *(_QWORD *)(v4 + 80);
  if (v16)
    v21 = *(_QWORD *)(v4 + 80);
  else
    v21 = 0;
  v14 = v20 >> 11;
  if (v21 < (uint64_t)(v20 >> 11))
  {
LABEL_396:
    __break(1u);
    goto LABEL_397;
  }
  v13 = *(_QWORD *)(v4 + 72);
  v11 = *(_QWORD *)(v4 + 88);
  if (v16)
  {
    if (v14 < a3 && *(_WORD *)(v16 + 16) != 0)
    {
LABEL_40:
      v355 = v13;
      v41 = *(unsigned __int8 *)(v16 + 18);
      if (*(_BYTE *)(v16 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v42 = 24;
        v32 = v16;
        while (1)
        {
          v44 = *(unsigned __int16 *)(v32 + 16);
          if (!*(_WORD *)(v32 + 16))
            goto LABEL_43;
          v45 = *(_QWORD *)(v32 + 40);
          v46 = __OFSUB__(v14, v45);
          v47 = v14 - v45;
          if (v46)
            goto LABEL_381;
          if (__OFADD__(v47, 1))
          {
LABEL_382:
            __break(1u);
LABEL_383:
            __break(1u);
LABEL_384:
            __break(1u);
LABEL_385:
            __break(1u);
LABEL_386:
            __break(1u);
            goto LABEL_387;
          }
          if (v47 + 1 >= 1)
            break;
          v44 = 0;
LABEL_44:
          v43 = (4 * *(_BYTE *)(v32 + 18) + 8) & 0x3C;
          v41 = ((-15 << v43) - 1) & v41 | (v44 << v43);
          v25 = *(_QWORD *)(v32 + 24 + 24 * v44);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v32 = v25;
          if (!*(_BYTE *)(v25 + 18))
            goto LABEL_73;
        }
        if ((_DWORD)v44 != 1)
        {
          v48 = (uint64_t *)(v32 + 64);
          v49 = 1;
          while (1)
          {
            v50 = *v48;
            v48 += 3;
            v14 = v47 - v50;
            if (__OFSUB__(v47, v50))
              goto LABEL_367;
            if (__OFADD__(v14, 1))
              goto LABEL_368;
            if (v14 + 1 < 1)
              break;
            ++v49;
            v47 = v14;
            if (v44 == v49)
              goto LABEL_43;
          }
          v44 = v49;
          v14 = v47;
          goto LABEL_44;
        }
        v14 = v47;
LABEL_43:
        if (v14)
          goto LABEL_380;
        goto LABEL_44;
      }
      swift_unknownObjectRetain_n();
      v25 = v16;
LABEL_73:
      result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v14, 0, (_WORD *)(v25 + 16), (uint64_t *)(v25 + 24));
      if (result < 0)
        goto LABEL_410;
      v60 = result;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v24 = v41 & 0xFFFFFFFFFFFFF0FFLL | (v60 << 8);
      v26 = v25;
      v13 = v355;
      if (!v16)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  v23 = swift_unknownObjectRetain_n();
  v24 = specialized Rope._endPath.getter(v23);
  swift_unknownObjectRelease();
  v25 = 0;
  v26 = 0;
  if (v16)
  {
LABEL_23:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v24, v25, v16, v13);
    swift_unknownObjectRelease_n();
    v26 = v25;
  }
LABEL_24:
  v16 = *(_QWORD *)(v4 + 64);
  v27 = *(_QWORD *)(v4 + 72);
  v28 = *(_QWORD *)(v4 + 80);
  v29 = *(_QWORD *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v11, v24, v26, v16, v27, v28, v29);
  swift_unknownObjectRelease();
  v30 = swift_bridgeObjectRetain();
  a3 = specialized _NativeDictionary.filter(_:)(v30);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  v7 = a1;
LABEL_25:
  v31 = v346;
  v32 = *v346;
  v340 = *v7;
  v33 = *v7 >> 11;
  v355 = v7[4] >> 11;
  v341 = v355 - v33;
  if (v355 == v33)
  {
    v334 = v340 >> 11;
    v34 = v340 >> 11;
    goto LABEL_196;
  }
  v363 = v340 >> 11;
  v11 = *(_QWORD *)(v32 + 64);
  v35 = *(_QWORD *)(v32 + 80);
  if (v11)
    v36 = *(_QWORD *)(v32 + 80);
  else
    v36 = 0;
  if (v36 < v33)
  {
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
    goto LABEL_403;
  }
  v37 = *(_QWORD *)(v32 + 72);
  v16 = *(_QWORD *)(v32 + 88);
  v333 = a3;
  if (!v11)
    goto LABEL_37;
  if (*(_WORD *)(v11 + 16))
    v38 = v33 < v35;
  else
    v38 = 0;
  if (!v38)
  {
    swift_unknownObjectRetain();
LABEL_37:
    v39 = swift_unknownObjectRetain();
    v40 = specialized Rope._endPath.getter(v39);
    swift_unknownObjectRelease();
    a3 = 0;
    goto LABEL_79;
  }
  *(_QWORD *)&v354 = *(_QWORD *)(v32 + 80);
  v51 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v42 = -15;
    v52 = v340 >> 11;
    v53 = v11;
    while (1)
    {
      v54 = *(unsigned __int16 *)(v53 + 16);
      if (*(_WORD *)(v53 + 16))
      {
        v56 = 0;
        v57 = (uint64_t *)(v53 + 40);
        while (1)
        {
          v58 = *v57;
          v57 += 3;
          v59 = v52 - v58;
          if (__OFSUB__(v52, v58))
          {
            __break(1u);
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
          if (__OFADD__(v59, 1))
            goto LABEL_353;
          if (v59 + 1 < 1)
            break;
          ++v56;
          v52 = v59;
          if (v54 == v56)
            goto LABEL_70;
        }
        v54 = v56;
      }
      else
      {
        v59 = v52;
LABEL_70:
        if (v59)
          goto LABEL_383;
        v52 = 0;
      }
      v55 = (4 * *(_BYTE *)(v53 + 18) + 8) & 0x3C;
      v51 = ((-15 << v55) - 1) & v51 | (v54 << v55);
      a3 = *(_QWORD *)(v53 + 24 + 24 * v54);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v53 = a3;
      if (!*(_BYTE *)(a3 + 18))
        goto LABEL_77;
    }
  }
  swift_unknownObjectRetain_n();
  v52 = v340 >> 11;
  a3 = v11;
LABEL_77:
  result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v52, 0, (_WORD *)(a3 + 16), (uint64_t *)(a3 + 24));
  if (result < 0)
    goto LABEL_412;
  v61 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v40 = v51 & 0xFFFFFFFFFFFFF0FFLL | (v61 << 8);
  v35 = v354;
LABEL_79:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v16, v40, a3, v11, v37, v35, v16);
  swift_unknownObjectRelease_n();
  v62 = *(_QWORD *)(v32 + 64);
  v63 = *(_QWORD *)(v32 + 72);
  v64 = *(_QWORD *)(v32 + 80);
  v65 = *(_QWORD *)(v32 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v16, v40, a3, v62, v63, v64, v65);
  v16 = v66;
  v344 = v67;
  swift_unknownObjectRelease();
  v68 = swift_bridgeObjectRetain();
  v69 = specialized _NativeDictionary.filter(_:)(v68);
  swift_bridgeObjectRelease_n();
  v11 = *(_QWORD *)(v69 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  v70 = 0;
  *(_QWORD *)&v375 = result;
  v71 = 1 << *(_BYTE *)(v69 + 32);
  v47 = -1;
  if (v71 < 64)
    v47 = ~(-1 << v71);
  v42 = v69 + 64;
  a3 = v47 & *(_QWORD *)(v69 + 64);
  v72 = (unint64_t)(v71 + 63) >> 6;
  while (1)
  {
    if (a3)
    {
      v73 = __clz(__rbit64(a3));
      a3 &= a3 - 1;
      v74 = v73 | (v70 << 6);
      goto LABEL_83;
    }
    v44 = v70 + 1;
    if (__OFADD__(v70, 1))
      goto LABEL_366;
    if (v44 >= v72)
      break;
    v77 = *(_QWORD *)(v42 + 8 * v44);
    ++v70;
    if (!v77)
    {
      v70 = v44 + 1;
      if (v44 + 1 >= v72)
        break;
      v77 = *(_QWORD *)(v42 + 8 * v70);
      if (!v77)
      {
        v70 = v44 + 2;
        if (v44 + 2 >= v72)
          break;
        v77 = *(_QWORD *)(v42 + 8 * v70);
        if (!v77)
        {
          v70 = v44 + 3;
          if (v44 + 3 >= v72)
            break;
          v77 = *(_QWORD *)(v42 + 8 * v70);
          if (!v77)
          {
            v70 = v44 + 4;
            if (v44 + 4 >= v72)
              break;
            v77 = *(_QWORD *)(v42 + 8 * v70);
            if (!v77)
            {
              v78 = v44 + 5;
              if (v78 >= v72)
                break;
              v77 = *(_QWORD *)(v42 + 8 * v78);
              if (!v77)
              {
                while (1)
                {
                  v70 = v78 + 1;
                  if (__OFADD__(v78, 1))
                    break;
                  if (v70 >= v72)
                    goto LABEL_103;
                  v77 = *(_QWORD *)(v42 + 8 * v70);
                  ++v78;
                  if (v77)
                    goto LABEL_102;
                }
LABEL_406:
                __break(1u);
                goto LABEL_407;
              }
              v70 = v78;
            }
          }
        }
      }
    }
LABEL_102:
    a3 = (v77 - 1) & v77;
    v74 = __clz(__rbit64(v77)) + (v70 << 6);
LABEL_83:
    v75 = (uint64_t *)(*(_QWORD *)(v69 + 48) + 16 * v74);
    v11 = *v75;
    v76 = v75[1];
    swift_bridgeObjectRetain();
    v16 = (uint64_t)&v375;
    specialized Set._Variant.insert(_:)((unint64_t *)&v432, v11, v76);
    result = swift_bridgeObjectRelease();
  }
LABEL_103:
  v348 = v69;
  swift_release();
  v79 = v375;
  *(_QWORD *)&v357 = v375;
  if (v340 > 0x7FF)
  {
    v84 = *(_QWORD *)(v32 + 64);
    v85 = *(_QWORD *)(v32 + 72);
    v86 = *(_QWORD *)(v32 + 80);
    v87 = *(_QWORD *)(v32 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v84, v85, v86, v87, &v383);
    v354 = v383;
    v339 = v384;
    v83 = v385;
    swift_unknownObjectRelease();
    v82 = v339;
    v81 = v354;
  }
  else
  {
    v80 = (_QWORD *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v80, 0, (unint64_t *)&v383);
    v81 = v383;
    v82 = v384;
    v83 = v385;
  }
  v88 = v355;
  v375 = v81;
  v376 = v82;
  *(_QWORD *)&v377 = v83;
  v89 = *(_QWORD *)(v32 + 64);
  v90 = *(_QWORD *)(v32 + 72);
  v91 = *(_QWORD *)(v32 + 80);
  v92 = *(_QWORD *)(v32 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v354) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v89, v90, v91, v92, (uint64_t *)&v432);
  v94 = v434;
  swift_unknownObjectRelease();
  if (v94 < v83 && *(_QWORD *)(v79 + 16))
  {
    while (1)
    {
      a3 = *((_QWORD *)&v375 + 1);
      v95 = v375;
      v96 = v376;
      v97 = *(_QWORD *)(v32 + 64);
      v98 = *(_QWORD *)(v32 + 80);
      v99 = swift_unknownObjectRetain();
      result = specialized Rope._endPath.getter(v99);
      if (v97)
      {
        result = swift_unknownObjectRelease();
        if (v83 != v98)
          goto LABEL_132;
      }
      else if (v83)
      {
LABEL_132:
        v113 = *(_QWORD *)(v32 + 64);
        v112 = *(_QWORD *)(v32 + 72);
        v114 = *(_QWORD *)(v32 + 80);
        v16 = *(_QWORD *)(v32 + 88);
        *(_QWORD *)&v432 = v95;
        *((_QWORD *)&v432 + 1) = a3;
        *(_QWORD *)&v433 = v96;
        v115 = *((_QWORD *)&v96 + 1) - 1;
        if (__OFSUB__(*((_QWORD *)&v96 + 1), 1))
          goto LABEL_393;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v432, v113, v112, v114, v16);
        v116 = *((_QWORD *)&v432 + 1);
        a3 = v433;
        v102 = v432;
        v117 = specialized Rope.subscript.getter(v432, *((unint64_t *)&v432 + 1), v433, v113, v112, v114, v16);
        v16 = v118;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v119 = v83 - v117;
        if (__OFSUB__(v83, v117))
          goto LABEL_394;
        v42 = v340 >> 11;
        v103 = v348;
        goto LABEL_158;
      }
      v100 = *(_QWORD *)(v32 + 64);
      v101 = *(_QWORD *)(v32 + 72);
      v16 = *(_QWORD *)(v32 + 80);
      v102 = *(_QWORD *)(v32 + 88);
      if (v100)
      {
        v42 = v340 >> 11;
        v103 = v348;
        if (v16 < (uint64_t)(v340 >> 11))
          goto LABEL_398;
        if (*(_WORD *)(v100 + 16))
        {
          v11 = *(unsigned __int8 *)(v100 + 18);
          if (*(_BYTE *)(v100 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v16 = v340 >> 11;
            v104 = v100;
            while (1)
            {
              v106 = *(unsigned __int16 *)(v104 + 16);
              if (!*(_WORD *)(v104 + 16))
                goto LABEL_423;
              v107 = *(_QWORD *)(v104 + 40);
              v46 = __OFSUB__(v16, v107);
              v108 = v16 - v107;
              if (v46)
                break;
              if (v108 <= 0)
              {
                v56 = 0;
              }
              else
              {
                if ((_DWORD)v106 == 1)
                  goto LABEL_425;
                v109 = *(_QWORD *)(v104 + 64);
                v16 = v108 - v109;
                if (__OFSUB__(v108, v109))
                  goto LABEL_376;
                if (v16 >= 1)
                {
                  if ((_DWORD)v106 == 2)
                    goto LABEL_425;
                  v110 = (_QWORD *)(v104 + 88);
                  v56 = 2;
                  while (v106 != v56)
                  {
                    v111 = v16 - *v110;
                    if (__OFSUB__(v16, *v110))
                      goto LABEL_346;
                    if (v111 < 1)
                      goto LABEL_116;
                    ++v56;
                    v110 += 3;
                    v16 = v111;
                    if (v106 == v56)
                      goto LABEL_425;
                  }
                  __break(1u);
LABEL_346:
                  __break(1u);
LABEL_347:
                  v328 = *(_QWORD *)(v42 + 48);
                  v46 = __OFSUB__(v56, v328);
                  v44 = v56 - v328;
                  if (v46)
                    goto LABEL_421;
                  if (__OFADD__(v44, 1))
                    goto LABEL_422;
                  if (v44 + 1 >= 1)
                  {
                    if ((_DWORD)v104 != 2)
                    {
                      v329 = (_QWORD *)(v42 + 72);
                      v47 = 2;
                      while (v104 != v47)
                      {
                        v219 = v44 - *v329;
                        if (__OFSUB__(v44, *v329))
                          goto LABEL_414;
                        if (__OFADD__(v219, 1))
                          goto LABEL_415;
                        if (v219 + 1 < 1)
                          goto LABEL_370;
                        ++v47;
                        v329 += 3;
                        v44 = v219;
                        if (v104 == v47)
                          goto LABEL_361;
                      }
                      goto LABEL_413;
                    }
                    v219 = v44;
                    goto LABEL_361;
                  }
LABEL_354:
                  v104 = 1;
                  v219 = v56;
                  goto LABEL_362;
                }
                v16 = v108;
                v56 = 1;
              }
LABEL_116:
              v105 = (4 * *(_BYTE *)(v104 + 18) + 8) & 0x3C;
              v11 = ((-15 << v105) - 1) & v11 | (v56 << v105);
              a3 = *(_QWORD *)(v104 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v104 = a3;
              if (!*(_BYTE *)(a3 + 18))
                goto LABEL_141;
            }
LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
LABEL_375:
            __break(1u);
LABEL_376:
            __break(1u);
LABEL_377:
            __break(1u);
LABEL_378:
            __break(1u);
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
            goto LABEL_382;
          }
          result = swift_unknownObjectRetain_n();
          v16 = v340 >> 11;
          a3 = v100;
LABEL_141:
          v120 = *(unsigned __int16 *)(a3 + 16);
          if (!*(_WORD *)(a3 + 16))
            goto LABEL_426;
          v121 = *(_QWORD *)(a3 + 24);
          v46 = __OFSUB__(v16, v121);
          v122 = v16 - v121;
          if (v46)
            goto LABEL_409;
          if (v122 <= 0)
          {
            v125 = 0;
          }
          else
          {
            if ((_DWORD)v120 == 1)
              goto LABEL_428;
            v123 = *(_QWORD *)(a3 + 48);
            v16 = v122 - v123;
            if (__OFSUB__(v122, v123))
              goto LABEL_411;
            if (v16 >= 1)
            {
              if ((_DWORD)v120 == 2)
                goto LABEL_428;
              v124 = (_QWORD *)(a3 + 72);
              v125 = 2;
              while (v120 != v125)
              {
                v126 = v16 - *v124;
                if (__OFSUB__(v16, *v124))
                  goto LABEL_375;
                if (v126 < 1)
                  goto LABEL_156;
                ++v125;
                v124 += 3;
                v16 = v126;
                if (v120 == v125)
                  goto LABEL_428;
              }
              goto LABEL_374;
            }
            v16 = v122;
            v125 = 1;
          }
LABEL_156:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v116 = v11 & 0xFFFFFFFFFFFFF0FFLL | (v125 << 8);
LABEL_137:
          swift_unknownObjectRetain();
          v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v102, v116, a3, v100, v101);
          result = swift_unknownObjectRelease_n();
          v119 = v42 - v16;
          if (__OFSUB__(v42, v16))
            goto LABEL_395;
          goto LABEL_158;
        }
      }
      else
      {
        v42 = v340 >> 11;
        v103 = v348;
        if (v340 >= 0x800)
          goto LABEL_408;
      }
      swift_unknownObjectRetain_n();
      v116 = specialized Rope._endPath.getter(v100);
      swift_unknownObjectRelease();
      a3 = 0;
      v16 = 0;
      if (v100)
        goto LABEL_137;
      v115 = 0;
      v119 = v42;
LABEL_158:
      *(_QWORD *)&v375 = v102;
      *((_QWORD *)&v375 + 1) = v116;
      *(_QWORD *)&v376 = a3;
      *((_QWORD *)&v376 + 1) = v115;
      *(_QWORD *)&v377 = v119;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v375, 0, v42, (_QWORD *)v32, (uint64_t *)&v357, v103, v344, (uint64_t)&v363);
      swift_bridgeObjectRelease();
      swift_release();
      v83 = v377;
      v127 = *(_QWORD *)(v32 + 64);
      v128 = *(_QWORD *)(v32 + 72);
      v129 = *(_QWORD *)(v32 + 80);
      v130 = *(_QWORD *)(v32 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v354 & 1, v127, v128, v129, v130, (uint64_t *)&v432);
      v131 = v434;
      swift_unknownObjectRelease();
      if (v131 >= v83 || !*(_QWORD *)(v357 + 16))
      {
        swift_release();
        v88 = v355;
        goto LABEL_162;
      }
    }
  }
  swift_release();
LABEL_162:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v375 = v88;
  v132 = *(_QWORD *)(v32 + 64);
  v133 = *(_QWORD *)(v32 + 72);
  v134 = *(_QWORD *)(v32 + 80);
  v135 = *(_QWORD *)(v32 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v88 - 1, v354 & 1, v132, v133, v134, v135, (uint64_t *)&v432);
  v349 = v432;
  v345 = v433;
  v136 = v434;
  swift_unknownObjectRelease();
  v445[0] = v349;
  v445[1] = v345;
  v446 = v136;
  v137 = *(_QWORD *)(v32 + 64);
  v138 = *(_QWORD *)(v32 + 72);
  v139 = *(_QWORD *)(v32 + 80);
  v140 = *(_QWORD *)(v32 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v445, v137, v138, v139, v140);
  v142 = v141;
  v42 = v143;
  swift_unknownObjectRelease();
  v11 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v142);
  v145 = v144;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  result = Set.init(minimumCapacity:)();
  a3 = 0;
  *(_QWORD *)&v357 = result;
  v146 = 1 << *(_BYTE *)(v11 + 32);
  v47 = -1;
  if (v146 < 64)
    v47 = ~(-1 << v146);
  v147 = v11 + 64;
  v148 = v47 & *(_QWORD *)(v11 + 64);
  v149 = (unint64_t)(v146 + 63) >> 6;
  while (1)
  {
    if (v148)
    {
      v150 = __clz(__rbit64(v148));
      v148 &= v148 - 1;
      v151 = v150 | (a3 << 6);
      goto LABEL_166;
    }
    v44 = a3 + 1;
    if (__OFADD__(a3, 1))
      goto LABEL_369;
    if (v44 >= v149)
      break;
    v154 = *(_QWORD *)(v147 + 8 * v44);
    ++a3;
    if (!v154)
    {
      a3 = v44 + 1;
      if (v44 + 1 >= v149)
        break;
      v154 = *(_QWORD *)(v147 + 8 * a3);
      if (!v154)
      {
        a3 = v44 + 2;
        if (v44 + 2 >= v149)
          break;
        v154 = *(_QWORD *)(v147 + 8 * a3);
        if (!v154)
        {
          a3 = v44 + 3;
          if (v44 + 3 >= v149)
            break;
          v154 = *(_QWORD *)(v147 + 8 * a3);
          if (!v154)
          {
            a3 = v44 + 4;
            if (v44 + 4 >= v149)
              break;
            v154 = *(_QWORD *)(v147 + 8 * a3);
            if (!v154)
            {
              v155 = v44 + 5;
              if (v155 >= v149)
                break;
              v154 = *(_QWORD *)(v147 + 8 * v155);
              if (!v154)
              {
                while (1)
                {
                  a3 = v155 + 1;
                  if (__OFADD__(v155, 1))
                    break;
                  if (a3 >= v149)
                    goto LABEL_186;
                  v154 = *(_QWORD *)(v147 + 8 * a3);
                  ++v155;
                  if (v154)
                    goto LABEL_185;
                }
LABEL_407:
                __break(1u);
LABEL_408:
                __break(1u);
LABEL_409:
                __break(1u);
LABEL_410:
                __break(1u);
LABEL_411:
                __break(1u);
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
LABEL_414:
                __break(1u);
LABEL_415:
                __break(1u);
LABEL_416:
                __break(1u);
LABEL_417:
                __break(1u);
LABEL_418:
                __break(1u);
LABEL_419:
                __break(1u);
LABEL_420:
                __break(1u);
LABEL_421:
                __break(1u);
LABEL_422:
                __break(1u);
LABEL_423:
                if (!v16)
                  __break(1u);
LABEL_425:
                __break(1u);
LABEL_426:
                if (!v16)
                  __break(1u);
LABEL_428:
                __break(1u);
                return result;
              }
              a3 = v155;
            }
          }
        }
      }
    }
LABEL_185:
    v148 = (v154 - 1) & v154;
    v151 = __clz(__rbit64(v154)) + (a3 << 6);
LABEL_166:
    v152 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v151);
    v42 = *v152;
    v153 = v152[1];
    swift_bridgeObjectRetain();
    v16 = (uint64_t)&v357;
    specialized Set._Variant.insert(_:)((unint64_t *)&v432, v42, v153);
    result = swift_bridgeObjectRelease();
  }
LABEL_186:
  swift_release();
  v156 = *(_OWORD *)(v32 + 32);
  v442 = *(_OWORD *)(v32 + 16);
  v443 = v156;
  v444 = *(_OWORD *)(v32 + 48);
  BigString.utf8.getter();
  v16 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v386);
  if (v16 < v355)
    goto LABEL_399;
  v157 = *(_QWORD *)(v32 + 64);
  v158 = *(_QWORD *)(v32 + 72);
  v159 = *(_QWORD *)(v32 + 80);
  v160 = *(_QWORD *)(v32 + 88);
  swift_unknownObjectRetain();
  swift_retain();
  v161 = v160;
  v162 = v355;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v355, v354 & 1, v157, v158, v159, v161, (uint64_t *)&v432);
  v354 = v432;
  v163 = v433;
  v164 = v434;
  swift_unknownObjectRelease();
  v432 = v354;
  v433 = v163;
  *(_QWORD *)&v434 = v164;
  *(_QWORD *)&v354 = &v390;
  if (v355 != v16)
    goto LABEL_191;
LABEL_192:
  AttributedString._InternalRunsSlice.startIndex.getter((_QWORD *)v32, v162, v387);
  for (i = &v388; v164 < *i && *(_QWORD *)(v357 + 16); i = &v390)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v432, v162, v16, (_QWORD *)v32, (uint64_t *)&v357, v11, v145, (uint64_t)&v375);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((_QWORD *)v32, v162, v16, (uint64_t *)&v432);
    v164 = v434;
    if (v162 == v16)
      goto LABEL_192;
LABEL_191:
    v165 = *(_QWORD *)(v32 + 72);
    v166 = *(_QWORD *)(v32 + 80);
    v167 = *(_QWORD *)(v32 + 88);
    v168 = swift_unknownObjectRetain();
    v169 = v167;
    v162 = v355;
    AttributedString._InternalRuns.endIndex.getter(v168, v165, v166, v169, v389);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  v34 = v375;
  if ((uint64_t)v375 < v363)
    goto LABEL_400;
  v334 = v363;
  a3 = v333;
  v31 = v346;
  v33 = v340 >> 11;
LABEL_196:
  v171 = *(_OWORD *)(v32 + 32);
  v439 = *(_OWORD *)(v32 + 16);
  v440 = v171;
  v441 = *(_OWORD *)(v32 + 48);
  BigString.utf8.getter();
  v172 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v391);
  v173 = (_OWORD *)*v31;
  v174 = *(_OWORD *)(*v31 + 32);
  v375 = *(_OWORD *)(*v31 + 16);
  v376 = v174;
  v175 = *(_OWORD *)(v31 + 1);
  v377 = v173[3];
  v378 = v175;
  v176 = *(_OWORD *)(v31 + 5);
  v379 = *(_OWORD *)(v31 + 3);
  v380 = v176;
  v381 = *(_OWORD *)(v31 + 7);
  swift_unknownObjectRetain();
  BigString.init()();
  v177 = v393;
  v173[1] = v392;
  v173[2] = v177;
  v173[3] = v394;
  swift_unknownObjectRelease();
  *(_QWORD *)&v432 = a2;
  *((_QWORD *)&v432 + 1) = v342;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Character>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<Character> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Character>, MEMORY[0x1E0DEC648]);
  BigSubstring.replaceSubrange<A>(_:with:)();
  v178 = (_OWORD *)*v31;
  v436 = v379;
  v437 = v380;
  v438 = v381;
  v432 = v375;
  v433 = v376;
  v435 = v378;
  v434 = v377;
  v451 = v378;
  v452 = v379;
  v453 = v380;
  v454 = v381;
  BigSubstring.base.getter();
  v179 = v396;
  v178[1] = v395;
  v178[2] = v179;
  v178[3] = v397;
  swift_unknownObjectRelease();
  v180 = v452;
  *(_OWORD *)(v31 + 1) = v451;
  *(_OWORD *)(v31 + 3) = v180;
  v181 = v454;
  *(_OWORD *)(v31 + 5) = v453;
  *(_OWORD *)(v31 + 7) = v181;
  v182 = *v31;
  v183 = *(_OWORD *)(*v31 + 32);
  v431[9] = *(_OWORD *)(*v31 + 16);
  v431[10] = v183;
  v431[11] = *(_OWORD *)(v182 + 48);
  BigString.utf8.getter();
  v16 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v398);
  v184 = v16 - v172;
  if (__OFSUB__(v16, v172))
    goto LABEL_388;
  v185 = v341 + v184;
  if (__OFADD__(v341, v184))
  {
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  swift_bridgeObjectRetain();
  v186 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v33, v355, v185, a3, v186);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v187 = *v31;
  v188 = *(_OWORD *)(*v31 + 32);
  v431[6] = *(_OWORD *)(*v31 + 16);
  v431[7] = v188;
  v431[8] = *(_OWORD *)(v187 + 48);
  BigString.utf8.getter();
  v16 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v399);
  v189 = v16 - v172;
  if (__OFSUB__(v16, v172))
  {
LABEL_390:
    __break(1u);
    goto LABEL_391;
  }
  if (__OFADD__(v34, v189))
  {
LABEL_391:
    __break(1u);
    goto LABEL_392;
  }
  if ((uint64_t)(v34 + v189) < v334)
  {
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
    goto LABEL_396;
  }
  v190 = *(_QWORD *)(v187 + 80);
  v338 = v187;
  if (!*(_QWORD *)(v187 + 64))
  {
    v229 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v229);
    swift_unknownObjectRelease();
    goto LABEL_238;
  }
  v332 = v34 + v189;
  v191 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v191);
  swift_unknownObjectRelease_n();
  if (!v190)
    goto LABEL_238;
  v192 = (__int128 *)(v187 + 16);
  v193 = *(_OWORD *)(v187 + 32);
  v431[3] = *(_OWORD *)(v187 + 16);
  v431[4] = v193;
  v431[5] = *(_OWORD *)(v187 + 48);
  BigString.utf8.getter();
  BigString.startIndex.getter();
  v194 = BigString.UTF8View.index(_:offsetBy:)();
  v196 = v195;
  v198 = v197;
  v200 = v199;
  outlined release of Locale((uint64_t)v400);
  v201 = *(_OWORD *)(v338 + 32);
  v431[0] = *(_OWORD *)(v338 + 16);
  v431[1] = v201;
  v431[2] = *(_OWORD *)(v338 + 48);
  v16 = (uint64_t)v431;
  result = BigString.utf8.getter();
  if (__OFSUB__(v332, v334))
  {
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }
  v202 = BigString.UTF8View.index(_:offsetBy:)();
  v204 = v203;
  v206 = v205;
  v208 = v207;
  outlined release of Locale((uint64_t)v401);
  specialized Range.init(uncheckedBounds:)(v194, v196, v198, v200, v202, v204, v206, v208, v424);
  *(_QWORD *)&v423[0] = MEMORY[0x1E0DEE9E0];
  v209 = v192[1];
  v428 = *v192;
  v429 = v209;
  v430 = v192[2];
  BigString.unicodeScalars.getter();
  v331 = v424[0];
  v210 = BigString.UnicodeScalarView.index(roundingDown:)();
  v212 = v211;
  v214 = v213;
  v216 = v215;
  outlined release of Locale((uint64_t)v402);
  v217 = v192[1];
  v425 = *v192;
  v426 = v217;
  v340 = (unint64_t)v192;
  v427 = v192[2];
  BigString.unicodeScalars.getter();
  v330 = v424[4];
  v16 = BigString.UnicodeScalarView.index(roundingUp:)();
  result = outlined release of Locale((uint64_t)v403);
  *(_QWORD *)&v455 = v210;
  *((_QWORD *)&v455 + 1) = v212;
  *(_QWORD *)&v456 = v214;
  *((_QWORD *)&v456 + 1) = v216;
  v32 = v210 >> 11;
  a3 = (unint64_t)v16 >> 11;
  if ((unint64_t)v16 >> 11 < v210 >> 11)
  {
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
    goto LABEL_406;
  }
  v16 = *(_QWORD *)(v338 + 64);
  if (v16)
    v218 = *(_QWORD *)(v338 + 80);
  else
    v218 = 0;
  if (v218 < v32)
    goto LABEL_405;
  v11 = *(_QWORD *)(v338 + 88);
  v355 = *(_QWORD *)(v338 + 72);
  if (!v16 || v32 >= *(_QWORD *)(v338 + 80) || !*(_WORD *)(v16 + 16))
  {
    swift_retain_n();
    v230 = swift_unknownObjectRetain_n();
    v231 = specialized Rope._endPath.getter(v230);
    swift_unknownObjectRelease();
    v42 = 0;
    v219 = 0;
    if (!v16)
      goto LABEL_363;
    goto LABEL_240;
  }
  *(_QWORD *)&v354 = a3;
  a3 = *(unsigned __int8 *)(v16 + 18);
  if (*(_BYTE *)(v16 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain_n();
    v219 = v32;
    v220 = v16;
    while (1)
    {
      v222 = *(unsigned __int16 *)(v220 + 16);
      if (!*(_WORD *)(v220 + 16))
        goto LABEL_215;
      v223 = *(_QWORD *)(v220 + 40);
      v224 = v219 - v223;
      if (__OFSUB__(v219, v223))
        goto LABEL_385;
      if (__OFADD__(v224, 1))
        goto LABEL_386;
      if (v224 + 1 <= 0)
      {
        v222 = 0;
      }
      else
      {
        if ((_DWORD)v222 == 1)
        {
          v219 -= v223;
          goto LABEL_215;
        }
        v225 = *(_QWORD *)(v220 + 64);
        v46 = __OFSUB__(v224, v225);
        v226 = v224 - v225;
        if (v46)
          goto LABEL_401;
        if (__OFADD__(v226, 1))
          goto LABEL_402;
        if (v226 + 1 < 1)
        {
          v222 = 1;
          v219 = v224;
        }
        else
        {
          if ((_DWORD)v222 == 2)
          {
            v219 = v226;
LABEL_215:
            if (v219)
              goto LABEL_384;
            goto LABEL_216;
          }
          v227 = (_QWORD *)(v220 + 88);
          v228 = 2;
          while (1)
          {
            if (v222 == v228)
              goto LABEL_377;
            v219 = v226 - *v227;
            if (__OFSUB__(v226, *v227))
              goto LABEL_378;
            if (__OFADD__(v219, 1))
              goto LABEL_379;
            if (v219 + 1 < 1)
              break;
            ++v228;
            v227 += 3;
            v226 = v219;
            if (v222 == v228)
              goto LABEL_215;
          }
          v222 = v228;
          v219 = v226;
        }
      }
LABEL_216:
      v221 = (4 * *(_BYTE *)(v220 + 18) + 8) & 0x3C;
      a3 = ((-15 << v221) - 1) & a3 | (v222 << v221);
      v42 = *(_QWORD *)(v220 + 24 + 24 * v222);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v220 = v42;
      if (!*(_BYTE *)(v42 + 18))
        goto LABEL_325;
    }
  }
  swift_unknownObjectRetain_n();
  result = swift_retain_n();
  v219 = v32;
  v42 = v16;
LABEL_325:
  v104 = *(unsigned __int16 *)(v42 + 16);
  if (*(_WORD *)(v42 + 16))
  {
    v312 = *(_QWORD *)(v42 + 24);
    v56 = v219 - v312;
    if (__OFSUB__(v219, v312))
      goto LABEL_417;
    if (__OFADD__(v56, 1))
      goto LABEL_418;
    if (v56 + 1 <= 0)
    {
      v104 = 0;
      goto LABEL_362;
    }
    if ((_DWORD)v104 != 1)
      goto LABEL_347;
    v219 -= v312;
  }
LABEL_361:
  if (v219)
    goto LABEL_416;
LABEL_362:
  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v231 = a3 & 0xFFFFFFFFFFFFF0FFLL | (v104 << 8);
    a3 = v354;
    if (!v16)
      break;
LABEL_240:
    swift_unknownObjectRetain();
    v232 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v231, v42, v16, v355);
    swift_release();
    swift_unknownObjectRelease_n();
    v44 = v32 - v219;
    if (!__OFSUB__(v32, v219))
      goto LABEL_241;
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    v104 = v47;
    v219 = v44;
  }
LABEL_363:
  swift_release();
  v232 = 0;
  v44 = v32 - v219;
  if (__OFSUB__(v32, v219))
    goto LABEL_365;
LABEL_241:
  *(_QWORD *)&v370 = v338;
  *((_QWORD *)&v370 + 1) = v32;
  *(_QWORD *)&v371 = a3;
  *((_QWORD *)&v371 + 1) = v11;
  *(_QWORD *)&v372 = v231;
  *((_QWORD *)&v372 + 1) = v42;
  v373 = v232;
  v374 = v44;
  specialized IndexingIterator.next()();
  if (!v233)
  {
    v267 = MEMORY[0x1E0DEE9E0];
    goto LABEL_284;
  }
  v234 = v233;
  v235 = (__int128 *)v340;
  while (1)
  {
    v237 = v235[1];
    v413 = *v235;
    v414 = v237;
    v415 = v235[2];
    BigString.utf8.getter();
    v238 = v455;
    v239 = BigString.UTF8View.index(_:offsetBy:)();
    v241 = v240;
    v243 = v242;
    v245 = v244;
    outlined release of Locale((uint64_t)v404);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v246 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v234);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v337 = v243;
    v335 = v241;
    v336 = v245;
    if ((v246 & 1) != 0 && v239 >> 10 > v238 >> 10)
      break;
LABEL_243:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v455, v239, v335, v337, v336);
    specialized IndexingIterator.next()();
    v234 = v236;
    if (!v236)
      goto LABEL_283;
  }
  v247 = v238;
  v347 = v234 + 64;
  while (2)
  {
    v248 = v235[1];
    v410 = *v235;
    v411 = v248;
    v412 = v235[2];
    BigString.unicodeScalars.getter();
    v353 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v405);
    v249 = v235[1];
    v407 = *v235;
    v408 = v249;
    v409 = v235[2];
    BigString.unicodeScalars.getter();
    v350 = v247;
    v351 = BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v406);
    v250 = 1 << *(_BYTE *)(v234 + 32);
    if (v250 < 64)
      v251 = ~(-1 << v250);
    else
      v251 = -1;
    v252 = v251 & *(_QWORD *)(v234 + 64);
    v253 = (unint64_t)(v250 + 63) >> 6;
    swift_bridgeObjectRetain();
    v254 = 0;
LABEL_253:
    if (v252)
    {
      v255 = __clz(__rbit64(v252));
      v252 &= v252 - 1;
      v256 = v255 | (v254 << 6);
      goto LABEL_255;
    }
    v260 = v254 + 1;
    if (!__OFADD__(v254, 1))
    {
      if (v260 < v253)
      {
        v261 = *(_QWORD *)(v347 + 8 * v260);
        if (v261)
        {
LABEL_259:
          v252 = (v261 - 1) & v261;
          v256 = __clz(__rbit64(v261)) + (v260 << 6);
          v254 = v260;
LABEL_255:
          v257 = *(_QWORD *)(v234 + 56);
          v258 = (_QWORD *)(*(_QWORD *)(v234 + 48) + 16 * v256);
          v259 = v258[1];
          *(_QWORD *)&v357 = *v258;
          *((_QWORD *)&v357 + 1) = v259;
          outlined init with copy of AttributedString._AttributeValue(v257 + 72 * v256, (uint64_t)&v358);
          swift_bridgeObjectRetain();
LABEL_265:
          outlined init with take of LocalePreferences?((uint64_t)&v357, (uint64_t)&v363, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
          v262 = v364;
          if (!v364)
          {
            swift_release();
            v235 = (__int128 *)v340;
            v247 = v351;
            if (v239 >> 10 <= v351 >> 10)
              goto LABEL_243;
            continue;
          }
          v263 = v363;
          v264 = v366;
          v265 = v367;
          outlined copy of AttributedString.AttributeRunBoundaries?(v366, v367);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v365);
          if (v265 != 1)
          {
            *(_QWORD *)&v357 = v264;
            *((_QWORD *)&v357 + 1) = v265;
            v266 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v264, v265);
            if ((v266 & 0x100000000) == 0 && v353 != (_DWORD)v266)
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v263, v262, v350, v351, (uint64_t *)v423);
          }
          swift_bridgeObjectRelease();
          goto LABEL_253;
        }
        if (v254 + 2 >= v253)
        {
          ++v254;
        }
        else
        {
          v261 = *(_QWORD *)(v347 + 8 * (v254 + 2));
          if (v261)
          {
            v260 = v254 + 2;
            goto LABEL_259;
          }
          if (v254 + 3 >= v253)
          {
            v254 += 2;
          }
          else
          {
            v261 = *(_QWORD *)(v347 + 8 * (v254 + 3));
            if (v261)
            {
              v260 = v254 + 3;
              goto LABEL_259;
            }
            v260 = v254 + 4;
            if (v254 + 4 >= v253)
            {
              v254 += 3;
            }
            else
            {
              v261 = *(_QWORD *)(v347 + 8 * v260);
              if (v261)
                goto LABEL_259;
              while (v253 - 5 != v254)
              {
                v261 = *(_QWORD *)(v234 + 104 + 8 * v254++);
                if (v261)
                {
                  v260 = v254 + 4;
                  goto LABEL_259;
                }
              }
              v254 = v253 - 1;
            }
          }
        }
      }
      v252 = 0;
      v362 = 0;
      v360 = 0u;
      v361 = 0u;
      v358 = 0u;
      v359 = 0u;
      v357 = 0u;
      goto LABEL_265;
    }
    break;
  }
  __break(1u);
LABEL_283:
  v267 = *(_QWORD *)&v423[0];
LABEL_284:
  result = swift_release();
  v268 = 0;
  v269 = v267 + 64;
  v270 = 1 << *(_BYTE *)(v267 + 32);
  v271 = -1;
  if (v270 < 64)
    v271 = ~(-1 << v270);
  v272 = v271 & *(_QWORD *)(v267 + 64);
  v356 = (unint64_t)(v270 + 63) >> 6;
  v16 = v338;
  while (2)
  {
    if (v272)
    {
      v273 = __clz(__rbit64(v272));
      v272 &= v272 - 1;
      v274 = v273 | (v268 << 6);
LABEL_300:
      v277 = (unint64_t *)(*(_QWORD *)(v267 + 48) + 16 * v274);
      v279 = *v277;
      v278 = v277[1];
      v280 = *(_QWORD *)(*(_QWORD *)(v267 + 56) + 8 * v274);
      result = specialized Array.count.getter(v280);
      if (result)
      {
        v281 = result;
        if (result < 1)
        {
          __break(1u);
          goto LABEL_372;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v282 = (uint64_t *)(v280 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v279, v278, *(v282 - 1), *v282, 0);
          v282 += 2;
          --v281;
        }
        while (v281);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      continue;
    }
    break;
  }
  v46 = __OFADD__(v268++, 1);
  if (v46)
    goto LABEL_373;
  if (v268 < v356)
  {
    v275 = *(_QWORD *)(v269 + 8 * v268);
    if (!v275)
    {
      v276 = v268 + 1;
      if (v268 + 1 >= v356)
        goto LABEL_309;
      v275 = *(_QWORD *)(v269 + 8 * v276);
      if (!v275)
      {
        v276 = v268 + 2;
        if (v268 + 2 >= v356)
          goto LABEL_309;
        v275 = *(_QWORD *)(v269 + 8 * v276);
        if (!v275)
        {
          v276 = v268 + 3;
          if (v268 + 3 >= v356)
            goto LABEL_309;
          v275 = *(_QWORD *)(v269 + 8 * v276);
          if (!v275)
          {
            while (1)
            {
              v268 = v276 + 1;
              if (__OFADD__(v276, 1))
                break;
              if (v268 >= v356)
                goto LABEL_309;
              v275 = *(_QWORD *)(v269 + 8 * v268);
              ++v276;
              if (v275)
                goto LABEL_299;
            }
LABEL_387:
            __break(1u);
LABEL_388:
            __break(1u);
            goto LABEL_389;
          }
        }
      }
      v268 = v276;
    }
LABEL_299:
    v272 = (v275 - 1) & v275;
    v274 = __clz(__rbit64(v275)) + (v268 << 6);
    goto LABEL_300;
  }
LABEL_309:
  swift_release();
  v283 = v331 >> 10;
  if (!specialized Range.isEmpty.getter())
  {
    v298 = *(_OWORD *)(v340 + 16);
    v423[0] = *(_OWORD *)v340;
    v423[1] = v298;
    v423[2] = *(_OWORD *)(v340 + 32);
    v16 = v338;
    if (v283 <= (unint64_t)BigString.startIndex.getter() >> 10)
      goto LABEL_319;
    result = v334 - 1;
    if (__OFSUB__(v334, 1))
      goto LABEL_419;
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v334) & 1) != 0)
    {
      v299 = *(_OWORD *)v340;
      v300 = *(_OWORD *)(v340 + 16);
      v422 = *(_OWORD *)(v340 + 32);
      v421[1] = v300;
      v421[0] = v299;
      v301 = *(_OWORD *)v340;
      v456 = *(_OWORD *)(v340 + 16);
      v457 = v422;
      v455 = v301;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v455, (uint64_t)v458);
      outlined retain of Locale((uint64_t)v458);
      v302 = BigString.index(before:)();
      v304 = v303;
      v306 = v305;
      v308 = v307;
      outlined release of Locale((uint64_t)v421);
      AttributedString.Guts._paragraphExtending(from:)(v302, v304, v306, v308, (uint64_t)&v357);
      v295 = Range<>._utf8OffsetRange.getter();
      v297 = v309;
      v310 = 0;
    }
    else
    {
LABEL_319:
      v295 = 0;
      v297 = 0;
      v310 = 1;
    }
    v311 = *(_OWORD *)(v340 + 16);
    v418 = *(_OWORD *)v340;
    v419 = v311;
    v420 = *(_OWORD *)(v340 + 32);
    if (v330 >> 10 >= (unint64_t)BigString.endIndex.getter() >> 10)
      goto LABEL_335;
    if ((v310 & 1) != 0)
    {
      if (v332 < 1)
        goto LABEL_238;
    }
    else if (v297 >= v332)
    {
LABEL_334:
      v310 = 0;
      goto LABEL_335;
    }
    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(v332 - 1, v332) & 1) != 0)
    {
      v313 = *(_OWORD *)v340;
      v314 = *(_OWORD *)(v340 + 16);
      v417 = *(_OWORD *)(v340 + 32);
      v416[1] = v314;
      v416[0] = v313;
      v315 = *(_OWORD *)v340;
      v371 = *(_OWORD *)(v340 + 16);
      v372 = v417;
      v370 = v315;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v370, (uint64_t)v459);
      outlined retain of Locale((uint64_t)v459);
      v316 = BigString.index(before:)();
      v318 = v317;
      v320 = v319;
      v322 = v321;
      outlined release of Locale((uint64_t)v416);
      AttributedString.Guts._paragraphExtending(from:)(v316, v318, v320, v322, (uint64_t)&v363);
      v323 = Range<>._utf8OffsetRange.getter();
      v325 = v324;
      v326 = 1;
      goto LABEL_336;
    }
LABEL_335:
    v323 = 0;
    v325 = 0;
    v326 = 0;
LABEL_336:
    if ((v310 & 1) == 0 && v334 < v297)
    {
      v368 = 0;
      v369 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v368, v295, v334, v297);
    }
    if (v332 < v325)
      v327 = v326;
    else
      v327 = 0;
    if (v327 == 1)
    {
      v368 = 0;
      v369 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v368, v323, v332, v325);
    }
    goto LABEL_238;
  }
  v284 = *(_OWORD *)(v340 + 16);
  v370 = *(_OWORD *)v340;
  v371 = v284;
  v372 = *(_OWORD *)(v340 + 32);
  if (v283 > (unint64_t)BigString.startIndex.getter() >> 10)
  {
    v16 = (uint64_t)&v370;
    if (v283 < (unint64_t)BigString.endIndex.getter() >> 10)
    {
      result = v334 - 1;
      if (__OFSUB__(v334, 1))
        goto LABEL_420;
      if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v334) & 1) != 0)
      {
        v285 = *(_OWORD *)v340;
        v286 = *(_OWORD *)(v340 + 32);
        v456 = *(_OWORD *)(v340 + 16);
        v457 = v286;
        v455 = v285;
        v287 = *(_OWORD *)v340;
        v358 = *(_OWORD *)(v340 + 16);
        v359 = v286;
        v357 = v287;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v357, (uint64_t)v423);
        outlined retain of Locale((uint64_t)v423);
        v288 = BigString.index(before:)();
        v290 = v289;
        v292 = v291;
        v294 = v293;
        outlined release of Locale((uint64_t)&v455);
        AttributedString.Guts._paragraphExtending(from:)(v288, v290, v292, v294, (uint64_t)&v363);
        v295 = Range<>._utf8OffsetRange.getter();
        v297 = v296;
        goto LABEL_334;
      }
    }
  }
LABEL_238:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t AttributedString.CharacterView._replaceSubrange<A>(_:with:)(unint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[14];
  _OWORD v32[4];

  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = (_QWORD *)*v3;
    v9 = *(_OWORD *)(*v3 + 16);
    v10 = *(_OWORD *)(*v3 + 48);
    v32[1] = *(_OWORD *)(*v3 + 32);
    v32[2] = v10;
    v32[0] = v9;
    v11 = v8[8];
    v12 = v8[9];
    v29 = a3;
    v13 = v8[10];
    v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v32);
    swift_unknownObjectRetain();
    v15 = v14;
    a3 = v29;
    *v4 = AttributedString.Guts.init(string:runs:)(v32, v11, v12, v13, v15);
    swift_release();
  }
  if (a3 == MEMORY[0x1E0D12F30])
  {
    v16 = a2[2];
    v17 = a2[3];
    v18 = *a2;
    v31[1] = a2[1];
    v31[2] = v16;
    v19 = a2[6];
    v20 = a2[4];
    v31[5] = a2[5];
    v31[6] = v19;
    v31[3] = v17;
    v31[4] = v20;
    v31[0] = v18;
    v21 = *v4;
    v22 = *(_OWORD *)(*v4 + 32);
    v31[7] = *(_OWORD *)(*v4 + 16);
    v31[8] = v22;
    v23 = *(_OWORD *)(v4 + 1);
    v31[9] = *(_OWORD *)(v21 + 48);
    v31[10] = v23;
    v24 = *(_OWORD *)(v4 + 5);
    v31[11] = *(_OWORD *)(v4 + 3);
    v31[12] = v24;
    v31[13] = *(_OWORD *)(v4 + 7);
    outlined retain of Locale((uint64_t)v31);
    swift_unknownObjectRetain();
    BigSubstring.subscript.getter();
    swift_unknownObjectRelease();
    BigSubstring.isIdentical(to:)();
    outlined release of Locale((uint64_t)v31);
    outlined release of Locale((uint64_t)&v30);
  }
  v25 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(a1);
  v27 = v26;
  MEMORY[0x1E0C80A78](v25);
  AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(a1, v25, v27, (void (*)(__int128 *, _QWORD *))partial apply for closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*AttributedString.CharacterView.subscript.modify(void (**a1)(uint64_t a1, char a2), unint64_t *a2))(uint64_t a1, char a2)
{
  _QWORD *v2;
  void (*result)(uint64_t, char);
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v11)(uint64_t, char);
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = (void (*)(uint64_t, char))malloc(0xC0uLL);
  *a1 = result;
  v7 = *a2;
  v6 = a2[1];
  *((_QWORD *)result + 19) = v2;
  *((_QWORD *)result + 20) = v7;
  v8 = a2[2];
  v9 = a2[3];
  *((_QWORD *)result + 21) = v6;
  *((_QWORD *)result + 22) = v8;
  *((_QWORD *)result + 23) = v9;
  if (v7 >> 10 < v2[1] >> 10 || v7 >> 10 >= v2[5] >> 10)
  {
    __break(1u);
  }
  else
  {
    v11 = result;
    v12 = (uint64_t)result + 48;
    v13 = (uint64_t)result + 96;
    v14 = (_OWORD *)*v2;
    v16 = *(_OWORD *)(*v2 + 32);
    v15 = *(_OWORD *)(*v2 + 48);
    *((_OWORD *)result + 3) = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)result + 4) = v16;
    *((_OWORD *)result + 5) = v15;
    v17 = v14[1];
    v18 = v14[3];
    *((_OWORD *)result + 1) = v14[2];
    *((_OWORD *)result + 2) = v18;
    *(_OWORD *)result = v17;
    outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)result, (uint64_t)result + 96);
    outlined retain of Locale(v13);
    v19 = BigString.subscript.getter();
    v21 = v20;
    outlined release of Locale(v12);
    *((_QWORD *)v11 + 17) = v19;
    *((_QWORD *)v11 + 18) = v21;
    return AttributedString.CharacterView.subscript.modify;
  }
  return result;
}

void AttributedString.CharacterView.subscript.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[4];

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 136);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v8[0] = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v8[1] = v6;
  v8[2] = v5;
  v8[3] = v4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized AttributedString.CharacterView.subscript.setter(v3, v7, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized AttributedString.CharacterView.subscript.setter(v3, v7, v8);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t AttributedString.CharacterView.subscript.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[15];
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[3];

  v4 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)result >> 10 >= v2[1] >> 10 && v2[5] >> 10 >= v4 >> 10)
  {
    v6 = (_OWORD *)*v2;
    v7 = *(_QWORD *)(result + 56);
    v8 = *(_QWORD *)(result + 24);
    v19[14] = *(_QWORD *)result;
    v20 = *(_OWORD *)(result + 8);
    v21 = v8;
    v22 = v4;
    v23 = *(_OWORD *)(result + 40);
    v24 = v7;
    v9 = v6[1];
    v10 = v6[3];
    v25[1] = v6[2];
    v25[2] = v10;
    v25[0] = v9;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v25);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v25);
    outlined release of Locale((uint64_t)v19);
    result = swift_release();
    v11 = v19[6];
    v12 = v19[7];
    v13 = v19[8];
    v14 = v19[9];
    v15 = v19[10];
    v16 = v19[11];
    v17 = v19[12];
    v18 = v19[13];
    a2[8] = v6;
    a2[9] = v11;
    a2[10] = v12;
    a2[11] = v13;
    a2[12] = v14;
    a2[13] = v15;
    a2[14] = v16;
    a2[15] = v17;
    a2[16] = v18;
    a2[17] = 0;
    *a2 = v11;
    a2[1] = v12;
    a2[2] = v13;
    a2[3] = v14;
    a2[4] = v15;
    a2[5] = v16;
    a2[6] = v17;
    a2[7] = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 key path getter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView@<Q0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[4];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[9];

  v4 = a1[9];
  v12 = *a1;
  v13 = *(_OWORD *)(a1 + 1);
  v14 = *(_OWORD *)(a1 + 3);
  v15 = *(_OWORD *)(a1 + 5);
  v16 = *(_OWORD *)(a1 + 7);
  v17 = v4;
  v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  v6 = a2[3];
  v11[2] = a2[2];
  v11[3] = v6;
  AttributedString.CharacterView.subscript.getter((uint64_t)v11, v18);
  v7 = v18[7];
  *(_OWORD *)(a3 + 96) = v18[6];
  *(_OWORD *)(a3 + 112) = v7;
  *(_OWORD *)(a3 + 128) = v18[8];
  v8 = v18[3];
  *(_OWORD *)(a3 + 32) = v18[2];
  *(_OWORD *)(a3 + 48) = v8;
  v9 = v18[5];
  *(_OWORD *)(a3 + 64) = v18[4];
  *(_OWORD *)(a3 + 80) = v9;
  result = (__n128)v18[1];
  *(_OWORD *)a3 = v18[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t key path setter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView(_OWORD *a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[4];
  _OWORD v11[9];

  v3 = a3[1];
  v10[0] = *a3;
  v10[1] = v3;
  v4 = a3[3];
  v10[2] = a3[2];
  v10[3] = v4;
  v5 = a1[7];
  v11[6] = a1[6];
  v11[7] = v5;
  v11[8] = a1[8];
  v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  v7 = a1[5];
  v11[4] = a1[4];
  v11[5] = v7;
  v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v11);
  specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)v10, (uint64_t)v11);
  return outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v11);
}

__int128 *AttributedString.CharacterView.subscript.setter(__int128 *result, uint64_t *a2)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[48];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[8];
  _OWORD v48[11];
  _OWORD v49[3];
  _OWORD v50[3];
  _OWORD v51[3];
  __int128 v52[3];
  _BYTE v53[40];
  __int128 v54[3];
  _BYTE v55[40];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v3 = result[7];
  v62 = result[6];
  v63 = v3;
  v64 = result[8];
  v4 = result[3];
  v58 = result[2];
  v59 = v4;
  v5 = result[5];
  v60 = result[4];
  v61 = v5;
  v6 = result[1];
  v7 = *a2;
  v8 = v2[1];
  v9 = (unint64_t)*a2 >> 10;
  v56 = *result;
  v57 = v6;
  if (v9 < v8 >> 10)
  {
    __break(1u);
  }
  else
  {
    v10 = a2[4];
    if (v2[5] >> 10 >= v10 >> 10)
    {
      v11 = a2[1];
      v12 = a2[2];
      v13 = a2[3];
      v14 = a2[5];
      v15 = a2[6];
      v16 = a2[7];
      v17 = (_OWORD *)*v2;
      v18 = *(_OWORD *)(*v2 + 16);
      v19 = *(_OWORD *)(*v2 + 48);
      v51[1] = *(_OWORD *)(*v2 + 32);
      v51[2] = v19;
      v51[0] = v18;
      v20 = v17[1];
      v52[1] = v17[2];
      v52[2] = v19;
      v52[0] = v20;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v52, (uint64_t)v53);
      outlined retain of Locale((uint64_t)v53);
      v21 = MEMORY[0x186DA3EC0](v7, v11, v12, v13);
      v23 = v22;
      v25 = v24;
      v27 = v26;
      outlined release of Locale((uint64_t)v51);
      v28 = v17[1];
      v29 = v17[3];
      v50[1] = v17[2];
      v50[2] = v29;
      v50[0] = v28;
      v30 = v17[1];
      v54[1] = v17[2];
      v54[2] = v29;
      v54[0] = v30;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v54, (uint64_t)v55);
      outlined retain of Locale((uint64_t)v55);
      v31 = MEMORY[0x186DA3EC0](v10, v14, v15, v16);
      v33 = v32;
      v35 = v34;
      v37 = v36;
      outlined release of Locale((uint64_t)v50);
      v47[0] = v21;
      v47[1] = v23;
      v47[2] = v25;
      v47[3] = v27;
      v47[4] = v31;
      v47[5] = v33;
      v47[6] = v35;
      v47[7] = v37;
      v48[7] = v56;
      v48[8] = v57;
      v48[9] = v58;
      v48[10] = v59;
      v38 = (_OWORD *)v60;
      v39 = *(_OWORD *)(v60 + 16);
      v40 = *(_OWORD *)(v60 + 48);
      v49[1] = *(_OWORD *)(v60 + 32);
      v49[2] = v40;
      v49[0] = v39;
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined retain of Locale((uint64_t)v49);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v49);
      outlined release of Locale((uint64_t)v42);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      v41 = v38[2];
      v48[0] = v38[1];
      v48[1] = v41;
      v48[2] = v38[3];
      v48[3] = v43;
      v48[4] = v44;
      v48[5] = v45;
      v48[6] = v46;
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v47, (uint64_t)v48);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
      swift_unknownObjectRelease();
      return (__int128 *)outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v56);
    }
  }
  __break(1u);
  return result;
}

_QWORD *AttributedString.CharacterView.subscript.modify(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  result = malloc(0x7C0uLL);
  *a1 = result;
  result[239] = v2;
  v6 = *a2;
  v7 = a2[1];
  result[240] = *a2;
  result[241] = v7;
  v8 = a2[2];
  v9 = a2[3];
  result[242] = v8;
  result[243] = v9;
  v10 = a2[4];
  v11 = a2[5];
  result[244] = v10;
  result[245] = v11;
  v12 = a2[6];
  v13 = a2[7];
  result[246] = v12;
  v14 = v2[1];
  result[247] = v13;
  if (v6 >> 10 < v14 >> 10 || v2[5] >> 10 < v10 >> 10)
  {
    __break(1u);
  }
  else
  {
    v15 = result;
    v16 = (_OWORD *)*v2;
    v17 = (uint64_t)(result + 54);
    result[132] = v6;
    v18 = (uint64_t)(result + 200);
    result[133] = v7;
    result[134] = v8;
    result[135] = v9;
    result[136] = v10;
    result[137] = v11;
    result[138] = v12;
    result[139] = v13;
    v20 = v16[2];
    v19 = v16[3];
    *((_OWORD *)result + 100) = v16[1];
    *((_OWORD *)result + 101) = v20;
    *((_OWORD *)result + 102) = v19;
    swift_retain_n();
    outlined retain of Locale(v18);
    BigString.subscript.getter();
    outlined release of Locale(v18);
    outlined release of Locale(v17);
    swift_release();
    v21 = v15[60];
    v22 = v15[61];
    v23 = v15[62];
    v24 = v15[63];
    v25 = v15[64];
    v26 = v15[65];
    v27 = v15[66];
    v28 = v15[67];
    v15[44] = v16;
    v15[45] = v21;
    v15[46] = v22;
    v15[47] = v23;
    v15[48] = v24;
    v15[49] = v25;
    v15[50] = v26;
    v15[51] = v27;
    v15[52] = v28;
    v15[53] = 0;
    v15[36] = v21;
    v15[37] = v22;
    v15[38] = v23;
    v15[39] = v24;
    v15[40] = v25;
    v15[41] = v26;
    result = AttributedString.CharacterView.subscript.modify;
    v15[42] = v27;
    v15[43] = v28;
  }
  return result;
}

void AttributedString.CharacterView.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _OWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v2 = *a1;
  v3 = (_OWORD *)(*a1 + 288);
  v4 = *(_QWORD *)(*a1 + 1920);
  v5 = *(_QWORD **)(*a1 + 1912);
  v6 = v4 >> 10;
  if ((a2 & 1) != 0)
  {
    v7 = *(_OWORD *)(*a1 + 336);
    *(_OWORD *)(v2 + 32) = *(_OWORD *)(*a1 + 320);
    *(_OWORD *)(v2 + 48) = v7;
    v8 = v3[8];
    v9 = v3[6];
    *(_OWORD *)(v2 + 112) = v3[7];
    *(_OWORD *)(v2 + 128) = v8;
    v10 = v3[5];
    *(_OWORD *)(v2 + 64) = v3[4];
    *(_OWORD *)(v2 + 80) = v10;
    *(_OWORD *)(v2 + 96) = v9;
    v11 = v3[1];
    *(_OWORD *)v2 = *v3;
    *(_OWORD *)(v2 + 16) = v11;
    if (v6 < v5[1] >> 10)
    {
      __break(1u);
    }
    else if (v5[5] >> 10 >= *(_QWORD *)(v2 + 1952) >> 10)
    {
      v97 = *(_QWORD *)(v2 + 1952);
      v103 = *(_QWORD *)(v2 + 1976);
      v101 = *(_QWORD *)(v2 + 1968);
      v99 = *(_QWORD *)(v2 + 1960);
      v93 = *(_QWORD *)(v2 + 1944);
      v91 = *(_QWORD *)(v2 + 1936);
      v12 = *(_QWORD *)(v2 + 1928);
      v13 = (_OWORD *)*v5;
      v15 = *(_OWORD *)(*v5 + 32);
      v14 = *(_OWORD *)(*v5 + 48);
      *(_OWORD *)(v2 + 1552) = *(_OWORD *)(*v5 + 16);
      *(_OWORD *)(v2 + 1568) = v15;
      *(_OWORD *)(v2 + 1584) = v14;
      v16 = v4;
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Locale(v2 + 1552);
      v17 = MEMORY[0x186DA3EC0](v16, v12, v91, v93);
      v92 = v18;
      v94 = v17;
      v20 = v19;
      v90 = v21;
      outlined release of Locale(v2 + 1552);
      v23 = v13[2];
      v22 = v13[3];
      *(_OWORD *)(v2 + 1456) = v13[1];
      *(_OWORD *)(v2 + 1472) = v23;
      *(_OWORD *)(v2 + 1488) = v22;
      v24 = v13[1];
      v25 = v13[3];
      *(_OWORD *)(v2 + 1664) = v13[2];
      *(_OWORD *)(v2 + 1680) = v25;
      *(_OWORD *)(v2 + 1648) = v24;
      outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)(v2 + 1648), v2 + 1832);
      outlined retain of Locale(v2 + 1832);
      v26 = MEMORY[0x186DA3EC0](v97, v99, v101, v103);
      v28 = v27;
      v30 = v29;
      v32 = v31;
      outlined release of Locale(v2 + 1456);
      *(_QWORD *)(v2 + 992) = v94;
      *(_QWORD *)(v2 + 1000) = v92;
      *(_QWORD *)(v2 + 1008) = v20;
      *(_QWORD *)(v2 + 1016) = v90;
      *(_QWORD *)(v2 + 1024) = v26;
      *(_QWORD *)(v2 + 1032) = v28;
      *(_QWORD *)(v2 + 1040) = v30;
      *(_QWORD *)(v2 + 1048) = v32;
      v33 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v2 + 1120) = *(_OWORD *)v2;
      *(_OWORD *)(v2 + 1136) = v33;
      v34 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)(v2 + 1152) = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v2 + 1168) = v34;
      v35 = *(_OWORD **)(v2 + 64);
      v36 = v35[3];
      v37 = v35[1];
      *(_OWORD *)(v2 + 1520) = v35[2];
      *(_OWORD *)(v2 + 1536) = v36;
      *(_OWORD *)(v2 + 1504) = v37;
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined retain of Locale(v2 + 1504);
      BigString.subscript.getter();
      outlined release of Locale(v2 + 1504);
      outlined release of Locale(v2 + 656);
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      v38 = v35[2];
      v39 = v35[3];
      *(_OWORD *)(v2 + 880) = v35[1];
      *(_OWORD *)(v2 + 896) = v38;
      v40 = *(_OWORD *)(v2 + 704);
      v41 = *(_OWORD *)(v2 + 720);
      *(_OWORD *)(v2 + 912) = v39;
      *(_OWORD *)(v2 + 928) = v40;
      v42 = *(_OWORD *)(v2 + 736);
      v43 = *(_OWORD *)(v2 + 752);
      *(_OWORD *)(v2 + 944) = v41;
      *(_OWORD *)(v2 + 960) = v42;
      *(_OWORD *)(v2 + 976) = v43;
      swift_unknownObjectRetain();
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v2 + 992, v2 + 880);
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      swift_unknownObjectRelease();
      outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
      v44 = v3[7];
      *(_OWORD *)(v2 + 240) = v3[6];
      *(_OWORD *)(v2 + 256) = v44;
      *(_OWORD *)(v2 + 272) = v3[8];
      v45 = v3[3];
      *(_OWORD *)(v2 + 176) = v3[2];
      *(_OWORD *)(v2 + 192) = v45;
      v46 = v3[5];
      *(_OWORD *)(v2 + 208) = v3[4];
      *(_OWORD *)(v2 + 224) = v46;
      v47 = v3[1];
      *(_OWORD *)(v2 + 144) = *v3;
      *(_OWORD *)(v2 + 160) = v47;
      v48 = v2 + 144;
LABEL_8:
      outlined release of Slice<AttributedString.UnicodeScalarView>(v48);
      free((void *)v2);
      return;
    }
    __break(1u);
    goto LABEL_11;
  }
  v49 = *(_OWORD *)(*a1 + 336);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(*a1 + 320);
  *(_OWORD *)(v2 + 48) = v49;
  v50 = v3[8];
  v51 = v3[6];
  *(_OWORD *)(v2 + 112) = v3[7];
  *(_OWORD *)(v2 + 128) = v50;
  v52 = v3[5];
  *(_OWORD *)(v2 + 64) = v3[4];
  *(_OWORD *)(v2 + 80) = v52;
  *(_OWORD *)(v2 + 96) = v51;
  v53 = v3[1];
  *(_OWORD *)v2 = *v3;
  *(_OWORD *)(v2 + 16) = v53;
  if (v6 < v5[1] >> 10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v5[5] >> 10 >= *(_QWORD *)(v2 + 1952) >> 10)
  {
    v104 = *(_QWORD *)(v2 + 1952);
    v95 = v4;
    v100 = *(_QWORD *)(v2 + 1968);
    v102 = *(_QWORD *)(v2 + 1976);
    v98 = *(_QWORD *)(v2 + 1960);
    v54 = *(_QWORD *)(v2 + 1944);
    v55 = *(_QWORD *)(v2 + 1936);
    v56 = *(_QWORD *)(v2 + 1928);
    v57 = (_OWORD *)*v5;
    v59 = *(_OWORD *)(*v5 + 32);
    v58 = *(_OWORD *)(*v5 + 48);
    *(_OWORD *)(v2 + 1312) = *(_OWORD *)(*v5 + 16);
    *(_OWORD *)(v2 + 1328) = v59;
    *(_OWORD *)(v2 + 1344) = v58;
    v60 = v57[1];
    v61 = v57[3];
    *(_OWORD *)(v2 + 1760) = v57[2];
    *(_OWORD *)(v2 + 1776) = v61;
    *(_OWORD *)(v2 + 1744) = v60;
    outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)(v2 + 1744), v2 + 1792);
    outlined retain of Locale(v2 + 1792);
    v96 = MEMORY[0x186DA3EC0](v95, v56, v55, v54);
    v63 = v62;
    v65 = v64;
    v67 = v66;
    outlined release of Locale(v2 + 1312);
    v69 = v57[2];
    v68 = v57[3];
    *(_OWORD *)(v2 + 1360) = v57[1];
    *(_OWORD *)(v2 + 1376) = v69;
    *(_OWORD *)(v2 + 1392) = v68;
    v70 = v57[1];
    v71 = v57[3];
    *(_OWORD *)(v2 + 1712) = v57[2];
    *(_OWORD *)(v2 + 1728) = v71;
    *(_OWORD *)(v2 + 1696) = v70;
    outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)(v2 + 1696), v2 + 1872);
    outlined retain of Locale(v2 + 1872);
    v72 = MEMORY[0x186DA3EC0](v104, v98, v100, v102);
    v74 = v73;
    v76 = v75;
    v78 = v77;
    outlined release of Locale(v2 + 1360);
    *(_QWORD *)(v2 + 1184) = v96;
    *(_QWORD *)(v2 + 1192) = v63;
    *(_QWORD *)(v2 + 1200) = v65;
    *(_QWORD *)(v2 + 1208) = v67;
    *(_QWORD *)(v2 + 1216) = v72;
    *(_QWORD *)(v2 + 1224) = v74;
    *(_QWORD *)(v2 + 1232) = v76;
    *(_QWORD *)(v2 + 1240) = v78;
    v79 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v2 + 1248) = *(_OWORD *)v2;
    *(_OWORD *)(v2 + 1264) = v79;
    v80 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v2 + 1280) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v2 + 1296) = v80;
    v81 = *(_OWORD **)(v2 + 64);
    v82 = v81[3];
    v83 = v81[1];
    *(_OWORD *)(v2 + 1424) = v81[2];
    *(_OWORD *)(v2 + 1440) = v82;
    *(_OWORD *)(v2 + 1408) = v83;
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined retain of Locale(v2 + 1408);
    BigString.subscript.getter();
    outlined release of Locale(v2 + 1408);
    outlined release of Locale(v2 + 544);
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    v84 = v81[2];
    v85 = v81[3];
    *(_OWORD *)(v2 + 768) = v81[1];
    *(_OWORD *)(v2 + 784) = v84;
    v86 = *(_OWORD *)(v2 + 592);
    v87 = *(_OWORD *)(v2 + 608);
    *(_OWORD *)(v2 + 800) = v85;
    *(_OWORD *)(v2 + 816) = v86;
    v88 = *(_OWORD *)(v2 + 624);
    v89 = *(_OWORD *)(v2 + 640);
    *(_OWORD *)(v2 + 832) = v87;
    *(_OWORD *)(v2 + 848) = v88;
    *(_OWORD *)(v2 + 864) = v89;
    swift_unknownObjectRetain();
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v2 + 1184, v2 + 768);
    outlined release of Slice<AttributedString.UnicodeScalarView>(v2);
    swift_unknownObjectRelease();
    v48 = v2;
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.CharacterView(unint64_t *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[3];
  __int128 v18[3];
  _BYTE v19[40];

  v2 = *result >> 10;
  v3 = v1[1] >> 10;
  if (v2 >= v3 && v1[5] >> 10 >= v2)
  {
    v5 = result;
    v6 = *v1;
    v7 = *(_OWORD *)(*v1 + 16);
    v8 = *(_OWORD *)(*v1 + 48);
    v17[1] = *(_OWORD *)(*v1 + 32);
    v17[2] = v8;
    v17[0] = v7;
    v9 = *(_OWORD *)(v6 + 16);
    v18[1] = *(_OWORD *)(v6 + 32);
    v18[2] = v8;
    v18[0] = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v18, (uint64_t)v19);
    outlined retain of Locale((uint64_t)v19);
    v10 = BigString.index(before:)();
    v12 = v11;
    v14 = v13;
    v16 = v15;
    result = (unint64_t *)outlined release of Locale((uint64_t)v17);
    if (v3 <= v10 >> 10)
    {
      *v5 = v10;
      v5[1] = v12;
      v5[2] = v14;
      v5[3] = v16;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString.CharacterView()
{
  uint64_t v0;

  swift_unknownObjectRetain();
  v0 = BigSubstring.distance(from:to:)();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.CharacterView()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  _OWORD v5[5];

  v1 = v0[3];
  v5[2] = v0[2];
  v5[3] = v1;
  v5[4] = v0[4];
  v2 = v0[1];
  v5[0] = *v0;
  v5[1] = v2;
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  outlined release of AttributedString.Runs((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.CharacterView(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.CharacterView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(__int128 *, _QWORD *))
{
  _QWORD *v4;
  _QWORD *v5;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43[48];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50[48];
  char v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[10];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v5 = v4;
  v10 = (_OWORD *)*v4;
  v11 = *a1 >> 11;
  v12 = a1[4] >> 11;
  v34 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v11, v12);
  v35 = v13;
  v14 = v10[2];
  v58[7] = v10[1];
  v58[8] = v14;
  v58[9] = v10[3];
  BigString.utf8.getter();
  v15 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v43);
  v16 = v10[2];
  v36 = v10[1];
  v37 = v16;
  v17 = *(_OWORD *)(v5 + 1);
  v38 = v10[3];
  v39 = v17;
  v18 = *(_OWORD *)(v5 + 5);
  v40 = *(_OWORD *)(v5 + 3);
  v41 = v18;
  v42 = *(_OWORD *)(v5 + 7);
  swift_unknownObjectRetain();
  BigString.init()();
  v19 = v45;
  v10[1] = v44;
  v10[2] = v19;
  v10[3] = v46;
  swift_unknownObjectRelease();
  v20 = a1;
  v21 = v15;
  a4(&v36, v20);
  v58[4] = v40;
  v58[5] = v41;
  v58[6] = v42;
  v58[0] = v36;
  v58[1] = v37;
  v58[2] = v38;
  v58[3] = v39;
  v61 = v41;
  v62 = v42;
  v59 = v39;
  v60 = v40;
  BigSubstring.base.getter();
  v22 = v48;
  v10[1] = v47;
  v10[2] = v22;
  v10[3] = v49;
  swift_unknownObjectRelease();
  v23 = v60;
  *(_OWORD *)(v5 + 1) = v59;
  *(_OWORD *)(v5 + 3) = v23;
  v24 = v62;
  *(_OWORD *)(v5 + 5) = v61;
  *(_OWORD *)(v5 + 7) = v24;
  v25 = v10[2];
  v55 = v10[1];
  v56 = v25;
  v57 = v10[3];
  BigString.utf8.getter();
  v26 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v50);
  v28 = v26 - v21;
  if (__OFSUB__(v26, v21))
  {
    __break(1u);
    goto LABEL_8;
  }
  v29 = v12 - v11 + v28;
  if (__OFADD__(v12 - v11, v28))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v11, v12, v29, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = v10[2];
  v52 = v10[1];
  v53 = v30;
  v54 = v10[3];
  BigString.utf8.getter();
  v31 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v51);
  v32 = v31 - v21;
  if (__OFSUB__(v31, v21))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v33 = v35 + v32;
  if (__OFADD__(v35, v32))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = v34;
  if (v33 >= v34)
  {
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v34, v33, 1, 0);
    return outlined release of Locale((uint64_t)v58);
  }
LABEL_11:
  __break(1u);
  return result;
}

void closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _BYTE *v10;
  uint64_t v11;

  v9 = MEMORY[0x1E0C80A78](a1);
  if (*v10 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a5, v9);
    BigSubstring.replaceSubrange<A>(_:with:)();
  }
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance AttributedString.CharacterView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  BigString.init()();
  v16 = 0;
  MEMORY[0x186DA9E90](&v16, 8);
  v2 = v16;
  type metadata accessor for AttributedString.Guts();
  v3 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v5 = v18;
    *(_OWORD *)(v3 + 16) = v17;
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v19;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = v2;
    v6 = BigString.startIndex.getter();
    v8 = v7;
    v10 = v9;
    v12 = v11;
    result = BigString.endIndex.getter();
    *a1 = v3;
    a1[1] = v6;
    a1[2] = v8;
    a1[3] = v10;
    a1[4] = v12;
    a1[5] = result;
    a1[6] = v13;
    a1[7] = v14;
    a1[8] = v15;
    a1[9] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance AttributedString.CharacterView(uint64_t *a1, __int128 *a2, ValueMetadata *a3)
{
  AttributedString.CharacterView.replaceSubrange<A>(_:with:)(a1, a2, a3);
  return (*((uint64_t (**)(__int128 *, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance AttributedString.CharacterView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a1[1], a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance AttributedString.CharacterView(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[8];

  v2 = *a1;
  v3 = a1[1];
  v4 = v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v8[0] = v1[5];
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  v8[4] = v8[0];
  v8[5] = v4;
  v8[6] = v5;
  v8[7] = v6;
  specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(v8, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance AttributedString.CharacterView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[8];

  v2 = *a1;
  v3 = a1[1];
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v8[0] = *a2;
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  v8[4] = v8[0];
  v8[5] = v4;
  v8[6] = v5;
  v8[7] = v6;
  specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(v8, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance AttributedString.CharacterView(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, *a2, a2[1], a2[2], a2[3], a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance AttributedString.CharacterView@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  unint64_t v4;

  result = specialized RangeReplaceableCollection.remove(at:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t *protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance AttributedString.CharacterView(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = a1[3];
  v4[2] = a1[2];
  v4[3] = v2;
  return specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)v4);
}

void protocol witness for RangeReplaceableCollection.removeFirst() in conformance AttributedString.CharacterView(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  specialized RangeReplaceableCollection.removeFirst()();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst(_:) in conformance AttributedString.CharacterView(uint64_t a1)
{
  return specialized RangeReplaceableCollection.removeFirst(_:)(a1, (_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t, _OWORD *))AttributedString.CharacterView._index(_:offsetBy:limitedBy:), (uint64_t (*)(__int128 *))specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance AttributedString.CharacterView(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[24];
  uint64_t v21;

  if ((result & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 40);
    if (v2 >> 10 >= *(_QWORD *)(v1 + 8) >> 10)
    {
      v3 = *(_QWORD *)(v1 + 64);
      v4 = *(_QWORD *)(v1 + 32);
      *(_QWORD *)v19 = *(_QWORD *)(v1 + 8);
      *(_OWORD *)&v19[8] = *(_OWORD *)(v1 + 16);
      *(_QWORD *)&v19[24] = v4;
      *(_QWORD *)v20 = v2;
      *(_OWORD *)&v20[8] = *(_OWORD *)(v1 + 48);
      v21 = v3;
      return (uint64_t)specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)((uint64_t *)v19);
    }
    __break(1u);
    goto LABEL_8;
  }
  swift_release();
  BigString.init()();
  v18 = 0;
  MEMORY[0x186DA9E90](&v18, 8);
  v5 = v18;
  type metadata accessor for AttributedString.Guts();
  v6 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v7 = *(_OWORD *)&v19[16];
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v19;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)v20;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = v5;
  v8 = BigString.startIndex.getter();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  result = BigString.endIndex.getter();
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v8;
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)(v1 + 24) = v12;
  *(_QWORD *)(v1 + 32) = v14;
  *(_QWORD *)(v1 + 40) = result;
  *(_QWORD *)(v1 + 48) = v15;
  *(_QWORD *)(v1 + 56) = v16;
  *(_QWORD *)(v1 + 64) = v17;
  *(_QWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance AttributedString.CharacterView(uint64_t (*a1)(_QWORD *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

uint64_t specialized Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v7 = a3;
  v8 = a2;
  v53 = a1;
  v54 = a2;
  v55 = a3;
  v10 = (_QWORD *)*v3;
  if (!*(_QWORD *)(*v3 + 16))
  {
    swift_unknownObjectRetain();
    v11 = a1;
LABEL_38:
    v50 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x186DA9E90](&v50, 8);
    v41 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v43 = v10[2];
    v42 = v10[3];
    if (v43 >= v42 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v10);
    v10[2] = v43 + 1;
    v44 = &v10[4 * v43];
    v44[4] = v11;
    v44[5] = v8;
    v44[6] = v7;
    v44[7] = v41;
LABEL_43:
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    *v48 = v10;
    return result;
  }
  swift_unknownObjectRetain();
  v11 = a1;
  while (1)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v13 = v10[2];
      if (!v13)
        goto LABEL_33;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      v10 = (_QWORD *)result;
      v13 = *(_QWORD *)(result + 16);
      if (!v13)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        v49 = 0;
        swift_unknownObjectRetain();
        MEMORY[0x186DA9E90](&v49, 8);
        v31 = specialized static Rope.join(_:_:)((uint64_t)v3, v6, v4, v5, v11, v8, v7);
        v33 = v32;
        v35 = v34;
        v37 = v36;
        v38 = v10[2];
        v39 = v10[3];
        swift_unknownObjectRetain();
        if (v38 >= v39 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v38 + 1, 1, v10);
        v10[2] = v38 + 1;
        v40 = &v10[4 * v38];
        v40[4] = v31;
        v40[5] = v33;
        v40[6] = v35;
        v40[7] = v37;
        swift_unknownObjectRelease();
        goto LABEL_43;
      }
    }
    v14 = v13 - 1;
    v15 = (unint64_t)(v10 + 4);
    v16 = &v10[4 * v14 + 4];
    v3 = (_QWORD *)*v16;
    v6 = v16[1];
    v4 = v16[2];
    v5 = v16[3];
    v10[2] = v14;
    if (!v3)
      break;
    while (*((unsigned __int8 *)v3 + 18) < *(unsigned __int8 *)(v11 + 18))
    {
LABEL_9:
      v17 = v10[2];
      if (!v17)
        goto LABEL_34;
      v18 = v17 - 1;
      v19 = (uint64_t *)(v15 + 32 * v18);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      v10[2] = v18;
      result = specialized static Rope.join(_:_:)(v20, v21, v22, v23, (uint64_t)v3, v6, v4);
      v3 = (_QWORD *)result;
      v6 = v24;
      v4 = v25;
      v5 = v26;
      if (!result)
        goto LABEL_8;
    }
    v50 = v3;
    v51 = v6;
    v52 = v4;
    v27 = *(unsigned __int8 *)(v11 + 18);
    if (*((unsigned __int8 *)v3 + 18) != v27)
      goto LABEL_16;
    v3 = &v50;
    v28 = specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)&v53);
    v11 = (uint64_t)v50;
    v8 = v51;
    v7 = v52;
    if (v28)
    {
      swift_unknownObjectRelease();
LABEL_25:
      v53 = v11;
      goto LABEL_26;
    }
    v15 = *((unsigned __int8 *)v50 + 18) + 1;
    v30 = v15 >> 8;
    if ((v15 & 0x100) != 0)
      goto LABEL_47;
    v47 = v53;
    v5 = v54;
    v6 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    v4 = swift_allocObject();
    *(_WORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 18) = v15;
    v15 = v8 + v5;
    if (__OFADD__(v8, v5))
      goto LABEL_48;
    v3 = (_QWORD *)(v7 + v6);
    if (__OFADD__(v7, v6))
      goto LABEL_49;
    specialized closure #1 in static Rope._Node.createInner(children:_:)((_WORD *)(v4 + 16), v4 + 24, v11, v8, v7, v47, v5, v6);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v53 = v4;
    v8 += v5;
    v7 += v6;
    v11 = v4;
LABEL_26:
    v54 = v8;
    v55 = v7;
    if (!v10[2])
      goto LABEL_38;
  }
LABEL_8:
  if (*(_BYTE *)(v11 + 18))
    goto LABEL_9;
  v50 = 0;
  v51 = v6;
  v52 = v4;
  v27 = *(unsigned __int8 *)(v11 + 18);
  if (!*(_BYTE *)(v11 + 18))
    goto LABEL_52;
LABEL_16:
  if (*(_WORD *)(v11 + 16) != 15 || *((_WORD *)v3 + 8) == 15)
  {
LABEL_44:
    v15 = v10[2];
    v46 = v10[3];
    v47 = v15 + 1;
    swift_unknownObjectRetain();
    v30 = v46;
    if (v15 < v46 >> 1)
    {
LABEL_45:
      v10[2] = v47;
      v45 = &v10[4 * v15];
      v45[4] = v3;
      v45[5] = v6;
      v45[6] = v4;
      v45[7] = v5;
      swift_unknownObjectRelease();
      goto LABEL_38;
    }
LABEL_50:
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v47, 1, v10);
    goto LABEL_45;
  }
  if (v3)
  {
    v29 = *((unsigned __int8 *)v3 + 18);
    v27 = *(unsigned __int8 *)(v11 + 18);
  }
  else
  {
    v29 = 0;
  }
  v30 = (v27 + 1);
  if (((v30 >> 8) & 1) != 0)
  {
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v29 != v30)
    goto LABEL_44;
  if (v3)
  {
    v3 = &v50;
    specialized Rope._Node._appendNode(_:)(v11, v8, v7);
    v11 = (uint64_t)v50;
    v8 = v51;
    v7 = v52;
    goto LABEL_25;
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t specialized static Rope.join(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v7 = a1;
  if (!a5)
    return v7;
  if (!*(_WORD *)(a5 + 16))
  {
    swift_unknownObjectRelease();
    return v7;
  }
  if (!a1)
    return a5;
  if (!*(_WORD *)(a1 + 16))
  {
    swift_unknownObjectRelease();
    return a5;
  }
  v35 = a1;
  v36 = a2;
  v37 = a3;
  v32 = a5;
  v33 = a6;
  v34 = a7;
  if (*(unsigned __int8 *)(a1 + 18) < *(unsigned __int8 *)(a5 + 18))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    result = specialized Rope._Node._graftFront(_:)(v31, &v35);
    if (!result)
    {
      v18 = v32;
      v30 = 0;
      swift_unknownObjectRetain();
      MEMORY[0x186DA9E90](&v30, 8);
      goto LABEL_20;
    }
    v12 = result;
    v13 = *(unsigned __int8 *)(result + 18) + 1;
    if (((v13 >> 8) & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v14 = v10;
      v15 = v11;
      v16 = v33;
      v29 = v32;
      v17 = v34;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
      v18 = swift_allocObject();
      *(_WORD *)(v18 + 16) = 0;
      result = v18 + 16;
      *(_BYTE *)(v18 + 18) = v13;
      if (!__OFADD__(v14, v16))
      {
        if (!__OFADD__(v15, v17))
        {
          specialized closure #1 in static Rope._Node.createInner(children:_:)((_WORD *)result, v18 + 24, v12, v14, v15, v29, v16, v17);
          v30 = 0;
          MEMORY[0x186DA9E90](&v30, 8);
          swift_unknownObjectRelease();
LABEL_20:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
LABEL_22:
          swift_unknownObjectRelease();
          return v18;
        }
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  result = specialized Rope._Node._graftBack(_:)(v31, &v32);
  if (!result)
  {
    v18 = v35;
    v30 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x186DA9E90](&v30, 8);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
  v21 = v35;
  v22 = *(unsigned __int8 *)(v35 + 18) + 1;
  if (((v22 >> 8) & 1) != 0)
    goto LABEL_27;
  v23 = result;
  v24 = v19;
  v25 = v20;
  v27 = v36;
  v26 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
  v28 = swift_allocObject();
  *(_WORD *)(v28 + 16) = 0;
  result = v28 + 16;
  *(_BYTE *)(v28 + 18) = v22;
  if (__OFADD__(v27, v24))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (!__OFADD__(v26, v25))
  {
    specialized closure #1 in static Rope._Node.createInner(children:_:)((_WORD *)result, v28 + 24, v21, v27, v26, v23, v24, v25);
    v30 = 0;
    MEMORY[0x186DA9E90](&v30, 8);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v28;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder._insertBeforeTip(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;

  v4 = v3;
  v50 = a1;
  *(_QWORD *)&v51 = a2;
  *((_QWORD *)&v51 + 1) = a3;
  if (*(_BYTE *)(a1 + 18))
  {
    v9 = v3[4];
    v8 = v3[5];
    v10 = v3[6];
    v3[5] = 0;
    v3[6] = 0;
    v3[4] = 0;
    if (v8)
    {
      v11 = v3[1];
      v12 = *((_OWORD *)v3 + 1);
      v3[2] = 0;
      v3[3] = 0;
      v3[1] = 0;
      if (!v11)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        v11 = swift_allocObject();
        *(_WORD *)(v11 + 16) = 0;
        *(_BYTE *)(v11 + 18) = 0;
        v12 = 0uLL;
      }
      v44 = v11;
      v47 = v12;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v9, v8, v10);
      if (*(_WORD *)(v44 + 16) == 15)
      {
        specialized Rope.Builder._appendNow(_:)(v44, v47, *((uint64_t *)&v47 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3[1] = v44;
        *((_OWORD *)v3 + 1) = v47;
      }
    }
    else
    {
      swift_unknownObjectRetain();
    }
    v24 = v3[1];
    v25 = v3[2];
    v26 = v3[3];
    v3[2] = 0;
    v3[3] = 0;
    v3[1] = 0;
    if (v24)
      specialized Rope.Builder._appendNow(_:)(v24, v25, v26);
    specialized Rope.Builder._appendNow(_:)(a1, a2, a3);
    return swift_unknownObjectRelease();
  }
  if (*(_WORD *)(a1 + 16) != 1)
  {
    v29 = v3[4];
    v28 = v3[5];
    v30 = v3[6];
    v3[5] = 0;
    v3[6] = 0;
    v3[4] = 0;
    if (v28)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (specialized Rope._Node.insert(_:at:)(v29, v28, v30, 0))
      {
        v33 = v31;
        v34 = v32;
        v35 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v35, v51, *((_QWORD *)&v51 + 1));
        v36 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v36, v33, v34);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_33:
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
    }
    v37 = v3[1];
    v38 = *((_OWORD *)v3 + 1);
    v3[2] = 0;
    v3[3] = 0;
    v3[1] = 0;
    if (v37)
    {
      v46 = v37;
      v49 = v38;
      v39 = v37;
      if (specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)&v50) && *(_WORD *)(v46 + 16) != 15)
      {
        swift_unknownObjectRelease();
        result = swift_unknownObjectRelease();
        v4[1] = v39;
        v43 = v49;
        goto LABEL_39;
      }
      specialized Rope.Builder._appendNow(_:)(v46, v49, *((uint64_t *)&v49 + 1));
    }
    v40 = v50;
    if (*(_WORD *)(v50 + 16) == 15)
    {
      v41 = v51;
      v42 = swift_unknownObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v42, v41, *((uint64_t *)&v41 + 1));
      goto LABEL_33;
    }
    result = swift_unknownObjectRelease();
    v4[1] = v40;
    v43 = v51;
LABEL_39:
    *((_OWORD *)v4 + 1) = v43;
    return result;
  }
  swift_unknownObjectRetain();
  v13 = specialized Rope._Node.subscript.getter(0, a1);
  v15 = v14;
  v17 = v16;
  if (v13)
  {
    v18 = v13;
    v19 = v3[5];
    if (v19)
    {
      v20 = v3[4];
      v21 = v3[6];
      v22 = v3[1];
      v23 = *((_OWORD *)v3 + 1);
      v3[2] = 0;
      v3[3] = 0;
      v3[1] = 0;
      if (!v22)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        v22 = swift_allocObject();
        *(_WORD *)(v22 + 16) = 0;
        *(_BYTE *)(v22 + 18) = 0;
        v23 = 0uLL;
      }
      v45 = v22;
      v48 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v20, v19, v21);
      if (*(_WORD *)(v45 + 16) == 15)
      {
        specialized Rope.Builder._appendNow(_:)(v45, v48, *((uint64_t *)&v48 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3[1] = v45;
        *((_OWORD *)v3 + 1) = v48;
      }
      swift_unknownObjectRelease_n();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      result = swift_unknownObjectRelease_n();
    }
    v3[4] = v18;
    v3[5] = v15;
    v3[6] = v17;
  }
  else
  {
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL specialized Rope._Node.rebalance(nextNeighbor:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v9;
  __int128 v10;

  v3 = *v1;
  v4 = *(unsigned __int16 *)(*v1 + 16);
  v5 = *(_QWORD *)a1;
  if (*(_WORD *)(*v1 + 16))
  {
    v6 = *(unsigned __int16 *)(v5 + 16);
    if (v4 >= 8 && v6 >= 8)
    {
      return 0;
    }
    else
    {
      specialized static Rope._Node.redistributeChildren(_:_:to:)(v1, (uint64_t *)a1, (unint64_t)(v6 + v4) >> ((unint64_t)(v6 + v4) > 0xF));
      return *(_WORD *)(*(_QWORD *)a1 + 16) == 0;
    }
  }
  else
  {
    v9 = *(_OWORD *)(a1 + 8);
    *v1 = v5;
    v10 = *(_OWORD *)(v1 + 1);
    *(_OWORD *)(v1 + 1) = v9;
    *(_QWORD *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v10;
    return 1;
  }
}

uint64_t specialized Rope._Node._appendNode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;

  result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    v8 = v3[1];
  }
  else
  {
    v9 = specialized Rope._Node.copy()(*v3);
    v8 = v10;
    v12 = v11;
    result = swift_unknownObjectRelease();
    *v3 = v9;
    v3[1] = v8;
    v3[2] = v12;
  }
  if (__OFADD__(v8, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  v3[1] = v8 + a2;
  v13 = v3[2];
  v14 = __OFADD__(v13, a3);
  v15 = v13 + a3;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3[2] = v15;
  v16 = *v3;
  v17 = *(unsigned __int16 *)(*v3 + 16);
  v18 = (_QWORD *)(*v3 + 24 * *(unsigned __int16 *)(*v3 + 16));
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  if (v17 != 0xFFFF)
  {
    *(_WORD *)(v16 + 16) = v17 + 1;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = swift_isUniquelyReferenced_nonNull();
  v10 = *v4;
  if ((result & 1) == 0)
  {
    v10 = specialized Rope._Node.copy()(*v4);
    v12 = v11;
    v14 = v13;
    result = swift_unknownObjectRelease();
    *v4 = v10;
    v4[1] = v12;
    v4[2] = v14;
  }
  v15 = (a4 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF;
  v16 = *(unsigned __int16 *)(v10 + 16);
  if (*(_BYTE *)(v10 + 18))
  {
    if (v15 < v16)
    {
      MEMORY[0x1E0C80A78](result);
      v18 = specialized Rope._Node._innerInsert(at:with:)(v17, (_QWORD *(*)(_QWORD *__return_ptr, _QWORD *))partial apply for specialized closure #1 in Rope._Node.insert(_:at:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    __break(1u);
  }
  else if (v15 <= v16)
  {
    return specialized Rope._Node._leafInsert(_:at:)(a1, a2, a3, v15);
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._leafInsert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_WORD *)(*(_QWORD *)v4 + 16) != 15)
  {
    specialized Rope._Node._insertItem(_:at:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a4 < 8)
  {
    v9 = specialized Rope._Node.split(keeping:)(7);
    specialized Rope._Node._insertItem(_:at:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return v9;
  }
  v9 = specialized Rope._Node.split(keeping:)(8);
  v11 = v10;
  v13 = v12;
  v14 = *(unsigned __int16 *)(*(_QWORD *)v4 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    v16 = specialized Rope._Node.copy()(v9);
    v11 = v17;
    v13 = v18;
    result = swift_unknownObjectRelease();
    v9 = v16;
  }
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else if (!__OFADD__(v13, a1))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(a1, a2, a3, a4 - v14, (_WORD *)(v9 + 16), v9 + 24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._innerInsert(at:with:)(uint64_t result, _QWORD *(*a2)(_QWORD *__return_ptr, _QWORD *))
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v3 = v2;
  v4 = v2[1];
  v5 = *v2 + 24 * result;
  v7 = *(_QWORD *)(v5 + 32);
  v6 = (_QWORD *)(v5 + 32);
  v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = v2[2];
  v10 = v6 + 1;
  v11 = v6[1];
  v12 = v9 - v11;
  if (__OFSUB__(v9, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = result;
  swift_unknownObjectRetain();
  result = (uint64_t)a2(v21, v6 - 1);
  v15 = __OFADD__(v8, *v6);
  v16 = v8 + *v6;
  if (v15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v17 = v12 + *v10;
  if (__OFADD__(v12, *v10))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v19 = v21[0];
  v18 = v21[1];
  v20 = v21[2];
  swift_unknownObjectRelease();
  v3[1] = v16;
  v3[2] = v17;
  if (v19)
    return specialized Rope._Node._applySpawn(_:of:)(v19, v18, v20, v14);
  else
    return 0;
}

uint64_t specialized Rope._Node.split(keeping:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = *(_BYTE *)(*v2 + 18);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 18) = v5;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 18) = 0;
  }
  v14 = v6;
  if (*(unsigned __int16 *)(v4 + 16) <= a1)
    return v6;
  if (a1 < 1)
  {
    v2[1] = 0;
    v2[2] = 0;
    *v2 = v6;
  }
  else
  {
    isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
    v8 = *v2;
    if ((isUniquelyReferenced_nonNull & 1) == 0)
    {
      v8 = specialized Rope._Node.copy()(*v2);
      v10 = v9;
      v12 = v11;
      swift_unknownObjectRelease();
      *v2 = v8;
      v2[1] = v10;
      v2[2] = v12;
    }
    specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v2, *(unsigned __int16 *)(v8 + 16) - a1);
    return v14;
  }
  return v4;
}

uint64_t specialized Rope._Node._applySpawn(_:of:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36[3];

  v36[0] = result;
  v36[1] = a2;
  v36[2] = a3;
  v5 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  v7 = a3;
  v8 = a2;
  v9 = result;
  if (a4 >= 1)
  {
    v10 = *v4;
    v11 = *v4 + 24;
    v12 = v11 + 24 * a4;
    v14 = *(_QWORD *)(v12 - 24);
    v13 = (uint64_t *)(v12 - 24);
    v15 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 24 * a4) + 16) + (unint64_t)*(unsigned __int16 *)(v14 + 16);
    if (v15 >= 0x10)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
LABEL_8:
      swift_unknownObjectRelease();
      v8 = a2;
      goto LABEL_9;
    }
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized static Rope._Node.redistributeChildren(_:_:to:)(v13, (uint64_t *)(v11 + 24 * a4), v15);
    specialized Rope._UnsafeHandle._removeChild(at:)(a4, (_WORD *)(v10 + 16), v11);
    result = swift_unknownObjectRelease();
    v16 = __OFSUB__(v5--, 1);
    if (!v16)
    {
      v7 = a3;
      goto LABEL_8;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_unknownObjectRetain();
LABEL_9:
  v17 = *(unsigned __int16 *)(*v4 + 16);
  if (v5 < v17)
  {
    v18 = *v4 + 24 * v5;
    v20 = *(_QWORD *)(v18 + 24);
    v19 = (uint64_t *)(v18 + 24);
    if (*(unsigned __int16 *)(v20 + 16) + (unint64_t)*(unsigned __int16 *)(v9 + 16) <= 0xF)
    {
      swift_unknownObjectRetain();
      specialized static Rope._Node.redistributeChildren(_:_:to:)(v36, v19, 0);
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      v26 = v4[1];
      v16 = __OFADD__(v26, v8);
      v27 = v26 + v8;
      if (!v16)
      {
        v4[1] = v27;
        v28 = v4[2];
        v16 = __OFADD__(v28, v7);
        v29 = v28 + v7;
        if (!v16)
        {
          v21 = 0;
          v4[2] = v29;
          goto LABEL_24;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
  if ((_DWORD)v17 != 15)
  {
    specialized Rope._Node._insertNode(_:at:)(v9, v8, v7, v5);
    swift_unknownObjectRelease();
    v21 = 0;
LABEL_24:
    swift_unknownObjectRelease();
    return v21;
  }
  v21 = specialized Rope._Node.split(keeping:)(7);
  v23 = v22;
  v25 = v24;
  if (v5 < 8)
  {
    specialized Rope._Node._insertNode(_:at:)(v9, v8, v7, v5);
LABEL_23:
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  v30 = *(unsigned __int16 *)(*v4 + 16);
  swift_unknownObjectRetain();
  result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    v31 = specialized Rope._Node.copy()(v21);
    v23 = v32;
    v25 = v33;
    result = swift_unknownObjectRelease();
    v21 = v31;
  }
  if (__OFADD__(v23, v8))
    goto LABEL_29;
  if (!__OFADD__(v25, v7))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(v9, v8, v7, v5 - v30, (_WORD *)(v21 + 16), v21 + 24);
    swift_unknownObjectRelease_n();
    goto LABEL_23;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._insertChild(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v13;
  uint64_t result;
  int v15;

  v6 = (unsigned __int16)*a5;
  v7 = __OFSUB__(v6, a4);
  v8 = v6 - a4;
  if (v7)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
    v13 = (_QWORD *)(a6 + 24 * a4);
    result = (uint64_t)memmove(v13 + 3, v13, 24 * v8);
    *v13 = a1;
    v13[1] = a2;
    v13[2] = a3;
    v15 = (unsigned __int16)*a5;
    if (v15 != 0xFFFF)
    {
      *a5 = v15 + 1;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._graftBack(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v6 = specialized Rope._Node.copy()(*v2);
    v8 = v7;
    v10 = v9;
    swift_unknownObjectRelease();
    *v3 = v6;
    v3[1] = v8;
    v3[2] = v10;
  }
  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  v12 = *a2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    v12 = specialized Rope._Node.copy()(*a2);
    v14 = v13;
    v16 = v15;
    swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }
  if (*(unsigned __int8 *)(v12 + 18) >= *(unsigned __int8 *)(*v3 + 18))
  {
    v34 = v3[1];
    v33 = v3[2];
    if (specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)a2))
      result = 0;
    else
      result = swift_unknownObjectRetain();
    v35 = v3[1];
    v25 = __OFSUB__(v35, v34);
    v36 = v35 - v34;
    if (!v25)
    {
      v37 = v3[2];
      v25 = __OFSUB__(v37, v33);
      v38 = v37 - v33;
      if (!v25)
      {
        *a1 = v36;
        a1[1] = v38;
        return result;
      }
      goto LABEL_29;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_unknownObjectRetain();
  v17 = specialized Rope._Node._graftBack(_:)(&v39, a2);
  v19 = v18;
  v21 = v20;
  result = swift_unknownObjectRelease();
  v23 = v39;
  v24 = v3[1];
  v25 = __OFADD__(v24, v39);
  v26 = v24 + v39;
  if (v25)
  {
    __break(1u);
    goto LABEL_27;
  }
  v27 = v40;
  v3[1] = v26;
  v28 = v3[2];
  v25 = __OFADD__(v28, v27);
  v29 = v28 + v27;
  if (v25)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v3[2] = v29;
  if (!v17)
  {
    result = 0;
    goto LABEL_23;
  }
  if (*(_WORD *)(*v3 + 16) != 15)
  {
    v25 = __OFADD__(v23, v19);
    v23 += v19;
    if (v25)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v25 = __OFADD__(v27, v21);
    v27 += v21;
    if (v25)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    specialized Rope._Node._appendNode(_:)(v17, v19, v21);
    result = 0;
LABEL_23:
    *a1 = v23;
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  result = specialized Rope._Node.split(keeping:)(7);
  v39 = result;
  v40 = v31;
  v41 = v30;
  v32 = v23 - v31;
  if (__OFSUB__(v23, v31))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v25 = __OFSUB__(v27, v30);
  v27 -= v30;
  if (v25)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  specialized Rope._Node._appendNode(_:)(v17, v19, v21);
  swift_unknownObjectRelease();
  result = v39;
  *a1 = v32;
LABEL_24:
  a1[1] = v27;
  return result;
}

uint64_t specialized Rope._Node._graftFront(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v6 = specialized Rope._Node.copy()(*v2);
    v8 = v7;
    v10 = v9;
    swift_unknownObjectRelease();
    *v3 = v6;
    v3[1] = v8;
    v3[2] = v10;
  }
  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  v12 = *a2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    v12 = specialized Rope._Node.copy()(*a2);
    v14 = v13;
    v16 = v15;
    swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }
  if (*(unsigned __int8 *)(v12 + 18) >= *(unsigned __int8 *)(*v3 + 18))
  {
    v40 = a2[1];
    v39 = a2[2];
    result = specialized Rope._Node.rebalance(nextNeighbor:)((uint64_t)v3);
    if ((result & 1) != 0)
    {
      v30 = 0;
      v41 = *v3;
      v42 = *(_OWORD *)(a2 + 1);
      *v3 = *a2;
      v43 = *(_OWORD *)(v3 + 1);
      *(_OWORD *)(v3 + 1) = v42;
      *a2 = v41;
      *(_OWORD *)(a2 + 1) = v43;
      *a1 = v40;
      a1[1] = v39;
      return v30;
    }
    v44 = a2[1];
    if (!__OFSUB__(v40, v44))
    {
      v45 = a2[2];
      if (!__OFSUB__(v39, v45))
      {
        v30 = *a2;
        *a1 = v40 - v44;
        a1[1] = v39 - v45;
        swift_unknownObjectRetain();
        return v30;
      }
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_unknownObjectRetain();
  v17 = specialized Rope._Node._graftFront(_:)(v47, a2);
  v19 = v18;
  v21 = v20;
  result = swift_unknownObjectRelease();
  v23 = v47[0];
  v24 = v3[1];
  v25 = __OFADD__(v24, v47[0]);
  v26 = v24 + v47[0];
  if (v25)
  {
    __break(1u);
    goto LABEL_28;
  }
  v27 = v47[1];
  v3[1] = v26;
  v28 = v3[2];
  v25 = __OFADD__(v28, v27);
  v29 = v28 + v27;
  if (v25)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v3[2] = v29;
  if (!v17)
  {
    v30 = 0;
    *a1 = v23;
    a1[1] = v27;
    return v30;
  }
  if (*(_WORD *)(*v3 + 16) != 15)
  {
    if (!__OFADD__(v23, v19))
    {
      if (!__OFADD__(v27, v21))
      {
        specialized Rope._Node._insertNode(_:at:)(v17, v19, v21, 0);
        swift_unknownObjectRelease();
        v30 = 0;
        *a1 = v23 + v19;
        a1[1] = v27 + v21;
        return v30;
      }
      goto LABEL_35;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  swift_unknownObjectRetain();
  result = specialized Rope._Node.split(keeping:)(7);
  v30 = *v3;
  v31 = v3[1];
  v32 = v3[2];
  *v3 = result;
  v3[1] = v33;
  v3[2] = v34;
  if (__OFSUB__(v23, v31))
    goto LABEL_31;
  v25 = __OFSUB__(v27, v32);
  v35 = v27 - v32;
  if (v25)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  result = swift_isUniquelyReferenced_nonNull();
  v46 = v23 - v31;
  if ((result & 1) == 0)
  {
    v36 = specialized Rope._Node.copy()(v30);
    v31 = v37;
    v32 = v38;
    result = swift_unknownObjectRelease();
    v30 = v36;
  }
  if (__OFADD__(v31, v19))
    goto LABEL_33;
  if (!__OFADD__(v32, v21))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized Rope._UnsafeHandle._insertChild(_:at:)(v17, v19, v21, 0, (_WORD *)(v30 + 16), v30 + 24);
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    *a1 = v46;
    a1[1] = v35;
    return v30;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._innerSplit(at:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = v2;
  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  v7 = *v2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    v7 = specialized Rope._Node.copy()(v7);
    v9 = v8;
    v11 = v10;
    swift_unknownObjectRelease();
    *v3 = v7;
    v3[1] = v9;
    v3[2] = v11;
  }
  v12 = *(unsigned __int16 *)(v7 + 16);
  if (v12 - 2 == a1)
  {
    v13 = specialized Rope._Node._removeNode(at:)(v12 - 1);
    v15 = v14;
    v17 = v16;
    v52 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x186DA9E90](&v52, 8);
    v18 = v52;
    v19 = *(_QWORD **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
    v19[2] = v21 + 1;
    v22 = &v19[4 * v21];
    v22[4] = v13;
    v22[5] = v15;
    v22[6] = v17;
    v22[7] = v18;
    swift_unknownObjectRelease();
    *(_QWORD *)(a2 + 80) = v19;
  }
  if (a1 == 1)
  {
    v23 = specialized Rope._Node._removeNode(at:)(0);
    specialized Rope.Builder._insertBeforeTip(_:)(v23, v24, v25);
    a1 = 0;
  }
  v26 = specialized Rope._Node._removeNode(at:)(a1);
  v27 = *v3;
  v28 = v3[1];
  v29 = v3[2];
  *v3 = v26;
  v3[1] = v30;
  v3[2] = v31;
  v52 = v27;
  v53 = v28;
  v54 = v29;
  if (!*(_WORD *)(v27 + 16))
    return swift_unknownObjectRelease();
  if (a1)
  {
    if (a1 == *(unsigned __int16 *)(v27 + 16))
    {
      return specialized Rope.Builder._insertBeforeTip(_:)(v27, v28, v29);
    }
    else
    {
      v38 = specialized Rope._Node.split(keeping:)(a1);
      v40 = v39;
      v42 = v41;
      v43 = v53;
      v44 = v54;
      v45 = swift_unknownObjectRetain();
      specialized Rope.Builder._insertBeforeTip(_:)(v45, v43, v44);
      v51 = 0;
      swift_unknownObjectRetain();
      MEMORY[0x186DA9E90](&v51, 8);
      v46 = v51;
      v47 = *(_QWORD **)(a2 + 80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
      v49 = v47[2];
      v48 = v47[3];
      if (v49 >= v48 >> 1)
        v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
      v47[2] = v49 + 1;
      v50 = &v47[4 * v49];
      v50[4] = v38;
      v50[5] = v40;
      v50[6] = v42;
      v50[7] = v46;
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      *(_QWORD *)(a2 + 80) = v47;
    }
  }
  else
  {
    v51 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x186DA9E90](&v51, 8);
    v33 = v51;
    v34 = *(_QWORD **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
    v36 = v34[2];
    v35 = v34[3];
    if (v36 >= v35 >> 1)
      v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
    v34[2] = v36 + 1;
    v37 = &v34[4 * v36];
    v37[4] = v27;
    v37[5] = v28;
    v37[6] = v29;
    v37[7] = v33;
    result = swift_unknownObjectRelease();
    *(_QWORD *)(a2 + 80) = v34;
  }
  return result;
}

uint64_t specialized Rope.Builder.insertBeforeTip(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v6 = result;
    v7 = v3[4];
    v8 = v3[5];
    v9 = v3[6];
    v3[5] = 0;
    v3[6] = 0;
    v3[4] = 0;
    if (v8)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v7, v8, v9);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(v3[4], v3[5]);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    v3[4] = v6;
    v3[5] = a2;
    v3[6] = a3;
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Rope._Node._removeNode(at:)(uint64_t a1)
{
  uint64_t *v1;
  char isUniquelyReferenced_nonNull;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  v4 = *v1;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    v4 = specialized Rope._Node.copy()(*v1);
    v6 = v5;
    v8 = v7;
    swift_unknownObjectRelease();
    *v1 = v4;
    v1[1] = v6;
    v1[2] = v8;
  }
  swift_unknownObjectRetain();
  v9 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v4 + 16), v4 + 24);
  v11 = v10;
  v13 = v12;
  result = swift_unknownObjectRelease();
  v15 = v1[1];
  v16 = __OFSUB__(v15, v11);
  v17 = v15 - v11;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    v1[1] = v17;
    v18 = v1[2];
    v16 = __OFSUB__(v18, v13);
    v19 = v18 - v13;
    if (!v16)
    {
      v1[2] = v19;
      return v9;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder._insertBeforeTip(slots:in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 1)
      return swift_unknownObjectRelease();
    if (v4 != 1)
    {
      specialized Rope._Node.copy(slots:)(result, a2, a3);
      v8 = v7;
      v10 = v9;
      v11 = swift_unknownObjectRetain();
LABEL_7:
      specialized Rope.Builder._insertBeforeTip(_:)(v11, v8, v10);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    v5 = a3 + 24;
    if (*(_BYTE *)(a3 + 18))
    {
      v6 = v5 + 24 * result;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = *(_QWORD *)(v6 + 16);
      v11 = swift_unknownObjectRetain_n();
      goto LABEL_7;
    }
    v12 = (uint64_t *)(v5 + 24 * result);
    v13 = *v12;
    if (!*v12)
      return swift_unknownObjectRelease();
    v15 = v12[1];
    v14 = v12[2];
    v16 = v3[4];
    v17 = v3[5];
    v18 = v3[6];
    v3[5] = 0;
    v3[6] = 0;
    v3[4] = 0;
    if (v17)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      specialized Rope.Builder._appendNow(_:)(v16, v17, v18);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(v3[4], v3[5]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    result = swift_unknownObjectRelease();
    v3[4] = v13;
    v3[5] = v15;
    v3[6] = v14;
  }
  return result;
}

uint64_t specialized Rope.Builder._insertAfterTip(slots:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v9 < 1)
    return swift_unknownObjectRelease();
  if (v9 != 1)
  {
    v4 = specialized Rope._Node.copy(slots:)(a1, a2, a3);
    v5 = v22;
    v6 = v23;
    v37 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x186DA9E90](&v37, 8);
    v8 = v37;
    v7 = *(_QWORD **)(v3 + 80);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_12:
      v26 = v7[2];
      v25 = v7[3];
      v27 = v26 + 1;
      if (v26 >= v25 >> 1)
      {
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v7);
        v27 = v26 + 1;
        v7 = v33;
      }
      v7[2] = v27;
      v28 = &v7[4 * v26];
      v28[4] = v4;
      v28[5] = v5;
      v28[6] = v6;
      v28[7] = v8;
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      *(_QWORD *)(v3 + 80) = v7;
      return result;
    }
LABEL_18:
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    goto LABEL_12;
  }
  v10 = a3 + 24;
  if (!*(_BYTE *)(a3 + 18))
  {
    v29 = (uint64_t *)(v10 + 24 * a1);
    v30 = *v29;
    v31 = v29[1];
    v32 = v29[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._insertAfterTip(_:)(v30, v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  v11 = (uint64_t *)(v10 + 24 * a1);
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v37 = 0;
  swift_unknownObjectRetain_n();
  MEMORY[0x186DA9E90](&v37, 8);
  v15 = v37;
  v16 = *(_QWORD **)(v3 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  v17 = v16[2];
  v18 = v16[3];
  v19 = v17 + 1;
  if (v17 >= v18 >> 1)
  {
    v34 = v16;
    v35 = v16[2];
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v17 + 1, 1, v34);
    v17 = v35;
    v16 = v36;
  }
  v16[2] = v19;
  v20 = &v16[4 * v17];
  v20[4] = v12;
  v20[5] = v13;
  v20[6] = v14;
  v20[7] = v15;
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v3 + 80) = v16;
  return result;
}

_WORD *specialized Rope.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *v4;
  v10 = v4[3];
  v11 = swift_unknownObjectRetain();
  v12 = specialized Rope._endPath.getter(v11);
  result = (_WORD *)swift_unknownObjectRelease();
  if (v12 == a4)
    return specialized Rope.append(_:)(a1, a2, a3);
  if (!v9)
    goto LABEL_14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = (_WORD *)specialized Rope._Node.insert(_:at:)(a1, a2, a3, a4);
  if (!result)
  {
    swift_bridgeObjectRelease();
    result = (_WORD *)swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v16 = *v4;
  v17 = *(unsigned __int8 *)(*v4 + 18) + 1;
  if (((v17 >> 8) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v18 = (uint64_t)result;
    v26 = v15;
    v20 = v4[1];
    v19 = v4[2];
    v21 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    v22 = swift_allocObject();
    v23 = v21;
    v24 = v22;
    *(_WORD *)(v22 + 16) = 0;
    result = (_WORD *)(v22 + 16);
    *(_BYTE *)(v24 + 18) = v17;
    v25 = v20 + v23;
    if (!__OFADD__(v20, v23))
    {
      if (!__OFADD__(v19, v26))
      {
        specialized closure #1 in static Rope._Node.createInner(children:_:)(result, v24 + 24, v16, v20, v19, v18, v23, v26);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = (_WORD *)swift_bridgeObjectRelease();
        *v4 = v24;
        v4[1] = v25;
        v4[2] = v19 + v26;
LABEL_10:
        v4[3] = v10 + 1;
        return result;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

_WORD *specialized Rope._Node.copy(slots:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  _WORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_BYTE *)(a3 + 18);
  v7 = a2 - a1;
  v8 = __OFSUB__(a2, a1);
  if (*(_BYTE *)(a3 + 18))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
    v9 = swift_allocObject();
    *(_WORD *)(v9 + 16) = 0;
    result = (_WORD *)(v9 + 16);
    *(_BYTE *)(v9 + 18) = v6;
    if (v8)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    result = (_WORD *)specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(result, v9 + 24, v7, a3 + 24, a1, a2);
    if (*(_WORD *)(v9 + 16))
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(v9 + v11 + 32);
        v15 = __OFADD__(v13, v14);
        v13 += v14;
        if (v15)
          break;
        v16 = *(_QWORD *)(v9 + v11 + 40);
        v15 = __OFADD__(v12, v16);
        v12 += v16;
        if (v15)
          goto LABEL_19;
        v11 += 24;
        if (24 * *(unsigned __int16 *)(v9 + 16) == v11)
          return (_WORD *)v9;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    return (_WORD *)v9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
  v9 = swift_allocObject();
  *(_WORD *)(v9 + 16) = 0;
  result = (_WORD *)(v9 + 16);
  *(_BYTE *)(v9 + 18) = 0;
  if (!v8)
  {
    result = (_WORD *)specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(result, v9 + 24, v7, a3 + 24, a1, a2);
    if (*(_WORD *)(v9 + 16))
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(v9 + v17 + 24);
        v15 = __OFADD__(v18, v19);
        v18 += v19;
        if (v15)
          break;
        v17 += 24;
        if (24 * *(unsigned __int16 *)(v9 + 16) == v17)
          return (_WORD *)v9;
      }
      goto LABEL_20;
    }
    return (_WORD *)v9;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._leafRemoveSuffix(returning:into:)(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 == 1)
  {
    v9 = a3[3];
    v10 = a3[5];
    v8 = a3[6];
    if (v9)
    {
      v11 = a3[4];
      v13 = a2[4];
      v12 = a2[5];
      v14 = a2[6];
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;
      if (v12)
      {
        v34 = v14;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v13, v12, v34);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(a2[4], a2[5]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      a2[4] = v9;
      a2[5] = v11;
      a2[6] = v10;
      return v8;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_21:
    swift_unknownObjectRelease();
    return v8;
  }
  if (!a1)
  {
    v8 = a3[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  swift_unknownObjectRetain();
  result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) != 0)
  {
    v18 = (uint64_t)a3;
  }
  else
  {
    v18 = specialized Rope._Node.copy()((uint64_t)a3);
    a4 = v19;
    a5 = v20;
    result = swift_unknownObjectRelease();
  }
  v21 = *(unsigned __int16 *)(v18 + 16);
  if (v21 - 1 <= a1)
    goto LABEL_15;
  v22 = __OFSUB__(v21, a1);
  v23 = v21 - a1;
  if (v22)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v24 = v23 - 1;
  if (__OFSUB__(v23, 1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_unknownObjectRetain();
  v25 = specialized Rope._UnsafeHandle._removeSuffix(_:)(v24, (_WORD *)(v18 + 16), v18 + 24);
  v27 = v26;
  result = swift_unknownObjectRelease();
  v22 = __OFSUB__(a4, v25);
  a4 -= v25;
  if (v22)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v22 = __OFSUB__(a5, v27);
  a5 -= v27;
  if (!v22)
  {
LABEL_15:
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v28 = specialized Rope._Node.copy()(v18);
      a4 = v29;
      a5 = v30;
      swift_unknownObjectRelease();
      v18 = v28;
    }
    swift_unknownObjectRetain();
    v8 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v18 + 16), v18 + 24);
    result = swift_unknownObjectRelease();
    v22 = __OFSUB__(a4, 1);
    v31 = a4 - 1;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      v22 = __OFSUB__(a5, v8);
      v32 = a5 - v8;
      if (!v22)
      {
        v33 = swift_unknownObjectRetain();
        specialized Rope.Builder._insertBeforeTip(_:)(v33, v31, v32);
        swift_unknownObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._innerRemovePrefix(descending:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v4 = a1;
  v5 = *v2;
  v6 = *(unsigned __int16 *)(*v2 + 16);
  if (v6 - 1 == a1)
  {
    v7 = (_QWORD *)(v5 + 24 * a1);
    v8 = v7[3];
    v9 = v7[4];
    v10 = v7[5];
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
    *v2 = v8;
    v2[1] = v9;
    v2[2] = v10;
    return result;
  }
  if (v6 - 2 == a1)
  {
    v13 = (uint64_t *)(v5 + 24 + 24 * a1);
    v14 = *v13;
    v42 = v13[1];
    v15 = v13[2];
    v16 = (uint64_t *)(v5 + 24 + 24 * ((int)v6 - 1));
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v44 = 0;
    swift_unknownObjectRetain();
    MEMORY[0x186DA9E90](&v44, 8);
    v20 = v44;
    v21 = *(_QWORD **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v23 = v21[2];
    v22 = v21[3];
    v24 = v23 + 1;
    if (v23 >= v22 >> 1)
    {
      v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
      v24 = v23 + 1;
      v21 = v41;
    }
    v21[2] = v24;
    v25 = &v21[4 * v23];
    v25[4] = v17;
    v25[5] = v18;
    v25[6] = v19;
    v25[7] = v20;
    result = swift_unknownObjectRelease();
    *(_QWORD *)(a2 + 80) = v21;
    *v2 = v14;
    v2[1] = v42;
    v2[2] = v15;
    return result;
  }
  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  v27 = *v2;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    v27 = specialized Rope._Node.copy()(*v2);
    v5 = v28;
    v30 = v29;
    swift_unknownObjectRelease();
    *v2 = v27;
    v2[1] = v5;
    v2[2] = v30;
  }
  v31 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  v3 = v27 + 24;
  v32 = v27 + 24 + 24 * v4;
  v5 = *(_QWORD *)v32;
  v43 = *(_OWORD *)(v32 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v33 = specialized Rope._UnsafeHandle._removePrefix(_:)(v4 + 1, (_WORD *)(v27 + 16), (char *)(v27 + 24));
  v4 = v34;
  swift_unknownObjectRelease();
  v35 = v2[1];
  v36 = __OFSUB__(v35, v33);
  v31 = v35 - v33;
  if (v36)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v37 = v2[2];
  v3 = v37 - v4;
  if (__OFSUB__(v37, v4))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v4 = *v2;
  *v2 = v5;
  *(_OWORD *)(v2 + 1) = v43;
  v44 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x186DA9E90](&v44, 8);
  v5 = v44;
  v2 = *(uint64_t **)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_21:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  v39 = v2[2];
  v38 = v2[3];
  if (v39 >= v38 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v2);
  v2[2] = v39 + 1;
  v40 = &v2[4 * v39];
  v40[4] = v4;
  v40[5] = v31;
  v40[6] = v3;
  v40[7] = v5;
  result = swift_unknownObjectRelease();
  *(_QWORD *)(a2 + 80) = v2;
  return result;
}

uint64_t specialized Rope._Node._leafRemovePrefix(returning:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = a1;
  v8 = *(unsigned __int16 *)(a3 + 16);
  if (v8 - 1 == a1)
  {
    v7 = *(_QWORD *)(a3 + 24 * a1 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  if (v8 - 2 == a1)
  {
    v7 = *(_QWORD *)(a3 + 24 + 24 * a1);
    v10 = (uint64_t *)(a3 + 24 + 24 * ((int)v8 - 1));
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.Builder._insertAfterTip(_:)(v11, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
  {
    v16 = a3;
  }
  else
  {
    v16 = specialized Rope._Node.copy()(a3);
    a4 = v17;
    a5 = v18;
    swift_unknownObjectRelease();
  }
  v19 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v28 = a2;
  v5 = v16 + 24;
  v7 = *(_QWORD *)(v16 + 24 + 24 * v7);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = specialized Rope._UnsafeHandle._removePrefix(_:)(v19, (_WORD *)(v16 + 16), (char *)(v16 + 24));
  v19 = v21;
  swift_unknownObjectRelease();
  if (__OFSUB__(a4, v20))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v22 = __OFSUB__(a5, v19);
  v19 = (uint64_t)a5 - v19;
  if (v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v27 = a4 - v20;
  v29 = 0;
  swift_unknownObjectRetain_n();
  MEMORY[0x186DA9E90](&v29, 8);
  v5 = v29;
  a5 = *(_QWORD **)(v28 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v24 = a5[2];
  v23 = a5[3];
  if (v24 >= v23 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, a5);
  a5[2] = v24 + 1;
  v25 = &a5[4 * v24];
  v25[4] = v16;
  v25[5] = v27;
  v25[6] = v19;
  v25[7] = v5;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_QWORD *)(v28 + 80) = a5;
LABEL_15:
  swift_unknownObjectRelease();
  return v7;
}

uint64_t specialized Rope._UnsafeHandle._removePrefix(_:)(uint64_t result, _WORD *a2, char *__dst)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;

  if (result < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = 0;
  v6 = 0;
  v7 = result;
  if (result)
  {
    v8 = (uint64_t *)(__dst + 16);
    v9 = result;
    while (1)
    {
      v10 = *(v8 - 1);
      v11 = *v8;
      result = swift_unknownObjectRelease();
      v12 = __OFADD__(v6, v10);
      v6 += v10;
      if (v12)
        break;
      v12 = __OFADD__(v5, v11);
      v5 += v11;
      if (v12)
        goto LABEL_13;
      v8 += 3;
      if (!--v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_7:
  v13 = (unsigned __int16)*a2 - v7;
  if (v13 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *a2 = v13;
  v14 = &__dst[24 * v7];
  if (v7 > 0 || &v14[24 * (unsigned __int16)v13] <= __dst)
    memmove(__dst, v14, 24 * (unsigned __int16)v13);
  return v6;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;

  if (result < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = 0;
  v6 = result;
  if (result)
  {
    v7 = __dst + 16;
    v8 = result;
    while (1)
    {
      v9 = *((_QWORD *)v7 - 2);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v10 = __OFADD__(v5, v9);
      v5 += v9;
      if (v10)
        break;
      v7 += 24;
      if (!--v8)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_6:
  v11 = (unsigned __int16)*a2 - v6;
  if (v11 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  *a2 = v11;
  v12 = &__dst[24 * v6];
  if (v6 > 0 || &v12[24 * (unsigned __int16)v11] <= __dst)
    memmove(__dst, v12, 24 * (unsigned __int16)v11);
  return v6;
}

uint64_t specialized Rope._UnsafeHandle._removeSuffix(_:)(uint64_t result, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v3 = (unsigned __int16)*a2;
  v4 = v3 - result;
  v5 = __OFSUB__(v3, result);
  if (__OFSUB__(v3, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v4 > v3)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v4 == v3)
  {
    v7 = 0;
    goto LABEL_16;
  }
  if (v4 < v3)
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    v10 = 24 * (unsigned __int16)*a2 - 24 * result + a3 + 16;
    do
    {
      v11 = *(_QWORD *)(v10 - 16);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v12 = __OFADD__(v9, v11);
      v9 += v11;
      if (v12)
        goto LABEL_21;
      v10 += 24;
      ++v8;
    }
    while (v7 != v8);
    v13 = (unsigned __int16)*a2;
    v12 = __OFSUB__(v13, v7);
    v4 = v13 - v7;
    v5 = v12;
LABEL_16:
    if (!v5)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        if (!((unint64_t)v4 >> 16))
        {
          *a2 = v4;
          return v7;
        }
        goto LABEL_26;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.insert(_:at:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = specialized Rope._Node.insert(_:at:)(v5, v6, v7, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  return result;
}

uint64_t specialized Rope._Node._insertNode(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    v9 = v4[1];
  }
  else
  {
    v10 = specialized Rope._Node.copy()(*v4);
    v9 = v11;
    v13 = v12;
    result = swift_unknownObjectRelease();
    *v4 = v10;
    v4[1] = v9;
    v4[2] = v13;
  }
  if (__OFADD__(v9, a2))
  {
    __break(1u);
  }
  else
  {
    v4[1] = v9 + a2;
    v14 = v4[2];
    v15 = __OFADD__(v14, a3);
    v16 = v14 + a3;
    if (!v15)
    {
      v4[2] = v16;
      v17 = *v4;
      swift_unknownObjectRetain();
      v18 = swift_unknownObjectRetain();
      specialized Rope._UnsafeHandle._insertChild(_:at:)(v18, a2, a3, a4, (_WORD *)(v17 + 16), v17 + 24);
      return swift_unknownObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._insertItem(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    v10 = v4[1];
  }
  else
  {
    v11 = specialized Rope._Node.copy()(*v4);
    v10 = v12;
    v14 = v13;
    result = swift_unknownObjectRelease();
    *v4 = v11;
    v4[1] = v10;
    v4[2] = v14;
  }
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v4[1] = v10 + 1;
    v15 = v4[2];
    v16 = __OFADD__(v15, a1);
    v17 = v15 + a1;
    if (!v16)
    {
      v4[2] = v17;
      v18 = *v4;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._UnsafeHandle._insertChild(_:at:)(a1, a2, a3, a4, (_WORD *)(v18 + 16), v18 + 24);
      return swift_unknownObjectRelease();
    }
  }
  __break(1u);
  return result;
}

_WORD *specialized Rope.prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v7;

  ++v3[3];
  if (*v3)
  {
    v7 = *(unsigned __int8 *)(*v3 + 18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = 0;
  }
  return specialized Rope.insert(_:at:)(a1, a2, a3, v7);
}

uint64_t specialized closure #1 in Rope._UnsafeHandle.copy(slots:)(_WORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;

  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a3 >> 16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *a1 = a3;
  v7 = a6 - a5;
  if (!__OFSUB__(a6, a5))
  {
    if (v7 < 0)
      goto LABEL_19;
    v8 = (_QWORD *)a2;
    v9 = a4 + 24 * a5;
    if (v9 < a2 + 24 * v7 && v9 + 24 * v7 > a2)
      goto LABEL_19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Item);
    swift_arrayInitWithCopy();
    v11 = 0;
    if (!a3)
      return 0;
    result = ((a3 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v13 = 24 * a3;
    while (1)
    {
      v14 = __OFADD__(v11, *v8);
      v11 += *v8;
      if (v14)
        break;
      v8 += 3;
      v13 -= 24;
      if (!v13)
        return result;
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  unint64_t v9;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a3 >> 16)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *a1 = a3;
  v7 = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v7 < 0)
    goto LABEL_20;
  v9 = a4 + 24 * a5;
  if (v9 < a2 + 24 * v7 && v9 + 24 * v7 > a2)
    goto LABEL_20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Node);
  swift_arrayInitWithCopy();
  v11 = 0;
  result = 0;
  if (a3)
  {
    v13 = (_QWORD *)(a2 + 16);
    v14 = 24 * a3;
    while (1)
    {
      v15 = *(v13 - 1);
      v16 = __OFADD__(result, v15);
      result += v15;
      if (v16)
        break;
      v16 = __OFADD__(v11, *v13);
      v11 += *v13;
      if (v16)
        goto LABEL_16;
      v13 += 3;
      v14 -= 24;
      if (!v14)
        return result;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t specialized closure #2 in Rope._Node.removeSuffix<A>(from:in:into:)(unsigned __int16 *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a3;
  result = *a1;
  if ((_DWORD)result)
  {
    v6 = v4 - *a2;
    if (!__OFSUB__(v4, *a2))
    {
      if (__OFADD__(v6, 1))
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (v6 + 1 < 1)
        return 0;
      if ((_DWORD)result == 1)
      {
        v4 -= *a2;
        goto LABEL_13;
      }
      v7 = a2 + 3;
      v8 = 1;
      while (1)
      {
        v9 = *v7;
        v7 += 3;
        v4 = v6 - v9;
        if (__OFSUB__(v6, v9))
          break;
        if (__OFADD__(v4, 1))
          goto LABEL_17;
        if (v4 + 1 < 1)
          return v8;
        ++v8;
        v6 = v4;
        if (result == v8)
          goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if (v4)
LABEL_20:
    __break(1u);
  return result;
}

uint64_t specialized Rope._Node.removeSuffix<A>(from:in:into:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  const void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;

  v5 = a3;
  v67 = a1;
  if (a1 < 1)
    return swift_unknownObjectRelease();
  v6 = a5;
  v9 = a1;
  if (a1 >= a5)
  {
    swift_unknownObjectRetain();
LABEL_52:
    v61 = swift_unknownObjectRetain();
    specialized Rope.Builder._insertBeforeTip(_:)(v61, a4, v6);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  v10 = *(unsigned __int8 *)(a3 + 18);
  swift_unknownObjectRetain();
  v66 = a2;
  if (v10)
  {
    while (1)
    {
      v11 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16))
        goto LABEL_72;
      v12 = *(_QWORD *)(v5 + 40);
      v13 = v9 - v12;
      if (__OFSUB__(v9, v12))
        break;
      if (v13 <= 0)
      {
        v30 = *(_QWORD *)(v5 + 24);
        a4 = *(_QWORD *)(v5 + 32);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        goto LABEL_42;
      }
      if ((_DWORD)v11 == 1)
        goto LABEL_72;
      v14 = v6;
      v6 = *(_QWORD *)(v5 + 64);
      v9 = v13 - v6;
      if (__OFSUB__(v13, v6))
        goto LABEL_61;
      if (v9 < 1)
      {
        v67 = v13;
        v31 = *(_QWORD *)(v5 + 24);
        v32 = *(_QWORD *)(v5 + 32);
        v34 = *(_QWORD *)(v5 + 48);
        v33 = *(_QWORD *)(v5 + 56);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        v35 = v31;
        a4 = v33;
        a2 = v66;
        specialized Rope.Builder._insertBeforeTip(_:)(v35, v32, v12);
        v5 = v34;
        v9 = v13;
        goto LABEL_43;
      }
      if ((_DWORD)v11 == 2)
        goto LABEL_72;
      v15 = v14;
      v16 = 0;
      v17 = 2 - v11;
      v18 = 112;
      v19 = 3;
      while (1)
      {
        if (v17 + v19 == 3)
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        v20 = *(_QWORD *)(v5 + 88 + v16);
        v21 = __OFSUB__(v9, v20);
        v22 = v9 - v20;
        if (v21)
          goto LABEL_57;
        if (v22 < 1)
          break;
        ++v19;
        v16 += 24;
        v18 += 24;
        v9 = v22;
        if (v17 + v19 == 3)
          goto LABEL_72;
      }
      v67 = v9;
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        v23 = specialized Rope._Node.copy()(v5);
        a4 = v24;
        v15 = v25;
        swift_unknownObjectRelease();
        v5 = v23;
      }
      v26 = *(unsigned __int16 *)(v5 + 16);
      if (v19 - 1 >= v26 - 1)
        goto LABEL_35;
      if (v19 > v26)
        goto LABEL_65;
      v65 = v15;
      if (v26 != v19)
      {
        v64 = a4;
        if (v19 >= v26)
          goto LABEL_70;
        swift_unknownObjectRetain();
        v27 = 0;
        v28 = 0;
        v36 = (uint64_t *)(v5 + v18);
        v63 = v26;
        while (1)
        {
          v37 = *(v36 - 1);
          v38 = *v36;
          swift_unknownObjectRelease();
          v21 = __OFADD__(v28, v37);
          v28 += v37;
          if (v21)
            goto LABEL_58;
          v21 = __OFADD__(v27, v38);
          v27 += v38;
          if (v21)
            goto LABEL_59;
          v36 += 3;
          if (v19 == --v26)
          {
            v29 = *(unsigned __int16 *)(v5 + 16);
            a2 = v66;
            v26 = v63;
            a4 = v64;
            goto LABEL_31;
          }
        }
      }
      swift_unknownObjectRetain();
      v27 = 0;
      v28 = 0;
      v29 = v26;
LABEL_31:
      v39 = v29 - v26 + v19;
      if (v39 < 0)
        goto LABEL_66;
      if ((unint64_t)v39 >> 16)
        goto LABEL_67;
      *(_WORD *)(v5 + 16) = v39;
      swift_unknownObjectRelease();
      v21 = __OFSUB__(a4, v28);
      a4 -= v28;
      if (v21)
        goto LABEL_68;
      v15 = v65 - v27;
      if (__OFSUB__(v65, v27))
        goto LABEL_69;
LABEL_35:
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        v40 = specialized Rope._Node.copy()(v5);
        a4 = v41;
        v15 = v42;
        swift_unknownObjectRelease();
        v5 = v40;
      }
      v43 = *(unsigned __int16 *)(v5 + 16) - v19;
      if (v43 < 0)
        goto LABEL_73;
      v44 = v15;
      v45 = a4;
      v46 = (_QWORD *)(v5 + v16);
      v47 = (const void *)(v5 + v16 + 96);
      v30 = *(_QWORD *)(v5 + v16 + 72);
      v48 = v46[10];
      v46 += 9;
      v12 = v46[2];
      memmove(v46, v47, 24 * v43);
      v49 = *(unsigned __int16 *)(v5 + 16);
      swift_unknownObjectRetain();
      if (!v49)
        goto LABEL_62;
      *(_WORD *)(v5 + 16) = v49 - 1;
      swift_unknownObjectRelease();
      if (__OFSUB__(v45, v48))
        goto LABEL_63;
      if (__OFSUB__(v44, v12))
        goto LABEL_64;
      specialized Rope.Builder._insertBeforeTip(_:)(v5, v45 - v48, v44 - v12);
      a4 = v48;
LABEL_42:
      v6 = v12;
      v5 = v30;
LABEL_43:
      if (v9 >= v6)
        goto LABEL_52;
      if (!*(_BYTE *)(v5 + 18))
        goto LABEL_45;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_45:
  v50 = specialized closure #2 in Rope._Node.removeSuffix<A>(from:in:into:)((unsigned __int16 *)(v5 + 16), (_QWORD *)(v5 + 24), &v67);
  v52 = v51;
  swift_unknownObjectRetain();
  v53 = specialized Rope._Node._leafRemoveSuffix(returning:into:)(v50, a2, (_QWORD *)v5, a4, v6);
  if ((v52 & 0x8000000000000000) == 0 && v53 >= v52)
  {
    v56 = v54;
    v57 = v55;
    if (v52)
    {
      v58 = v66[4];
      v59 = v66[5];
      v60 = v66[6];
      v66[5] = 0;
      v66[6] = 0;
      v66[4] = 0;
      if (v59)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v58, v59, v60);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v66[4], v66[5]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
      v66[4] = v52;
      v66[5] = v56;
      v66[6] = v57;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in Rope.builder<A>(splittingAt:in:)(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a3;
  v5 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result)
    goto LABEL_10;
  v6 = v4 - *a2;
  if (__OFSUB__(v4, *a2))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (v6 < 1)
    return 0;
  if ((_DWORD)v5 != 1)
  {
    v7 = a2 + 3;
    result = 1;
    v4 = v6;
    while (1)
    {
      v8 = *v7;
      v7 += 3;
      v9 = v4 - v8;
      if (__OFSUB__(v4, v8))
        break;
      if (v9 < 1)
        return result;
      ++result;
      v4 = v9;
      if (v5 == result)
        goto LABEL_9;
    }
    __break(1u);
    goto LABEL_15;
  }
  do
  {
LABEL_9:
    __break(1u);
LABEL_10:
    ;
  }
  while (v4);
  return -1;
}

uint64_t specialized Rope._Node.removePrefix<A>(upTo:in:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v6 = a5;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v33 = a1;
  if (a1 >= 1)
  {
    v9 = a1;
    if (a1 < (uint64_t)a5)
    {
      v10 = *(unsigned __int8 *)(a3 + 18);
      result = swift_unknownObjectRetain();
      v12 = a3;
      if (v10)
      {
        v12 = a3;
        while (1)
        {
          v13 = *(unsigned __int16 *)(v12 + 16);
          if (!*(_WORD *)(v12 + 16))
            goto LABEL_38;
          v14 = *(_QWORD *)(v12 + 40);
          v15 = __OFSUB__(v9, v14);
          v16 = v9 - v14;
          if (v15)
            goto LABEL_34;
          if (v16 <= 0)
          {
            result = 0;
          }
          else
          {
            if ((_DWORD)v13 == 1)
              goto LABEL_38;
            v17 = *(_QWORD *)(v12 + 64);
            v9 = v16 - v17;
            if (__OFSUB__(v16, v17))
              goto LABEL_35;
            if (v9 >= 1)
            {
              if ((_DWORD)v13 == 2)
                goto LABEL_38;
              v18 = (_QWORD *)(v12 + 88);
              result = 2;
              while (v13 != result)
              {
                v19 = v9 - *v18;
                if (__OFSUB__(v9, *v18))
                  goto LABEL_33;
                if (v19 < 1)
                  goto LABEL_20;
                ++result;
                v18 += 3;
                v9 = v19;
                if (v13 == result)
                  goto LABEL_38;
              }
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
            result = 1;
            v9 = v16;
          }
LABEL_20:
          result = specialized Rope._Node._innerRemovePrefix(descending:into:)(result, a2);
          v6 = v36;
          if (v9 >= (uint64_t)v36)
          {
            swift_unknownObjectRelease();
            return swift_unknownObjectRelease();
          }
          v12 = v34;
          if (!*(_BYTE *)(v34 + 18))
          {
            v33 = v9;
            break;
          }
        }
      }
      v20 = specialized closure #2 in Rope.builder<A>(splittingAt:in:)(v12 + 16, (_QWORD *)(v12 + 24), &v33);
      v22 = v21;
      v23 = v35;
      swift_unknownObjectRetain();
      result = specialized Rope._Node._leafRemovePrefix(returning:into:)(v20, a2, v12, v23, v6);
      if (v22 < 0 || (v26 = result - v22, result < v22))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        return result;
      }
      v27 = v24;
      v28 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._insertAfterTip(_:)(v26, v27, v28);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
  v12 = a4;
  swift_unknownObjectRetain();
  v32 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x186DA9E90](&v32, 8);
  v5 = v32;
  v9 = *(_QWORD *)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_36:
    v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
  v30 = *(_QWORD *)(v9 + 16);
  v29 = *(_QWORD *)(v9 + 24);
  if (v30 >= v29 >> 1)
    v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, (_QWORD *)v9);
  *(_QWORD *)(v9 + 16) = v30 + 1;
  v31 = (_QWORD *)(v9 + 32 * v30);
  v31[4] = a3;
  v31[5] = v12;
  v31[6] = v6;
  v31[7] = v5;
  result = swift_unknownObjectRelease_n();
  *(_QWORD *)(a2 + 80) = v9;
  return result;
}

uint64_t specialized Rope._Node._removeSubrange<A>(from:to:in:into:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (result < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = result;
  swift_unknownObjectRetain();
  result = specialized Rope.Builder._insertBeforeTip(slots:in:)(0, v11, a6);
  v12 = *(unsigned __int16 *)(a6 + 16);
  if (v12 > a3)
  {
    swift_unknownObjectRetain();
    result = specialized Rope.Builder._insertAfterTip(slots:in:)(a3 + 1, v12, a6);
  }
  v13 = a6 + 24;
  if (*(_BYTE *)(a6 + 18))
  {
    v14 = (uint64_t *)(v13 + 24 * v11);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = (uint64_t *)(v13 + 24 * a3);
    v19 = *v18;
    v20 = v18[1];
    v21 = (_QWORD *)v18[2];
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    specialized Rope._Node.removeSuffix<A>(from:in:into:)(a2, a5, v15, v16, v17);
    swift_unknownObjectRetain();
    specialized Rope._Node.removePrefix<A>(upTo:in:into:)(a4, (uint64_t)a5, v19, v20, v21);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  if ((a4 | a2) < 0)
    goto LABEL_21;
  v22 = (uint64_t *)(v13 + 24 * v11);
  v23 = (uint64_t *)(v13 + 24 * a3);
  v24 = *v23;
  if (*v22 < a2 || v24 < a4)
    goto LABEL_21;
  v26 = v22[1];
  v27 = v22[2];
  v28 = v23[1];
  v29 = v23[2];
  if (a2)
  {
    v30 = a5[4];
    v31 = a5[5];
    v32 = a5[6];
    a5[5] = 0;
    a5[6] = 0;
    a5[4] = 0;
    if (v31)
    {
      v35 = v32;
      v36 = v30;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v36, v31, v35);
      result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
      a5[4] = a2;
      a5[5] = v26;
      a5[6] = v27;
      goto LABEL_17;
    }
    a5[4] = a2;
    a5[5] = v26;
    a5[6] = v27;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
LABEL_17:
  v33 = __OFSUB__(v24, a4);
  v34 = v24 - a4;
  if (!v33)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.Builder._insertAfterTip(_:)(v34, v28, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
LABEL_22:
  __break(1u);
  return result;
}

void specialized AttributedString.CharacterView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30[8];
  _OWORD v31[3];
  _OWORD v32[3];
  __int128 v33[3];
  _BYTE v34[40];
  __int128 v35[3];
  _BYTE v36[48];

  v4 = *a3;
  v5 = (unint64_t)*a3 >> 10;
  if (v5 < v3[1] >> 10)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 >= v3[5] >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = a3[1];
  v7 = a3[2];
  v8 = a3[3];
  v9 = (_OWORD *)*v3;
  v10 = *(_OWORD *)(*v3 + 16);
  v11 = *(_OWORD *)(*v3 + 48);
  v32[1] = *(_OWORD *)(*v3 + 32);
  v32[2] = v11;
  v32[0] = v10;
  v12 = v9[1];
  v33[1] = v9[2];
  v33[2] = v11;
  v33[0] = v12;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v33, (uint64_t)v34);
  outlined retain of Locale((uint64_t)v34);
  v13 = MEMORY[0x186DA3EC0](v4, v6, v7, v8);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  outlined release of Locale((uint64_t)v32);
  v20 = v9[1];
  v21 = v9[3];
  v31[1] = v9[2];
  v31[2] = v21;
  v31[0] = v20;
  v22 = v9[1];
  v35[1] = v9[2];
  v35[2] = v21;
  v35[0] = v22;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v36);
  outlined retain of Locale((uint64_t)v36);
  v23 = BigString.index(after:)();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  outlined release of Locale((uint64_t)v31);
  if (v23 >> 10 >= v13 >> 10)
  {
    v30[0] = v13;
    v30[1] = v15;
    v30[2] = v17;
    v30[3] = v19;
    v30[4] = v23;
    v30[5] = v25;
    v30[6] = v27;
    v30[7] = v29;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v30);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString.CharacterView>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E0DEDE50]);
}

uint64_t sub_181DC3698()
{
  return 0;
}

uint64_t sub_181DC36B0()
{
  return 0;
}

uint64_t partial apply for specialized closure #1 in Rope._Node.insert(_:at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in Rope._Node.insert(_:at:)(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t outlined destroy of (key: String, value: AttributedString._AttributeValue)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(a1, a2, *(_BYTE **)(v2 + 16));
}

void partial apply for closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)(a1, a2, v2[4], v2[5], v2[2]);
}

unint64_t lazy protocol witness table accessor for type BigSubstring and conformance BigSubstring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring;
  if (!lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0D12F38], MEMORY[0x1E0D12F30]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigSubstring and conformance BigSubstring);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._InternalRunsSlice> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._InternalRunsSlice>, MEMORY[0x1E0DEC908]);
}

_QWORD *specialized AttributedString._InternalRunsSlice.updateEach(with:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name, (unint64_t *)&qword_1EDC3E4D8);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name, (unint64_t *)&qword_1EDC3E500);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name, (unint64_t *)&qword_1EDC3E450);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name, (unint64_t *)&qword_1EDC3E490);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name, (unint64_t *)&qword_1EDC3E4A8);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name, (unint64_t *)&qword_1EDC3E478);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, &one-time initialization token for name, (unint64_t *)&static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name, (unint64_t *)&qword_1EDC3E180);
}

_QWORD *specialized AttributedString._InternalRunsSlice.updateEach(with:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, 0xD000000000000012, 0x8000000182303D10);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, 0xD000000000000021, 0x8000000182309B80);
}

{
  return specialized AttributedString._InternalRunsSlice.updateEach(with:)(a1, a2, a3, 0xD00000000000001FLL, 0x8000000182307FA0);
}

_QWORD *specialized AttributedString._InternalRunsSlice.updateEach(with:)(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  int v144;
  char v145;
  char v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  char v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v175;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD v182[2];
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  _OWORD v199[3];
  _OWORD v200[3];
  uint64_t v201;
  uint64_t v202;
  _OWORD v203[2];

  v6 = result + 8;
  v5 = result[8];
  if (v5)
    v7 = result[10];
  else
    v7 = 0;
  if (a2 < 0)
    goto LABEL_391;
  v8 = a2;
  if (v7 < a2)
    goto LABEL_391;
  v9 = a3;
  v10 = result;
  v11 = result[9];
  v12 = result[11];
  v181 = result;
  v170 = result + 8;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      v22 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v19 = v8;
        v18 = (_QWORD *)v5;
LABEL_35:
        v31 = *((unsigned __int16 *)v18 + 8);
        if (*((_WORD *)v18 + 8))
        {
          v32 = v18[3];
          v20 = __OFSUB__(v19, v32);
          v33 = v19 - v32;
          v9 = a3;
          v6 = v170;
          if (v20)
            goto LABEL_409;
          if (__OFADD__(v33, 1))
            goto LABEL_410;
          if (v33 + 1 <= 0)
          {
            v15 = v11;
            v31 = 0;
            goto LABEL_50;
          }
          if ((_DWORD)v31 != 1)
          {
            v34 = v18 + 6;
            v35 = 1;
            while (1)
            {
              v36 = *v34;
              v34 += 3;
              v19 = v33 - v36;
              if (__OFSUB__(v33, v36))
                goto LABEL_397;
              if (__OFADD__(v19, 1))
                goto LABEL_399;
              if (v19 + 1 < 1)
                goto LABEL_334;
              ++v35;
              v33 = v19;
              if (v31 == v35)
                goto LABEL_48;
            }
          }
          v19 = v33;
        }
        else
        {
          v9 = a3;
          v6 = v170;
        }
LABEL_48:
        if (!v19)
        {
          v15 = v11;
          goto LABEL_50;
        }
        goto LABEL_408;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v19 = v8;
      v23 = (_QWORD *)v5;
      while (1)
      {
        v25 = *((unsigned __int16 *)v23 + 8);
        if (!*((_WORD *)v23 + 8))
          goto LABEL_19;
        v26 = v23[5];
        v20 = __OFSUB__(v19, v26);
        v27 = v19 - v26;
        if (v20)
          goto LABEL_376;
        if (__OFADD__(v27, 1))
          goto LABEL_377;
        if (v27 + 1 > 0)
          break;
        v25 = 0;
LABEL_20:
        v24 = (4 * *((_BYTE *)v23 + 18) + 8) & 0x3C;
        v22 = ((-15 << v24) - 1) & v22 | (v25 << v24);
        v18 = (_QWORD *)v23[3 * v25 + 3];
        swift_unknownObjectRetain();
        result = (_QWORD *)swift_unknownObjectRelease();
        v23 = v18;
        if (!*((_BYTE *)v18 + 18))
          goto LABEL_35;
      }
      if ((_DWORD)v25 != 1)
      {
        v28 = v23 + 8;
        v29 = 1;
        while (1)
        {
          v30 = *v28;
          v28 += 3;
          v19 = v27 - v30;
          if (__OFSUB__(v27, v30))
            goto LABEL_344;
          if (__OFADD__(v19, 1))
            break;
          if (v19 + 1 < 1)
          {
            v25 = v29;
            v19 = v27;
            goto LABEL_20;
          }
          ++v29;
          v27 = v19;
          if (v25 == v29)
            goto LABEL_19;
        }
LABEL_345:
        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }
      v19 = v27;
LABEL_19:
      if (v19)
        goto LABEL_370;
      goto LABEL_20;
    }
  }
  v14 = swift_unknownObjectRetain_n();
  v15 = v11;
  v16 = specialized Rope._endPath.getter(v14);
  result = (_QWORD *)swift_unknownObjectRelease();
  v18 = 0;
  v19 = 0;
  if (!v5)
    goto LABEL_51;
LABEL_13:
  swift_unknownObjectRetain();
  v175 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, v15);
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v20 = __OFSUB__(v8, v19);
  v21 = v8 - v19;
  if (v20)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  while (1)
  {
    while (1)
    {
      v177 = v16;
      v11 = *v6;
      if (v8 != v9)
      {
        if (v11)
          v44 = v10[10];
        else
          v44 = 0;
        v45 = v177;
        goto LABEL_108;
      }
      if (!v11)
      {
        if (v8 > 0)
          goto LABEL_378;
        v9 = 0;
        goto LABEL_106;
      }
      v38 = v10[10];
      if (v38 < v8)
        goto LABEL_367;
      v39 = v10[9];
      v40 = v10[11];
      v22 = *(unsigned __int8 *)(v11 + 18);
      v41 = !*(_WORD *)(v11 + 16) || v38 <= v8;
      v179 = v39;
      v172 = v40;
      if (v41)
        break;
      if (!*(_BYTE *)(v11 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v22 = 0;
        v9 = v8;
        v43 = v11;
LABEL_91:
        v51 = *(unsigned __int16 *)(v43 + 16);
        if (*(_WORD *)(v43 + 16))
        {
          v52 = *(_QWORD *)(v43 + 24);
          v20 = __OFSUB__(v9, v52);
          v53 = v9 - v52;
          if (v20)
            goto LABEL_382;
          if (__OFADD__(v53, 1))
            goto LABEL_383;
          if (v53 + 1 <= 0)
          {
            v51 = 0;
          }
          else
          {
            if ((_DWORD)v51 == 1)
            {
              v9 = v53;
              goto LABEL_103;
            }
            v54 = (uint64_t *)(v43 + 48);
            v55 = 1;
            while (1)
            {
              v56 = *v54;
              v54 += 3;
              v9 = v53 - v56;
              if (__OFSUB__(v53, v56))
                goto LABEL_362;
              if (__OFADD__(v9, 1))
                goto LABEL_363;
              if (v9 + 1 < 1)
                break;
              ++v55;
              v53 = v9;
              if (v51 == v55)
                goto LABEL_103;
            }
            v51 = v55;
            v9 = v53;
          }
LABEL_104:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v42 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v51 << 8);
          goto LABEL_105;
        }
LABEL_103:
        if (v9)
          goto LABEL_380;
        goto LABEL_104;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v9 = v8;
      v5 = v11;
LABEL_77:
      v33 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16))
        goto LABEL_75;
      v47 = *(_QWORD *)(v5 + 40);
      v20 = __OFSUB__(v9, v47);
      v35 = v9 - v47;
      if (v20)
        goto LABEL_337;
      if (__OFADD__(v35, 1))
        goto LABEL_338;
      if (v35 + 1 <= 0)
      {
        v33 = 0;
        goto LABEL_76;
      }
      if ((_DWORD)v33 == 1)
      {
        v9 = v35;
LABEL_75:
        if (!v9)
          goto LABEL_76;
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }
      v48 = (uint64_t *)(v5 + 64);
      v49 = 1;
      while (1)
      {
        v50 = *v48;
        v48 += 3;
        v9 = v35 - v50;
        if (__OFSUB__(v35, v50))
          break;
        if (__OFADD__(v9, 1))
          goto LABEL_331;
        if (v9 + 1 < 1)
        {
          v33 = v49;
          v9 = v35;
LABEL_76:
          v46 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
          v22 = ((-15 << v46) - 1) & v22 | (v33 << v46);
          v43 = *(_QWORD *)(v5 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v5 = v43;
          if (!*(_BYTE *)(v43 + 18))
            goto LABEL_91;
          goto LABEL_77;
        }
        ++v49;
        v35 = v9;
        if (v33 == v49)
          goto LABEL_75;
      }
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      v15 = v11;
      v31 = v35;
      v19 = v33;
LABEL_50:
      swift_unknownObjectRelease();
      result = (_QWORD *)swift_unknownObjectRelease();
      v17 = v22 & 0xFFFFFFFFFFFFF0FFLL;
      v16 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v31 << 8);
      v8 = a2;
      v10 = v181;
      if (v5)
        goto LABEL_13;
LABEL_51:
      v175 = 0;
      v20 = __OFSUB__(v8, v19);
      v21 = v8 - v19;
      if (v20)
        goto LABEL_53;
    }
    v42 = ((-15 << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | ((unint64_t)*(unsigned __int16 *)(v11 + 16) << ((4 * v22 + 8) & 0x3C));
    swift_unknownObjectRetain();
    v9 = 0;
    v43 = 0;
LABEL_105:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v172, v42, v43, v11, v179);
    result = (_QWORD *)swift_unknownObjectRelease_n();
    v8 = a2;
    v10 = v181;
LABEL_106:
    v44 = v8 - v9;
    v45 = v177;
    if (__OFSUB__(v8, v9))
      goto LABEL_356;
    v9 = a3;
LABEL_108:
    if (v21 >= v44)
      return result;
    if (v12 != v10[11])
      goto LABEL_346;
    if (v18)
    {
      v57 = &v18[3 * ((v45 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF)];
      v59 = v57[4];
      v58 = v57[5];
      v60 = v57[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    else
    {
      v61 = v10[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v45, v61);
      v59 = v62;
      v58 = v63;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (v12 != v10[11])
        goto LABEL_366;
      v64 = v10[8];
      swift_unknownObjectRetain();
      v60 = specialized Rope._Node.subscript.getter(v177, v64);
      v45 = v177;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v65 = v21 + v60;
    if (__OFADD__(v21, v60))
      goto LABEL_347;
    *(_QWORD *)&v191 = v59;
    *((_QWORD *)&v191 + 1) = v58;
    v66 = v21 >= v9 ? v9 : v21;
    v67 = v21 >= a2 ? v66 : a2;
    v68 = v65 <= a2 ? a2 : v21 + v60;
    v69 = v65 <= v9 ? v68 : v9;
    if (v67 == v69)
      break;
    if (v67 != v21 || v69 != v65)
    {
      v190 = 0;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      result = (_QWORD *)specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v186, a4, a5);
      if (__OFSUB__(v69, v67))
        goto LABEL_358;
      v85 = *((_QWORD *)&v191 + 1);
      v5 = v191;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v67, v69, v69 - v67, v5, v85);
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      v86 = v181;
      v11 = v181[8];
      v12 = v181[10];
      if (v11)
        v87 = v181[10];
      else
        v87 = 0;
      if (v21 < 0 || v87 < v21)
        goto LABEL_360;
      v18 = (_QWORD *)v181[9];
      v178 = (uint64_t)v18;
      v180 = v181[11];
      if (!v11 || !*(_WORD *)(v11 + 16) || v21 >= v12)
      {
        v93 = v6;
        v94 = swift_unknownObjectRetain_n();
        v95 = specialized Rope._endPath.getter(v94);
        swift_unknownObjectRelease();
        v18 = 0;
        v9 = 0;
        if (!v11)
        {
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          v81 = 0;
LABEL_231:
          v9 = a3;
          v96 = v95;
          v6 = v93;
          goto LABEL_232;
        }
LABEL_168:
        swift_unknownObjectRetain();
        v81 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v180, v95, (uint64_t)v18, v11, v178);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v20 = __OFSUB__(v21, v9);
        v21 -= v9;
        if (v20)
          goto LABEL_361;
        goto LABEL_231;
      }
      v22 = *(unsigned __int8 *)(v11 + 18);
      if (*(_BYTE *)(v11 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v9 = v21;
        v6 = (uint64_t *)v11;
        while (1)
        {
          v33 = *((unsigned __int16 *)v6 + 8);
          if (!*((_WORD *)v6 + 8))
            goto LABEL_152;
          v89 = v6[5];
          v20 = __OFSUB__(v9, v89);
          v35 = v9 - v89;
          if (v20)
            goto LABEL_339;
          if (__OFADD__(v35, 1))
            goto LABEL_340;
          if (v35 + 1 <= 0)
          {
            v33 = 0;
          }
          else
          {
            if ((_DWORD)v33 == 1)
            {
              v9 = v35;
LABEL_152:
              if (v9)
                goto LABEL_336;
              goto LABEL_153;
            }
            v90 = v6 + 8;
            v91 = 1;
            while (1)
            {
              v92 = *v90;
              v90 += 3;
              v9 = v35 - v92;
              if (__OFSUB__(v35, v92))
                goto LABEL_332;
              if (__OFADD__(v9, 1))
                goto LABEL_333;
              if (v9 + 1 < 1)
                break;
              ++v91;
              v35 = v9;
              if (v33 == v91)
                goto LABEL_152;
            }
            v33 = v91;
            v9 = v35;
          }
LABEL_153:
          v88 = (4 * *((_BYTE *)v6 + 18) + 8) & 0x3C;
          v22 = ((-15 << v88) - 1) & v22 | (v33 << v88);
          v18 = (_QWORD *)v6[3 * v33 + 3];
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v6 = v18;
          if (!*((_BYTE *)v18 + 18))
            goto LABEL_211;
        }
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v9 = v21;
      v18 = (_QWORD *)v11;
LABEL_211:
      v128 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8))
        goto LABEL_228;
      v129 = v18[3];
      v20 = __OFSUB__(v9, v129);
      v130 = v9 - v129;
      if (v20)
        goto LABEL_386;
      if (__OFADD__(v130, 1))
        goto LABEL_387;
      if (v130 + 1 <= 0)
      {
        v128 = 0;
      }
      else
      {
        if ((_DWORD)v128 == 1)
        {
          v9 = v130;
LABEL_228:
          if (v9)
            goto LABEL_381;
          goto LABEL_229;
        }
        v134 = v18 + 6;
        v135 = 1;
        while (1)
        {
          v136 = *v134;
          v134 += 3;
          v9 = v130 - v136;
          if (__OFSUB__(v130, v136))
            goto LABEL_364;
          if (__OFADD__(v9, 1))
            goto LABEL_365;
          if (v9 + 1 < 1)
            break;
          ++v135;
          v130 = v9;
          if (v128 == v135)
            goto LABEL_228;
        }
        v128 = v135;
        v9 = v130;
      }
LABEL_229:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v95 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v128 << 8);
      v86 = v181;
      v93 = v170;
      goto LABEL_168;
    }
    if (v12 != v181[11])
      goto LABEL_357;
    if (!*v6)
      goto LABEL_411;
    specialized Rope._Node._prepareModify(at:)(v45, (uint64_t)&v192);
    v203[0] = v193;
    v186 = v192;
    v187 = v193;
    v188 = v194;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v203);
    result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v203 + 8);
    v187 = MEMORY[0x1E0DEE9E0];
    v181[11] = v12 + 1;
    if (!v181[8])
      goto LABEL_412;
    specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v190 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    result = (_QWORD *)specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v186, a4, a5);
    if (v12 + 1 != v181[11])
      goto LABEL_359;
    if (!*v6)
      goto LABEL_413;
    specialized Rope._Node._prepareModify(at:)(v45, (uint64_t)&v195);
    v201 = v196;
    v202 = v197;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v201);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
    v186 = v195;
    v188 = v198;
    v70 = *((_QWORD *)&v191 + 1);
    result = (_QWORD *)v191;
    v187 = v191;
    v71 = v12 + 2;
    v181[11] = v12 + 2;
    if (!v181[8])
      goto LABEL_414;
    v72 = v45;
    v173 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    v171 = v70;
    swift_bridgeObjectRetain_n();
    v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = v181[8];
    v74 = v181[9];
    v75 = v181[10];
    v76 = v181[11];
    v180 = v71;
    *(_QWORD *)&v186 = v71;
    *((_QWORD *)&v186 + 1) = v72;
    *(_QWORD *)&v187 = v18;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v186, v73, v74, v75, v76);
    swift_unknownObjectRelease();
    v77 = v186;
    v78 = v187;
    v79 = swift_unknownObjectRetain();
    v80 = specialized Rope._endPath.getter(v79);
    result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_QWORD *)&v77 + 1) >= v80)
    {
      v9 = a3;
      v81 = v175;
      v6 = v170;
      v96 = v177;
    }
    else
    {
      v81 = v175;
      if ((_QWORD)v77 != v181[11])
        goto LABEL_371;
      if (v78)
      {
        v82 = v78 + 24 * ((*((_QWORD *)&v77 + 1) >> ((4 * *(_BYTE *)(v78 + 18) + 8) & 0x3C)) & 0xFLL);
        v83 = *(_QWORD *)(v82 + 32);
        v84 = *(_QWORD *)(v82 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v97 = v181[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v77 + 1), v97);
        v83 = v98;
        v84 = v99;
        swift_unknownObjectRelease();
      }
      v9 = a3;
      v6 = v170;
      v96 = v177;
      if ((specialized static Dictionary<>.== infix(_:_:)(v83, v173) & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_184:
        result = (_QWORD *)swift_bridgeObjectRelease();
        goto LABEL_185;
      }
      v100 = specialized static Set.== infix(_:_:)(v84, v171);
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      if ((v100 & 1) != 0)
      {
        v96 = specialized Rope._remove(at:)((uint64_t)&v186, v180, v177);
        v101 = v181;
        v102 = v181[8];
        v103 = v181[11];
        if (v96 < specialized Rope._endPath.getter(v102) && *(_BYTE *)(v102 + 18))
        {
          v104 = (v96 >> ((4 * *(_BYTE *)(v102 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          v101 = v181;
          specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v102 + 24, v104, v96);
          swift_unknownObjectRelease();
        }
        v105 = v186;
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if (v103 != v101[11])
          goto LABEL_392;
        if (!*v170)
          goto LABEL_415;
        result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v96, (uint64_t)v199);
        v186 = v199[0];
        v187 = v199[1];
        v188 = v199[2];
        if (__OFADD__(*((_QWORD *)&v199[0] + 1), v105))
          goto LABEL_393;
        *((_QWORD *)&v186 + 1) = *((_QWORD *)&v199[0] + 1) + v105;
        v180 = v103 + 1;
        v101[11] = v103 + 1;
        if (!v101[8])
          goto LABEL_416;
        v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        goto LABEL_184;
      }
    }
LABEL_185:
    v106 = *v6;
    if (*v6)
      v106 = *(unsigned __int8 *)(v106 + 18);
    v86 = v181;
    if (v96 <= v106)
    {
      swift_bridgeObjectRelease_n();
      result = (_QWORD *)swift_bridgeObjectRelease_n();
      goto LABEL_232;
    }
    v107 = v181[8];
    v108 = v181[11];
    *(_QWORD *)&v186 = v180;
    *((_QWORD *)&v186 + 1) = v96;
    *(_QWORD *)&v187 = v18;
    if (v180 != v108)
      goto LABEL_372;
    if (v107)
    {
      v109 = *(unsigned __int8 *)(v107 + 18);
      result = (_QWORD *)swift_unknownObjectRetain();
      if (v96 <= v109)
        goto LABEL_373;
    }
    else if (!v96)
    {
      goto LABEL_373;
    }
    v110 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C;
    if (((v96 >> v110) & 0xF) != 0)
    {
      v111 = ((((v96 >> v110) & 0xF) - 1) << v110) | ((-15 << v110) - 1) & v96;
      result = (_QWORD *)swift_unknownObjectRelease();
      v112 = v18;
      v113 = v180;
    }
    else
    {
      swift_unknownObjectRetain();
      v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v107);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      if ((v114 & 1) == 0)
        goto LABEL_384;
      v111 = *((_QWORD *)&v186 + 1);
      v113 = v186;
      v112 = (_QWORD *)v187;
    }
    if (v113 != v181[11])
      goto LABEL_374;
    if (v112)
    {
      v115 = &v112[3 * ((v111 >> ((4 * *((_BYTE *)v112 + 18) + 8) & 0x3C)) & 0xF)];
      v116 = v115[4];
      v117 = v115[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v118 = v181[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v111, v118);
      v116 = v119;
      v117 = v120;
      swift_unknownObjectRelease();
    }
    v6 = v170;
    if ((specialized static Dictionary<>.== infix(_:_:)(v116, v173) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v86 = v181;
LABEL_209:
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      goto LABEL_232;
    }
    v121 = specialized static Set.== infix(_:_:)(v117, v171);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v121 & 1) == 0)
    {
      v86 = v181;
      v6 = v170;
      goto LABEL_209;
    }
    v122 = specialized Rope._remove(at:)((uint64_t)&v186, v180, v96);
    v123 = v181;
    v124 = v181[8];
    v125 = v181[11];
    if (v122 >= specialized Rope._endPath.getter(v124))
    {
      v124 = 0;
    }
    else if (*(_BYTE *)(v124 + 18))
    {
      v126 = (v122 >> ((4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      v123 = v181;
      v127 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v124 + 24, v126, v122);
      swift_unknownObjectRelease();
      v124 = v127;
    }
    v183 = v125;
    v184 = v122;
    v185 = v124;
    v131 = v186;
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v125 != v123[11])
      goto LABEL_394;
    v132 = v123[8];
    if (v132)
    {
      v133 = *(unsigned __int8 *)(v132 + 18);
      result = (_QWORD *)swift_unknownObjectRetain();
      if (v122 <= v133)
        goto LABEL_395;
    }
    else if (!v122)
    {
      goto LABEL_395;
    }
    if (v124 && (v164 = (4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C, ((v122 >> v164) & 0xF) != 0))
    {
      v184 = ((((v122 >> v164) & 0xF) - 1) << v164) | ((-15 << v164) - 1) & v122;
      result = (_QWORD *)swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      v165 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v132);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      if ((v165 & 1) == 0)
        goto LABEL_405;
      v125 = v183;
    }
    v86 = v181;
    v6 = v170;
    if (v125 != v181[11])
      goto LABEL_396;
    if (!*v170)
      goto LABEL_417;
    v96 = v184;
    result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v200);
    v186 = v200[0];
    v187 = v200[1];
    v188 = v200[2];
    v20 = __OFSUB__(v21, *((_QWORD *)&v200[0] + 1));
    v21 -= *((_QWORD *)&v200[0] + 1);
    if (v20)
      goto LABEL_398;
    if (__OFADD__(*((_QWORD *)&v200[0] + 1), v131))
      goto LABEL_400;
    *((_QWORD *)&v186 + 1) = *((_QWORD *)&v200[0] + 1) + v131;
    v180 = v125 + 1;
    v181[11] = v125 + 1;
    if (!v181[8])
      goto LABEL_418;
    v18 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v81 = v175 - 1;
    if (__OFSUB__(v175, 1))
      goto LABEL_401;
LABEL_232:
    v137 = v86[8];
    v138 = v86[11];
    *(_QWORD *)&v186 = v180;
    *((_QWORD *)&v186 + 1) = v96;
    *(_QWORD *)&v187 = v18;
    v20 = __OFADD__(v81, 1);
    v139 = v81 + 1;
    if (v20)
      goto LABEL_349;
    if (v180 != v138)
      goto LABEL_350;
    if (v18)
    {
      v140 = v18[3 * ((v96 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v140 = specialized Rope._Node.subscript.getter(v96, v137);
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v20 = __OFADD__(v21, v140);
    v21 += v140;
    if (v20)
      goto LABEL_351;
    if (v137)
    {
      v141 = ((-15 << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v137 + 18) | ((unint64_t)*(unsigned __int16 *)(v137 + 16) << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C));
      result = (_QWORD *)swift_unknownObjectRetain();
    }
    else
    {
      v141 = 0;
    }
    v8 = a2;
    v10 = v181;
    if (v96 >= v141)
      goto LABEL_352;
    v175 = v139;
    if (v18
      && (v142 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C,
          v143 = ((v96 >> v142) & 0xF) + 1,
          v143 < *((unsigned __int16 *)v18 + 8)))
    {
      v16 = (v143 << v142) | ((-15 << v142) - 1) & v96;
      result = (_QWORD *)swift_unknownObjectRelease_n();
    }
    else
    {
      v144 = *(unsigned __int8 *)(v137 + 18);
      v145 = (4 * v144 + 8) & 0x3C;
      v183 = (v96 >> v145) & 0xF;
      if (v144)
      {
        swift_unknownObjectRetain();
        v146 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v137 + 24, &v183, (uint64_t)&v186, v137, v144);
        result = (_QWORD *)swift_unknownObjectRelease();
        if ((v146 & 1) == 0)
          goto LABEL_250;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v16 = *((_QWORD *)&v186 + 1);
      }
      else
      {
        v147 = ((v96 >> v145) & 0xF) + 1;
        if (v147 >= *(unsigned __int16 *)(v137 + 16))
        {
LABEL_250:
          if (v137)
          {
            v148 = *(unsigned __int8 *)(v137 + 18);
            v149 = *(unsigned __int16 *)(v137 + 16);
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v16 = ((-15 << ((4 * v148 + 8) & 0x3C)) - 1) & v148 | (unint64_t)(v149 << ((4 * v148 + 8) & 0x3C));
          }
          else
          {
            v16 = 0;
          }
          *(_QWORD *)&v186 = v180;
          *((_QWORD *)&v186 + 1) = v16;
          *(_QWORD *)&v187 = 0;
          goto LABEL_254;
        }
        v16 = (v147 << v145) | ((-15 << v145) - 1) & v96;
        *((_QWORD *)&v186 + 1) = v16;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        *(_QWORD *)&v187 = v137;
      }
    }
LABEL_254:
    v12 = v186;
    v18 = (_QWORD *)v187;
    if (v21 >= v9)
    {
      v5 = *v6;
      if (a2 == v9)
      {
        v12 = v181[11];
        if (v5)
        {
          v150 = v181[10];
          if (v150 < a2)
            goto LABEL_379;
          v10 = (_QWORD *)v181[9];
          v17 = *(unsigned __int16 *)(v5 + 16);
          v16 = *(unsigned __int8 *)(v5 + 18);
          if (*(_WORD *)(v5 + 16) && v150 > a2)
          {
            if (*(_BYTE *)(v5 + 18))
            {
              result = (_QWORD *)swift_unknownObjectRetain_n();
              v37 = a2;
              v151 = (_QWORD *)v5;
              while (1)
              {
                v153 = *((unsigned __int16 *)v151 + 8);
                if (!*((_WORD *)v151 + 8))
                  goto LABEL_263;
                v154 = v151[5];
                v155 = v37 - v154;
                if (__OFSUB__(v37, v154))
                  goto LABEL_354;
                if (__OFADD__(v155, 1))
                  goto LABEL_355;
                if (v155 + 1 <= 0)
                {
                  v153 = 0;
                }
                else
                {
                  if ((_DWORD)v153 == 1)
                  {
                    v37 -= v154;
LABEL_263:
                    if (v37)
                      goto LABEL_353;
                    goto LABEL_264;
                  }
                  v156 = v151[8];
                  v20 = __OFSUB__(v155, v156);
                  v157 = v155 - v156;
                  if (v20)
                    goto LABEL_368;
                  if (__OFADD__(v157, 1))
                    goto LABEL_369;
                  if (v157 + 1 >= 1)
                  {
                    if ((_DWORD)v153 != 2)
                    {
                      v158 = v151 + 11;
                      v159 = 2;
                      while (v153 != v159)
                      {
                        v37 = v157 - *v158;
                        if (__OFSUB__(v157, *v158))
                          goto LABEL_342;
                        if (__OFADD__(v37, 1))
                          goto LABEL_343;
                        if (v37 + 1 < 1)
                        {
                          v153 = v159;
                          v37 = v157;
                          goto LABEL_264;
                        }
                        ++v159;
                        v158 += 3;
                        v157 = v37;
                        if (v153 == v159)
                          goto LABEL_263;
                      }
LABEL_341:
                      __break(1u);
LABEL_342:
                      __break(1u);
LABEL_343:
                      __break(1u);
LABEL_344:
                      __break(1u);
                      goto LABEL_345;
                    }
                    v37 = v157;
                    goto LABEL_263;
                  }
                  v153 = 1;
                  v37 = v155;
                }
LABEL_264:
                v152 = (4 * *((_BYTE *)v151 + 18) + 8) & 0x3C;
                v16 = ((-15 << v152) - 1) & v16 | (v153 << v152);
                v18 = (_QWORD *)v151[3 * v153 + 3];
                swift_unknownObjectRetain();
                result = (_QWORD *)swift_unknownObjectRelease();
                v151 = v18;
                if (!*((_BYTE *)v18 + 18))
                  goto LABEL_290;
              }
            }
            result = (_QWORD *)swift_unknownObjectRetain_n();
            v16 = 0;
            v37 = a2;
            v18 = (_QWORD *)v5;
LABEL_290:
            v160 = *((unsigned __int16 *)v18 + 8);
            if (!*((_WORD *)v18 + 8))
              goto LABEL_299;
            v161 = v18[3];
            v20 = __OFSUB__(v37, v161);
            v162 = v37 - v161;
            if (v20)
              goto LABEL_403;
            if (__OFADD__(v162, 1))
              goto LABEL_404;
            if (v162 + 1 <= 0)
            {
              v160 = 0;
            }
            else
            {
              if ((_DWORD)v160 == 1)
              {
LABEL_300:
                if (v162)
                  goto LABEL_402;
                v37 = 0;
                goto LABEL_328;
              }
              v163 = v18[6];
              v37 = v162 - v163;
              if (__OFSUB__(v162, v163))
                goto LABEL_406;
              if (__OFADD__(v37, 1))
                goto LABEL_407;
              if (v37 + 1 >= 1)
              {
                if ((_DWORD)v160 != 2)
                {
                  v166 = v18 + 9;
                  v167 = 2;
                  while (v160 != v167)
                  {
                    v162 = v37 - *v166;
                    if (__OFSUB__(v37, *v166))
                      goto LABEL_389;
                    if (__OFADD__(v162, 1))
                      goto LABEL_390;
                    if (v162 + 1 < 1)
                    {
                      v160 = v167;
                      goto LABEL_328;
                    }
                    ++v167;
                    v166 += 3;
                    v37 = v162;
                    if (v160 == v167)
                      goto LABEL_300;
                  }
                  goto LABEL_388;
                }
LABEL_299:
                v162 = v37;
                goto LABEL_300;
              }
              v160 = 1;
              v37 = v162;
            }
LABEL_328:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v16 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v160 << 8);
            v8 = a2;
            goto LABEL_55;
          }
LABEL_54:
          v16 = ((-15 << ((4 * v16 + 8) & 0x3C)) - 1) & v16 | (v17 << ((4 * v16 + 8) & 0x3C));
          swift_unknownObjectRetain();
          v37 = 0;
          v18 = 0;
LABEL_55:
          swift_unknownObjectRetain();
          v175 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, (uint64_t)v10);
          result = (_QWORD *)swift_unknownObjectRelease_n();
          v10 = v181;
          goto LABEL_56;
        }
        if (a2 > 0)
          goto LABEL_385;
        v37 = 0;
        v18 = 0;
        v16 = 0;
        v175 = 0;
LABEL_56:
        v20 = __OFSUB__(v8, v37);
        v21 = v8 - v37;
        v9 = a3;
        if (v20)
          goto LABEL_375;
      }
      else
      {
        v21 = 0;
        v175 = 0;
        v18 = 0;
        v16 = 0;
        v12 = v181[11];
        if (v5)
        {
          v18 = 0;
          v21 = v181[10];
          v175 = v181[9];
          v16 = ((-15 << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C));
        }
      }
    }
  }
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
LABEL_356:
  __break(1u);
LABEL_357:
  __break(1u);
LABEL_358:
  __break(1u);
LABEL_359:
  __break(1u);
LABEL_360:
  __break(1u);
LABEL_361:
  __break(1u);
LABEL_362:
  __break(1u);
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  __break(1u);
LABEL_367:
  __break(1u);
LABEL_368:
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  __break(1u);
LABEL_374:
  __break(1u);
LABEL_375:
  __break(1u);
LABEL_376:
  __break(1u);
LABEL_377:
  __break(1u);
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
LABEL_402:
  __break(1u);
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  int v143;
  char v144;
  char v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v174;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD v181[2];
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  _OWORD v198[3];
  _OWORD v199[3];
  uint64_t v200;
  uint64_t v201;
  _OWORD v202[2];

  v6 = result + 8;
  v5 = result[8];
  if (v5)
    v7 = result[10];
  else
    v7 = 0;
  if (a2 < 0)
    goto LABEL_391;
  v8 = a2;
  if (v7 < a2)
    goto LABEL_391;
  v9 = a3;
  v10 = result;
  v11 = result[9];
  v12 = result[11];
  v180 = result;
  v169 = result + 8;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      v22 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v19 = v8;
        v18 = (_QWORD *)v5;
LABEL_35:
        v31 = *((unsigned __int16 *)v18 + 8);
        if (*((_WORD *)v18 + 8))
        {
          v32 = v18[3];
          v20 = __OFSUB__(v19, v32);
          v33 = v19 - v32;
          v9 = a3;
          v6 = v169;
          if (v20)
            goto LABEL_409;
          if (__OFADD__(v33, 1))
            goto LABEL_410;
          if (v33 + 1 <= 0)
          {
            v15 = v11;
            v31 = 0;
            goto LABEL_50;
          }
          if ((_DWORD)v31 != 1)
          {
            v34 = v18 + 6;
            v35 = 1;
            while (1)
            {
              v36 = *v34;
              v34 += 3;
              v19 = v33 - v36;
              if (__OFSUB__(v33, v36))
                goto LABEL_397;
              if (__OFADD__(v19, 1))
                goto LABEL_399;
              if (v19 + 1 < 1)
                goto LABEL_334;
              ++v35;
              v33 = v19;
              if (v31 == v35)
                goto LABEL_48;
            }
          }
          v19 = v33;
        }
        else
        {
          v9 = a3;
          v6 = v169;
        }
LABEL_48:
        if (!v19)
        {
          v15 = v11;
          goto LABEL_50;
        }
        goto LABEL_408;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v19 = v8;
      v23 = (_QWORD *)v5;
      while (1)
      {
        v25 = *((unsigned __int16 *)v23 + 8);
        if (!*((_WORD *)v23 + 8))
          goto LABEL_19;
        v26 = v23[5];
        v20 = __OFSUB__(v19, v26);
        v27 = v19 - v26;
        if (v20)
          goto LABEL_376;
        if (__OFADD__(v27, 1))
          goto LABEL_377;
        if (v27 + 1 > 0)
          break;
        v25 = 0;
LABEL_20:
        v24 = (4 * *((_BYTE *)v23 + 18) + 8) & 0x3C;
        v22 = ((-15 << v24) - 1) & v22 | (v25 << v24);
        v18 = (_QWORD *)v23[3 * v25 + 3];
        swift_unknownObjectRetain();
        result = (_QWORD *)swift_unknownObjectRelease();
        v23 = v18;
        if (!*((_BYTE *)v18 + 18))
          goto LABEL_35;
      }
      if ((_DWORD)v25 != 1)
      {
        v28 = v23 + 8;
        v29 = 1;
        while (1)
        {
          v30 = *v28;
          v28 += 3;
          v19 = v27 - v30;
          if (__OFSUB__(v27, v30))
            goto LABEL_344;
          if (__OFADD__(v19, 1))
            break;
          if (v19 + 1 < 1)
          {
            v25 = v29;
            v19 = v27;
            goto LABEL_20;
          }
          ++v29;
          v27 = v19;
          if (v25 == v29)
            goto LABEL_19;
        }
LABEL_345:
        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }
      v19 = v27;
LABEL_19:
      if (v19)
        goto LABEL_370;
      goto LABEL_20;
    }
  }
  v14 = swift_unknownObjectRetain_n();
  v15 = v11;
  v16 = specialized Rope._endPath.getter(v14);
  result = (_QWORD *)swift_unknownObjectRelease();
  v18 = 0;
  v19 = 0;
  if (!v5)
    goto LABEL_51;
LABEL_13:
  swift_unknownObjectRetain();
  v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, v15);
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v20 = __OFSUB__(v8, v19);
  v21 = v8 - v19;
  if (v20)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  while (1)
  {
    while (1)
    {
      v176 = v16;
      v11 = *v6;
      if (v8 != v9)
      {
        if (v11)
          v44 = v10[10];
        else
          v44 = 0;
        v45 = v176;
        goto LABEL_108;
      }
      if (!v11)
      {
        if (v8 > 0)
          goto LABEL_378;
        v9 = 0;
        goto LABEL_106;
      }
      v38 = v10[10];
      if (v38 < v8)
        goto LABEL_367;
      v39 = v10[9];
      v40 = v10[11];
      v22 = *(unsigned __int8 *)(v11 + 18);
      v41 = !*(_WORD *)(v11 + 16) || v38 <= v8;
      v178 = v39;
      v171 = v40;
      if (v41)
        break;
      if (!*(_BYTE *)(v11 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v22 = 0;
        v9 = v8;
        v43 = v11;
LABEL_91:
        v51 = *(unsigned __int16 *)(v43 + 16);
        if (*(_WORD *)(v43 + 16))
        {
          v52 = *(_QWORD *)(v43 + 24);
          v20 = __OFSUB__(v9, v52);
          v53 = v9 - v52;
          if (v20)
            goto LABEL_382;
          if (__OFADD__(v53, 1))
            goto LABEL_383;
          if (v53 + 1 <= 0)
          {
            v51 = 0;
          }
          else
          {
            if ((_DWORD)v51 == 1)
            {
              v9 = v53;
              goto LABEL_103;
            }
            v54 = (uint64_t *)(v43 + 48);
            v55 = 1;
            while (1)
            {
              v56 = *v54;
              v54 += 3;
              v9 = v53 - v56;
              if (__OFSUB__(v53, v56))
                goto LABEL_362;
              if (__OFADD__(v9, 1))
                goto LABEL_363;
              if (v9 + 1 < 1)
                break;
              ++v55;
              v53 = v9;
              if (v51 == v55)
                goto LABEL_103;
            }
            v51 = v55;
            v9 = v53;
          }
LABEL_104:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v42 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v51 << 8);
          goto LABEL_105;
        }
LABEL_103:
        if (v9)
          goto LABEL_380;
        goto LABEL_104;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v9 = v8;
      v5 = v11;
LABEL_77:
      v33 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16))
        goto LABEL_75;
      v47 = *(_QWORD *)(v5 + 40);
      v20 = __OFSUB__(v9, v47);
      v35 = v9 - v47;
      if (v20)
        goto LABEL_337;
      if (__OFADD__(v35, 1))
        goto LABEL_338;
      if (v35 + 1 <= 0)
      {
        v33 = 0;
        goto LABEL_76;
      }
      if ((_DWORD)v33 == 1)
      {
        v9 = v35;
LABEL_75:
        if (!v9)
          goto LABEL_76;
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }
      v48 = (uint64_t *)(v5 + 64);
      v49 = 1;
      while (1)
      {
        v50 = *v48;
        v48 += 3;
        v9 = v35 - v50;
        if (__OFSUB__(v35, v50))
          break;
        if (__OFADD__(v9, 1))
          goto LABEL_331;
        if (v9 + 1 < 1)
        {
          v33 = v49;
          v9 = v35;
LABEL_76:
          v46 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
          v22 = ((-15 << v46) - 1) & v22 | (v33 << v46);
          v43 = *(_QWORD *)(v5 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v5 = v43;
          if (!*(_BYTE *)(v43 + 18))
            goto LABEL_91;
          goto LABEL_77;
        }
        ++v49;
        v35 = v9;
        if (v33 == v49)
          goto LABEL_75;
      }
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      v15 = v11;
      v31 = v35;
      v19 = v33;
LABEL_50:
      swift_unknownObjectRelease();
      result = (_QWORD *)swift_unknownObjectRelease();
      v17 = v22 & 0xFFFFFFFFFFFFF0FFLL;
      v16 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v31 << 8);
      v8 = a2;
      v10 = v180;
      if (v5)
        goto LABEL_13;
LABEL_51:
      v174 = 0;
      v20 = __OFSUB__(v8, v19);
      v21 = v8 - v19;
      if (v20)
        goto LABEL_53;
    }
    v42 = ((-15 << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | ((unint64_t)*(unsigned __int16 *)(v11 + 16) << ((4 * v22 + 8) & 0x3C));
    swift_unknownObjectRetain();
    v9 = 0;
    v43 = 0;
LABEL_105:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v171, v42, v43, v11, v178);
    result = (_QWORD *)swift_unknownObjectRelease_n();
    v8 = a2;
    v10 = v180;
LABEL_106:
    v20 = __OFSUB__(v8, v9);
    v44 = v8 - v9;
    v45 = v176;
    if (v20)
      goto LABEL_356;
    v9 = a3;
LABEL_108:
    if (v21 >= v44)
      return result;
    if (v12 != v10[11])
      goto LABEL_346;
    if (v18)
    {
      v57 = &v18[3 * ((v45 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF)];
      v59 = v57[4];
      v58 = v57[5];
      v60 = v57[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    else
    {
      v61 = v10[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v45, v61);
      v59 = v62;
      v58 = v63;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (v12 != v10[11])
        goto LABEL_366;
      v64 = v10[8];
      swift_unknownObjectRetain();
      v60 = specialized Rope._Node.subscript.getter(v176, v64);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v65 = v21 + v60;
    if (__OFADD__(v21, v60))
      goto LABEL_347;
    *(_QWORD *)&v190 = v59;
    *((_QWORD *)&v190 + 1) = v58;
    v66 = v21 >= v9 ? v9 : v21;
    v67 = v21 >= a2 ? v66 : a2;
    v68 = v65 <= a2 ? a2 : v21 + v60;
    v69 = v65 <= v9 ? v68 : v9;
    if (v67 == v69)
      break;
    if (v67 != v21 || v69 != v65)
    {
      v189 = 0;
      v187 = 0u;
      v188 = 0u;
      v185 = 0u;
      v186 = 0u;
      swift_bridgeObjectRetain();
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v185, a4, a5);
      result = (_QWORD *)swift_bridgeObjectRelease();
      v84 = v180;
      if (__OFSUB__(v69, v67))
        goto LABEL_358;
      v85 = *((_QWORD *)&v190 + 1);
      v5 = v190;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v67, v69, v69 - v67, v5, v85);
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      v11 = v180[8];
      v12 = v180[10];
      if (v11)
        v86 = v180[10];
      else
        v86 = 0;
      if (v21 < 0 || v86 < v21)
        goto LABEL_360;
      v18 = (_QWORD *)v180[9];
      v177 = (uint64_t)v18;
      v179 = v180[11];
      if (!v11 || !*(_WORD *)(v11 + 16) || v21 >= v12)
      {
        v92 = v6;
        v93 = swift_unknownObjectRetain_n();
        v94 = specialized Rope._endPath.getter(v93);
        swift_unknownObjectRelease();
        v18 = 0;
        v9 = 0;
        if (!v11)
        {
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          v80 = 0;
LABEL_231:
          v9 = a3;
          v95 = v94;
          v6 = v92;
          goto LABEL_232;
        }
LABEL_168:
        swift_unknownObjectRetain();
        v80 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v94, (uint64_t)v18, v11, v177);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v20 = __OFSUB__(v21, v9);
        v21 -= v9;
        if (v20)
          goto LABEL_361;
        goto LABEL_231;
      }
      v22 = *(unsigned __int8 *)(v11 + 18);
      if (*(_BYTE *)(v11 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v9 = v21;
        v6 = (uint64_t *)v11;
        while (1)
        {
          v33 = *((unsigned __int16 *)v6 + 8);
          if (!*((_WORD *)v6 + 8))
            goto LABEL_152;
          v88 = v6[5];
          v20 = __OFSUB__(v9, v88);
          v35 = v9 - v88;
          if (v20)
            goto LABEL_339;
          if (__OFADD__(v35, 1))
            goto LABEL_340;
          if (v35 + 1 <= 0)
          {
            v33 = 0;
          }
          else
          {
            if ((_DWORD)v33 == 1)
            {
              v9 = v35;
LABEL_152:
              if (v9)
                goto LABEL_336;
              goto LABEL_153;
            }
            v89 = v6 + 8;
            v90 = 1;
            while (1)
            {
              v91 = *v89;
              v89 += 3;
              v9 = v35 - v91;
              if (__OFSUB__(v35, v91))
                goto LABEL_332;
              if (__OFADD__(v9, 1))
                goto LABEL_333;
              if (v9 + 1 < 1)
                break;
              ++v90;
              v35 = v9;
              if (v33 == v90)
                goto LABEL_152;
            }
            v33 = v90;
            v9 = v35;
          }
LABEL_153:
          v87 = (4 * *((_BYTE *)v6 + 18) + 8) & 0x3C;
          v22 = ((-15 << v87) - 1) & v22 | (v33 << v87);
          v18 = (_QWORD *)v6[3 * v33 + 3];
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v6 = v18;
          if (!*((_BYTE *)v18 + 18))
            goto LABEL_211;
        }
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v9 = v21;
      v18 = (_QWORD *)v11;
LABEL_211:
      v127 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8))
        goto LABEL_228;
      v128 = v18[3];
      v20 = __OFSUB__(v9, v128);
      v129 = v9 - v128;
      if (v20)
        goto LABEL_386;
      if (__OFADD__(v129, 1))
        goto LABEL_387;
      if (v129 + 1 <= 0)
      {
        v127 = 0;
      }
      else
      {
        if ((_DWORD)v127 == 1)
        {
          v9 = v129;
LABEL_228:
          if (v9)
            goto LABEL_381;
          goto LABEL_229;
        }
        v133 = v18 + 6;
        v134 = 1;
        while (1)
        {
          v135 = *v133;
          v133 += 3;
          v9 = v129 - v135;
          if (__OFSUB__(v129, v135))
            goto LABEL_364;
          if (__OFADD__(v9, 1))
            goto LABEL_365;
          if (v9 + 1 < 1)
            break;
          ++v134;
          v129 = v9;
          if (v127 == v134)
            goto LABEL_228;
        }
        v127 = v134;
        v9 = v129;
      }
LABEL_229:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v94 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
      v84 = v180;
      v92 = v169;
      goto LABEL_168;
    }
    if (v12 != v180[11])
      goto LABEL_357;
    if (!*v6)
      goto LABEL_411;
    specialized Rope._Node._prepareModify(at:)(v176, (uint64_t)&v191);
    v202[0] = v192;
    v185 = v191;
    v186 = v192;
    v187 = v193;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v202);
    result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v202 + 8);
    v186 = MEMORY[0x1E0DEE9E0];
    v180[11] = v12 + 1;
    if (!v180[8])
      goto LABEL_412;
    specialized Rope._Node._finalizeModify(_:)(&v182, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v189 = 0;
    v187 = 0u;
    v188 = 0u;
    v185 = 0u;
    v186 = 0u;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v185, a4, a5);
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v12 + 1 != v180[11])
      goto LABEL_359;
    if (!*v6)
      goto LABEL_413;
    specialized Rope._Node._prepareModify(at:)(v176, (uint64_t)&v194);
    v200 = v195;
    v201 = v196;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v200);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v201);
    v185 = v194;
    v187 = v197;
    v70 = *((_QWORD *)&v190 + 1);
    result = (_QWORD *)v190;
    v186 = v190;
    v71 = v12 + 2;
    v180[11] = v12 + 2;
    if (!v180[8])
      goto LABEL_414;
    v172 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    v170 = v70;
    swift_bridgeObjectRetain_n();
    v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = v180[8];
    v72 = v180[9];
    v74 = v180[10];
    v75 = v180[11];
    v179 = v71;
    *(_QWORD *)&v185 = v71;
    *((_QWORD *)&v185 + 1) = v176;
    *(_QWORD *)&v186 = v18;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v185, v73, v72, v74, v75);
    swift_unknownObjectRelease();
    v76 = v185;
    v77 = v186;
    v78 = swift_unknownObjectRetain();
    v79 = specialized Rope._endPath.getter(v78);
    result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_QWORD *)&v76 + 1) >= v79)
    {
      v9 = a3;
      v80 = v174;
      v6 = v169;
      v95 = v176;
    }
    else
    {
      v80 = v174;
      if ((_QWORD)v76 != v180[11])
        goto LABEL_371;
      if (v77)
      {
        v81 = v77 + 24 * ((*((_QWORD *)&v76 + 1) >> ((4 * *(_BYTE *)(v77 + 18) + 8) & 0x3C)) & 0xFLL);
        v82 = *(_QWORD *)(v81 + 32);
        v83 = *(_QWORD *)(v81 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v96 = v180[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v76 + 1), v96);
        v82 = v97;
        v83 = v98;
        swift_unknownObjectRelease();
      }
      v9 = a3;
      v6 = v169;
      v95 = v176;
      if ((specialized static Dictionary<>.== infix(_:_:)(v82, v172) & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_184:
        result = (_QWORD *)swift_bridgeObjectRelease();
        goto LABEL_185;
      }
      v99 = specialized static Set.== infix(_:_:)(v83, v170);
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      if ((v99 & 1) != 0)
      {
        v95 = specialized Rope._remove(at:)((uint64_t)&v185, v179, v176);
        v100 = v180;
        v101 = v180[8];
        v102 = v180[11];
        if (v95 < specialized Rope._endPath.getter(v101) && *(_BYTE *)(v101 + 18))
        {
          v103 = (v95 >> ((4 * *(_BYTE *)(v101 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          v100 = v180;
          specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v101 + 24, v103, v95);
          swift_unknownObjectRelease();
        }
        v104 = v185;
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if (v102 != v100[11])
          goto LABEL_392;
        if (!*v169)
          goto LABEL_415;
        result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v95, (uint64_t)v198);
        v185 = v198[0];
        v186 = v198[1];
        v187 = v198[2];
        if (__OFADD__(*((_QWORD *)&v198[0] + 1), v104))
          goto LABEL_393;
        *((_QWORD *)&v185 + 1) = *((_QWORD *)&v198[0] + 1) + v104;
        v179 = v102 + 1;
        v100[11] = v102 + 1;
        if (!v100[8])
          goto LABEL_416;
        v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
        swift_bridgeObjectRelease();
        goto LABEL_184;
      }
    }
LABEL_185:
    v105 = *v6;
    if (*v6)
      v105 = *(unsigned __int8 *)(v105 + 18);
    v84 = v180;
    if (v95 <= v105)
    {
      swift_bridgeObjectRelease_n();
      result = (_QWORD *)swift_bridgeObjectRelease_n();
      goto LABEL_232;
    }
    v106 = v180[8];
    v107 = v180[11];
    *(_QWORD *)&v185 = v179;
    *((_QWORD *)&v185 + 1) = v95;
    *(_QWORD *)&v186 = v18;
    if (v179 != v107)
      goto LABEL_372;
    if (v106)
    {
      v108 = *(unsigned __int8 *)(v106 + 18);
      result = (_QWORD *)swift_unknownObjectRetain();
      if (v95 <= v108)
        goto LABEL_373;
    }
    else if (!v95)
    {
      goto LABEL_373;
    }
    v109 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C;
    if (((v95 >> v109) & 0xF) != 0)
    {
      v110 = ((((v95 >> v109) & 0xF) - 1) << v109) | ((-15 << v109) - 1) & v95;
      result = (_QWORD *)swift_unknownObjectRelease();
      v111 = v18;
      v112 = v179;
    }
    else
    {
      swift_unknownObjectRetain();
      v113 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v185, v106);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      if ((v113 & 1) == 0)
        goto LABEL_384;
      v110 = *((_QWORD *)&v185 + 1);
      v112 = v185;
      v111 = (_QWORD *)v186;
    }
    v6 = v169;
    if (v112 != v180[11])
      goto LABEL_374;
    if (v111)
    {
      v114 = &v111[3 * ((v110 >> ((4 * *((_BYTE *)v111 + 18) + 8) & 0x3C)) & 0xF)];
      v115 = v114[4];
      v116 = v114[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v117 = v180[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v110, v117);
      v115 = v118;
      v116 = v119;
      swift_unknownObjectRelease();
    }
    if ((specialized static Dictionary<>.== infix(_:_:)(v115, v172) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v84 = v180;
LABEL_209:
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      goto LABEL_232;
    }
    v120 = specialized static Set.== infix(_:_:)(v116, v170);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v120 & 1) == 0)
    {
      v84 = v180;
      v6 = v169;
      goto LABEL_209;
    }
    v121 = specialized Rope._remove(at:)((uint64_t)&v185, v179, v95);
    v122 = v180;
    v123 = v180[8];
    v124 = v180[11];
    if (v121 >= specialized Rope._endPath.getter(v123))
    {
      v123 = 0;
    }
    else if (*(_BYTE *)(v123 + 18))
    {
      v125 = (v121 >> ((4 * *(_BYTE *)(v123 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      v122 = v180;
      v126 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v123 + 24, v125, v121);
      swift_unknownObjectRelease();
      v123 = v126;
    }
    v182 = v124;
    v183 = v121;
    v184 = v123;
    v130 = v185;
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v124 != v122[11])
      goto LABEL_394;
    v131 = v122[8];
    if (v131)
    {
      v132 = *(unsigned __int8 *)(v131 + 18);
      result = (_QWORD *)swift_unknownObjectRetain();
      if (v121 <= v132)
        goto LABEL_395;
    }
    else if (!v121)
    {
      goto LABEL_395;
    }
    if (v123 && (v163 = (4 * *(_BYTE *)(v123 + 18) + 8) & 0x3C, ((v121 >> v163) & 0xF) != 0))
    {
      v183 = ((((v121 >> v163) & 0xF) - 1) << v163) | ((-15 << v163) - 1) & v121;
      result = (_QWORD *)swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      v164 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v182, v131);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      if ((v164 & 1) == 0)
        goto LABEL_405;
      v124 = v182;
    }
    v84 = v180;
    v6 = v169;
    if (v124 != v180[11])
      goto LABEL_396;
    if (!*v169)
      goto LABEL_417;
    v95 = v183;
    result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v183, (uint64_t)v199);
    v185 = v199[0];
    v186 = v199[1];
    v187 = v199[2];
    v20 = __OFSUB__(v21, *((_QWORD *)&v199[0] + 1));
    v21 -= *((_QWORD *)&v199[0] + 1);
    if (v20)
      goto LABEL_398;
    if (__OFADD__(*((_QWORD *)&v199[0] + 1), v130))
      goto LABEL_400;
    *((_QWORD *)&v185 + 1) = *((_QWORD *)&v199[0] + 1) + v130;
    v179 = v124 + 1;
    v180[11] = v124 + 1;
    if (!v180[8])
      goto LABEL_418;
    v18 = specialized Rope._Node._finalizeModify(_:)(v181, &v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v80 = v174 - 1;
    if (__OFSUB__(v174, 1))
      goto LABEL_401;
LABEL_232:
    v136 = v84[8];
    v137 = v84[11];
    *(_QWORD *)&v185 = v179;
    *((_QWORD *)&v185 + 1) = v95;
    *(_QWORD *)&v186 = v18;
    v20 = __OFADD__(v80, 1);
    v138 = v80 + 1;
    if (v20)
      goto LABEL_349;
    if (v179 != v137)
      goto LABEL_350;
    if (v18)
    {
      v139 = v18[3 * ((v95 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v139 = specialized Rope._Node.subscript.getter(v95, v136);
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v20 = __OFADD__(v21, v139);
    v21 += v139;
    if (v20)
      goto LABEL_351;
    if (v136)
    {
      v140 = ((-15 << ((4 * *(_BYTE *)(v136 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v136 + 18) | ((unint64_t)*(unsigned __int16 *)(v136 + 16) << ((4 * *(_BYTE *)(v136 + 18) + 8) & 0x3C));
      result = (_QWORD *)swift_unknownObjectRetain();
    }
    else
    {
      v140 = 0;
    }
    v8 = a2;
    v10 = v180;
    if (v95 >= v140)
      goto LABEL_352;
    v174 = v138;
    if (v18
      && (v141 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C,
          v142 = ((v95 >> v141) & 0xF) + 1,
          v142 < *((unsigned __int16 *)v18 + 8)))
    {
      v16 = (v142 << v141) | ((-15 << v141) - 1) & v95;
      result = (_QWORD *)swift_unknownObjectRelease_n();
    }
    else
    {
      v143 = *(unsigned __int8 *)(v136 + 18);
      v144 = (4 * v143 + 8) & 0x3C;
      v182 = (v95 >> v144) & 0xF;
      if (v143)
      {
        swift_unknownObjectRetain();
        v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v136 + 24, &v182, (uint64_t)&v185, v136, v143);
        result = (_QWORD *)swift_unknownObjectRelease();
        if ((v145 & 1) == 0)
          goto LABEL_250;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v16 = *((_QWORD *)&v185 + 1);
      }
      else
      {
        v146 = ((v95 >> v144) & 0xF) + 1;
        if (v146 >= *(unsigned __int16 *)(v136 + 16))
        {
LABEL_250:
          if (v136)
          {
            v147 = *(unsigned __int8 *)(v136 + 18);
            v148 = *(unsigned __int16 *)(v136 + 16);
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v16 = ((-15 << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
          }
          else
          {
            v16 = 0;
          }
          *(_QWORD *)&v185 = v179;
          *((_QWORD *)&v185 + 1) = v16;
          *(_QWORD *)&v186 = 0;
          goto LABEL_254;
        }
        v16 = (v146 << v144) | ((-15 << v144) - 1) & v95;
        *((_QWORD *)&v185 + 1) = v16;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        *(_QWORD *)&v186 = v136;
      }
    }
LABEL_254:
    v12 = v185;
    v18 = (_QWORD *)v186;
    if (v21 >= v9)
    {
      v5 = *v6;
      if (a2 == v9)
      {
        v12 = v180[11];
        if (v5)
        {
          v149 = v180[10];
          if (v149 < a2)
            goto LABEL_379;
          v10 = (_QWORD *)v180[9];
          v17 = *(unsigned __int16 *)(v5 + 16);
          v16 = *(unsigned __int8 *)(v5 + 18);
          if (*(_WORD *)(v5 + 16) && v149 > a2)
          {
            if (*(_BYTE *)(v5 + 18))
            {
              result = (_QWORD *)swift_unknownObjectRetain_n();
              v37 = a2;
              v150 = (_QWORD *)v5;
              while (1)
              {
                v152 = *((unsigned __int16 *)v150 + 8);
                if (!*((_WORD *)v150 + 8))
                  goto LABEL_263;
                v153 = v150[5];
                v154 = v37 - v153;
                if (__OFSUB__(v37, v153))
                  goto LABEL_354;
                if (__OFADD__(v154, 1))
                  goto LABEL_355;
                if (v154 + 1 <= 0)
                {
                  v152 = 0;
                }
                else
                {
                  if ((_DWORD)v152 == 1)
                  {
                    v37 -= v153;
LABEL_263:
                    if (v37)
                      goto LABEL_353;
                    goto LABEL_264;
                  }
                  v155 = v150[8];
                  v20 = __OFSUB__(v154, v155);
                  v156 = v154 - v155;
                  if (v20)
                    goto LABEL_368;
                  if (__OFADD__(v156, 1))
                    goto LABEL_369;
                  if (v156 + 1 >= 1)
                  {
                    if ((_DWORD)v152 != 2)
                    {
                      v157 = v150 + 11;
                      v158 = 2;
                      while (v152 != v158)
                      {
                        v37 = v156 - *v157;
                        if (__OFSUB__(v156, *v157))
                          goto LABEL_342;
                        if (__OFADD__(v37, 1))
                          goto LABEL_343;
                        if (v37 + 1 < 1)
                        {
                          v152 = v158;
                          v37 = v156;
                          goto LABEL_264;
                        }
                        ++v158;
                        v157 += 3;
                        v156 = v37;
                        if (v152 == v158)
                          goto LABEL_263;
                      }
LABEL_341:
                      __break(1u);
LABEL_342:
                      __break(1u);
LABEL_343:
                      __break(1u);
LABEL_344:
                      __break(1u);
                      goto LABEL_345;
                    }
                    v37 = v156;
                    goto LABEL_263;
                  }
                  v152 = 1;
                  v37 = v154;
                }
LABEL_264:
                v151 = (4 * *((_BYTE *)v150 + 18) + 8) & 0x3C;
                v16 = ((-15 << v151) - 1) & v16 | (v152 << v151);
                v18 = (_QWORD *)v150[3 * v152 + 3];
                swift_unknownObjectRetain();
                result = (_QWORD *)swift_unknownObjectRelease();
                v150 = v18;
                if (!*((_BYTE *)v18 + 18))
                  goto LABEL_290;
              }
            }
            result = (_QWORD *)swift_unknownObjectRetain_n();
            v16 = 0;
            v37 = a2;
            v18 = (_QWORD *)v5;
LABEL_290:
            v159 = *((unsigned __int16 *)v18 + 8);
            if (!*((_WORD *)v18 + 8))
              goto LABEL_299;
            v160 = v18[3];
            v20 = __OFSUB__(v37, v160);
            v161 = v37 - v160;
            if (v20)
              goto LABEL_403;
            if (__OFADD__(v161, 1))
              goto LABEL_404;
            if (v161 + 1 <= 0)
            {
              v159 = 0;
            }
            else
            {
              if ((_DWORD)v159 == 1)
              {
LABEL_300:
                if (v161)
                  goto LABEL_402;
                v37 = 0;
                goto LABEL_328;
              }
              v162 = v18[6];
              v37 = v161 - v162;
              if (__OFSUB__(v161, v162))
                goto LABEL_406;
              if (__OFADD__(v37, 1))
                goto LABEL_407;
              if (v37 + 1 >= 1)
              {
                if ((_DWORD)v159 != 2)
                {
                  v165 = v18 + 9;
                  v166 = 2;
                  while (v159 != v166)
                  {
                    v161 = v37 - *v165;
                    if (__OFSUB__(v37, *v165))
                      goto LABEL_389;
                    if (__OFADD__(v161, 1))
                      goto LABEL_390;
                    if (v161 + 1 < 1)
                    {
                      v159 = v166;
                      goto LABEL_328;
                    }
                    ++v166;
                    v165 += 3;
                    v37 = v161;
                    if (v159 == v166)
                      goto LABEL_300;
                  }
                  goto LABEL_388;
                }
LABEL_299:
                v161 = v37;
                goto LABEL_300;
              }
              v159 = 1;
              v37 = v161;
            }
LABEL_328:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v16 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v159 << 8);
            v8 = a2;
            goto LABEL_55;
          }
LABEL_54:
          v16 = ((-15 << ((4 * v16 + 8) & 0x3C)) - 1) & v16 | (v17 << ((4 * v16 + 8) & 0x3C));
          swift_unknownObjectRetain();
          v37 = 0;
          v18 = 0;
LABEL_55:
          swift_unknownObjectRetain();
          v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, (uint64_t)v10);
          result = (_QWORD *)swift_unknownObjectRelease_n();
          v10 = v180;
          goto LABEL_56;
        }
        if (a2 > 0)
          goto LABEL_385;
        v37 = 0;
        v18 = 0;
        v16 = 0;
        v174 = 0;
LABEL_56:
        v20 = __OFSUB__(v8, v37);
        v21 = v8 - v37;
        v9 = a3;
        if (v20)
          goto LABEL_375;
      }
      else
      {
        v21 = 0;
        v174 = 0;
        v18 = 0;
        v16 = 0;
        v12 = v180[11];
        if (v5)
        {
          v18 = 0;
          v21 = v180[10];
          v174 = v180[9];
          v16 = ((-15 << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C));
        }
      }
    }
  }
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
LABEL_356:
  __break(1u);
LABEL_357:
  __break(1u);
LABEL_358:
  __break(1u);
LABEL_359:
  __break(1u);
LABEL_360:
  __break(1u);
LABEL_361:
  __break(1u);
LABEL_362:
  __break(1u);
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  __break(1u);
LABEL_367:
  __break(1u);
LABEL_368:
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  __break(1u);
LABEL_374:
  __break(1u);
LABEL_375:
  __break(1u);
LABEL_376:
  __break(1u);
LABEL_377:
  __break(1u);
LABEL_378:
  __break(1u);
LABEL_379:
  __break(1u);
LABEL_380:
  __break(1u);
LABEL_381:
  __break(1u);
LABEL_382:
  __break(1u);
LABEL_383:
  __break(1u);
LABEL_384:
  __break(1u);
LABEL_385:
  __break(1u);
LABEL_386:
  __break(1u);
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
LABEL_402:
  __break(1u);
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

_QWORD *specialized AttributedString._InternalRunsSlice.updateEach(with:)(_QWORD *result, uint64_t a2, _QWORD *a3, _QWORD *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  unint64_t v139;
  int v140;
  char v141;
  char v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  char v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[2];
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  _OWORD v200[3];
  _OWORD v201[3];
  uint64_t v202;
  uint64_t v203;
  _OWORD v204[2];

  v6 = result[8];
  if (v6)
    v7 = result[10];
  else
    v7 = 0;
  if (a2 < 0 || (v8 = a2, v7 < a2))
  {
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
    goto LABEL_408;
  }
  v9 = a3;
  v10 = (_QWORD *)result[9];
  v176 = result + 8;
  v11 = result[11];
  v180 = result;
  if (!v6 || (*(_WORD *)(v6 + 16) ? (v12 = result[10] <= a2) : (v12 = 1), v12))
  {
    v13 = swift_unknownObjectRetain_n();
    v14 = specialized Rope._endPath.getter(v13);
    result = (_QWORD *)swift_unknownObjectRelease();
    v15 = 0;
    v16 = 0;
    if (!v6)
      goto LABEL_48;
    goto LABEL_13;
  }
  v17 = result[11];
  v11 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v16 = v8;
    v18 = v6;
    while (1)
    {
      v20 = *(unsigned __int16 *)(v18 + 16);
      if (!*(_WORD *)(v18 + 16))
        break;
      v21 = *(_QWORD *)(v18 + 40);
      v22 = __OFSUB__(v16, v21);
      v23 = v16 - v21;
      if (v22)
        goto LABEL_375;
      if (__OFADD__(v23, 1))
        goto LABEL_376;
      if (v23 + 1 <= 0)
      {
        v20 = 0;
        goto LABEL_18;
      }
      if ((_DWORD)v20 == 1)
      {
        v16 = v23;
        break;
      }
      v24 = (uint64_t *)(v18 + 64);
      v25 = 1;
      while (1)
      {
        v26 = *v24;
        v24 += 3;
        v16 = v23 - v26;
        if (__OFSUB__(v23, v26))
          goto LABEL_343;
        if (__OFADD__(v16, 1))
        {
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
          goto LABEL_369;
        }
        if (v16 + 1 < 1)
          break;
        ++v25;
        v23 = v16;
        if (v20 == v25)
          goto LABEL_17;
      }
      v20 = v25;
      v16 = v23;
LABEL_18:
      v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      v11 = ((-15 << v19) - 1) & v11 | (v20 << v19);
      v15 = *(_QWORD *)(v18 + 24 + 24 * v20);
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_unknownObjectRelease();
      v18 = v15;
      if (!*(_BYTE *)(v15 + 18))
        goto LABEL_33;
    }
LABEL_17:
    if (!v16)
      goto LABEL_18;
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  result = (_QWORD *)swift_unknownObjectRetain_n();
  v16 = v8;
  v15 = v6;
LABEL_33:
  v27 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    v9 = a3;
    v8 = a2;
    goto LABEL_46;
  }
  v28 = *(_QWORD *)(v15 + 24);
  v22 = __OFSUB__(v16, v28);
  v29 = v16 - v28;
  v9 = a3;
  v8 = a2;
  if (v22)
  {
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }
  if (!__OFADD__(v29, 1))
  {
    if (v29 + 1 <= 0)
    {
      v27 = 0;
      goto LABEL_47;
    }
    if ((_DWORD)v27 != 1)
    {
      v30 = (uint64_t *)(v15 + 48);
      v31 = 1;
      while (1)
      {
        v32 = *v30;
        v30 += 3;
        v16 = v29 - v32;
        if (__OFSUB__(v29, v32))
          goto LABEL_397;
        if (__OFADD__(v16, 1))
          goto LABEL_399;
        if (v16 + 1 < 1)
          goto LABEL_333;
        ++v31;
        v29 = v16;
        if (v27 == v31)
          goto LABEL_46;
      }
    }
    v16 = v29;
LABEL_46:
    if (v16)
    {
LABEL_408:
      __break(1u);
      goto LABEL_409;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      result = (_QWORD *)swift_unknownObjectRelease();
      v14 = v11 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      v11 = v17;
      if (v6)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v6, (uint64_t)v10);
        result = (_QWORD *)swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        v177 = 0;
      }
      v33 = v176;
      v181 = v8 - v16;
      if (__OFSUB__(v8, v16))
        goto LABEL_391;
      v34 = v180;
      while (1)
      {
        v10 = (_QWORD *)*v33;
        v178 = v11;
        if ((_QWORD *)v8 != v9)
        {
          if (v10)
            v41 = v34[10];
          else
            v41 = 0;
          goto LABEL_104;
        }
        if (!v10)
        {
          if (v8 > 0)
            goto LABEL_377;
          v8 = 0;
          goto LABEL_102;
        }
        v36 = v34[10];
        if (v36 < v8)
          goto LABEL_366;
        v37 = v34[9];
        v17 = v34[11];
        v38 = *((unsigned __int8 *)v10 + 18);
        v39 = !*((_WORD *)v10 + 8) || v36 <= v8;
        v173 = v37;
        if (!v39)
          break;
        v40 = ((-15 << ((4 * v38 + 8) & 0x3C)) - 1) & v38 | ((unint64_t)*((unsigned __int16 *)v10 + 8) << ((4 * v38 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v8 = 0;
        v11 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v17, v40, v11, (uint64_t)v10, v173);
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v11 = v178;
        v34 = v180;
LABEL_102:
        v41 = a2 - v8;
        if (__OFSUB__(a2, v8))
          goto LABEL_355;
        v8 = a2;
LABEL_104:
        if (v181 >= v41)
          return result;
        if (v11 != v34[11])
          goto LABEL_345;
        if (v15)
        {
          v53 = (_QWORD *)(v15 + 24 * ((v14 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF));
          v55 = v53[4];
          v54 = v53[5];
          v56 = v53[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          v57 = v34[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v14, v57);
          v55 = v58;
          v54 = v59;
          result = (_QWORD *)swift_unknownObjectRelease();
          if (v11 != v34[11])
            goto LABEL_365;
          v60 = v34[8];
          swift_unknownObjectRetain();
          v56 = specialized Rope._Node.subscript.getter(v14, v60);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v61 = (_QWORD *)(v181 + v56);
        if (__OFADD__(v181, v56))
          goto LABEL_346;
        *(_QWORD *)&v192 = v55;
        *((_QWORD *)&v192 + 1) = v54;
        if (v181 >= (uint64_t)v9)
          v62 = (uint64_t)v9;
        else
          v62 = v181;
        if (v181 >= v8)
          v63 = v62;
        else
          v63 = v8;
        if ((uint64_t)v61 <= v8)
          v64 = (_QWORD *)v8;
        else
          v64 = (_QWORD *)(v181 + v56);
        if ((uint64_t)v61 <= (uint64_t)v9)
          v10 = v64;
        else
          v10 = v9;
        if ((_QWORD *)v63 == v10)
          goto LABEL_347;
        if (v63 != v181 || v10 != v61)
        {
          v81 = v180;
          if (*a4 != -1)
            swift_once();
          v82 = *a5;
          v83 = *a6;
          v191 = 0;
          v189 = 0u;
          v190 = 0u;
          v187 = 0u;
          v188 = 0u;
          swift_bridgeObjectRetain();
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v187, v82, v83);
          result = (_QWORD *)swift_bridgeObjectRelease();
          if (__OFSUB__(v10, v63))
            goto LABEL_357;
          v84 = *((_QWORD *)&v192 + 1);
          v6 = v192;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v63, (uint64_t)v10, (uint64_t)v10 - v63, v6, v84);
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          v17 = v180[8];
          v9 = (_QWORD *)v180[10];
          if (v17)
            v85 = v180[10];
          else
            v85 = 0;
          v15 = v181;
          if (v181 < 0 || v85 < v181)
            goto LABEL_359;
          v11 = v180[9];
          v179 = v180[11];
          if (v17 && *(_WORD *)(v17 + 16) && v181 < (uint64_t)v9)
          {
            v86 = *(unsigned __int8 *)(v17 + 18);
            if (*(_BYTE *)(v17 + 18))
            {
              result = (_QWORD *)swift_unknownObjectRetain_n();
              v8 = v181;
              v87 = (_QWORD *)v17;
              while (1)
              {
                v29 = *((unsigned __int16 *)v87 + 8);
                if (!*((_WORD *)v87 + 8))
                  goto LABEL_152;
                v89 = v87[5];
                v22 = __OFSUB__(v8, v89);
                v31 = v8 - v89;
                if (v22)
                  goto LABEL_338;
                if (__OFADD__(v31, 1))
                  goto LABEL_339;
                if (v31 + 1 <= 0)
                {
                  v29 = 0;
                }
                else
                {
                  if ((_DWORD)v29 == 1)
                  {
                    v8 = v31;
LABEL_152:
                    if (v8)
                      goto LABEL_335;
                    goto LABEL_153;
                  }
                  v90 = v87 + 8;
                  v91 = 1;
                  while (1)
                  {
                    v92 = *v90;
                    v90 += 3;
                    v8 = v31 - v92;
                    if (__OFSUB__(v31, v92))
                      goto LABEL_331;
                    if (__OFADD__(v8, 1))
                      goto LABEL_332;
                    if (v8 + 1 < 1)
                      break;
                    ++v91;
                    v31 = v8;
                    if (v29 == v91)
                      goto LABEL_152;
                  }
                  v29 = v91;
                  v8 = v31;
                }
LABEL_153:
                v88 = (4 * *((_BYTE *)v87 + 18) + 8) & 0x3C;
                v86 = ((-15 << v88) - 1) & v86 | (v29 << v88);
                v10 = (_QWORD *)v87[3 * v29 + 3];
                swift_unknownObjectRetain();
                result = (_QWORD *)swift_unknownObjectRelease();
                v87 = v10;
                if (!*((_BYTE *)v10 + 18))
                  goto LABEL_209;
              }
            }
            result = (_QWORD *)swift_unknownObjectRetain_n();
            v8 = v181;
            v10 = (_QWORD *)v17;
LABEL_209:
            v124 = *((unsigned __int16 *)v10 + 8);
            if (*((_WORD *)v10 + 8))
            {
              v125 = v10[3];
              v22 = __OFSUB__(v8, v125);
              v126 = v8 - v125;
              if (v22)
                goto LABEL_385;
              if (__OFADD__(v126, 1))
                goto LABEL_386;
              if (v126 + 1 <= 0)
              {
                v124 = 0;
              }
              else
              {
                if ((_DWORD)v124 == 1)
                {
                  v8 = v126;
                  goto LABEL_226;
                }
                v130 = v10 + 6;
                v131 = 1;
                while (1)
                {
                  v132 = *v130;
                  v130 += 3;
                  v8 = v126 - v132;
                  if (__OFSUB__(v126, v132))
                    goto LABEL_363;
                  if (__OFADD__(v8, 1))
                    goto LABEL_364;
                  if (v8 + 1 < 1)
                    break;
                  ++v131;
                  v126 = v8;
                  if (v124 == v131)
                    goto LABEL_226;
                }
                v124 = v131;
                v8 = v126;
              }
            }
            else
            {
LABEL_226:
              if (v8)
                goto LABEL_380;
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v14 = v86 & 0xFFFFFFFFFFFFF0FFLL | (v124 << 8);
            v81 = v180;
LABEL_168:
            swift_unknownObjectRetain();
            v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v14, (uint64_t)v10, v17, v11);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = (_QWORD *)swift_unknownObjectRelease_n();
          }
          else
          {
            v93 = swift_unknownObjectRetain_n();
            v14 = specialized Rope._endPath.getter(v93);
            swift_unknownObjectRelease();
            v10 = 0;
            v8 = 0;
            if (v17)
              goto LABEL_168;
            swift_bridgeObjectRelease();
            result = (_QWORD *)swift_bridgeObjectRelease();
            v177 = 0;
          }
          v9 = a3;
          v33 = v176;
          v77 = v181 - v8;
          if (__OFSUB__(v181, v8))
            goto LABEL_360;
          v8 = a2;
          goto LABEL_231;
        }
        if (v178 != v180[11])
          goto LABEL_356;
        if (!*v176)
          goto LABEL_411;
        specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)&v193);
        v204[0] = v194;
        v187 = v193;
        v188 = v194;
        v189 = v195;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v204);
        result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v204 + 8);
        v188 = MEMORY[0x1E0DEE9E0];
        v180[11] = v178 + 1;
        if (!v180[8])
          goto LABEL_412;
        specialized Rope._Node._finalizeModify(_:)(&v184, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*a4 != -1)
          swift_once();
        v65 = *a5;
        v66 = *a6;
        v191 = 0;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        swift_bridgeObjectRetain();
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v187, v65, v66);
        result = (_QWORD *)swift_bridgeObjectRelease();
        if (v178 + 1 != v180[11])
          goto LABEL_358;
        if (!*v176)
          goto LABEL_413;
        specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)&v196);
        v202 = v197;
        v203 = v198;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        v187 = v196;
        v189 = v199;
        v67 = *((_QWORD *)&v192 + 1);
        result = (_QWORD *)v192;
        v188 = v192;
        v68 = v178 + 2;
        v180[11] = v178 + 2;
        if (!v180[8])
          goto LABEL_414;
        v174 = (uint64_t)result;
        swift_bridgeObjectRetain_n();
        v171 = v67;
        swift_bridgeObjectRetain_n();
        v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = v180[8];
        v69 = v180[9];
        v71 = v180[10];
        v72 = v180[11];
        v179 = v178 + 2;
        *(_QWORD *)&v187 = v68;
        *((_QWORD *)&v187 + 1) = v14;
        *(_QWORD *)&v188 = v10;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v187, v70, v69, v71, v72);
        swift_unknownObjectRelease();
        v73 = v187;
        v74 = v188;
        v75 = swift_unknownObjectRetain();
        v76 = specialized Rope._endPath.getter(v75);
        result = (_QWORD *)swift_unknownObjectRelease();
        if (*((_QWORD *)&v73 + 1) >= v76)
        {
          v9 = a3;
          v8 = a2;
          v33 = v176;
LABEL_170:
          v77 = v181;
          goto LABEL_183;
        }
        v77 = v181;
        if ((_QWORD)v73 != v180[11])
          goto LABEL_370;
        if (v74)
        {
          v78 = v74 + 24 * ((*((_QWORD *)&v73 + 1) >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
          v79 = *(_QWORD *)(v78 + 32);
          v80 = *(_QWORD *)(v78 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v94 = v180[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v94);
          v79 = v95;
          v80 = v96;
          swift_unknownObjectRelease();
        }
        v9 = a3;
        v8 = a2;
        v33 = v176;
        if ((specialized static Dictionary<>.== infix(_:_:)(v79, v174) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          goto LABEL_183;
        }
        v97 = specialized static Set.== infix(_:_:)(v80, v171);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if ((v97 & 1) != 0)
        {
          v14 = specialized Rope._remove(at:)((uint64_t)&v187, v179, v14);
          v98 = v180[8];
          v99 = v180[11];
          if (v14 < specialized Rope._endPath.getter(v98) && *(_BYTE *)(v98 + 18))
          {
            v100 = (v14 >> ((4 * *(_BYTE *)(v98 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v98 + 24, v100, v14);
            swift_unknownObjectRelease();
          }
          v101 = v187;
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          if (v99 != v180[11])
            goto LABEL_392;
          if (!*v176)
            goto LABEL_415;
          result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v14, (uint64_t)v200);
          v187 = v200[0];
          v188 = v200[1];
          v189 = v200[2];
          if (__OFADD__(*((_QWORD *)&v200[0] + 1), v101))
            goto LABEL_393;
          *((_QWORD *)&v187 + 1) = *((_QWORD *)&v200[0] + 1) + v101;
          v179 = v99 + 1;
          v180[11] = v99 + 1;
          if (!v180[8])
            goto LABEL_416;
          v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          goto LABEL_170;
        }
LABEL_183:
        v102 = *v33;
        if (*v33)
          v102 = *(unsigned __int8 *)(v102 + 18);
        v81 = v180;
        if (v14 <= v102)
        {
          swift_bridgeObjectRelease_n();
          result = (_QWORD *)swift_bridgeObjectRelease_n();
          goto LABEL_231;
        }
        v103 = v180[8];
        v104 = v180[11];
        *(_QWORD *)&v187 = v179;
        *((_QWORD *)&v187 + 1) = v14;
        *(_QWORD *)&v188 = v10;
        if (v179 != v104)
          goto LABEL_371;
        if (v103)
        {
          v105 = *(unsigned __int8 *)(v103 + 18);
          result = (_QWORD *)swift_unknownObjectRetain();
          if (v14 <= v105)
            goto LABEL_372;
        }
        else if (!v14)
        {
          goto LABEL_372;
        }
        v106 = (4 * *((_BYTE *)v10 + 18) + 8) & 0x3C;
        if (((v14 >> v106) & 0xF) != 0)
        {
          v107 = ((((v14 >> v106) & 0xF) - 1) << v106) | ((-15 << v106) - 1) & v14;
          result = (_QWORD *)swift_unknownObjectRelease();
          v108 = v10;
          v109 = v179;
          v110 = v174;
        }
        else
        {
          swift_unknownObjectRetain();
          v111 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v187, v103);
          result = (_QWORD *)swift_unknownObjectRelease_n();
          v110 = v174;
          if ((v111 & 1) == 0)
            goto LABEL_383;
          v107 = *((_QWORD *)&v187 + 1);
          v109 = v187;
          v108 = (_QWORD *)v188;
        }
        v33 = v176;
        if (v109 != v180[11])
          goto LABEL_373;
        if (v108)
        {
          v112 = &v108[3 * ((v107 >> ((4 * *((_BYTE *)v108 + 18) + 8) & 0x3C)) & 0xF)];
          v113 = v112[4];
          v114 = v112[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v115 = v180[8];
          swift_unknownObjectRetain();
          v33 = v176;
          specialized Rope._Node.subscript.getter(v107, v115);
          v113 = v116;
          v114 = v117;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v113, v110) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v81 = v180;
LABEL_207:
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          goto LABEL_231;
        }
        v118 = specialized static Set.== infix(_:_:)(v114, v171);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v118 & 1) == 0)
        {
          v81 = v180;
          v9 = a3;
          goto LABEL_207;
        }
        v119 = specialized Rope._remove(at:)((uint64_t)&v187, v179, v14);
        v120 = v180[8];
        v121 = v180[11];
        v9 = a3;
        if (v119 >= specialized Rope._endPath.getter(v120))
        {
          v120 = 0;
        }
        else if (*(_BYTE *)(v120 + 18))
        {
          v122 = (v119 >> ((4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          v123 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v120 + 24, v122, v119);
          swift_unknownObjectRelease();
          v120 = v123;
        }
        v184 = v121;
        v185 = v119;
        v186 = v120;
        v127 = v187;
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if (v121 != v180[11])
          goto LABEL_394;
        v128 = v180[8];
        if (v128)
        {
          v129 = *(unsigned __int8 *)(v128 + 18);
          result = (_QWORD *)swift_unknownObjectRetain();
          if (v119 <= v129)
            goto LABEL_395;
        }
        else if (!v119)
        {
          goto LABEL_395;
        }
        if (v120 && (v164 = (4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C, ((v119 >> v164) & 0xF) != 0))
        {
          v185 = ((((v119 >> v164) & 0xF) - 1) << v164) | ((-15 << v164) - 1) & v119;
          result = (_QWORD *)swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
          v165 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v184, v128);
          result = (_QWORD *)swift_unknownObjectRelease_n();
          if ((v165 & 1) == 0)
            goto LABEL_405;
          v121 = v184;
        }
        v81 = v180;
        v33 = v176;
        if (v121 != v180[11])
          goto LABEL_396;
        if (!*v176)
          goto LABEL_417;
        v14 = v185;
        result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v185, (uint64_t)v201);
        v187 = v201[0];
        v188 = v201[1];
        v189 = v201[2];
        v22 = __OFSUB__(v181, *((_QWORD *)&v201[0] + 1));
        v182 = v181 - *((_QWORD *)&v201[0] + 1);
        if (v22)
          goto LABEL_398;
        if (__OFADD__(*((_QWORD *)&v201[0] + 1), v127))
          goto LABEL_400;
        *((_QWORD *)&v187 + 1) = *((_QWORD *)&v201[0] + 1) + v127;
        v179 = v121 + 1;
        v180[11] = v121 + 1;
        if (!v180[8])
          goto LABEL_418;
        v10 = specialized Rope._Node._finalizeModify(_:)(v183, &v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v22 = __OFSUB__(v177--, 1);
        v77 = v182;
        if (v22)
          goto LABEL_401;
LABEL_231:
        v133 = v81[8];
        v134 = v81[11];
        *(_QWORD *)&v187 = v179;
        *((_QWORD *)&v187 + 1) = v14;
        *(_QWORD *)&v188 = v10;
        if (__OFADD__(v177, 1))
          goto LABEL_348;
        if (v179 != v134)
          goto LABEL_349;
        ++v177;
        if (v10)
        {
          v135 = v10[3 * ((v14 >> ((4 * *((_BYTE *)v10 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v135 = specialized Rope._Node.subscript.getter(v14, v133);
        }
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v22 = __OFADD__(v77, v135);
        v136 = v77 + v135;
        if (v22)
          goto LABEL_350;
        if (v133)
        {
          v137 = ((-15 << ((4 * *(_BYTE *)(v133 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v133 + 18) | ((unint64_t)*(unsigned __int16 *)(v133 + 16) << ((4 * *(_BYTE *)(v133 + 18) + 8) & 0x3C));
          result = (_QWORD *)swift_unknownObjectRetain();
        }
        else
        {
          v137 = 0;
        }
        v34 = v180;
        if (v14 >= v137)
          goto LABEL_351;
        v181 = v136;
        if (v10
          && (v138 = (4 * *((_BYTE *)v10 + 18) + 8) & 0x3C,
              v139 = ((v14 >> v138) & 0xF) + 1,
              v139 < *((unsigned __int16 *)v10 + 8)))
        {
          v14 = (v139 << v138) | ((-15 << v138) - 1) & v14;
          result = (_QWORD *)swift_unknownObjectRelease_n();
        }
        else
        {
          v140 = *(unsigned __int8 *)(v133 + 18);
          v141 = (4 * v140 + 8) & 0x3C;
          v184 = (v14 >> v141) & 0xF;
          if (v140)
          {
            swift_unknownObjectRetain();
            v142 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v133 + 24, &v184, (uint64_t)&v187, v133, v140);
            result = (_QWORD *)swift_unknownObjectRelease();
            if ((v142 & 1) == 0)
              goto LABEL_249;
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v14 = *((_QWORD *)&v187 + 1);
          }
          else
          {
            v143 = ((v14 >> v141) & 0xF) + 1;
            if (v143 >= *(unsigned __int16 *)(v133 + 16))
            {
LABEL_249:
              if (v133)
              {
                v144 = *(unsigned __int8 *)(v133 + 18);
                v145 = *(unsigned __int16 *)(v133 + 16);
                result = (_QWORD *)swift_unknownObjectRelease_n();
                v14 = ((-15 << ((4 * v144 + 8) & 0x3C)) - 1) & v144 | (unint64_t)(v145 << ((4 * v144 + 8) & 0x3C));
              }
              else
              {
                v14 = 0;
              }
              *(_QWORD *)&v187 = v179;
              *((_QWORD *)&v187 + 1) = v14;
              *(_QWORD *)&v188 = 0;
              goto LABEL_253;
            }
            v14 = (v143 << v141) | ((-15 << v141) - 1) & v14;
            *((_QWORD *)&v187 + 1) = v14;
            result = (_QWORD *)swift_unknownObjectRelease_n();
            *(_QWORD *)&v188 = v133;
          }
        }
LABEL_253:
        v11 = v187;
        v15 = v188;
        if (v181 >= (uint64_t)v9)
        {
          v146 = *v33;
          if ((_QWORD *)v8 == v9)
          {
            v11 = v180[11];
            if (v146)
            {
              v147 = v180[10];
              if (v147 < v8)
                goto LABEL_378;
              v148 = v180[11];
              v149 = v180[9];
              v150 = *(unsigned __int8 *)(v146 + 18);
              if (*(_WORD *)(v146 + 16) && v147 > v8)
              {
                if (*(_BYTE *)(v146 + 18))
                {
                  result = (_QWORD *)swift_unknownObjectRetain_n();
                  v35 = v8;
                  v151 = v146;
                  while (1)
                  {
                    v153 = *(unsigned __int16 *)(v151 + 16);
                    if (!*(_WORD *)(v151 + 16))
                      goto LABEL_262;
                    v154 = *(_QWORD *)(v151 + 40);
                    v155 = v35 - v154;
                    if (__OFSUB__(v35, v154))
                      goto LABEL_353;
                    if (__OFADD__(v155, 1))
                      goto LABEL_354;
                    if (v155 + 1 <= 0)
                    {
                      v153 = 0;
                    }
                    else
                    {
                      if ((_DWORD)v153 == 1)
                      {
                        v35 -= v154;
LABEL_262:
                        if (v35)
                          goto LABEL_352;
                        goto LABEL_263;
                      }
                      v156 = *(_QWORD *)(v151 + 64);
                      v22 = __OFSUB__(v155, v156);
                      v157 = v155 - v156;
                      if (v22)
                        goto LABEL_367;
                      if (__OFADD__(v157, 1))
                        goto LABEL_368;
                      if (v157 + 1 >= 1)
                      {
                        if ((_DWORD)v153 != 2)
                        {
                          v158 = (_QWORD *)(v151 + 88);
                          v159 = 2;
                          while (v153 != v159)
                          {
                            v35 = v157 - *v158;
                            if (__OFSUB__(v157, *v158))
                              goto LABEL_341;
                            if (__OFADD__(v35, 1))
                              goto LABEL_342;
                            if (v35 + 1 < 1)
                            {
                              v153 = v159;
                              v35 = v157;
                              goto LABEL_263;
                            }
                            ++v159;
                            v158 += 3;
                            v157 = v35;
                            if (v153 == v159)
                              goto LABEL_262;
                          }
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
                          goto LABEL_344;
                        }
                        v35 = v157;
                        goto LABEL_262;
                      }
                      v153 = 1;
                      v35 = v155;
                    }
LABEL_263:
                    v152 = (4 * *(_BYTE *)(v151 + 18) + 8) & 0x3C;
                    v150 = ((-15 << v152) - 1) & v150 | (v153 << v152);
                    v15 = *(_QWORD *)(v151 + 24 + 24 * v153);
                    swift_unknownObjectRetain();
                    result = (_QWORD *)swift_unknownObjectRelease();
                    v151 = v15;
                    if (!*(_BYTE *)(v15 + 18))
                      goto LABEL_289;
                  }
                }
                result = (_QWORD *)swift_unknownObjectRetain_n();
                v150 = 0;
                v35 = v8;
                v15 = v146;
LABEL_289:
                v160 = *(unsigned __int16 *)(v15 + 16);
                if (*(_WORD *)(v15 + 16))
                {
                  v161 = *(_QWORD *)(v15 + 24);
                  v22 = __OFSUB__(v35, v161);
                  v162 = v35 - v161;
                  if (v22)
                    goto LABEL_403;
                  if (__OFADD__(v162, 1))
                    goto LABEL_404;
                  if (v162 + 1 <= 0)
                  {
                    v160 = 0;
                    goto LABEL_327;
                  }
                  if ((_DWORD)v160 != 1)
                  {
                    v163 = *(_QWORD *)(v15 + 48);
                    v35 = v162 - v163;
                    if (__OFSUB__(v162, v163))
                      goto LABEL_406;
                    if (__OFADD__(v35, 1))
                      goto LABEL_407;
                    if (v35 + 1 >= 1)
                    {
                      if ((_DWORD)v160 != 2)
                      {
                        v166 = (_QWORD *)(v15 + 72);
                        v167 = 2;
                        while (v160 != v167)
                        {
                          v162 = v35 - *v166;
                          if (__OFSUB__(v35, *v166))
                            goto LABEL_388;
                          if (__OFADD__(v162, 1))
                            goto LABEL_389;
                          if (v162 + 1 < 1)
                          {
                            v160 = v167;
                            goto LABEL_327;
                          }
                          ++v167;
                          v166 += 3;
                          v35 = v162;
                          if (v160 == v167)
                            goto LABEL_299;
                        }
                        goto LABEL_387;
                      }
                      goto LABEL_298;
                    }
                    v160 = 1;
                    v35 = v162;
LABEL_327:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v14 = v150 & 0xFFFFFFFFFFFFF0FFLL | (v160 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    v11 = v148;
                    v177 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, v14, v15, v146, v149);
                    result = (_QWORD *)swift_unknownObjectRelease_n();
                    v9 = a3;
                    goto LABEL_53;
                  }
                }
                else
                {
LABEL_298:
                  v162 = v35;
                }
LABEL_299:
                if (v162)
                  goto LABEL_402;
                v35 = 0;
                goto LABEL_327;
              }
              v14 = ((-15 << ((4 * v150 + 8) & 0x3C)) - 1) & v150 | ((unint64_t)*(unsigned __int16 *)(v146 + 16) << ((4 * v150 + 8) & 0x3C));
              swift_unknownObjectRetain();
              v35 = 0;
              v15 = 0;
              goto LABEL_52;
            }
            if (v8 > 0)
              goto LABEL_384;
            v35 = 0;
            v15 = 0;
            v14 = 0;
            v177 = 0;
LABEL_53:
            v22 = __OFSUB__(v8, v35);
            v181 = v8 - v35;
            v34 = v180;
            if (v22)
              goto LABEL_374;
          }
          else
          {
            v181 = 0;
            v177 = 0;
            v15 = 0;
            v14 = 0;
            v11 = v180[11];
            if (v146)
            {
              v15 = 0;
              v181 = v180[10];
              v177 = v180[9];
              v14 = ((-15 << ((4 * *(_BYTE *)(v146 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v146 + 18) | ((unint64_t)*(unsigned __int16 *)(v146 + 16) << ((4 * *(_BYTE *)(v146 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*((_BYTE *)v10 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v6 = (uint64_t)v10;
LABEL_73:
        v29 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16))
          goto LABEL_71;
        v43 = *(_QWORD *)(v6 + 40);
        v22 = __OFSUB__(v8, v43);
        v31 = v8 - v43;
        if (v22)
          goto LABEL_336;
        if (__OFADD__(v31, 1))
          goto LABEL_337;
        if (v31 + 1 <= 0)
        {
          v29 = 0;
          goto LABEL_72;
        }
        if ((_DWORD)v29 == 1)
        {
          v8 = v31;
LABEL_71:
          if (!v8)
            goto LABEL_72;
          __break(1u);
LABEL_335:
          __break(1u);
LABEL_336:
          __break(1u);
LABEL_337:
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
          goto LABEL_340;
        }
        v44 = (uint64_t *)(v6 + 64);
        v45 = 1;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v8 = v31 - v46;
          if (__OFSUB__(v31, v46))
            break;
          if (__OFADD__(v8, 1))
            goto LABEL_330;
          if (v8 + 1 < 1)
          {
            v29 = v45;
            v8 = v31;
LABEL_72:
            v42 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
            v38 = ((-15 << v42) - 1) & v38 | (v29 << v42);
            v11 = *(_QWORD *)(v6 + 24 + 24 * v29);
            swift_unknownObjectRetain();
            result = (_QWORD *)swift_unknownObjectRelease();
            v6 = v11;
            if (!*(_BYTE *)(v11 + 18))
              goto LABEL_87;
            goto LABEL_73;
          }
          ++v45;
          v31 = v8;
          if (v29 == v45)
            goto LABEL_71;
        }
        __break(1u);
LABEL_330:
        __break(1u);
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        v27 = v31;
        v16 = v29;
        continue;
      }
      break;
    }
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v38 = 0;
    v11 = (uint64_t)v10;
LABEL_87:
    v47 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16))
      goto LABEL_99;
    v48 = *(_QWORD *)(v11 + 24);
    v22 = __OFSUB__(v8, v48);
    v49 = v8 - v48;
    if (v22)
      goto LABEL_381;
    if (__OFADD__(v49, 1))
      goto LABEL_382;
    if (v49 + 1 <= 0)
    {
      v47 = 0;
    }
    else
    {
      if ((_DWORD)v47 == 1)
      {
        v8 = v49;
LABEL_99:
        if (v8)
          goto LABEL_379;
        goto LABEL_100;
      }
      v50 = (uint64_t *)(v11 + 48);
      v51 = 1;
      while (1)
      {
        v52 = *v50;
        v50 += 3;
        v8 = v49 - v52;
        if (__OFSUB__(v49, v52))
          goto LABEL_361;
        if (__OFADD__(v8, 1))
          goto LABEL_362;
        if (v8 + 1 < 1)
          break;
        ++v51;
        v49 = v8;
        if (v47 == v51)
          goto LABEL_99;
      }
      v47 = v51;
      v8 = v49;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v40 = v38 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
  return result;
}

char *specialized BidirectionalCollection.index(_:offsetBy:)@<X0>(char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  char **v6;
  char **v8;
  char **v9;
  char *result;
  char *v11;
  char *v12;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char **v18;
  char *v19;
  char v20;
  uint64_t v21;
  BOOL v22;

  v5 = a2;
  v6 = a1;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v8 = (char **)a1[3];
    v9 = (char **)a1[4];
    result = a1[1];
    v11 = v6[2];
    v12 = *v6;
    if (!a2)
      goto LABEL_39;
    while (1)
    {
      if (__OFADD__(v12++, 1))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        return result;
      }
      if (v12 == v11)
      {
        v6 = (char **)((char *)v8 + 1);
        if (__OFADD__(v8, 1))
          goto LABEL_41;
        v12 = v11;
        if (v6 != v9)
        {
          v14 = *(_BYTE *)(a3 + 24);
          result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v6);
          v11 = &result[v15];
          v16 = __OFADD__(result, v15);
          if ((v14 & 1) != 0)
          {
            if (v16)
              goto LABEL_49;
            v8 = v6;
            v12 = result;
            if ((uint64_t)v11 < (uint64_t)result)
              goto LABEL_50;
          }
          else
          {
            if (v16)
              goto LABEL_51;
            v8 = v6;
            v12 = result;
            if ((uint64_t)v11 < (uint64_t)result)
            {
              __break(1u);
              break;
            }
          }
        }
      }
      if (!--v5)
        goto LABEL_39;
    }
  }
  v17 = 0;
  v11 = v6[2];
  v8 = (char **)v6[3];
  v12 = *v6;
  result = v6[1];
  v18 = v8;
  v19 = *v6;
  do
  {
    if (v19 != result)
    {
      v12 = v19 - 1;
      if (__OFSUB__(v19, 1))
        goto LABEL_42;
LABEL_21:
      v19 = v12;
      goto LABEL_22;
    }
    if (v18)
    {
      v8 = (char **)((char *)v18 - 1);
      if (__OFSUB__(v18, 1))
        goto LABEL_43;
      v20 = *(_BYTE *)(a3 + 24);
      result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, (char *)v18 - 1);
      v11 = &result[v21];
      v22 = __OFADD__(result, v21);
      if ((v20 & 1) != 0)
      {
        if (v22)
          goto LABEL_45;
        if ((uint64_t)v11 < (uint64_t)result)
          goto LABEL_46;
      }
      else
      {
        if (v22)
          goto LABEL_47;
        if ((uint64_t)v11 < (uint64_t)result)
          goto LABEL_48;
      }
      v12 = v11 - 1;
      if (__OFSUB__(v11, 1))
        goto LABEL_44;
      v18 = v8;
      goto LABEL_21;
    }
    v19 = result;
LABEL_22:
    --v17;
  }
  while (v17 > v5);
  v9 = (char **)v6[4];
LABEL_39:
  *a4 = v12;
  a4[1] = result;
  a4[2] = v11;
  a4[3] = (char *)v8;
  a4[4] = (char *)v9;
  return result;
}

unint64_t specialized BidirectionalCollection.index(_:offsetBy:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  __int128 *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  int v125;
  void (*v126)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _BYTE v139[12];
  int v140;
  unint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  __int128 *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  __int128 *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  _BYTE v179[40];
  _QWORD v180[3];
  uint64_t v181;
  unint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE v187[40];
  _BYTE v188[40];
  _OWORD v189[4];
  uint64_t v190;
  _BYTE v191[72];
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;

  v7 = a5;
  if ((a5 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)&v210 = result;
    *((_QWORD *)&v210 + 1) = a2;
    *(_QWORD *)&v211 = a3;
    *((_QWORD *)&v211 + 1) = a4;
    if (a5)
    {
      v8 = a6;
      do
      {
        specialized Collection.formIndex(after:)((unint64_t *)&v210);
        --v7;
      }
      while (v7);
      a2 = *((_QWORD *)&v210 + 1);
      result = v210;
      a4 = *((_QWORD *)&v211 + 1);
      a3 = v211;
      a6 = v8;
    }
LABEL_193:
    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
    return result;
  }
  v141 = a6;
  v9 = *((_QWORD *)v6 + 25);
  v222 = *((_QWORD *)v6 + 24);
  v10 = v6[3];
  v212 = v6[2];
  v213 = v10;
  v11 = v6[7];
  v216 = v6[6];
  v217 = v11;
  v12 = v6[5];
  v214 = v6[4];
  v215 = v12;
  v13 = v6[11];
  v220 = v6[10];
  v221 = v13;
  v14 = v6[9];
  v218 = v6[8];
  v219 = v14;
  v15 = v6[1];
  v210 = *v6;
  v211 = v15;
  v209 = v9;
  v145 = *(_QWORD *)(v9 + 16);
  if (v145)
  {
    v16 = 0;
    v148 = v219;
    v150 = *((_QWORD *)&v218 + 1);
    v17 = *((_QWORD *)&v218 + 1) >> 10;
    v153 = *((_QWORD *)&v220 + 1) >> 10;
    v18 = (_QWORD *)v210;
    v155 = a5;
    v156 = *((_QWORD *)&v210 + 1);
    v151 = (__int128 *)(v210 + 16);
    v177 = &v196;
    v174 = (__int128 *)&v185;
    v144 = v9;
    v142 = &v193;
    v143 = (uint64_t *)(v9 + 40);
    v146 = v220;
    v147 = *((_QWORD *)&v219 + 1);
    v149 = *((_QWORD *)&v218 + 1) >> 10;
    v159 = (_QWORD *)v210;
    while (1)
    {
      if (v17 >= result >> 10 || v153 < result >> 10)
        goto LABEL_202;
      v20 = v18[8];
      v21 = v18[10];
      if (v20)
        v22 = v18[10];
      else
        v22 = 0;
      if (result < 0x800 || (v23 = (result >> 11) - 1, v22 < v23))
      {
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        result = swift_unknownObjectRelease();
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
      v172 = v18[11];
      v164 = a4;
      v165 = result;
      v162 = a2;
      v163 = a3;
      v160 = v16;
      v161 = result >> 10;
      v166 = result >> 11;
      if (!v20)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v210);
        v26 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        goto LABEL_73;
      }
      v24 = v18[9];
      v25 = *(unsigned __int8 *)(v20 + 18);
      v175 = v24;
      v176 = (result >> 11) - 1;
      if ((uint64_t)(result >> 11) <= v21)
      {
        if (*(_WORD *)(v20 + 16))
          break;
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v210);
      swift_unknownObjectRelease();
      v41 = *(unsigned __int16 *)(v20 + 16);
      v42 = *(_BYTE *)(v20 + 18);
      swift_unknownObjectRelease_n();
      v26 = 0;
      v43 = 0;
      v44 = ((-15 << ((4 * v42 + 8) & 0x3C)) - 1) & v25 | (unint64_t)(v41 << ((4 * v42 + 8) & 0x3C));
LABEL_72:
      swift_unknownObjectRetain();
      v39 = v44;
      v51 = v44;
      v38 = v43;
      v40 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v172, v51, v43, v20, v175);
      swift_unknownObjectRelease_n();
      v18 = v159;
      v23 = v176;
LABEL_73:
      v169 = v23 - v26;
      if (__OFSUB__(v23, v26))
        goto LABEL_204;
      if (v172 != v18[11])
        goto LABEL_205;
      if (v38)
      {
        v52 = v38;
        v53 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
        v54 = v39;
        v55 = v52 + 24 * ((v39 >> v53) & 0xF);
        v57 = *(_QWORD *)(v55 + 32);
        v56 = *(_QWORD *)(v55 + 40);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
      }
      else
      {
        v58 = v18[8];
        swift_unknownObjectRetain();
        v52 = 0;
        v54 = v39;
        specialized Rope._Node.subscript.getter(v39, v58);
        v57 = v59;
        v56 = v60;
        result = swift_unknownObjectRelease();
      }
      if (v156 >= v40)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v138 = v155;
        goto LABEL_177;
      }
      v154 = v56;
      v61 = v172;
      v175 = v57;
      while (2)
      {
        v62 = v18[8];
        v63 = v18[9];
        v65 = (_BYTE *)v18[10];
        v64 = v18[11];
        v192 = v61;
        v193 = v54;
        v194 = v52;
        if (v61 != v64)
          goto LABEL_208;
        v66 = v61;
        v168 = v40;
        if (v62)
        {
          v67 = *(unsigned __int8 *)(v62 + 18);
          result = swift_unknownObjectRetain();
          if (v54 <= v67)
            goto LABEL_209;
        }
        else if (!v54)
        {
          goto LABEL_209;
        }
        if (v52)
        {
          v68 = (4 * *(_BYTE *)(v52 + 18) + 8) & 0x3C;
          if (((v54 >> v68) & 0xF) != 0)
          {
            v69 = ((((v54 >> v68) & 0xF) - 1) << v68) | ((-15 << v68) - 1) & v54;
            v193 = v69;
LABEL_134:
            v98 = (4 * *(_BYTE *)(v52 + 18) + 8) & 0x3C;
            v158 = v69;
            v167 = v52;
            v86 = *(_QWORD *)(v52 + 24 * ((v69 >> v98) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v87 = 0;
            goto LABEL_135;
          }
        }
        v70 = (4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C;
        v71 = (v54 >> v70) & 0xF;
        if (!*(_BYTE *)(v62 + 18))
        {
          if (!v71)
            goto LABEL_221;
          v69 = ((v71 - 1) << v70) | ((-15 << v70) - 1) & v54;
          v193 = v69;
          v194 = v62;
          v52 = v62;
          v18 = v159;
          if (v62)
            goto LABEL_134;
          goto LABEL_99;
        }
        v72 = v62 + 24;
        if (v71 < *(unsigned __int16 *)(v62 + 16))
        {
          v176 = v63;
          v73 = *(_QWORD *)(v72 + 24 * ((v54 >> v70) & 0xF));
          v74 = (4 * *(_BYTE *)(v73 + 18) + 8) & 0x3C;
          v75 = v54;
          v76 = (v54 >> v74) & 0xF;
          if (*(_BYTE *)(v73 + 18))
          {
            v77 = v73 + 24;
            if (v76 >= *(unsigned __int16 *)(v73 + 16))
            {
              swift_unknownObjectRetain();
              result = swift_unknownObjectRetain();
              if (v76)
                goto LABEL_105;
              goto LABEL_121;
            }
            v173 = v65;
            v171 = v73 + 24;
            v78 = *(_QWORD *)(v77 + 24 * v76);
            v79 = (4 * *(_BYTE *)(v78 + 18) + 8) & 0x3C;
            v80 = (v75 >> v79) & 0xF;
            if (!*(_BYTE *)(v78 + 18))
            {
              if (v80)
              {
                v193 = ((v80 - 1) << v79) | ((-15 << v79) - 1) & v75;
                v194 = v78;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                v52 = v78;
                goto LABEL_130;
              }
              swift_unknownObjectRetain();
              result = swift_unknownObjectRetain();
              goto LABEL_120;
            }
            v81 = (_QWORD *)(v78 + 24);
            if (v80 < *(unsigned __int16 *)(v78 + 16))
            {
              v158 = v78;
              v82 = v81[3 * ((v75 >> v79) & 0xF)];
              v83 = *(unsigned __int8 *)(v82 + 18);
              v84 = (4 * v83 + 8) & 0x3C;
              v85 = (v75 >> v84) & 0xF;
              *(_QWORD *)&v183 = v85;
              if (v83)
              {
                v170 = v81;
                v167 = v79;
                v157 = v82 + 16;
                v152 = v82 + 24;
                v140 = v83;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                LODWORD(v157) = specialized closure #1 in Rope._Node.formPredecessor(of:)(v157, v152, (uint64_t *)&v183, (uint64_t)&v192, v140);
                result = swift_unknownObjectRelease();
                if ((v157 & 1) != 0)
                {
                  v52 = v194;
                  goto LABEL_129;
                }
LABEL_113:
                if (v80)
                {
                  v91 = v80 - 1;
                  v52 = v170[3 * (int)v80 - 3];
                  if (!*(_WORD *)(v52 + 16))
                    goto LABEL_226;
                  v92 = *(unsigned __int16 *)(v52 + 16) - 1;
                  v93 = *(unsigned __int8 *)(v52 + 18);
                  v193 = ((-15 << ((4 * v93 + 8) & 0x3C)) - 1) & (v193 & ((-15 << v167) - 1) | (v91 << v167)) | (v92 << ((4 * v93 + 8) & 0x3C));
                  v18 = v159;
                  if (v93)
                  {
                    swift_unknownObjectRetain();
                    v94 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v52 + 24, v92, v142);
                    swift_unknownObjectRelease();
                    v52 = v94;
                  }
                  v66 = v172;
                  v194 = v52;
                  swift_unknownObjectRelease();
                  goto LABEL_131;
                }
                result = swift_unknownObjectRelease();
LABEL_120:
                v77 = v171;
                if (v76)
                {
LABEL_105:
                  v52 = *(_QWORD *)(v77 + 24 * ((int)v76 - 1));
                  if (!*(_WORD *)(v52 + 16))
                    goto LABEL_225;
                  v88 = *(unsigned __int16 *)(v52 + 16) - 1;
                  v89 = *(unsigned __int8 *)(v52 + 18);
                  v193 = ((-15 << ((4 * v89 + 8) & 0x3C)) - 1) & (v193 & ((-15 << v74) - 1) | ((v76 - 1) << v74)) | (v88 << ((4 * v89 + 8) & 0x3C));
                  if (v89)
                  {
                    swift_unknownObjectRetain();
                    v90 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v52 + 24, v88, v142);
                    swift_unknownObjectRelease();
                    v52 = v90;
                  }
                  v18 = v159;
                  v66 = v172;
                  v194 = v52;
                  goto LABEL_131;
                }
LABEL_121:
                result = swift_unknownObjectRelease();
LABEL_122:
                v66 = v172;
                if (!v71)
                  goto LABEL_217;
                goto LABEL_123;
              }
              if (v85)
              {
                v193 = ((v85 - 1) << v84) | ((-15 << v84) - 1) & v75;
                v52 = v82;
                v194 = v82;
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
                swift_unknownObjectRetain();
LABEL_129:
                swift_unknownObjectRelease();
LABEL_130:
                v18 = v159;
                v66 = v172;
LABEL_131:
                swift_unknownObjectRelease();
                goto LABEL_132;
              }
            }
            v170 = v81;
            v167 = v79;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            result = swift_unknownObjectRetain();
            goto LABEL_113;
          }
          if (v76)
          {
            v193 = ((v76 - 1) << v74) | ((-15 << v74) - 1) & v75;
            v194 = v73;
            swift_unknownObjectRetain();
            v52 = v73;
            v18 = v159;
            v66 = v172;
            goto LABEL_132;
          }
          result = swift_unknownObjectRetain();
          goto LABEL_122;
        }
        result = swift_unknownObjectRetain();
        if (!v71)
          goto LABEL_217;
LABEL_123:
        v52 = *(_QWORD *)(v72 + 24 * ((int)v71 - 1));
        if (!*(_WORD *)(v52 + 16))
          goto LABEL_218;
        v95 = *(unsigned __int16 *)(v52 + 16) - 1;
        v96 = *(unsigned __int8 *)(v52 + 18);
        v193 = ((-15 << ((4 * v96 + 8) & 0x3C)) - 1) & (v193 & ((-15 << v70) - 1) | ((v71 - 1) << v70)) | (v95 << ((4 * v96 + 8) & 0x3C));
        if (v96)
        {
          swift_unknownObjectRetain();
          v97 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v52 + 24, v95, v142);
          swift_unknownObjectRelease();
          v52 = v97;
        }
        v18 = v159;
        v194 = v52;
LABEL_132:
        swift_unknownObjectRelease();
        if (v192 != v66)
          goto LABEL_210;
        v69 = v193;
        if (v52)
          goto LABEL_134;
LABEL_99:
        swift_unknownObjectRetain();
        v158 = v69;
        v86 = specialized Rope._Node.subscript.getter(v69, v62);
        swift_unknownObjectRelease();
        v167 = 0;
        v87 = 1;
LABEL_135:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (__OFSUB__(v169, v86))
          goto LABEL_211;
        if (v172 != v18[11])
          goto LABEL_212;
        v152 = v169 - v86;
        if ((v87 & 1) != 0)
        {
          v99 = v18[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v158, v99);
          v176 = v100;
          v157 = v101;
          swift_unknownObjectRelease();
        }
        else
        {
          v102 = v167 + 24 * ((v158 >> ((4 * *(_BYTE *)(v167 + 18) + 8) & 0x3C)) & 0xF);
          v103 = *(_QWORD *)(v102 + 40);
          v176 = *(_QWORD *)(v102 + 32);
          swift_bridgeObjectRetain();
          v157 = v103;
          swift_bridgeObjectRetain();
        }
        v104 = v175;
        --v168;
        swift_bridgeObjectRetain();
        v105 = v143;
        v106 = v145;
        do
        {
          v109 = *(v105 - 1);
          v108 = *v105;
          if (*(_QWORD *)(v104 + 16))
          {
            swift_bridgeObjectRetain_n();
            v110 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v108);
            if ((v111 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v104 + 56) + 72 * v110, (uint64_t)&v203);
            }
            else
            {
              v207 = 0;
              v205 = 0u;
              v206 = 0u;
              v203 = 0u;
              v204 = 0u;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            v207 = 0;
            v205 = 0u;
            v206 = 0u;
            v203 = 0u;
            v204 = 0u;
            swift_bridgeObjectRetain();
          }
          v112 = v176;
          if (*(_QWORD *)(v176 + 16))
          {
            swift_bridgeObjectRetain();
            v113 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v108);
            if ((v114 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v112 + 56) + 72 * v113, (uint64_t)&v198);
            }
            else
            {
              v202 = 0;
              v200 = 0u;
              v201 = 0u;
              v198 = 0u;
              v199 = 0u;
            }
            swift_bridgeObjectRelease();
            v104 = v175;
          }
          else
          {
            v202 = 0;
            v200 = 0u;
            v201 = 0u;
            v198 = 0u;
            v199 = 0u;
          }
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v203, (uint64_t)&v192, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v198, (uint64_t)v177, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (v195)
          {
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v192, (uint64_t)v191, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v197)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v191);
LABEL_175:
              outlined destroy of Any?((uint64_t)&v192, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v198, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v203, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_176:
              outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v209);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v138 = v155;
              v18 = v159;
              goto LABEL_177;
            }
            v115 = *((_OWORD *)v177 + 3);
            v189[2] = *((_OWORD *)v177 + 2);
            v189[3] = v115;
            v190 = v177[8];
            v116 = *((_OWORD *)v177 + 1);
            v189[0] = *(_OWORD *)v177;
            v189[1] = v116;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v191, (uint64_t)v188);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v189, (uint64_t)v187);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v188, (uint64_t)&v183, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v187, (uint64_t)v174, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v184)
            {
              if (v186)
              {
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v183, (uint64_t)v180);
                outlined init with take of any PredicateExpression<Self.Output == B1>(v174, (uint64_t)v179);
                v117 = v181;
                v171 = v182;
                v170 = __swift_project_boxed_opaque_existential_1(v180, v181);
                v173 = v139;
                v118 = *(_QWORD *)(v117 - 8);
                MEMORY[0x1E0C80A78](v170);
                v120 = &v139[-((v119 + 15) & 0xFFFFFFFFFFFFFFF0)];
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v179, (uint64_t)&v178);
                v121 = type metadata accessor for Optional();
                v122 = *(_QWORD *)(v121 - 8);
                MEMORY[0x1E0C80A78](v121);
                v124 = &v139[-v123];
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                v125 = swift_dynamicCast();
                v126 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v118 + 56);
                if (v125)
                {
                  v126(v124, 0, 1, v117);
                  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v118 + 32))(v120, v124, v117);
                  v107 = dispatch thunk of static Equatable.== infix(_:_:)();
                  (*(void (**)(_BYTE *, uint64_t))(v118 + 8))(v120, v117);
                }
                else
                {
                  v126(v124, 1, 1, v117);
                  (*(void (**)(_BYTE *, uint64_t))(v122 + 8))(v124, v121);
                  v107 = 0;
                }
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v179);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v180);
                v104 = v175;
LABEL_143:
                outlined destroy of Any?((uint64_t)v187, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v188, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v189);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v191);
                outlined destroy of Any?((uint64_t)&v192, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v198, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v203, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v107 & 1) == 0)
                  goto LABEL_176;
                goto LABEL_144;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
            }
            else
            {
              if (!v186)
              {
                v107 = 1;
                goto LABEL_143;
              }
              outlined destroy of Any?((uint64_t)v174, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            }
            v107 = 0;
            goto LABEL_143;
          }
          if (v197)
            goto LABEL_175;
          outlined destroy of Any?((uint64_t)&v192, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v198, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v203, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_144:
          v105 += 2;
          --v106;
        }
        while (v106);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v209);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v127 = v152;
        v169 = v152;
        v128 = v155;
        v52 = v167;
        v40 = v168;
        v54 = v158;
        v18 = v159;
        v61 = v172;
        result = v154;
        if (v156 < v168)
          continue;
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v169 = v127;
      v138 = v128;
LABEL_177:
      v129 = v151[1];
      v223 = *v151;
      v224 = v129;
      v225 = v151[2];
      BigString.utf8.getter();
      if (__OFSUB__(v169, v166))
        goto LABEL_206;
      v130 = BigString.UTF8View.index(_:offsetBy:)();
      v132 = v131;
      v134 = v133;
      v136 = v135;
      outlined release of Locale((uint64_t)&v208);
      outlined release of AttributedString.Runs((uint64_t)&v210);
      v137 = v130 >> 10;
      v17 = v149;
      if (v149 >= v130 >> 10)
        result = v150;
      else
        result = v130;
      if (v161 < result >> 10)
        goto LABEL_207;
      v16 = v160 - 1;
      if (v149 >= v137)
        a4 = v146;
      else
        a4 = v136;
      if (v149 >= v137)
        a3 = v147;
      else
        a3 = v134;
      if (v149 >= v137)
        a2 = v148;
      else
        a2 = v132;
      if (v16 <= v138)
      {
        a6 = v141;
        goto LABEL_193;
      }
    }
    if ((_DWORD)v25)
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v210);
      v26 = v23;
      v27 = v20;
      while (1)
      {
        v30 = *(unsigned __int16 *)(v27 + 16);
        if (*(_WORD *)(v27 + 16))
        {
          v31 = *(_QWORD *)(v27 + 40);
          v32 = v26 - v31;
          if (__OFSUB__(v26, v31))
            goto LABEL_198;
          if (__OFADD__(v32, 1))
            goto LABEL_199;
          if (v32 + 1 <= 0)
          {
            v30 = 0;
            goto LABEL_25;
          }
          if ((_DWORD)v30 == 1)
          {
            v26 -= v31;
          }
          else
          {
            v33 = *(_QWORD *)(v27 + 64);
            v34 = __OFSUB__(v32, v33);
            v35 = v32 - v33;
            if (v34)
              goto LABEL_200;
            if (__OFADD__(v35, 1))
              goto LABEL_201;
            if (v35 + 1 < 1)
            {
              v30 = 1;
              v26 = v32;
              goto LABEL_25;
            }
            if ((_DWORD)v30 != 2)
            {
              v36 = (_QWORD *)(v27 + 88);
              v37 = 2;
              while (v30 != v37)
              {
                v26 = v35 - *v36;
                if (__OFSUB__(v35, *v36))
                  goto LABEL_195;
                if (__OFADD__(v26, 1))
                  goto LABEL_196;
                if (v26 + 1 < 1)
                {
                  v30 = v37;
                  v26 = v35;
                  goto LABEL_25;
                }
                ++v37;
                v36 += 3;
                v35 = v26;
                if (v30 == v37)
                  goto LABEL_24;
              }
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
              goto LABEL_203;
            }
            v26 = v35;
          }
        }
LABEL_24:
        if (v26)
          goto LABEL_197;
LABEL_25:
        v28 = (4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C;
        v25 = ((-15 << v28) - 1) & v25 | (v30 << v28);
        v29 = *(_QWORD *)(v27 + 24 + 24 * v30);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v27 = v29;
        if (!*(_BYTE *)(v29 + 18))
          goto LABEL_49;
      }
    }
    swift_unknownObjectRetain_n();
    result = outlined retain of AttributedString.Runs((uint64_t)&v210);
    v25 = 0;
    v26 = v23;
    v29 = v20;
LABEL_49:
    v45 = *(unsigned __int16 *)(v29 + 16);
    v167 = v29;
    if (!(_DWORD)v45)
      goto LABEL_58;
    v46 = *(_QWORD *)(v29 + 24);
    v34 = __OFSUB__(v26, v46);
    v47 = v26 - v46;
    if (v34)
      goto LABEL_219;
    if (__OFADD__(v47, 1))
      goto LABEL_220;
    if (v47 + 1 <= 0)
    {
      v45 = 0;
    }
    else
    {
      if ((_DWORD)v45 == 1)
      {
LABEL_59:
        if (v47)
          goto LABEL_216;
        v26 = 0;
        goto LABEL_71;
      }
      v48 = *(_QWORD *)(v167 + 48);
      v26 = v47 - v48;
      if (__OFSUB__(v47, v48))
        goto LABEL_222;
      if (__OFADD__(v26, 1))
        goto LABEL_223;
      if (v26 + 1 >= 1)
      {
        if ((_DWORD)v45 != 2)
        {
          v49 = (_QWORD *)(v167 + 72);
          v50 = 2;
          while (v45 != v50)
          {
            v47 = v26 - *v49;
            if (__OFSUB__(v26, *v49))
              goto LABEL_214;
            if (__OFADD__(v47, 1))
              goto LABEL_215;
            if (v47 + 1 < 1)
            {
              v45 = v50;
              goto LABEL_71;
            }
            ++v50;
            v49 += 3;
            v26 = v47;
            if (v45 == v50)
              goto LABEL_59;
          }
          goto LABEL_213;
        }
LABEL_58:
        v47 = v26;
        goto LABEL_59;
      }
      v45 = 1;
      v26 = v47;
    }
LABEL_71:
    swift_unknownObjectRelease();
    v43 = v167;
    swift_unknownObjectRelease();
    v44 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v45 << 8);
    goto LABEL_72;
  }
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
  return result;
}

uint64_t *specialized BidirectionalCollection.index(_:offsetBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  int v63;
  char v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v80;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;

  v7 = *result;
  v8 = result[1];
  v9 = result[2];
  v10 = result[3];
  v11 = result[4];
  v84 = a3;
  if (a2 < 0)
  {
    v44 = a5;
    v45 = 0;
    while (1)
    {
      v47 = a3[8];
      if (v47)
      {
        if (v11 != a3[10])
          goto LABEL_124;
      }
      else if (v11)
      {
LABEL_124:
        v60 = a3[11];
        v86 = v7;
        v87 = v8;
        v88 = v9;
        v15 = __OFSUB__(v10--, 1);
        if (v15)
          goto LABEL_179;
        if (v7 != v60)
          goto LABEL_180;
        v80 = v7;
        if (v47)
        {
          v61 = *(unsigned __int8 *)(v47 + 18);
          result = (uint64_t *)swift_unknownObjectRetain();
          if (v8 <= v61)
            goto LABEL_181;
        }
        else if (!v8)
        {
          goto LABEL_181;
        }
        if (v9)
        {
          v62 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
          if (((v8 >> v62) & 0xF) != 0)
          {
            v8 = ((((v8 >> v62) & 0xF) - 1) << v62) | ((-15 << v62) - 1) & v8;
            v87 = v8;
            v44 = a5;
            goto LABEL_137;
          }
        }
        v63 = *(unsigned __int8 *)(v47 + 18);
        v64 = (4 * v63 + 8) & 0x3C;
        v65 = (v8 >> v64) & 0xF;
        v85 = v65;
        if (v63)
        {
          v6 = v47 + 16;
          swift_unknownObjectRetain();
          v66 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v47 + 16, v47 + 24, &v85, (uint64_t)&v86, v63);
          result = (uint64_t *)swift_unknownObjectRelease();
          if ((v66 & 1) == 0)
            goto LABEL_190;
          if (v86 != v7)
            goto LABEL_182;
          v8 = v87;
          v9 = v88;
          v44 = a5;
          if (v88)
          {
LABEL_137:
            v67 = v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF);
            v68 = *(_QWORD *)(v67 + 24);
            v6 = *(_QWORD *)(v67 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_141:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            result = (uint64_t *)swift_bridgeObjectRelease();
            v15 = __OFSUB__(v11, v68);
            v11 -= v68;
            if (v15)
              goto LABEL_183;
            v46 = a2;
            a3 = v84;
            goto LABEL_95;
          }
        }
        else
        {
          if (!v65)
            goto LABEL_190;
          v8 = ((v65 - 1) << v64) | ((-15 << v64) - 1) & v8;
          v87 = v8;
          v9 = v47;
          v44 = a5;
          if (v47)
            goto LABEL_137;
        }
        swift_unknownObjectRetain();
        v68 = specialized Rope._Node.subscript.getter(v8, v47);
        v6 = v69;
        swift_unknownObjectRelease();
        goto LABEL_141;
      }
      if (v47)
        v48 = a3[10];
      else
        v48 = 0;
      if (v44 < 0 || v48 < v44)
        goto LABEL_188;
      v80 = a3[11];
      if (v47)
      {
        v49 = a3[9];
        v50 = *(unsigned __int8 *)(v47 + 18);
        if (*(_WORD *)(v47 + 16))
        {
          if (*(_BYTE *)(v47 + 18))
          {
            result = (uint64_t *)swift_unknownObjectRetain_n();
            v6 = a5;
            v51 = v47;
            while (1)
            {
              v54 = *(unsigned __int16 *)(v51 + 16);
              if (!*(_WORD *)(v51 + 16))
                goto LABEL_201;
              v55 = *(_QWORD *)(v51 + 40);
              v15 = __OFSUB__(v6, v55);
              v56 = v6 - v55;
              if (v15)
                goto LABEL_168;
              if (v56 <= 0)
              {
                v52 = 0;
              }
              else
              {
                if ((_DWORD)v54 == 1)
                  goto LABEL_203;
                v57 = *(_QWORD *)(v51 + 64);
                v6 = v56 - v57;
                if (__OFSUB__(v56, v57))
                  goto LABEL_178;
                if (v6 < 1)
                {
                  v6 = v56;
                  v52 = 1;
                }
                else
                {
                  if ((_DWORD)v54 == 2)
                    goto LABEL_203;
                  v58 = (_QWORD *)(v51 + 88);
                  v52 = 2;
                  while (1)
                  {
                    if (v54 == v52)
                    {
                      __break(1u);
LABEL_164:
                      __break(1u);
                      goto LABEL_165;
                    }
                    v59 = v6 - *v58;
                    if (__OFSUB__(v6, *v58))
                      goto LABEL_164;
                    if (v59 < 1)
                      break;
                    ++v52;
                    v58 += 3;
                    v6 = v59;
                    if (v54 == v52)
                      goto LABEL_203;
                  }
                }
              }
              v53 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
              v50 = ((-15 << v53) - 1) & v50 | (v52 << v53);
              v9 = *(_QWORD *)(v51 + 24 + 24 * v52);
              swift_unknownObjectRetain();
              result = (uint64_t *)swift_unknownObjectRelease();
              v51 = v9;
              if (!*(_BYTE *)(v9 + 18))
                goto LABEL_145;
            }
          }
          result = (uint64_t *)swift_unknownObjectRetain_n();
          v50 = 0;
          v6 = a5;
          v9 = v47;
LABEL_145:
          v70 = *(unsigned __int16 *)(v9 + 16);
          if (!*(_WORD *)(v9 + 16))
            goto LABEL_204;
          v71 = *(_QWORD *)(v9 + 24);
          v15 = __OFSUB__(v6, v71);
          v72 = v6 - v71;
          if (v15)
            goto LABEL_191;
          if (v72 <= 0)
          {
            v75 = 0;
          }
          else
          {
            if ((_DWORD)v70 == 1)
              goto LABEL_206;
            v73 = *(_QWORD *)(v9 + 48);
            v6 = v72 - v73;
            if (__OFSUB__(v72, v73))
              goto LABEL_196;
            if (v6 >= 1)
            {
              if ((_DWORD)v70 == 2)
                goto LABEL_206;
              v74 = (_QWORD *)(v9 + 72);
              v75 = 2;
              while (v70 != v75)
              {
                v76 = v6 - *v74;
                if (__OFSUB__(v6, *v74))
                  goto LABEL_175;
                if (v76 < 1)
                  goto LABEL_160;
                ++v75;
                v74 += 3;
                v6 = v76;
                if (v70 == v75)
                  goto LABEL_206;
              }
              goto LABEL_174;
            }
            v6 = v72;
            v75 = 1;
          }
LABEL_160:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v8 = v50 & 0xFFFFFFFFFFFFF0FFLL | (v75 << 8);
        }
        else
        {
          v8 = ((-15 << ((4 * v50 + 8) & 0x3C)) - 1) & v50 | ((unint64_t)*(unsigned __int16 *)(v47 + 16) << ((4 * v50 + 8) & 0x3C));
          swift_unknownObjectRetain();
          v6 = 0;
          v9 = 0;
        }
        swift_unknownObjectRetain();
        v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v8, v9, v47, v49);
        result = (uint64_t *)swift_unknownObjectRelease_n();
        v44 = a5;
        a3 = v84;
      }
      else
      {
        v6 = 0;
        v9 = 0;
        v8 = 0;
        v10 = 0;
      }
      v11 = v44 - v6;
      v46 = a2;
      if (__OFSUB__(v44, v6))
        goto LABEL_189;
LABEL_95:
      --v45;
      v7 = v80;
      if (v45 <= v46)
        goto LABEL_162;
    }
  }
  if (!a2)
  {
LABEL_162:
    *a6 = v7;
    a6[1] = v8;
    a6[2] = v9;
    a6[3] = v10;
    a6[4] = v11;
    return result;
  }
  v12 = 0;
  while (1)
  {
    v13 = a3[8];
    v6 = a3[10];
    v14 = a3[11];
    v86 = v7;
    v87 = v8;
    v88 = v9;
    v15 = __OFADD__(v10++, 1);
    if (v15)
      goto LABEL_169;
    if (v7 != v14)
      break;
    if (v9)
    {
      v6 = *(_QWORD *)(v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v6 = specialized Rope._Node.subscript.getter(v8, v13);
    }
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    v15 = __OFADD__(v11, v6);
    v11 += v6;
    if (v15)
      goto LABEL_171;
    if (!v13)
      goto LABEL_172;
    v16 = ((-15 << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C));
    result = (uint64_t *)swift_unknownObjectRetain();
    if (v8 >= v16)
      goto LABEL_172;
    if (v9
      && (v17 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C, v18 = ((v8 >> v17) & 0xF) + 1,
                                                      v18 < *(unsigned __int16 *)(v9 + 16)))
    {
      v8 = (v18 << v17) | ((-15 << v17) - 1) & v8;
      result = (uint64_t *)swift_unknownObjectRelease_n();
    }
    else
    {
      v19 = *(unsigned __int8 *)(v13 + 18);
      v6 = (4 * (_BYTE)v19 + 8) & 0x3C;
      v20 = (v8 >> v6) & 0xF;
      v85 = v20;
      if (v19)
      {
        v6 = v13 + 24;
        swift_unknownObjectRetain();
        v21 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v13 + 24, &v85, (uint64_t)&v86, v13, v19);
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0)
          goto LABEL_27;
        result = (uint64_t *)swift_unknownObjectRelease_n();
        v7 = v86;
        v8 = v87;
        v9 = v88;
      }
      else
      {
        v22 = v20 + 1;
        if (v20 + 1 >= (unint64_t)*(unsigned __int16 *)(v13 + 16))
        {
LABEL_27:
          v24 = *(unsigned __int8 *)(v13 + 18);
          v6 = *(unsigned __int16 *)(v13 + 16);
          result = (uint64_t *)swift_unknownObjectRelease_n();
          v8 = ((-15 << ((4 * v24 + 8) & 0x3C)) - 1) & v24 | (unint64_t)(v6 << ((4 * v24 + 8) & 0x3C));
          v23 = a5;
          a3 = v84;
          v9 = 0;
          v86 = v7;
          if (v11 < a5)
            goto LABEL_6;
          goto LABEL_28;
        }
        result = (uint64_t *)swift_unknownObjectRelease_n();
        v8 = (v22 << v6) | ((-15 << v6) - 1) & v8;
        v9 = v13;
      }
    }
    v23 = a5;
    a3 = v84;
    if (v11 < a5)
      goto LABEL_6;
LABEL_28:
    v25 = a3[8];
    if (a4 != v23)
    {
      v7 = a3[11];
      if (v25)
      {
        v9 = 0;
        v10 = a3[9];
        v11 = a3[10];
        v8 = ((-15 << ((4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v25 + 18) | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C));
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_6;
    }
    if (v25)
      v26 = a3[10];
    else
      v26 = 0;
    if (a4 < 0 || v26 < a4)
      goto LABEL_186;
    v27 = a3[11];
    if (v25)
    {
      v78 = a3[9];
      v28 = *(unsigned __int8 *)(v25 + 18);
      if (*(_WORD *)(v25 + 16) && a3[10] > a4)
      {
        if (*(_BYTE *)(v25 + 18))
        {
          result = (uint64_t *)swift_unknownObjectRetain_n();
          v6 = a4;
          v29 = v25;
          while (1)
          {
            v31 = *(unsigned __int16 *)(v29 + 16);
            if (!*(_WORD *)(v29 + 16))
              goto LABEL_40;
            v32 = *(_QWORD *)(v29 + 40);
            v33 = v6 - v32;
            if (__OFSUB__(v6, v32))
              goto LABEL_176;
            if (__OFADD__(v33, 1))
              goto LABEL_177;
            if (v33 + 1 <= 0)
            {
              v31 = 0;
            }
            else
            {
              if ((_DWORD)v31 == 1)
              {
                v6 -= v32;
LABEL_40:
                if (v6)
                  goto LABEL_173;
                goto LABEL_41;
              }
              v34 = *(_QWORD *)(v29 + 64);
              v15 = __OFSUB__(v33, v34);
              v35 = v33 - v34;
              if (v15)
                goto LABEL_184;
              if (__OFADD__(v35, 1))
                goto LABEL_185;
              if (v35 + 1 >= 1)
              {
                if ((_DWORD)v31 != 2)
                {
                  v36 = (_QWORD *)(v29 + 88);
                  v37 = 2;
                  while (v31 != v37)
                  {
                    v6 = v35 - *v36;
                    if (__OFSUB__(v35, *v36))
                      goto LABEL_166;
                    if (__OFADD__(v6, 1))
                      goto LABEL_167;
                    if (v6 + 1 < 1)
                    {
                      v31 = v37;
                      v6 = v35;
                      goto LABEL_41;
                    }
                    ++v37;
                    v36 += 3;
                    v35 = v6;
                    if (v31 == v37)
                      goto LABEL_40;
                  }
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
                  goto LABEL_170;
                }
                v6 = v35;
                goto LABEL_40;
              }
              v31 = 1;
              v6 = v33;
            }
LABEL_41:
            v30 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
            v28 = ((-15 << v30) - 1) & v28 | (v31 << v30);
            v9 = *(_QWORD *)(v29 + 24 + 24 * v31);
            swift_unknownObjectRetain();
            result = (uint64_t *)swift_unknownObjectRelease();
            v29 = v9;
            if (!*(_BYTE *)(v9 + 18))
              goto LABEL_66;
          }
        }
        result = (uint64_t *)swift_unknownObjectRetain_n();
        v28 = 0;
        v6 = a4;
        v9 = v25;
LABEL_66:
        v38 = *(unsigned __int16 *)(v9 + 16);
        if (*(_WORD *)(v9 + 16))
        {
          v39 = *(_QWORD *)(v9 + 24);
          v15 = __OFSUB__(v6, v39);
          v40 = v6 - v39;
          if (v15)
            goto LABEL_197;
          if (__OFADD__(v40, 1))
            goto LABEL_198;
          if (v40 + 1 <= 0)
          {
            v38 = 0;
            goto LABEL_88;
          }
          if ((_DWORD)v38 != 1)
          {
            v41 = *(_QWORD *)(v9 + 48);
            v6 = v40 - v41;
            if (__OFSUB__(v40, v41))
              goto LABEL_199;
            if (__OFADD__(v6, 1))
              goto LABEL_200;
            if (v6 + 1 >= 1)
            {
              if ((_DWORD)v38 != 2)
              {
                v42 = (_QWORD *)(v9 + 72);
                v43 = 2;
                while (v38 != v43)
                {
                  v40 = v6 - *v42;
                  if (__OFSUB__(v6, *v42))
                    goto LABEL_193;
                  if (__OFADD__(v40, 1))
                    goto LABEL_194;
                  if (v40 + 1 < 1)
                  {
                    v38 = v43;
                    goto LABEL_88;
                  }
                  ++v43;
                  v42 += 3;
                  v6 = v40;
                  if (v38 == v43)
                    goto LABEL_76;
                }
                goto LABEL_192;
              }
              goto LABEL_75;
            }
            v38 = 1;
            v6 = v40;
LABEL_88:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v8 = v28 & 0xFFFFFFFFFFFFF0FFLL | (v38 << 8);
LABEL_89:
            swift_unknownObjectRetain();
            v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v27, v8, v9, v25, v78);
            result = (uint64_t *)swift_unknownObjectRelease_n();
            a3 = v84;
            goto LABEL_90;
          }
        }
        else
        {
LABEL_75:
          v40 = v6;
        }
LABEL_76:
        if (v40)
          goto LABEL_195;
        v6 = 0;
        goto LABEL_88;
      }
      v8 = ((-15 << ((4 * v28 + 8) & 0x3C)) - 1) & v28 | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * v28 + 8) & 0x3C));
      swift_unknownObjectRetain();
      v6 = 0;
      v9 = 0;
      goto LABEL_89;
    }
    v6 = 0;
    v9 = 0;
    v8 = 0;
    v10 = 0;
LABEL_90:
    v11 = a4 - v6;
    if (__OFSUB__(a4, v6))
      goto LABEL_187;
    v7 = v27;
LABEL_6:
    if (++v12 == a2)
      goto LABEL_162;
  }
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  if (!v6)
    __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  if (!v6)
    __break(1u);
LABEL_206:
  __break(1u);
  return result;
}

char *specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(char **a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v9;
  char *v10;
  char *result;
  char *v12;
  char *v13;
  char *v14;
  BOOL v15;
  char *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  char *v30;

  v6 = a2;
  if (a2 < 0)
  {
    v20 = 0;
    v21 = a1[2];
    v22 = a1[3];
    v23 = *a1;
    result = a1[1];
    v24 = (char *)*a3;
    v25 = a1[3];
    v26 = *a1;
    while (1)
    {
      if (v26 == v24)
        goto LABEL_41;
      if (v26 == result)
      {
        if (!v22)
        {
          v26 = result;
          goto LABEL_24;
        }
        v15 = __OFSUB__(v22--, 1);
        if (v15)
          goto LABEL_47;
        v27 = *(_BYTE *)(a4 + 24);
        result = (char *)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v22);
        v21 = &result[v28];
        v29 = __OFADD__(result, v28);
        if ((v27 & 1) != 0)
        {
          if (v29)
            goto LABEL_49;
          if ((uint64_t)v21 < (uint64_t)result)
            goto LABEL_50;
        }
        else
        {
          if (v29)
            goto LABEL_51;
          if ((uint64_t)v21 < (uint64_t)result)
            goto LABEL_52;
        }
        v23 = v21 - 1;
        if (__OFSUB__(v21, 1))
          goto LABEL_48;
        v25 = v22;
      }
      else
      {
        v23 = v26 - 1;
        if (__OFSUB__(v26, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          return result;
        }
      }
      v26 = v23;
LABEL_24:
      if (--v20 <= v6)
      {
        v30 = a1[4];
        *(_QWORD *)a5 = v23;
        *(_QWORD *)(a5 + 8) = result;
        *(_QWORD *)(a5 + 16) = v21;
        *(_QWORD *)(a5 + 24) = v25;
        *(_QWORD *)(a5 + 32) = v30;
        goto LABEL_43;
      }
    }
  }
  v9 = a1[3];
  v10 = a1[4];
  result = a1[1];
  v12 = a1[2];
  v13 = *a1;
  if (a2)
  {
    v14 = (char *)*a3;
    while (v13 != v14)
    {
      v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      if (v13 == v12)
      {
        v16 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_45;
        v13 = v12;
        if (v16 != v10)
        {
          v17 = *(_BYTE *)(a4 + 24);
          result = (char *)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v9 + 1);
          v12 = &result[v18];
          v19 = __OFADD__(result, v18);
          if ((v17 & 1) != 0)
          {
            if (v19)
              goto LABEL_53;
            v9 = v16;
            v13 = result;
            if ((uint64_t)v12 < (uint64_t)result)
              goto LABEL_54;
          }
          else
          {
            if (v19)
              goto LABEL_55;
            v9 = v16;
            v13 = result;
            if ((uint64_t)v12 < (uint64_t)result)
            {
              __break(1u);
              goto LABEL_20;
            }
          }
        }
      }
      if (!--v6)
        goto LABEL_20;
    }
LABEL_41:
    *(_QWORD *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_BYTE *)(a5 + 40) = 1;
  }
  else
  {
LABEL_20:
    *(_QWORD *)a5 = v13;
    *(_QWORD *)(a5 + 8) = result;
    *(_QWORD *)(a5 + 16) = v12;
    *(_QWORD *)(a5 + 24) = v9;
    *(_QWORD *)(a5 + 32) = v10;
LABEL_43:
    *(_BYTE *)(a5 + 40) = 0;
  }
  return result;
}

unint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  __int128 *v7;
  __int128 *v8;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  int v122;
  void (*v123)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  unint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  __int128 *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE v175[40];
  _QWORD v176[3];
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE v183[40];
  _BYTE v184[40];
  _OWORD v185[4];
  uint64_t v186;
  _BYTE v187[72];
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;

  v8 = v7;
  v10 = a5;
  if ((a5 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)&v206 = result;
    *((_QWORD *)&v206 + 1) = a2;
    *(_QWORD *)&v207 = a3;
    *((_QWORD *)&v207 + 1) = a4;
    if (!a5)
      goto LABEL_196;
    v11 = a7;
    while (((unint64_t)v206 ^ a6) >= 0x400)
    {
      result = (unint64_t)specialized Collection.formIndex(after:)((unint64_t *)&v206);
      if (!--v10)
      {
        a2 = *((_QWORD *)&v206 + 1);
        result = v206;
        a4 = *((_QWORD *)&v207 + 1);
        a3 = v207;
        a7 = v11;
        goto LABEL_196;
      }
    }
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = 2;
    return result;
  }
  v136 = a7;
  v12 = 0;
  v141 = a5;
  v142 = a6 >> 10;
  v137 = (uint64_t *)&v189;
  v160 = (__int128 *)&v181;
  v161 = &v192;
  v139 = v7;
  do
  {
    v13 = result >> 10;
    if (result >> 10 == v142)
    {
      v134 = v136;
      *v136 = 0;
      v134[1] = 0;
      v134[2] = 0;
      v134[3] = 2;
      return result;
    }
    v14 = v8[11];
    v216 = v8[10];
    v217 = v14;
    v15 = *((_QWORD *)v8 + 25);
    v218 = *((_QWORD *)v8 + 24);
    v16 = v8[7];
    v212 = v8[6];
    v213 = v16;
    v17 = v8[9];
    v214 = v8[8];
    v215 = v17;
    v18 = v8[3];
    v208 = v8[2];
    v209 = v18;
    v19 = v8[5];
    v210 = v8[4];
    v211 = v19;
    v20 = v8[1];
    v206 = *v8;
    v207 = v20;
    v162 = v15;
    v205 = v15;
    if (*((_QWORD *)&v214 + 1) >> 10 >= v13 || *((_QWORD *)&v216 + 1) >> 10 < v13)
      goto LABEL_206;
    v171 = *(_QWORD *)(v162 + 16);
    if (!v171)
      goto LABEL_207;
    v21 = v206;
    v22 = *(_QWORD *)(v206 + 64);
    v23 = *(_QWORD *)(v206 + 80);
    if (v22)
      v24 = *(_QWORD *)(v206 + 80);
    else
      v24 = 0;
    if (result < 0x800)
      goto LABEL_208;
    v25 = (result >> 11) - 1;
    if (v24 < v25)
      goto LABEL_208;
    v168 = *(_QWORD *)(v206 + 88);
    v165 = v206;
    v155 = a4;
    v156 = result;
    v153 = a2;
    v154 = a3;
    v149 = v12;
    v150 = *((_QWORD *)&v214 + 1);
    v151 = *((_QWORD *)&v214 + 1) >> 10;
    v152 = result >> 10;
    v147 = *((_QWORD *)&v215 + 1);
    v148 = v215;
    v146 = v216;
    v157 = result >> 11;
    if (!v22)
    {
      outlined retain of AttributedString.Runs((uint64_t)&v206);
      v27 = 0;
      v39 = 0;
      v166 = 0;
      v40 = 0;
      goto LABEL_72;
    }
    v173 = *(_QWORD *)(v206 + 72);
    v26 = *(unsigned __int8 *)(v22 + 18);
    if ((uint64_t)(result >> 11) <= v23 && *(_WORD *)(v22 + 16))
    {
      if (*(_BYTE *)(v22 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v206);
        v27 = v25;
        v28 = v22;
        while (1)
        {
          v31 = *(unsigned __int16 *)(v28 + 16);
          if (!*(_WORD *)(v28 + 16))
            goto LABEL_23;
          v32 = *(_QWORD *)(v28 + 40);
          v33 = v27 - v32;
          if (__OFSUB__(v27, v32))
            goto LABEL_202;
          if (__OFADD__(v33, 1))
            goto LABEL_203;
          if (v33 + 1 <= 0)
          {
            v31 = 0;
            goto LABEL_24;
          }
          if ((_DWORD)v31 == 1)
            break;
          v34 = *(_QWORD *)(v28 + 64);
          v35 = __OFSUB__(v33, v34);
          v36 = v33 - v34;
          if (v35)
            goto LABEL_204;
          if (__OFADD__(v36, 1))
            goto LABEL_205;
          if (v36 + 1 < 1)
          {
            v31 = 1;
            v27 = v33;
            goto LABEL_24;
          }
          if ((_DWORD)v31 == 2)
          {
            v27 = v36;
            goto LABEL_23;
          }
          v37 = (_QWORD *)(v28 + 88);
          v38 = 2;
          while (1)
          {
            if (v31 == v38)
            {
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
              goto LABEL_201;
            }
            v27 = v36 - *v37;
            if (__OFSUB__(v36, *v37))
              goto LABEL_199;
            if (__OFADD__(v27, 1))
              goto LABEL_200;
            if (v27 + 1 < 1)
              break;
            ++v38;
            v37 += 3;
            v36 = v27;
            if (v31 == v38)
              goto LABEL_23;
          }
          v31 = v38;
          v27 = v36;
LABEL_24:
          v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
          v26 = ((-15 << v29) - 1) & v26 | (v31 << v29);
          v30 = *(_QWORD *)(v28 + 24 + 24 * v31);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v28 = v30;
          if (!*(_BYTE *)(v30 + 18))
            goto LABEL_48;
        }
        v27 -= v32;
LABEL_23:
        if (!v27)
          goto LABEL_24;
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        result = swift_unknownObjectRelease();
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
        return result;
      }
      swift_unknownObjectRetain_n();
      result = outlined retain of AttributedString.Runs((uint64_t)&v206);
      v26 = 0;
      v27 = v25;
      v30 = v22;
LABEL_48:
      v44 = *(unsigned __int16 *)(v30 + 16);
      v167 = v30;
      if (!(_DWORD)v44)
        goto LABEL_57;
      v45 = *(_QWORD *)(v30 + 24);
      v35 = __OFSUB__(v27, v45);
      v46 = v27 - v45;
      if (v35)
        goto LABEL_224;
      if (__OFADD__(v46, 1))
        goto LABEL_225;
      if (v46 + 1 <= 0)
      {
        v44 = 0;
      }
      else
      {
        if ((_DWORD)v44 == 1)
        {
LABEL_58:
          if (v46)
            goto LABEL_221;
          v27 = 0;
          goto LABEL_70;
        }
        v47 = *(_QWORD *)(v167 + 48);
        v27 = v46 - v47;
        if (__OFSUB__(v46, v47))
          goto LABEL_227;
        if (__OFADD__(v27, 1))
          goto LABEL_228;
        if (v27 + 1 < 1)
        {
          v44 = 1;
          v27 = v46;
        }
        else
        {
          if ((_DWORD)v44 == 2)
          {
LABEL_57:
            v46 = v27;
            goto LABEL_58;
          }
          v48 = (_QWORD *)(v167 + 72);
          v49 = 2;
          while (1)
          {
            if (v44 == v49)
              goto LABEL_218;
            v46 = v27 - *v48;
            if (__OFSUB__(v27, *v48))
              goto LABEL_219;
            if (__OFADD__(v46, 1))
              goto LABEL_220;
            if (v46 + 1 < 1)
              break;
            ++v49;
            v48 += 3;
            v27 = v46;
            if (v44 == v49)
              goto LABEL_58;
          }
          v44 = v49;
        }
      }
LABEL_70:
      swift_unknownObjectRelease();
      v39 = v167;
      swift_unknownObjectRelease();
      v43 = v26 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
      goto LABEL_71;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v206);
    swift_unknownObjectRelease();
    v41 = *(unsigned __int16 *)(v22 + 16);
    v42 = *(_BYTE *)(v22 + 18);
    swift_unknownObjectRelease_n();
    v27 = 0;
    v39 = 0;
    v43 = ((-15 << ((4 * v42 + 8) & 0x3C)) - 1) & v26 | (unint64_t)(v41 << ((4 * v42 + 8) & 0x3C));
LABEL_71:
    swift_unknownObjectRetain();
    v166 = v43;
    v40 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v168, v43, v39, v22, v173);
    swift_unknownObjectRelease_n();
    v21 = v165;
LABEL_72:
    v159 = v25 - v27;
    if (__OFSUB__(v25, v27))
      goto LABEL_209;
    if (v168 != *(_QWORD *)(v21 + 88))
      goto LABEL_210;
    v167 = v39;
    if (v39)
    {
      v50 = v39 + 24 * ((v166 >> ((4 * *(_BYTE *)(v39 + 18) + 8) & 0x3C)) & 0xF);
      v51 = *(_QWORD *)(v50 + 32);
      v52 = *(_QWORD *)(v50 + 40);
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v53 = *(_QWORD *)(v21 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v166, v53);
      v52 = v54;
      v51 = v55;
      result = swift_unknownObjectRelease();
    }
    if (*((uint64_t *)&v206 + 1) >= v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_178;
    }
    v143 = v52;
    v144 = (uint64_t *)(v162 + 40);
    v172 = v51;
    v138 = *((_QWORD *)&v206 + 1);
    while (2)
    {
      v56 = *(_QWORD *)(v21 + 64);
      v57 = *(uint64_t **)(v21 + 72);
      v59 = *(_QWORD *)(v21 + 80);
      v58 = *(_QWORD *)(v21 + 88);
      v188 = v168;
      v60 = v166;
      v189 = v166;
      v190 = v167;
      if (v168 != v58)
        goto LABEL_213;
      if (v56)
      {
        v61 = *(unsigned __int8 *)(v56 + 18);
        result = swift_unknownObjectRetain();
        if (v60 <= v61)
          goto LABEL_214;
      }
      else if (!v166)
      {
        goto LABEL_214;
      }
      v62 = v167;
      v158 = v40;
      if (v167)
      {
        v63 = (4 * *(_BYTE *)(v167 + 18) + 8) & 0x3C;
        if (((v60 >> v63) & 0xF) != 0)
        {
          v64 = ((((v60 >> v63) & 0xF) - 1) << v63) | ((-15 << v63) - 1) & v60;
          v189 = v64;
LABEL_134:
          v92 = (v64 >> ((4 * *(_BYTE *)(v62 + 18) + 8) & 0x3C)) & 0xF;
          v167 = v62;
          v80 = *(_QWORD *)(v62 + 24 * v92 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v81 = 0;
          goto LABEL_135;
        }
      }
      v173 = v59;
      v65 = (4 * *(_BYTE *)(v56 + 18) + 8) & 0x3C;
      v66 = (v60 >> v65) & 0xF;
      if (!*(_BYTE *)(v56 + 18))
      {
        if (!v66)
          goto LABEL_226;
        v64 = ((v66 - 1) << v65) | ((-15 << v65) - 1) & v60;
        v189 = v64;
        v190 = v56;
        v62 = v56;
        if (v56)
          goto LABEL_134;
        goto LABEL_98;
      }
      v67 = v56 + 24;
      if (v66 < *(unsigned __int16 *)(v56 + 16))
      {
        v170 = v57;
        v68 = *(_QWORD *)(v67 + 24 * ((v60 >> v65) & 0xF));
        v69 = (4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C;
        v70 = (v60 >> v69) & 0xF;
        if (!*(_BYTE *)(v68 + 18))
        {
          if (v70)
          {
            v189 = ((v70 - 1) << v69) | ((-15 << v69) - 1) & v166;
            v190 = v68;
            swift_unknownObjectRetain();
            v62 = v68;
            goto LABEL_132;
          }
          result = swift_unknownObjectRetain();
LABEL_110:
          if (!v66)
            goto LABEL_222;
          goto LABEL_111;
        }
        v71 = (uint64_t *)(v68 + 24);
        if (v70 >= *(unsigned __int16 *)(v68 + 16))
        {
          swift_unknownObjectRetain();
          result = swift_unknownObjectRetain();
LABEL_104:
          if (v70)
          {
            v82 = v71[3 * (int)v70 - 3];
            if (!*(_WORD *)(v82 + 16))
              goto LABEL_229;
            v83 = *(unsigned __int16 *)(v82 + 16) - 1;
            v84 = *(unsigned __int8 *)(v82 + 18);
            v189 = ((-15 << ((4 * v84 + 8) & 0x3C)) - 1) & (v189 & ((-15 << v69) - 1) | ((v70 - 1) << v69)) | (v83 << ((4 * v84 + 8) & 0x3C));
            if (v84)
            {
              swift_unknownObjectRetain();
              v62 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v82 + 24, v83, v137);
              swift_unknownObjectRelease();
            }
            else
            {
              v62 = v82;
            }
            v190 = v62;
            goto LABEL_131;
          }
          result = swift_unknownObjectRelease();
          goto LABEL_110;
        }
        v169 = (uint64_t *)(v68 + 24);
        v72 = v71[3 * v70];
        v73 = (4 * *(_BYTE *)(v72 + 18) + 8) & 0x3C;
        v74 = (v166 >> v73) & 0xF;
        if (!*(_BYTE *)(v72 + 18))
        {
          if (v74)
          {
            v189 = ((v74 - 1) << v73) | ((-15 << v73) - 1) & v166;
            v190 = v72;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            v62 = v72;
LABEL_131:
            swift_unknownObjectRelease();
            goto LABEL_132;
          }
          swift_unknownObjectRetain();
          result = swift_unknownObjectRetain();
          v71 = v169;
          goto LABEL_104;
        }
        v75 = v72 + 24;
        if (v74 >= *(unsigned __int16 *)(v72 + 16))
        {
          v166 = (4 * *(_BYTE *)(v72 + 18) + 8) & 0x3C;
          v167 = v72 + 24;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
        }
        else
        {
          v164 = v72;
          v76 = *(_QWORD *)(v75 + 24 * ((v166 >> v73) & 0xF));
          v77 = *(unsigned __int8 *)(v76 + 18);
          v78 = (4 * v77 + 8) & 0x3C;
          v79 = (v166 >> v78) & 0xF;
          *(_QWORD *)&v179 = v79;
          if (v77)
          {
            v166 = v73;
            v167 = v75;
            v163 = v76 + 16;
            v145 = v76 + 24;
            LODWORD(v140) = v77;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            LODWORD(v163) = specialized closure #1 in Rope._Node.formPredecessor(of:)(v163, v145, (uint64_t *)&v179, (uint64_t)&v188, v140);
            result = swift_unknownObjectRelease();
            if ((v163 & 1) != 0)
            {
              v62 = v190;
LABEL_130:
              swift_unknownObjectRelease();
              goto LABEL_131;
            }
            goto LABEL_119;
          }
          if (v79)
          {
            v189 = ((v79 - 1) << v78) | ((-15 << v78) - 1) & v166;
            v62 = v76;
            v190 = v76;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            goto LABEL_130;
          }
          v166 = v73;
          v167 = v75;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
        }
        result = swift_unknownObjectRetain();
LABEL_119:
        if (v74)
        {
          v89 = v74 - 1;
          v62 = *(_QWORD *)(v167 + 24 * ((int)v74 - 1));
          if (!*(_WORD *)(v62 + 16))
            goto LABEL_230;
          v90 = *(unsigned __int16 *)(v62 + 16) - 1;
          v91 = *(unsigned __int8 *)(v62 + 18);
          v189 = ((-15 << ((4 * v91 + 8) & 0x3C)) - 1) & (v189 & ((-15 << v166) - 1) | (v89 << v166)) | (v90 << ((4 * v91 + 8) & 0x3C));
          if (v91)
          {
            swift_unknownObjectRetain();
            v62 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v62 + 24, v90, v137);
            swift_unknownObjectRelease();
          }
          v190 = v62;
          swift_unknownObjectRelease();
          goto LABEL_131;
        }
        result = swift_unknownObjectRelease();
        v71 = v169;
        goto LABEL_104;
      }
      result = swift_unknownObjectRetain();
      if (!v66)
        goto LABEL_222;
LABEL_111:
      v85 = v66 - 1;
      v86 = *(_QWORD *)(v67 + 24 * ((int)v66 - 1));
      if (!*(_WORD *)(v86 + 16))
        goto LABEL_223;
      v87 = *(unsigned __int16 *)(v86 + 16) - 1;
      v88 = *(unsigned __int8 *)(v86 + 18);
      v189 = ((-15 << ((4 * v88 + 8) & 0x3C)) - 1) & (v189 & ((-15 << v65) - 1) | (v85 << v65)) | (v87 << ((4 * v88 + 8) & 0x3C));
      if (v88)
      {
        swift_unknownObjectRetain();
        v62 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v86 + 24, v87, v137);
        swift_unknownObjectRelease();
        v190 = v62;
      }
      else
      {
        v62 = v86;
        v190 = v86;
      }
LABEL_132:
      swift_unknownObjectRelease();
      if (v188 != v168)
        goto LABEL_215;
      v64 = v189;
      if (v62)
        goto LABEL_134;
LABEL_98:
      swift_unknownObjectRetain();
      v80 = specialized Rope._Node.subscript.getter(v64, v56);
      swift_unknownObjectRelease();
      v167 = 0;
      v81 = 1;
LABEL_135:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFSUB__(v159, v80))
        goto LABEL_216;
      if (v168 != *(_QWORD *)(v165 + 88))
        goto LABEL_217;
      v140 = v159 - v80;
      v166 = v64;
      if ((v81 & 1) != 0)
      {
        v93 = *(_QWORD *)(v165 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v64, v93);
        v173 = v94;
        v145 = v95;
        swift_unknownObjectRelease();
      }
      else
      {
        v96 = v167 + 24 * ((v64 >> ((4 * *(_BYTE *)(v167 + 18) + 8) & 0x3C)) & 0xF);
        v97 = *(_QWORD *)(v96 + 40);
        v173 = *(_QWORD *)(v96 + 32);
        swift_bridgeObjectRetain();
        v145 = v97;
        swift_bridgeObjectRetain();
      }
      v99 = v160;
      v98 = (uint64_t)v161;
      v100 = v172;
      --v158;
      swift_bridgeObjectRetain();
      v101 = 0;
      v102 = v144;
      do
      {
        v104 = v101 + 1;
        if (__OFADD__(v101, 1))
        {
          __break(1u);
          goto LABEL_198;
        }
        v105 = *(v102 - 1);
        v106 = *v102;
        if (*(_QWORD *)(v100 + 16))
        {
          swift_bridgeObjectRetain_n();
          v107 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v106);
          if ((v108 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v100 + 56) + 72 * v107, (uint64_t)&v199);
          }
          else
          {
            v203 = 0;
            v201 = 0u;
            v202 = 0u;
            v199 = 0u;
            v200 = 0u;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v203 = 0;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          swift_bridgeObjectRetain();
        }
        v109 = v173;
        if (*(_QWORD *)(v173 + 16))
        {
          swift_bridgeObjectRetain();
          v110 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v106);
          if ((v111 & 1) != 0)
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v109 + 56) + 72 * v110, (uint64_t)&v194);
          }
          else
          {
            v198 = 0;
            v196 = 0u;
            v197 = 0u;
            v194 = 0u;
            v195 = 0u;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v198 = 0;
          v196 = 0u;
          v197 = 0u;
          v194 = 0u;
          v195 = 0u;
        }
        swift_bridgeObjectRelease();
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v199, (uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v194, v98, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (v191)
        {
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v188, (uint64_t)v187, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v193)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
LABEL_176:
            outlined destroy of Any?((uint64_t)&v188, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v199, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_177:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v8 = v139;
            v21 = v165;
            goto LABEL_178;
          }
          v112 = *(_OWORD *)(v98 + 48);
          v185[2] = *(_OWORD *)(v98 + 32);
          v185[3] = v112;
          v186 = *(_QWORD *)(v98 + 64);
          v113 = *(_OWORD *)(v98 + 16);
          v185[0] = *(_OWORD *)v98;
          v185[1] = v113;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v187, (uint64_t)v184);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v185, (uint64_t)v183);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v184, (uint64_t)&v179, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v183, (uint64_t)v99, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v180)
          {
            if (v182)
            {
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v179, (uint64_t)v176);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v99, (uint64_t)v175);
              v114 = v177;
              v164 = v178;
              v163 = (uint64_t)__swift_project_boxed_opaque_existential_1(v176, v177);
              v170 = &v135;
              v115 = *(_QWORD *)(v114 - 8);
              MEMORY[0x1E0C80A78](v163);
              v117 = (char *)&v135 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v175, (uint64_t)&v174);
              v118 = type metadata accessor for Optional();
              v169 = &v135;
              v119 = *(_QWORD *)(v118 - 8);
              MEMORY[0x1E0C80A78](v118);
              v121 = (char *)&v135 - v120;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v122 = swift_dynamicCast();
              v123 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56);
              if (v122)
              {
                v123(v121, 0, 1, v114);
                (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v117, v121, v114);
                v103 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
              }
              else
              {
                v123(v121, 1, 1, v114);
                (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v118);
                v103 = 0;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v175);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v176);
              v99 = v160;
              v98 = (uint64_t)v161;
LABEL_143:
              outlined destroy of Any?((uint64_t)v183, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of Any?((uint64_t)v184, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v185);
              outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
              outlined destroy of Any?((uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v199, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              if ((v103 & 1) == 0)
                goto LABEL_177;
              goto LABEL_144;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
          }
          else
          {
            if (!v182)
            {
              v103 = 1;
              goto LABEL_143;
            }
            outlined destroy of Any?((uint64_t)v99, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          }
          v103 = 0;
          goto LABEL_143;
        }
        if (v193)
          goto LABEL_176;
        outlined destroy of Any?((uint64_t)&v188, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v194, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v199, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_144:
        v102 += 2;
        ++v101;
        v100 = v172;
      }
      while (v104 != v171);
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v8 = v139;
      v159 = v140;
      v40 = v158;
      v21 = v165;
      if (v138 < v158)
        continue;
      break;
    }
    v133 = v140;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v159 = v133;
LABEL_178:
    v124 = *(_OWORD *)(v21 + 32);
    v219 = *(_OWORD *)(v21 + 16);
    v220 = v124;
    v221 = *(_OWORD *)(v21 + 48);
    BigString.utf8.getter();
    if (__OFSUB__(v159, v157))
      goto LABEL_211;
    v125 = BigString.UTF8View.index(_:offsetBy:)();
    v127 = v126;
    v129 = v128;
    v131 = v130;
    outlined release of Locale((uint64_t)&v204);
    outlined release of AttributedString.Runs((uint64_t)&v206);
    v132 = v125 >> 10;
    if (v151 >= v125 >> 10)
      result = v150;
    else
      result = v125;
    if (v152 < result >> 10)
      goto LABEL_212;
    v12 = v149 - 1;
    if (v151 >= v132)
      a4 = v146;
    else
      a4 = v131;
    if (v151 >= v132)
      a3 = v147;
    else
      a3 = v129;
    if (v151 >= v132)
      a2 = v148;
    else
      a2 = v127;
  }
  while (v12 > v141);
  a7 = v136;
LABEL_196:
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  return result;
}

uint64_t *specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  int v67;
  char v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v85 = a4;
  v7 = *result;
  v8 = result[1];
  v9 = result[2];
  v10 = result[3];
  v11 = result[4];
  v84 = a2;
  if (a2 < 0)
  {
LABEL_94:
    v49 = a6;
    v50 = 0;
    while (1)
    {
      if (v11 == *(_QWORD *)(a3 + 32))
        goto LABEL_165;
      v51 = a4[8];
      if (v51)
      {
        if (v11 != a4[10])
          goto LABEL_127;
      }
      else if (v11)
      {
LABEL_127:
        v64 = a4[11];
        v91 = v7;
        v92 = v8;
        v93 = v9;
        v15 = __OFSUB__(v10--, 1);
        if (v15)
          goto LABEL_183;
        if (v7 != v64)
          goto LABEL_184;
        if (v51)
        {
          v65 = *(unsigned __int8 *)(v51 + 18);
          result = (uint64_t *)swift_unknownObjectRetain();
          if (v8 <= v65)
            goto LABEL_185;
        }
        else if (!v8)
        {
          goto LABEL_185;
        }
        v89 = v7;
        if (v9)
        {
          v66 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
          if (((v8 >> v66) & 0xF) != 0)
          {
            v8 = ((((v8 >> v66) & 0xF) - 1) << v66) | ((-15 << v66) - 1) & v8;
            v92 = v8;
            goto LABEL_140;
          }
        }
        v67 = *(unsigned __int8 *)(v51 + 18);
        v68 = (4 * v67 + 8) & 0x3C;
        v69 = (v8 >> v68) & 0xF;
        v90 = v69;
        if (v67)
        {
          v7 = v51 + 16;
          swift_unknownObjectRetain();
          v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v51 + 16, v51 + 24, &v90, (uint64_t)&v91, v67);
          result = (uint64_t *)swift_unknownObjectRelease();
          if ((v70 & 1) == 0)
            goto LABEL_193;
          if (v91 != v89)
            goto LABEL_186;
          v8 = v92;
          v9 = v93;
          if (v93)
          {
LABEL_140:
            v71 = v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF);
            v72 = *(_QWORD *)(v71 + 24);
            v7 = *(_QWORD *)(v71 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_144:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            result = (uint64_t *)swift_bridgeObjectRelease();
            v15 = __OFSUB__(v11, v72);
            v11 -= v72;
            if (v15)
              goto LABEL_187;
            v49 = a6;
            a2 = v84;
            a4 = v85;
            goto LABEL_97;
          }
        }
        else
        {
          if (!v69)
            goto LABEL_193;
          v8 = ((v69 - 1) << v68) | ((-15 << v68) - 1) & v8;
          v92 = v8;
          v9 = v51;
          if (v51)
            goto LABEL_140;
        }
        swift_unknownObjectRetain();
        v72 = specialized Rope._Node.subscript.getter(v8, v51);
        v7 = v73;
        swift_unknownObjectRelease();
        goto LABEL_144;
      }
      if (v51)
        v52 = a4[10];
      else
        v52 = 0;
      if (v49 < 0 || v52 < v49)
        goto LABEL_188;
      v89 = a4[11];
      if (v51)
      {
        v53 = a4[9];
        v54 = *(unsigned __int8 *)(v51 + 18);
        if (*(_WORD *)(v51 + 16))
        {
          if (*(_BYTE *)(v51 + 18))
          {
            result = (uint64_t *)swift_unknownObjectRetain_n();
            v7 = v49;
            v55 = v51;
            while (1)
            {
              v58 = *(unsigned __int16 *)(v55 + 16);
              if (!*(_WORD *)(v55 + 16))
                goto LABEL_204;
              v59 = *(_QWORD *)(v55 + 40);
              v15 = __OFSUB__(v7, v59);
              v60 = v7 - v59;
              if (v15)
                goto LABEL_169;
              if (v60 <= 0)
              {
                v56 = 0;
              }
              else
              {
                if ((_DWORD)v58 == 1)
                  goto LABEL_206;
                v61 = *(_QWORD *)(v55 + 64);
                v7 = v60 - v61;
                if (__OFSUB__(v60, v61))
                  goto LABEL_175;
                if (v7 >= 1)
                {
                  if ((_DWORD)v58 == 2)
                    goto LABEL_206;
                  v62 = (_QWORD *)(v55 + 88);
                  v56 = 2;
                  while (v58 != v56)
                  {
                    v63 = v7 - *v62;
                    if (__OFSUB__(v7, *v62))
                      goto LABEL_168;
                    if (v63 < 1)
                      goto LABEL_111;
                    ++v56;
                    v62 += 3;
                    v7 = v63;
                    if (v58 == v56)
                      goto LABEL_206;
                  }
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
                  goto LABEL_170;
                }
                v7 = v60;
                v56 = 1;
              }
LABEL_111:
              v57 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
              v54 = ((-15 << v57) - 1) & v54 | (v56 << v57);
              v9 = *(_QWORD *)(v55 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              result = (uint64_t *)swift_unknownObjectRelease();
              v55 = v9;
              if (!*(_BYTE *)(v9 + 18))
                goto LABEL_148;
            }
          }
          result = (uint64_t *)swift_unknownObjectRetain_n();
          v54 = 0;
          v7 = v49;
          v9 = v51;
LABEL_148:
          v74 = *(unsigned __int16 *)(v9 + 16);
          if (!*(_WORD *)(v9 + 16))
            goto LABEL_207;
          v75 = *(_QWORD *)(v9 + 24);
          v15 = __OFSUB__(v7, v75);
          v76 = v7 - v75;
          if (v15)
            goto LABEL_194;
          if (v76 <= 0)
          {
            v79 = 0;
          }
          else
          {
            if ((_DWORD)v74 == 1)
              goto LABEL_209;
            v77 = *(_QWORD *)(v9 + 48);
            v7 = v76 - v77;
            if (__OFSUB__(v76, v77))
              goto LABEL_198;
            if (v7 >= 1)
            {
              if ((_DWORD)v74 == 2)
                goto LABEL_209;
              v78 = (_QWORD *)(v9 + 72);
              v79 = 2;
              while (v74 != v79)
              {
                v80 = v7 - *v78;
                if (__OFSUB__(v7, *v78))
                  goto LABEL_174;
                if (v80 < 1)
                  goto LABEL_163;
                ++v79;
                v78 += 3;
                v7 = v80;
                if (v74 == v79)
                  goto LABEL_209;
              }
              goto LABEL_173;
            }
            v7 = v76;
            v79 = 1;
          }
LABEL_163:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v8 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v79 << 8);
        }
        else
        {
          v8 = ((-15 << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * v54 + 8) & 0x3C));
          swift_unknownObjectRetain();
          v7 = 0;
          v9 = 0;
        }
        swift_unknownObjectRetain();
        v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v89, v8, v9, v51, v53);
        result = (uint64_t *)swift_unknownObjectRelease_n();
        a2 = v84;
        a4 = v85;
      }
      else
      {
        v7 = 0;
        v9 = 0;
        v8 = 0;
        v10 = 0;
      }
      v49 = a6;
      v11 = a6 - v7;
      if (__OFSUB__(a6, v7))
        goto LABEL_189;
LABEL_97:
      --v50;
      v7 = v89;
      if (v50 <= a2)
        goto LABEL_166;
    }
  }
  if (!a2)
  {
LABEL_166:
    *a7 = v7;
    a7[1] = v8;
    a7[2] = v9;
    a7[3] = v10;
    a7[4] = v11;
    return result;
  }
  v12 = 0;
  while (1)
  {
    if (v11 == *(_QWORD *)(a3 + 32))
    {
LABEL_165:
      v7 = 0;
      v8 = 0;
      v10 = 0;
      v11 = 0;
      v9 = 1;
      goto LABEL_166;
    }
    v13 = a4[8];
    v14 = a4[11];
    v91 = v7;
    v92 = v8;
    v93 = v9;
    v15 = __OFADD__(v10++, 1);
    if (v15)
      break;
    if (v7 != v14)
      goto LABEL_177;
    v87 = v7;
    if (v9)
    {
      v16 = v9 + 24 * ((v8 >> ((4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C)) & 0xF);
      v17 = *(_QWORD *)(v16 + 24);
      v7 = *(_QWORD *)(v16 + 32);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v17 = specialized Rope._Node.subscript.getter(v8, v13);
      v7 = v18;
    }
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    v15 = __OFADD__(v11, v17);
    v11 += v17;
    if (v15)
      goto LABEL_178;
    if (!v13)
    {
      v7 = a6;
      goto LABEL_179;
    }
    v19 = ((-15 << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C));
    result = (uint64_t *)swift_unknownObjectRetain();
    v7 = a6;
    if (v8 >= v19)
      goto LABEL_179;
    if (v9)
    {
      v20 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
      v21 = ((v8 >> v20) & 0xF) + 1;
      if (v21 < *(unsigned __int16 *)(v9 + 16))
      {
        v8 = (v21 << v20) | ((-15 << v20) - 1) & v8;
        result = (uint64_t *)swift_unknownObjectRelease_n();
        goto LABEL_25;
      }
    }
    v22 = *(unsigned __int8 *)(v13 + 18);
    v23 = (4 * v22 + 8) & 0x3C;
    v24 = (v8 >> v23) & 0xF;
    v90 = v24;
    if (v22)
    {
      swift_unknownObjectRetain();
      v25 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v13 + 24, &v90, (uint64_t)&v91, v13, v22);
      swift_unknownObjectRelease();
      if ((v25 & 1) != 0)
      {
        result = (uint64_t *)swift_unknownObjectRelease_n();
        v8 = v92;
        v87 = v91;
        v9 = v93;
        goto LABEL_25;
      }
    }
    else
    {
      v26 = v24 + 1;
      if (v24 + 1 < (unint64_t)*(unsigned __int16 *)(v13 + 16))
      {
        result = (uint64_t *)swift_unknownObjectRelease_n();
        v8 = (v26 << v23) | ((-15 << v23) - 1) & v8;
        v9 = v13;
LABEL_25:
        v27 = v84;
        a4 = v85;
        if (v11 < a6)
          goto LABEL_4;
        goto LABEL_28;
      }
    }
    v28 = *(unsigned __int8 *)(v13 + 18);
    v29 = *(unsigned __int16 *)(v13 + 16);
    result = (uint64_t *)swift_unknownObjectRelease_n();
    v8 = ((-15 << ((4 * v28 + 8) & 0x3C)) - 1) & v28 | (unint64_t)(v29 << ((4 * v28 + 8) & 0x3C));
    v27 = v84;
    a4 = v85;
    v9 = 0;
    v91 = v87;
    if (v11 < a6)
    {
LABEL_4:
      v7 = v87;
      goto LABEL_5;
    }
LABEL_28:
    v30 = a4[8];
    v11 = a5;
    if (a5 != a6)
    {
      v7 = a4[11];
      if (v30)
      {
        v9 = 0;
        v10 = a4[9];
        v11 = a4[10];
        v8 = ((-15 << ((4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v30 + 18) | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C));
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_5;
    }
    if (v30)
      v31 = a4[10];
    else
      v31 = 0;
    if (a5 < 0 || v31 < a5)
      goto LABEL_192;
    v7 = a4[11];
    if (!v30)
    {
      v9 = 0;
      v8 = 0;
      v10 = 0;
      goto LABEL_5;
    }
    v32 = *(unsigned __int8 *)(v30 + 18);
    v88 = a4[9];
    if (!*(_WORD *)(v30 + 16) || a4[10] <= a5)
    {
      v8 = ((-15 << ((4 * v32 + 8) & 0x3C)) - 1) & v32 | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * v32 + 8) & 0x3C));
      swift_unknownObjectRetain();
      v33 = 0;
      v9 = 0;
      goto LABEL_91;
    }
    if (*(_BYTE *)(v30 + 18))
    {
      result = (uint64_t *)swift_unknownObjectRetain_n();
      v33 = a5;
      v34 = v30;
      while (1)
      {
        v36 = *(unsigned __int16 *)(v34 + 16);
        if (!*(_WORD *)(v34 + 16))
          break;
        v37 = *(_QWORD *)(v34 + 40);
        v38 = v33 - v37;
        if (__OFSUB__(v33, v37))
          goto LABEL_181;
        if (__OFADD__(v38, 1))
          goto LABEL_182;
        if (v38 + 1 <= 0)
        {
          v36 = 0;
          goto LABEL_41;
        }
        if ((_DWORD)v36 == 1)
        {
          v33 -= v37;
          break;
        }
        v39 = *(_QWORD *)(v34 + 64);
        v15 = __OFSUB__(v38, v39);
        v40 = v38 - v39;
        if (v15)
          goto LABEL_190;
        if (__OFADD__(v40, 1))
          goto LABEL_191;
        if (v40 + 1 < 1)
        {
          v36 = 1;
          v33 = v38;
          goto LABEL_41;
        }
        if ((_DWORD)v36 == 2)
        {
          v33 = v40;
          break;
        }
        v41 = (_QWORD *)(v34 + 88);
        v42 = 2;
        while (1)
        {
          if (v36 == v42)
          {
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }
          v33 = v40 - *v41;
          if (__OFSUB__(v40, *v41))
            goto LABEL_171;
          if (__OFADD__(v33, 1))
            goto LABEL_172;
          if (v33 + 1 < 1)
            break;
          ++v42;
          v41 += 3;
          v40 = v33;
          if (v36 == v42)
            goto LABEL_40;
        }
        v36 = v42;
        v33 = v40;
LABEL_41:
        v35 = (4 * *(_BYTE *)(v34 + 18) + 8) & 0x3C;
        v32 = ((-15 << v35) - 1) & v32 | (v36 << v35);
        v9 = *(_QWORD *)(v34 + 24 + 24 * v36);
        swift_unknownObjectRetain();
        result = (uint64_t *)swift_unknownObjectRelease();
        v34 = v9;
        if (!*(_BYTE *)(v9 + 18))
          goto LABEL_68;
      }
LABEL_40:
      if (!v33)
        goto LABEL_41;
      goto LABEL_180;
    }
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v32 = 0;
    v33 = a5;
    v9 = v30;
LABEL_68:
    v43 = *(unsigned __int16 *)(v9 + 16);
    if (!*(_WORD *)(v9 + 16))
    {
LABEL_77:
      v45 = v33;
LABEL_78:
      if (v45)
        goto LABEL_199;
      v33 = 0;
      goto LABEL_90;
    }
    v44 = *(_QWORD *)(v9 + 24);
    v15 = __OFSUB__(v33, v44);
    v45 = v33 - v44;
    if (v15)
      goto LABEL_200;
    if (__OFADD__(v45, 1))
      goto LABEL_201;
    if (v45 + 1 <= 0)
    {
      v43 = 0;
    }
    else
    {
      if ((_DWORD)v43 == 1)
        goto LABEL_78;
      v46 = *(_QWORD *)(v9 + 48);
      v33 = v45 - v46;
      if (__OFSUB__(v45, v46))
        goto LABEL_202;
      if (__OFADD__(v33, 1))
        goto LABEL_203;
      if (v33 + 1 < 1)
      {
        v43 = 1;
        v33 = v45;
      }
      else
      {
        if ((_DWORD)v43 == 2)
          goto LABEL_77;
        v47 = (_QWORD *)(v9 + 72);
        v48 = 2;
        while (1)
        {
          if (v43 == v48)
            goto LABEL_195;
          v45 = v33 - *v47;
          if (__OFSUB__(v33, *v47))
            goto LABEL_196;
          if (__OFADD__(v45, 1))
            goto LABEL_197;
          if (v45 + 1 < 1)
            break;
          ++v48;
          v47 += 3;
          v33 = v45;
          if (v43 == v48)
            goto LABEL_78;
        }
        v43 = v48;
      }
    }
LABEL_90:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v8 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
LABEL_91:
    swift_unknownObjectRetain();
    v10 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v8, v9, v30, v88);
    result = (uint64_t *)swift_unknownObjectRelease_n();
    v27 = v84;
    a4 = v85;
    v11 = a5 - v33;
    if (__OFSUB__(a5, v33))
    {
      __break(1u);
      goto LABEL_94;
    }
LABEL_5:
    if (++v12 == v27)
      goto LABEL_166;
  }
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  if (!v7)
    __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  if (!v7)
    __break(1u);
LABEL_209:
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRunsSlice.updateEach(when:with:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t), uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76[5];
  uint64_t v77[6];

  v8 = a6;
  v9 = a5;
  AttributedString._InternalRunsSlice.startIndex.getter(a5, a6, (unint64_t *)&v73);
  v10 = v75;
  v70 = v73;
  v71 = v74;
  v72 = v75;
  result = (uint64_t)AttributedString._InternalRunsSlice.endIndex.getter(v9, v8, a7, v76);
  if (v10 >= v76[4])
    return result;
  v12 = *((_QWORD *)&v73 + 1);
  v13 = v73;
  v14 = v74;
  v64 = a7;
  v65 = v8;
  v66 = v9;
  while (1)
  {
    if (v13 != v9[11])
      goto LABEL_101;
    if (v14)
    {
      v18 = v14 + 24 * ((v12 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF);
      v20 = *(_QWORD *)(v18 + 32);
      v19 = *(_QWORD *)(v18 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = v9[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v12, v21);
      v20 = v22;
      v19 = v23;
      swift_unknownObjectRelease();
    }
    v24 = a1(v20, v19);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      result = (uint64_t)specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v70, v8, a7, v9, a3);
    v25 = *((_QWORD *)&v70 + 1);
    v13 = v70;
    v14 = v71;
    v26 = v72;
    v27 = v9[8];
    v28 = v9[11];
    v68 = v70;
    v69 = v71;
    v15 = *((_QWORD *)&v71 + 1) + 1;
    if (__OFADD__(*((_QWORD *)&v71 + 1), 1))
      break;
    if ((_QWORD)v70 != v28)
      goto LABEL_103;
    if ((_QWORD)v71)
    {
      v29 = *(_QWORD *)(v71 + 24 * ((*((_QWORD *)&v70 + 1) >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v29 = specialized Rope._Node.subscript.getter(v25, v27);
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v30 = __OFADD__(v26, v29);
    v16 = v26 + v29;
    if (v30)
      goto LABEL_104;
    if (!v27)
      goto LABEL_119;
    v31 = ((-15 << ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v27 + 18) | ((unint64_t)*(unsigned __int16 *)(v27 + 16) << ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
    if (v25 >= v31)
      goto LABEL_119;
    if (v14)
    {
      v32 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
      v33 = ((v25 >> v32) & 0xF) + 1;
      if (v33 < *(unsigned __int16 *)(v14 + 16))
      {
        result = swift_unknownObjectRelease_n();
        v12 = (v33 << v32) | ((-15 << v32) - 1) & v25;
        goto LABEL_32;
      }
    }
    v34 = *(unsigned __int8 *)(v27 + 18);
    v35 = (4 * v34 + 8) & 0x3C;
    v36 = (v25 >> v35) & 0xF;
    v67 = v36;
    if (v34)
    {
      swift_unknownObjectRetain();
      v37 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v27 + 24, &v67, (uint64_t)&v68, v27, v34);
      swift_unknownObjectRelease();
      if ((v37 & 1) != 0)
      {
        result = swift_unknownObjectRelease_n();
        v12 = *((_QWORD *)&v68 + 1);
        v13 = v68;
        v14 = v69;
        goto LABEL_32;
      }
      v39 = *(unsigned __int8 *)(v27 + 18);
    }
    else
    {
      v38 = v36 + 1;
      if (v36 + 1 < (unint64_t)*(unsigned __int16 *)(v27 + 16))
      {
        result = swift_unknownObjectRelease_n();
        v12 = (v38 << v35) | ((-15 << v35) - 1) & v25;
        v14 = v27;
        goto LABEL_32;
      }
      v39 = 0;
    }
    v40 = *(unsigned __int16 *)(v27 + 16);
    v41 = *(_BYTE *)(v27 + 18);
    result = swift_unknownObjectRelease_n();
    v14 = 0;
    v12 = ((-15 << ((4 * v41 + 8) & 0x3C)) - 1) & v39 | (unint64_t)(v40 << ((4 * v41 + 8) & 0x3C));
    *(_QWORD *)&v68 = v13;
LABEL_32:
    a7 = v64;
    v8 = v65;
    if (v16 < v64)
      goto LABEL_5;
    v42 = v66[8];
    if (v65 != v64)
    {
      v13 = v66[11];
      if (v42)
      {
        v14 = 0;
        v15 = v66[9];
        v16 = v66[10];
        v12 = ((-15 << ((4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v42 + 18) | ((unint64_t)*(unsigned __int16 *)(v42 + 16) << ((4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C));
      }
      else
      {
        v12 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
      }
      goto LABEL_5;
    }
    if (v42)
      v43 = v66[10];
    else
      v43 = 0;
    if (v65 < 0 || v43 < v65)
      goto LABEL_110;
    v13 = v66[11];
    if (!v42)
    {
      v14 = 0;
      v12 = 0;
      v15 = 0;
      v16 = v65;
      goto LABEL_5;
    }
    v44 = v66[9];
    v45 = *(unsigned __int8 *)(v42 + 18);
    if (!*(_WORD *)(v42 + 16) || v66[10] <= v65)
    {
      v12 = ((-15 << ((4 * v45 + 8) & 0x3C)) - 1) & v45 | ((unint64_t)*(unsigned __int16 *)(v42 + 16) << ((4 * v45 + 8) & 0x3C));
      swift_unknownObjectRetain();
      v46 = 0;
      v14 = 0;
      goto LABEL_94;
    }
    if (*(_BYTE *)(v42 + 18))
    {
      result = swift_unknownObjectRetain_n();
      v46 = v65;
      v47 = v42;
      while (1)
      {
        v49 = *(unsigned __int16 *)(v47 + 16);
        if (!*(_WORD *)(v47 + 16))
          goto LABEL_45;
        v50 = *(_QWORD *)(v47 + 40);
        v51 = v46 - v50;
        if (__OFSUB__(v46, v50))
          goto LABEL_106;
        if (__OFADD__(v51, 1))
          goto LABEL_107;
        if (v51 + 1 <= 0)
        {
          v49 = 0;
        }
        else
        {
          if ((_DWORD)v49 == 1)
          {
            v46 -= v50;
LABEL_45:
            if (v46)
              goto LABEL_105;
            goto LABEL_46;
          }
          v52 = *(_QWORD *)(v47 + 64);
          v30 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v30)
            goto LABEL_108;
          if (__OFADD__(v53, 1))
            goto LABEL_109;
          if (v53 + 1 >= 1)
          {
            if ((_DWORD)v49 != 2)
            {
              v54 = (_QWORD *)(v47 + 88);
              v55 = 2;
              while (v49 != v55)
              {
                v46 = v53 - *v54;
                if (__OFSUB__(v53, *v54))
                  goto LABEL_99;
                if (__OFADD__(v46, 1))
                  goto LABEL_100;
                if (v46 + 1 < 1)
                {
                  v49 = v55;
                  v46 = v53;
                  goto LABEL_46;
                }
                ++v55;
                v54 += 3;
                v53 = v46;
                if (v49 == v55)
                  goto LABEL_45;
              }
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
              goto LABEL_102;
            }
            v46 = v53;
            goto LABEL_45;
          }
          v49 = 1;
          v46 = v51;
        }
LABEL_46:
        v48 = (4 * *(_BYTE *)(v47 + 18) + 8) & 0x3C;
        v45 = ((-15 << v48) - 1) & v45 | (v49 << v48);
        v14 = *(_QWORD *)(v47 + 24 + 24 * v49);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v47 = v14;
        if (!*(_BYTE *)(v14 + 18))
          goto LABEL_71;
      }
    }
    result = swift_unknownObjectRetain_n();
    v45 = 0;
    v46 = v65;
    v14 = v42;
LABEL_71:
    v56 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16))
      goto LABEL_80;
    v57 = *(_QWORD *)(v14 + 24);
    v30 = __OFSUB__(v46, v57);
    v58 = v46 - v57;
    if (v30)
      goto LABEL_115;
    if (__OFADD__(v58, 1))
      goto LABEL_116;
    if (v58 + 1 <= 0)
    {
      v56 = 0;
    }
    else
    {
      if ((_DWORD)v56 == 1)
        goto LABEL_81;
      v59 = *(_QWORD *)(v14 + 48);
      v46 = v58 - v59;
      if (__OFSUB__(v58, v59))
        goto LABEL_117;
      if (__OFADD__(v46, 1))
        goto LABEL_118;
      if (v46 + 1 >= 1)
      {
        if ((_DWORD)v56 != 2)
        {
          v60 = (_QWORD *)(v14 + 72);
          v61 = 2;
          while (v56 != v61)
          {
            v58 = v46 - *v60;
            if (__OFSUB__(v46, *v60))
              goto LABEL_112;
            if (__OFADD__(v58, 1))
              goto LABEL_113;
            if (v58 + 1 < 1)
            {
              v56 = v61;
              goto LABEL_93;
            }
            ++v61;
            v60 += 3;
            v46 = v58;
            if (v56 == v61)
              goto LABEL_81;
          }
          goto LABEL_111;
        }
LABEL_80:
        v58 = v46;
LABEL_81:
        if (v58)
          goto LABEL_114;
        v46 = 0;
        goto LABEL_93;
      }
      v56 = 1;
      v46 = v58;
    }
LABEL_93:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v12 = v45 & 0xFFFFFFFFFFFFF0FFLL | (v56 << 8);
LABEL_94:
    swift_unknownObjectRetain();
    v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, v12, v14, v42, v44);
    result = swift_unknownObjectRelease_n();
    a7 = v64;
    v8 = v65;
    v30 = __OFSUB__(v65, v46);
    v16 = v65 - v46;
    if (v30)
    {
      __break(1u);
      return result;
    }
LABEL_5:
    *(_QWORD *)&v70 = v13;
    *((_QWORD *)&v70 + 1) = v12;
    *(_QWORD *)&v71 = v14;
    *((_QWORD *)&v71 + 1) = v15;
    v72 = v16;
    result = (uint64_t)AttributedString._InternalRunsSlice.endIndex.getter(v66, v8, a7, v77);
    v17 = v16 < v77[4];
    v9 = v66;
    if (!v17)
      return result;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
  return result;
}

_QWORD *AttributedString._InternalRunsSlice.endIndex.getter@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = result[8];
  v5 = result[9];
  v8 = result[10];
  v7 = result[11];
  if (a2 != a3)
  {
    v22 = swift_unknownObjectRetain();
    result = (_QWORD *)specialized Rope._endPath.getter(v22);
    v23 = (unint64_t)result;
    if (v6)
    {
      result = (_QWORD *)swift_unknownObjectRelease();
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v5 = 0;
      v8 = 0;
    }
    goto LABEL_52;
  }
  if (v6)
    v10 = result[10];
  else
    v10 = 0;
  if (a2 < 0 || v10 < a2)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v6 && v8 > a2 && *(_WORD *)(v6 + 16))
  {
    v32 = result[9];
    v33 = result[11];
    v11 = *(unsigned __int8 *)(v6 + 18);
    if (*(_BYTE *)(v6 + 18))
    {
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v12 = a2;
      v13 = v6;
      while (1)
      {
        v15 = *(unsigned __int16 *)(v13 + 16);
        if (!*(_WORD *)(v13 + 16))
          goto LABEL_13;
        v16 = *(_QWORD *)(v13 + 40);
        v17 = __OFSUB__(v12, v16);
        v18 = v12 - v16;
        if (v17)
          goto LABEL_57;
        if (__OFADD__(v18, 1))
          goto LABEL_58;
        if (v18 + 1 >= 1)
          break;
        v15 = 0;
LABEL_14:
        v14 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
        v11 = ((-15 << v14) - 1) & v11 | (v15 << v14);
        v13 = *(_QWORD *)(v13 + 24 + 24 * v15);
        swift_unknownObjectRetain();
        result = (_QWORD *)swift_unknownObjectRelease();
        if (!*(_BYTE *)(v13 + 18))
        {
          v25 = v11 & 0xFFFFFFFFFFFFF0FFLL;
          v26 = *(unsigned __int16 *)(v13 + 16);
          if (*(_WORD *)(v13 + 16))
            goto LABEL_38;
LABEL_49:
          if (!v12)
          {
LABEL_50:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v23 = v25 | (v26 << 8);
            v5 = v32;
            v7 = v33;
LABEL_31:
            swift_unknownObjectRetain();
            v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v23, v13, v6, v5);
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v8 = a2 - v12;
            if (!__OFSUB__(a2, v12))
              goto LABEL_52;
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          goto LABEL_65;
        }
      }
      if ((_DWORD)v15 != 1)
      {
        v19 = (uint64_t *)(v13 + 64);
        v20 = 1;
        while (1)
        {
          v21 = *v19;
          v19 += 3;
          v12 = v18 - v21;
          if (__OFSUB__(v18, v21))
            break;
          if (__OFADD__(v12, 1))
            goto LABEL_55;
          if (v12 + 1 < 1)
          {
            v15 = v20;
            v12 = v18;
            goto LABEL_14;
          }
          ++v20;
          v18 = v12;
          if (v15 == v20)
            goto LABEL_13;
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v12 = v18;
LABEL_13:
      if (v12)
        goto LABEL_56;
      goto LABEL_14;
    }
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v25 = 0;
    v12 = a2;
    v13 = v6;
    v26 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16))
      goto LABEL_49;
LABEL_38:
    v27 = *(_QWORD *)(v13 + 24);
    v17 = __OFSUB__(v12, v27);
    v28 = v12 - v27;
    if (v17)
      goto LABEL_63;
    if (!__OFADD__(v28, 1))
    {
      if (v28 + 1 < 1)
      {
        v26 = 0;
        goto LABEL_50;
      }
      if ((_DWORD)v26 == 1)
      {
        v12 = v28;
        goto LABEL_49;
      }
      v29 = (uint64_t *)(v13 + 48);
      v30 = 1;
      while (1)
      {
        v31 = *v29;
        v29 += 3;
        v12 = v28 - v31;
        if (__OFSUB__(v28, v31))
          goto LABEL_61;
        if (__OFADD__(v12, 1))
          goto LABEL_62;
        if (v12 + 1 < 1)
        {
          v26 = v30;
          v12 = v28;
          goto LABEL_50;
        }
        ++v30;
        v28 = v12;
        if (v26 == v30)
          goto LABEL_49;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
  }
  else
  {
    v24 = swift_unknownObjectRetain_n();
    v23 = specialized Rope._endPath.getter(v24);
    result = (_QWORD *)swift_unknownObjectRelease();
    v13 = 0;
    v12 = 0;
    if (v6)
      goto LABEL_31;
    v5 = 0;
    v8 = a2;
LABEL_52:
    *a4 = v7;
    a4[1] = v23;
    a4[2] = v13;
    a4[3] = v5;
    a4[4] = v8;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a1[1];
  v5 = a1[2];
  v30 = a1[3];
  v31 = *a1;
  v6 = a1[4];
  v7 = (_QWORD *)*v2;
  v8 = v2[2];
  v9 = v7[8];
  v10 = v7[10];
  v11 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v11);
  if (v9)
  {
    swift_unknownObjectRelease();
    if (v6 == v10)
      goto LABEL_3;
LABEL_9:
    v26 = v7[8];
    v27 = v7[9];
    v28 = v7[10];
    v29 = v7[11];
    v32 = v31;
    v33 = v4;
    v34 = v5;
    v35 = v30;
    v36 = v6;
    swift_unknownObjectRetain();
    AttributedString._InternalRuns.formIndex(before:)(&v32, v26, v27, v28, v29);
    result = swift_unknownObjectRelease();
    v14 = v32;
    v18 = v33;
    v20 = v34;
    v24 = v35;
    v25 = v36;
    goto LABEL_11;
  }
  if (v6)
    goto LABEL_9;
LABEL_3:
  v12 = v7[8];
  v13 = v7[9];
  v15 = v7[10];
  v14 = v7[11];
  swift_unknownObjectRetain_n();
  v16 = specialized Rope.find<A>(at:in:preferEnd:)(v8, 1, v12, v13, v15, v14);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  result = swift_unknownObjectRelease();
  if (v16 != v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v12)
  {
    v24 = 0;
    v25 = v8 - v22;
    if (__OFSUB__(v8, v22))
      goto LABEL_13;
LABEL_11:
    *a2 = v14;
    a2[1] = v18;
    a2[2] = v20;
    a2[3] = v24;
    a2[4] = v25;
    return result;
  }
  swift_unknownObjectRetain();
  v24 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v14, v18, v20, v12, v13);
  result = swift_unknownObjectRelease_n();
  v25 = v8 - v22;
  if (!__OFSUB__(v8, v22))
    goto LABEL_11;
LABEL_13:
  __break(1u);
  return result;
}

unint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString._InternalRunsSlice(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;

  v3 = *(_QWORD **)v1;
  v4 = a1[1];
  v39 = *(_QWORD *)(v1 + 16);
  v40 = (_QWORD *)*a1;
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v8 = v3[8];
  v9 = v3[10];
  v10 = swift_unknownObjectRetain();
  result = specialized Rope._endPath.getter(v10);
  if (!v8)
    goto LABEL_23;
  result = swift_unknownObjectRelease();
  if (v7 == v9)
    goto LABEL_3;
LABEL_24:
  v12 = v3[8];
  v14 = v3[9];
  v8 = v3[10];
  v24 = (_QWORD *)v3[11];
  v3 = v40;
  v41 = v40;
  v42 = v4;
  v43 = v6;
  if (__OFSUB__(v5--, 1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v40 != v24)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (!v12)
  {
    v26 = 0;
    if (v4)
      goto LABEL_28;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v26 = *(unsigned __int8 *)(v12 + 18);
  swift_unknownObjectRetain();
  if (v26 >= v4)
    goto LABEL_40;
LABEL_28:
  if (v6)
  {
    v27 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
    if (((v4 >> v27) & 0xF) != 0)
    {
      v26 = ((((v4 >> v27) & 0xF) - 1) << v27) | ((-15 << v27) - 1) & v4;
LABEL_34:
      v28 = (_QWORD *)(v6 + 24 * ((v26 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF));
      v14 = v28[3];
      v3 = (_QWORD *)v28[4];
      v4 = v28[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_42;
    }
  }
  swift_unknownObjectRetain();
  v6 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v41, v12);
  result = swift_unknownObjectRelease();
  if ((v6 & 1) != 0)
  {
    if (v41 == v40)
    {
      v26 = v42;
      v6 = v43;
      if (v43)
        goto LABEL_34;
LABEL_41:
      swift_unknownObjectRetain();
      v14 = specialized Rope._Node.subscript.getter(v26, v12);
      v3 = v31;
      v4 = v32;
      swift_unknownObjectRelease();
LABEL_42:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v30 = v7 - v14;
      if (!__OFSUB__(v7, v14))
      {
        v3 = v40;
        goto LABEL_58;
      }
      goto LABEL_65;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }
  __break(1u);
  while (2)
  {
    __break(1u);
    while (1)
    {
      if (!v4)
      {
        __break(1u);
        goto LABEL_72;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      if (v7)
        goto LABEL_24;
LABEL_3:
      v12 = v3[8];
      v5 = v3[10];
      if (v12)
        v13 = v3[10];
      else
        v13 = 0;
      v14 = v39;
      if (v39 < 0 || v13 < v39)
        goto LABEL_66;
      v8 = v3[9];
      v3 = (_QWORD *)v3[11];
      if (!v12 || !*(_WORD *)(v12 + 16))
      {
        v29 = swift_unknownObjectRetain_n();
        v26 = specialized Rope._endPath.getter(v29);
        result = swift_unknownObjectRelease();
        v6 = 0;
        v4 = 0;
        if (v12)
          goto LABEL_36;
        goto LABEL_57;
      }
      v40 = (_QWORD *)v8;
      v7 = *(unsigned __int8 *)(v12 + 18);
      if (!*(_BYTE *)(v12 + 18))
        break;
      result = swift_unknownObjectRetain_n();
      v4 = v39;
      v14 = -15;
      v8 = 24;
      v15 = v12;
      while (1)
      {
        v18 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16))
          break;
        v19 = *(_QWORD *)(v15 + 40);
        v20 = v4 - v19;
        if (__OFSUB__(v4, v19))
          goto LABEL_61;
        if (v20 > 0)
        {
          if ((_DWORD)v18 == 1)
            goto LABEL_22;
          v21 = (uint64_t *)(v15 + 64);
          v16 = 1;
          v4 = v20;
          while (1)
          {
            v22 = *v21;
            v21 += 3;
            v23 = v4 - v22;
            if (__OFSUB__(v4, v22))
              break;
            if (v23 < 1)
              goto LABEL_13;
            ++v16;
            v4 = v23;
            if (v18 == v16)
              goto LABEL_22;
          }
          __break(1u);
          goto LABEL_60;
        }
        v16 = 0;
LABEL_13:
        v17 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
        v7 = ((-15 << v17) - 1) & v7 | (v16 << v17);
        v6 = *(_QWORD *)(v15 + 24 + 24 * v16);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v15 = v6;
        if (!*(_BYTE *)(v6 + 18))
        {
          v8 = v7 & 0xFFFFFFFFFFFFF0FFLL;
          v14 = v39;
          goto LABEL_46;
        }
      }
    }
    result = swift_unknownObjectRetain_n();
    v8 = 0;
    v4 = v39;
    v6 = v12;
LABEL_46:
    v33 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16))
    {
LABEL_72:
      if (!v4)
      {
        __break(1u);
        return result;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v34 = *(_QWORD *)(v6 + 24);
    v35 = v4 - v34;
    if (__OFSUB__(v4, v34))
      continue;
    break;
  }
  v7 = v5;
  if (v35 > 0)
  {
    if ((_DWORD)v33 != 1)
    {
      v36 = (uint64_t *)(v6 + 48);
      v5 = 1;
      v4 = v35;
      while (1)
      {
        v37 = *v36;
        v36 += 3;
        v38 = v4 - v37;
        if (__OFSUB__(v4, v37))
          break;
        if (v38 < 1)
          goto LABEL_56;
        ++v5;
        v4 = v38;
        if (v33 == v5)
          goto LABEL_54;
      }
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    goto LABEL_54;
  }
LABEL_55:
  v5 = 0;
LABEL_56:
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  v26 = v8 | (v5 << 8);
  v8 = (unint64_t)v40;
  if (v12)
  {
LABEL_36:
    swift_unknownObjectRetain();
    v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v3, v26, v6, v12, v8);
    result = swift_unknownObjectRelease_n();
    v30 = v14 - v4;
    if (__OFSUB__(v14, v4))
      goto LABEL_67;
    goto LABEL_58;
  }
LABEL_57:
  v5 = 0;
  v30 = v14 - v4;
  if (__OFSUB__(v14, v4))
    goto LABEL_67;
LABEL_58:
  *a1 = v3;
  a1[1] = v26;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v30;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v3 = v1[1];
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *(_QWORD *)(*v1 + 72);
  v7 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 88);
  swift_unknownObjectRetain_n();
  v8 = specialized Rope.find<A>(at:in:preferEnd:)(v3, 0, v4, v5, v7, v6);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  result = swift_unknownObjectRelease();
  if (v8 == v6)
  {
    if (v4)
    {
      swift_unknownObjectRetain();
      v16 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v10, v12, v4, v5);
      result = swift_unknownObjectRelease_n();
      v17 = v3 - v14;
      if (!__OFSUB__(v3, v14))
      {
LABEL_4:
        *a1 = v6;
        a1[1] = v10;
        a1[2] = v12;
        a1[3] = v16;
        a1[4] = v17;
        return result;
      }
    }
    else
    {
      v16 = 0;
      v17 = v3 - v14;
      if (!__OFSUB__(v3, v14))
        goto LABEL_4;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;

  v3 = v1[1];
  v4 = v1[2];
  v6 = *(_QWORD *)(*v1 + 64);
  v5 = *(_QWORD *)(*v1 + 72);
  v8 = *(_QWORD *)(*v1 + 80);
  v7 = *(_QWORD *)(*v1 + 88);
  v9 = swift_unknownObjectRetain();
  if (v3 != v4)
  {
    result = specialized Rope._endPath.getter(v9);
    v12 = result;
    if (v6)
    {
      result = swift_unknownObjectRelease();
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v5 = 0;
      v8 = 0;
    }
    goto LABEL_11;
  }
  swift_unknownObjectRetain();
  v10 = specialized Rope.find<A>(at:in:preferEnd:)(v3, 0, v6, v5, v8, v7);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  result = swift_unknownObjectRelease();
  if (v10 == v7)
  {
    if (v6)
    {
      swift_unknownObjectRetain();
      v5 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v12, v14, v6, v5);
      result = swift_unknownObjectRelease_n();
      v8 = v3 - v16;
      if (!__OFSUB__(v3, v16))
        goto LABEL_11;
    }
    else
    {
      v5 = 0;
      v8 = v3 - v16;
      if (!__OFSUB__(v3, v16))
      {
LABEL_11:
        *a1 = v7;
        a1[1] = v12;
        a1[2] = v14;
        a1[3] = v5;
        a1[4] = v8;
        return result;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice(_QWORD *a1, uint64_t a2))(void **a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = AttributedString._InternalRunsSlice.subscript.getter(a2, *v2, v2[1], v2[2]);
  v5[3] = v7;
  v5[4] = v8;
  *v5 = v6;
  v5[1] = v7;
  v5[2] = v8;
  return protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice;
}

void protocol witness for Collection.subscript.read in conformance AttributedString._InternalRunsSlice(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._InternalRunsSlice@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];

  v3 = a1[3];
  v6[2] = a1[2];
  v6[3] = v3;
  v6[4] = a1[4];
  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return specialized Collection<>.subscript.getter((uint64_t)v6, *(_QWORD **)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), a2);
}

_QWORD *protocol witness for Collection.indices.getter in conformance AttributedString._InternalRunsSlice@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return specialized Collection<>.indices.getter(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString._InternalRunsSlice()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) == *(_QWORD *)(v0 + 16);
}

double protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString._InternalRunsSlice@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  v11 = *(_QWORD *)(a1 + 32);
  specialized BidirectionalCollection.index(_:offsetBy:)((uint64_t *)v10, a2, *(_QWORD **)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), (uint64_t *)v8);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 32) = v9;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v9[5];
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v6 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v6;
  v11 = *(_QWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  v13 = *(_QWORD *)(a3 + 32);
  specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)((uint64_t *)v10, a2, (uint64_t)v12, *(_QWORD **)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), v9);
  return outlined init with take of LocalePreferences?((uint64_t)v9, a4, &demangling cache variable for type metadata for AttributedString._InternalRuns.Index?);
}

uint64_t *protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  v7 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v4;
  v9 = *(_QWORD *)(a2 + 32);
  return specialized BidirectionalCollection._distance(from:to:)((uint64_t *)v6, (uint64_t)v8, *(_QWORD **)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
}

unint64_t protocol witness for Collection.index(after:) in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _OWORD v26[2];
  uint64_t v27;

  v4 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v4;
  v27 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)*v2;
  v5 = v2[1];
  v7 = v2[2];
  v9 = *(_QWORD *)(*v2 + 64);
  v8 = *(_QWORD *)(*v2 + 72);
  v10 = v6[10];
  v11 = v6[11];
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(after:)((uint64_t)v26, v9, v8, v10, v11, (uint64_t)v25);
  v12 = v25[0];
  v13 = v25[1];
  v15 = v25[2];
  v14 = v25[3];
  v16 = v25[4];
  result = swift_unknownObjectRelease();
  if (v16 < v7)
    goto LABEL_12;
  v18 = v6[8];
  v14 = v6[9];
  v16 = v6[10];
  v12 = v6[11];
  v19 = swift_unknownObjectRetain();
  if (v5 != v7)
  {
    result = specialized Rope._endPath.getter(v19);
    v13 = result;
    if (v18)
    {
      result = swift_unknownObjectRelease();
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      v16 = 0;
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  v20 = specialized Rope.find<A>(at:in:preferEnd:)(v5, 0, v18, v14, v16, v12);
  v13 = v21;
  v15 = v22;
  v24 = v23;
  result = swift_unknownObjectRelease();
  if (v20 == v12)
  {
    if (v18)
    {
      swift_unknownObjectRetain();
      v14 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v13, v15, v18, v14);
      result = swift_unknownObjectRelease_n();
      v16 = v5 - v24;
      if (!__OFSUB__(v5, v24))
        goto LABEL_12;
    }
    else
    {
      v14 = 0;
      v16 = v5 - v24;
      if (!__OFSUB__(v5, v24))
      {
LABEL_12:
        *a2 = v12;
        a2[1] = v13;
        a2[2] = v15;
        a2[3] = v14;
        a2[4] = v16;
        return result;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString._InternalRunsSlice(uint64_t *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v2 = (_QWORD *)*v1;
  v43 = v1[1];
  v3 = v1[2];
  v5 = *result;
  v4 = result[1];
  v6 = result[2];
  v7 = result[3];
  v8 = result[4];
  v9 = v2[8];
  v10 = v2[9];
  v12 = v2[10];
  v11 = v2[11];
  v47 = *result;
  v48 = v4;
  v49 = v6;
  v13 = __OFADD__(v7, 1);
  v14 = v7 + 1;
  if (v13)
    goto LABEL_64;
  if (v5 != v11)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v15 = result;
  v44 = v14;
  v46 = v3;
  if (v6)
  {
    v16 = *(_QWORD *)(v6 + 24 * ((v4 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v16 = specialized Rope._Node.subscript.getter(v4, v9);
  }
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_bridgeObjectRelease();
  v13 = __OFADD__(v8, v16);
  v17 = v8 + v16;
  if (v13)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v47, v9, v10, v12, v5);
  result = (uint64_t *)swift_unknownObjectRelease_n();
  if (v17 < v46)
  {
    v18 = v47;
    v19 = v48;
    v20 = v49;
    v21 = v44;
LABEL_60:
    *v15 = v18;
    v15[1] = v19;
    v15[2] = v20;
    v15[3] = v21;
    v15[4] = v17;
    return result;
  }
  v22 = v2[8];
  v21 = v2[9];
  v17 = v2[10];
  v18 = v2[11];
  v23 = v43;
  if (v43 != v46)
  {
    v34 = swift_unknownObjectRetain();
    result = (uint64_t *)specialized Rope._endPath.getter(v34);
    v19 = (unint64_t)result;
    if (v22)
    {
      result = (uint64_t *)swift_unknownObjectRelease();
      v20 = 0;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v17 = 0;
    }
    goto LABEL_60;
  }
  if (v22)
    v24 = v17;
  else
    v24 = 0;
  if (v43 < 0 || v24 < v43)
    goto LABEL_70;
  if (!v22 || !*(_WORD *)(v22 + 16) || v43 >= v17)
  {
    v35 = swift_unknownObjectRetain_n();
    v19 = specialized Rope._endPath.getter(v35);
    result = (uint64_t *)swift_unknownObjectRelease();
    v20 = 0;
    v26 = 0;
    if (!v22)
    {
      v21 = 0;
      v17 = v43;
      goto LABEL_60;
    }
    goto LABEL_39;
  }
  v45 = v21;
  v25 = *(unsigned __int8 *)(v22 + 18);
  if (*(_BYTE *)(v22 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v26 = v43;
    v20 = v22;
    while (1)
    {
      v28 = *(unsigned __int16 *)(v20 + 16);
      if (!*(_WORD *)(v20 + 16))
        goto LABEL_21;
      v29 = *(_QWORD *)(v20 + 40);
      v13 = __OFSUB__(v26, v29);
      v30 = v26 - v29;
      if (v13)
        goto LABEL_68;
      if (__OFADD__(v30, 1))
        goto LABEL_69;
      if (v30 + 1 > 0)
        break;
      v28 = 0;
LABEL_22:
      v27 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
      v25 = ((-15 << v27) - 1) & v25 | (v28 << v27);
      v20 = *(_QWORD *)(v20 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v20 + 18))
      {
        v36 = v25 & 0xFFFFFFFFFFFFF0FFLL;
        v23 = v43;
        goto LABEL_45;
      }
    }
    if ((_DWORD)v28 != 1)
    {
      v31 = (uint64_t *)(v20 + 64);
      v32 = 1;
      while (1)
      {
        v33 = *v31;
        v31 += 3;
        v26 = v30 - v33;
        if (__OFSUB__(v30, v33))
          break;
        if (__OFADD__(v26, 1))
          goto LABEL_63;
        if (v26 + 1 < 1)
        {
          v28 = v32;
          v26 = v30;
          goto LABEL_22;
        }
        ++v32;
        v30 = v26;
        if (v28 == v32)
          goto LABEL_21;
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    v26 = v30;
LABEL_21:
    if (v26)
      goto LABEL_67;
    goto LABEL_22;
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v36 = 0;
  v26 = v43;
  v20 = v22;
LABEL_45:
  v37 = *(unsigned __int16 *)(v20 + 16);
  v21 = v45;
  if (*(_WORD *)(v20 + 16))
  {
    v38 = *(_QWORD *)(v20 + 24);
    v13 = __OFSUB__(v26, v38);
    v39 = v26 - v38;
    if (v13)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    if (__OFADD__(v39, 1))
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v39 + 1 <= 0)
    {
      v37 = 0;
LABEL_58:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v19 = v36 | (v37 << 8);
LABEL_39:
      swift_unknownObjectRetain();
      v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v18, v19, v20, v22, v21);
      result = (uint64_t *)swift_unknownObjectRelease_n();
      v17 = v23 - v26;
      if (!__OFSUB__(v23, v26))
        goto LABEL_60;
      goto LABEL_71;
    }
    if ((_DWORD)v37 != 1)
    {
      v40 = (uint64_t *)(v20 + 48);
      v41 = 1;
      while (1)
      {
        v42 = *v40;
        v40 += 3;
        v26 = v39 - v42;
        if (__OFSUB__(v39, v42))
          goto LABEL_72;
        if (__OFADD__(v26, 1))
          goto LABEL_73;
        if (v26 + 1 < 1)
        {
          v37 = v41;
          v26 = v39;
          goto LABEL_58;
        }
        ++v41;
        v39 = v26;
        if (v37 == v41)
          goto LABEL_57;
      }
    }
    v26 = v39;
  }
LABEL_57:
  if (!v26)
    goto LABEL_58;
LABEL_76:
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance AttributedString._InternalRunsSlice(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v3 = *v1;
  v4 = *(_OWORD *)(v1 + 1);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *(_QWORD *)(*v1 + 80);
  if (v5)
    v7 = *(_QWORD *)(*v1 + 80);
  else
    v7 = 0;
  v8 = v1[1];
  if ((v4 & 0x8000000000000000) != 0 || v7 < (uint64_t)v4)
    goto LABEL_57;
  v9 = *(_QWORD *)(v3 + 72);
  v10 = *(_QWORD *)(v3 + 88);
  v34 = v4;
  if (v5)
  {
    if ((uint64_t)v4 < v6 && *(_WORD *)(v5 + 16) != 0)
    {
      v32 = *(_QWORD *)(v3 + 88);
      v33 = *(_QWORD *)(v3 + 72);
      v16 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        v14 = v8;
        v13 = v5;
        while (1)
        {
          v18 = *(unsigned __int16 *)(v13 + 16);
          if (*(_WORD *)(v13 + 16))
          {
            v19 = *(_QWORD *)(v13 + 40);
            v20 = __OFSUB__(v14, v19);
            v21 = v14 - v19;
            if (v20)
              goto LABEL_55;
            if (__OFADD__(v21, 1))
              goto LABEL_56;
            if (v21 + 1 <= 0)
            {
              v18 = 0;
              goto LABEL_18;
            }
            if ((_DWORD)v18 != 1)
            {
              v22 = (uint64_t *)(v13 + 64);
              v23 = 1;
              while (1)
              {
                v24 = *v22;
                v22 += 3;
                v14 = v21 - v24;
                if (__OFSUB__(v21, v24))
                  break;
                if (__OFADD__(v14, 1))
                  goto LABEL_53;
                if (v14 + 1 < 1)
                {
                  v18 = v23;
                  v14 = v21;
                  goto LABEL_18;
                }
                ++v23;
                v21 = v14;
                if (v18 == v23)
                  goto LABEL_17;
              }
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
            v14 = v21;
          }
LABEL_17:
          if (v14)
            goto LABEL_54;
LABEL_18:
          v17 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
          v16 = ((-15 << v17) - 1) & v16 | (v18 << v17);
          v13 = *(_QWORD *)(v13 + 24 + 24 * v18);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (!*(_BYTE *)(v13 + 18))
          {
            v25 = v16 & 0xFFFFFFFFFFFFF0FFLL;
            goto LABEL_34;
          }
        }
      }
      swift_unknownObjectRetain_n();
      swift_retain();
      v25 = 0;
      v14 = v8;
      v13 = v5;
LABEL_34:
      v26 = *(unsigned __int16 *)(v13 + 16);
      v9 = v33;
      if (*(_WORD *)(v13 + 16))
      {
        v27 = *(_QWORD *)(v13 + 24);
        v20 = __OFSUB__(v14, v27);
        v28 = v14 - v27;
        if (v20)
          goto LABEL_61;
        if (__OFADD__(v28, 1))
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v28 + 1 <= 0)
        {
          v26 = 0;
LABEL_47:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v12 = v25 | (v26 << 8);
          v10 = v32;
          goto LABEL_13;
        }
        if ((_DWORD)v26 != 1)
        {
          v29 = (uint64_t *)(v13 + 48);
          v30 = 1;
          while (1)
          {
            v31 = *v29;
            v29 += 3;
            v14 = v28 - v31;
            if (__OFSUB__(v28, v31))
              goto LABEL_59;
            if (__OFADD__(v14, 1))
              goto LABEL_60;
            if (v14 + 1 < 1)
            {
              v26 = v30;
              v14 = v28;
              goto LABEL_47;
            }
            ++v30;
            v28 = v14;
            if (v26 == v30)
              goto LABEL_46;
          }
        }
        v14 = v28;
      }
LABEL_46:
      if (!v14)
        goto LABEL_47;
LABEL_63:
      __break(1u);
      return;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  v12 = specialized Rope._endPath.getter(v5);
  swift_unknownObjectRelease();
  v13 = 0;
  v14 = 0;
  if (!v5)
  {
    swift_release();
    v15 = 0;
    goto LABEL_49;
  }
LABEL_13:
  swift_unknownObjectRetain();
  v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v12, v13, v5, v9);
  swift_release();
  swift_unknownObjectRelease_n();
LABEL_49:
  if (__OFSUB__(v8, v14))
    goto LABEL_58;
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v34;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v8 - v14;
}

uint64_t *protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString._InternalRunsSlice()
{
  uint64_t v0;

  return specialized Collection.count.getter(*(uint64_t **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._InternalRunsSlice()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(uint64_t **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._InternalRunsSlice(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD **)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._InternalRunsSlice@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV12_InternalRunVqd__Isgyrzo_AJ01_K9RunsSliceVABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRunsSlice, &type metadata for AttributedString._InternalRunsSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRunsSlice, &type metadata for AttributedString._InternalRunsSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._InternalRunsSlice, &type metadata for AttributedString._InternalRunsSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRunsSlice>, MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRunsSlice> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRunsSlice>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRunsSlice>, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString._InternalRunsSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRunsSlice> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRunsSlice>, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRunsSlice> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = lazy protocol witness table accessor for type AttributedString._InternalRunsSlice and conformance AttributedString._InternalRunsSlice();
    result = MEMORY[0x186DA9D64](a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized closure #1 in Rope._Node.descendToLastItem(under:)(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *(_QWORD *)(result + 24 * a2);
  v4 = *(unsigned __int16 *)(v3 + 16);
  if (*(_WORD *)(v3 + 16))
  {
    v6 = v4 - 1;
    v7 = *(unsigned __int8 *)(v3 + 18);
    *a3 = ((-15 << ((4 * v7 + 8) & 0x3C)) - 1) & *a3 | ((v4 - 1) << ((4 * v7 + 8) & 0x3C));
    if (v7)
    {
      swift_unknownObjectRetain();
      v8 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v3 + 24, v6, a3);
      swift_unknownObjectRelease();
      return v8;
    }
    else
    {
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(uint64_t result, int a2, _WORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  v5 = (unsigned __int16)*a3;
  if (*a3)
  {
    result = 0;
    v6 = ~a2 & 1;
    while (1)
    {
      v7 = *a4;
      a4 += 3;
      v8 = v4 - v7;
      if (__OFSUB__(v4, v7))
        break;
      if (__OFADD__(v8, v6))
        goto LABEL_12;
      if (v8 + v6 < 1)
        return result;
      ++result;
      v4 = v8;
      if (v5 == result)
      {
        v4 = v8;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_8:
    if (!v4)
      return v5 - (a2 & 1);
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope.find<A>(at:in:preferEnd:)(uint64_t result, char a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v11;
  _BOOL8 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a3)
    v6 = a5;
  else
    v6 = 0;
  if ((result & 0x8000000000000000) == 0)
  {
    v7 = result;
    if (v6 >= result)
    {
      v9 = a3;
      if (a3 && *(_WORD *)(a3 + 16) && (a5 > result) | a2 & 1)
      {
        v11 = *(unsigned __int8 *)(a3 + 18);
        if (*(_BYTE *)(a3 + 18))
        {
          v12 = (a2 & 1) == 0;
          result = swift_unknownObjectRetain();
          while (1)
          {
            v14 = *(unsigned __int16 *)(v9 + 16);
            if (*(_WORD *)(v9 + 16))
              break;
            v17 = 0;
LABEL_21:
            if (v7)
              goto LABEL_35;
            if ((a2 & 1) != 0)
            {
              if (!*(_WORD *)(v9 + 16))
                goto LABEL_34;
              --v14;
              v7 = v17;
            }
            else
            {
              v7 = 0;
            }
LABEL_12:
            v13 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
            v11 = ((-15 << v13) - 1) & v11 | (v14 << v13);
            v9 = *(_QWORD *)(v9 + 24 + 24 * v14);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            if (!*(_BYTE *)(v9 + 18))
              goto LABEL_29;
          }
          v15 = 0;
          v16 = (uint64_t *)(v9 + 40);
          while (1)
          {
            v18 = *v16;
            v16 += 3;
            v17 = v18;
            v19 = v7 - v18;
            if (__OFSUB__(v7, v18))
              break;
            if (__OFADD__(v19, v12))
              goto LABEL_33;
            if (v19 + v12 < 1)
            {
              v14 = v15;
              goto LABEL_12;
            }
            ++v15;
            v7 = v19;
            if (v14 == v15)
            {
              v7 = v19;
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        swift_unknownObjectRetain();
LABEL_29:
        result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v7, a2 & 1, (_WORD *)(v9 + 16), (uint64_t *)(v9 + 24));
        if (result < 0)
          goto LABEL_37;
        swift_unknownObjectRelease();
      }
      else
      {
        specialized Rope._endPath.getter(a3);
      }
      return a6;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

BOOL specialized closure #1 in Rope.formIndex(before:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (4 * *(_BYTE *)(a1 + 2) + 8) & 0x3C;
  v4 = (v2 >> v3) & 0xF;
  if (v4)
    *(_QWORD *)(a2 + 8) = ((v4 - 1) << v3) | ((-15 << v3) - 1) & v2;
  return v4 != 0;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a2 < 0)
  {
    v4 = 0;
    while ((result ^ 0x8000000000000000) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }
    goto LABEL_12;
  }
  if (a2)
  {
    v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2)
        return result;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (a2 < 0)
  {
    v7 = 0;
    while (result - a3 + v7)
    {
      v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      if (--v7 <= a2)
        return v8;
    }
    return 0;
  }
  if (a2)
  {
    v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1))
      v3 = a2 - 1;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL))
      v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3 + 1;
    if (v4 >= 5)
    {
      v9 = v4 & 3;
      if ((v4 & 3) == 0)
        v9 = 4;
      v5 = v4 - v9;
      v10 = 0uLL;
      v11 = (int64x2_t)(unint64_t)result;
      v12 = vdupq_n_s64(1uLL);
      v13 = v5;
      do
      {
        v11 = vaddq_s64(v11, v12);
        v10 = vaddq_s64(v10, v12);
        v13 -= 4;
      }
      while (v13);
      v6 = vaddvq_s64(vaddq_s64(v10, v11));
    }
    else
    {
      v5 = 0;
      v6 = result;
    }
    v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    v15 = v5 + result - a3;
    v16 = a2 - v5;
    result = v6;
    while (v15)
    {
      if (!v14)
        goto LABEL_27;
      ++result;
      ++v14;
      ++v15;
      if (!--v16)
        return result;
    }
    return 0;
  }
  return result;
}

_QWORD *specialized AttributedString._InternalRunsSlice.updateEach(with:)(_QWORD *result, uint64_t a2, int64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  _QWORD *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  int v151;
  char v152;
  char v153;
  unint64_t v154;
  int v155;
  int64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  char v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  int64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD v209[2];
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  _OWORD v226[3];
  _OWORD v227[3];
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  _OWORD v234[2];

  v5 = result[8];
  v201 = result + 8;
  if (v5)
    v6 = result[10];
  else
    v6 = 0;
  if (a2 < 0)
    goto LABEL_445;
  i = a2;
  if (v6 < a2)
    goto LABEL_445;
  v9 = result[9];
  v10 = result[11];
  v196 = result;
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && result[10] > a2)
    {
      v207 = result[9];
      v13 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v17 = i;
        v4 = v5;
LABEL_368:
        v18 = *(unsigned __int16 *)(v4 + 16);
        if (!*(_WORD *)(v4 + 16))
        {
          i = a2;
          goto LABEL_385;
        }
        v189 = *(_QWORD *)(v4 + 24);
        v23 = __OFSUB__(v17, v189);
        v14 = v17 - v189;
        i = a2;
        if (v23)
          goto LABEL_470;
        if (!__OFADD__(v14, 1))
        {
          if (v14 + 1 <= 0)
          {
            v18 = 0;
            goto LABEL_386;
          }
          if ((_DWORD)v18 == 1)
          {
            v17 = v14;
            goto LABEL_385;
          }
          goto LABEL_380;
        }
        goto LABEL_471;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v17 = i;
      v181 = v5;
      while (1)
      {
        v183 = *(unsigned __int16 *)(v181 + 16);
        if (!*(_WORD *)(v181 + 16))
          goto LABEL_352;
        v184 = *(_QWORD *)(v181 + 40);
        v23 = __OFSUB__(v17, v184);
        v185 = v17 - v184;
        if (v23)
          goto LABEL_425;
        if (__OFADD__(v185, 1))
          goto LABEL_426;
        if (v185 + 1 > 0)
          break;
        v183 = 0;
LABEL_353:
        v182 = (4 * *(_BYTE *)(v181 + 18) + 8) & 0x3C;
        v13 = ((-15 << v182) - 1) & v13 | (v183 << v182);
        v4 = *(_QWORD *)(v181 + 24 + 24 * v183);
        swift_unknownObjectRetain();
        result = (_QWORD *)swift_unknownObjectRelease();
        v181 = v4;
        if (!*(_BYTE *)(v4 + 18))
          goto LABEL_368;
      }
      if ((_DWORD)v183 != 1)
      {
        v186 = (uint64_t *)(v181 + 64);
        v187 = 1;
        while (1)
        {
          v188 = *v186;
          v186 += 3;
          v17 = v185 - v188;
          if (__OFSUB__(v185, v188))
            break;
          if (__OFADD__(v17, 1))
            goto LABEL_400;
          if (v17 + 1 < 1)
          {
            v183 = v187;
            v17 = v185;
            goto LABEL_353;
          }
          ++v187;
          v185 = v17;
          if (v183 == v187)
            goto LABEL_352;
        }
LABEL_399:
        __break(1u);
LABEL_400:
        __break(1u);
LABEL_401:
        __break(1u);
LABEL_402:
        __break(1u);
        goto LABEL_403;
      }
      v17 = v185;
LABEL_352:
      if (v17)
        goto LABEL_424;
      goto LABEL_353;
    }
  }
  v12 = swift_unknownObjectRetain_n();
  v13 = specialized Rope._endPath.getter(v12);
  result = (_QWORD *)swift_unknownObjectRelease();
  v16 = 0;
  v17 = 0;
  if (!v5)
    goto LABEL_387;
  while (1)
  {
    swift_unknownObjectRetain();
    v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v13, v16, v5, v9);
    result = (_QWORD *)swift_unknownObjectRelease_n();
    v18 = i - v17;
    if (!__OFSUB__(i, v17))
      break;
    while (1)
    {
      __break(1u);
LABEL_390:
      __break(1u);
LABEL_391:
      __break(1u);
LABEL_392:
      v18 = v15;
      v17 = v14;
LABEL_386:
      swift_unknownObjectRelease();
      result = (_QWORD *)swift_unknownObjectRelease();
      v16 = v4;
      v14 = v13 & 0xFFFFFFFFFFFFF0FFLL;
      v13 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v18 << 8);
      v9 = v207;
      if (v5)
        break;
LABEL_387:
      v200 = 0;
      v18 = i - v17;
      if (!__OFSUB__(i, v17))
        goto LABEL_14;
    }
  }
LABEL_14:
  v4 = v16;
  v20 = a3;
  v19 = v196;
  while (1)
  {
    v5 = *v201;
    v206 = v13;
    v207 = v10;
    v205 = v18;
    if (i != v20)
    {
      if (v5)
        v28 = v19[10];
      else
        v28 = 0;
      goto LABEL_68;
    }
    if (!v5)
    {
      if (i > 0)
        goto LABEL_435;
      v27 = 0;
      goto LABEL_66;
    }
    v24 = v19[10];
    if (v24 < i)
      goto LABEL_421;
    v10 = v19[9];
    v13 = *(unsigned __int8 *)(v5 + 18);
    if (*(_WORD *)(v5 + 16))
      v25 = v24 <= i;
    else
      v25 = 1;
    v197 = v19[11];
    if (!v25)
    {
      if (*(_BYTE *)(v5 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v27 = i;
        v29 = v5;
        while (1)
        {
          v14 = *(unsigned __int16 *)(v29 + 16);
          if (!*(_WORD *)(v29 + 16))
            goto LABEL_35;
          v31 = *(_QWORD *)(v29 + 40);
          v23 = __OFSUB__(v27, v31);
          v32 = v27 - v31;
          if (v23)
            goto LABEL_394;
          if (__OFADD__(v32, 1))
            goto LABEL_395;
          if (v32 + 1 > 0)
            break;
          v14 = 0;
LABEL_36:
          v30 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
          v13 = ((-15 << v30) - 1) & v13 | (v14 << v30);
          v18 = *(_QWORD *)(v29 + 24 + 24 * v14);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v29 = v18;
          if (!*(_BYTE *)(v18 + 18))
            goto LABEL_51;
        }
        if ((_DWORD)v14 != 1)
        {
          v33 = (uint64_t *)(v29 + 64);
          v34 = 1;
          while (1)
          {
            v35 = *v33;
            v33 += 3;
            v27 = v32 - v35;
            if (__OFSUB__(v32, v35))
              goto LABEL_378;
            if (__OFADD__(v27, 1))
              goto LABEL_379;
            if (v27 + 1 < 1)
              break;
            ++v34;
            v32 = v27;
            if (v14 == v34)
              goto LABEL_35;
          }
          v14 = v34;
          v27 = v32;
          goto LABEL_36;
        }
        v27 = v32;
LABEL_35:
        if (v27)
        {
          __break(1u);
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
          goto LABEL_399;
        }
        goto LABEL_36;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v13 = 0;
      v27 = i;
      v18 = v5;
LABEL_51:
      v36 = *(unsigned __int16 *)(v18 + 16);
      if (*(_WORD *)(v18 + 16))
      {
        v37 = *(_QWORD *)(v18 + 24);
        v23 = __OFSUB__(v27, v37);
        v38 = v27 - v37;
        if (v23)
          goto LABEL_442;
        if (__OFADD__(v38, 1))
          goto LABEL_443;
        if (v38 + 1 <= 0)
        {
          v36 = 0;
LABEL_64:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v26 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v36 << 8);
          v20 = a3;
          goto LABEL_65;
        }
        if ((_DWORD)v36 != 1)
        {
          v39 = (uint64_t *)(v18 + 48);
          v40 = 1;
          while (1)
          {
            v41 = *v39;
            v39 += 3;
            v27 = v38 - v41;
            if (__OFSUB__(v38, v41))
              goto LABEL_418;
            if (__OFADD__(v27, 1))
              goto LABEL_419;
            if (v27 + 1 < 1)
              break;
            ++v40;
            v38 = v27;
            if (v36 == v40)
              goto LABEL_63;
          }
          v36 = v40;
          v27 = v38;
          goto LABEL_64;
        }
        v27 = v38;
      }
LABEL_63:
      if (v27)
        goto LABEL_441;
      goto LABEL_64;
    }
    v26 = ((-15 << ((4 * v13 + 8) & 0x3C)) - 1) & v13 | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * v13 + 8) & 0x3C));
    swift_unknownObjectRetain();
    v27 = 0;
    v18 = 0;
LABEL_65:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v197, v26, v18, v5, v10);
    result = (_QWORD *)swift_unknownObjectRelease_n();
    v13 = v206;
    v10 = v207;
    v18 = v205;
LABEL_66:
    v28 = i - v27;
    if (__OFSUB__(i, v27))
      goto LABEL_416;
    v19 = v196;
LABEL_68:
    if (v18 >= v28)
      return result;
    if (v10 != v19[11])
      goto LABEL_401;
    v202 = (_QWORD *)v4;
    if (v4)
    {
      v42 = (_QWORD *)(v4 + 24 * ((v13 >> ((4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C)) & 0xF));
      v43 = v42[4];
      v5 = v42[5];
      v44 = v42[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v10 = v43;
      v13 = v5;
    }
    else
    {
      v45 = v19[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v13, v45);
      v43 = v46;
      v5 = v47;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (v207 != v19[11])
        goto LABEL_420;
      v48 = v20;
      v49 = v19[8];
      swift_unknownObjectRetain();
      v44 = specialized Rope._Node.subscript.getter(v13, v49);
      v10 = v50;
      v13 = v51;
      v20 = v48;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v52 = v205 + v44;
    if (__OFADD__(v205, v44))
      goto LABEL_402;
    *(_QWORD *)&v218 = v43;
    *((_QWORD *)&v218 + 1) = v5;
    if (v205 >= v20)
      v53 = v20;
    else
      v53 = v205;
    if (v205 >= i)
      v18 = v53;
    else
      v18 = i;
    if (v52 <= i)
      v54 = i;
    else
      v54 = v52;
    if (v52 > v20)
      v54 = v20;
    if (v18 == v54)
      break;
    if (v18 != v205 || v54 != v52)
    {
      v192 = v54;
      i = v43 + 64;
      v66 = 1 << *(_BYTE *)(v43 + 32);
      if (v66 < 64)
        v67 = ~(-1 << v66);
      else
        v67 = -1;
      v68 = v67 & *(_QWORD *)(v43 + 64);
      v69 = (unint64_t)(v66 + 63) >> 6;
      result = (_QWORD *)swift_bridgeObjectRetain();
      v4 = 0;
      v198 = 0;
      if (v68)
      {
LABEL_123:
        v70 = __clz(__rbit64(v68));
        v68 &= v68 - 1;
        v71 = v70 | (v4 << 6);
        goto LABEL_141;
      }
      while (1)
      {
        v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
LABEL_377:
          __break(1u);
LABEL_378:
          __break(1u);
LABEL_379:
          __break(1u);
LABEL_380:
          v190 = (uint64_t *)(v4 + 48);
          v15 = 1;
          while (1)
          {
            v191 = *v190;
            v190 += 3;
            v17 = v14 - v191;
            if (__OFSUB__(v14, v191))
              goto LABEL_449;
            if (__OFADD__(v17, 1))
              goto LABEL_450;
            if (v17 + 1 < 1)
              goto LABEL_392;
            ++v15;
            v14 = v17;
            if (v18 == v15)
            {
LABEL_385:
              if (!v17)
                goto LABEL_386;
              goto LABEL_469;
            }
          }
        }
        if (v14 >= v69)
          break;
        v72 = *(_QWORD *)(i + 8 * v14);
        ++v4;
        if (!v72)
        {
          v4 = v14 + 1;
          if (v14 + 1 >= v69)
            break;
          v72 = *(_QWORD *)(i + 8 * v4);
          if (!v72)
          {
            v4 = v14 + 2;
            if (v14 + 2 >= v69)
              break;
            v72 = *(_QWORD *)(i + 8 * v4);
            if (!v72)
            {
              v4 = v14 + 3;
              if (v14 + 3 >= v69)
                break;
              v72 = *(_QWORD *)(i + 8 * v4);
              if (!v72)
              {
                v73 = v14 + 4;
                if (v73 >= v69)
                  break;
                v72 = *(_QWORD *)(i + 8 * v73);
                if (!v72)
                {
                  while (1)
                  {
                    v4 = v73 + 1;
                    if (__OFADD__(v73, 1))
                      goto LABEL_408;
                    if (v4 >= v69)
                      goto LABEL_147;
                    v72 = *(_QWORD *)(i + 8 * v4);
                    ++v73;
                    if (v72)
                      goto LABEL_140;
                  }
                }
                v4 = v73;
              }
            }
          }
        }
LABEL_140:
        v68 = (v72 - 1) & v72;
        v71 = __clz(__rbit64(v72)) + (v4 << 6);
LABEL_141:
        v74 = (unint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v71);
        v13 = *v74;
        v10 = v74[1];
        if (*(_QWORD *)(a4 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v13, v10);
          v5 = v75;
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0)
            goto LABEL_145;
          result = (_QWORD *)swift_bridgeObjectRelease();
          if (v68)
            goto LABEL_123;
        }
        else
        {
          swift_bridgeObjectRetain();
LABEL_145:
          v217 = 0;
          v215 = 0u;
          v216 = 0u;
          v213 = 0u;
          v214 = 0u;
          v5 = (uint64_t)&v218;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v213, v13, v10);
          result = (_QWORD *)swift_bridgeObjectRelease();
          v198 = 1;
          if (v68)
            goto LABEL_123;
        }
      }
LABEL_147:
      result = (_QWORD *)swift_release();
      if ((v198 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        i = a2;
        v20 = a3;
        v19 = v196;
        goto LABEL_253;
      }
      v19 = v196;
      if (__OFSUB__(v192, v18))
        goto LABEL_427;
      v10 = *((_QWORD *)&v218 + 1);
      v76 = v218;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v18, v192, v192 - v18, v76, v10);
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      v5 = v196[8];
      if (v5)
        v77 = v196[10];
      else
        v77 = 0;
      if (v205 < 0 || v77 < v205)
        goto LABEL_428;
      v78 = v196[9];
      v207 = v196[11];
      if (!v5 || !*(_WORD *)(v5 + 16) || v205 >= v196[10])
      {
        v101 = swift_unknownObjectRetain_n();
        v206 = specialized Rope._endPath.getter(v101);
        swift_unknownObjectRelease();
        v4 = 0;
        i = 0;
LABEL_248:
        v202 = (_QWORD *)v4;
        if (v5)
        {
          swift_unknownObjectRetain();
          v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v207, v206, v4, v5, v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_unknownObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          v200 = 0;
        }
        v20 = a3;
        if (__OFSUB__(v205, i))
          goto LABEL_431;
        v205 -= i;
        i = a2;
        goto LABEL_253;
      }
      v204 = v196[9];
      v13 = *(unsigned __int8 *)(v5 + 18);
      if (*(_BYTE *)(v5 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        i = v205;
        v79 = v5;
        while (1)
        {
          v14 = *(unsigned __int16 *)(v79 + 16);
          if (!*(_WORD *)(v79 + 16))
            goto LABEL_168;
          v96 = *(_QWORD *)(v79 + 40);
          v23 = __OFSUB__(i, v96);
          v15 = i - v96;
          if (v23)
            goto LABEL_414;
          if (__OFADD__(v15, 1))
            goto LABEL_415;
          if (v15 + 1 > 0)
            break;
          v14 = 0;
LABEL_169:
          v95 = (4 * *(_BYTE *)(v79 + 18) + 8) & 0x3C;
          v13 = ((-15 << v95) - 1) & v13 | (v14 << v95);
          v4 = *(_QWORD *)(v79 + 24 + 24 * v14);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v79 = v4;
          if (!*(_BYTE *)(v4 + 18))
            goto LABEL_228;
        }
        if ((_DWORD)v14 != 1)
        {
          v97 = (uint64_t *)(v79 + 64);
          v98 = 1;
          while (1)
          {
            v99 = *v97;
            v97 += 3;
            i = v15 - v99;
            if (__OFSUB__(v15, v99))
              goto LABEL_390;
            if (__OFADD__(i, 1))
              goto LABEL_391;
            if (i + 1 < 1)
              break;
            ++v98;
            v15 = i;
            if (v14 == v98)
              goto LABEL_168;
          }
          v14 = v98;
          i = v15;
          goto LABEL_169;
        }
        i = v15;
LABEL_168:
        if (i)
          goto LABEL_411;
        goto LABEL_169;
      }
      result = (_QWORD *)swift_unknownObjectRetain_n();
      i = v205;
      v4 = v5;
LABEL_228:
      v136 = *(unsigned __int16 *)(v4 + 16);
      if (!*(_WORD *)(v4 + 16))
        goto LABEL_246;
      v137 = *(_QWORD *)(v4 + 24);
      v23 = __OFSUB__(i, v137);
      v138 = i - v137;
      if (v23)
        goto LABEL_456;
      if (__OFADD__(v138, 1))
        goto LABEL_457;
      if (v138 + 1 <= 0)
      {
        v136 = 0;
      }
      else
      {
        if ((_DWORD)v136 == 1)
        {
          i = v138;
LABEL_246:
          if (i)
            goto LABEL_452;
          goto LABEL_247;
        }
        v142 = (uint64_t *)(v4 + 48);
        v143 = 1;
        while (1)
        {
          v144 = *v142;
          v142 += 3;
          i = v138 - v144;
          if (__OFSUB__(v138, v144))
            goto LABEL_433;
          if (__OFADD__(i, 1))
            goto LABEL_434;
          if (i + 1 < 1)
            break;
          ++v143;
          v138 = i;
          if (v136 == v143)
            goto LABEL_246;
        }
        v136 = v143;
        i = v138;
      }
LABEL_247:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v206 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v136 << 8);
      v78 = v204;
      goto LABEL_248;
    }
    if (v207 != v19[11])
      goto LABEL_417;
    v5 = (uint64_t)v201;
    if (!*v201)
      goto LABEL_472;
    specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v219);
    v234[0] = v220;
    v213 = v219;
    v214 = v220;
    v215 = v221;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)v234);
    result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v234 + 8);
    v214 = MEMORY[0x1E0DEE9E0];
    v203 = v207 + 1;
    v19[11] = v207 + 1;
    if (!v19[8])
      goto LABEL_473;
    specialized Rope._Node._finalizeModify(_:)(&v210, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = v43 + 64;
    v56 = 1 << *(_BYTE *)(v43 + 32);
    if (v56 < 64)
      v57 = ~(-1 << v56);
    else
      v57 = -1;
    v13 = v57 & *(_QWORD *)(v43 + 64);
    v58 = (unint64_t)(v56 + 63) >> 6;
    result = (_QWORD *)swift_bridgeObjectRetain();
    v4 = 0;
    for (i = 0; v13; result = (_QWORD *)swift_bridgeObjectRelease())
    {
      while (1)
      {
        v59 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v60 = v59 | (v4 << 6);
LABEL_115:
        v63 = (unint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v60);
        v10 = *v63;
        v18 = v63[1];
        v64 = *(_QWORD *)(a4 + 16);
        swift_bridgeObjectRetain();
        if (v64)
        {
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v10, v18);
          v5 = v65;
          swift_bridgeObjectRelease();
          if ((v5 & 1) != 0)
            break;
        }
        v217 = 0;
        v215 = 0u;
        v216 = 0u;
        v213 = 0u;
        v214 = 0u;
        v5 = (uint64_t)&v218;
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v213, v10, v18);
        result = (_QWORD *)swift_bridgeObjectRelease();
        i = 1;
        if (!v13)
          goto LABEL_99;
      }
    }
LABEL_99:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_377;
    if (v14 < v58)
    {
      v61 = *(_QWORD *)(v55 + 8 * v14);
      ++v4;
      if (v61)
        goto LABEL_114;
      v4 = v14 + 1;
      if (v14 + 1 < v58)
      {
        v61 = *(_QWORD *)(v55 + 8 * v4);
        if (v61)
          goto LABEL_114;
        v4 = v14 + 2;
        if (v14 + 2 < v58)
        {
          v61 = *(_QWORD *)(v55 + 8 * v4);
          if (v61)
            goto LABEL_114;
          v4 = v14 + 3;
          if (v14 + 3 < v58)
          {
            v61 = *(_QWORD *)(v55 + 8 * v4);
            if (v61)
              goto LABEL_114;
            v62 = v14 + 4;
            if (v62 < v58)
            {
              v61 = *(_QWORD *)(v55 + 8 * v62);
              if (v61)
              {
                v4 = v62;
LABEL_114:
                v13 = (v61 - 1) & v61;
                v60 = __clz(__rbit64(v61)) + (v4 << 6);
                goto LABEL_115;
              }
              while (1)
              {
                v4 = v62 + 1;
                if (__OFADD__(v62, 1))
                  goto LABEL_409;
                if (v4 >= v58)
                  break;
                v61 = *(_QWORD *)(v55 + 8 * v4);
                ++v62;
                if (v61)
                  goto LABEL_114;
              }
            }
          }
        }
      }
    }
    swift_release();
    if ((i & 1) == 0)
    {
      v20 = a3;
      v19 = v196;
      result = (_QWORD *)v206;
      if (v203 != v196[11])
        goto LABEL_430;
      if (!*v201)
        goto LABEL_476;
      specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v228);
      v233 = v229;
      v213 = v228;
      v214 = v229;
      v215 = v230;
      v100 = v218;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v233);
      result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v233 + 8);
      v214 = v100;
      v207 += 2;
      v196[11] = v207;
      i = a2;
      if (!v196[8])
        goto LABEL_477;
      v202 = specialized Rope._Node._finalizeModify(_:)(&v210, &v213);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      goto LABEL_253;
    }
    result = (_QWORD *)v206;
    if (v203 != v196[11])
      goto LABEL_429;
    if (!*v201)
      goto LABEL_474;
    specialized Rope._Node._prepareModify(at:)(v206, (uint64_t)&v222);
    v231 = v223;
    v232 = v224;
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v231);
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v232);
    v213 = v222;
    v215 = v225;
    v80 = *((_QWORD *)&v218 + 1);
    result = (_QWORD *)v218;
    v214 = v218;
    v81 = v207 + 2;
    v196[11] = v207 + 2;
    if (!v196[8])
      goto LABEL_475;
    v199 = (uint64_t)result;
    swift_bridgeObjectRetain_n();
    v193 = v80;
    swift_bridgeObjectRetain_n();
    v82 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v83 = v196[8];
    v84 = v196[9];
    v85 = v196[10];
    v86 = v196[11];
    v207 += 2;
    *(_QWORD *)&v213 = v81;
    *((_QWORD *)&v213 + 1) = v206;
    v202 = v82;
    *(_QWORD *)&v214 = v82;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v213, v83, v84, v85, v86);
    swift_unknownObjectRelease();
    v87 = v213;
    v88 = v214;
    v89 = swift_unknownObjectRetain();
    v90 = specialized Rope._endPath.getter(v89);
    result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_QWORD *)&v87 + 1) >= v90)
    {
      i = a2;
    }
    else
    {
      if ((_QWORD)v87 != v196[11])
        goto LABEL_437;
      if (v88)
      {
        v91 = v88 + 24 * ((*((_QWORD *)&v87 + 1) >> ((4 * *(_BYTE *)(v88 + 18) + 8) & 0x3C)) & 0xFLL);
        v92 = *(_QWORD *)(v91 + 32);
        v93 = *(_QWORD *)(v91 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        i = a2;
        v94 = v196;
      }
      else
      {
        v94 = v196;
        v102 = v196[8];
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v87 + 1), v102);
        v92 = v103;
        v93 = v104;
        swift_unknownObjectRelease();
        i = a2;
      }
      if ((specialized static Dictionary<>.== infix(_:_:)(v92, v199) & 1) != 0)
      {
        v105 = specialized static Set.== infix(_:_:)(v93, v193);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if ((v105 & 1) != 0)
        {
          v106 = specialized Rope._remove(at:)((uint64_t)&v213, v207, v206);
          v107 = v94[8];
          v108 = v94[11];
          v109 = v106;
          if (v106 < specialized Rope._endPath.getter(v107) && *(_BYTE *)(v107 + 18))
          {
            v110 = (v106 >> ((4 * *(_BYTE *)(v107 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v107 + 24, v110, v109);
            swift_unknownObjectRelease();
          }
          v111 = v213;
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          if (v108 != v94[11])
            goto LABEL_458;
          if (!*v201)
            goto LABEL_478;
          result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v109, (uint64_t)v226);
          v213 = v226[0];
          v214 = v226[1];
          v215 = v226[2];
          if (__OFADD__(*((_QWORD *)&v226[0] + 1), v111))
            goto LABEL_459;
          *((_QWORD *)&v213 + 1) = *((_QWORD *)&v226[0] + 1) + v111;
          v207 = v108 + 1;
          v94[11] = v108 + 1;
          if (!v94[8])
            goto LABEL_479;
          v202 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          goto LABEL_203;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
      }
    }
    v109 = v206;
LABEL_203:
    v112 = *v201;
    if (*v201)
      v112 = *(unsigned __int8 *)(v112 + 18);
    v19 = v196;
    v113 = v199;
    v114 = v202;
    v206 = v109;
    if (v109 <= v112)
    {
      swift_bridgeObjectRelease_n();
      result = (_QWORD *)swift_bridgeObjectRelease_n();
      v20 = a3;
      goto LABEL_253;
    }
    v115 = v196[8];
    v116 = v196[11];
    *(_QWORD *)&v213 = v207;
    *((_QWORD *)&v213 + 1) = v109;
    *(_QWORD *)&v214 = v202;
    if (v207 != v116)
      goto LABEL_438;
    if (v115)
    {
      v117 = *(unsigned __int8 *)(v115 + 18);
      result = (_QWORD *)swift_unknownObjectRetain();
      v114 = v202;
      if (v109 <= v117)
        goto LABEL_439;
    }
    else if (!v109)
    {
      goto LABEL_439;
    }
    v118 = (4 * *((_BYTE *)v114 + 18) + 8) & 0x3C;
    if (((v109 >> v118) & 0xF) != 0)
    {
      v119 = v114;
      v120 = ((((v109 >> v118) & 0xF) - 1) << v118) | ((-15 << v118) - 1) & v109;
      result = (_QWORD *)swift_unknownObjectRelease();
      v121 = v119;
      v122 = v207;
    }
    else
    {
      swift_unknownObjectRetain();
      v123 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v213, v115);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      if ((v123 & 1) == 0)
        goto LABEL_453;
      v120 = *((_QWORD *)&v213 + 1);
      v122 = v213;
      v121 = (_QWORD *)v214;
    }
    if (v122 != v196[11])
      goto LABEL_440;
    v20 = a3;
    if (v121)
    {
      v124 = &v121[3 * ((v120 >> ((4 * *((_BYTE *)v121 + 18) + 8) & 0x3C)) & 0xF)];
      v125 = v124[4];
      v126 = v124[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v127 = v196[8];
      swift_unknownObjectRetain();
      v113 = v199;
      specialized Rope._Node.subscript.getter(v120, v127);
      v125 = v128;
      v126 = v129;
      swift_unknownObjectRelease();
    }
    if ((specialized static Dictionary<>.== infix(_:_:)(v125, v113) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_226:
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      goto LABEL_253;
    }
    v130 = specialized static Set.== infix(_:_:)(v126, v193);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v130 & 1) == 0)
      goto LABEL_226;
    v131 = specialized Rope._remove(at:)((uint64_t)&v213, v207, v109);
    v132 = v196[8];
    v133 = v196[11];
    if (v131 >= specialized Rope._endPath.getter(v132))
    {
      v132 = 0;
    }
    else if (*(_BYTE *)(v132 + 18))
    {
      v134 = (v131 >> ((4 * *(_BYTE *)(v132 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      v135 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v132 + 24, v134, v131);
      swift_unknownObjectRelease();
      v132 = v135;
    }
    v210 = v133;
    v211 = v131;
    v212 = v132;
    v139 = v213;
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v133 != v196[11])
      goto LABEL_460;
    v140 = v196[8];
    if (v140)
    {
      v141 = *(unsigned __int8 *)(v140 + 18);
      result = (_QWORD *)swift_unknownObjectRetain();
      if (v131 <= v141)
        goto LABEL_461;
    }
    else if (!v131)
    {
      goto LABEL_461;
    }
    if (v132 && (v177 = (4 * *(_BYTE *)(v132 + 18) + 8) & 0x3C, ((v131 >> v177) & 0xF) != 0))
    {
      v211 = ((((v131 >> v177) & 0xF) - 1) << v177) | ((-15 << v177) - 1) & v131;
      result = (_QWORD *)swift_unknownObjectRelease();
      i = a2;
    }
    else
    {
      swift_unknownObjectRetain();
      v178 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v210, v140);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      i = a2;
      if ((v178 & 1) == 0)
        goto LABEL_466;
      v133 = v210;
    }
    v20 = a3;
    if (v133 != v196[11])
      goto LABEL_462;
    if (!*v201)
      goto LABEL_480;
    v206 = v211;
    result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v211, (uint64_t)v227);
    v213 = v227[0];
    v214 = v227[1];
    v215 = v227[2];
    v23 = __OFSUB__(v205, *((_QWORD *)&v227[0] + 1));
    v205 -= *((_QWORD *)&v227[0] + 1);
    if (v23)
      goto LABEL_463;
    if (__OFADD__(*((_QWORD *)&v227[0] + 1), v139))
      goto LABEL_464;
    *((_QWORD *)&v213 + 1) = *((_QWORD *)&v227[0] + 1) + v139;
    v19 = v196;
    v207 = v133 + 1;
    v196[11] = v133 + 1;
    if (!v196[8])
      goto LABEL_481;
    v202 = specialized Rope._Node._finalizeModify(_:)(v209, &v213);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (__OFSUB__(v200, 1))
      goto LABEL_465;
    --v200;
LABEL_253:
    v145 = v19[8];
    v146 = v19[11];
    *(_QWORD *)&v213 = v207;
    *((_QWORD *)&v213 + 1) = v206;
    *(_QWORD *)&v214 = v202;
    v23 = __OFADD__(v200++, 1);
    if (v23)
      goto LABEL_404;
    if (v207 != v146)
      goto LABEL_405;
    if (v202)
    {
      v147 = v202[3 * ((v206 >> ((4 * *((_BYTE *)v202 + 18) + 8) & 0x3C)) & 0xF) + 3];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v147 = specialized Rope._Node.subscript.getter(v206, v145);
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v18 = v205 + v147;
    if (__OFADD__(v205, v147))
      goto LABEL_406;
    if (v145)
    {
      v148 = ((-15 << ((4 * *(_BYTE *)(v145 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v145 + 18) | ((unint64_t)*(unsigned __int16 *)(v145 + 16) << ((4 * *(_BYTE *)(v145 + 18) + 8) & 0x3C));
      result = (_QWORD *)swift_unknownObjectRetain();
    }
    else
    {
      v148 = 0;
    }
    if (v206 >= v148)
      goto LABEL_407;
    if (v202
      && (v149 = (4 * *((_BYTE *)v202 + 18) + 8) & 0x3C,
          v150 = ((v206 >> v149) & 0xF) + 1,
          v150 < *((unsigned __int16 *)v202 + 8)))
    {
      v13 = (v150 << v149) | ((-15 << v149) - 1) & v206;
      result = (_QWORD *)swift_unknownObjectRelease_n();
    }
    else
    {
      v151 = *(unsigned __int8 *)(v145 + 18);
      v152 = (4 * v151 + 8) & 0x3C;
      v210 = (v206 >> v152) & 0xF;
      if (v151)
      {
        swift_unknownObjectRetain();
        v153 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v145 + 24, &v210, (uint64_t)&v213, v145, v151);
        result = (_QWORD *)swift_unknownObjectRelease();
        if ((v153 & 1) == 0)
          goto LABEL_271;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v13 = *((_QWORD *)&v213 + 1);
      }
      else
      {
        v154 = ((v206 >> v152) & 0xF) + 1;
        if (v154 >= *(unsigned __int16 *)(v145 + 16))
        {
LABEL_271:
          if (v145)
          {
            v155 = *(unsigned __int8 *)(v145 + 18);
            v156 = v18;
            v157 = *(unsigned __int16 *)(v145 + 16);
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v158 = (4 * v155 + 8) & 0x3C;
            v159 = ((-15 << v158) - 1) & v155;
            v160 = v157 << v158;
            v18 = v156;
            v13 = v159 | v160;
          }
          else
          {
            v13 = 0;
          }
          *(_QWORD *)&v213 = v207;
          *((_QWORD *)&v213 + 1) = v13;
          *(_QWORD *)&v214 = 0;
          goto LABEL_275;
        }
        v13 = (v154 << v152) | ((-15 << v152) - 1) & v206;
        *((_QWORD *)&v213 + 1) = v13;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        *(_QWORD *)&v214 = v145;
      }
    }
LABEL_275:
    v10 = v213;
    v4 = v214;
    if (v18 >= v20)
    {
      v161 = *v201;
      if (i == v20)
      {
        v10 = v19[11];
        if (v161)
        {
          v162 = v19[10];
          if (v162 < i)
            goto LABEL_436;
          v208 = v19[9];
          v163 = *(unsigned __int8 *)(v161 + 18);
          if (!*(_WORD *)(v161 + 16) || v162 <= i)
          {
            v13 = ((-15 << ((4 * v163 + 8) & 0x3C)) - 1) & v163 | ((unint64_t)*(unsigned __int16 *)(v161 + 16) << ((4 * v163 + 8) & 0x3C));
            swift_unknownObjectRetain();
            v21 = 0;
            v22 = 0;
LABEL_16:
            swift_unknownObjectRetain();
            v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v13, v22, v161, v208);
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v4 = v22;
            goto LABEL_17;
          }
          if (*(_BYTE *)(v161 + 18))
          {
            result = (_QWORD *)swift_unknownObjectRetain_n();
            v21 = i;
            v164 = v161;
            while (1)
            {
              v166 = *(unsigned __int16 *)(v164 + 16);
              if (!*(_WORD *)(v164 + 16))
                goto LABEL_284;
              v167 = *(_QWORD *)(v164 + 40);
              v168 = v21 - v167;
              if (__OFSUB__(v21, v167))
                goto LABEL_412;
              if (__OFADD__(v168, 1))
                goto LABEL_413;
              if (v168 + 1 <= 0)
              {
                v166 = 0;
              }
              else
              {
                if ((_DWORD)v166 == 1)
                {
                  v21 -= v167;
                  goto LABEL_284;
                }
                v169 = *(_QWORD *)(v164 + 64);
                v23 = __OFSUB__(v168, v169);
                v170 = v168 - v169;
                if (v23)
                  goto LABEL_422;
                if (__OFADD__(v170, 1))
                  goto LABEL_423;
                if (v170 + 1 < 1)
                {
                  v166 = 1;
                  v21 = v168;
                }
                else
                {
                  if ((_DWORD)v166 == 2)
                  {
                    v21 = v170;
LABEL_284:
                    if (v21)
                      goto LABEL_410;
                    goto LABEL_285;
                  }
                  v171 = (_QWORD *)(v164 + 88);
                  v172 = 2;
                  while (1)
                  {
                    if (v166 == v172)
                      goto LABEL_396;
                    v21 = v170 - *v171;
                    if (__OFSUB__(v170, *v171))
                      goto LABEL_397;
                    if (__OFADD__(v21, 1))
                      goto LABEL_398;
                    if (v21 + 1 < 1)
                      break;
                    ++v172;
                    v171 += 3;
                    v170 = v21;
                    if (v166 == v172)
                      goto LABEL_284;
                  }
                  v166 = v172;
                  v21 = v170;
                }
              }
LABEL_285:
              v165 = (4 * *(_BYTE *)(v164 + 18) + 8) & 0x3C;
              v163 = ((-15 << v165) - 1) & v163 | (v166 << v165);
              v22 = *(_QWORD *)(v164 + 24 + 24 * v166);
              swift_unknownObjectRetain();
              result = (_QWORD *)swift_unknownObjectRelease();
              v164 = v22;
              if (!*(_BYTE *)(v22 + 18))
                goto LABEL_311;
            }
          }
          result = (_QWORD *)swift_unknownObjectRetain_n();
          v163 = 0;
          v21 = i;
          v22 = v161;
LABEL_311:
          v173 = *(unsigned __int16 *)(v22 + 16);
          if (!*(_WORD *)(v22 + 16))
            goto LABEL_320;
          v174 = *(_QWORD *)(v22 + 24);
          v23 = __OFSUB__(v21, v174);
          v175 = v21 - v174;
          if (v23)
            goto LABEL_454;
          if (__OFADD__(v175, 1))
            goto LABEL_455;
          if (v175 + 1 <= 0)
          {
            v173 = 0;
          }
          else
          {
            if ((_DWORD)v173 == 1)
            {
LABEL_321:
              if (v175)
                goto LABEL_451;
              v21 = 0;
              goto LABEL_347;
            }
            v176 = *(_QWORD *)(v22 + 48);
            v21 = v175 - v176;
            if (__OFSUB__(v175, v176))
              goto LABEL_467;
            if (__OFADD__(v21, 1))
              goto LABEL_468;
            if (v21 + 1 < 1)
            {
              v173 = 1;
              v21 = v175;
            }
            else
            {
              if ((_DWORD)v173 == 2)
              {
LABEL_320:
                v175 = v21;
                goto LABEL_321;
              }
              v179 = (_QWORD *)(v22 + 72);
              v180 = 2;
              while (1)
              {
                if (v173 == v180)
                  goto LABEL_446;
                v175 = v21 - *v179;
                if (__OFSUB__(v21, *v179))
                  goto LABEL_447;
                if (__OFADD__(v175, 1))
                  goto LABEL_448;
                if (v175 + 1 < 1)
                  break;
                ++v180;
                v179 += 3;
                v21 = v175;
                if (v173 == v180)
                  goto LABEL_321;
              }
              v173 = v180;
            }
          }
LABEL_347:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v13 = v163 & 0xFFFFFFFFFFFFF0FFLL | (v173 << 8);
          goto LABEL_16;
        }
        if (i > 0)
          goto LABEL_444;
        v21 = 0;
        v4 = 0;
        v13 = 0;
        v200 = 0;
LABEL_17:
        v23 = __OFSUB__(i, v21);
        v18 = i - v21;
        v20 = a3;
        if (v23)
          goto LABEL_432;
      }
      else
      {
        v18 = 0;
        v200 = 0;
        v4 = 0;
        v13 = 0;
        v10 = v19[11];
        if (v161)
        {
          v4 = 0;
          v18 = v19[10];
          v200 = v19[9];
          v13 = ((-15 << ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v161 + 18) | ((unint64_t)*(unsigned __int16 *)(v161 + 16) << ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C));
        }
      }
    }
  }
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
LABEL_427:
  __break(1u);
LABEL_428:
  __break(1u);
LABEL_429:
  __break(1u);
LABEL_430:
  __break(1u);
LABEL_431:
  __break(1u);
LABEL_432:
  __break(1u);
LABEL_433:
  __break(1u);
LABEL_434:
  __break(1u);
LABEL_435:
  __break(1u);
LABEL_436:
  __break(1u);
LABEL_437:
  __break(1u);
LABEL_438:
  __break(1u);
LABEL_439:
  __break(1u);
LABEL_440:
  __break(1u);
LABEL_441:
  __break(1u);
LABEL_442:
  __break(1u);
LABEL_443:
  __break(1u);
LABEL_444:
  __break(1u);
LABEL_445:
  __break(1u);
LABEL_446:
  __break(1u);
LABEL_447:
  __break(1u);
LABEL_448:
  __break(1u);
LABEL_449:
  __break(1u);
LABEL_450:
  __break(1u);
LABEL_451:
  __break(1u);
LABEL_452:
  __break(1u);
LABEL_453:
  __break(1u);
LABEL_454:
  __break(1u);
LABEL_455:
  __break(1u);
LABEL_456:
  __break(1u);
LABEL_457:
  __break(1u);
LABEL_458:
  __break(1u);
LABEL_459:
  __break(1u);
LABEL_460:
  __break(1u);
LABEL_461:
  __break(1u);
LABEL_462:
  __break(1u);
LABEL_463:
  __break(1u);
LABEL_464:
  __break(1u);
LABEL_465:
  __break(1u);
LABEL_466:
  __break(1u);
LABEL_467:
  __break(1u);
LABEL_468:
  __break(1u);
LABEL_469:
  __break(1u);
LABEL_470:
  __break(1u);
LABEL_471:
  __break(1u);
LABEL_472:
  __break(1u);
LABEL_473:
  __break(1u);
LABEL_474:
  __break(1u);
LABEL_475:
  __break(1u);
LABEL_476:
  __break(1u);
LABEL_477:
  __break(1u);
LABEL_478:
  __break(1u);
LABEL_479:
  __break(1u);
LABEL_480:
  __break(1u);
LABEL_481:
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AttributedString._InternalRunsSlice(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for AttributedString._InternalRunsSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRunsSlice()
{
  return &type metadata for AttributedString._InternalRunsSlice;
}

uint64_t dispatch thunk of ParseStrategy.parse(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void one-time initialization function for compatibility1()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  Swift::Bool v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  unint64_t v40;
  char v41;
  Swift::String v42;
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_mainBundle);
  v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (!v2)
    goto LABEL_37;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  if (v3 == (id)0xD000000000000016 && v5 == 0x800000018230E0D0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v7 = 0;
    if ((v6 & 1) == 0)
    {
LABEL_38:
      static Calendar.compatibility1 = v7;
      return;
    }
  }
  v8 = objc_msgSend(v0, sel_mainBundle);
  v9 = objc_msgSend(v8, sel_infoDictionary);

  if (!v9)
  {
    v44 = 0u;
    v45 = 0u;
    goto LABEL_36;
  }
  swift_unknownObjectRetain();
  v10 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v10)
  {
    v11 = (_QWORD *)v10;
LABEL_29:

    if (v11[2]
      && (v40 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x800000018230E0F0),
          (v41 & 1) != 0))
    {
      outlined init with copy of Any(v11[7] + 32 * v40, (uint64_t)&v44);
    }
    else
    {
      v44 = 0u;
      v45 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v45 + 1))
    {
      if (swift_dynamicCast())
      {
        v42._countAndFlagsBits = 0x2E32312E38;
        v42._object = (void *)0xE500000000000000;
        v7 = String.hasPrefix(_:)(v42);
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
LABEL_37:
      v7 = 0;
      goto LABEL_38;
    }
LABEL_36:
    outlined destroy of Any?((uint64_t)&v44);
    goto LABEL_37;
  }
  v12 = objc_msgSend(v9, sel_count);
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v11 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v13 = (_QWORD *)v11[6];
  v14 = v11[7];
  swift_retain();
  v15 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v13, v14, v9, (uint64_t)v12);
  if ((v15 & 0x8000000000000000) == 0 && (uint64_t)v12 >= v15)
  {
    v11[2] = v15;
    if (!v15)
    {
      swift_release();
      goto LABEL_29;
    }
    v16 = v15 - 1;
    v17 = v11 + 8;
    while (1)
    {
      if (((*(_QWORD *)((char *)v17 + (((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
        goto LABEL_24;
      v18 = (uint64_t *)(v11[6] + 16 * v16);
      v19 = *v18;
      v20 = v18[1];
      swift_bridgeObjectRetain();
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
      v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v24 = v11[2];
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v25)
        {
          __break(1u);
          break;
        }
        v11[2] = v26;
LABEL_24:
        if (--v16 < 0)
          goto LABEL_27;
      }
      else
      {
        *(_QWORD *)((char *)v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        if (v16 < (uint64_t)v21)
        {
          *(_OWORD *)(v11[6] + 16 * v21) = *(_OWORD *)(v11[6] + 16 * v16);
          v27 = v11[7];
          v28 = (_OWORD *)(v27 + 32 * v16);
          v29 = v28[1];
          v30 = (_OWORD *)(v27 + 32 * v21);
          *v30 = *v28;
          v30[1] = v29;
          goto LABEL_24;
        }
        if (v21 == v16)
          goto LABEL_24;
        v31 = v11[6];
        v32 = (uint64_t *)(v31 + 16 * v21);
        v33 = (uint64_t *)(v31 + 16 * v16);
        v34 = *v32;
        v35 = v32[1];
        v36 = v33[1];
        *v32 = *v33;
        v32[1] = v36;
        *v33 = v34;
        v33[1] = v35;
        v37 = v11[7];
        v38 = (_OWORD *)(v37 + 32 * v21);
        v39 = (_OWORD *)(v37 + 32 * v16);
        outlined init with take of Any(v38, v43);
        outlined init with take of Any(v39, v38);
        outlined init with take of Any(v43, v39);
        if (v16 < 0)
        {
LABEL_27:
          swift_release();
          goto LABEL_29;
        }
      }
    }
  }
  __break(1u);
}

uint64_t one-time initialization function for compatibility1()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static JSONEncoder.compatibility1();
  static JSONEncoder.compatibility1 = result & 1;
  return result;
}

{
  uint64_t result;

  result = _NSLinkedOnOrAfterCrystalglow();
  static String.compatibility1 = result ^ 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static JSONEncoder.compatibility1()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  if (v2 == (id)0xD000000000000012 && v4 == 0x800000018230E110
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == (id)0xD000000000000017 && v4 == 0x800000018230E130
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == (id)0xD000000000000017 && v4 == 0x800000018230E150)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

uint64_t _NSLinkedOnOrAfterCrystalglow()
{
  return dyld_program_sdk_at_least();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char v4;
  uint64_t *v5;
  __int128 v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  void *__src;
  char *__srca;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v5 = v3;
  if (!*(_QWORD *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for AnyHashable?);
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v23 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v24 = v23;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyHashable>);
        v47 = static _DictionaryStorage.copy(original:)();
        v24 = v47;
        if (*(_QWORD *)(v23 + 16))
        {
          v48 = (char *)(v47 + 64);
          __srca = (char *)(v23 + 64);
          v49 = (unint64_t)((1 << *(_BYTE *)(v24 + 32)) + 63) >> 6;
          if (v24 != v23 || v48 >= &__srca[8 * v49])
            memmove(v48, __srca, 8 * v49);
          v75 = 0;
          *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
          v50 = 1 << *(_BYTE *)(v23 + 32);
          v51 = -1;
          if (v50 < 64)
            v51 = ~(-1 << v50);
          v52 = v51 & *(_QWORD *)(v23 + 64);
          v71 = (unint64_t)(v50 + 63) >> 6;
          while (1)
          {
            if (v52)
            {
              v53 = __clz(__rbit64(v52));
              v52 &= v52 - 1;
              v54 = v53 | (v75 << 6);
            }
            else
            {
              v64 = v75 + 1;
              if (__OFADD__(v75, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v64 >= v71)
                break;
              v65 = *(_QWORD *)&__srca[8 * v64];
              v66 = v75 + 1;
              if (!v65)
              {
                v66 = v75 + 2;
                if (v75 + 2 >= v71)
                  break;
                v65 = *(_QWORD *)&__srca[8 * v66];
                if (!v65)
                {
                  v66 = v75 + 3;
                  if (v75 + 3 >= v71)
                    break;
                  v65 = *(_QWORD *)&__srca[8 * v66];
                  if (!v65)
                  {
                    if (v75 + 4 >= v71)
                      break;
                    v66 = v75 + 4;
                    v65 = *(_QWORD *)&__srca[8 * v75 + 32];
                    if (!v65)
                    {
                      if (v75 + 5 >= v71)
                        break;
                      v66 = v75 + 5;
                      v65 = *(_QWORD *)&__srca[8 * v75 + 40];
                      if (!v65)
                      {
                        v67 = v75 + 6;
                        if (v75 + 6 >= v71)
                          break;
                        v65 = *(_QWORD *)&__srca[8 * v67];
                        if (!v65)
                        {
                          while (1)
                          {
                            v66 = v67 + 1;
                            if (__OFADD__(v67, 1))
                              break;
                            if (v66 >= v71)
                              goto LABEL_79;
                            v65 = *(_QWORD *)&__srca[8 * v66];
                            ++v67;
                            if (v65)
                              goto LABEL_78;
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        v66 = v75 + 6;
                      }
                    }
                  }
                }
              }
LABEL_78:
              v52 = (v65 - 1) & v65;
              v75 = v66;
              v54 = __clz(__rbit64(v65)) + (v66 << 6);
            }
            v55 = 16 * v54;
            v56 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * v54);
            v58 = *v56;
            v57 = v56[1];
            v59 = 40 * v54;
            outlined init with copy of AnyHashable(*(_QWORD *)(v23 + 56) + 40 * v54, (uint64_t)&v80);
            v60 = (_QWORD *)(*(_QWORD *)(v24 + 48) + v55);
            *v60 = v58;
            v60[1] = v57;
            v61 = *(_QWORD *)(v24 + 56) + v59;
            v62 = v82;
            v63 = v81;
            *(_OWORD *)v61 = v80;
            *(_OWORD *)(v61 + 16) = v63;
            *(_QWORD *)(v61 + 32) = v62;
            swift_bridgeObjectRetain();
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v25 = *(_QWORD *)(v24 + 56) + 40 * v19;
      v77 = *(_OWORD *)v25;
      v78 = *(_OWORD *)(v25 + 16);
      v79 = *(_QWORD *)(v25 + 32);
      specialized _NativeDictionary._delete(at:)(v19, v24);
      *v5 = v24;
      swift_bridgeObjectRelease();
      v80 = v77;
      v81 = v78;
      v82 = v79;
    }
    else
    {
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
    }
    outlined destroy of Any?((uint64_t)&v80, &demangling cache variable for type metadata for AnyHashable?);
    return swift_bridgeObjectRelease();
  }
  v8 = *(_OWORD *)(a1 + 16);
  v80 = *(_OWORD *)a1;
  v81 = v8;
  v82 = *(_QWORD *)(a1 + 32);
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v76 = *v3;
  v10 = *v3;
  *v3 = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v4 = v11;
    if (*(_QWORD *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, v9);
      v16 = v76;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v18 & 1))
        goto LABEL_84;
      v12 = v17;
      if ((v4 & 1) == 0)
        goto LABEL_48;
LABEL_13:
      outlined assign with take of AnyHashable((uint64_t)&v80, *(_QWORD *)(v16 + 56) + 40 * v12);
LABEL_49:
      *v5 = v16;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((v9 & 1) != 0)
    {
      v16 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_13;
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, (uint64_t)&v80, (_QWORD *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyHashable>);
  v26 = static _DictionaryStorage.copy(original:)();
  v16 = v26;
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_13;
    goto LABEL_48;
  }
  v27 = (void *)(v26 + 64);
  v28 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v10 || (unint64_t)v27 >= v10 + 64 + 8 * v28)
    memmove(v27, (const void *)(v10 + 64), 8 * v28);
  v29 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v10 + 16);
  v30 = 1 << *(_BYTE *)(v10 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & *(_QWORD *)(v10 + 64);
  v68 = v10 + 64;
  v69 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      __src = (void *)((v32 - 1) & v32);
      v74 = v29;
      v33 = __clz(__rbit64(v32)) | (v29 << 6);
      goto LABEL_25;
    }
    v42 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v42 >= v69)
      goto LABEL_47;
    v43 = *(_QWORD *)(v68 + 8 * v42);
    v44 = v29 + 1;
    if (!v43)
    {
      v44 = v29 + 2;
      if (v29 + 2 >= v69)
        goto LABEL_47;
      v43 = *(_QWORD *)(v68 + 8 * v44);
      if (!v43)
      {
        v44 = v29 + 3;
        if (v29 + 3 >= v69)
          goto LABEL_47;
        v43 = *(_QWORD *)(v68 + 8 * v44);
        if (!v43)
        {
          v44 = v29 + 4;
          if (v29 + 4 >= v69)
            goto LABEL_47;
          v43 = *(_QWORD *)(v68 + 8 * v44);
          if (!v43)
          {
            if (v29 + 5 >= v69)
              goto LABEL_47;
            v44 = v29 + 5;
            v43 = *(_QWORD *)(v68 + 8 * (v29 + 5));
            if (!v43)
            {
              if (v29 + 6 >= v69)
                goto LABEL_47;
              v44 = v29 + 6;
              v43 = *(_QWORD *)(v68 + 8 * (v29 + 6));
              if (!v43)
                break;
            }
          }
        }
      }
    }
LABEL_46:
    __src = (void *)((v43 - 1) & v43);
    v74 = v44;
    v33 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_25:
    v34 = 16 * v33;
    v35 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v33);
    v36 = v35[1];
    v70 = *v35;
    v37 = 40 * v33;
    outlined init with copy of AnyHashable(*(_QWORD *)(v10 + 56) + 40 * v33, (uint64_t)&v77);
    v38 = (_QWORD *)(*(_QWORD *)(v16 + 48) + v34);
    *v38 = v70;
    v38[1] = v36;
    v39 = *(_QWORD *)(v16 + 56) + v37;
    v40 = v79;
    v41 = v78;
    *(_OWORD *)v39 = v77;
    *(_OWORD *)(v39 + 16) = v41;
    *(_QWORD *)(v39 + 32) = v40;
    swift_bridgeObjectRetain();
    v32 = (unint64_t)__src;
    v29 = v74;
  }
  v45 = v29 + 7;
  if (v29 + 7 >= v69)
    goto LABEL_47;
  v43 = *(_QWORD *)(v68 + 8 * v45);
  if (v43)
  {
    v44 = v29 + 7;
    goto LABEL_46;
  }
  while (1)
  {
    v44 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v44 >= v69)
      goto LABEL_47;
    v43 = *(_QWORD *)(v68 + 8 * v44);
    ++v45;
    if (v43)
      goto LABEL_46;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  char v4;
  uint64_t *v5;
  char v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t result;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  int64_t v64;
  void *__src;
  char *__srca;
  int64_t v67;
  int64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  _OWORD v71[2];

  v5 = v3;
  if (!*(_QWORD *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v23 = v22;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v43 = static _DictionaryStorage.copy(original:)();
        v23 = v43;
        if (*(_QWORD *)(v22 + 16))
        {
          v44 = (char *)(v43 + 64);
          __srca = (char *)(v22 + 64);
          v45 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
          if (v23 != v22 || v44 >= &__srca[8 * v45])
            memmove(v44, __srca, 8 * v45);
          v68 = 0;
          *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
          v46 = 1 << *(_BYTE *)(v22 + 32);
          v47 = -1;
          if (v46 < 64)
            v47 = ~(-1 << v46);
          v48 = v47 & *(_QWORD *)(v22 + 64);
          v64 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              v50 = v49 | (v68 << 6);
            }
            else
            {
              v57 = v68 + 1;
              if (__OFADD__(v68, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v57 >= v64)
                break;
              v58 = *(_QWORD *)&__srca[8 * v57];
              v59 = v68 + 1;
              if (!v58)
              {
                v59 = v68 + 2;
                if (v68 + 2 >= v64)
                  break;
                v58 = *(_QWORD *)&__srca[8 * v59];
                if (!v58)
                {
                  v59 = v68 + 3;
                  if (v68 + 3 >= v64)
                    break;
                  v58 = *(_QWORD *)&__srca[8 * v59];
                  if (!v58)
                  {
                    if (v68 + 4 >= v64)
                      break;
                    v59 = v68 + 4;
                    v58 = *(_QWORD *)&__srca[8 * v68 + 32];
                    if (!v58)
                    {
                      if (v68 + 5 >= v64)
                        break;
                      v59 = v68 + 5;
                      v58 = *(_QWORD *)&__srca[8 * v68 + 40];
                      if (!v58)
                      {
                        v60 = v68 + 6;
                        if (v68 + 6 >= v64)
                          break;
                        v58 = *(_QWORD *)&__srca[8 * v60];
                        if (!v58)
                        {
                          while (1)
                          {
                            v59 = v60 + 1;
                            if (__OFADD__(v60, 1))
                              break;
                            if (v59 >= v64)
                              goto LABEL_79;
                            v58 = *(_QWORD *)&__srca[8 * v59];
                            ++v60;
                            if (v58)
                              goto LABEL_78;
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        v59 = v68 + 6;
                      }
                    }
                  }
                }
              }
LABEL_78:
              v48 = (v58 - 1) & v58;
              v68 = v59;
              v50 = __clz(__rbit64(v58)) + (v59 << 6);
            }
            v51 = 16 * v50;
            v52 = (uint64_t *)(*(_QWORD *)(v22 + 48) + 16 * v50);
            v54 = *v52;
            v53 = v52[1];
            v55 = 32 * v50;
            outlined init with copy of Any(*(_QWORD *)(v22 + 56) + 32 * v50, (uint64_t)v71);
            v56 = (_QWORD *)(*(_QWORD *)(v23 + 48) + v51);
            *v56 = v54;
            v56[1] = v53;
            outlined init with take of Any(v71, (_OWORD *)(*(_QWORD *)(v23 + 56) + v55));
            swift_bridgeObjectRetain();
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v23 + 56) + 32 * v18), v71);
      specialized _NativeDictionary._delete(at:)(v18, v23);
      *v5 = v23;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v71, 0, sizeof(v71));
    }
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v71, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v71);
  v8 = swift_isUniquelyReferenced_nonNull_native();
  v70 = *v3;
  v9 = v70;
  *v3 = 0x8000000000000000;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v4 = v10;
    if (*(_QWORD *)(v9 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v8);
      v15 = v70;
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v17 & 1))
        goto LABEL_84;
      v11 = v16;
      if ((v4 & 1) == 0)
        goto LABEL_48;
LABEL_13:
      v24 = (_OWORD *)(*(_QWORD *)(v15 + 56) + 32 * v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      outlined init with take of Any(v71, v24);
LABEL_49:
      *v5 = v15;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((v8 & 1) != 0)
    {
      v15 = v9;
      if ((v10 & 1) != 0)
        goto LABEL_13;
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a2, a3, v71, (_QWORD *)v15);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v26 = static _DictionaryStorage.copy(original:)();
  v15 = v26;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_13;
    goto LABEL_48;
  }
  v27 = (void *)(v26 + 64);
  v28 = (unint64_t)((1 << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  if (v15 != v9 || (unint64_t)v27 >= v9 + 64 + 8 * v28)
    memmove(v27, (const void *)(v9 + 64), 8 * v28);
  v29 = 0;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v9 + 16);
  v30 = 1 << *(_BYTE *)(v9 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & *(_QWORD *)(v9 + 64);
  v61 = v9 + 64;
  v62 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      __src = (void *)((v32 - 1) & v32);
      v67 = v29;
      v33 = __clz(__rbit64(v32)) | (v29 << 6);
      goto LABEL_25;
    }
    v39 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v39 >= v62)
      goto LABEL_47;
    v40 = *(_QWORD *)(v61 + 8 * v39);
    v41 = v29 + 1;
    if (!v40)
    {
      v41 = v29 + 2;
      if (v29 + 2 >= v62)
        goto LABEL_47;
      v40 = *(_QWORD *)(v61 + 8 * v41);
      if (!v40)
      {
        v41 = v29 + 3;
        if (v29 + 3 >= v62)
          goto LABEL_47;
        v40 = *(_QWORD *)(v61 + 8 * v41);
        if (!v40)
        {
          v41 = v29 + 4;
          if (v29 + 4 >= v62)
            goto LABEL_47;
          v40 = *(_QWORD *)(v61 + 8 * v41);
          if (!v40)
          {
            v41 = v29 + 5;
            if (v29 + 5 >= v62)
              goto LABEL_47;
            v40 = *(_QWORD *)(v61 + 8 * v41);
            if (!v40)
            {
              v41 = v29 + 6;
              if (v29 + 6 >= v62)
                goto LABEL_47;
              v40 = *(_QWORD *)(v61 + 8 * v41);
              if (!v40)
                break;
            }
          }
        }
      }
    }
LABEL_46:
    __src = (void *)((v40 - 1) & v40);
    v67 = v41;
    v33 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_25:
    v34 = 16 * v33;
    v35 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v33);
    v36 = v35[1];
    v63 = *v35;
    v37 = 32 * v33;
    outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v33, (uint64_t)v69);
    v38 = (_QWORD *)(*(_QWORD *)(v15 + 48) + v34);
    *v38 = v63;
    v38[1] = v36;
    outlined init with take of Any(v69, (_OWORD *)(*(_QWORD *)(v15 + 56) + v37));
    swift_bridgeObjectRetain();
    v32 = (unint64_t)__src;
    v29 = v67;
  }
  v42 = v29 + 7;
  if (v29 + 7 >= v62)
    goto LABEL_47;
  v40 = *(_QWORD *)(v61 + 8 * v42);
  if (v40)
  {
    v41 = v29 + 7;
    goto LABEL_46;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v62)
      goto LABEL_47;
    v40 = *(_QWORD *)(v61 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_46;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  char v4;
  uint64_t *v5;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;

  v5 = v3;
  if (!a2)
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v20 & 1) == 0)
      return result;
    v21 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v24 = v23;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
      v45 = static _DictionaryStorage.copy(original:)();
      v24 = v45;
      if (*(_QWORD *)(v23 + 16))
      {
        v46 = (void *)(v45 + 64);
        v47 = v23 + 64;
        v48 = (unint64_t)((1 << *(_BYTE *)(v24 + 32)) + 63) >> 6;
        if (v24 != v23 || (unint64_t)v46 >= v47 + 8 * v48)
          memmove(v46, (const void *)(v23 + 64), 8 * v48);
        v49 = 0;
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
        v50 = 1 << *(_BYTE *)(v23 + 32);
        v51 = -1;
        if (v50 < 64)
          v51 = ~(-1 << v50);
        v52 = v51 & *(_QWORD *)(v23 + 64);
        v53 = (unint64_t)(v50 + 63) >> 6;
        while (1)
        {
          if (v52)
          {
            v54 = __clz(__rbit64(v52));
            v52 &= v52 - 1;
            v55 = v54 | (v49 << 6);
          }
          else
          {
            v63 = v49 + 1;
            if (__OFADD__(v49, 1))
            {
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }
            if (v63 >= v53)
              break;
            v64 = *(_QWORD *)(v47 + 8 * v63);
            ++v49;
            if (!v64)
            {
              v49 = v63 + 1;
              if (v63 + 1 >= v53)
                break;
              v64 = *(_QWORD *)(v47 + 8 * v49);
              if (!v64)
              {
                v49 = v63 + 2;
                if (v63 + 2 >= v53)
                  break;
                v64 = *(_QWORD *)(v47 + 8 * v49);
                if (!v64)
                {
                  v49 = v63 + 3;
                  if (v63 + 3 >= v53)
                    break;
                  v64 = *(_QWORD *)(v47 + 8 * v49);
                  if (!v64)
                  {
                    v49 = v63 + 4;
                    if (v63 + 4 >= v53)
                      break;
                    v64 = *(_QWORD *)(v47 + 8 * v49);
                    if (!v64)
                    {
                      v65 = v63 + 5;
                      if (v65 >= v53)
                        break;
                      v64 = *(_QWORD *)(v47 + 8 * v65);
                      if (!v64)
                      {
                        while (1)
                        {
                          v49 = v65 + 1;
                          if (__OFADD__(v65, 1))
                            break;
                          if (v49 >= v53)
                            goto LABEL_77;
                          v64 = *(_QWORD *)(v47 + 8 * v49);
                          ++v65;
                          if (v64)
                            goto LABEL_76;
                        }
LABEL_80:
                        __break(1u);
                        goto LABEL_81;
                      }
                      v49 = v65;
                    }
                  }
                }
              }
            }
LABEL_76:
            v52 = (v64 - 1) & v64;
            v55 = __clz(__rbit64(v64)) + (v49 << 6);
          }
          v56 = 8 * v55;
          v57 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * v55);
          v58 = 16 * v55;
          v59 = (uint64_t *)(*(_QWORD *)(v23 + 56) + v58);
          v61 = *v59;
          v60 = v59[1];
          *(_QWORD *)(*(_QWORD *)(v24 + 48) + v56) = v57;
          v62 = (_QWORD *)(*(_QWORD *)(v24 + 56) + v58);
          *v62 = v61;
          v62[1] = v60;
          swift_bridgeObjectRetain();
        }
      }
LABEL_77:
      swift_bridgeObjectRelease();
    }
    specialized _NativeDictionary._delete(at:)(v21, v24);
    *v5 = v24;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v68 = *v3;
  v10 = *v3;
  *v3 = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v4 = v11;
    if (*(_QWORD *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, v9);
      v16 = v68;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
      if ((v4 & 1) != (v18 & 1))
        goto LABEL_82;
      v12 = v17;
      if ((v4 & 1) == 0)
        goto LABEL_46;
LABEL_13:
      v25 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 16 * v12);
      swift_bridgeObjectRelease();
      *v25 = a1;
      v25[1] = a2;
LABEL_47:
      *v5 = v16;
      return swift_bridgeObjectRelease();
    }
    if ((v9 & 1) != 0)
    {
      v16 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_13;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, (_QWORD *)v16);
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  v26 = static _DictionaryStorage.copy(original:)();
  v16 = v26;
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_13;
    goto LABEL_46;
  }
  v27 = (void *)(v26 + 64);
  v28 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v10 || (unint64_t)v27 >= v10 + 64 + 8 * v28)
    memmove(v27, (const void *)(v10 + 64), 8 * v28);
  v66 = v10 + 64;
  v29 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v10 + 16);
  v30 = 1 << *(_BYTE *)(v10 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & *(_QWORD *)(v10 + 64);
  v67 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v34 = v33 | (v29 << 6);
      goto LABEL_23;
    }
    v42 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_79;
    }
    if (v42 >= v67)
      goto LABEL_45;
    v43 = *(_QWORD *)(v66 + 8 * v42);
    ++v29;
    if (!v43)
    {
      v29 = v42 + 1;
      if (v42 + 1 >= v67)
        goto LABEL_45;
      v43 = *(_QWORD *)(v66 + 8 * v29);
      if (!v43)
      {
        v29 = v42 + 2;
        if (v42 + 2 >= v67)
          goto LABEL_45;
        v43 = *(_QWORD *)(v66 + 8 * v29);
        if (!v43)
        {
          v29 = v42 + 3;
          if (v42 + 3 >= v67)
            goto LABEL_45;
          v43 = *(_QWORD *)(v66 + 8 * v29);
          if (!v43)
          {
            v29 = v42 + 4;
            if (v42 + 4 >= v67)
              goto LABEL_45;
            v43 = *(_QWORD *)(v66 + 8 * v29);
            if (!v43)
            {
              v29 = v42 + 5;
              if (v42 + 5 >= v67)
                goto LABEL_45;
              v43 = *(_QWORD *)(v66 + 8 * v29);
              if (!v43)
                break;
            }
          }
        }
      }
    }
LABEL_44:
    v32 = (v43 - 1) & v43;
    v34 = __clz(__rbit64(v43)) + (v29 << 6);
LABEL_23:
    v35 = 8 * v34;
    v36 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v34);
    v37 = 16 * v34;
    v38 = (uint64_t *)(*(_QWORD *)(v10 + 56) + v37);
    v40 = *v38;
    v39 = v38[1];
    *(_QWORD *)(*(_QWORD *)(v16 + 48) + v35) = v36;
    v41 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v37);
    *v41 = v40;
    v41[1] = v39;
    swift_bridgeObjectRetain();
  }
  v44 = v42 + 6;
  if (v44 >= v67)
    goto LABEL_45;
  v43 = *(_QWORD *)(v66 + 8 * v44);
  if (v43)
  {
    v29 = v44;
    goto LABEL_44;
  }
  while (1)
  {
    v29 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v29 >= v67)
      goto LABEL_45;
    v43 = *(_QWORD *)(v66 + 8 * v29);
    ++v44;
    if (v43)
      goto LABEL_44;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized Dictionary.subscript.setter(uint64_t a1, char a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *result;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v4 = v3;
  if ((a2 & 1) != 0)
  {
LABEL_6:
    result = (void *)specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v19 & 1) == 0)
      return result;
    a3 = (unint64_t)result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v21 = a1;
LABEL_9:
      specialized _NativeDictionary._delete(at:)(a3, v21);
      *v4 = v21;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_15:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
    v22 = static _DictionaryStorage.copy(original:)();
    v21 = v22;
    if (*(_QWORD *)(a1 + 16))
    {
      result = (void *)(v22 + 64);
      v23 = a1 + 64;
      v24 = (unint64_t)((1 << *(_BYTE *)(v21 + 32)) + 63) >> 6;
      if (v21 != a1 || (unint64_t)result >= v23 + 8 * v24)
        result = memmove(result, (const void *)(a1 + 64), 8 * v24);
      v25 = 0;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(a1 + 16);
      v26 = 1 << *(_BYTE *)(a1 + 32);
      v27 = -1;
      if (v26 < 64)
        v27 = ~(-1 << v26);
      v28 = v27 & *(_QWORD *)(a1 + 64);
      v29 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          v31 = v30 | (v25 << 6);
        }
        else
        {
          v34 = v25 + 1;
          if (__OFADD__(v25, 1))
            goto LABEL_79;
          if (v34 >= v29)
            break;
          v35 = *(_QWORD *)(v23 + 8 * v34);
          ++v25;
          if (!v35)
          {
            v25 = v34 + 1;
            if (v34 + 1 >= v29)
              break;
            v35 = *(_QWORD *)(v23 + 8 * v25);
            if (!v35)
            {
              v25 = v34 + 2;
              if (v34 + 2 >= v29)
                break;
              v35 = *(_QWORD *)(v23 + 8 * v25);
              if (!v35)
              {
                v25 = v34 + 3;
                if (v34 + 3 >= v29)
                  break;
                v35 = *(_QWORD *)(v23 + 8 * v25);
                if (!v35)
                {
                  v25 = v34 + 4;
                  if (v34 + 4 >= v29)
                    break;
                  v35 = *(_QWORD *)(v23 + 8 * v25);
                  if (!v35)
                  {
                    v36 = v34 + 5;
                    if (v36 >= v29)
                      break;
                    v35 = *(_QWORD *)(v23 + 8 * v36);
                    if (!v35)
                    {
                      while (1)
                      {
                        v25 = v36 + 1;
                        if (__OFADD__(v36, 1))
                          goto LABEL_80;
                        if (v25 >= v29)
                          goto LABEL_73;
                        v35 = *(_QWORD *)(v23 + 8 * v25);
                        ++v36;
                        if (v35)
                          goto LABEL_42;
                      }
                    }
                    v25 = v36;
                  }
                }
              }
            }
          }
LABEL_42:
          v28 = (v35 - 1) & v35;
          v31 = __clz(__rbit64(v35)) + (v25 << 6);
        }
        v32 = 8 * v31;
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v32);
        *(_QWORD *)(*(_QWORD *)(v21 + 48) + v32) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v32);
        *(_QWORD *)(*(_QWORD *)(v21 + 56) + v32) = v33;
      }
    }
LABEL_73:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v7 = swift_isUniquelyReferenced_nonNull_native();
  v54 = *v3;
  v8 = *v3;
  *v3 = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v10 & 1) == 0;
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }
  v15 = v10;
  if (*(_QWORD *)(v8 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v7);
    v16 = v54;
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v15 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_6;
    }
LABEL_12:
    if ((v15 & 1) != 0)
    {
LABEL_13:
      *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v9) = a1;
LABEL_76:
      *v4 = v16;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_75:
    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a1, (_QWORD *)v16);
    goto LABEL_76;
  }
  if ((v7 & 1) != 0)
  {
    v16 = v8;
    goto LABEL_12;
  }
  v53 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  v37 = static _DictionaryStorage.copy(original:)();
  v16 = v37;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_74:
    swift_bridgeObjectRelease();
    v9 = v53;
    if ((v15 & 1) != 0)
      goto LABEL_13;
    goto LABEL_75;
  }
  result = (void *)(v37 + 64);
  v38 = v8 + 64;
  v39 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v8 || (unint64_t)result >= v38 + 8 * v39)
    result = memmove(result, (const void *)(v8 + 64), 8 * v39);
  v40 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v8 + 16);
  v41 = 1 << *(_BYTE *)(v8 + 32);
  v42 = -1;
  if (v41 < 64)
    v42 = ~(-1 << v41);
  v43 = v42 & *(_QWORD *)(v8 + 64);
  v44 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      v46 = v45 | (v40 << 6);
      goto LABEL_51;
    }
    v49 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    if (v49 >= v44)
      goto LABEL_74;
    v50 = *(_QWORD *)(v38 + 8 * v49);
    ++v40;
    if (!v50)
    {
      v40 = v49 + 1;
      if (v49 + 1 >= v44)
        goto LABEL_74;
      v50 = *(_QWORD *)(v38 + 8 * v40);
      if (!v50)
      {
        v40 = v49 + 2;
        if (v49 + 2 >= v44)
          goto LABEL_74;
        v50 = *(_QWORD *)(v38 + 8 * v40);
        if (!v50)
        {
          v40 = v49 + 3;
          if (v49 + 3 >= v44)
            goto LABEL_74;
          v50 = *(_QWORD *)(v38 + 8 * v40);
          if (!v50)
          {
            v40 = v49 + 4;
            if (v49 + 4 >= v44)
              goto LABEL_74;
            v50 = *(_QWORD *)(v38 + 8 * v40);
            if (!v50)
            {
              v40 = v49 + 5;
              if (v49 + 5 >= v44)
                goto LABEL_74;
              v50 = *(_QWORD *)(v38 + 8 * v40);
              if (!v50)
                break;
            }
          }
        }
      }
    }
LABEL_72:
    v43 = (v50 - 1) & v50;
    v46 = __clz(__rbit64(v50)) + (v40 << 6);
LABEL_51:
    v47 = 8 * v46;
    v48 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + v47);
    *(_QWORD *)(*(_QWORD *)(v16 + 48) + v47) = *(_QWORD *)(*(_QWORD *)(v8 + 48) + v47);
    *(_QWORD *)(*(_QWORD *)(v16 + 56) + v47) = v48;
  }
  v51 = v49 + 6;
  if (v51 >= v44)
    goto LABEL_74;
  v52 = v38;
  v50 = *(_QWORD *)(v38 + 8 * v51);
  if (v50)
  {
    v40 = v51;
    goto LABEL_72;
  }
  while (1)
  {
    v40 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v40 >= v44)
      goto LABEL_74;
    v38 = v52;
    v50 = *(_QWORD *)(v52 + 8 * v40);
    ++v51;
    if (v50)
      goto LABEL_72;
  }
LABEL_81:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *result;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v4 = v3;
  if ((a2 & 1) != 0)
  {
LABEL_6:
    result = (void *)specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v19 & 1) == 0)
      return result;
    a3 = (unint64_t)result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v21 = a1;
LABEL_9:
      specialized _NativeDictionary._delete(at:)(a3, v21);
      *v4 = v21;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_15:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
    v22 = static _DictionaryStorage.copy(original:)();
    v21 = v22;
    if (*(_QWORD *)(a1 + 16))
    {
      result = (void *)(v22 + 64);
      v23 = a1 + 64;
      v24 = (unint64_t)((1 << *(_BYTE *)(v21 + 32)) + 63) >> 6;
      if (v21 != a1 || (unint64_t)result >= v23 + 8 * v24)
        result = memmove(result, (const void *)(a1 + 64), 8 * v24);
      v25 = 0;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(a1 + 16);
      v26 = 1 << *(_BYTE *)(a1 + 32);
      v27 = -1;
      if (v26 < 64)
        v27 = ~(-1 << v26);
      v28 = v27 & *(_QWORD *)(a1 + 64);
      v29 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          v31 = v30 | (v25 << 6);
        }
        else
        {
          v33 = v25 + 1;
          if (__OFADD__(v25, 1))
            goto LABEL_79;
          if (v33 >= v29)
            break;
          v34 = *(_QWORD *)(v23 + 8 * v33);
          ++v25;
          if (!v34)
          {
            v25 = v33 + 1;
            if (v33 + 1 >= v29)
              break;
            v34 = *(_QWORD *)(v23 + 8 * v25);
            if (!v34)
            {
              v25 = v33 + 2;
              if (v33 + 2 >= v29)
                break;
              v34 = *(_QWORD *)(v23 + 8 * v25);
              if (!v34)
              {
                v25 = v33 + 3;
                if (v33 + 3 >= v29)
                  break;
                v34 = *(_QWORD *)(v23 + 8 * v25);
                if (!v34)
                {
                  v25 = v33 + 4;
                  if (v33 + 4 >= v29)
                    break;
                  v34 = *(_QWORD *)(v23 + 8 * v25);
                  if (!v34)
                  {
                    v35 = v33 + 5;
                    if (v35 >= v29)
                      break;
                    v34 = *(_QWORD *)(v23 + 8 * v35);
                    if (!v34)
                    {
                      while (1)
                      {
                        v25 = v35 + 1;
                        if (__OFADD__(v35, 1))
                          goto LABEL_80;
                        if (v25 >= v29)
                          goto LABEL_73;
                        v34 = *(_QWORD *)(v23 + 8 * v25);
                        ++v35;
                        if (v34)
                          goto LABEL_42;
                      }
                    }
                    v25 = v35;
                  }
                }
              }
            }
          }
LABEL_42:
          v28 = (v34 - 1) & v34;
          v31 = __clz(__rbit64(v34)) + (v25 << 6);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v31);
        *(_BYTE *)(*(_QWORD *)(v21 + 48) + v31) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v31);
        *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v31) = v32;
      }
    }
LABEL_73:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v7 = swift_isUniquelyReferenced_nonNull_native();
  v52 = *v3;
  v8 = *v3;
  *v3 = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v10 & 1) == 0;
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }
  v15 = v10;
  if (*(_QWORD *)(v8 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v7);
    v16 = v52;
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v15 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_6;
    }
LABEL_12:
    if ((v15 & 1) != 0)
    {
LABEL_13:
      *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v9) = a1;
LABEL_76:
      *v4 = v16;
      return (void *)swift_bridgeObjectRelease();
    }
LABEL_75:
    specialized _NativeDictionary._insert(at:key:value:)(v9, a3, a1, (_QWORD *)v16);
    goto LABEL_76;
  }
  if ((v7 & 1) != 0)
  {
    v16 = v8;
    goto LABEL_12;
  }
  v51 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
  v36 = static _DictionaryStorage.copy(original:)();
  v16 = v36;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_74:
    swift_bridgeObjectRelease();
    v9 = v51;
    if ((v15 & 1) != 0)
      goto LABEL_13;
    goto LABEL_75;
  }
  result = (void *)(v36 + 64);
  v37 = v8 + 64;
  v38 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v8 || (unint64_t)result >= v37 + 8 * v38)
    result = memmove(result, (const void *)(v8 + 64), 8 * v38);
  v39 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v8 + 16);
  v40 = 1 << *(_BYTE *)(v8 + 32);
  v41 = -1;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v42 = v41 & *(_QWORD *)(v8 + 64);
  v43 = (unint64_t)(v40 + 63) >> 6;
  while (1)
  {
    if (v42)
    {
      v44 = __clz(__rbit64(v42));
      v42 &= v42 - 1;
      v45 = v44 | (v39 << 6);
      goto LABEL_51;
    }
    v47 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    if (v47 >= v43)
      goto LABEL_74;
    v48 = *(_QWORD *)(v37 + 8 * v47);
    ++v39;
    if (!v48)
    {
      v39 = v47 + 1;
      if (v47 + 1 >= v43)
        goto LABEL_74;
      v48 = *(_QWORD *)(v37 + 8 * v39);
      if (!v48)
      {
        v39 = v47 + 2;
        if (v47 + 2 >= v43)
          goto LABEL_74;
        v48 = *(_QWORD *)(v37 + 8 * v39);
        if (!v48)
        {
          v39 = v47 + 3;
          if (v47 + 3 >= v43)
            goto LABEL_74;
          v48 = *(_QWORD *)(v37 + 8 * v39);
          if (!v48)
          {
            v39 = v47 + 4;
            if (v47 + 4 >= v43)
              goto LABEL_74;
            v48 = *(_QWORD *)(v37 + 8 * v39);
            if (!v48)
            {
              v39 = v47 + 5;
              if (v47 + 5 >= v43)
                goto LABEL_74;
              v48 = *(_QWORD *)(v37 + 8 * v39);
              if (!v48)
                break;
            }
          }
        }
      }
    }
LABEL_72:
    v42 = (v48 - 1) & v48;
    v45 = __clz(__rbit64(v48)) + (v39 << 6);
LABEL_51:
    v46 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v45);
    *(_BYTE *)(*(_QWORD *)(v16 + 48) + v45) = *(_BYTE *)(*(_QWORD *)(v8 + 48) + v45);
    *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v45) = v46;
  }
  v49 = v47 + 6;
  if (v49 >= v43)
    goto LABEL_74;
  v50 = v37;
  v48 = *(_QWORD *)(v37 + 8 * v49);
  if (v48)
  {
    v39 = v49;
    goto LABEL_72;
  }
  while (1)
  {
    v39 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v39 >= v43)
      goto LABEL_74;
    v37 = v50;
    v48 = *(_QWORD *)(v50 + 8 * v39);
    ++v49;
    if (v48)
      goto LABEL_72;
  }
LABEL_81:
  __break(1u);
  return result;
}

char *specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v8;
  char v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char *result;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  char *__src;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v5 = v4;
  if (a2 >> 60 == 15)
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = *v4;
      *v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v13 = v12;
LABEL_5:
        swift_bridgeObjectRelease();
        v14 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v8);
        v15 = *v14;
        v16 = v14[1];
        specialized _NativeDictionary._delete(at:)(v8, v13);
        *v5 = v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (char *)outlined consume of Data._Representation(v15, v16);
      }
LABEL_16:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
      v30 = static _DictionaryStorage.copy(original:)();
      v13 = v30;
      if (*(_QWORD *)(v12 + 16))
      {
        result = (char *)(v30 + 64);
        v31 = v12 + 64;
        v32 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
        if (v13 != v12 || (unint64_t)result >= v31 + 8 * v32)
          result = (char *)memmove(result, (const void *)(v12 + 64), 8 * v32);
        v33 = 0;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
        v34 = 1 << *(_BYTE *)(v12 + 32);
        v35 = -1;
        if (v34 < 64)
          v35 = ~(-1 << v34);
        v36 = v35 & *(_QWORD *)(v12 + 64);
        v37 = (unint64_t)(v34 + 63) >> 6;
        while (1)
        {
          if (v36)
          {
            v38 = __clz(__rbit64(v36));
            v36 &= v36 - 1;
            v39 = v38 | (v33 << 6);
          }
          else
          {
            v45 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_80;
            if (v45 >= v37)
              break;
            v46 = *(_QWORD *)(v31 + 8 * v45);
            ++v33;
            if (!v46)
            {
              v33 = v45 + 1;
              if (v45 + 1 >= v37)
                break;
              v46 = *(_QWORD *)(v31 + 8 * v33);
              if (!v46)
              {
                v33 = v45 + 2;
                if (v45 + 2 >= v37)
                  break;
                v46 = *(_QWORD *)(v31 + 8 * v33);
                if (!v46)
                {
                  v33 = v45 + 3;
                  if (v45 + 3 >= v37)
                    break;
                  v46 = *(_QWORD *)(v31 + 8 * v33);
                  if (!v46)
                  {
                    v33 = v45 + 4;
                    if (v45 + 4 >= v37)
                      break;
                    v46 = *(_QWORD *)(v31 + 8 * v33);
                    if (!v46)
                    {
                      v47 = v45 + 5;
                      if (v47 >= v37)
                        break;
                      v46 = *(_QWORD *)(v31 + 8 * v47);
                      if (!v46)
                      {
                        while (1)
                        {
                          v33 = v47 + 1;
                          if (__OFADD__(v47, 1))
                            goto LABEL_81;
                          if (v33 >= v37)
                            goto LABEL_74;
                          v46 = *(_QWORD *)(v31 + 8 * v33);
                          ++v47;
                          if (v46)
                            goto LABEL_43;
                        }
                      }
                      v33 = v47;
                    }
                  }
                }
              }
            }
LABEL_43:
            v36 = (v46 - 1) & v46;
            v39 = __clz(__rbit64(v46)) + (v33 << 6);
          }
          v40 = 16 * v39;
          v41 = (uint64_t *)(*(_QWORD *)(v12 + 48) + v40);
          v43 = *v41;
          v42 = v41[1];
          v67 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + v40);
          v44 = (_QWORD *)(*(_QWORD *)(v13 + 48) + v40);
          *v44 = v43;
          v44[1] = v42;
          *(_OWORD *)(*(_QWORD *)(v13 + 56) + v40) = v67;
          swift_bridgeObjectRetain();
          result = (char *)outlined copy of Data._Representation(v67, *((unint64_t *)&v67 + 1));
        }
      }
LABEL_74:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    return (char *)swift_bridgeObjectRelease();
  }
  v8 = a2;
  v12 = a1;
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v69 = *v4;
  v19 = *v4;
  *v4 = 0x8000000000000000;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v22 = *(_QWORD *)(v19 + 16);
  v23 = (v21 & 1) == 0;
  v24 = __OFADD__(v22, v23);
  v25 = v22 + v23;
  if (v24)
  {
    __break(1u);
    goto LABEL_16;
  }
  v26 = v21;
  if (*(_QWORD *)(v19 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v18);
    v27 = v69;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v26 & 1) != (v28 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return (char *)swift_bridgeObjectRelease();
    }
LABEL_13:
    if ((v26 & 1) != 0)
    {
LABEL_14:
      v29 = *(_QWORD *)(v27 + 56) + 16 * v20;
      outlined consume of Data._Representation(*(_QWORD *)v29, *(_QWORD *)(v29 + 8));
      *(_QWORD *)v29 = v12;
      *(_QWORD *)(v29 + 8) = v8;
LABEL_77:
      *v5 = v27;
      swift_bridgeObjectRelease();
      return (char *)swift_bridgeObjectRelease();
    }
LABEL_76:
    specialized _NativeDictionary._insert(at:key:value:)(v20, a3, a4, v12, v8, (_QWORD *)v27);
    swift_bridgeObjectRetain();
    goto LABEL_77;
  }
  if ((v18 & 1) != 0)
  {
    v27 = v19;
    goto LABEL_13;
  }
  v64 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v48 = static _DictionaryStorage.copy(original:)();
  v27 = v48;
  if (!*(_QWORD *)(v19 + 16))
  {
LABEL_75:
    swift_bridgeObjectRelease();
    v20 = v64;
    if ((v26 & 1) != 0)
      goto LABEL_14;
    goto LABEL_76;
  }
  result = (char *)(v48 + 64);
  __src = (char *)(v19 + 64);
  v49 = (unint64_t)((1 << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v19 || result >= &__src[8 * v49])
    result = (char *)memmove(result, __src, 8 * v49);
  v50 = 0;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v19 + 16);
  v51 = 1 << *(_BYTE *)(v19 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & *(_QWORD *)(v19 + 64);
  v65 = (unint64_t)(v51 + 63) >> 6;
  while (1)
  {
    if (v53)
    {
      v54 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      v55 = v54 | (v50 << 6);
      goto LABEL_52;
    }
    v61 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if (v61 >= v65)
      goto LABEL_75;
    v62 = *(_QWORD *)&__src[8 * v61];
    ++v50;
    if (!v62)
    {
      v50 = v61 + 1;
      if (v61 + 1 >= v65)
        goto LABEL_75;
      v62 = *(_QWORD *)&__src[8 * v50];
      if (!v62)
      {
        v50 = v61 + 2;
        if (v61 + 2 >= v65)
          goto LABEL_75;
        v62 = *(_QWORD *)&__src[8 * v50];
        if (!v62)
        {
          v50 = v61 + 3;
          if (v61 + 3 >= v65)
            goto LABEL_75;
          v62 = *(_QWORD *)&__src[8 * v50];
          if (!v62)
          {
            v50 = v61 + 4;
            if (v61 + 4 >= v65)
              goto LABEL_75;
            v62 = *(_QWORD *)&__src[8 * v50];
            if (!v62)
            {
              v50 = v61 + 5;
              if (v61 + 5 >= v65)
                goto LABEL_75;
              v62 = *(_QWORD *)&__src[8 * v50];
              if (!v62)
                break;
            }
          }
        }
      }
    }
LABEL_73:
    v53 = (v62 - 1) & v62;
    v55 = __clz(__rbit64(v62)) + (v50 << 6);
LABEL_52:
    v56 = 16 * v55;
    v57 = (uint64_t *)(*(_QWORD *)(v19 + 48) + v56);
    v59 = *v57;
    v58 = v57[1];
    v68 = *(_OWORD *)(*(_QWORD *)(v19 + 56) + v56);
    v60 = (_QWORD *)(*(_QWORD *)(v27 + 48) + v56);
    *v60 = v59;
    v60[1] = v58;
    *(_OWORD *)(*(_QWORD *)(v27 + 56) + v56) = v68;
    swift_bridgeObjectRetain();
    result = (char *)outlined copy of Data._Representation(v68, *((unint64_t *)&v68 + 1));
  }
  v63 = v61 + 6;
  if (v63 >= v65)
    goto LABEL_75;
  v62 = *(_QWORD *)&__src[8 * v63];
  if (v62)
  {
    v50 = v63;
    goto LABEL_73;
  }
  while (1)
  {
    v50 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v50 >= v65)
      goto LABEL_75;
    v62 = *(_QWORD *)&__src[8 * v50];
    ++v63;
    if (v62)
      goto LABEL_73;
  }
LABEL_82:
  __break(1u);
  return result;
}

char *specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *result;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  int64_t v84;
  char *v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  void *__src;
  char *__srca;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  _QWORD v100[10];
  char v101[8];
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;

  v4 = v3;
  outlined init with take of Morphology._CustomPronoun?(a1, (uint64_t)v100);
  v8 = v100[1];
  v10 = v100[2];
  v9 = v100[3];
  v11 = v100[4];
  v12 = v100[5];
  v13 = v100[6];
  v95 = v100[7];
  v97 = v100[0];
  v91 = v100[9];
  __src = (void *)v100[8];
  outlined init with take of Morphology._CustomPronoun?(a1, (uint64_t)v101);
  if (v102 == 1)
  {
    swift_bridgeObjectRetain();
    a2 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      return (char *)swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v17 = v9;
LABEL_5:
      swift_bridgeObjectRelease();
      specialized _NativeDictionary._delete(at:)(a2, v17);
      *v4 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (char *)swift_bridgeObjectRelease();
    }
LABEL_20:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
    v33 = static _DictionaryStorage.copy(original:)();
    v17 = v33;
    if (*(_QWORD *)(v9 + 16))
    {
      result = (char *)(v33 + 64);
      __srca = (char *)(v9 + 64);
      v34 = (unint64_t)((1 << *(_BYTE *)(v17 + 32)) + 63) >> 6;
      if (v17 != v9 || result >= &__srca[8 * v34])
        result = (char *)memmove(result, __srca, 8 * v34);
      v35 = 0;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v9 + 16);
      v36 = 1 << *(_BYTE *)(v9 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v9 + 64);
      v92 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v96 = (v38 - 1) & v38;
          v98 = v35;
          v39 = __clz(__rbit64(v38)) | (v35 << 6);
        }
        else
        {
          v54 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_81;
          if (v54 >= v92)
            break;
          v55 = *(_QWORD *)&__srca[8 * v54];
          v56 = v35 + 1;
          if (!v55)
          {
            v56 = v35 + 2;
            if (v35 + 2 >= v92)
              break;
            v55 = *(_QWORD *)&__srca[8 * v56];
            if (!v55)
            {
              v56 = v35 + 3;
              if (v35 + 3 >= v92)
                break;
              v55 = *(_QWORD *)&__srca[8 * v56];
              if (!v55)
              {
                v56 = v35 + 4;
                if (v35 + 4 >= v92)
                  break;
                v55 = *(_QWORD *)&__srca[8 * v56];
                if (!v55)
                {
                  v56 = v35 + 5;
                  if (v35 + 5 >= v92)
                    break;
                  v55 = *(_QWORD *)&__srca[8 * v56];
                  if (!v55)
                  {
                    v57 = v35 + 6;
                    if (v35 + 6 >= v92)
                      break;
                    v55 = *(_QWORD *)&__srca[8 * v57];
                    if (!v55)
                    {
                      while (1)
                      {
                        v56 = v57 + 1;
                        if (__OFADD__(v57, 1))
                          goto LABEL_82;
                        if (v56 >= v92)
                          goto LABEL_78;
                        v55 = *(_QWORD *)&__srca[8 * v56];
                        ++v57;
                        if (v55)
                          goto LABEL_47;
                      }
                    }
                    v56 = v35 + 6;
                  }
                }
              }
            }
          }
LABEL_47:
          v96 = (v55 - 1) & v55;
          v98 = v56;
          v39 = __clz(__rbit64(v55)) + (v56 << 6);
        }
        v40 = 16 * v39;
        v41 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v39);
        v42 = *v41;
        v43 = v41[1];
        v44 = 80 * v39;
        v45 = *(_QWORD *)(v9 + 56) + v44;
        v46 = *(_QWORD *)v45;
        v47 = *(_QWORD *)(v45 + 72);
        v48 = (_QWORD *)(*(_QWORD *)(v17 + 48) + v40);
        v49 = *(_OWORD *)(v45 + 8);
        v50 = *(_OWORD *)(v45 + 24);
        v51 = *(_OWORD *)(v45 + 40);
        v52 = *(_OWORD *)(v45 + 56);
        *v48 = v42;
        v48[1] = v43;
        v53 = *(_QWORD *)(v17 + 56) + v44;
        *(_QWORD *)v53 = v46;
        *(_OWORD *)(v53 + 8) = v49;
        *(_OWORD *)(v53 + 24) = v50;
        *(_OWORD *)(v53 + 40) = v51;
        *(_OWORD *)(v53 + 56) = v52;
        *(_QWORD *)(v53 + 72) = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = (char *)swift_bridgeObjectRetain();
        v38 = v96;
        v35 = v98;
      }
    }
LABEL_78:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v89 = v9;
  v90 = v12;
  v88 = v11;
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v99 = *v4;
  v19 = *v4;
  *v4 = 0x8000000000000000;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v22 = *(_QWORD *)(v19 + 16);
  v23 = (v21 & 1) == 0;
  v24 = __OFADD__(v22, v23);
  v25 = v22 + v23;
  if (v24)
  {
    __break(1u);
    goto LABEL_20;
  }
  v26 = v21;
  if (*(_QWORD *)(v19 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v18);
    v27 = v99;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v26 & 1) != (v28 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return (char *)swift_bridgeObjectRelease();
    }
    goto LABEL_13;
  }
  if ((v18 & 1) != 0)
  {
    v27 = v19;
LABEL_13:
    v30 = v88;
    v29 = v89;
    v31 = v90;
LABEL_14:
    *(_QWORD *)&v103 = v97;
    *((_QWORD *)&v103 + 1) = v8;
    v104 = v10;
    v105 = v29;
    v106 = v30;
    v107 = v31;
    v108 = v13;
    v109 = v95;
    v110 = __src;
    v111 = v91;
    if ((v26 & 1) != 0)
    {
      outlined assign with take of Morphology._CustomPronoun((uint64_t)&v103, *(_QWORD *)(v27 + 56) + 80 * v20);
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v20, a2, a3, &v103, (_QWORD *)v27);
      swift_bridgeObjectRetain();
    }
    *v4 = v27;
    swift_bridgeObjectRelease();
    return (char *)swift_bridgeObjectRelease();
  }
  v83 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
  v58 = static _DictionaryStorage.copy(original:)();
  v27 = v58;
  v31 = v90;
  if (!*(_QWORD *)(v19 + 16))
  {
LABEL_79:
    swift_bridgeObjectRelease();
    v20 = v83;
    v30 = v88;
    v29 = v89;
    goto LABEL_14;
  }
  result = (char *)(v58 + 64);
  v85 = (char *)(v19 + 64);
  v59 = (unint64_t)((1 << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v19 || result >= &v85[8 * v59])
    result = (char *)memmove(result, v85, 8 * v59);
  v60 = 0;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v19 + 16);
  v61 = 1 << *(_BYTE *)(v19 + 32);
  v62 = -1;
  if (v61 < 64)
    v62 = ~(-1 << v61);
  v63 = v62 & *(_QWORD *)(v19 + 64);
  v84 = (unint64_t)(v61 + 63) >> 6;
  while (1)
  {
    v31 = v90;
    if (v63)
    {
      v86 = (v63 - 1) & v63;
      v87 = v60;
      v64 = __clz(__rbit64(v63)) | (v60 << 6);
      goto LABEL_56;
    }
    v79 = v60 + 1;
    if (__OFADD__(v60, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v79 >= v84)
      goto LABEL_79;
    v80 = *(_QWORD *)&v85[8 * v79];
    v81 = v60 + 1;
    if (!v80)
    {
      v81 = v60 + 2;
      if (v60 + 2 >= v84)
        goto LABEL_79;
      v80 = *(_QWORD *)&v85[8 * v81];
      if (!v80)
      {
        v81 = v60 + 3;
        if (v60 + 3 >= v84)
          goto LABEL_79;
        v80 = *(_QWORD *)&v85[8 * v81];
        if (!v80)
        {
          v81 = v60 + 4;
          if (v60 + 4 >= v84)
            goto LABEL_79;
          v80 = *(_QWORD *)&v85[8 * v81];
          if (!v80)
          {
            v81 = v60 + 5;
            if (v60 + 5 >= v84)
              goto LABEL_79;
            v80 = *(_QWORD *)&v85[8 * v81];
            if (!v80)
            {
              v81 = v60 + 6;
              if (v60 + 6 >= v84)
                goto LABEL_79;
              v80 = *(_QWORD *)&v85[8 * v81];
              if (!v80)
                break;
            }
          }
        }
      }
    }
LABEL_77:
    v86 = (v80 - 1) & v80;
    v87 = v81;
    v64 = __clz(__rbit64(v80)) + (v81 << 6);
LABEL_56:
    v65 = 16 * v64;
    v66 = (uint64_t *)(*(_QWORD *)(v19 + 48) + 16 * v64);
    v67 = *v66;
    v68 = v66[1];
    v69 = 80 * v64;
    v70 = *(_QWORD *)(v19 + 56) + v69;
    v71 = *(_QWORD *)v70;
    v72 = *(_QWORD *)(v70 + 72);
    v73 = (_QWORD *)(*(_QWORD *)(v27 + 48) + v65);
    v74 = *(_OWORD *)(v70 + 8);
    v75 = *(_OWORD *)(v70 + 24);
    v76 = *(_OWORD *)(v70 + 40);
    v77 = *(_OWORD *)(v70 + 56);
    *v73 = v67;
    v73[1] = v68;
    v78 = *(_QWORD *)(v27 + 56) + v69;
    *(_QWORD *)v78 = v71;
    *(_OWORD *)(v78 + 8) = v74;
    *(_OWORD *)(v78 + 24) = v75;
    *(_OWORD *)(v78 + 40) = v76;
    *(_OWORD *)(v78 + 56) = v77;
    *(_QWORD *)(v78 + 72) = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (char *)swift_bridgeObjectRetain();
    v63 = v86;
    v60 = v87;
  }
  v82 = v60 + 7;
  if (v60 + 7 >= v84)
    goto LABEL_79;
  v80 = *(_QWORD *)&v85[8 * v82];
  if (v80)
  {
    v81 = v60 + 7;
    goto LABEL_77;
  }
  while (1)
  {
    v81 = v82 + 1;
    if (__OFADD__(v82, 1))
      break;
    v31 = v90;
    if (v81 >= v84)
      goto LABEL_79;
    v80 = *(_QWORD *)&v85[8 * v81];
    ++v82;
    if (v80)
      goto LABEL_77;
  }
LABEL_83:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;

  v6 = v4;
  if (!a2)
  {
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
      return swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v26 = v25;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v50 = static _DictionaryStorage.copy(original:)();
      v26 = v50;
      if (*(_QWORD *)(v25 + 16))
      {
        v51 = (void *)(v50 + 64);
        v52 = v25 + 64;
        v53 = (unint64_t)((1 << *(_BYTE *)(v26 + 32)) + 63) >> 6;
        if (v26 != v25 || (unint64_t)v51 >= v52 + 8 * v53)
          memmove(v51, (const void *)(v25 + 64), 8 * v53);
        v54 = 0;
        *(_QWORD *)(v26 + 16) = *(_QWORD *)(v25 + 16);
        v55 = 1 << *(_BYTE *)(v25 + 32);
        v56 = -1;
        if (v55 < 64)
          v56 = ~(-1 << v55);
        v57 = v56 & *(_QWORD *)(v25 + 64);
        v58 = (unint64_t)(v55 + 63) >> 6;
        while (1)
        {
          if (v57)
          {
            v59 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            v60 = v59 | (v54 << 6);
          }
          else
          {
            v70 = v54 + 1;
            if (__OFADD__(v54, 1))
            {
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
            if (v70 >= v58)
              break;
            v71 = *(_QWORD *)(v52 + 8 * v70);
            ++v54;
            if (!v71)
            {
              v54 = v70 + 1;
              if (v70 + 1 >= v58)
                break;
              v71 = *(_QWORD *)(v52 + 8 * v54);
              if (!v71)
              {
                v54 = v70 + 2;
                if (v70 + 2 >= v58)
                  break;
                v71 = *(_QWORD *)(v52 + 8 * v54);
                if (!v71)
                {
                  v54 = v70 + 3;
                  if (v70 + 3 >= v58)
                    break;
                  v71 = *(_QWORD *)(v52 + 8 * v54);
                  if (!v71)
                  {
                    v54 = v70 + 4;
                    if (v70 + 4 >= v58)
                      break;
                    v71 = *(_QWORD *)(v52 + 8 * v54);
                    if (!v71)
                    {
                      v72 = v70 + 5;
                      if (v72 >= v58)
                        break;
                      v71 = *(_QWORD *)(v52 + 8 * v72);
                      if (!v71)
                      {
                        while (1)
                        {
                          v54 = v72 + 1;
                          if (__OFADD__(v72, 1))
                            break;
                          if (v54 >= v58)
                            goto LABEL_79;
                          v71 = *(_QWORD *)(v52 + 8 * v54);
                          ++v72;
                          if (v71)
                            goto LABEL_78;
                        }
LABEL_82:
                        __break(1u);
                        goto LABEL_83;
                      }
                      v54 = v72;
                    }
                  }
                }
              }
            }
LABEL_78:
            v57 = (v71 - 1) & v71;
            v60 = __clz(__rbit64(v71)) + (v54 << 6);
          }
          v61 = 16 * v60;
          v62 = (uint64_t *)(*(_QWORD *)(v25 + 48) + v61);
          v64 = *v62;
          v63 = v62[1];
          v65 = (uint64_t *)(*(_QWORD *)(v25 + 56) + v61);
          v66 = *v65;
          v67 = v65[1];
          v68 = (_QWORD *)(*(_QWORD *)(v26 + 48) + v61);
          *v68 = v64;
          v68[1] = v63;
          v69 = (_QWORD *)(*(_QWORD *)(v26 + 56) + v61);
          *v69 = v66;
          v69[1] = v67;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
      }
LABEL_79:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v21, v26);
    *v6 = v26;
    swift_bridgeObjectRelease();
LABEL_49:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v11 = swift_isUniquelyReferenced_nonNull_native();
  v77 = *v4;
  v12 = *v4;
  *v4 = 0x8000000000000000;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v5 = v13;
    if (*(_QWORD *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      v18 = v77;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
      if ((v5 & 1) != (v20 & 1))
        goto LABEL_84;
      v14 = v19;
      if ((v5 & 1) == 0)
        goto LABEL_47;
LABEL_13:
      v27 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v14);
      swift_bridgeObjectRelease();
      *v27 = a1;
      v27[1] = a2;
LABEL_48:
      *v6 = v18;
      goto LABEL_49;
    }
    if ((v11 & 1) != 0)
    {
      v18 = v12;
      if ((v13 & 1) != 0)
        goto LABEL_13;
LABEL_47:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, (_QWORD *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v28 = static _DictionaryStorage.copy(original:)();
  v18 = v28;
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_13;
    goto LABEL_47;
  }
  v29 = (void *)(v28 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v29 >= v12 + 64 + 8 * v30)
    memmove(v29, (const void *)(v12 + 64), 8 * v30);
  v31 = 0;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v12 + 16);
  v32 = 1 << *(_BYTE *)(v12 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v12 + 64);
  v73 = v12 + 64;
  v74 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v75 = (v34 - 1) & v34;
      v76 = v31;
      v35 = __clz(__rbit64(v34)) | (v31 << 6);
      goto LABEL_24;
    }
    v45 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v45 >= v74)
      goto LABEL_46;
    v46 = *(_QWORD *)(v73 + 8 * v45);
    v47 = v31 + 1;
    if (!v46)
    {
      v47 = v31 + 2;
      if (v31 + 2 >= v74)
        goto LABEL_46;
      v46 = *(_QWORD *)(v73 + 8 * v47);
      if (!v46)
      {
        v47 = v31 + 3;
        if (v31 + 3 >= v74)
          goto LABEL_46;
        v46 = *(_QWORD *)(v73 + 8 * v47);
        if (!v46)
        {
          v47 = v31 + 4;
          if (v31 + 4 >= v74)
            goto LABEL_46;
          v46 = *(_QWORD *)(v73 + 8 * v47);
          if (!v46)
          {
            v47 = v31 + 5;
            if (v31 + 5 >= v74)
              goto LABEL_46;
            v46 = *(_QWORD *)(v73 + 8 * v47);
            if (!v46)
            {
              v47 = v31 + 6;
              if (v31 + 6 >= v74)
                goto LABEL_46;
              v46 = *(_QWORD *)(v73 + 8 * v47);
              if (!v46)
                break;
            }
          }
        }
      }
    }
LABEL_45:
    v75 = (v46 - 1) & v46;
    v76 = v47;
    v35 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_24:
    v36 = 16 * v35;
    v37 = (uint64_t *)(*(_QWORD *)(v12 + 48) + v36);
    v39 = *v37;
    v38 = v37[1];
    v40 = (uint64_t *)(*(_QWORD *)(v12 + 56) + v36);
    v41 = *v40;
    v42 = v40[1];
    v43 = (_QWORD *)(*(_QWORD *)(v18 + 48) + v36);
    *v43 = v39;
    v43[1] = v38;
    v44 = (_QWORD *)(*(_QWORD *)(v18 + 56) + v36);
    *v44 = v41;
    v44[1] = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = v75;
    v31 = v76;
  }
  v48 = v31 + 7;
  if (v31 + 7 >= v74)
    goto LABEL_46;
  v46 = *(_QWORD *)(v73 + 8 * v48);
  if (v46)
  {
    v47 = v31 + 7;
    goto LABEL_45;
  }
  while (1)
  {
    v47 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v47 >= v74)
      goto LABEL_46;
    v46 = *(_QWORD *)(v73 + 8 * v47);
    ++v48;
    if (v46)
      goto LABEL_45;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;

  v6 = v4;
  if (!a2)
  {
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    v23 = v22;
    result = swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
      return result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v27 = v26;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
      v50 = static _DictionaryStorage.copy(original:)();
      v27 = v50;
      if (*(_QWORD *)(v26 + 16))
      {
        v51 = (void *)(v50 + 64);
        v52 = v26 + 64;
        v53 = (unint64_t)((1 << *(_BYTE *)(v27 + 32)) + 63) >> 6;
        if (v27 != v26 || (unint64_t)v51 >= v52 + 8 * v53)
          memmove(v51, (const void *)(v26 + 64), 8 * v53);
        v54 = 0;
        *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
        v55 = 1 << *(_BYTE *)(v26 + 32);
        v56 = -1;
        if (v55 < 64)
          v56 = ~(-1 << v55);
        v57 = v56 & *(_QWORD *)(v26 + 64);
        v58 = (unint64_t)(v55 + 63) >> 6;
        while (1)
        {
          if (v57)
          {
            v59 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            v60 = v59 | (v54 << 6);
          }
          else
          {
            v70 = v54 + 1;
            if (__OFADD__(v54, 1))
            {
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }
            if (v70 >= v58)
              break;
            v71 = *(_QWORD *)(v52 + 8 * v70);
            ++v54;
            if (!v71)
            {
              v54 = v70 + 1;
              if (v70 + 1 >= v58)
                break;
              v71 = *(_QWORD *)(v52 + 8 * v54);
              if (!v71)
              {
                v54 = v70 + 2;
                if (v70 + 2 >= v58)
                  break;
                v71 = *(_QWORD *)(v52 + 8 * v54);
                if (!v71)
                {
                  v54 = v70 + 3;
                  if (v70 + 3 >= v58)
                    break;
                  v71 = *(_QWORD *)(v52 + 8 * v54);
                  if (!v71)
                  {
                    v54 = v70 + 4;
                    if (v70 + 4 >= v58)
                      break;
                    v71 = *(_QWORD *)(v52 + 8 * v54);
                    if (!v71)
                    {
                      v72 = v70 + 5;
                      if (v72 >= v58)
                        break;
                      v71 = *(_QWORD *)(v52 + 8 * v72);
                      if (!v71)
                      {
                        while (1)
                        {
                          v54 = v72 + 1;
                          if (__OFADD__(v72, 1))
                            break;
                          if (v54 >= v58)
                            goto LABEL_77;
                          v71 = *(_QWORD *)(v52 + 8 * v54);
                          ++v72;
                          if (v71)
                            goto LABEL_76;
                        }
LABEL_80:
                        __break(1u);
                        goto LABEL_81;
                      }
                      v54 = v72;
                    }
                  }
                }
              }
            }
LABEL_76:
            v57 = (v71 - 1) & v71;
            v60 = __clz(__rbit64(v71)) + (v54 << 6);
          }
          v61 = 16 * v60;
          v62 = (uint64_t *)(*(_QWORD *)(v26 + 48) + v61);
          v64 = *v62;
          v63 = v62[1];
          v65 = (uint64_t *)(*(_QWORD *)(v26 + 56) + v61);
          v66 = *v65;
          v67 = v65[1];
          v68 = (_QWORD *)(*(_QWORD *)(v27 + 48) + v61);
          *v68 = v64;
          v68[1] = v63;
          v69 = (_QWORD *)(*(_QWORD *)(v27 + 56) + v61);
          *v69 = v66;
          v69[1] = v67;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
      }
LABEL_77:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v21, v27);
    *v6 = v27;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v11 = swift_isUniquelyReferenced_nonNull_native();
  v77 = *v4;
  v12 = *v4;
  *v4 = 0x8000000000000000;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v5 = v13;
    if (*(_QWORD *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      v18 = v77;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
      if ((v5 & 1) != (v20 & 1))
        goto LABEL_82;
      v14 = v19;
      if ((v5 & 1) == 0)
        goto LABEL_46;
LABEL_13:
      v28 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v14);
      *v28 = a1;
      v28[1] = a2;
      swift_bridgeObjectRelease();
LABEL_47:
      *v6 = v18;
      return swift_bridgeObjectRelease();
    }
    if ((v11 & 1) != 0)
    {
      v18 = v12;
      if ((v13 & 1) != 0)
        goto LABEL_13;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, (_QWORD *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  v29 = static _DictionaryStorage.copy(original:)();
  v18 = v29;
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_13;
    goto LABEL_46;
  }
  v30 = (void *)(v29 + 64);
  v31 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v30 >= v12 + 64 + 8 * v31)
    memmove(v30, (const void *)(v12 + 64), 8 * v31);
  v32 = 0;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v12 + 16);
  v33 = 1 << *(_BYTE *)(v12 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & *(_QWORD *)(v12 + 64);
  v73 = v12 + 64;
  v74 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      v75 = (v35 - 1) & v35;
      v76 = v32;
      v36 = __clz(__rbit64(v35)) | (v32 << 6);
      goto LABEL_23;
    }
    v46 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_79;
    }
    if (v46 >= v74)
      goto LABEL_45;
    v47 = *(_QWORD *)(v73 + 8 * v46);
    v48 = v32 + 1;
    if (!v47)
    {
      v48 = v32 + 2;
      if (v32 + 2 >= v74)
        goto LABEL_45;
      v47 = *(_QWORD *)(v73 + 8 * v48);
      if (!v47)
      {
        v48 = v32 + 3;
        if (v32 + 3 >= v74)
          goto LABEL_45;
        v47 = *(_QWORD *)(v73 + 8 * v48);
        if (!v47)
        {
          v48 = v32 + 4;
          if (v32 + 4 >= v74)
            goto LABEL_45;
          v47 = *(_QWORD *)(v73 + 8 * v48);
          if (!v47)
          {
            v48 = v32 + 5;
            if (v32 + 5 >= v74)
              goto LABEL_45;
            v47 = *(_QWORD *)(v73 + 8 * v48);
            if (!v47)
            {
              v48 = v32 + 6;
              if (v32 + 6 >= v74)
                goto LABEL_45;
              v47 = *(_QWORD *)(v73 + 8 * v48);
              if (!v47)
                break;
            }
          }
        }
      }
    }
LABEL_44:
    v75 = (v47 - 1) & v47;
    v76 = v48;
    v36 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_23:
    v37 = 16 * v36;
    v38 = (uint64_t *)(*(_QWORD *)(v12 + 48) + v37);
    v40 = *v38;
    v39 = v38[1];
    v41 = (uint64_t *)(*(_QWORD *)(v12 + 56) + v37);
    v42 = *v41;
    v43 = v41[1];
    v44 = (_QWORD *)(*(_QWORD *)(v18 + 48) + v37);
    *v44 = v40;
    v44[1] = v39;
    v45 = (_QWORD *)(*(_QWORD *)(v18 + 56) + v37);
    *v45 = v42;
    v45[1] = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = v75;
    v32 = v76;
  }
  v49 = v32 + 7;
  if (v32 + 7 >= v74)
    goto LABEL_45;
  v47 = *(_QWORD *)(v73 + 8 * v49);
  if (v47)
  {
    v48 = v32 + 7;
    goto LABEL_44;
  }
  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v48 >= v74)
      goto LABEL_45;
    v47 = *(_QWORD *)(v73 + 8 * v48);
    ++v49;
    if (v47)
      goto LABEL_44;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = v2;
  if (!a1)
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == 0)
      return result;
    v19 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v2;
    *v2 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v21;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
      v41 = static _DictionaryStorage.copy(original:)();
      v22 = v41;
      if (*(_QWORD *)(v21 + 16))
      {
        v42 = (void *)(v41 + 64);
        v43 = v21 + 64;
        v44 = (unint64_t)((1 << *(_BYTE *)(v22 + 32)) + 63) >> 6;
        if (v22 != v21 || (unint64_t)v42 >= v43 + 8 * v44)
          memmove(v42, (const void *)(v21 + 64), 8 * v44);
        v45 = 0;
        *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
        v46 = 1 << *(_BYTE *)(v21 + 32);
        v47 = -1;
        if (v46 < 64)
          v47 = ~(-1 << v46);
        v48 = v47 & *(_QWORD *)(v21 + 64);
        v49 = (unint64_t)(v46 + 63) >> 6;
        while (1)
        {
          if (v48)
          {
            v50 = __clz(__rbit64(v48));
            v48 &= v48 - 1;
            v51 = v50 | (v45 << 6);
          }
          else
          {
            v55 = v45 + 1;
            if (__OFADD__(v45, 1))
            {
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }
            if (v55 >= v49)
              break;
            v56 = *(_QWORD *)(v43 + 8 * v55);
            ++v45;
            if (!v56)
            {
              v45 = v55 + 1;
              if (v55 + 1 >= v49)
                break;
              v56 = *(_QWORD *)(v43 + 8 * v45);
              if (!v56)
              {
                v45 = v55 + 2;
                if (v55 + 2 >= v49)
                  break;
                v56 = *(_QWORD *)(v43 + 8 * v45);
                if (!v56)
                {
                  v45 = v55 + 3;
                  if (v55 + 3 >= v49)
                    break;
                  v56 = *(_QWORD *)(v43 + 8 * v45);
                  if (!v56)
                  {
                    v45 = v55 + 4;
                    if (v55 + 4 >= v49)
                      break;
                    v56 = *(_QWORD *)(v43 + 8 * v45);
                    if (!v56)
                    {
                      v57 = v55 + 5;
                      if (v57 >= v49)
                        break;
                      v56 = *(_QWORD *)(v43 + 8 * v57);
                      if (!v56)
                      {
                        while (1)
                        {
                          v45 = v57 + 1;
                          if (__OFADD__(v57, 1))
                            break;
                          if (v45 >= v49)
                            goto LABEL_77;
                          v56 = *(_QWORD *)(v43 + 8 * v45);
                          ++v57;
                          if (v56)
                            goto LABEL_76;
                        }
LABEL_80:
                        __break(1u);
                        goto LABEL_81;
                      }
                      v45 = v57;
                    }
                  }
                }
              }
            }
LABEL_76:
            v48 = (v56 - 1) & v56;
            v51 = __clz(__rbit64(v56)) + (v45 << 6);
          }
          v52 = 8 * v51;
          v53 = *(void **)(*(_QWORD *)(v21 + 56) + v52);
          *(_QWORD *)(*(_QWORD *)(v22 + 48) + v52) = *(_QWORD *)(*(_QWORD *)(v21 + 48) + v52);
          *(_QWORD *)(*(_QWORD *)(v22 + 56) + v52) = v53;
          v54 = v53;
        }
      }
LABEL_77:
      swift_bridgeObjectRelease();
    }
    v23 = *(void **)(*(_QWORD *)(v22 + 56) + 8 * v19);
    specialized _NativeDictionary._delete(at:)(v19, v22);
    *v4 = v22;

    return swift_bridgeObjectRelease();
  }
  v7 = swift_isUniquelyReferenced_nonNull_native();
  v59 = *v2;
  v8 = *v2;
  *v2 = 0x8000000000000000;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v3 = v9;
    if (*(_QWORD *)(v8 + 24) < v13)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, v7);
      v14 = v59;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v16 & 1))
        goto LABEL_82;
      v10 = v15;
      if ((v3 & 1) == 0)
        goto LABEL_46;
LABEL_13:
      v24 = *(_QWORD *)(v14 + 56);

      *(_QWORD *)(v24 + 8 * v10) = a1;
LABEL_47:
      *v4 = v14;
      return swift_bridgeObjectRelease();
    }
    if ((v7 & 1) != 0)
    {
      v14 = v8;
      if ((v9 & 1) != 0)
        goto LABEL_13;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, (_QWORD *)v14);
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  v25 = static _DictionaryStorage.copy(original:)();
  v14 = v25;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      goto LABEL_13;
    goto LABEL_46;
  }
  v26 = (void *)(v25 + 64);
  v27 = (unint64_t)((1 << *(_BYTE *)(v14 + 32)) + 63) >> 6;
  if (v14 != v8 || (unint64_t)v26 >= v8 + 64 + 8 * v27)
    memmove(v26, (const void *)(v8 + 64), 8 * v27);
  v58 = v8 + 64;
  v28 = 0;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v8 + 16);
  v29 = 1 << *(_BYTE *)(v8 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & *(_QWORD *)(v8 + 64);
  v32 = (unint64_t)(v29 + 63) >> 6;
  while (1)
  {
    if (v31)
    {
      v33 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v34 = v33 | (v28 << 6);
      goto LABEL_23;
    }
    v38 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_79;
    }
    if (v38 >= v32)
      goto LABEL_45;
    v39 = *(_QWORD *)(v58 + 8 * v38);
    ++v28;
    if (!v39)
    {
      v28 = v38 + 1;
      if (v38 + 1 >= v32)
        goto LABEL_45;
      v39 = *(_QWORD *)(v58 + 8 * v28);
      if (!v39)
      {
        v28 = v38 + 2;
        if (v38 + 2 >= v32)
          goto LABEL_45;
        v39 = *(_QWORD *)(v58 + 8 * v28);
        if (!v39)
        {
          v28 = v38 + 3;
          if (v38 + 3 >= v32)
            goto LABEL_45;
          v39 = *(_QWORD *)(v58 + 8 * v28);
          if (!v39)
          {
            v28 = v38 + 4;
            if (v38 + 4 >= v32)
              goto LABEL_45;
            v39 = *(_QWORD *)(v58 + 8 * v28);
            if (!v39)
            {
              v28 = v38 + 5;
              if (v38 + 5 >= v32)
                goto LABEL_45;
              v39 = *(_QWORD *)(v58 + 8 * v28);
              if (!v39)
                break;
            }
          }
        }
      }
    }
LABEL_44:
    v31 = (v39 - 1) & v39;
    v34 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_23:
    v35 = 8 * v34;
    v36 = *(void **)(*(_QWORD *)(v8 + 56) + v35);
    *(_QWORD *)(*(_QWORD *)(v14 + 48) + v35) = *(_QWORD *)(*(_QWORD *)(v8 + 48) + v35);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + v35) = v36;
    v37 = v36;
  }
  v40 = v38 + 6;
  if (v40 >= v32)
    goto LABEL_45;
  v39 = *(_QWORD *)(v58 + 8 * v40);
  if (v39)
  {
    v28 = v40;
    goto LABEL_44;
  }
  while (1)
  {
    v28 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v28 >= v32)
      goto LABEL_45;
    v39 = *(_QWORD *)(v58 + 8 * v28);
    ++v40;
    if (v39)
      goto LABEL_44;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(unint64_t, uint64_t);
  _OWORD *v28;
  uint64_t result;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[2];

  v4 = v2;
  v7 = type metadata accessor for CodingUserInfoKey();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v25 = *v4;
      *v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v26 = v25;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
        v44 = static _DictionaryStorage.copy(original:)();
        v26 = v44;
        if (*(_QWORD *)(v25 + 16))
        {
          v45 = (char *)(v44 + 64);
          v46 = 1 << *(_BYTE *)(v26 + 32);
          v61 = v25 + 64;
          v47 = (unint64_t)(v46 + 63) >> 6;
          if (v26 != v25 || (unint64_t)v45 >= v61 + 8 * v47)
            memmove(v45, (const void *)v61, 8 * v47);
          *(_QWORD *)(v26 + 16) = *(_QWORD *)(v25 + 16);
          v48 = 1 << *(_BYTE *)(v25 + 32);
          v49 = -1;
          if (v48 < 64)
            v49 = ~(-1 << v48);
          v50 = v49 & *(_QWORD *)(v25 + 64);
          v62 = 0;
          v63 = v50;
          v60 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v63)
            {
              v51 = __clz(__rbit64(v63));
              v63 &= v63 - 1;
              v52 = v51 | (v62 << 6);
            }
            else
            {
              v55 = v62 + 1;
              if (__OFADD__(v62, 1))
              {
LABEL_80:
                __break(1u);
                goto LABEL_81;
              }
              if (v55 >= v60)
                break;
              v56 = *(_QWORD *)(v61 + 8 * v55);
              v57 = v62 + 1;
              if (!v56)
              {
                v57 = v62 + 2;
                if (v62 + 2 >= v60)
                  break;
                v56 = *(_QWORD *)(v61 + 8 * v57);
                if (!v56)
                {
                  v57 = v62 + 3;
                  if (v62 + 3 >= v60)
                    break;
                  v56 = *(_QWORD *)(v61 + 8 * v57);
                  if (!v56)
                  {
                    if (v62 + 4 >= v60)
                      break;
                    v57 = v62 + 4;
                    v56 = *(_QWORD *)(v61 + 8 * (v62 + 4));
                    if (!v56)
                    {
                      if (v62 + 5 >= v60)
                        break;
                      v57 = v62 + 5;
                      v56 = *(_QWORD *)(v61 + 8 * (v62 + 5));
                      if (!v56)
                      {
                        v58 = v62 + 6;
                        if (v62 + 6 >= v60)
                          break;
                        v56 = *(_QWORD *)(v61 + 8 * v58);
                        if (!v56)
                        {
                          while (1)
                          {
                            v57 = v58 + 1;
                            if (__OFADD__(v58, 1))
                              break;
                            if (v57 >= v60)
                              goto LABEL_78;
                            v56 = *(_QWORD *)(v61 + 8 * v57);
                            ++v58;
                            if (v56)
                              goto LABEL_77;
                          }
LABEL_81:
                          __break(1u);
                          goto LABEL_82;
                        }
                        v57 = v62 + 6;
                      }
                    }
                  }
                }
              }
LABEL_77:
              v62 = v57;
              v63 = (v56 - 1) & v56;
              v52 = __clz(__rbit64(v56)) + (v57 << 6);
            }
            v53 = *(_QWORD *)(v8 + 72) * v52;
            (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, *(_QWORD *)(v25 + 48) + v53, v7);
            v54 = 32 * v52;
            outlined init with copy of Any(*(_QWORD *)(v25 + 56) + v54, (uint64_t)v66);
            (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v26 + 48) + v53, v10, v7);
            outlined init with take of Any(v66, (_OWORD *)(*(_QWORD *)(v26 + 56) + v54));
          }
        }
LABEL_78:
        swift_bridgeObjectRelease();
      }
      v27 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
      v27(*(_QWORD *)(v26 + 48) + *(_QWORD *)(v8 + 72) * v21, v7);
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v26 + 56) + 32 * v21), v66);
      specialized _NativeDictionary._delete(at:)(v21, v26);
      *v4 = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v66, 0, sizeof(v66));
      v27 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
    }
    v27(a2, v7);
    return outlined destroy of Any?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v66);
  v11 = swift_isUniquelyReferenced_nonNull_native();
  v65 = *v4;
  v12 = v65;
  *v4 = 0x8000000000000000;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v3 = v13;
    if (*(_QWORD *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      v18 = v65;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v20 & 1))
        goto LABEL_83;
      v14 = v19;
      if ((v3 & 1) == 0)
        goto LABEL_48;
LABEL_13:
      v28 = (_OWORD *)(*(_QWORD *)(v18 + 56) + 32 * v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      outlined init with take of Any(v66, v28);
LABEL_49:
      *v4 = v18;
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
    }
    if ((v11 & 1) != 0)
    {
      v18 = v12;
      if ((v13 & 1) != 0)
        goto LABEL_13;
LABEL_48:
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
      specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v10, v66, (_QWORD *)v18);
      v18 = v65;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  v30 = static _DictionaryStorage.copy(original:)();
  v18 = v30;
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    v65 = v18;
    if ((v3 & 1) != 0)
      goto LABEL_13;
    goto LABEL_48;
  }
  v31 = (void *)(v30 + 64);
  v32 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v31 >= v12 + 64 + 8 * v32)
    memmove(v31, (const void *)(v12 + 64), 8 * v32);
  v33 = 0;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v12 + 16);
  v34 = 1 << *(_BYTE *)(v12 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & *(_QWORD *)(v12 + 64);
  v59 = v12 + 64;
  v60 = (unint64_t)(v34 + 63) >> 6;
  while (1)
  {
    if (v36)
    {
      v62 = (v36 - 1) & v36;
      v63 = v33;
      v37 = __clz(__rbit64(v36)) | (v33 << 6);
      goto LABEL_25;
    }
    v40 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_80;
    }
    if (v40 >= v60)
      goto LABEL_47;
    v41 = *(_QWORD *)(v59 + 8 * v40);
    v42 = v33 + 1;
    if (!v41)
    {
      v42 = v33 + 2;
      if ((uint64_t)(v33 + 2) >= v60)
        goto LABEL_47;
      v41 = *(_QWORD *)(v59 + 8 * v42);
      if (!v41)
      {
        v42 = v33 + 3;
        if ((uint64_t)(v33 + 3) >= v60)
          goto LABEL_47;
        v41 = *(_QWORD *)(v59 + 8 * v42);
        if (!v41)
        {
          v42 = v33 + 4;
          if ((uint64_t)(v33 + 4) >= v60)
            goto LABEL_47;
          v41 = *(_QWORD *)(v59 + 8 * v42);
          if (!v41)
          {
            v42 = v33 + 5;
            if ((uint64_t)(v33 + 5) >= v60)
              goto LABEL_47;
            v41 = *(_QWORD *)(v59 + 8 * v42);
            if (!v41)
            {
              v42 = v33 + 6;
              if ((uint64_t)(v33 + 6) >= v60)
                goto LABEL_47;
              v41 = *(_QWORD *)(v59 + 8 * v42);
              if (!v41)
                break;
            }
          }
        }
      }
    }
LABEL_46:
    v62 = (v41 - 1) & v41;
    v63 = v42;
    v37 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_25:
    v38 = *(_QWORD *)(v12 + 48);
    v61 = *(_QWORD *)(v8 + 72) * v37;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v38 + v61, v7);
    v39 = 32 * v37;
    outlined init with copy of Any(*(_QWORD *)(v12 + 56) + v39, (uint64_t)v64);
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v18 + 48) + v61, v10, v7);
    outlined init with take of Any(v64, (_OWORD *)(*(_QWORD *)(v18 + 56) + v39));
    v36 = v62;
    v33 = v63;
  }
  v43 = v33 + 7;
  if ((uint64_t)(v33 + 7) >= v60)
    goto LABEL_47;
  v41 = *(_QWORD *)(v59 + 8 * v43);
  if (v41)
  {
    v42 = v33 + 7;
    goto LABEL_46;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v60)
      goto LABEL_47;
    v41 = *(_QWORD *)(v59 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_46;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  BOOL v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64_t v77;
  char *v78;
  int64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v87 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v75 - v18;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v14 + 48))(a1, 1, v13, v17) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
    swift_bridgeObjectRetain();
    a2 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
    v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
      goto LABEL_12;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a4 = *v5;
    *v5 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v23 = a4;
LABEL_5:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 32))(v12, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v14 + 72) * a2, v13);
      specialized _NativeDictionary._delete(at:)(a2, v23);
      *v5 = v23;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
LABEL_12:
      swift_bridgeObjectRelease();
      return outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
    }
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
    v37 = static _DictionaryStorage.copy(original:)();
    v23 = v37;
    if (*(_QWORD *)(a4 + 16))
    {
      v86 = a3;
      v38 = (char *)(v37 + 64);
      v39 = 1 << *(_BYTE *)(v23 + 32);
      v80 = (char *)(a4 + 64);
      v40 = (unint64_t)(v39 + 63) >> 6;
      if (v23 != a4 || v38 >= &v80[8 * v40])
        memmove(v38, v80, 8 * v40);
      v41 = 0;
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(a4 + 16);
      v42 = 1 << *(_BYTE *)(a4 + 32);
      v43 = -1;
      if (v42 < 64)
        v43 = ~(-1 << v42);
      v44 = v43 & *(_QWORD *)(a4 + 64);
      v79 = (unint64_t)(v42 + 63) >> 6;
      while (1)
      {
        if (v44)
        {
          v84 = (v44 - 1) & v44;
          v85 = v41;
          v45 = __clz(__rbit64(v44)) | ((_QWORD)v41 << 6);
        }
        else
        {
          v52 = (int64_t)v41 + 1;
          if (__OFADD__(v41, 1))
            goto LABEL_81;
          if (v52 >= v79)
            break;
          v53 = *(_QWORD *)&v80[8 * v52];
          v54 = (int64_t)v41 + 1;
          if (!v53)
          {
            v54 = (int64_t)v41 + 2;
            if ((uint64_t)v41 + 2 >= v79)
              break;
            v53 = *(_QWORD *)&v80[8 * v54];
            if (!v53)
            {
              v54 = (int64_t)v41 + 3;
              if ((uint64_t)v41 + 3 >= v79)
                break;
              v53 = *(_QWORD *)&v80[8 * v54];
              if (!v53)
              {
                v54 = (int64_t)v41 + 4;
                if ((uint64_t)v41 + 4 >= v79)
                  break;
                v53 = *(_QWORD *)&v80[8 * v54];
                if (!v53)
                {
                  v55 = v23;
                  if ((uint64_t)v41 + 5 >= v79)
                    goto LABEL_79;
                  v54 = (int64_t)v41 + 5;
                  v53 = *(_QWORD *)&v80[8 * ((_QWORD)v41 + 5)];
                  if (!v53)
                  {
                    v56 = (char *)v41 + 6;
                    if ((uint64_t)v41 + 6 >= v79)
                    {
LABEL_79:
                      swift_bridgeObjectRelease();
                      v23 = v55;
                      goto LABEL_5;
                    }
                    v53 = *(_QWORD *)&v80[8 * (_QWORD)v56];
                    if (!v53)
                    {
                      while (1)
                      {
                        v54 = (int64_t)(v56 + 1);
                        if (__OFADD__(v56, 1))
                          goto LABEL_82;
                        if (v54 >= v79)
                          goto LABEL_79;
                        v53 = *(_QWORD *)&v80[8 * v54];
                        ++v56;
                        v23 = v55;
                        if (v53)
                          goto LABEL_46;
                      }
                    }
                    v54 = (int64_t)v41 + 6;
                  }
                }
              }
            }
          }
LABEL_46:
          v84 = (v53 - 1) & v53;
          v85 = (void (*)(char *, uint64_t, uint64_t))v54;
          v45 = __clz(__rbit64(v53)) + (v54 << 6);
        }
        v81 = 24 * v45;
        v46 = *(_QWORD *)(a4 + 56);
        v47 = *(_QWORD *)(a4 + 48) + 24 * v45;
        v48 = *(_QWORD *)(v47 + 8);
        v82 = *(_QWORD *)v47;
        LODWORD(v83) = *(unsigned __int8 *)(v47 + 16);
        v49 = *(_QWORD *)(v14 + 72) * v45;
        v50 = v87;
        (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v87, v46 + v49, v13);
        v51 = *(_QWORD *)(v23 + 48) + v81;
        *(_QWORD *)v51 = v82;
        *(_QWORD *)(v51 + 8) = v48;
        *(_BYTE *)(v51 + 16) = v83;
        (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v23 + 56) + v49, v50, v13);
        swift_bridgeObjectRetain();
        v44 = v84;
        v41 = v85;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v85 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
  v85(v19, a1, v13);
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v25 = a3;
  v88 = *v5;
  a3 = v88;
  *v5 = 0x8000000000000000;
  v86 = v25;
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v25, a4 & 1);
  v28 = *(_QWORD *)(a3 + 16);
  v29 = (v27 & 1) == 0;
  v30 = __OFADD__(v28, v29);
  v31 = v28 + v29;
  if (v30)
  {
    __break(1u);
    goto LABEL_19;
  }
  v32 = v27;
  if (*(_QWORD *)(a3 + 24) < v31)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, v24);
    v33 = v88;
    v34 = v86;
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v86, a4 & 1);
    if ((v32 & 1) != (v35 & 1))
      goto LABEL_84;
    if ((v32 & 1) != 0)
      goto LABEL_10;
    goto LABEL_16;
  }
  if ((v24 & 1) != 0)
  {
    v33 = a3;
    goto LABEL_15;
  }
  v76 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
  v57 = static _DictionaryStorage.copy(original:)();
  v33 = v57;
  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_77:
    swift_bridgeObjectRelease();
    v26 = v76;
LABEL_15:
    v34 = v86;
    if ((v32 & 1) != 0)
    {
LABEL_10:
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 40))(*(_QWORD *)(v33 + 56) + *(_QWORD *)(v14 + 72) * v26, v19, v13);
LABEL_17:
      *v5 = v33;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_16:
    specialized _NativeDictionary._insert(at:key:value:)(v26, a2, v34, a4 & 1, (uint64_t)v19, (_QWORD *)v33);
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  v58 = (char *)(v57 + 64);
  v59 = 1 << *(_BYTE *)(v33 + 32);
  v78 = (char *)(a3 + 64);
  v60 = (unint64_t)(v59 + 63) >> 6;
  if (v33 != a3 || v58 >= &v78[8 * v60])
    memmove(v58, v78, 8 * v60);
  v61 = 0;
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(a3 + 16);
  v62 = 1 << *(_BYTE *)(a3 + 32);
  v63 = -1;
  if (v62 < 64)
    v63 = ~(-1 << v62);
  v64 = v63 & *(_QWORD *)(a3 + 64);
  v77 = (unint64_t)(v62 + 63) >> 6;
  while (1)
  {
    if (v64)
    {
      v83 = (v64 - 1) & v64;
      v84 = v61;
      v65 = __clz(__rbit64(v64)) | (v61 << 6);
      goto LABEL_55;
    }
    v71 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v71 >= v77)
      goto LABEL_77;
    v72 = *(_QWORD *)&v78[8 * v71];
    v73 = v61 + 1;
    if (!v72)
    {
      v73 = v61 + 2;
      if (v61 + 2 >= v77)
        goto LABEL_77;
      v72 = *(_QWORD *)&v78[8 * v73];
      if (!v72)
      {
        v73 = v61 + 3;
        if (v61 + 3 >= v77)
          goto LABEL_77;
        v72 = *(_QWORD *)&v78[8 * v73];
        if (!v72)
        {
          v73 = v61 + 4;
          if (v61 + 4 >= v77)
            goto LABEL_77;
          v72 = *(_QWORD *)&v78[8 * v73];
          if (!v72)
          {
            v73 = v61 + 5;
            if (v61 + 5 >= v77)
              goto LABEL_77;
            v72 = *(_QWORD *)&v78[8 * v73];
            if (!v72)
            {
              v73 = v61 + 6;
              if (v61 + 6 >= v77)
                goto LABEL_77;
              v72 = *(_QWORD *)&v78[8 * v73];
              if (!v72)
                break;
            }
          }
        }
      }
    }
LABEL_76:
    v83 = (v72 - 1) & v72;
    v84 = v73;
    v65 = __clz(__rbit64(v72)) + (v73 << 6);
LABEL_55:
    v66 = 24 * v65;
    v67 = *(_QWORD *)(a3 + 56);
    v68 = *(_QWORD *)(a3 + 48) + 24 * v65;
    v80 = *(char **)v68;
    v79 = *(_QWORD *)(v68 + 8);
    LODWORD(v82) = *(unsigned __int8 *)(v68 + 16);
    v81 = *(_QWORD *)(v14 + 72) * v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v87, v67 + v81, v13);
    v69 = *(_QWORD *)(v33 + 48) + v66;
    v70 = v79;
    *(_QWORD *)v69 = v80;
    *(_QWORD *)(v69 + 8) = v70;
    *(_BYTE *)(v69 + 16) = v82;
    v85((char *)(*(_QWORD *)(v33 + 56) + v81), (uint64_t)v87, v13);
    swift_bridgeObjectRetain();
    v64 = v83;
    v61 = v84;
  }
  v74 = v61 + 7;
  if (v61 + 7 >= v77)
    goto LABEL_77;
  v72 = *(_QWORD *)&v78[8 * v74];
  if (v72)
  {
    v73 = v61 + 7;
    goto LABEL_76;
  }
  while (1)
  {
    v73 = v74 + 1;
    if (__OFADD__(v74, 1))
      break;
    if (v73 >= v77)
      goto LABEL_77;
    v72 = *(_QWORD *)&v78[8 * v73];
    ++v74;
    if (v72)
      goto LABEL_76;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t static CocoaError.error(_:userInfo:url:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t result;
  int64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int128 v40;
  _OWORD v41[2];
  _OWORD v42[2];
  __int128 v43;
  _OWORD v44[2];
  _OWORD v45[2];
  _OWORD v46[2];
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  uint64_t v52;

  v3 = *a1;
  v5 = *(void **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  if (!a2)
  {
    *(_QWORD *)&v46[0] = MEMORY[0x1E0DEE9E0];
    if (v5)
      goto LABEL_40;
    goto LABEL_41;
  }
  v36 = *(_QWORD *)(a3 + 8);
  v37 = *a1;
  v35 = *(_QWORD *)(a3 + 16);
  if (*(_QWORD *)(a2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v39 = a2 + 64;
  v9 = -1;
  v10 = -1 << *(_BYTE *)(a2 + 32);
  if (-v10 < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *(_QWORD *)(a2 + 64);
  v38 = (unint64_t)(63 - v10) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | (v13 << 6);
      v18 = v13;
      goto LABEL_32;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_44;
    if (v19 >= v38)
      break;
    v20 = *(_QWORD *)(v39 + 8 * v19);
    v18 = v13 + 1;
    if (!v20)
    {
      v18 = v13 + 2;
      if (v13 + 2 >= v38)
        break;
      v20 = *(_QWORD *)(v39 + 8 * v18);
      if (!v20)
      {
        v18 = v13 + 3;
        if (v13 + 3 >= v38)
          break;
        v20 = *(_QWORD *)(v39 + 8 * v18);
        if (!v20)
        {
          v18 = v13 + 4;
          if (v13 + 4 >= v38)
            break;
          v20 = *(_QWORD *)(v39 + 8 * v18);
          if (!v20)
          {
            v18 = v13 + 5;
            if (v13 + 5 >= v38)
              break;
            v20 = *(_QWORD *)(v39 + 8 * v18);
            if (!v20)
            {
              v21 = v13 + 6;
              if (v13 + 6 >= v38)
                break;
              v20 = *(_QWORD *)(v39 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  v18 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_45;
                  if (v18 >= v38)
                    goto LABEL_38;
                  v20 = *(_QWORD *)(v39 + 8 * v18);
                  ++v21;
                  if (v20)
                    goto LABEL_31;
                }
              }
              v18 = v13 + 6;
            }
          }
        }
      }
    }
LABEL_31:
    v16 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v18 << 6);
LABEL_32:
    outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v17, (uint64_t)&v49);
    outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v17, (uint64_t)v51 + 8);
    v47[0] = v51[0];
    v47[1] = v51[1];
    v48 = v52;
    v46[0] = v49;
    v46[1] = v50;
    outlined init with copy of AnyHashable((uint64_t)v46, (uint64_t)v41);
    if (!swift_dynamicCast())
    {
      outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_39;
    }
    outlined init with copy of Any((uint64_t)v47 + 8, (uint64_t)v41);
    outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v41, v42);
    v43 = v40;
    outlined init with take of Any(v42, v44);
    v22 = v43;
    outlined init with take of Any(v44, v45);
    outlined init with take of Any(v45, &v43);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v22, *((uint64_t *)&v22 + 1));
    v23 = result;
    if ((v24 & 1) != 0)
    {
      v14 = (_OWORD *)(v8[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v14 = v22;
      v15 = (_OWORD *)(v8[7] + 32 * v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      result = (unint64_t)outlined init with take of Any(&v43, v15);
    }
    else
    {
      if (v8[2] >= v8[3])
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }
      *(_QWORD *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_OWORD *)(v8[6] + 16 * result) = v22;
      result = (unint64_t)outlined init with take of Any(&v43, (_OWORD *)(v8[7] + 32 * result));
      v25 = v8[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_43;
      v8[2] = v27;
    }
    v13 = v18;
    v11 = v16;
  }
LABEL_38:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_39:
  v4 = v36;
  v3 = v37;
  v6 = v35;
  *(_QWORD *)&v46[0] = v8;
  if (!v5)
    goto LABEL_41;
LABEL_40:
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v30 = v29;
  *(_QWORD *)&v49 = v5;
  *((_QWORD *)&v49 + 1) = v4;
  *(_QWORD *)&v50 = v6;
  *((_QWORD *)&v50 + 1) = &type metadata for URL;
  swift_retain();
  v31 = v5;
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v49, (uint64_t)v28, v30);
LABEL_41:
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v32 = objc_allocWithZone((Class)NSError);
  v33 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, v3, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (unint64_t)v34;
}

Foundation::CocoaError::Code __swiftcall CocoaError.Code.init(rawValue:)(Foundation::CocoaError::Code rawValue)
{
  Foundation::CocoaError::Code *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t LocalizedError.errorDescription.getter()
{
  return 0;
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return 0;
}

id CocoaError._nsError.getter()
{
  id *v0;

  return *v0;
}

void __swiftcall CocoaError.init(_nsError:)(Foundation::CocoaError *__return_ptr retstr, NSError *_nsError)
{
  NSString *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = -[NSError domain](_nsError, sel_domain);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v7 == v8)
    goto LABEL_7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.isa = (Class)_nsError;
}

id static CocoaError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
}

uint64_t CocoaError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance CocoaError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  char v21;
  _QWORD v23[2];
  uint64_t v24;
  void *v25;

  v5 = *(_QWORD *)(a3 - 8);
  v23[1] = a1;
  v24 = v5;
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v23 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v23 - v15;
  v25 = a2;
  v17 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v18)
  {
    v19(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    _BridgedStoredNSError.code.getter(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v7);
    v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, a3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  }
  else
  {
    v19(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t CocoaError.Code.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CocoaError.filePath.getter()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  __CFString *v58;
  unint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  int64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD v71[2];
  _OWORD v72[3];
  _OWORD v73[2];
  __int128 v74;
  _OWORD v75[2];

  v1 = *v0;
  v2 = *v0;
  v61 = v1;
  v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v3)
  {
    swift_unknownObjectRetain();
    v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4)
    {
      v5 = v4;
      goto LABEL_23;
    }
    v7 = objc_msgSend(v3, sel_count);
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v5 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9E0];
    }
    v8 = *(_QWORD **)(v5 + 48);
    v9 = *(_QWORD *)(v5 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, (uint64_t)v7);
    if (result < 0 || (uint64_t)v7 < result)
      goto LABEL_71;
    *(_QWORD *)(v5 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v5 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v11 = result - 1;
    v12 = v5 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v12 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          goto LABEL_14;
        v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v18 = *v17;
        v19 = v17[1];
        swift_bridgeObjectRetain();
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v23 = *(_QWORD *)(v5 + 16);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v24)
        {
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v5 + 16) = v25;
LABEL_14:
        if (--v11 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v13 = *(_QWORD *)(v5 + 56);
        v14 = (_OWORD *)(v13 + 32 * v11);
        v15 = v14[1];
        v16 = (_OWORD *)(v13 + 32 * v20);
        *v16 = *v14;
        v16[1] = v15;
        goto LABEL_14;
      }
      if (v20 == v11)
        goto LABEL_14;
      v26 = *(_QWORD *)(v5 + 48);
      v27 = (uint64_t *)(v26 + 16 * v20);
      v28 = (uint64_t *)(v26 + 16 * v11);
      v29 = *v27;
      v30 = v27[1];
      v31 = v28[1];
      *v27 = *v28;
      v27[1] = v31;
      *v28 = v29;
      v28[1] = v30;
      v32 = *(_QWORD *)(v5 + 56);
      v33 = (_OWORD *)(v32 + 32 * v20);
      v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v68);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v68, v34);
      if (v11 < 0)
        goto LABEL_22;
    }
  }
  v5 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v6 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v62 = v5 + 64;
  v35 = -1 << *(_BYTE *)(v5 + 32);
  if (-v35 < 64)
    v36 = ~(-1 << -(char)v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(v5 + 64);
  v63 = (unint64_t)(63 - v35) >> 6;
  v38 = v6 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v39 = 0;
  while (1)
  {
    if (v37)
    {
      v42 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v43 = v42 | (v39 << 6);
      goto LABEL_49;
    }
    v44 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v44 >= v63)
      goto LABEL_58;
    v45 = *(_QWORD *)(v62 + 8 * v44);
    v46 = v39 + 1;
    if (!v45)
    {
      v46 = v39 + 2;
      if (v39 + 2 >= v63)
        goto LABEL_58;
      v45 = *(_QWORD *)(v62 + 8 * v46);
      if (!v45)
      {
        v46 = v39 + 3;
        if (v39 + 3 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        if (!v45)
        {
          v46 = v39 + 4;
          if (v39 + 4 >= v63)
            goto LABEL_58;
          v45 = *(_QWORD *)(v62 + 8 * v46);
          if (!v45)
            break;
        }
      }
    }
LABEL_48:
    v37 = (v45 - 1) & v45;
    v43 = __clz(__rbit64(v45)) + (v46 << 6);
    v39 = v46;
LABEL_49:
    v48 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v43);
    v50 = *v48;
    v49 = v48[1];
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v43, (uint64_t)v75);
    *(_QWORD *)&v74 = v50;
    *((_QWORD *)&v74 + 1) = v49;
    v72[2] = v74;
    v73[0] = v75[0];
    v73[1] = v75[1];
    *(_QWORD *)&v72[0] = v50;
    *((_QWORD *)&v72[0] + 1) = v49;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v73, v67);
    v68 = v64;
    v69 = v65;
    v70 = v66;
    outlined init with take of Any(v67, v71);
    v64 = v68;
    v65 = v69;
    v66 = v70;
    outlined init with take of Any(v71, v72);
    outlined init with take of Any(v72, &v68);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v51 = -1 << *(_BYTE *)(v6 + 32);
    v52 = result & ~v51;
    v53 = v52 >> 6;
    if (((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6))) != 0)
    {
      v40 = __clz(__rbit64((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v54 = 0;
      v55 = (unint64_t)(63 - v51) >> 6;
      do
      {
        if (++v53 == v55 && (v54 & 1) != 0)
        {
          __break(1u);
          goto LABEL_68;
        }
        v56 = v53 == v55;
        if (v53 == v55)
          v53 = 0;
        v54 |= v56;
        v57 = *(_QWORD *)(v38 + 8 * v53);
      }
      while (v57 == -1);
      v40 = __clz(__rbit64(~v57)) + (v53 << 6);
    }
    *(_QWORD *)(v38 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    v41 = *(_QWORD *)(v6 + 48) + 40 * v40;
    *(_OWORD *)v41 = v64;
    *(_OWORD *)(v41 + 16) = v65;
    *(_QWORD *)(v41 + 32) = v66;
    result = (uint64_t)outlined init with take of Any(&v68, (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v40));
    ++*(_QWORD *)(v6 + 16);
  }
  v47 = v39 + 5;
  if (v39 + 5 < v63)
  {
    v45 = *(_QWORD *)(v62 + 8 * v47);
    if (!v45)
    {
      while (1)
      {
        v46 = v47 + 1;
        if (__OFADD__(v47, 1))
          goto LABEL_69;
        if (v46 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        ++v47;
        if (v45)
          goto LABEL_48;
      }
    }
    v46 = v39 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(_QWORD *)&v64 = CFSTR("NSFilePath");
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v58 = CFSTR("NSFilePath");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16))
  {
    v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v68);
    if ((v60 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v59, (uint64_t)&v64);
    }
    else
    {
      v64 = 0u;
      v65 = 0u;
    }
  }
  else
  {
    v64 = 0u;
    v65 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v68);
  if (*((_QWORD *)&v65 + 1))
  {
    if (swift_dynamicCast())
      return v74;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

void CocoaError.stringEncoding.getter(uint64_t a1@<X8>)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  __CFString *v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  id v65;
  uint64_t v66;
  int64_t v67;
  id v68[2];
  __int128 v69;
  uint64_t v70;
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[2];
  _OWORD v76[3];
  _OWORD v77[2];
  __int128 v78;
  _OWORD v79[2];
  __int128 v80;
  __int128 v81;

  v2 = *v1;
  v3 = *v1;
  v65 = v2;
  v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v4)
  {
    swift_unknownObjectRetain();
    v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v5)
    {
      v6 = v5;
      goto LABEL_23;
    }
    v8 = objc_msgSend(v4, sel_count);
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v6 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v6 = MEMORY[0x1E0DEE9E0];
    }
    v9 = *(_QWORD **)(v6 + 48);
    v10 = *(_QWORD *)(v6 + 56);
    swift_retain();
    v11 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, (uint64_t)v8);
    if (v11 < 0 || (uint64_t)v8 < v11)
      goto LABEL_72;
    *(_QWORD *)(v6 + 16) = v11;
    if (!v11)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v6 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v12 = v11 - 1;
    v13 = v6 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v13 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          goto LABEL_14;
        v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v19 = *v18;
        v20 = v18[1];
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
          break;
        swift_arrayDestroy();
        swift_arrayDestroy();
        v24 = *(_QWORD *)(v6 + 16);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v25)
        {
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          return;
        }
        *(_QWORD *)(v6 + 16) = v26;
LABEL_14:
        if (--v12 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v14 = *(_QWORD *)(v6 + 56);
        v15 = (_OWORD *)(v14 + 32 * v12);
        v16 = v15[1];
        v17 = (_OWORD *)(v14 + 32 * v21);
        *v17 = *v15;
        v17[1] = v16;
        goto LABEL_14;
      }
      if (v21 == v12)
        goto LABEL_14;
      v27 = *(_QWORD *)(v6 + 48);
      v28 = (uint64_t *)(v27 + 16 * v21);
      v29 = (uint64_t *)(v27 + 16 * v12);
      v30 = *v28;
      v31 = v28[1];
      v32 = v29[1];
      *v28 = *v29;
      v28[1] = v32;
      *v29 = v30;
      v29[1] = v31;
      v33 = *(_QWORD *)(v6 + 56);
      v34 = (_OWORD *)(v33 + 32 * v21);
      v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v72);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v72, v35);
      if (v12 < 0)
        goto LABEL_22;
    }
  }
  v6 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v7 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v7 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v66 = v6 + 64;
  v36 = -1 << *(_BYTE *)(v6 + 32);
  if (-v36 < 64)
    v37 = ~(-1 << -(char)v36);
  else
    v37 = -1;
  v38 = v37 & *(_QWORD *)(v6 + 64);
  v67 = (unint64_t)(63 - v36) >> 6;
  v39 = v7 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v40 = 0;
  while (1)
  {
    if (v38)
    {
      v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v44 = v43 | (v40 << 6);
      goto LABEL_49;
    }
    v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v45 >= v67)
      goto LABEL_58;
    v46 = *(_QWORD *)(v66 + 8 * v45);
    v47 = v40 + 1;
    if (!v46)
    {
      v47 = v40 + 2;
      if (v40 + 2 >= v67)
        goto LABEL_58;
      v46 = *(_QWORD *)(v66 + 8 * v47);
      if (!v46)
      {
        v47 = v40 + 3;
        if (v40 + 3 >= v67)
          goto LABEL_58;
        v46 = *(_QWORD *)(v66 + 8 * v47);
        if (!v46)
        {
          v47 = v40 + 4;
          if (v40 + 4 >= v67)
            goto LABEL_58;
          v46 = *(_QWORD *)(v66 + 8 * v47);
          if (!v46)
            break;
        }
      }
    }
LABEL_48:
    v38 = (v46 - 1) & v46;
    v44 = __clz(__rbit64(v46)) + (v47 << 6);
    v40 = v47;
LABEL_49:
    v49 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v44);
    v51 = *v49;
    v50 = v49[1];
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v44, (uint64_t)v79);
    *(_QWORD *)&v78 = v51;
    *((_QWORD *)&v78 + 1) = v50;
    v76[2] = v78;
    v77[0] = v79[0];
    v77[1] = v79[1];
    *(_QWORD *)&v76[0] = v51;
    *((_QWORD *)&v76[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v77, v71);
    v72 = *(_OWORD *)v68;
    v73 = v69;
    v74 = v70;
    outlined init with take of Any(v71, v75);
    *(_OWORD *)v68 = v72;
    v69 = v73;
    v70 = v74;
    outlined init with take of Any(v75, v76);
    outlined init with take of Any(v76, &v72);
    v52 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v53 = -1 << *(_BYTE *)(v7 + 32);
    v54 = v52 & ~v53;
    v55 = v54 >> 6;
    if (((-1 << v54) & ~*(_QWORD *)(v39 + 8 * (v54 >> 6))) != 0)
    {
      v41 = __clz(__rbit64((-1 << v54) & ~*(_QWORD *)(v39 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v56 = 0;
      v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_69;
        }
        v58 = v55 == v57;
        if (v55 == v57)
          v55 = 0;
        v56 |= v58;
        v59 = *(_QWORD *)(v39 + 8 * v55);
      }
      while (v59 == -1);
      v41 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(_QWORD *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v42 = *(_QWORD *)(v7 + 48) + 40 * v41;
    *(_OWORD *)v42 = *(_OWORD *)v68;
    *(_OWORD *)(v42 + 16) = v69;
    *(_QWORD *)(v42 + 32) = v70;
    outlined init with take of Any(&v72, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v41));
    ++*(_QWORD *)(v7 + 16);
  }
  v48 = v40 + 5;
  if (v40 + 5 < v67)
  {
    v46 = *(_QWORD *)(v66 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        v47 = v48 + 1;
        if (__OFADD__(v48, 1))
          goto LABEL_70;
        if (v47 >= v67)
          goto LABEL_58;
        v46 = *(_QWORD *)(v66 + 8 * v47);
        ++v48;
        if (v46)
          goto LABEL_48;
      }
    }
    v47 = v40 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v60 = CFSTR("NSStringEncoding");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v7 + 16))
  {
    v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v72);
    if ((v62 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v61, (uint64_t)&v80);
    }
    else
    {
      v80 = 0u;
      v81 = 0u;
    }
    v63 = a1;
  }
  else
  {
    v80 = 0u;
    v81 = 0u;
    v63 = a1;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v72);
  if (*((_QWORD *)&v81 + 1))
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(_QWORD *)v63 = objc_msgSend(CFSTR("NSStringEncoding"), sel_unsignedIntegerValue);
      *(_BYTE *)(v63 + 8) = 0;

      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v80, &demangling cache variable for type metadata for Any?);
  }
  *(_QWORD *)v63 = 0;
  *(_BYTE *)(v63 + 8) = 1;
}

uint64_t CocoaError.underlying.getter()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  __CFString *v58;
  unint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  int64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD v71[2];
  _OWORD v72[3];
  _OWORD v73[2];
  __int128 v74;
  _OWORD v75[2];

  v1 = *v0;
  v2 = *v0;
  v61 = v1;
  v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v3)
  {
    swift_unknownObjectRetain();
    v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4)
    {
      v5 = v4;
      goto LABEL_23;
    }
    v7 = objc_msgSend(v3, sel_count);
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v5 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9E0];
    }
    v8 = *(_QWORD **)(v5 + 48);
    v9 = *(_QWORD *)(v5 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, (uint64_t)v7);
    if (result < 0 || (uint64_t)v7 < result)
      goto LABEL_71;
    *(_QWORD *)(v5 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v5 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v11 = result - 1;
    v12 = v5 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v12 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          goto LABEL_14;
        v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v18 = *v17;
        v19 = v17[1];
        swift_bridgeObjectRetain();
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v23 = *(_QWORD *)(v5 + 16);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v24)
        {
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v5 + 16) = v25;
LABEL_14:
        if (--v11 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v13 = *(_QWORD *)(v5 + 56);
        v14 = (_OWORD *)(v13 + 32 * v11);
        v15 = v14[1];
        v16 = (_OWORD *)(v13 + 32 * v20);
        *v16 = *v14;
        v16[1] = v15;
        goto LABEL_14;
      }
      if (v20 == v11)
        goto LABEL_14;
      v26 = *(_QWORD *)(v5 + 48);
      v27 = (uint64_t *)(v26 + 16 * v20);
      v28 = (uint64_t *)(v26 + 16 * v11);
      v29 = *v27;
      v30 = v27[1];
      v31 = v28[1];
      *v27 = *v28;
      v27[1] = v31;
      *v28 = v29;
      v28[1] = v30;
      v32 = *(_QWORD *)(v5 + 56);
      v33 = (_OWORD *)(v32 + 32 * v20);
      v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v68);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v68, v34);
      if (v11 < 0)
        goto LABEL_22;
    }
  }
  v5 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v6 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v62 = v5 + 64;
  v35 = -1 << *(_BYTE *)(v5 + 32);
  if (-v35 < 64)
    v36 = ~(-1 << -(char)v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(v5 + 64);
  v63 = (unint64_t)(63 - v35) >> 6;
  v38 = v6 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v39 = 0;
  while (1)
  {
    if (v37)
    {
      v42 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v43 = v42 | (v39 << 6);
      goto LABEL_49;
    }
    v44 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v44 >= v63)
      goto LABEL_58;
    v45 = *(_QWORD *)(v62 + 8 * v44);
    v46 = v39 + 1;
    if (!v45)
    {
      v46 = v39 + 2;
      if (v39 + 2 >= v63)
        goto LABEL_58;
      v45 = *(_QWORD *)(v62 + 8 * v46);
      if (!v45)
      {
        v46 = v39 + 3;
        if (v39 + 3 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        if (!v45)
        {
          v46 = v39 + 4;
          if (v39 + 4 >= v63)
            goto LABEL_58;
          v45 = *(_QWORD *)(v62 + 8 * v46);
          if (!v45)
            break;
        }
      }
    }
LABEL_48:
    v37 = (v45 - 1) & v45;
    v43 = __clz(__rbit64(v45)) + (v46 << 6);
    v39 = v46;
LABEL_49:
    v48 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v43);
    v50 = *v48;
    v49 = v48[1];
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v43, (uint64_t)v75);
    *(_QWORD *)&v74 = v50;
    *((_QWORD *)&v74 + 1) = v49;
    v72[2] = v74;
    v73[0] = v75[0];
    v73[1] = v75[1];
    *(_QWORD *)&v72[0] = v50;
    *((_QWORD *)&v72[0] + 1) = v49;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v73, v67);
    v68 = v64;
    v69 = v65;
    v70 = v66;
    outlined init with take of Any(v67, v71);
    v64 = v68;
    v65 = v69;
    v66 = v70;
    outlined init with take of Any(v71, v72);
    outlined init with take of Any(v72, &v68);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v51 = -1 << *(_BYTE *)(v6 + 32);
    v52 = result & ~v51;
    v53 = v52 >> 6;
    if (((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6))) != 0)
    {
      v40 = __clz(__rbit64((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v54 = 0;
      v55 = (unint64_t)(63 - v51) >> 6;
      do
      {
        if (++v53 == v55 && (v54 & 1) != 0)
        {
          __break(1u);
          goto LABEL_68;
        }
        v56 = v53 == v55;
        if (v53 == v55)
          v53 = 0;
        v54 |= v56;
        v57 = *(_QWORD *)(v38 + 8 * v53);
      }
      while (v57 == -1);
      v40 = __clz(__rbit64(~v57)) + (v53 << 6);
    }
    *(_QWORD *)(v38 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    v41 = *(_QWORD *)(v6 + 48) + 40 * v40;
    *(_OWORD *)v41 = v64;
    *(_OWORD *)(v41 + 16) = v65;
    *(_QWORD *)(v41 + 32) = v66;
    result = (uint64_t)outlined init with take of Any(&v68, (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v40));
    ++*(_QWORD *)(v6 + 16);
  }
  v47 = v39 + 5;
  if (v39 + 5 < v63)
  {
    v45 = *(_QWORD *)(v62 + 8 * v47);
    if (!v45)
    {
      while (1)
      {
        v46 = v47 + 1;
        if (__OFADD__(v47, 1))
          goto LABEL_69;
        if (v46 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        ++v47;
        if (v45)
          goto LABEL_48;
      }
    }
    v46 = v39 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(_QWORD *)&v64 = CFSTR("NSUnderlyingError");
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v58 = CFSTR("NSUnderlyingError");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16))
  {
    v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v68);
    if ((v60 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v59, (uint64_t)&v64);
    }
    else
    {
      v64 = 0u;
      v65 = 0u;
    }
  }
  else
  {
    v64 = 0u;
    v65 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v68);
  if (*((_QWORD *)&v65 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
      return v74;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

int64_t CocoaError.underlyingErrors.getter()
{
  void **v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t result;
  int64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  __CFString *v59;
  unint64_t v60;
  char v61;
  id v62;
  unint64_t v63;
  unint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t *v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int64_t v100;
  unint64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  BOOL v113;
  uint64_t v114;
  void *v115;
  id v116;
  unint64_t v117;
  char v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  _OWORD *v127;
  __int128 v128;
  uint64_t *v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int64_t v152;
  unint64_t v153;
  int64_t v154;
  int64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  Swift::Int v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  BOOL v165;
  uint64_t v166;
  void *v167;
  id v168;
  unint64_t v169;
  char v170;
  id v171;
  int64_t v172;
  int64_t v173;
  int64_t v174;
  _OWORD *v175;
  uint64_t v176;
  uint64_t v177;
  id v178[2];
  __int128 v179;
  uint64_t v180;
  _OWORD v181[2];
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  _OWORD v185[2];
  _OWORD v186[2];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  unint64_t v195;

  v1 = *v0;
  v195 = MEMORY[0x1E0DEE9D8];
  v2 = v1;
  v3 = v1;
  v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  v171 = v3;
  if (v4)
  {
    swift_unknownObjectRetain();
    v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v5)
    {
      v6 = (_OWORD *)v5;
      goto LABEL_23;
    }
    v9 = objc_msgSend(v4, sel_count);
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v6 = (_OWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v6 = (_OWORD *)MEMORY[0x1E0DEE9E0];
    }
    v10 = (_QWORD *)*((_QWORD *)v6 + 6);
    v11 = *((_QWORD *)v6 + 7);
    swift_retain();
    result = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v10, v11, v4, (uint64_t)v9);
    if (result < 0 || (uint64_t)v9 < result)
    {
      __break(1u);
      goto LABEL_213;
    }
    *((_QWORD *)v6 + 2) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      v7 = *((_QWORD *)v6 + 2);
      if (v7)
        goto LABEL_24;
      goto LABEL_5;
    }
    v13 = result - 1;
    v14 = v6 + 4;
    while (1)
    {
      if (((*(_QWORD *)((char *)v14 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
        goto LABEL_14;
      v19 = (uint64_t *)(*((_QWORD *)v6 + 6) + 16 * v13);
      v20 = *v19;
      v21 = v19[1];
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v24 = *((_QWORD *)v6 + 2);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v25)
          goto LABEL_208;
        *((_QWORD *)v6 + 2) = v26;
        goto LABEL_14;
      }
      *(_QWORD *)((char *)v14 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
      if (v13 < (uint64_t)v7)
      {
        *(_OWORD *)(*((_QWORD *)v6 + 6) + 16 * v7) = *(_OWORD *)(*((_QWORD *)v6 + 6) + 16 * v13);
        v15 = *((_QWORD *)v6 + 7);
        v16 = (_OWORD *)(v15 + 32 * v13);
        v17 = v16[1];
        v18 = (_OWORD *)(v15 + 32 * v7);
        *v18 = *v16;
        v18[1] = v17;
LABEL_14:
        if (--v13 < 0)
          goto LABEL_22;
      }
      else
      {
        if (v7 == v13)
          goto LABEL_14;
        v27 = *((_QWORD *)v6 + 6);
        v28 = (uint64_t *)(v27 + 16 * v7);
        v29 = (uint64_t *)(v27 + 16 * v13);
        v30 = *v28;
        v31 = v28[1];
        v32 = v29[1];
        *v28 = *v29;
        v28[1] = v32;
        *v29 = v30;
        v29[1] = v31;
        v33 = *((_QWORD *)v6 + 7);
        v34 = (_OWORD *)(v33 + 32 * v7);
        v35 = (_OWORD *)(v33 + 32 * v13);
        outlined init with take of Any(v34, &v182);
        outlined init with take of Any(v35, v34);
        outlined init with take of Any(&v182, v35);
        if (v13 < 0)
          goto LABEL_22;
      }
    }
  }
  v6 = (_OWORD *)MEMORY[0x1E0DEE9E0];
  v7 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16);
  if (v7)
  {
LABEL_24:
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v8 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v8 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v175 = v6 + 4;
  v36 = -1 << *((_BYTE *)v6 + 32);
  if (-v36 < 64)
    v37 = ~(-1 << -(char)v36);
  else
    v37 = -1;
  v38 = v37 & v6[4];
  v172 = (unint64_t)(63 - v36) >> 6;
  v39 = (_QWORD *)(v8 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  v21 = 0;
  while (v38)
  {
    v42 = __clz(__rbit64(v38));
    v38 &= v38 - 1;
    v43 = v42 | (v21 << 6);
LABEL_49:
    v48 = (uint64_t *)(*((_QWORD *)v6 + 6) + 16 * v43);
    v50 = *v48;
    v49 = v48[1];
    outlined init with copy of Any(*((_QWORD *)v6 + 7) + 32 * v43, (uint64_t)&v191);
    *(_QWORD *)&v190 = v50;
    *((_QWORD *)&v190 + 1) = v49;
    v187 = v190;
    v188 = v191;
    v189 = v192;
    *(_QWORD *)&v186[0] = v50;
    *((_QWORD *)&v186[0] + 1) = v49;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(&v188, v181);
    v182 = *(_OWORD *)v178;
    v183 = v179;
    v184 = v180;
    outlined init with take of Any(v181, v185);
    *(_OWORD *)v178 = v182;
    v179 = v183;
    v180 = v184;
    outlined init with take of Any(v185, v186);
    outlined init with take of Any(v186, &v182);
    v7 = (unint64_t)v178;
    v51 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v52 = -1 << *(_BYTE *)(v8 + 32);
    v53 = v51 & ~v52;
    v54 = v53 >> 6;
    if (((-1 << v53) & ~v39[v53 >> 6]) != 0)
    {
      v40 = __clz(__rbit64((-1 << v53) & ~v39[v53 >> 6])) | v53 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_30;
    }
    v55 = 0;
    v56 = (unint64_t)(63 - v52) >> 6;
    do
    {
      if (++v54 == v56 && (v55 & 1) != 0)
      {
        __break(1u);
        goto LABEL_76;
      }
      v57 = v54 == v56;
      if (v54 == v56)
        v54 = 0;
      v55 |= v57;
      v58 = v39[v54];
    }
    while (v58 == -1);
    v40 = __clz(__rbit64(~v58)) + (v54 << 6);
LABEL_30:
    *(_QWORD *)((char *)v39 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    v41 = *(_QWORD *)(v8 + 48) + 40 * v40;
    *(_OWORD *)v41 = *(_OWORD *)v178;
    *(_OWORD *)(v41 + 16) = v179;
    *(_QWORD *)(v41 + 32) = v180;
    outlined init with take of Any(&v182, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v40));
    ++*(_QWORD *)(v8 + 16);
  }
  v44 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
    goto LABEL_205;
  }
  if (v44 >= v172)
    goto LABEL_58;
  v45 = *((_QWORD *)v175 + v44);
  v46 = v21 + 1;
  if (v45)
    goto LABEL_48;
  v46 = v21 + 2;
  if (v21 + 2 >= v172)
    goto LABEL_58;
  v45 = *((_QWORD *)v175 + v46);
  if (v45)
    goto LABEL_48;
  v46 = v21 + 3;
  if (v21 + 3 >= v172)
    goto LABEL_58;
  v45 = *((_QWORD *)v175 + v46);
  if (v45)
    goto LABEL_48;
  v46 = v21 + 4;
  if (v21 + 4 >= v172)
    goto LABEL_58;
  v45 = *((_QWORD *)v175 + v46);
  if (v45)
  {
LABEL_48:
    v38 = (v45 - 1) & v45;
    v43 = __clz(__rbit64(v45)) + (v46 << 6);
    v21 = v46;
    goto LABEL_49;
  }
  v47 = v21 + 5;
  if (v21 + 5 < v172)
  {
    v45 = *((_QWORD *)v175 + v47);
    if (!v45)
    {
      while (1)
      {
        v46 = v47 + 1;
        if (__OFADD__(v47, 1))
          break;
        if (v46 >= v172)
          goto LABEL_58;
        v45 = *((_QWORD *)v175 + v46);
        ++v47;
        if (v45)
          goto LABEL_48;
      }
LABEL_205:
      __break(1u);
      goto LABEL_206;
    }
    v46 = v21 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  v21 = (uint64_t)v171;

  swift_bridgeObjectRelease();
  v178[0] = CFSTR("NSUnderlyingError");
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v59 = CFSTR("NSUnderlyingError");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v8 + 16) && (v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v182), (v61 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v60, (uint64_t)&v193);
  }
  else
  {
    v193 = 0u;
    v194 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v182);
  if (*((_QWORD *)&v194 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = v178[0];
      v7 = v195;
      v62 = v178[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_211;
      goto LABEL_65;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
  }
  while (2)
  {
    v65 = (id)v21;
    v66 = (id)v21;
    v7 = _swift_stdlib_bridgeErrorToNSError();
    v6 = objc_msgSend((id)v7, sel_userInfo);
    swift_unknownObjectRelease();
    v171 = v66;
    if (v6)
    {
      swift_unknownObjectRetain();
      v67 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v67)
      {
        v68 = v67;
        goto LABEL_91;
      }
      v39 = objc_msgSend(v6, sel_count);
      if (v39)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v68 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
LABEL_76:
        v68 = MEMORY[0x1E0DEE9E0];
      }
      v7 = *(_QWORD *)(v68 + 48);
      v69 = *(_QWORD *)(v68 + 56);
      swift_retain();
      result = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)((_QWORD *)v7, v69, v6, (uint64_t)v39);
      if ((result & 0x8000000000000000) == 0 && (uint64_t)v39 >= result)
      {
        *(_QWORD *)(v68 + 16) = result;
        if (result)
        {
          v70 = result - 1;
          v71 = v68 + 64;
          while (1)
          {
            if (((*(_QWORD *)(v71 + (((unint64_t)v70 >> 3) & 0xFFFFFFFFFFFFF8)) >> v70) & 1) != 0)
              goto LABEL_82;
            v76 = (uint64_t *)(*(_QWORD *)(v68 + 48) + 16 * v70);
            v77 = *v76;
            v21 = v76[1];
            swift_bridgeObjectRetain();
            v7 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v21);
            v79 = v78;
            swift_bridgeObjectRelease();
            if ((v79 & 1) != 0)
            {
              swift_arrayDestroy();
              swift_arrayDestroy();
              v80 = *(_QWORD *)(v68 + 16);
              v25 = __OFSUB__(v80, 1);
              v81 = v80 - 1;
              if (v25)
                goto LABEL_209;
              *(_QWORD *)(v68 + 16) = v81;
              goto LABEL_82;
            }
            *(_QWORD *)(v71 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
            if (v70 < (uint64_t)v7)
            {
              *(_OWORD *)(*(_QWORD *)(v68 + 48) + 16 * v7) = *(_OWORD *)(*(_QWORD *)(v68 + 48) + 16 * v70);
              v72 = *(_QWORD *)(v68 + 56);
              v73 = (_OWORD *)(v72 + 32 * v7);
              v74 = (_OWORD *)(v72 + 32 * v70);
              v75 = v74[1];
              *v73 = *v74;
              v73[1] = v75;
LABEL_82:
              if (--v70 < 0)
                break;
            }
            else
            {
              if (v7 == v70)
                goto LABEL_82;
              v82 = *(_QWORD *)(v68 + 48);
              v83 = (uint64_t *)(v82 + 16 * v7);
              v84 = (uint64_t *)(v82 + 16 * v70);
              v85 = *v83;
              v86 = v83[1];
              v87 = v84[1];
              *v83 = *v84;
              v83[1] = v87;
              *v84 = v85;
              v84[1] = v86;
              v88 = *(_QWORD *)(v68 + 56);
              v7 = v88 + 32 * v7;
              v89 = (_OWORD *)(v88 + 32 * v70);
              outlined init with take of Any((_OWORD *)v7, &v182);
              outlined init with take of Any(v89, (_OWORD *)v7);
              outlined init with take of Any(&v182, v89);
              if (v70 < 0)
                break;
            }
          }
        }
        swift_release();
LABEL_91:

        if (*(_QWORD *)(v68 + 16))
          goto LABEL_92;
        goto LABEL_73;
      }
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
      goto LABEL_215;
    }
    v68 = MEMORY[0x1E0DEE9E0];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
    {
LABEL_92:
      v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
      v21 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_93;
    }
LABEL_73:
    v21 = MEMORY[0x1E0DEE9E0];
LABEL_93:
    v176 = v68 + 64;
    v90 = -1 << *(_BYTE *)(v68 + 32);
    if (-v90 < 64)
      v91 = ~(-1 << -(char)v90);
    else
      v91 = -1;
    v92 = v91 & *(_QWORD *)(v68 + 64);
    v173 = (unint64_t)(63 - v90) >> 6;
    v6 = v181;
    v93 = v185;
    v94 = v21 + 64;
    swift_bridgeObjectRetain();
    swift_retain();
    v95 = 0;
    while (v92)
    {
      v98 = __clz(__rbit64(v92));
      v92 &= v92 - 1;
      v99 = v98 | (v95 << 6);
LABEL_117:
      v104 = (uint64_t *)(*(_QWORD *)(v68 + 48) + 16 * v99);
      v106 = *v104;
      v105 = v104[1];
      outlined init with copy of Any(*(_QWORD *)(v68 + 56) + 32 * v99, (uint64_t)&v191);
      *(_QWORD *)&v190 = v106;
      *((_QWORD *)&v190 + 1) = v105;
      v187 = v190;
      v188 = v191;
      v189 = v192;
      *(_QWORD *)&v186[0] = v106;
      *((_QWORD *)&v186[0] + 1) = v105;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v188, v181);
      v182 = *(_OWORD *)v178;
      v183 = v179;
      v184 = v180;
      outlined init with take of Any(v181, v185);
      *(_OWORD *)v178 = v182;
      v179 = v183;
      v180 = v184;
      outlined init with take of Any(v185, v186);
      outlined init with take of Any(v186, &v182);
      v7 = (unint64_t)v178;
      v107 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v21 + 40));
      v108 = -1 << *(_BYTE *)(v21 + 32);
      v109 = v107 & ~v108;
      v110 = v109 >> 6;
      if (((-1 << v109) & ~*(_QWORD *)(v94 + 8 * (v109 >> 6))) != 0)
      {
        v96 = __clz(__rbit64((-1 << v109) & ~*(_QWORD *)(v94 + 8 * (v109 >> 6)))) | v109 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_98;
      }
      v111 = 0;
      v112 = (unint64_t)(63 - v108) >> 6;
      do
      {
        if (++v110 == v112 && (v111 & 1) != 0)
        {
          __break(1u);
LABEL_142:
          v121 = MEMORY[0x1E0DEE9E0];
          goto LABEL_143;
        }
        v113 = v110 == v112;
        if (v110 == v112)
          v110 = 0;
        v111 |= v113;
        v114 = *(_QWORD *)(v94 + 8 * v110);
      }
      while (v114 == -1);
      v96 = __clz(__rbit64(~v114)) + (v110 << 6);
LABEL_98:
      *(_QWORD *)(v94 + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v96;
      v97 = *(_QWORD *)(v21 + 48) + 40 * v96;
      *(_OWORD *)v97 = *(_OWORD *)v178;
      *(_OWORD *)(v97 + 16) = v179;
      *(_QWORD *)(v97 + 32) = v180;
      outlined init with take of Any(&v182, (_OWORD *)(*(_QWORD *)(v21 + 56) + 32 * v96));
      ++*(_QWORD *)(v21 + 16);
    }
    v100 = v95 + 1;
    if (__OFADD__(v95, 1))
      goto LABEL_203;
    if (v100 < v173)
    {
      v101 = *(_QWORD *)(v176 + 8 * v100);
      v102 = v95 + 1;
      if (!v101)
      {
        v102 = v95 + 2;
        if (v95 + 2 >= v173)
          break;
        v101 = *(_QWORD *)(v176 + 8 * v102);
        if (!v101)
        {
          v102 = v95 + 3;
          if (v95 + 3 >= v173)
            break;
          v101 = *(_QWORD *)(v176 + 8 * v102);
          if (!v101)
          {
            v102 = v95 + 4;
            if (v95 + 4 >= v173)
              break;
            v101 = *(_QWORD *)(v176 + 8 * v102);
            if (!v101)
            {
              v103 = v95 + 5;
              if (v95 + 5 >= v173)
                break;
              v101 = *(_QWORD *)(v176 + 8 * v103);
              if (!v101)
              {
                while (1)
                {
                  v102 = v103 + 1;
                  if (__OFADD__(v103, 1))
                    break;
                  if (v102 >= v173)
                    goto LABEL_126;
                  v101 = *(_QWORD *)(v176 + 8 * v102);
                  ++v103;
                  if (v101)
                    goto LABEL_116;
                }
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
LABEL_211:
                v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1, (_QWORD *)v7);
LABEL_65:
                v64 = *(_QWORD *)(v7 + 16);
                v63 = *(_QWORD *)(v7 + 24);
                if (v64 >= v63 >> 1)
                  v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v63 > 1), v64 + 1, 1, (_QWORD *)v7);
                *(_QWORD *)(v7 + 16) = v64 + 1;
                *(_QWORD *)(v7 + 8 * v64 + 32) = v6;

                v195 = v7;
                continue;
              }
              v102 = v95 + 5;
            }
          }
        }
      }
LABEL_116:
      v92 = (v101 - 1) & v101;
      v99 = __clz(__rbit64(v101)) + (v102 << 6);
      v95 = v102;
      goto LABEL_117;
    }
    break;
  }
LABEL_126:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  result = (int64_t)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, "NSMultipleUnderlyingErrorsKey", 29, 1, 0);
  if (result)
  {
    v115 = (void *)result;
    v116 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, result);

    v178[0] = v116;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v21 + 16)
      && (v117 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v182), (v118 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v117, (uint64_t)&v193);
    }
    else
    {
      v193 = 0u;
      v194 = 0u;
    }
    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v182);
    if (*((_QWORD *)&v194 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Error]);
      if ((swift_dynamicCast() & 1) != 0)
        specialized Array.append<A>(contentsOf:)((uint64_t)v178[0]);
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
    }
    v119 = v171;
    v171 = v171;
    v7 = _swift_stdlib_bridgeErrorToNSError();
    v6 = objc_msgSend((id)v7, sel_userInfo);
    swift_unknownObjectRelease();
    if (!v6)
    {
      v121 = MEMORY[0x1E0DEE9E0];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
      {
LABEL_158:
        v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
        v21 = static _DictionaryStorage.allocate(capacity:)();
        goto LABEL_159;
      }
LABEL_139:
      v21 = MEMORY[0x1E0DEE9E0];
LABEL_159:
      v177 = v121 + 64;
      v143 = -1 << *(_BYTE *)(v121 + 32);
      if (-v143 < 64)
        v144 = ~(-1 << -(char)v143);
      else
        v144 = -1;
      v145 = v144 & *(_QWORD *)(v121 + 64);
      v174 = (unint64_t)(63 - v143) >> 6;
      v6 = v181;
      v146 = v21 + 64;
      swift_bridgeObjectRetain();
      swift_retain();
      v147 = 0;
      while (1)
      {
        if (v145)
        {
          v150 = __clz(__rbit64(v145));
          v145 &= v145 - 1;
          v151 = v150 | (v147 << 6);
        }
        else
        {
          v152 = v147 + 1;
          if (__OFADD__(v147, 1))
            goto LABEL_204;
          if (v152 >= v174)
          {
LABEL_192:
            swift_release();
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();

            swift_bridgeObjectRelease();
            result = (int64_t)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, "NSDetailedErrors", 16, 1, 0);
            if (!result)
              goto LABEL_216;
            v167 = (void *)result;
            v168 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, result);

            v178[0] = v168;
            AnyHashable.init<A>(_:)();
            if (*(_QWORD *)(v21 + 16)
              && (v169 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v182), (v170 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v169, (uint64_t)&v193);
            }
            else
            {
              v193 = 0u;
              v194 = 0u;
            }
            swift_release();
            outlined destroy of AnyHashable((uint64_t)&v182);
            if (*((_QWORD *)&v194 + 1))
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Error]);
              if ((swift_dynamicCast() & 1) != 0)
                specialized Array.append<A>(contentsOf:)((uint64_t)v178[0]);
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v193, &demangling cache variable for type metadata for Any?);
            }
            return v195;
          }
          v153 = *(_QWORD *)(v177 + 8 * v152);
          v154 = v147 + 1;
          if (!v153)
          {
            v154 = v147 + 2;
            if (v147 + 2 >= v174)
              goto LABEL_192;
            v153 = *(_QWORD *)(v177 + 8 * v154);
            if (!v153)
            {
              v154 = v147 + 3;
              if (v147 + 3 >= v174)
                goto LABEL_192;
              v153 = *(_QWORD *)(v177 + 8 * v154);
              if (!v153)
              {
                v154 = v147 + 4;
                if (v147 + 4 >= v174)
                  goto LABEL_192;
                v153 = *(_QWORD *)(v177 + 8 * v154);
                if (!v153)
                {
                  v155 = v147 + 5;
                  if (v147 + 5 >= v174)
                    goto LABEL_192;
                  v153 = *(_QWORD *)(v177 + 8 * v155);
                  if (!v153)
                  {
                    while (1)
                    {
                      v154 = v155 + 1;
                      if (__OFADD__(v155, 1))
                        goto LABEL_207;
                      if (v154 >= v174)
                        goto LABEL_192;
                      v153 = *(_QWORD *)(v177 + 8 * v154);
                      ++v155;
                      if (v153)
                        goto LABEL_182;
                    }
                  }
                  v154 = v147 + 5;
                }
              }
            }
          }
LABEL_182:
          v145 = (v153 - 1) & v153;
          v151 = __clz(__rbit64(v153)) + (v154 << 6);
          v147 = v154;
        }
        v156 = (uint64_t *)(*(_QWORD *)(v121 + 48) + 16 * v151);
        v158 = *v156;
        v157 = v156[1];
        outlined init with copy of Any(*(_QWORD *)(v121 + 56) + 32 * v151, (uint64_t)&v191);
        *(_QWORD *)&v190 = v158;
        *((_QWORD *)&v190 + 1) = v157;
        v187 = v190;
        v188 = v191;
        v189 = v192;
        *(_QWORD *)&v186[0] = v158;
        *((_QWORD *)&v186[0] + 1) = v157;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        outlined init with take of Any(&v188, v181);
        v182 = *(_OWORD *)v178;
        v183 = v179;
        v184 = v180;
        outlined init with take of Any(v181, v185);
        *(_OWORD *)v178 = v182;
        v179 = v183;
        v180 = v184;
        outlined init with take of Any(v185, v186);
        outlined init with take of Any(v186, &v182);
        v7 = (unint64_t)v178;
        v159 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v21 + 40));
        v160 = -1 << *(_BYTE *)(v21 + 32);
        v161 = v159 & ~v160;
        v162 = v161 >> 6;
        if (((-1 << v161) & ~*(_QWORD *)(v146 + 8 * (v161 >> 6))) != 0)
        {
          v148 = __clz(__rbit64((-1 << v161) & ~*(_QWORD *)(v146 + 8 * (v161 >> 6)))) | v161 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v163 = 0;
          v164 = (unint64_t)(63 - v160) >> 6;
          do
          {
            if (++v162 == v164 && (v163 & 1) != 0)
            {
              __break(1u);
              goto LABEL_202;
            }
            v165 = v162 == v164;
            if (v162 == v164)
              v162 = 0;
            v163 |= v165;
            v166 = *(_QWORD *)(v146 + 8 * v162);
          }
          while (v166 == -1);
          v148 = __clz(__rbit64(~v166)) + (v162 << 6);
        }
        *(_QWORD *)(v146 + ((v148 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v148;
        v149 = *(_QWORD *)(v21 + 48) + 40 * v148;
        *(_OWORD *)v149 = *(_OWORD *)v178;
        *(_OWORD *)(v149 + 16) = v179;
        *(_QWORD *)(v149 + 32) = v180;
        outlined init with take of Any(&v182, (_OWORD *)(*(_QWORD *)(v21 + 56) + 32 * v148));
        ++*(_QWORD *)(v21 + 16);
      }
    }
    swift_unknownObjectRetain();
    v120 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v120)
    {
      v121 = v120;
      goto LABEL_157;
    }
    v93 = objc_msgSend(v6, sel_count);
    if (!v93)
      goto LABEL_142;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v121 = static _DictionaryStorage.allocate(capacity:)();
LABEL_143:
    v7 = *(_QWORD *)(v121 + 48);
    v122 = *(_QWORD *)(v121 + 56);
    swift_retain();
    result = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)((_QWORD *)v7, v122, v6, (uint64_t)v93);
    if ((result & 0x8000000000000000) == 0 && (uint64_t)v93 >= result)
    {
      *(_QWORD *)(v121 + 16) = result;
      if (result)
      {
        v123 = result - 1;
        v124 = v121 + 64;
        do
        {
          while (1)
          {
            if (((*(_QWORD *)(v124 + (((unint64_t)v123 >> 3) & 0xFFFFFFFFFFFFF8)) >> v123) & 1) != 0)
              goto LABEL_148;
            v129 = (uint64_t *)(*(_QWORD *)(v121 + 48) + 16 * v123);
            v130 = *v129;
            v21 = v129[1];
            swift_bridgeObjectRetain();
            v7 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v21);
            v132 = v131;
            swift_bridgeObjectRelease();
            if ((v132 & 1) == 0)
              break;
            swift_arrayDestroy();
            swift_arrayDestroy();
            v133 = *(_QWORD *)(v121 + 16);
            v25 = __OFSUB__(v133, 1);
            v134 = v133 - 1;
            if (v25)
              goto LABEL_210;
            *(_QWORD *)(v121 + 16) = v134;
LABEL_148:
            if (--v123 < 0)
              goto LABEL_156;
          }
          *(_QWORD *)(v124 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
          if (v123 < (uint64_t)v7)
          {
            *(_OWORD *)(*(_QWORD *)(v121 + 48) + 16 * v7) = *(_OWORD *)(*(_QWORD *)(v121 + 48) + 16 * v123);
            v125 = *(_QWORD *)(v121 + 56);
            v126 = (_OWORD *)(v125 + 32 * v7);
            v127 = (_OWORD *)(v125 + 32 * v123);
            v128 = v127[1];
            *v126 = *v127;
            v126[1] = v128;
            goto LABEL_148;
          }
          if (v7 == v123)
            goto LABEL_148;
          v135 = *(_QWORD *)(v121 + 48);
          v136 = (uint64_t *)(v135 + 16 * v7);
          v137 = (uint64_t *)(v135 + 16 * v123);
          v138 = *v136;
          v139 = v136[1];
          v140 = v137[1];
          *v136 = *v137;
          v136[1] = v140;
          *v137 = v138;
          v137[1] = v139;
          v141 = *(_QWORD *)(v121 + 56);
          v7 = v141 + 32 * v7;
          v142 = (_OWORD *)(v141 + 32 * v123);
          outlined init with take of Any((_OWORD *)v7, &v182);
          outlined init with take of Any(v142, (_OWORD *)v7);
          outlined init with take of Any(&v182, v142);
        }
        while ((v123 & 0x8000000000000000) == 0);
      }
LABEL_156:
      swift_release();
LABEL_157:

      if (*(_QWORD *)(v121 + 16))
        goto LABEL_158;
      goto LABEL_139;
    }
    goto LABEL_214;
  }
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
  return result;
}

uint64_t CocoaError.url.getter@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  __CFString *v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  id v64;
  uint64_t v65;
  int64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD v74[2];
  _OWORD v75[3];
  _OWORD v76[2];
  __int128 v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;

  v2 = *v1;
  v3 = *v1;
  v64 = v2;
  v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v4)
  {
    swift_unknownObjectRetain();
    v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v5)
    {
      v6 = v5;
      goto LABEL_23;
    }
    v8 = objc_msgSend(v4, sel_count);
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v6 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v6 = MEMORY[0x1E0DEE9E0];
    }
    v9 = *(_QWORD **)(v6 + 48);
    v10 = *(_QWORD *)(v6 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, (uint64_t)v8);
    if (result < 0 || (uint64_t)v8 < result)
      goto LABEL_72;
    *(_QWORD *)(v6 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v6 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v12 = result - 1;
    v13 = v6 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v13 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          goto LABEL_14;
        v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v19 = *v18;
        v20 = v18[1];
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v24 = *(_QWORD *)(v6 + 16);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v25)
        {
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v6 + 16) = v26;
LABEL_14:
        if (--v12 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v14 = *(_QWORD *)(v6 + 56);
        v15 = (_OWORD *)(v14 + 32 * v12);
        v16 = v15[1];
        v17 = (_OWORD *)(v14 + 32 * v21);
        *v17 = *v15;
        v17[1] = v16;
        goto LABEL_14;
      }
      if (v21 == v12)
        goto LABEL_14;
      v27 = *(_QWORD *)(v6 + 48);
      v28 = (uint64_t *)(v27 + 16 * v21);
      v29 = (uint64_t *)(v27 + 16 * v12);
      v30 = *v28;
      v31 = v28[1];
      v32 = v29[1];
      *v28 = *v29;
      v28[1] = v32;
      *v29 = v30;
      v29[1] = v31;
      v33 = *(_QWORD *)(v6 + 56);
      v34 = (_OWORD *)(v33 + 32 * v21);
      v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
      if (v12 < 0)
        goto LABEL_22;
    }
  }
  v6 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v7 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v7 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v65 = v6 + 64;
  v36 = -1 << *(_BYTE *)(v6 + 32);
  if (-v36 < 64)
    v37 = ~(-1 << -(char)v36);
  else
    v37 = -1;
  v38 = v37 & *(_QWORD *)(v6 + 64);
  v66 = (unint64_t)(63 - v36) >> 6;
  v39 = v7 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v40 = 0;
  while (1)
  {
    if (v38)
    {
      v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v44 = v43 | (v40 << 6);
      goto LABEL_49;
    }
    v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v45 >= v66)
      goto LABEL_58;
    v46 = *(_QWORD *)(v65 + 8 * v45);
    v47 = v40 + 1;
    if (!v46)
    {
      v47 = v40 + 2;
      if (v40 + 2 >= v66)
        goto LABEL_58;
      v46 = *(_QWORD *)(v65 + 8 * v47);
      if (!v46)
      {
        v47 = v40 + 3;
        if (v40 + 3 >= v66)
          goto LABEL_58;
        v46 = *(_QWORD *)(v65 + 8 * v47);
        if (!v46)
        {
          v47 = v40 + 4;
          if (v40 + 4 >= v66)
            goto LABEL_58;
          v46 = *(_QWORD *)(v65 + 8 * v47);
          if (!v46)
            break;
        }
      }
    }
LABEL_48:
    v38 = (v46 - 1) & v46;
    v44 = __clz(__rbit64(v46)) + (v47 << 6);
    v40 = v47;
LABEL_49:
    v49 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v44);
    v51 = *v49;
    v50 = v49[1];
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v44, (uint64_t)v78);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v50;
    v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(_QWORD *)&v75[0] = v51;
    *((_QWORD *)&v75[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    v71 = v67;
    v72 = v68;
    v73 = v69;
    outlined init with take of Any(v70, v74);
    v67 = v71;
    v68 = v72;
    v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v52 = -1 << *(_BYTE *)(v7 + 32);
    v53 = result & ~v52;
    v54 = v53 >> 6;
    if (((-1 << v53) & ~*(_QWORD *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      v41 = __clz(__rbit64((-1 << v53) & ~*(_QWORD *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v55 = 0;
      v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_69;
        }
        v57 = v54 == v56;
        if (v54 == v56)
          v54 = 0;
        v55 |= v57;
        v58 = *(_QWORD *)(v39 + 8 * v54);
      }
      while (v58 == -1);
      v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(_QWORD *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v42 = *(_QWORD *)(v7 + 48) + 40 * v41;
    *(_OWORD *)v42 = v67;
    *(_OWORD *)(v42 + 16) = v68;
    *(_QWORD *)(v42 + 32) = v69;
    result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v41));
    ++*(_QWORD *)(v7 + 16);
  }
  v48 = v40 + 5;
  if (v40 + 5 < v66)
  {
    v46 = *(_QWORD *)(v65 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        v47 = v48 + 1;
        if (__OFADD__(v48, 1))
          goto LABEL_70;
        if (v47 >= v66)
          goto LABEL_58;
        v46 = *(_QWORD *)(v65 + 8 * v47);
        ++v48;
        if (v46)
          goto LABEL_48;
      }
    }
    v47 = v40 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v59 = CFSTR("NSURL");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v7 + 16))
  {
    v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v60, (uint64_t)&v79);
    }
    else
    {
      v79 = 0u;
      v80 = 0u;
    }
    v62 = a1;
  }
  else
  {
    v79 = 0u;
    v80 = 0u;
    v62 = a1;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((_QWORD *)&v80 + 1))
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
      return result;
  }
  else
  {
    result = outlined destroy of Any?((uint64_t)&v79, &demangling cache variable for type metadata for Any?);
  }
  *v62 = 0;
  v62[1] = 0;
  v62[2] = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type CocoaError.Code and conformance CocoaError.Code()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError.Code, &type metadata for CocoaError.Code);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError.Code, &type metadata for CocoaError.Code);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code;
  if (!lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError.Code, &type metadata for CocoaError.Code);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError.Code and conformance CocoaError.Code);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  a1[2] = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  result = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CocoaError.Code(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CocoaError.Code and conformance CocoaError.Code();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of LocalizedError.helpAnchor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t outlined assign with take of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 40))(a2, a1);
  return a2;
}

uint64_t outlined init with take of Morphology._CustomPronoun?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Morphology._CustomPronoun?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Morphology._CustomPronoun(uint64_t a1, uint64_t a2)
{
  assignWithTake for Morphology.CustomPronoun(a2, a1);
  return a2;
}

BOOL StringProtocol.localizedStandardContains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v10;
  char v11;
  _BOOL8 v12;
  _QWORD v14[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v14[0] = LocaleCache.current.getter();
  v14[1] = v10;
  StringProtocol.range<A>(of:options:range:locale:)(a1, 0x81uLL, 0, 0, 1, (uint64_t)v14, a2, a3, a4, a5);
  v12 = (v11 & 1) == 0;
  swift_unknownObjectRelease();
  return v12;
}

id StringProtocol.localizedCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedCompare_);
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;

  v9 = v8;
  v58 = a5;
  v55 = a4;
  v56 = a3;
  v57 = a2;
  v12 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v20);
  if (!*v22)
  {
    v27 = v24;
    v54 = v21;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))((char *)&v53 - v23, v9, a7, v25);
    v28 = Substring.init<A>(_:)();
    v30 = v29;
    v32 = v31;
    v34 = v33;
    if ((v58 & 1) == 0)
    {
      v28 = Substring.subscript.getter();
      v30 = v35;
      v32 = v36;
      v38 = v37;
      swift_bridgeObjectRelease();
      v34 = v38;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v27, a8);
    v39 = Substring.init<A>(_:)();
    v43 = (id)Substring._unlocalizedCompare(other:options:)(v39, v40, v41, v42, v57, v28, v30, v32, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v43;
  }
  v53 = v22[1];
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v54 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v26 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v9, a7);
  if ((v58 & 1) != 0)
  {
    dispatch thunk of Collection.startIndex.getter();
    v44 = v60;
    dispatch thunk of Collection.endIndex.getter();
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a7);
    if (v59 >> 14 < v44 >> 14)
      goto LABEL_12;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a7);
  }
  result = StringProtocol._toUTF16Offsets(_:)();
  v47 = v46 - result;
  if (!__OFSUB__(v46, result))
  {
    v48 = result;
    ObjectType = swift_getObjectType();
    v50 = v53;
    v51 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 496);
    swift_unknownObjectRetain();
    v52 = (void *)v51(ObjectType, v50);
    swift_unknownObjectRelease();
    v43 = objc_msgSend(v54, sel_compare_options_range_locale_, v26, v57, v48, v47, v52);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return (uint64_t)v43;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t StringProtocol._toRelativeNSRange(_:)()
{
  uint64_t result;
  uint64_t v1;

  result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v1, result))
    __break(1u);
  return result;
}

uint64_t String.init(cString:encoding:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;

  v3 = *a2;
  if (*a2 != 4 && v3 != 1)
    goto LABEL_10;
  v5 = MEMORY[0x186DA4658](a1);
  if (!v6)
    goto LABEL_10;
  v7 = v5;
  if (v3 != 4 && (_StringGuts._isContiguousASCII.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    v8 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCString_encoding_, a1, v3);
    if (v8)
    {
      v9 = v8;
      v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

    }
    else
    {
      return 0;
    }
  }
  return v7;
}

_QWORD *static String.availableStringEncodings.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(), sel_availableStringEncodings);
  v1 = *v0;
  if (!*v0)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = v0;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v4 = v3[2];
  v5 = v2 + 1;
  do
  {
    v6 = v3[3];
    if (v4 >= v6 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v4 + 1, 1, v3);
    v3[2] = v4 + 1;
    v3[v4 + 4] = v1;
    v7 = *v5++;
    v1 = v7;
    ++v4;
  }
  while (v7);
  return v3;
}

id static String.defaultCStringEncoding.getter@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_defaultCStringEncoding);
  *a1 = result;
  return result;
}

id static String.localizedName(of:)(_QWORD *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_localizedNameOfStringEncoding_, *a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id String.init(bytesNoCopy:length:encoding:freeWhenDone:)(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, a1, a2, *a3, a4 & 1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

id String.init(utf16CodeUnitsNoCopy:count:freeWhenDone:)(uint64_t a1, uint64_t a2, char a3)
{
  id v3;
  id v4;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCharactersNoCopy_length_freeWhenDone_, a1, a2, a3 & 1);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

id String.init(contentsOfFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  id result;
  void *v7;
  id v8;

  v5 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  result = @nonobjc NSString.init(contentsOfFile:usedEncoding:)(a1, a2, 0);
  if (!v2)
  {
    v7 = result;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return v8;
  }
  return result;
}

id StringProtocol.canBeConverted(to:)(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *a1;
  StringProtocol._ephemeralString.getter();
  v2 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v2, sel_canBeConvertedToEncoding_, v1);
  swift_unknownObjectRelease();
  return v3;
}

id StringProtocol.commonPrefix<A>(with:options:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  StringProtocol._ephemeralString.getter();
  v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_commonPrefixWithString_options_, v4, a2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

id StringProtocol.completePath(into:caseSensitive:matchesInto:filterTypes:)(id *a1, char a2, uint64_t *a3, void *a4)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28[2];

  v28[1] = *(id *)MEMORY[0x1E0C80C00];
  if (a1)
  {
    v28[0] = 0;
    if (!a3)
    {
      StringProtocol._ephemeralString.getter();
      v20 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      if (a4)
      {
        swift_bridgeObjectRetain();
        a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
      }
      v9 = objc_msgSend(v20, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, v28, a2 & 1, 0, a4);
      swift_unknownObjectRelease();

      v19 = v28[0];
      v21 = v28[0];
      v11 = 0;
      if (!v19)
        goto LABEL_24;
      v12 = v21;
LABEL_23:
      *a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      a1[1] = v22;

      swift_bridgeObjectRelease();
      return v9;
    }
    v27 = 0;
    StringProtocol._ephemeralString.getter();
    v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (a4)
    {
      swift_bridgeObjectRetain();
      a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }
    v9 = objc_msgSend(v8, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, v28, a2 & 1, &v27, a4);
    swift_unknownObjectRelease();

    v10 = v28[0];
    v11 = v27;
    v12 = v10;
    v13 = v10;
    if (!v11)
      goto LABEL_6;
    goto LABEL_12;
  }
  if (a3)
  {
    v28[0] = 0;
    StringProtocol._ephemeralString.getter();
    v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (a4)
    {
      swift_bridgeObjectRetain();
      a4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }
    v9 = objc_msgSend(v14, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, 0, a2 & 1, v28, a4);
    swift_unknownObjectRelease();

    v12 = 0;
    v11 = v28[0];
    v15 = v28[0];
    if (!v11)
    {
LABEL_6:
      if (!v12)
      {
LABEL_24:

        return v9;
      }
      goto LABEL_17;
    }
LABEL_12:
    type metadata accessor for __SwiftDeferredNSArray();
    v16 = v11;
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v16, sel_copy);
      v18 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v17 = specialized _arrayForceCast<A, B>(_:)(v18);
      swift_bridgeObjectRelease();
    }
    *a3 = v17;

    swift_bridgeObjectRelease();
    if (!v12)
      goto LABEL_24;
LABEL_17:
    if (!a1)
    {

      return v9;
    }
    v19 = v12;
    goto LABEL_23;
  }
  StringProtocol._ephemeralString.getter();
  v24 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    swift_bridgeObjectRetain();
    v25 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  else
  {
    v25 = 0;
  }
  v26 = objc_msgSend(v24, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, 0, a2 & 1, 0, v25);
  swift_unknownObjectRelease();

  return v26;
}

id StringProtocol.decomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_decomposedStringWithCanonicalMapping);
}

id StringProtocol.decomposedStringWithCompatibilityMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_decomposedStringWithCompatibilityMapping);
}

uint64_t StringProtocol.enumerateLines(invoking:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[6];

  StringProtocol._ephemeralString.getter();
  v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v8[4] = partial apply for closure #1 in StringProtocol.enumerateLines(invoking:);
  v8[5] = v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v8[3] = &block_descriptor_19;
  v6 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateLinesUsingBlock_, v6);
  _Block_release(v6);
  return swift_unknownObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v4)(id, uint64_t, uint64_t);
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void (**)(id, uint64_t, uint64_t))(a1 + 32);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v7 = v6;
  swift_retain();
  v4(v5, v7, a3);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t StringProtocol.fastestEncoding.getter@<X0>(_QWORD *a1@<X8>)
{
  return StringProtocol.fastestEncoding.getter((SEL *)&selRef_fastestEncoding, a1);
}

id StringProtocol.getCString(_:maxLength:encoding:)(char **a1, int64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  char *v7;
  int64_t v8;
  id v9;

  v5 = *a3;
  StringProtocol._ephemeralString.getter();
  v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v7 = *a1;
  v8 = *((_QWORD *)*a1 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0, v7);
  if (v8 < a2)
    a2 = v8;
  *a1 = v7;
  swift_bridgeObjectRetain();
  v9 = objc_msgSend(v6, sel_getCString_maxLength_encoding_, v7 + 32, a2, v5);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

id StringProtocol.lengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lengthOfBytes(using:)(a1, a2, a3, (SEL *)&selRef_lengthOfBytesUsingEncoding_);
}

id StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedCaseInsensitiveCompare_);
}

id StringProtocol.localizedStandardCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_localizedStandardCompare_);
}

id StringProtocol.maximumLengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lengthOfBytes(using:)(a1, a2, a3, (SEL *)&selRef_maximumLengthOfBytesUsingEncoding_);
}

id StringProtocol.lengthOfBytes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5;
  void *v6;
  id v7;

  v5 = *a1;
  StringProtocol._ephemeralString.getter();
  v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v6, *a4, v5);
  swift_unknownObjectRelease();
  return v7;
}

id StringProtocol.precomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_precomposedStringWithCanonicalMapping);
}

id StringProtocol.precomposedStringWithCompatibilityMapping.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.decomposedStringWithCanonicalMapping.getter(a1, a2, (SEL *)&selRef_precomposedStringWithCompatibilityMapping);
}

id StringProtocol.decomposedStringWithCanonicalMapping.getter(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v4;
  id v5;
  id v6;

  StringProtocol._ephemeralString.getter();
  v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v4, *a3);
  swift_unknownObjectRelease();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

uint64_t StringProtocol.propertyList()()
{
  void *v0;
  id v1;

  StringProtocol._ephemeralString.getter();
  v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v0, sel_propertyList);
  swift_unknownObjectRelease();
  _bridgeAnyObjectToAny(_:)();
  return swift_unknownObjectRelease();
}

unint64_t StringProtocol.propertyListFromStringsFileFormat()()
{
  void *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _OWORD *v8;
  unint64_t result;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _OWORD v35[4];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];
  uint64_t v48;

  StringProtocol._ephemeralString.getter();
  v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v0, sel_propertyListFromStringsFileFormat);
  swift_unknownObjectRelease();
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  v2 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1);

  if (*(_QWORD *)(v2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v32 = v2 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v2 + 64);
  v7 = (char *)v47 + 8;
  v8 = (_OWORD *)((char *)v43 + 8);
  v31 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain();
  v33 = 0;
  if (v6)
    goto LABEL_11;
LABEL_12:
  v17 = v33 + 1;
  if (__OFADD__(v33, 1))
    goto LABEL_39;
  if (v17 >= v31)
    goto LABEL_35;
  v18 = *(_QWORD *)(v32 + 8 * v17);
  v19 = v33 + 1;
  if (v18)
    goto LABEL_29;
  v19 = v33 + 2;
  if (v33 + 2 >= v31)
    goto LABEL_35;
  v18 = *(_QWORD *)(v32 + 8 * v19);
  if (v18)
    goto LABEL_29;
  v19 = v33 + 3;
  if (v33 + 3 >= v31)
    goto LABEL_35;
  v18 = *(_QWORD *)(v32 + 8 * v19);
  if (v18)
    goto LABEL_29;
  v19 = v33 + 4;
  if (v33 + 4 >= v31)
    goto LABEL_35;
  v18 = *(_QWORD *)(v32 + 8 * v19);
  if (v18)
    goto LABEL_29;
  v19 = v33 + 5;
  if (v33 + 5 >= v31)
  {
LABEL_35:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v18 = *(_QWORD *)(v32 + 8 * v19);
  if (!v18)
  {
    v20 = v33 + 6;
    if (v33 + 6 < v31)
    {
      v18 = *(_QWORD *)(v32 + 8 * v20);
      if (v18)
      {
        v19 = v33 + 6;
        goto LABEL_29;
      }
      while (1)
      {
        v19 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_40;
        if (v19 >= v31)
          break;
        v18 = *(_QWORD *)(v32 + 8 * v19);
        ++v20;
        if (v18)
          goto LABEL_29;
      }
    }
    goto LABEL_35;
  }
LABEL_29:
  v33 = v19;
  v34 = (v18 - 1) & v18;
  for (i = __clz(__rbit64(v18)) + (v19 << 6); ; i = __clz(__rbit64(v6)) | (v33 << 6))
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * i, (uint64_t)&v45);
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * i, (uint64_t)v7);
    v43[0] = v47[0];
    v43[1] = v47[1];
    v44 = v48;
    v41 = v45;
    v42 = v46;
    v35[2] = v45;
    v35[3] = v46;
    v36 = *(_QWORD *)&v47[0];
    swift_dynamicCast();
    outlined init with take of Any(v8, v35);
    swift_dynamicCast();
    v21 = v39;
    v22 = v40;
    v24 = v37;
    v23 = v38;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
    if ((v25 & 1) != 0)
    {
      v10 = v8;
      v11 = 16 * result;
      v12 = v2;
      v13 = v7;
      v14 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v14 = v21;
      v14[1] = v22;
      v7 = v13;
      v2 = v12;
      v15 = (_QWORD *)(v3[7] + v11);
      v8 = v10;
      result = swift_bridgeObjectRelease();
      *v15 = v24;
      v15[1] = v23;
      v6 = v34;
      if (!v34)
        goto LABEL_12;
      goto LABEL_11;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v26 = (uint64_t *)(v3[6] + 16 * result);
    *v26 = v21;
    v26[1] = v22;
    v27 = (_QWORD *)(v3[7] + 16 * result);
    *v27 = v24;
    v27[1] = v23;
    v28 = v3[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_38;
    v3[2] = v30;
    v6 = v34;
    if (!v34)
      goto LABEL_12;
LABEL_11:
    v34 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t StringProtocol.smallestEncoding.getter@<X0>(_QWORD *a1@<X8>)
{
  return StringProtocol.fastestEncoding.getter((SEL *)&selRef_smallestEncoding, a1);
}

uint64_t StringProtocol.fastestEncoding.getter@<X0>(SEL *a1@<X2>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  uint64_t result;

  StringProtocol._ephemeralString.getter();
  v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v4, *a1);
  result = swift_unknownObjectRelease();
  *a2 = v5;
  return result;
}

void closure #1 in StringProtocol.addingPercentEncoding(withAllowedCharacters:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  StringProtocol._ephemeralString.getter();
  v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v4, sel__stringByAddingPercentEncodingWithAllowedCharacters_, a1);
  swift_unknownObjectRelease();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  *a2 = v6;
  a2[1] = v8;
}

id StringProtocol.appendingFormat<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  StringProtocol._ephemeralString.getter();
  v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v4 = StringProtocol._ephemeralString.getter();
  specialized withVaList<A>(_:_:)(a2, v4, v5, 0, 0);
  swift_bridgeObjectRelease();
  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v3, sel_stringByAppendingString_, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t StringProtocol.appending<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  v9[0] = String.init<A>(_:)();
  v9[1] = v7;
  String.append<A>(contentsOf:)();
  return v9[0];
}

id StringProtocol.folding(options:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t ObjectType;
  void *v7;
  id v8;
  id v9;

  v4 = *a2;
  v3 = a2[1];
  StringProtocol._ephemeralString.getter();
  v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (v4)
  {
    ObjectType = swift_getObjectType();
    v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 496))(ObjectType, v3);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(v5, sel_stringByFoldingWithOptions_locale_, a1, v7);
  swift_unknownObjectRelease();

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

id StringProtocol.padding<A>(toLength:withPad:startingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  StringProtocol._ephemeralString.getter();
  v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_stringByPaddingToLength_withString_startingAtIndex_, a1, v6, a3);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t StringProtocol.replacingCharacters<A, B>(in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t AssociatedTypeWitness;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v9 = v8;
  v56 = a5;
  v57 = a8;
  v54 = a7;
  v58 = a2;
  v13 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v46 = (char *)&v44 - v14;
  v15 = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(v15 - 8);
  v52 = v15;
  MEMORY[0x1E0C80A78](v15);
  v49 = a6;
  v50 = (char *)&v44 - v16;
  v17 = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v44 - v18;
  v53 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = 0;
  v64 = 0xE000000000000000;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v55 = v62;
  v56 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v8, a3);
  v57 = v13;
  Substring.init<A>(_:)();
  v28 = v27;
  swift_bridgeObjectRelease();
  if ((v28 & 0x1000000000000000) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v22, v58, a4);
    Substring.init<A>(_:)();
    v30 = v29;
    swift_bridgeObjectRelease();
    if ((v30 & 0x1000000000000000) == 0)
    {
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
      v53 = a4;
      dispatch thunk of Collection.startIndex.getter();
      v59 = v56;
      v60 = v61;
      swift_getAssociatedConformanceWitness();
      v44 = dispatch thunk of Collection.distance(from:to:)();
      v31 = *(void (**)(char *, uint64_t))(v48 + 8);
      v31(v19, v17);
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
      v61 = v55;
      v49 = v9;
      dispatch thunk of Collection.endIndex.getter();
      v59 = v60;
      v32 = dispatch thunk of Collection.distance(from:to:)();
      v31(v19, v17);
      v33 = v50;
      dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
      v34 = v52;
      swift_getAssociatedConformanceWitness();
      v35 = dispatch thunk of Collection.count.getter();
      result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v33, v34);
      v37 = v44 + v35;
      if (__OFADD__(v44, v35))
      {
        __break(1u);
      }
      else
      {
        result = v37 + v32;
        if (!__OFADD__(v37, v32))
        {
          MEMORY[0x186DA4670](result);
          goto LABEL_6;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
LABEL_6:
  v38 = v56;
  v39 = v56 >> 14;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v39 < v61 >> 14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v62 = v38;
  v40 = v46;
  dispatch thunk of Collection.subscript.getter();
  v41 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  String.append<A>(contentsOf:)();
  v42 = *(void (**)(char *, uint64_t))(v45 + 8);
  v42(v40, v41);
  String.append<A>(contentsOf:)();
  result = dispatch thunk of Collection.endIndex.getter();
  v43 = v61;
  if (v61 >> 14 >= v55 >> 14)
  {
    v61 = v55;
    v62 = v43;
    dispatch thunk of Collection.subscript.getter();
    String.append<A>(contentsOf:)();
    v42(v40, v41);
    return v63;
  }
LABEL_12:
  __break(1u);
  return result;
}

id StringProtocol.replacingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.replacingPercentEscapes(using:)(a1, a2, a3, (SEL *)&selRef_stringByReplacingPercentEscapesUsingEncoding_);
}

Swift::String_optional __swiftcall StringProtocol.applyingTransform(_:reverse:)(NSStringTransform _, Swift::Bool reverse)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String_optional result;

  StringProtocol._ephemeralString.getter();
  v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v4, sel_stringByApplyingTransform_reverse_, _, reverse);
  swift_unknownObjectRelease();
  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t)v6;
  v10 = v8;
  result.value._object = v10;
  result.value._countAndFlagsBits = v9;
  return result;
}

uint64_t StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];

  v13 = v12;
  v32 = a8;
  v33 = a5;
  v34 = a6;
  v36 = a3;
  v37 = a4;
  v30 = a2;
  v15 = *(_QWORD *)(a7 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](a1);
  v31 = v17;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  StringProtocol._ephemeralString.getter();
  v35 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v19, result))
  {
    __break(1u);
    goto LABEL_5;
  }
  v28 = a12;
  v29 = result;
  v20 = v32;
  v30 = v19 - result;
  StringProtocol._ephemeralString.getter();
  v21 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v13, a7);
  v22 = (*(unsigned __int8 *)(v15 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = a7;
  *((_QWORD *)v23 + 3) = v20;
  *((_QWORD *)v23 + 4) = v31;
  *((_QWORD *)v23 + 5) = a10;
  v24 = v28;
  *((_QWORD *)v23 + 6) = a11;
  *((_QWORD *)v23 + 7) = v24;
  v25 = v34;
  *((_QWORD *)v23 + 8) = v33;
  *((_QWORD *)v23 + 9) = v25;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v23[v22], (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a7);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:);
  *(_QWORD *)(v26 + 24) = v23;
  aBlock[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_9_0;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v35, sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_, v29, v30, v21, v36, v37, v27);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  _Block_release(v27);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v21 & 1) != 0)
LABEL_5:
    __break(1u);
  return result;
}

void *closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, void (*a7)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *);
  char v22;

  v22 = 0;
  if (!result)
    goto LABEL_13;
  result = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_10;
  }
  v14 = v13;
  if (__OFADD__(a2, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v15 = result;
  v21 = a7;
  result = (void *)StringProtocol._toUTF16Indices(_:)();
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v17 = v16;
  if (__OFADD__(a4, a5))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v18 = result;
  v19 = StringProtocol._toUTF16Indices(_:)();
  v21(v15, v14, v18, v17, v19, v20, &v22);
  result = (void *)swift_bridgeObjectRelease();
  if (v22 == 1)
    *a6 = v22;
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSLinguisticTag?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v13)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v14;

  v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v14 = a2;
  v13(a2, a3, a4, a5, a6, a7);

}

id StringProtocol.getBytes<A>(_:maxLength:usedLength:encoding:options:range:remaining:)(char **a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = *a4;
  v22 = 0;
  v23 = 0;
  StringProtocol._ephemeralString.getter();
  v18 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9 = *a1;
  if (*((_QWORD *)*a1 + 2) < a2)
    a2 = *((_QWORD *)*a1 + 2);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v10 = StringProtocol._toUTF16Offsets(_:)();
  v12 = v11 - v10;
  if (__OFSUB__(v11, v10))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  v13 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2), 0, v9);
  *a1 = v9;
  swift_bridgeObjectRetain();
  v14 = objc_msgSend(v18, sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_, v9 + 32, a2, a3, v19, a5, v13, v12, &v22);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v22 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_10;
  if (__OFADD__(v22, v23))
    goto LABEL_11;
  *a7 = StringProtocol._toUTF16Indices(_:)();
  a7[1] = v15;
  return v14;
}

uint64_t StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol._lineBounds<A>(around:));
}

uint64_t StringProtocol.getParagraphStart<A>(_:end:contentsEnd:for:)(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol._paragraphBounds<A>(around:));
}

uint64_t StringProtocol.getLineStart<A>(_:end:contentsEnd:for:)(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  result = a9(a4, a5, a6, a7, a8);
  *a1 = result;
  *a2 = v13;
  *a3 = v14;
  return result;
}

uint64_t StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[10];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];

  v12 = v11;
  v41 = a3;
  v42 = a4;
  v43[3] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v37 = a5;
    v39 = a10;
    v40 = a7;
    v43[0] = 0;
    StringProtocol._ephemeralString.getter();
    v15 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v38 = a8;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    v16 = StringProtocol._toUTF16Offsets(_:)();
    v18 = v17 - v16;
    if (!__OFSUB__(v17, v16))
    {
      v19 = v16;
      StringProtocol._ephemeralString.getter();
      v20 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v21 = objc_msgSend(v15, sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_, v19, v18, v20, v41, v42, v43);
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      if (v21)
      {
        v23 = (void *)v43[0];
        if (v43[0])
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();

          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v24 = swift_dynamicCastClass();
          v25 = v24;
          if (!v24)
          {
            swift_unknownObjectRelease();
            objc_msgSend(v23, sel_copy);
            v25 = _bridgeCocoaArray<A>(_:)();
            v24 = swift_unknownObjectRelease();
          }
          MEMORY[0x1E0C80A78](v24);
          v36[2] = a6;
          v36[3] = v40;
          v36[4] = v38;
          v36[5] = a9;
          v36[6] = v39;
          v36[7] = a11;
          v36[8] = v12;
          v26 = v23;
          v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyXlG_SnySS5IndexVGs5NeverOTg5((void (*)(__int128 *__return_ptr, uint64_t *))partial apply for closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:), (uint64_t)v36, v25);
          swift_bridgeObjectRelease();
          *v37 = v27;

          swift_bridgeObjectRelease();
        }
        goto LABEL_12;
      }
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  StringProtocol._ephemeralString.getter();
  v40 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v28 = StringProtocol._toUTF16Offsets(_:)();
  v30 = v29 - v28;
  if (__OFSUB__(v29, v28))
    goto LABEL_19;
  v31 = v28;
  StringProtocol._ephemeralString.getter();
  v32 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v40, sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_, v31, v30, v32, v41, v42, 0);
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  if (!v21)
    goto LABEL_21;
LABEL_12:
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v33 = swift_dynamicCastClass();
  if (v33)
  {
    v34 = v33;

  }
  else
  {
    swift_unknownObjectRelease();
    objc_msgSend(v21, sel_copy);
    v35 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v34 = specialized _arrayForceCast<A, B>(_:)(v35);

    swift_bridgeObjectRelease();
  }
  return v34;
}

uint64_t closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  result = (uint64_t)objc_msgSend(*a1, sel_respondsToSelector_, sel_rangeValue);
  if ((result & 1) != 0)
  {
    result = (uint64_t)objc_msgSend(v3, sel_rangeValue);
    if (result == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(1u);
    }
    else if (!__OFADD__(result, v5))
    {
      result = StringProtocol._toUTF16Indices(_:)();
      *a2 = result;
      a2[1] = v6;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t StringProtocol.rangeOfComposedCharacterSequence(at:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  StringProtocol._ephemeralString.getter();
  v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v0, sel_rangeOfComposedCharacterSequenceAtIndex_, StringProtocol._toUTF16Offset(_:)());
  v3 = v2;
  result = swift_unknownObjectRelease();
  if (v1 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
  }
  else if (!__OFADD__(v1, v3))
  {
    return StringProtocol._toUTF16Indices(_:)();
  }
  __break(1u);
  return result;
}

uint64_t StringProtocol.rangeOfComposedCharacterSequences<A>(for:)()
{
  void *v0;
  uint64_t result;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  StringProtocol._ephemeralString.getter();
  v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v2, result))
  {
    __break(1u);
    goto LABEL_6;
  }
  v3 = objc_msgSend(v0, sel_rangeOfComposedCharacterSequencesForRange_, result, v2 - result);
  v5 = v4;
  result = swift_unknownObjectRelease();
  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!__OFADD__(v3, v5))
    return StringProtocol._toUTF16Indices(_:)();
LABEL_7:
  __break(1u);
  return result;
}

id StringProtocol.addingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.replacingPercentEscapes(using:)(a1, a2, a3, (SEL *)&selRef_stringByAddingPercentEscapesUsingEncoding_);
}

id StringProtocol.replacingPercentEscapes(using:)(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v5 = *a1;
  StringProtocol._ephemeralString.getter();
  v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v6, *a4, v5);
  swift_unknownObjectRelease();
  if (!v7)
    return 0;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

id StringProtocol.substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.substring(from:)(a1, a2, a3, (SEL *)&selRef_substringFromIndex_);
}

id StringProtocol.substring(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.substring(from:)(a1, a2, a3, (SEL *)&selRef_substringToIndex_);
}

id StringProtocol.substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v5;
  id v6;
  id v7;

  StringProtocol._ephemeralString.getter();
  v5 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v5, *a4, StringProtocol._toUTF16Offset(_:)());
  swift_unknownObjectRelease();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

uint64_t StringProtocol.substring(with:)()
{
  void *v0;
  uint64_t result;
  uint64_t v2;
  id v3;
  id v4;

  StringProtocol._ephemeralString.getter();
  v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v2, result))
  {
    __break(1u);
  }
  else
  {
    v3 = objc_msgSend(v0, sel_substringWithRange_, result, v2 - result);
    swift_unknownObjectRelease();
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

    return (uint64_t)v4;
  }
  return result;
}

id @nonobjc NSString.init(contentsOfFile:usedEncoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithContentsOfFile_usedEncoding_error_, v5, a3, v10);
  swift_unknownObjectRelease();
  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    if (v10[0])
    {
      v10[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v8 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v6;
}

uint64_t sub_181DDC810()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StringProtocol.enumerateLines(invoking:)(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, char *);
  uint64_t result;
  char v7;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v3 + 16);
  v7 = 0;
  result = v5(a1, a2, &v7);
  if (v7 == 1)
    *a3 = v7;
  return result;
}

uint64_t sub_181DDC878()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

void *partial apply for closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;

  return closure #1 in StringProtocol.enumerateLinguisticTags<A, B>(in:scheme:options:orthography:invoking:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))(v6 + 64));
}

uint64_t sub_181DDC920()
{
  return swift_deallocObject();
}

uint64_t sub_181DDC930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in StringProtocol.linguisticTags<A, B>(in:scheme:options:orthography:tokenRanges:)(a1, a2);
}

ValueMetadata *type metadata accessor for _BPlistDecodingFormat()
{
  return &type metadata for _BPlistDecodingFormat;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingFormat.Map : PlistDecodingMap in _BPlistDecodingFormat()
{
  return &protocol witness table for BPlistMap;
}

uint64_t specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  return specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(a1, a2, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, a3);
}

{
  return specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(a1, a2, (uint64_t (*)(uint64_t))XMLPlistMap.Value.debugDataTypeDescription.getter, a3);
}

uint64_t specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, _QWORD *a4@<X8>)
{
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x756F662074756220;
  v9._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = a3(a2);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x64616574736E6920;
  v11._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a4 = a1;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v12 = *MEMORY[0x1E0DEC450];
  v13 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(a4, v12, v13);
}

uint64_t static _BPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::Int v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *i;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _UNKNOWN **v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;

  v7 = a3;
  if (a2 >> 60 != 3)
  {
    if (a2 >> 60 == 9 && (a2 == 0x9000000000000008 || a2 == 0x9000000000000010))
    {
      v9 = type metadata accessor for DecodingError();
      swift_allocError();
      v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v12 = v7[5];
      swift_retain();
      _CodingPathNode.path.getter(v12);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, *MEMORY[0x1E0DEC460], v9);
      return swift_willThrow();
    }
    else
    {
      v14 = a3[5];
      swift_retain();
      _CodingPathNode.path.getter(v14);
      swift_release();
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v15, a2, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v16);
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }
  v17 = *(_QWORD *)(a2 + 16);
  v66 = v17 + 64;
  v18 = -1 << *(_BYTE *)(v17 + 32);
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & *(_QWORD *)(v17 + 64);
  v21 = *(_QWORD *)(v17 + 16);
  v76 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v22 = v21 >> 1;
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  Dictionary.reserveCapacity(_:)(v22);
  v23 = v76;
  v24 = 63 - v18;
  v25 = v6;
  v65 = v24 >> 6;
  swift_retain();
  v26 = 0;
  v67 = v17;
  for (i = v7; ; v7 = i)
  {
    if (v20)
    {
      v71 = (v20 - 1) & v20;
      v27 = __clz(__rbit64(v20)) | (v26 << 6);
      v28 = v26;
    }
    else
    {
      v28 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_62;
      if (v28 >= v65)
      {
LABEL_58:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_release();
        swift_bridgeObjectRelease();
        v76 = v7;
        v77 = v23;
        v78 = a4;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        *(_QWORD *)&v73 = a5;
        *((_QWORD *)&v73 + 1) = &type metadata for _BPlistDecodingFormat;
        v74 = a6;
        v75 = &protocol witness table for _BPlistDecodingFormat;
        type metadata accessor for _PlistKeyedDecodingContainer();
      }
      v29 = *(_QWORD *)(v66 + 8 * v28);
      if (!v29)
      {
        v30 = v26 + 2;
        if (v26 + 2 >= v65)
          goto LABEL_58;
        v29 = *(_QWORD *)(v66 + 8 * v30);
        if (!v29)
        {
          v30 = v26 + 3;
          if (v26 + 3 >= v65)
            goto LABEL_58;
          v29 = *(_QWORD *)(v66 + 8 * v30);
          if (!v29)
          {
            v30 = v26 + 4;
            if (v26 + 4 >= v65)
              goto LABEL_58;
            v29 = *(_QWORD *)(v66 + 8 * v30);
            if (!v29)
            {
              v30 = v26 + 5;
              if (v26 + 5 >= v65)
                goto LABEL_58;
              v29 = *(_QWORD *)(v66 + 8 * v30);
              if (!v29)
              {
                v30 = v26 + 6;
                if (v26 + 6 >= v65)
                  goto LABEL_58;
                v29 = *(_QWORD *)(v66 + 8 * v30);
                if (!v29)
                {
                  v30 = v26 + 7;
                  if (v26 + 7 >= v65)
                    goto LABEL_58;
                  v29 = *(_QWORD *)(v66 + 8 * v30);
                  if (!v29)
                  {
                    while (1)
                    {
                      v28 = v30 + 1;
                      if (__OFADD__(v30, 1))
                        goto LABEL_63;
                      if (v28 >= v65)
                        goto LABEL_58;
                      v29 = *(_QWORD *)(v66 + 8 * v28);
                      ++v30;
                      if (v29)
                        goto LABEL_31;
                    }
                  }
                }
              }
            }
          }
        }
        v28 = v30;
      }
LABEL_31:
      v71 = (v29 - 1) & v29;
      v27 = __clz(__rbit64(v29)) + (v28 << 6);
    }
    v31 = 8 * v27;
    v32 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + v31);
    v72 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + v31);
    swift_retain();
    v33 = BPlistMap.loadValue(at:)(v32);
    if (v25)
    {
      v76 = v23;
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_57:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_release_n();
    }
    v34 = v33;
    swift_release();
    v79 = v34;
    if (v34 >> 60 == 9)
    {
      v76 = v23;
      if (((v34 + 0x6FFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF7) == 0)
      {
        v58 = type metadata accessor for DecodingError();
        swift_allocError();
        v60 = v59;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v60 = MEMORY[0x1E0DEA968];
        _CodingPathNode.path.getter(a4);
        *(_QWORD *)&v73 = 0;
        *((_QWORD *)&v73 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(50);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        v61 = v60;
        v57 = v79;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v61, *MEMORY[0x1E0DEC460], v58);
        swift_willThrow();
        goto LABEL_56;
      }
      goto LABEL_53;
    }
    v35 = v7[3];
    if (v34 >> 60)
    {
      v76 = v23;
LABEL_53:
      swift_retain();
      _CodingPathNode.path.getter(a4);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E0DEA968], v79, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v53);
      swift_bridgeObjectRelease();
LABEL_55:
      swift_willThrow();
      swift_release();
      v57 = v79;
LABEL_56:
      outlined consume of BPlistMap.Value(v57);
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      goto LABEL_57;
    }
    v69 = v28;
    v36 = *(_QWORD *)(v34 + 24);
    v70 = *(_QWORD *)(v34 + 16);
    MEMORY[0x1E0C80A78](v35);
    v38 = *(_QWORD *)(v37 + 64);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v38 + 40));
    specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v38 + 16), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:), v70, v36, &v73);
    v25 = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 40));
    swift_release();
    v20 = *((_QWORD *)&v73 + 1);
    if (!*((_QWORD *)&v73 + 1))
    {
      v76 = v23;
      v54 = type metadata accessor for DecodingError();
      swift_allocError();
      v56 = v55;
      swift_retain();
      _CodingPathNode.path.getter(a4);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v56, *MEMORY[0x1E0DEC458], v54);
      swift_release();
      goto LABEL_55;
    }
    v39 = v73;
    swift_release();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v73 = v23;
    v42 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v20);
    v43 = v23[2];
    v44 = (v41 & 1) == 0;
    v45 = v43 + v44;
    if (__OFADD__(v43, v44))
      break;
    v46 = v41;
    if (v23[3] >= v45)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v20);
      if ((v46 & 1) != (v48 & 1))
        goto LABEL_64;
      v42 = v47;
    }
    v23 = (_QWORD *)v73;
    if ((v46 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v73 + 56) + 8 * v42) = v72;
    }
    else
    {
      *(_QWORD *)(v73 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      v49 = (uint64_t *)(v23[6] + 16 * v42);
      *v49 = v39;
      v49[1] = v20;
      *(_QWORD *)(v23[7] + 8 * v42) = v72;
      v50 = v23[2];
      v51 = __OFADD__(v50, 1);
      v52 = v50 + 1;
      if (v51)
        goto LABEL_61;
      v23[2] = v52;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of BPlistMap.Value(v79);
    v26 = v69;
    v20 = v71;
    v17 = v67;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v20);
  swift_release();
  __break(1u);
LABEL_64:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static _BPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 >> 60 == 1)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(v16 + 16);
    a4[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat>);
    a4[4] = lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>();
    v18 = swift_allocObject();
    *a4 = v18;
    *(_OWORD *)(v18 + 32) = xmmword_182162C40;
    *(_QWORD *)(v18 + 16) = a2;
    *(_QWORD *)(v18 + 24) = v16;
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 72) = a3;
    *(_QWORD *)(v18 + 48) = v17;
    *(_BYTE *)(v18 + 56) = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else
  {
    if (a1 >> 60 == 9 && (a1 == 0x9000000000000008 || a1 == 0x9000000000000010))
    {
      v7 = type metadata accessor for DecodingError();
      swift_allocError();
      v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      v10 = *(_QWORD *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v11);
      swift_release();
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v12, a1, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v13);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
}

uint64_t static _BPlistDecodingFormat.unwrapBool<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  char *v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = a5;
  v31 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v29 - v15;
  if (v16 >> 60 == 6)
  {
    v19 = *(_BYTE *)(v16 + 16);
  }
  else
  {
    v29 = v16;
    v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v20((char *)&v29 - v15, a3, v10, v17);
    ((void (*)(char *, char *, uint64_t))v20)(v13, v18, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, a4) == 1)
    {
      v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v13, v10);
      _CodingPathNode.path.getter(v31);
      v21(v18, v10);
    }
    else
    {
      v22 = v9;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, a4);
      v23 = _CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v25 = v30;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v22, a4);
      v32 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v22, a4);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E0DEAFA0], v29, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v19 & 1;
}

void static _BPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  BPlistMap.Value.dateValue<A>(in:for:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t static _BPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BPlistMap.Value.dataValue<A>(in:for:_:)(a2, a3, a4, a1, a5, a6);
}

uint64_t static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t result;
  void (*v36)(char *, uint64_t, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, char *);
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *);
  unint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;

  v73 = a2;
  v72 = a6;
  v77 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v71 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v69 = (char *)&v65 - v13;
  v14 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v65 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v65 - v21;
  v26 = MEMORY[0x1E0C80A78](v23);
  v70 = (char *)&v65 - v27;
  v75 = a3;
  if (a1 >> 60)
  {
    v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
    v37 = a4;
    v38 = v25;
    v36(v19, v37, v14, v26);
    ((void (*)(char *, char *, uint64_t))v36)(v16, v19, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, a5) == 1)
    {
      v39 = *(void (**)(char *, uint64_t))(v38 + 8);
      v39(v16, v14);
      _CodingPathNode.path.getter(v75);
      v39(v19, v14);
    }
    else
    {
      v40 = v71;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v16, a5);
      v41 = v10;
      v42 = _CodingPathNode.path.getter(v75);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v44 = v72;
      *(_QWORD *)(inited + 56) = a5;
      *(_QWORD *)(inited + 64) = v44;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 16))(boxed_opaque_existential_1, v40, a5);
      *(_QWORD *)&v76 = v42;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v14);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E0DEA968], a1, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v46);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v68 = a5;
  v65 = v10;
  v66 = v25;
  v71 = (char *)v14;
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 24);
  MEMORY[0x1E0C80A78](v24);
  v67 = &v65;
  *((_BYTE *)&v65 - 16) = v30;
  v31 = *(_QWORD *)(v73 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v31 + 40));
  v32 = v74;
  specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v31 + 16), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:), v28, v29, &v76);
  if (v32)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 40));
    result = swift_release();
    __break(1u);
    return result;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 40));
  swift_release();
  v33 = v71;
  v34 = v68;
  if (*((_QWORD *)&v76 + 1))
    return v76;
  v47 = v66;
  v48 = *(void (**)(char *, uint64_t, char *))(v66 + 16);
  v49 = v70;
  v48(v70, a4, v71);
  v48(v22, (uint64_t)v49, v33);
  v50 = v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v22, 1, v34) != 1)
  {
    v53 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    v54 = v69;
    v53(v69, v22, v34);
    v55 = (uint64_t *)swift_allocObject();
    v56 = v72;
    v55[5] = v34;
    v55[6] = v56;
    v57 = __swift_allocate_boxed_opaque_existential_1(v55 + 2);
    v53((char *)v57, v54, v34);
    (*(void (**)(char *, char *))(v47 + 8))(v49, v33);
    v58 = v75;
    v55[7] = v75;
    if (v58 >> 62)
    {
      if (v58 >> 62 != 1)
      {
        v61 = 1;
LABEL_16:
        v55[8] = v61;
        v52 = (unint64_t)v55;
        goto LABEL_17;
      }
      v59 = (uint64_t *)((v58 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v59 = (uint64_t *)(v58 + 64);
    }
    v60 = *v59;
    swift_retain();
    v61 = v60 + 1;
    if (__OFADD__(v60, 1))
      __break(1u);
    goto LABEL_16;
  }
  v51 = *(void (**)(char *, char *))(v47 + 8);
  v51(v49, v33);
  v51(v22, v33);
  v52 = v75;
  swift_retain();
LABEL_17:
  v62 = type metadata accessor for DecodingError();
  swift_allocError();
  v64 = v63;
  _CodingPathNode.path.getter(v52);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v62 - 8) + 104))(v64, *MEMORY[0x1E0DEC458], v62);
  swift_release();
  return swift_willThrow();
}

uint64_t static _BPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)@<X0>(unint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, __n128);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t result;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t inited;
  uint64_t v75;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v77;
  uint64_t v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;

  v89 = a6;
  v91 = a5;
  v92 = a1;
  v93 = a2;
  v90 = a7;
  v99 = *MEMORY[0x1E0C80C00];
  v95 = a3;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v87 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v16);
  v88 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = a4;
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v87 - v23;
  if (v24 >> 60 != 7)
  {
    if (v24 >> 60 != 8)
    {
      v66 = v24;
      v67 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
      v67((char *)&v87 - v23, v93, v18, v25);
      ((void (*)(char *, char *, uint64_t))v67)(v21, v26, v18);
      v68 = v94;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v21, 1, v94) == 1)
      {
        v69 = *(void (**)(char *, uint64_t))(v19 + 8);
        v69(v21, v18);
        _CodingPathNode.path.getter(v92);
        v69(v26, v18);
      }
      else
      {
        v72 = v88;
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v88, v21, v68);
        v73 = _CodingPathNode.path.getter(v92);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v75 = v89;
        *(_QWORD *)(inited + 56) = v68;
        *(_QWORD *)(inited + 64) = v75;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_1, v72, v68);
        v97 = v73;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v72, v68);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v95, v66, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v77);
      goto LABEL_27;
    }
    v27 = *(_QWORD *)(v24 + 16);
    v28 = v94;
    if (*(_BYTE *)(v24 + 24) != 1 || (v27 & 0x8000000000000000) == 0)
    {
      v97 = *(_QWORD *)(v24 + 16);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      return dispatch thunk of FloatingPoint.init<A>(_:)();
    }
    v29 = v24 & 0xFFFFFFFFFFFFFFFLL;
    v97 = 0;
    v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v30._countAndFlagsBits = 0xD00000000000001DLL;
    v30._object = (void *)0x800000018230D0E0;
    String.append(_:)(v30);
    v96 = v27;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._object = (void *)0x800000018230D100;
    v32._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v32);
    v33._countAndFlagsBits = 0x3436746E4955;
    v33._object = (void *)0xE600000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 46;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    v35 = v97;
    v36 = v98;
    type metadata accessor for DecodingError();
    v37 = (void *)swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v35, v36, v92, v93, v28, v89, v38);
    swift_bridgeObjectRelease();
    swift_willThrow();

    v39 = *(_QWORD *)(v29 + 16);
    if ((*(_BYTE *)(v29 + 24) & 1) != 0 || (v39 & 0x8000000000000000) == 0)
    {
      v97 = *(_QWORD *)(v29 + 16);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      return dispatch thunk of FloatingPoint.init<A>(_:)();
    }
    v97 = 0;
    v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v40._countAndFlagsBits = 0xD00000000000001DLL;
    v40._object = (void *)0x800000018230D0E0;
    String.append(_:)(v40);
    v96 = v39;
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._object = (void *)0x800000018230D100;
    v42._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v42);
    v43._countAndFlagsBits = 0x3436746E49;
    v43._object = (void *)0xE500000000000000;
    String.append(_:)(v43);
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    v45 = v97;
    v46 = v98;
    swift_allocError();
    v48 = v47;
    v49 = v45;
    v50 = v46;
    v51 = v92;
    v52 = v93;
    v53 = v28;
LABEL_26:
    static DecodingError._dataCorrupted<A>(_:for:_:)(v49, v50, v51, v52, v53, v89, v48);
LABEL_27:
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v54 = *(_QWORD *)(v24 + 16);
  v55 = *(_QWORD *)(v24 + 24);
  if (v55 != 4)
  {
    v71 = v95;
    if (v55 == 8)
    {
      if ((~v54 & 0x7FF0000000000000) != 0 || (v54 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        v97 = *(_QWORD *)(v24 + 16);
        lazy protocol witness table accessor for type Double and conformance Double();
        dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
        v78 = *(_QWORD *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v11, 1, v71) == 1)
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          v97 = 0;
          v98 = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          v79._countAndFlagsBits = 0xD000000000000016;
          v79._object = (void *)0x800000018230E260;
          String.append(_:)(v79);
          Double.write<A>(to:)();
          v80._object = (void *)0x800000018230D100;
          v80._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v80);
          v81._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v81);
          swift_bridgeObjectRelease();
          v82._countAndFlagsBits = 46;
          v82._object = (void *)0xE100000000000000;
          String.append(_:)(v82);
          v83 = v97;
          v84 = v98;
          type metadata accessor for DecodingError();
          swift_allocError();
          v48 = v85;
          v49 = v83;
          v50 = v84;
          v51 = v92;
          v52 = v93;
          v53 = v94;
          goto LABEL_26;
        }
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v90, v11, v71);
      }
      return dispatch thunk of static FloatingPoint.nan.getter();
    }
LABEL_31:
    v97 = 0;
    v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v97 = 0xD000000000000023;
    v98 = 0x800000018230E230;
    v96 = v55;
    v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v86);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v56 = v95;
  if (HIDWORD(v54))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_31;
  }
  v57 = v94;
  if ((~(_DWORD)v54 & 0x7F800000) == 0 && (v54 & 0x7FFFFF) != 0)
    return dispatch thunk of static FloatingPoint.nan.getter();
  LODWORD(v97) = *(_QWORD *)(v24 + 16);
  lazy protocol witness table accessor for type Float and conformance Float();
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  v58 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v14, 1, v56) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    v97 = 0;
    v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v59._countAndFlagsBits = 0xD000000000000016;
    v59._object = (void *)0x800000018230E260;
    String.append(_:)(v59);
    Float.write<A>(to:)();
    v60._object = (void *)0x800000018230D100;
    v60._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v60);
    v61._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 46;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    v63 = v97;
    v64 = v98;
    type metadata accessor for DecodingError();
    swift_allocError();
    v48 = v65;
    v49 = v63;
    v50 = v64;
    v51 = v92;
    v52 = v93;
    v53 = v57;
    goto LABEL_26;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v90, v14, v56);
}

uint64_t static _BPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void (*v43)(char *, uint64_t, uint64_t, __n128);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t inited;
  uint64_t v58;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v60;
  uint64_t result;
  Swift::String v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;

  v66 = a6;
  v67 = a2;
  v68 = a3;
  v64 = a7;
  v74 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v63 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v10;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v63 - v16;
  v70 = a4;
  v18 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v63 - v22;
  v28 = MEMORY[0x1E0C80A78](v24);
  v30 = (char *)&v63 - v29;
  if (v26 >> 60 == 8)
  {
    v38 = v27;
    v39 = v25;
    v40 = *(_QWORD *)(v26 + 16);
    if ((*(_BYTE *)(v26 + 24) & 1) != 0)
    {
      v72 = *(_QWORD *)(v26 + 16);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v33 = v70;
      dispatch thunk of Numeric.init<A>(exactly:)();
      v41 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v23, 1, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v39);
        v72 = 0;
        v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v42._countAndFlagsBits = 0xD00000000000001DLL;
        v42._object = (void *)0x800000018230D0E0;
        String.append(_:)(v42);
        v71 = v40;
LABEL_24:
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      v20 = v23;
    }
    else
    {
      v72 = *(_QWORD *)(v26 + 16);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      v33 = v70;
      dispatch thunk of Numeric.init<A>(exactly:)();
      v41 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v20, 1, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
        v72 = 0;
        v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v47._countAndFlagsBits = 0xD00000000000001DLL;
        v47._object = (void *)0x800000018230D0E0;
        String.append(_:)(v47);
        v71 = v40;
        goto LABEL_24;
      }
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v64, v20, v33);
  }
  if (v26 >> 60 != 7)
  {
    v65 = v26;
    v43 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
    v43(v17, v68, v11, v28);
    ((void (*)(char *, char *, uint64_t))v43)(v14, v17, v11);
    v44 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v69) == 1)
    {
      v45 = *(void (**)(char *, uint64_t))(v12 + 8);
      v45(v14, v11);
      _CodingPathNode.path.getter(v67);
      v45(v17, v11);
    }
    else
    {
      v55 = v63;
      (*(void (**)(void))(v8 + 32))();
      v56 = _CodingPathNode.path.getter(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v58 = v66;
      *(_QWORD *)(inited + 56) = v44;
      *(_QWORD *)(inited + 64) = v58;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v55, v44);
      v72 = v56;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v55, v44);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v70, v65, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v60);
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(v26 + 16);
  v32 = *(_QWORD *)(v26 + 24);
  if (v32 == 4)
  {
    v33 = v70;
    if (!HIDWORD(v31))
    {
      v34 = v27;
      v35 = v25;
      if ((v31 & 0x7FFFFF) != 0 && (~(_DWORD)v31 & 0x7F800000) == 0)
        v37 = NAN;
      else
        v37 = *(float *)&v31;
LABEL_20:
      v72 = *(_QWORD *)&v37;
      lazy protocol witness table accessor for type Double and conformance Double();
      dispatch thunk of FloatingPoint.init<A>(_:)();
      v41 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v30, 1, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v35);
        v72 = 0;
        v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        v46._countAndFlagsBits = 0xD000000000000016;
        v46._object = (void *)0x800000018230E260;
        String.append(_:)(v46);
        Double.write<A>(to:)();
LABEL_25:
        v49._object = (void *)0x800000018230D100;
        v49._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v49);
        v50._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        v51._countAndFlagsBits = 46;
        v51._object = (void *)0xE100000000000000;
        String.append(_:)(v51);
        v52 = v72;
        v53 = v73;
        type metadata accessor for DecodingError();
        swift_allocError();
        static DecodingError._dataCorrupted<A>(_:for:_:)(v52, v53, v67, v68, v69, v66, v54);
LABEL_29:
        swift_bridgeObjectRelease();
        return swift_willThrow();
      }
      v20 = v30;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v64, v20, v33);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v33 = v70;
    if (v32 == 8)
    {
      v34 = v27;
      v35 = v25;
      v37 = *(double *)(v26 + 16);
      if ((~v31 & 0x7FF0000000000000) == 0 && (v31 & 0xFFFFFFFFFFFFFLL) != 0)
        v37 = NAN;
      goto LABEL_20;
    }
  }
  v72 = 0;
  v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v72 = 0xD000000000000023;
  v73 = 0x800000018230E230;
  v71 = v32;
  v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static PlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:) in conformance _BPlistDecodingFormat(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(a1, *a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:) in conformance _BPlistDecodingFormat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static _BPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)(*a1, a2, a3, a4);
}

BOOL protocol witness for static PlistDecodingFormat.valueIsNull(_:) in conformance _BPlistDecodingFormat(_QWORD *a1)
{
  return ((*a1 + 0x6FFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF7) == 0 && *a1 >> 60 == 9;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapBool<A>(from:for:_:) in conformance _BPlistDecodingFormat(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _BPlistDecodingFormat.unwrapBool<A>(from:for:_:)(*a1, a2, a3, a4, a5) & 1;
}

void protocol witness for static PlistDecodingFormat.unwrapDate<A>(from:in:for:_:) in conformance _BPlistDecodingFormat(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  static _BPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapData<A>(from:in:for:_:) in conformance _BPlistDecodingFormat(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapString<A>(from:in:for:_:) in conformance _BPlistDecodingFormat(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:) in conformance _BPlistDecodingFormat@<X0>(unint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  return static _BPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:) in conformance _BPlistDecodingFormat@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  return static _BPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7);
}

id partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return partial apply for closure #1 in static _BPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v5;
  id result;
  uint64_t v7;

  if (*(_BYTE *)(v3 + 16))
    v5 = 1;
  else
    v5 = 2415919360;
  result = specialized String.init<A>(bytes:encoding:)(a1, a2, v5);
  *a3 = result;
  a3[1] = v7;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_28;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
      {
        v9 = v23 + 2;
        if (v23 + 2 >= v13)
          goto LABEL_28;
        v24 = *(_QWORD *)(v6 + 8 * v9);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 3;
  if (v25 >= v13)
    goto LABEL_28;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, XMLPlistMap.Value>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    outlined copy of XMLPlistMap.Value(v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

_QWORD *specialized closure #1 in BPlistMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(__int128 *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  __int128 v10;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v10, *result + a3, a4);
    if (!v5)
      *a5 = v10;
  }
  return result;
}

uint64_t sub_181DDF558()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat>);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistUnkeyedDecodingContainer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_BPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>);
  }
  return result;
}

uint64_t sub_181DDF5D4()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 40);
  if ((~v1 & 0xF000000000000007) != 0)
    outlined consume of BPlistMap.Value(v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t _TimeZoneProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

NSTimeZone __swiftcall _TimeZoneProtocol.bridgeToNSTimeZone()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  objc_super v8;

  v2 = v0;
  v3 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  v4 = (char *)objc_allocWithZone(v3);
  v5 = &v4[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(_QWORD *)v5 = v1;
  *((_QWORD *)v5 + 1) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 16) = xmmword_1820E9CE0;
  *(_QWORD *)&v4[OBJC_IVAR____NSSwiftTimeZone_lock] = v6;
  v8.receiver = v4;
  v8.super_class = v3;
  swift_unknownObjectRetain();
  return (NSTimeZone)objc_msgSendSuper2(&v8, sel_init);
}

uint64_t dispatch thunk of _TimeZoneProtocol.init(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.abbreviation(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.isDaylightSavingTime(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.daylightSavingTimeOffset(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of _TimeZoneProtocol.bridgeToNSTimeZone()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

Swift::Int_optional __swiftcall NSIndexSetIterator.next()()
{
  uint64_t v0;
  id v1;
  Swift::Bool v2;
  Swift::Int v3;
  Swift::Int_optional result;

  if (*(_BYTE *)(v0 + 8) == 1)
  {
    v1 = objc_msgSend(*(id *)v0, sel_firstIndex);
    *(_QWORD *)(v0 + 16) = v1;
    *(_BYTE *)(v0 + 24) = 0;
    *(_BYTE *)(v0 + 8) = 0;
  }
  else
  {
    v1 = *(id *)(v0 + 16);
    if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    {
      v2 = 1;
      goto LABEL_9;
    }
    v1 = objc_msgSend(*(id *)v0, sel_indexGreaterThanIndex_, v1);
    *(_QWORD *)(v0 + 16) = v1;
    *(_BYTE *)(v0 + 24) = 0;
  }
  if (v1 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v1 = 0;
    *(_QWORD *)(v0 + 16) = 0;
    v2 = 1;
    *(_BYTE *)(v0 + 24) = 1;
  }
  else
  {
    v2 = 0;
  }
LABEL_9:
  v3 = (Swift::Int)v1;
  result.value = v3;
  result.is_nil = v2;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance NSIndexSetIterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3;

  v3 = NSIndexSetIterator.next()();
  *(_QWORD *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

id NSIndexSet.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return v1;
}

unint64_t lazy protocol witness table accessor for type NSIndexSetIterator and conformance NSIndexSetIterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator;
  if (!lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSIndexSetIterator, &type metadata for NSIndexSetIterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSIndexSetIterator and conformance NSIndexSetIterator);
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance NSIndexSet(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSIndexSet()
{
  void **v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  v3 = v2;

  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NSIndexSet(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NSIndexSet@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t initializeWithCopy for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for NSIndexSetIterator(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSIndexSetIterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSIndexSetIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSIndexSetIterator()
{
  return &type metadata for NSIndexSetIterator;
}

uint64_t type metadata completion function for _PlistDecoder()
{
  return swift_initClassMetadata2();
}

uint64_t _PlistDecoder.codingPath.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

_QWORD *_PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v25 = a3;
  v6 = *(_QWORD *)(*v3 + 80);
  v5 = *(_QWORD *)(*v3 + 88);
  swift_getAssociatedTypeWitness();
  v21 = v6;
  v22 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v21 - v10;
  _swift_isClassOrObjCExistentialType();
  v3[2] = MEMORY[0x1E0DEE9D8];
  v3[3] = a1;
  v12 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  swift_unknownObjectRetain();
  v13 = swift_checkMetadataState();
  v14 = v23;
  v12(v13, AssociatedConformanceWitness);
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    type metadata accessor for _PlistDecoder(0, v21, v22, v17);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v18 = type metadata accessor for _PlistDecodingStorage(0, AssociatedTypeWitness, v15, v16);
    specialized _PlistDecodingStorage.push(container:)((uint64_t)v11, v18);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    v19 = v25;
    v3[4] = v24;
    v3[5] = v19;
  }
  return v3;
}

uint64_t _PlistDecoder.container<A>(keyedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a3;
  v31 = a2;
  v27 = a4;
  v28 = a1;
  v6 = *(_QWORD *)(*v4 + 80);
  v5 = *(_QWORD *)(*v4 + 88);
  swift_getAssociatedTypeWitness();
  v32 = v5;
  v29 = v6;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v25 - v16;
  v30 = v4;
  v18 = v4[2];
  swift_bridgeObjectRetain_n();
  v19 = MEMORY[0x186DA4B68](v18, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v19)
  {
    v34 = v18;
    v20 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v20);
    BidirectionalCollection.last.getter();
    v19 = v26;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v10, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v19);
      swift_bridgeObjectRelease();
      v21 = v30;
      v22 = v30[5];
      v23 = *(void (**)(uint64_t, char *, _QWORD *, uint64_t, uint64_t, uint64_t))(v32 + 24);
      swift_retain();
      v23(v28, v17, v21, v22, v31, v33);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.unkeyedContainer()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD *, uint64_t);
  uint64_t result;
  _QWORD v22[2];
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22[1] = a1;
  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  swift_getAssociatedTypeWitness();
  v24 = v3;
  v25 = v2;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22[0] = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v22[0] - 8);
  MEMORY[0x1E0C80A78](v22[0]);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v22 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v22 - v13;
  v23 = v1;
  v15 = v1[2];
  swift_bridgeObjectRetain_n();
  v16 = MEMORY[0x186DA4B68](v15, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v16)
  {
    v26 = v15;
    v17 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v17);
    BidirectionalCollection.last.getter();
    v16 = v22[0];
    (*(void (**)(char *, char *, _QWORD))(v5 + 16))(v7, v10, v22[0]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v16);
      swift_bridgeObjectRelease();
      v18 = v23;
      v19 = v23[5];
      v20 = *(void (**)(char *, _QWORD *, uint64_t))(v25 + 32);
      swift_retain();
      v20(v14, v18, v19);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v16);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.singleValueContainer()@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for _PlistDecoder(0, *(_QWORD *)(*(_QWORD *)v2 + 80), *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  a2[3] = v4;
  a2[4] = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDecoder<A>, v4);
  *a2 = v2;
  return swift_retain();
}

uint64_t _PlistDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _PlistDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistDecoder);
}

uint64_t protocol witness for Decoder.codingPath.getter in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.codingPath.getter();
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance _PlistDecoder<A>()
{
  WeekendRange.start.getter();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance _PlistDecoder<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDecoder.container<A>(keyedBy:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance _PlistDecoder<A>@<X0>(uint64_t a1@<X8>)
{
  return _PlistDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance _PlistDecoder<A>@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  return _PlistDecoder.singleValueContainer()(a1, a2);
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance _PlistDecoder<A>@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDecoder.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t _PlistDecoder.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  ValueMetadata *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a3;
  v24 = a4;
  v25 = a1;
  v26 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - v14;
  v27 = v4;
  v16 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  v17 = MEMORY[0x186DA4B68](v16, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v17)
  {
    v28 = v16;
    v18 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v18);
    BidirectionalCollection.last.getter();
    v17 = v22;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v8, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v17);
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v27 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)((uint64_t)v15, v25, v19, 0, 0, 0, 255, v26, v24, v23);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  __break(1u);
  return result;
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:configuration:) in conformance _PlistDecoder<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistDecoder.decode<A>(_:configuration:)(a1, a2, a3, a4, a5);
}

uint64_t _PlistDecoder.decode<A>(_:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = a4;
  v25 = a3;
  v27 = a1;
  v28 = a2;
  v26 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - v15;
  v29 = v5;
  v17 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain_n();
  v18 = MEMORY[0x186DA4B68](v17, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v30 = v17;
    v19 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v19);
    BidirectionalCollection.last.getter();
    v18 = v23;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v9, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v18);
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v29 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:configuration:for:_:)((uint64_t)v16, v27, v28, v20, 0, 0, 0, 255, v26, v25, v24);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v56 = a8;
  LODWORD(v64) = a7;
  v58 = a5;
  v59 = a6;
  v55 = a9;
  v16 = *(_QWORD *)(*(_QWORD *)v10 + 80);
  v15 = *(_QWORD *)(*(_QWORD *)v10 + 88);
  swift_getAssociatedTypeWitness();
  v54 = v15;
  v17 = v16;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  if (a2 == &type metadata for Date)
  {
    result = specialized _PlistDecoder.unwrapDate<A>(from:for:_:)(a1, a3, a4, v58, v59, v64);
    if (v57)
      return result;
    return swift_dynamicCast();
  }
  v52 = v19;
  v53 = a1;
  v22 = a4;
  v23 = v58;
  v24 = v10;
  v25 = v64;
  if (a2 == &type metadata for Data)
  {
    result = (uint64_t)specialized _PlistDecoder.unwrapData<A>(from:for:_:)(v53, a3, v22, v58, v59, v64);
    if (v57)
      return result;
    v60 = result;
    v61 = v30;
    return swift_dynamicCast();
  }
  v50 = (char *)&v49 - v20;
  v51 = v21;
  v26 = v59;
  if ((_BYTE)v64 == 0xFF)
  {
    v31 = v59;
    v32 = a3 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    v33 = v22;
    v34 = v52;
    goto LABEL_18;
  }
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 40) = &type metadata for _CodingKey;
  *(_QWORD *)(v27 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  *(_QWORD *)(v27 + 16) = result;
  *(_QWORD *)(result + 16) = v22;
  *(_QWORD *)(result + 24) = v23;
  *(_QWORD *)(result + 32) = v26;
  *(_BYTE *)(result + 40) = v25;
  *(_QWORD *)(v27 + 56) = a3;
  if (a3 >> 62)
  {
    if (a3 >> 62 != 1)
    {
      v33 = v22;
      v35 = 0;
      goto LABEL_16;
    }
    v29 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v29 = (uint64_t *)(a3 + 64);
  }
  v35 = *v29;
  result = swift_retain();
  v33 = v22;
LABEL_16:
  v36 = v35 + 1;
  v34 = v52;
  if (__OFADD__(v35, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  v31 = v26;
  *(_QWORD *)(v27 + 64) = v36;
  v32 = v27 & 0x3FFFFFFFFFFFFFFFLL;
  a3 = v27;
LABEL_18:
  v59 = a10;
  v37 = *(_QWORD *)(v24 + 40);
  *(_QWORD *)(v24 + 40) = a3;
  outlined copy of _CodingKey?(v33, v23, v31, v25);
  v40 = type metadata accessor for _PlistDecodingStorage(0, v34, v38, v39);
  v64 = v32;
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v53, v40);
  v62 = type metadata accessor for _PlistDecoder(0, v17, v54, v41);
  v63 = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDecoder<A>, v62);
  v60 = v24;
  swift_retain();
  v42 = v57;
  dispatch thunk of Decodable.init(from:)();
  if (!v42)
    goto LABEL_21;
  *(_QWORD *)(v24 + 40) = v37;
  swift_retain();
  swift_release();
  v43 = swift_bridgeObjectRetain();
  v44 = MEMORY[0x186DA4B68](v43, v34);
  swift_bridgeObjectRelease();
  if (!v44)
  {
    __break(1u);
LABEL_21:
    *(_QWORD *)(v24 + 40) = v37;
    swift_retain();
    swift_release();
    v45 = swift_bridgeObjectRetain();
    v46 = MEMORY[0x186DA4B68](v45, v34);
    result = swift_bridgeObjectRelease();
    if (v46)
      goto LABEL_22;
LABEL_25:
    __break(1u);
    return result;
  }
LABEL_22:
  v47 = type metadata accessor for Array();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v47);
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v47);
  v48 = v50;
  RangeReplaceableCollection<>.removeLast()();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v34);
  swift_release();
  return swift_release();
}

uint64_t _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  ValueMetadata *v25;
  __n128 v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  int v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t *v43;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  ValueMetadata *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t AssociatedTypeWitness;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v71 = a3;
  v9 = v8;
  v72 = a7;
  v65 = a6;
  v68 = a4;
  v69 = a1;
  v76 = a2;
  v67 = a8;
  v12 = *(_QWORD *)(*(_QWORD *)v8 + 80);
  v11 = *(_QWORD *)(*(_QWORD *)v8 + 88);
  swift_getAssociatedTypeWitness();
  v63 = v12;
  v64 = v11;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v62 = (char *)&v58 - v14;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v58 - v24;
  if (v25 == &type metadata for Date)
  {
    v38 = v70;
    result = _PlistDecoder.unwrapDate<A>(from:for:_:)(v69, v76, v71, a5, v72, (uint64_t)v73);
    if (v38)
      return result;
    return swift_dynamicCast();
  }
  v61 = v9;
  if (v25 == &type metadata for Data)
  {
    v40 = v70;
    result = (uint64_t)_PlistDecoder.unwrapData<A>(from:for:_:)(v69, v76, v71, a5, v72);
    if (v40)
      return result;
    v73[0] = result;
    v73[1] = v41;
    return swift_dynamicCast();
  }
  v59 = v13;
  v60 = v25;
  v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  v28((char *)&v58 - v24, v71, v19, v26);
  ((void (*)(char *, char *, uint64_t))v28)(v22, v27, v19);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v22, 1, a5);
  v30 = v72;
  if (v29 == 1)
  {
    v31 = *(void (**)(char *, uint64_t))(v20 + 8);
    v31(v27, v19);
    v31(v22, v19);
    v32 = v76;
    swift_retain();
    v35 = AssociatedTypeWitness;
    v36 = v69;
    v37 = v70;
    goto LABEL_16;
  }
  v42 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v42(v18, v22, a5);
  v43 = (uint64_t *)swift_allocObject();
  v43[5] = a5;
  v43[6] = v30;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43 + 2);
  v42((char *)boxed_opaque_existential_1, v18, a5);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
  v45 = v76;
  v43[7] = v76;
  if (!(v45 >> 62))
  {
    v46 = (uint64_t *)(v45 + 64);
    v35 = AssociatedTypeWitness;
    v36 = v69;
    v37 = v70;
LABEL_14:
    v47 = *v46;
    result = swift_retain();
    v48 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  v36 = v69;
  v37 = v70;
  if (v45 >> 62 == 1)
  {
    v46 = (uint64_t *)((v45 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    v35 = AssociatedTypeWitness;
    goto LABEL_14;
  }
  v35 = AssociatedTypeWitness;
  v48 = 1;
LABEL_15:
  v43[8] = v48;
  v32 = (unint64_t)v43;
LABEL_16:
  v49 = v61;
  v50 = *(_QWORD *)(v61 + 40);
  *(_QWORD *)(v61 + 40) = v32;
  v51 = type metadata accessor for _PlistDecodingStorage(0, v35, v33, v34);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v36, v51);
  v74 = type metadata accessor for _PlistDecoder(0, v63, v64, v52);
  v75 = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDecoder<A>, v74);
  v73[0] = v49;
  swift_retain();
  dispatch thunk of Decodable.init(from:)();
  if (!v37)
    goto LABEL_19;
  *(_QWORD *)(v49 + 40) = v50;
  v50 &= 0x3FFFFFFFFFFFFFFFuLL;
  swift_retain();
  swift_release();
  v53 = swift_bridgeObjectRetain();
  v49 = MEMORY[0x186DA4B68](v53, v35);
  swift_bridgeObjectRelease();
  if (!v49)
  {
    __break(1u);
LABEL_19:
    *(_QWORD *)(v49 + 40) = v50;
    swift_retain();
    swift_release();
    v54 = swift_bridgeObjectRetain();
    v55 = MEMORY[0x186DA4B68](v54, v35);
    result = swift_bridgeObjectRelease();
    if (v55)
      goto LABEL_20;
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_20:
  v56 = type metadata accessor for Array();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v56);
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v56);
  v57 = v62;
  RangeReplaceableCollection<>.removeLast()();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v35);
  swift_release();
  return swift_release();
}

uint64_t specialized _PlistDecoder.unwrapDate<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;

  v7 = v6;
  v30 = *MEMORY[0x1E0C80C00];
  v10 = *v6;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    v13 = type metadata accessor for DecodingError();
    swift_allocError();
    v15 = v14;
    *v14 = &type metadata for Date;
    v16 = v29;
    if (v29 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v18 = v27;
      v17 = v28;
      v19 = v26;
      outlined copy of _CodingKey(v26, v27, v28, v29);
      outlined copy of _CodingKey(v26, v27, v28, v29);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v21 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v21;
      *(_QWORD *)(v21 + 16) = v19;
      *(_QWORD *)(v21 + 24) = v18;
      *(_QWORD *)(v21 + 32) = v17;
      *(_BYTE *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC460], v13);
    return swift_willThrow();
  }
  else
  {
    v22 = v7[3];
    v23 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 56);
    v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(a1, v22, a2, &v26, &type metadata for _CodingKey, v24, v11, v12);
    return swift_unknownObjectRelease();
  }
}

uint64_t _PlistDecoder.unwrapDate<A>(from:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  _QWORD v39[2];
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v39[1] = a6;
  v7 = v6;
  v43 = a5;
  v45 = a3;
  v48 = *MEMORY[0x1E0C80C00];
  v11 = *v6;
  v44 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v42 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v41 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v39 - v18;
  v20 = *(_QWORD *)(v11 + 80);
  v21 = *(_QWORD *)(v11 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 40))(a1, v20, v21, v17) & 1) != 0)
  {
    v22 = a2;
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v24;
    *v24 = &type metadata for Date;
    v25 = v41;
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v26(v19, v45, v13);
    v26(v15, (uint64_t)v19, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v15, 1, a4) == 1)
    {
      v27 = *(void (**)(char *, uint64_t))(v25 + 8);
      v27(v15, v13);
      _CodingPathNode.path.getter(v22);
      v27(v19, v13);
    }
    else
    {
      v45 = v23;
      v31 = v44;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v42, v15, a4);
      v32 = _CodingPathNode.path.getter(v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v42;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v42, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v13);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23 = v45;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v23);
    return swift_willThrow();
  }
  else
  {
    v28 = v7[3];
    v29 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    swift_unknownObjectRetain();
    v29(a1, v28, a2, v45, a4, v43, v20, v21);
    return swift_unknownObjectRelease();
  }
}

_QWORD *specialized _PlistDecoder.unwrapData<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v25;
  _QWORD *v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;

  v7 = v6;
  v33 = *MEMORY[0x1E0C80C00];
  v10 = *v6;
  v29 = a3;
  v30 = a4;
  v31 = a5;
  v32 = a6;
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    v13 = type metadata accessor for DecodingError();
    swift_allocError();
    v15 = v14;
    *v14 = &type metadata for Data;
    v16 = v32;
    if (v32 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v18 = v30;
      v17 = v31;
      v19 = v29;
      outlined copy of _CodingKey(v29, v30, v31, v32);
      outlined copy of _CodingKey(v29, v30, v31, v32);
      v20 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v22 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v22;
      *(_QWORD *)(v22 + 16) = v19;
      *(_QWORD *)(v22 + 24) = v18;
      *(_QWORD *)(v22 + 32) = v17;
      *(_BYTE *)(v22 + 40) = v16;
      v28[0] = v20;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v28[0] = 0;
    v28[1] = 0xE000000000000000;
    v26 = v28;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC460], v13);
    swift_willThrow();
  }
  else
  {
    v23 = v7[3];
    v24 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 64);
    v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v26 = (_QWORD *)v24(a1, v23, a2, &v29, &type metadata for _CodingKey, v25, v11, v12);
    swift_unknownObjectRelease();
  }
  return v26;
}

_QWORD *_PlistDecoder.unwrapData<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_1;
  char *v35;
  _QWORD *v36;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[12];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  v46[11] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v38 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v39 = a2;
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v22;
    *v22 = &type metadata for Data;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    v24 = v42;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v25 = *(void (**)(char *, uint64_t))(v45 + 8);
      v25(v14, v12);
      _CodingPathNode.path.getter(v39);
      v25(v18, v12);
    }
    else
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      v44 = v21;
      v30 = v40;
      v29(v40, v14, a4);
      v31 = _CodingPathNode.path.getter(v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v33 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v30, a4);
      v46[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v35 = v30;
      v21 = v44;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v35, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v36 = v41;
    v46[0] = 0;
    v46[1] = 0xE000000000000000;
    v28 = v46;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v36, *MEMORY[0x1E0DEC460], v21);
    swift_willThrow();
  }
  else
  {
    v26 = v6[3];
    v27 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 64);
    swift_unknownObjectRetain();
    v28 = (_QWORD *)v27(a1, v26, a2, v44, a4, v43, v19, v20);
    swift_unknownObjectRelease();
  }
  return v28;
}

uint64_t specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:configuration:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t *, char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v59 = a2;
  v12 = v11;
  v67 = a7;
  v62 = a5;
  v63 = a6;
  v54 = a1;
  v55 = a3;
  v57 = a9;
  LODWORD(v61) = ~a8;
  v16 = *(_QWORD *)(*(_QWORD *)v11 + 80);
  v15 = *(_QWORD *)(*(_QWORD *)v11 + 88);
  swift_getAssociatedTypeWitness();
  v52 = v16;
  v53 = v15;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v49 = (char *)&v48 - v18;
  v58 = a11;
  v56 = a10;
  v19 = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v48 - v20;
  if ((_DWORD)v61)
  {
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 40) = &type metadata for _CodingKey;
    *(_QWORD *)(v22 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v23 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v23;
    v25 = v62;
    v24 = v63;
    *(_QWORD *)(v23 + 16) = v62;
    *(_QWORD *)(v23 + 24) = v24;
    v26 = v67;
    *(_QWORD *)(v23 + 32) = v67;
    *(_BYTE *)(v23 + 40) = a8;
    *(_QWORD *)(v22 + 56) = a4;
    result = v25;
    if (a4 >> 62)
    {
      if (a4 >> 62 != 1)
      {
        v34 = 1;
LABEL_8:
        *(_QWORD *)(v22 + 64) = v34;
        v32 = v22 & 0x3FFFFFFFFFFFFFFFLL;
        a4 = v22;
        goto LABEL_9;
      }
      v61 = AssociatedTypeWitness;
      v28 = v19;
      v29 = v25;
      v30 = v24;
      v31 = (uint64_t *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v61 = AssociatedTypeWitness;
      v28 = v19;
      v29 = v25;
      v30 = v24;
      v31 = (uint64_t *)(a4 + 64);
    }
    v33 = *v31;
    swift_retain();
    v24 = v30;
    result = v29;
    v19 = v28;
    AssociatedTypeWitness = v61;
    v34 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    goto LABEL_8;
  }
  v32 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  v26 = v67;
  result = v62;
  v24 = v63;
LABEL_9:
  v35 = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v12 + 40) = a4;
  outlined copy of _CodingKey?(result, v24, v26, a8);
  v38 = type metadata accessor for _PlistDecodingStorage(0, AssociatedTypeWitness, v36, v37);
  v67 = v32;
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v54, v38);
  v65 = type metadata accessor for _PlistDecoder(0, v52, v53, v39);
  v66 = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDecoder<A>, v65);
  v64[0] = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v21, v55, v19);
  v40 = v58;
  v41 = *(void (**)(uint64_t *, char *, uint64_t, uint64_t))(v58 + 16);
  swift_retain();
  v42 = v60;
  v41(v64, v21, v56, v40);
  if (v42)
  {
    *(_QWORD *)(v12 + 40) = v35;
    swift_retain();
    swift_release();
    v43 = swift_bridgeObjectRetain();
    v12 = MEMORY[0x186DA4B68](v43, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_13:
      v46 = type metadata accessor for Array();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v46);
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v46);
      v47 = v49;
      RangeReplaceableCollection<>.removeLast()();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v47, AssociatedTypeWitness);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  *(_QWORD *)(v12 + 40) = v35;
  swift_retain();
  swift_release();
  v44 = swift_bridgeObjectRetain();
  v45 = MEMORY[0x186DA4B68](v44, AssociatedTypeWitness);
  result = swift_bridgeObjectRelease();
  if (v45)
    goto LABEL_13;
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *specialized _PlistDecoder.unwrapString<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v25;
  _QWORD *v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;

  v7 = v6;
  v33 = *MEMORY[0x1E0C80C00];
  v10 = *v6;
  v29 = a3;
  v30 = a4;
  v31 = a5;
  v32 = a6;
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    v13 = type metadata accessor for DecodingError();
    swift_allocError();
    v15 = v14;
    *v14 = MEMORY[0x1E0DEA968];
    v16 = v32;
    if (v32 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v18 = v30;
      v17 = v31;
      v19 = v29;
      outlined copy of _CodingKey(v29, v30, v31, v32);
      outlined copy of _CodingKey(v29, v30, v31, v32);
      v20 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v22 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v22;
      *(_QWORD *)(v22 + 16) = v19;
      *(_QWORD *)(v22 + 24) = v18;
      *(_QWORD *)(v22 + 32) = v17;
      *(_BYTE *)(v22 + 40) = v16;
      v28[0] = v20;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v28[0] = 0;
    v28[1] = 0xE000000000000000;
    v26 = v28;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC460], v13);
    swift_willThrow();
  }
  else
  {
    v23 = v7[3];
    v24 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 72);
    v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v26 = (_QWORD *)v24(a1, v23, a2, &v29, &type metadata for _CodingKey, v25, v11, v12);
    swift_unknownObjectRelease();
  }
  return v26;
}

_QWORD *_PlistDecoder.unwrapString<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_1;
  char *v35;
  _QWORD *v36;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[12];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  v46[11] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v38 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v39 = a2;
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v22;
    *v22 = MEMORY[0x1E0DEA968];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    v24 = v42;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v25 = *(void (**)(char *, uint64_t))(v45 + 8);
      v25(v14, v12);
      _CodingPathNode.path.getter(v39);
      v25(v18, v12);
    }
    else
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      v44 = v21;
      v30 = v40;
      v29(v40, v14, a4);
      v31 = _CodingPathNode.path.getter(v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v33 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v30, a4);
      v46[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v35 = v30;
      v21 = v44;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v35, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v36 = v41;
    v46[0] = 0;
    v46[1] = 0xE000000000000000;
    v28 = v46;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v36, *MEMORY[0x1E0DEC460], v21);
    swift_willThrow();
  }
  else
  {
    v26 = v6[3];
    v27 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 72);
    swift_unknownObjectRetain();
    v28 = (_QWORD *)v27(a1, v26, a2, v44, a4, v43, v19, v20);
    swift_unknownObjectRelease();
  }
  return v28;
}

uint64_t specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v7 = v6;
  v32 = *MEMORY[0x1E0C80C00];
  v10 = *v6;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    v13 = type metadata accessor for DecodingError();
    swift_allocError();
    v15 = v14;
    *v14 = MEMORY[0x1E0DEB070];
    v16 = v31;
    if (v31 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v18 = v29;
      v17 = v30;
      v19 = v28;
      outlined copy of _CodingKey(v28, v29, v30, v31);
      outlined copy of _CodingKey(v28, v29, v30, v31);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v21 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v21;
      *(_QWORD *)(v21 + 16) = v19;
      *(_QWORD *)(v21 + 24) = v18;
      *(_QWORD *)(v21 + 32) = v17;
      *(_BYTE *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC460], v13);
    return swift_willThrow();
  }
  else
  {
    v22 = v7[3];
    v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 80);
    v24 = lazy protocol witness table accessor for type Double and conformance Double();
    v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(&v27, a1, v22, a2, &v28, MEMORY[0x1E0DEB070], &type metadata for _CodingKey, v24, v25, v11, v12);
    return swift_unknownObjectRelease();
  }
}

{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v7 = v6;
  v32 = *MEMORY[0x1E0C80C00];
  v10 = *v6;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1, v11, v12) & 1) != 0)
  {
    v13 = type metadata accessor for DecodingError();
    swift_allocError();
    v15 = v14;
    *v14 = MEMORY[0x1E0DEB188];
    v16 = v31;
    if (v31 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v18 = v29;
      v17 = v30;
      v19 = v28;
      outlined copy of _CodingKey(v28, v29, v30, v31);
      outlined copy of _CodingKey(v28, v29, v30, v31);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v21 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v21;
      *(_QWORD *)(v21 + 16) = v19;
      *(_QWORD *)(v21 + 24) = v18;
      *(_QWORD *)(v21 + 32) = v17;
      *(_BYTE *)(v21 + 40) = v16;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v19, v18, v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC460], v13);
    return swift_willThrow();
  }
  else
  {
    v22 = v7[3];
    v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v12 + 80);
    v24 = lazy protocol witness table accessor for type Float and conformance Float();
    v25 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v23(&v27, a1, v22, a2, &v28, MEMORY[0x1E0DEB188], &type metadata for _CodingKey, v24, v25, v11, v12);
    return swift_unknownObjectRelease();
  }
}

float specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  float result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD v48[21];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  *(_QWORD *)&v48[19] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEB188];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
    v27 = lazy protocol witness table accessor for type Float and conformance Float();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEB188], a4, v28, v43, v19, v20);
    swift_unknownObjectRelease();
    if (!v29)
      return *(float *)v48;
  }
  return result;
}

double specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[11];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  v48[10] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEB070];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
    v27 = lazy protocol witness table accessor for type Double and conformance Double();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEB070], a4, v28, v43, v19, v20);
    swift_unknownObjectRelease();
    if (!v29)
      return *(double *)v48;
  }
  return result;
}

uint64_t specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEB418];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type Int and conformance Int();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEB418], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEDE70];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEDE70], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEE068];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEE068], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return (unsigned __int16)v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEDA70];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type Int8 and conformance Int8();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEDA70], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEDB58];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type Int16 and conformance Int16();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEDB58], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return (unsigned __int16)v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEDBC8];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEDBC8], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEDC60];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type Int64 and conformance Int64();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEDC60], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEBB98];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type UInt and conformance UInt();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEBB98], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEE0F8];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEE0F8], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v8 = v7;
  v9 = v6;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = *v6;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v13 = *(_QWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14) & 1) != 0)
  {
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    *v16 = MEMORY[0x1E0DEE190];
    v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v20 = v31;
      v19 = v32;
      v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v23 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      *(_QWORD *)(v23 + 32) = v19;
      *(_BYTE *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC460], v15);
    return swift_willThrow();
  }
  else
  {
    v24 = v9[3];
    v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, _QWORD, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    v26 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E0DEE190], &type metadata for _CodingKey, v26, v27, v13, v14);
    result = swift_unknownObjectRelease();
    if (!v8)
      return v29;
  }
  return result;
}

uint64_t specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[11];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  v48[10] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEB418];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type Int and conformance Int();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEB418], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[81];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  *(_QWORD *)&v48[73] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEDA70];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type Int8 and conformance Int8();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEDA70], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _WORD v48[41];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  *(_QWORD *)&v48[37] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEDB58];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type Int16 and conformance Int16();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEDB58], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD v48[21];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  *(_QWORD *)&v48[19] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEDBC8];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEDBC8], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[11];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  v48[10] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEDC60];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type Int64 and conformance Int64();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEDC60], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[11];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  v48[10] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEBB98];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type UInt and conformance UInt();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEBB98], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[81];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  *(_QWORD *)&v48[73] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEDE70];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEDE70], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _WORD v48[41];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  *(_QWORD *)&v48[37] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEE068];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEE068], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD v48[21];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  *(_QWORD *)&v48[19] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEE0F8];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEE0F8], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[11];

  v6 = v5;
  v43 = a5;
  v44 = a3;
  v48[10] = *MEMORY[0x1E0C80C00];
  v10 = *v5;
  v42 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 40))(a1, v19, v20, v16) & 1) != 0)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v40 = v22;
    *v22 = MEMORY[0x1E0DEE190];
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v23(v18, v44, v12);
    v23(v14, (uint64_t)v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v14, 1, a4) == 1)
    {
      v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      v44 = v21;
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, a4);
      v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v34 = v43;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v36 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v41, a4);
      v46 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v12);
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v21 = v44;
      v37(v36, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v38 = v40;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v38, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  else
  {
    v25 = v6[3];
    v26 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    v27 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    swift_unknownObjectRetain();
    v28 = v27;
    v29 = v40;
    v26(v48, a1, v25, a2, v44, MEMORY[0x1E0DEE190], a4, v28, v43, v19, v20);
    result = swift_unknownObjectRelease();
    if (!v29)
      return v48[0];
  }
  return result;
}

Swift::Bool __swiftcall _PlistDecoder.decodeNil()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  Swift::Bool result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 88);
  swift_getAssociatedTypeWitness();
  v22 = v1;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v20 - v13;
  v15 = v0[2];
  swift_bridgeObjectRetain_n();
  v16 = MEMORY[0x186DA4B68](v15, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v16)
  {
    v21 = v2;
    v23 = v15;
    v17 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v17);
    BidirectionalCollection.last.getter();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      swift_bridgeObjectRelease();
      v18 = (*(uint64_t (**)(char *))(v21 + 40))(v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
      return v18 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.decode(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*v0 + 80);
  v1 = *(_QWORD *)(*v0 + 88);
  swift_getAssociatedTypeWitness();
  v23 = v2;
  v24 = v1;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v20 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - v12;
  v22 = v0;
  v14 = v0[2];
  swift_bridgeObjectRetain_n();
  v15 = MEMORY[0x186DA4B68](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    v25 = v14;
    v16 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v16);
    BidirectionalCollection.last.getter();
    v15 = v21;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v15);
      swift_bridgeObjectRelease();
      v17 = v22[5];
      swift_retain();
      v18 = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)((uint64_t)v13, v17, 0, 0, 0, 0xFFu, v23, v24);
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
      return v18 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v19 - v12;
  v21 = v0;
  v14 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  v15 = MEMORY[0x186DA4B68](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    v19 = v1;
    v22 = v14;
    v16 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v16);
    BidirectionalCollection.last.getter();
    v2 = v20;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(v21 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)((uint64_t)v13, v17, 0, 0, 0, 0xFFu);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v19 - v12;
  v21 = v0;
  v14 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  v15 = MEMORY[0x186DA4B68](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    v19 = v1;
    v22 = v14;
    v16 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v16);
    BidirectionalCollection.last.getter();
    v2 = v20;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(v21 + 40);
      swift_retain();
      specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)((uint64_t)v13, v17, 0, 0, 0, 0xFFu);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - v7;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - v10;
  v19 = v0;
  v12 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  v13 = MEMORY[0x186DA4B68](v12, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v13)
  {
    v21 = v12;
    v14 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v14);
    BidirectionalCollection.last.getter();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v11, v5, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v19 + 40);
      swift_retain();
      v16 = specialized _PlistDecoder.unwrapString<A>(from:for:_:)((uint64_t)v11, v15, 0, 0, 0, 0xFFu);
      swift_release();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v11, AssociatedTypeWitness);
      return (uint64_t)v16;
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __break(1u);
  return result;
}

uint64_t _PlistDecoder.decode(_:)(uint64_t (*a1)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v22;

  v21 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - v11;
  v20 = v1;
  v13 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  v14 = MEMORY[0x186DA4B68](v13, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v14)
  {
    v22 = v13;
    v15 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v15);
    BidirectionalCollection.last.getter();
    v14 = v19;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v5, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v14);
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(v20 + 40);
      swift_retain();
      v17 = v21(v12, v16, 0, 0, 0, 255);
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
      return v17;
    }
  }
  else
  {
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v14);
  __break(1u);
  return result;
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.decodeNil()();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.decode(_:)() & 1;
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)();
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

{
  return _PlistDecoder.decode(_:)((uint64_t (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:));
}

uint64_t _PlistKeyedDecodingContainer.allKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t i;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char isClassOrObjCExistentialType;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Bool v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;

  v9 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - v10;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v48 = (char *)&v47 - v17;
  swift_bridgeObjectRetain();
  _swift_isClassOrObjCExistentialType();
  v56 = MEMORY[0x1E0DEE9D8];
  v18 = *(_QWORD *)(a2 + 64);
  v54 = a2 + 64;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v55 = (unint64_t)(v19 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  v52 = a6;
  v53 = a2;
  v49 = v15;
  if (v21)
    goto LABEL_6;
LABEL_7:
  v26 = v23 + 1;
  if (!__OFADD__(v23, 1))
  {
    if (v26 < v55)
    {
      v27 = *(_QWORD *)(v54 + 8 * v26);
      ++v23;
      if (v27)
        goto LABEL_22;
      v23 = v26 + 1;
      if (v26 + 1 >= v55)
        goto LABEL_55;
      v27 = *(_QWORD *)(v54 + 8 * v23);
      if (v27)
        goto LABEL_22;
      v23 = v26 + 2;
      if (v26 + 2 >= v55)
        goto LABEL_55;
      v27 = *(_QWORD *)(v54 + 8 * v23);
      if (v27)
        goto LABEL_22;
      v23 = v26 + 3;
      if (v26 + 3 >= v55)
        goto LABEL_55;
      v27 = *(_QWORD *)(v54 + 8 * v23);
      if (v27)
      {
LABEL_22:
        v21 = (v27 - 1) & v27;
        for (i = __clz(__rbit64(v27)) + (v23 << 6); ; i = v24 | (v23 << 6))
        {
          v29 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
          v30 = *v29;
          v31 = v29[1];
          swift_bridgeObjectRetain();
          MEMORY[0x186DA61C4](v30, v31, a4, a6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a4) == 1)
          {
            result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v11, v51);
            if (!v21)
              goto LABEL_7;
            goto LABEL_6;
          }
          v32 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
          v33 = v48;
          v32(v48, v11, a4);
          v32(v15, v33, a4);
          isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          v35 = v56;
          if ((isClassOrObjCExistentialType & 1) != 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_bridgeObject() & 1) != 0
              && ((_swift_isClassOrObjCExistentialType() & 1) == 0
               || (v35 & 0x8000000000000000) == 0 && (v35 & 0x4000000000000000) == 0))
            {
              goto LABEL_38;
            }
          }
          else if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            goto LABEL_38;
          }
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v35 < 0 || (v35 & 0x4000000000000000) != 0))
          {
            specialized _ArrayBuffer._nonNative.getter(v35);
            swift_unknownObjectRetain();
            v38 = _CocoaArrayWrapper.endIndex.getter();
            swift_unknownObjectRelease();
          }
          else
          {
            v36 = _swift_isClassOrObjCExistentialType();
            v37 = v35 & 0xFFFFFFFFFFFFF8;
            if ((v36 & 1) == 0)
              v37 = v35;
            v38 = *(_QWORD *)(v37 + 16);
          }
          v35 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 + 1, 1, v35, a4);
          v56 = v35;
LABEL_38:
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
            v39 = v35 & 0xFFFFFFFFFFFFFF8;
          else
            v39 = v35;
          v40 = *(_QWORD *)(v39 + 16);
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
            v41 = v35 & 0xFFFFFFFFFFFFFF8;
          else
            v41 = v35;
          v42 = *(_QWORD *)(v41 + 24);
          v43 = v40 + 1;
          if (v40 + 1 > (uint64_t)(v42 >> 1))
          {
            v46 = v42 > 1;
            type metadata accessor for Array();
            Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46, v40 + 1, 1);
            v35 = v56;
          }
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
          {
            v44 = v35 & 0xFFFFFFFFFFFFFF8;
            *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) = v43;
          }
          else
          {
            *(_QWORD *)(v35 + 16) = v43;
            v44 = v35 & 0xFFFFFFFFFFFFFF8;
          }
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
            v45 = v44;
          else
            v45 = v35;
          v15 = v49;
          result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(v45+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v40, v49, a4);
          v56 = v35;
          a6 = v52;
          a2 = v53;
          if (!v21)
            goto LABEL_7;
LABEL_6:
          v24 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
        }
      }
      v28 = v26 + 4;
      if (v28 < v55)
      {
        v27 = *(_QWORD *)(v54 + 8 * v28);
        if (v27)
        {
          v23 = v28;
          goto LABEL_22;
        }
        while (1)
        {
          v23 = v28 + 1;
          if (__OFADD__(v28, 1))
            goto LABEL_57;
          if (v23 >= v55)
            break;
          v27 = *(_QWORD *)(v54 + 8 * v23);
          ++v28;
          if (v27)
            goto LABEL_22;
        }
      }
    }
LABEL_55:
    swift_release();
    swift_bridgeObjectRelease();
    return v56;
  }
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

BOOL _PlistKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - v7;
  v9 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a3 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v8, *(_QWORD *)(a3 + 56) + *(_QWORD *)(v13 + 72) * v11, AssociatedTypeWitness);
    v14 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, v14, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v15;
}

uint64_t specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t *a5@<X8>, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v13 = __swift_instantiateConcreteTypeFromMangledName(a7);
  v29 = v13;
  __swift_instantiateConcreteTypeFromMangledName(a8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainerProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v14 = 0xD00000000000003DLL;
    v15 = "Cannot get nested keyed container -- no value found for key \"";
  }
  else
  {
    v29 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    if ((swift_dynamicCast() & 1) == 0)
    {
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      v27 = 0xD00000000000001DLL;
      v28 = 0x800000018230D870;
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 2238496;
      v21._object = (void *)0xE300000000000000;
      String.append(_:)(v21);
      v22._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v18 = 3025186;
      v19 = 0xE300000000000000;
      goto LABEL_7;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v14 = 0xD00000000000003FLL;
    v15 = "Cannot get nested unkeyed container -- no value found for key \"";
  }
  v16 = (unint64_t)(v15 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v14);
  v17._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18 = 34;
  v19 = 0xE100000000000000;
LABEL_7:
  String.append(_:)(*(Swift::String *)&v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
  a5[3] = a3;
  a5[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  _CodingPathNode.path.getter(a2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v24 = *MEMORY[0x1E0DEC448];
  v25 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(a5, v24, v25);
}

uint64_t _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t *a5@<X8>, uint64_t a6)
{
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v26 = a4;
  swift_getMetatypeMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainerProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v11 = 0xD00000000000003DLL;
    v12 = "Cannot get nested keyed container -- no value found for key \"";
  }
  else
  {
    v26 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    if (!swift_dynamicCast())
    {
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      v24 = 0xD00000000000001DLL;
      v25 = 0x800000018230D870;
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 2238496;
      v18._object = (void *)0xE300000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v15 = 3025186;
      v16 = 0xE300000000000000;
      goto LABEL_7;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v11 = 0xD00000000000003FLL;
    v12 = "Cannot get nested unkeyed container -- no value found for key \"";
  }
  v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v11);
  v14._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = 34;
  v16 = 0xE100000000000000;
LABEL_7:
  String.append(_:)(*(Swift::String *)&v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
  a5[3] = a3;
  a5[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  _CodingPathNode.path.getter(a2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v21 = *MEMORY[0x1E0DEC448];
  v22 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(a5, v21, v22);
}

uint64_t _PlistKeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a4;
  v55 = a3;
  v54 = a2;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Optional();
  v42 = *(_QWORD *)(v15 - 8);
  v43 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v39 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v19);
  v45 = (char *)&v39 - v20;
  v46 = AssociatedConformanceWitness;
  v21 = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v44 = (char *)&v39 - v22;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v47 = a1;
  v50 = a5;
  v51 = a7;
  v23 = v55;
  v24 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25), (v27 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v17, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v18 + 72) * v26, AssociatedTypeWitness);
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  v29 = v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, v28, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v43);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v47, v49, v50, v51, v30, v52, &demangling cache variable for type metadata for Any?.Type, &demangling cache variable for type metadata for Any?.Type.Type);
    swift_willThrow();
  }
  else
  {
    v31 = v21;
    v32 = v45;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v45, v17, AssociatedTypeWitness);
    v29 = *(_QWORD *)(v29 + 24);
    v33 = v46;
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 80);
    swift_unknownObjectRetain();
    v35 = swift_checkMetadataState();
    v36 = v44;
    v37 = v48;
    v34(v32, v35, v33);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v32, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      LOBYTE(v29) = (*(uint64_t (**)(char *))(v52 + 40))(v36);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v31);
    }
  }
  return v29 & 1;
}

uint64_t _PlistKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = a7;
  v54 = a4;
  v58 = a2;
  v59 = a3;
  v12 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  MEMORY[0x1E0C80A78](v12);
  v45 = (char *)&v42 - v13;
  swift_getAssociatedTypeWitness();
  v55 = a8;
  v57 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v42 - v17;
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v42 - v21;
  v50 = AssociatedConformanceWitness;
  v23 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v23 - 8);
  v44 = v23;
  MEMORY[0x1E0C80A78](v23);
  v51 = (char *)&v42 - v24;
  v53 = a1;
  v56 = a5;
  v25 = v59;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  LOBYTE(v28) = v27;
  if (*(_QWORD *)(v25 + 16) && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v18, *(_QWORD *)(v25 + 56) + *(_QWORD *)(v19 + 72) * v29, AssociatedTypeWitness);
    v31 = 0;
  }
  else
  {
    v31 = 1;
  }
  v32 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, v31, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v49);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v56, v60, v33, v55, &demangling cache variable for type metadata for Bool.Type, &demangling cache variable for type metadata for Bool.Type.Type);
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v18, AssociatedTypeWitness);
    v28 = *(_QWORD *)(v58 + 24);
    v34 = v50;
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 80);
    swift_unknownObjectRetain();
    v36 = swift_checkMetadataState();
    v38 = (uint64_t)v51;
    v37 = v52;
    v35(v32, v36, v34);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v32, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      v39 = v56;
      v28 = *(_QWORD *)(v56 - 8);
      v40 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v45, v53, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v40, 0, 1, v39);
      LOBYTE(v28) = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(v38, v54, v40, v57, v39, v55, v60);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v40, v47);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
    }
  }
  return v28 & 1;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for Int.Type, &demangling cache variable for type metadata for Int.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for Int8.Type, &demangling cache variable for type metadata for Int8.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for Int16.Type, &demangling cache variable for type metadata for Int16.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for Int32.Type, &demangling cache variable for type metadata for Int32.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for Int64.Type, &demangling cache variable for type metadata for Int64.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for UInt.Type, &demangling cache variable for type metadata for UInt.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for UInt8.Type, &demangling cache variable for type metadata for UInt8.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for UInt16.Type, &demangling cache variable for type metadata for UInt16.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for UInt32.Type, &demangling cache variable for type metadata for UInt32.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v23 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for UInt64.Type, &demangling cache variable for type metadata for UInt64.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(_QWORD *)(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

float _PlistKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a4;
  v59 = a2;
  v60 = a3;
  v14 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  MEMORY[0x1E0C80A78](v14);
  v45 = (char *)&v43 - v15;
  swift_getAssociatedTypeWitness();
  v53 = a8;
  v54 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v18 - 8);
  v49 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v43 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v22);
  v50 = (char *)&v43 - v23;
  v24 = v60;
  v25 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v25 - 8);
  v44 = v25;
  MEMORY[0x1E0C80A78](v25);
  v51 = (char *)&v43 - v26;
  v55 = a1;
  v57 = a5;
  v58 = a7;
  v27 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v24 + 16) && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v20, *(_QWORD *)(v24 + 56) + *(_QWORD *)(v21 + 72) * v29, AssociatedTypeWitness);
    v31 = 0;
  }
  else
  {
    v31 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, v31, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v49);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v55, v56, v57, v58, v32, v53, &demangling cache variable for type metadata for Float.Type, &demangling cache variable for type metadata for Float.Type.Type);
    swift_willThrow();
  }
  else
  {
    v33 = v50;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v50, v20, AssociatedTypeWitness);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v35 = v33;
    v36 = swift_checkMetadataState();
    v38 = (uint64_t)v51;
    v37 = v52;
    v34(v35, v36, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v35, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      v39 = v57;
      v40 = *(_QWORD *)(v57 - 8);
      v41 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v45, v55, v57);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v39);
      v8 = specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v38, v56, v41, v39, v58);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v47);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
    }
  }
  return v8;
}

double _PlistKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a4;
  v59 = a2;
  v60 = a3;
  v14 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  MEMORY[0x1E0C80A78](v14);
  v45 = (char *)&v43 - v15;
  swift_getAssociatedTypeWitness();
  v53 = a8;
  v54 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v18 - 8);
  v49 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v43 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v22);
  v50 = (char *)&v43 - v23;
  v24 = v60;
  v25 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v25 - 8);
  v44 = v25;
  MEMORY[0x1E0C80A78](v25);
  v51 = (char *)&v43 - v26;
  v55 = a1;
  v57 = a5;
  v58 = a7;
  v27 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v24 + 16) && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v20, *(_QWORD *)(v24 + 56) + *(_QWORD *)(v21 + 72) * v29, AssociatedTypeWitness);
    v31 = 0;
  }
  else
  {
    v31 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, v31, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v49);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v55, v56, v57, v58, v32, v53, &demangling cache variable for type metadata for Double.Type, &demangling cache variable for type metadata for Double.Type.Type);
    swift_willThrow();
  }
  else
  {
    v33 = v50;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v50, v20, AssociatedTypeWitness);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v35 = v33;
    v36 = swift_checkMetadataState();
    v38 = (uint64_t)v51;
    v37 = v52;
    v34(v35, v36, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v35, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v37)
    {
      v39 = v57;
      v40 = *(_QWORD *)(v57 - 8);
      v41 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v45, v55, v57);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v39);
      v8 = specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v38, v56, v41, v39, v58);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v47);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v38, v44);
    }
  }
  return v8;
}

void (*_PlistKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(char *, uint64_t, uint64_t)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);

  v55 = a4;
  v59 = a3;
  v58 = a2;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v41 - v14;
  swift_getAssociatedTypeWitness();
  v52 = a8;
  v53 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v49 = (char *)&v41 - v22;
  v23 = v59;
  v24 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v24 - 8);
  v43 = v24;
  MEMORY[0x1E0C80A78](v24);
  v50 = (char *)&v41 - v25;
  v54 = a1;
  v56 = a5;
  v57 = a7;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*((_QWORD *)v23 + 2) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *((_QWORD *)v23 + 7) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v48);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v54, v55, v56, v57, v31, v52, &demangling cache variable for type metadata for String.Type, &demangling cache variable for type metadata for String.Type.Type);
    swift_willThrow();
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v19, AssociatedTypeWitness);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v33 = v32;
    v34 = swift_checkMetadataState();
    v36 = (uint64_t)v50;
    v35 = v51;
    v23(v33, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      v37 = v56;
      v38 = *(_QWORD *)(v56 - 8);
      v39 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      v23 = (void (*)(char *, uint64_t, uint64_t))_PlistDecoder.unwrapString<A>(from:for:_:)(v36, v55, v39, v37, v57);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v46);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  return v23;
}

uint64_t _PlistKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t MetatypeMetadata;
  char *v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v56 = a3;
  v59 = a7;
  v60 = a5;
  v62 = a4;
  v46 = a8;
  v47 = a1;
  v13 = type metadata accessor for Optional();
  v49 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  MEMORY[0x1E0C80A78](v13);
  v48 = (char *)&v43 - v14;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v51 = *(_QWORD *)(v17 - 8);
  v52 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v43 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21);
  v53 = (char *)&v43 - v22;
  v23 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v23 - 8);
  v45 = v23;
  MEMORY[0x1E0C80A78](v23);
  v54 = (char *)&v43 - v24;
  v57 = a2;
  v58 = a9;
  v25 = v62;
  v61 = a6;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v25 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v25 + 56) + *(_QWORD *)(v20 + 72) * v28, AssociatedTypeWitness);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, v30, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v52);
    type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v57, v60, v61, MetatypeMetadata, v32, v58);
    return swift_willThrow();
  }
  else
  {
    v35 = v53;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v53, v19, AssociatedTypeWitness);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v37 = swift_checkMetadataState();
    v39 = (uint64_t)v54;
    v38 = v55;
    v36(v35, v37, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v35, AssociatedTypeWitness);
    if (v38)
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      v40 = v61;
      v41 = *(_QWORD *)(v61 - 8);
      v42 = (uint64_t)v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v48, v57, v61);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
      _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)(v39, v60, v42, v59, v40, a11, v58, v46);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v42, v50);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v39, v45);
    }
  }
}

void _PlistKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[7];
  uint64_t AssociatedTypeWitness;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v25[6] = a8;
  v36 = a5;
  v37 = a3;
  v45 = a4;
  v40 = a2;
  v25[5] = a1;
  v25[4] = a9;
  v39 = a10;
  v28 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v25[1] = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  MEMORY[0x1E0C80A78](v14);
  v27 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v29 = (char *)v25 - v17;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for Optional();
  v32 = *(_QWORD *)(v19 - 8);
  v33 = v19;
  MEMORY[0x1E0C80A78](v19);
  MEMORY[0x1E0C80A78](v20);
  v34 = AssociatedConformanceWitness;
  v35 = (char *)v25 - v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v25[2] = (char *)v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v38 = (char *)v25 - v24;
  v41 = a6;
  v42 = a7;
  v43 = v39;
  v44 = a11;
  type metadata accessor for _PlistKeyedDecodingContainer();
}

uint64_t sub_181DED138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t MetatypeMetadata;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 216) = a1;
  v7 = *(_QWORD *)(v6 - 128);
  *(_QWORD *)(v6 - 152) = v5;
  v8 = dispatch thunk of CodingKey.stringValue.getter();
  v10 = *(_QWORD *)(v6 - 72);
  if (*(_QWORD *)(v10 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9), (v12 & 1) != 0))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16))(v4, *(_QWORD *)(v10 + 56) + *(_QWORD *)(v3 + 72) * v11, v2);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v4, v13, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 208) + 8))(v4, *(_QWORD *)(v6 - 200));
    type metadata accessor for DecodingError();
    swift_allocError();
    v15 = v14;
    MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v7, *(_QWORD *)(v6 - 168), *(_QWORD *)(v6 - 152), MetatypeMetadata, v15, v1);
    return swift_willThrow();
  }
  v18 = *(_QWORD *)(v6 - 184);
  (*(void (**)(void))(v3 + 32))();
  v19 = *(_QWORD *)(v6 - 192);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 80);
  swift_unknownObjectRetain();
  v21 = swift_checkMetadataState();
  v22 = *(_QWORD *)(v6 - 176);
  v20(v18, v21, v19);
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v18, v2);
    return swift_unknownObjectRelease();
  }
  v23 = v18;
  v24 = v1;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v23, v2);
  swift_unknownObjectRelease();
  v25 = *(_QWORD *)(v6 - 248);
  v26 = *(_QWORD *)(v6 - 240);
  v27 = *(_QWORD *)(v6 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v7, v27);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v27);
  v29 = *(_QWORD *)(v6 - 232);
  v28 = *(_QWORD *)(v6 - 224);
  v30 = *(_QWORD *)(v6 - 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v30, v26, v28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v30, 1, v27) == 1)
  {
    v31 = *(_QWORD *)(v6 - 296);
    v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v32(v26, v28);
    v32(v30, v28);
    v33 = *(uint64_t **)(v6 - 168);
    swift_retain();
    v36 = *(_QWORD *)(v6 - 264);
    v37 = *(_QWORD *)(v6 - 160);
    goto LABEL_17;
  }
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
  v39 = *(_QWORD *)(v6 - 312);
  v38(v39, v30, v27);
  v40 = v26;
  v33 = (uint64_t *)swift_allocObject();
  v33[5] = v27;
  v33[6] = v24;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33 + 2);
  v38((uint64_t)boxed_opaque_existential_1, v39, v27);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v40, v28);
  v42 = *(_QWORD *)(v6 - 168);
  v37 = *(_QWORD *)(v6 - 160);
  v33[7] = v42;
  v36 = *(_QWORD *)(v6 - 264);
  if (!(v42 >> 62))
  {
    v43 = (uint64_t *)(v42 + 64);
LABEL_15:
    v44 = *v43;
    result = swift_retain();
    v45 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  if (v42 >> 62 == 1)
  {
    v43 = (uint64_t *)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_15;
  }
  v45 = 1;
LABEL_16:
  v31 = *(_QWORD *)(v6 - 296);
  v33[8] = v45;
LABEL_17:
  v46 = *(_QWORD *)(v6 + 32);
  v47 = *(_QWORD *)(v37 + 40);
  *(_QWORD *)(v37 + 40) = v33;
  v48 = type metadata accessor for _PlistDecodingStorage(0, v36, v34, v35);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(*(_QWORD *)(v6 - 144), v48);
  _PlistDecoder.container<A>(keyedBy:)(*(_QWORD *)(v6 - 280), *(_QWORD *)(v6 - 272), v46, *(_QWORD *)(v6 - 288));
  *(_QWORD *)(v37 + 40) = v47;
  swift_retain();
  swift_release();
  v49 = swift_bridgeObjectRetain();
  v50 = MEMORY[0x186DA4B68](v49, v36);
  result = swift_bridgeObjectRelease();
  if (v50)
  {
    v51 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v51);
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v51);
    v52 = *(_QWORD *)(v6 - 304);
    RangeReplaceableCollection<>.removeLast()();
    v53 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v53(v52, v36);
    swift_release();
    v53(*(_QWORD *)(v6 - 144), v36);
    return swift_release();
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _PlistKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t MetatypeMetadata;
  uint64_t result;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v90 = a2;
  v95 = a3;
  v96 = a7;
  v91 = (uint64_t *)a4;
  v97 = a1;
  v79 = a9;
  v82 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v77 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v84 = *(_QWORD *)(v13 - 8);
  v85 = v13;
  MEMORY[0x1E0C80A78](v13);
  v81 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v83 = (char *)&v76 - v16;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for Optional();
  v87 = *(_QWORD *)(v19 - 8);
  v88 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v76 - v20;
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v23);
  v94 = (char *)&v76 - v24;
  v80 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v78 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v93 = (char *)&v76 - v28;
  v86 = type metadata accessor for _PlistUnkeyedDecodingContainer(0, a6, a8, v29);
  v92 = a5;
  v30 = v96;
  v31 = dispatch thunk of CodingKey.stringValue.getter();
  v33 = v95;
  if (*(_QWORD *)(v95 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32), (v35 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v21, *(_QWORD *)(v33 + 56) + *(_QWORD *)(v22 + 72) * v34, AssociatedTypeWitness);
    v36 = 0;
  }
  else
  {
    v36 = 1;
  }
  v37 = v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v21, v36, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v87 + 8))(v21, v88);
    type metadata accessor for DecodingError();
    swift_allocError();
    v39 = v38;
    MetatypeMetadata = swift_getMetatypeMetadata();
    _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v97, (unint64_t)v91, v92, MetatypeMetadata, v39, v30);
    return swift_willThrow();
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v37, v21, AssociatedTypeWitness);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  swift_unknownObjectRetain();
  v43 = swift_checkMetadataState();
  v44 = v89;
  v42(v37, v43, AssociatedConformanceWitness);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v37, AssociatedTypeWitness);
    return swift_unknownObjectRelease();
  }
  v95 = v25;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v37, AssociatedTypeWitness);
  swift_unknownObjectRelease();
  v46 = v82;
  v45 = v83;
  v47 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v83, v97, v92);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v45, 0, 1, v47);
  v48 = v84;
  v49 = v85;
  v50 = v81;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v45, v85);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v50, 1, v47) == 1)
  {
    v51 = *(void (**)(char *, uint64_t))(v48 + 8);
    v51(v45, v49);
    v51(v50, v49);
    v52 = v91;
    swift_retain();
    v55 = v80;
    v56 = (uint64_t)v93;
    v57 = v90;
    goto LABEL_17;
  }
  v58 = v50;
  v59 = v48;
  v60 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v61 = v77;
  v60(v77, v58, v47);
  v62 = v45;
  v52 = (uint64_t *)swift_allocObject();
  v63 = v96;
  v52[5] = v47;
  v52[6] = v63;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52 + 2);
  v60((char *)boxed_opaque_existential_1, v61, v47);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v62, v49);
  v65 = (unint64_t)v91;
  v52[7] = (uint64_t)v91;
  v55 = v80;
  v56 = (uint64_t)v93;
  if (!(v65 >> 62))
  {
    v66 = (uint64_t *)(v65 + 64);
    v57 = v90;
LABEL_15:
    v67 = *v66;
    result = swift_retain();
    v68 = v67 + 1;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  v57 = v90;
  if (v65 >> 62 == 1)
  {
    v66 = (uint64_t *)((v65 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_15;
  }
  v68 = 1;
LABEL_16:
  v52[8] = v68;
LABEL_17:
  v69 = *(_QWORD *)(v57 + 40);
  *(_QWORD *)(v57 + 40) = v52;
  v70 = type metadata accessor for _PlistDecodingStorage(0, v55, v53, v54);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v56, v70);
  _PlistDecoder.unkeyedContainer()(v79);
  *(_QWORD *)(v57 + 40) = v69;
  swift_retain();
  swift_release();
  v71 = swift_bridgeObjectRetain();
  v72 = MEMORY[0x186DA4B68](v71, v55);
  result = swift_bridgeObjectRelease();
  if (v72)
  {
    v73 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v73);
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v73);
    v74 = v78;
    RangeReplaceableCollection<>.removeLast()();
    v75 = *(void (**)(char *, uint64_t))(v95 + 8);
    v75(v74, v55);
    swift_release();
    v75(v93, v55);
    return swift_release();
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _PlistKeyedDecodingContainer._superDecoder(forKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __n128 v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  void (*v58)(char *, uint64_t);
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  __int128 v72;
  uint64_t *v73;
  __int128 *v74;
  __int128 *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;

  v79 = a4;
  v83 = a2;
  v73 = a7;
  swift_getAssociatedTypeWitness();
  v77 = a5;
  v78 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v74 = *(__int128 **)(v13 - 8);
  v75 = (__int128 *)v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v72 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v82 = (char *)&v72 - v18;
  v19 = swift_getAssociatedTypeWitness();
  v80 = *(_QWORD *)(v19 - 8);
  v81 = v19;
  MEMORY[0x1E0C80A78](v19);
  v76 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t)&v72 - v22;
  v23 = a1[3];
  v86 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  v24 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a3 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25), (v27 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v15, *(_QWORD *)(a3 + 56) + *(_QWORD *)(v16 + 72) * v26, AssociatedTypeWitness);
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  v30 = v82;
  v29 = v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v15, v28, 1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*((void (**)(char *, __int128 *))v74 + 1))(v15, v75);
    swift_checkMetadataState();
    (*(void (**)(void))(AssociatedConformanceWitness + 56))();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v30, v15, AssociatedTypeWitness);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    v32 = swift_checkMetadataState();
    v33 = v76;
    v34 = v85;
    v31(v30, v32, AssociatedConformanceWitness);
    if (v34)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v30, AssociatedTypeWitness);
      swift_unknownObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    }
    v85 = 0;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v30, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v84, v33, v81);
  }
  v35 = *(_QWORD *)(v29 + 24);
  v82 = *(char **)(v29 + 32);
  v83 = v35;
  v72 = *(_OWORD *)(v86 + 3);
  v36 = v72;
  v37 = __swift_project_boxed_opaque_existential_1(v86, v72);
  v38 = type metadata accessor for Optional();
  v74 = &v72;
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(_QWORD *)(v39 + 64);
  v41 = MEMORY[0x1E0C80A78](v38);
  v42 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
  v43 = *(_QWORD *)(v36 - 8);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v43 + 16))((char *)&v72 - v42, v37, v36, v41);
  v44 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))((char *)&v72 - v42, 0, 1, v36);
  v76 = (char *)&v72;
  MEMORY[0x1E0C80A78](v44);
  v46 = (char *)&v72 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = &v72;
  v48 = MEMORY[0x1E0C80A78](v47);
  (*(void (**)(char *, char *, uint64_t, __n128))(v39 + 16))((char *)&v72 - v42, (char *)&v72 - v42, v38, v48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))((char *)&v72 - v42, 1, v36) == 1)
  {
    v49 = *(void (**)(char *, uint64_t))(v39 + 8);
    v50 = v83;
    swift_unknownObjectRetain();
    v51 = (uint64_t)v82;
    swift_bridgeObjectRetain();
    v49((char *)&v72 - v42, v38);
    v49((char *)&v72 - v42, v38);
    v52 = v79;
    swift_retain();
    v54 = v85;
    v55 = v50;
    goto LABEL_18;
  }
  v56 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v56(v46, (char *)&v72 - v42, v36);
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 40) = v72;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v52 + 16));
  v56((char *)boxed_opaque_existential_1, v46, v36);
  v58 = *(void (**)(char *, uint64_t))(v39 + 8);
  v55 = v83;
  swift_unknownObjectRetain();
  v51 = (uint64_t)v82;
  swift_bridgeObjectRetain();
  v58((char *)&v72 - v42, v38);
  v59 = v79;
  *(_QWORD *)(v52 + 56) = v79;
  v54 = v85;
  if (v59 >> 62)
  {
    if (v59 >> 62 != 1)
    {
      v63 = 1;
      goto LABEL_17;
    }
    v60 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v60 = (uint64_t *)(v59 + 64);
  }
  v61 = *v60;
  result = swift_retain();
  v63 = v61 + 1;
  if (!__OFADD__(v61, 1))
  {
LABEL_17:
    *(_QWORD *)(v52 + 64) = v63;
LABEL_18:
    v64 = type metadata accessor for _PlistDecoder(0, v77, v78, v53);
    v65 = swift_allocObject();
    _PlistDecoder.init(referencing:options:codingPathNode:)(v55, v51, v52);
    if (v54)
    {
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v84, v81);
    }
    else
    {
      v68 = v81;
      v69 = type metadata accessor for _PlistDecodingStorage(0, v81, v66, v67);
      v70 = v84;
      specialized _PlistDecodingStorage.push(container:)(v84, v69);
      v71 = v73;
      v73[3] = v64;
      v71[4] = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDecoder<A>, v64);
      *v71 = v65;
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v70, v68);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
  }
  __break(1u);
  return result;
}

uint64_t _PlistKeyedDecodingContainer.superDecoder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD v14[5];

  v14[3] = &type metadata for _CodingKey;
  v14[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v12 = swift_allocObject();
  v14[0] = v12;
  *(_OWORD *)(v12 + 16) = xmmword_18206AAD0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  return _PlistKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

uint64_t _PlistKeyedDecodingContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19[5];

  v19[3] = a5;
  v19[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  return _PlistKeyedDecodingContainer._superDecoder(forKey:)(v19, a2, a3, a4, a6, a8, a9);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _JSONKeyedEncodingContainer.codingPath.getter(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return _PlistKeyedDecodingContainer.allKeys.getter(a1, *(_QWORD *)(v5 + 8), a3, *(_QWORD *)(a1 + 16), a5, *(_QWORD *)(a1 + 32));
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _PlistKeyedDecodingContainer.contains(_:)(a1, a2, *(_QWORD *)(v2 + 8));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, _PlistKeyedDecodingContainer.decode(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]) & 1;
}

void (*protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t *a2))(char *, uint64_t, uint64_t)
{
  uint64_t v2;

  return _PlistKeyedDecodingContainer.decode(_:forKey:)(a1, *(_QWORD *)v2, *(void (**)(char *, uint64_t, uint64_t))(v2 + 8), *(_QWORD *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return _PlistKeyedDecodingContainer.decode(_:forKey:)(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return _PlistKeyedDecodingContainer.decode(_:forKey:)(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))_PlistKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))_PlistKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v7;

  return a7(a1, a2, *v7, v7[1], v7[2], a5[2], a5[3], a3, a5[4], a5[5], a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_PlistKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _PlistKeyedDecodingContainer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return _PlistKeyedDecodingContainer.superDecoder()(*v2, v2[1], v2[2], *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_PlistKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

BOOL _PlistUnkeyedDecodingContainer.isAtEnd.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 48)) >= *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  v17 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer.Protocol);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (v5 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder))
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

uint64_t specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEA968];
  v17 = MEMORY[0x1E0DEA968];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEB418];
  v17 = MEMORY[0x1E0DEB418];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEDE70];
  v17 = MEMORY[0x1E0DEDE70];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt8.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEE068];
  v17 = MEMORY[0x1E0DEE068];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt16.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEDCE8];
  v17 = MEMORY[0x1E0DEDCE8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Never.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEAFA0];
  v17 = MEMORY[0x1E0DEAFA0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEB070];
  v17 = MEMORY[0x1E0DEB070];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEB188];
  v17 = MEMORY[0x1E0DEB188];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEDA70];
  v17 = MEMORY[0x1E0DEDA70];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEDB58];
  v17 = MEMORY[0x1E0DEDB58];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int16.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEDBC8];
  v17 = MEMORY[0x1E0DEDBC8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEDC60];
  v17 = MEMORY[0x1E0DEDC60];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEBB98];
  v17 = MEMORY[0x1E0DEBB98];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEE0F8];
  v17 = MEMORY[0x1E0DEE0F8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v5 = MEMORY[0x1E0DEE190];
  v17 = MEMORY[0x1E0DEE190];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt64.Type);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if (swift_dynamicCast())
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == v5)
    swift_bridgeObjectRelease();
  v6 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + *(int *)(a1 + 52)));
  v7 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
  v15 = &type metadata for _CodingKey;
  v16 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 40) = 2;
  v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v14, (uint64_t)&v6[5 * v9 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a2 = v5;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC460];
  v12 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

uint64_t _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  ValueMetadata *v18;
  unint64_t v19;
  uint64_t v20;

  v20 = a3;
  swift_getMetatypeMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  if ((swift_dynamicCast() & 1) != 0)
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == a3)
    swift_bridgeObjectRelease();
  v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v4 + *(int *)(a2 + 52)));
  v10 = *(_QWORD *)(v4 + *(int *)(a2 + 48));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
  v18 = &type metadata for _CodingKey;
  v19 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v13 = swift_allocObject();
  *(_QWORD *)&v17 = v13;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v10;
  *(_BYTE *)(v13 + 40) = 2;
  v9[2] = v12 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v17, (uint64_t)&v9[5 * v12 + 4]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a4 = a1;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v14 = *MEMORY[0x1E0DEC460];
  v15 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(a4, v14, v15);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _PlistUnkeyedDecodingContainer.decodeNil()()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  void (*v28)(char *, __n128);
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;

  v2 = v0;
  v65 = *(_QWORD *)(v0 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v64 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = v6;
  v74 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  MEMORY[0x1E0C80A78](v10);
  v76 = (char *)&v57 - v11;
  v68 = *(_QWORD *)(v9 - 8);
  v69 = v9;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v57 - v13;
  v75 = AssociatedConformanceWitness;
  v67 = AssociatedTypeWitness;
  v15 = v1;
  v16 = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v57 - v19;
  v21 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v25);
  v71 = (char *)&v57 - v27;
  v28 = *(void (**)(char *, __n128))(v18 + 16);
  v66 = &v15[*(int *)(v2 + 40)];
  v28(v20, v26);
  v70 = v21;
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v30 = v16;
  v31 = v29(v20, 1, v16);
  v72 = v18;
  if (v31 == 1)
  {
    v60 = v14;
    v61 = v24;
    v58 = *(void (**)(char *, uint64_t))(v18 + 8);
    v59 = v17;
    v58(v20, v17);
    v32 = v15;
    swift_getAssociatedTypeWitness();
    v33 = v2;
    v34 = swift_getAssociatedConformanceWitness();
    v35 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
    v36 = swift_checkMetadataState();
    v37 = v76;
    v35(v36, v34);
    v39 = v68;
    v38 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v37, 1, v69) == 1)
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v76, v63);
      v40 = v64;
      v41 = v65;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v64, v32, v33);
      type metadata accessor for DecodingError();
      v42 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v33, v43);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v33);
      v77 = v42;
      swift_willThrow();
      return v40 & 1;
    }
    v49 = v16;
    v50 = v60;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v60, v76, v38);
    v76 = v32;
    v40 = *(char **)(*(_QWORD *)v32 + 24);
    v51 = v75;
    v52 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 80);
    swift_unknownObjectRetain();
    v53 = swift_checkMetadataState();
    v44 = v61;
    v54 = v77;
    v52(v50, v53, v51);
    v77 = v54;
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v50, v38);
      swift_unknownObjectRelease();
      return v40 & 1;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v50, v38);
    swift_unknownObjectRelease();
    v56 = v66;
    v17 = v59;
    v58(v66, v59);
    v45 = v70;
    v30 = v49;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v56, v44, v49);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v56, 0, 1, v49);
    v2 = v33;
    v15 = v76;
  }
  else
  {
    v44 = v20;
    v45 = v70;
  }
  v46 = v71;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v71, v44, v30);
  LOBYTE(v40) = (*(uint64_t (**)(char *))(v74 + 40))(v46);
  v47 = v72;
  if ((v40 & 1) != 0)
  {
    ++*(_QWORD *)&v15[*(int *)(v2 + 48)];
    v48 = v66;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v66, v17);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v48, 1, 1, v30);
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v30);
  return v40 & 1;
}

uint64_t _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, __n128);
  int v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v70 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v69 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v78 = v5;
  v81 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v66 = *(_QWORD *)(v10 - 8);
  v67 = v10;
  MEMORY[0x1E0C80A78](v10);
  v72 = (char *)&v62 - v11;
  v74 = *(_QWORD *)(v9 - 8);
  v75 = v9;
  MEMORY[0x1E0C80A78](v12);
  v68 = (char *)&v62 - v13;
  v73 = AssociatedConformanceWitness;
  v82 = AssociatedTypeWitness;
  v14 = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v62 - v17;
  v19 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v23);
  v79 = (char *)&v62 - v25;
  v26 = a1;
  v27 = *(int *)(a1 + 40);
  v28 = v1;
  v29 = (char *)(v1 + v27);
  v30 = *(void (**)(char *, __n128))(v16 + 16);
  v71 = v29;
  v30(v18, v24);
  v76 = v14;
  v77 = v19;
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14);
  v80 = v16;
  if (v31 == 1)
  {
    v64 = v15;
    v65 = v22;
    v63 = *(void (**)(char *, uint64_t))(v16 + 8);
    v63(v18, v15);
    v32 = v73;
    swift_getAssociatedTypeWitness();
    v33 = swift_getAssociatedConformanceWitness();
    v34 = *(void (**)(uint64_t, uint64_t))(v33 + 16);
    v35 = swift_checkMetadataState();
    v36 = v72;
    v34(v35, v33);
    v38 = v74;
    v37 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v36, 1, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v67);
      v39 = v69;
      v32 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v28, v26);
      type metadata accessor for DecodingError();
      v40 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v26, v41);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v26);
      v83 = v40;
      swift_willThrow();
      return v32 & 1;
    }
    v53 = v68;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v68, v36, v37);
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 80);
    swift_unknownObjectRetain();
    v55 = swift_checkMetadataState();
    v56 = v65;
    v57 = v83;
    v54(v53, v55, v32);
    v83 = v57;
    if (v57)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v53, v37);
      swift_unknownObjectRelease();
      return v32 & 1;
    }
    v43 = v1;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v53, v37);
    swift_unknownObjectRelease();
    v60 = v71;
    v15 = v64;
    v63(v71, v64);
    v61 = v56;
    v44 = v76;
    v45 = v77;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v60, v61, v76);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v60, 0, 1, v44);
    v32 = v78;
    v42 = v61;
  }
  else
  {
    v42 = v18;
    v43 = v1;
    v44 = v76;
    v45 = v77;
    v32 = v78;
  }
  v46 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v79, v42, v44);
  v48 = v26 + 48;
  v47 = *(int *)(v26 + 48);
  v49 = *(_QWORD *)(v43 + v47);
  v50 = v83;
  v51 = specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(v46, *(_QWORD *)(v43 + *(int *)(v48 + 4)), v49, 0, 0, 2u, v81, v32);
  v83 = v50;
  v52 = v80;
  if (!v50)
  {
    LOBYTE(v32) = v51;
    *(_QWORD *)(v43 + v47) = v49 + 1;
    v58 = v71;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v71, v15);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v58, 1, 1, v44);
  }
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v44);
  return v32 & 1;
}

_QWORD *_PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(char *, __n128);
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t, _QWORD *);
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v63 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v62 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  MEMORY[0x1E0C80A78](v7);
  v66 = (char *)&v56 - v8;
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  MEMORY[0x1E0C80A78](v9);
  v59 = (char *)&v56 - v10;
  v72 = AssociatedTypeWitness;
  v73 = AssociatedConformanceWitness;
  v11 = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v56 - v14;
  v16 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v70 = (char *)&v56 - v22;
  v23 = (_QWORD *)a1;
  v24 = *(int *)(a1 + 40);
  v25 = v1;
  v26 = (_QWORD *)(v1 + v24);
  v27 = *(void (**)(char *, __n128))(v13 + 16);
  v64 = v26;
  v27(v15, v21);
  v69 = v16;
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v11);
  v65 = v12;
  v71 = v13;
  if (v28 == 1)
  {
    v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v58 = v19;
    v57(v15, v12);
    swift_getAssociatedTypeWitness();
    v29 = swift_getAssociatedConformanceWitness();
    v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    v31 = swift_checkMetadataState();
    v32 = v66;
    v30(v31, v29);
    v34 = v67;
    v33 = v68;
    v35 = (uint64_t)v23;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v32, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v61);
      v36 = v62;
      v23 = (_QWORD *)v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v25, v35);
      type metadata accessor for DecodingError();
      v37 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v35, v38);
      ((void (*)(char *, uint64_t))v23[1])(v36, v35);
      v74 = v37;
      swift_willThrow();
      return v23;
    }
    v48 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v56 = v1;
    v49 = v59;
    v48(v59, v32, v33);
    v23 = (_QWORD *)v73;
    v50 = *(void (**)(char *, uint64_t, _QWORD *))(v73 + 80);
    swift_unknownObjectRetain();
    v51 = swift_checkMetadataState();
    v52 = v74;
    v50(v49, v51, v23);
    v25 = v56;
    v74 = v52;
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v49, v33);
      swift_unknownObjectRelease();
      return v23;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v49, v33);
    swift_unknownObjectRelease();
    v23 = v64;
    v57((char *)v64, v65);
    v40 = v69;
    v55 = v58;
    (*(void (**)(_QWORD *, char *, uint64_t))(v69 + 16))(v23, v58, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v23, 0, 1, v11);
    v39 = v55;
  }
  else
  {
    v39 = v15;
    v40 = v69;
    v35 = (uint64_t)v23;
  }
  v41 = (uint64_t)v70;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v70, v39, v11);
  v42 = *(int *)(v35 + 48);
  v43 = *(_QWORD *)(v25 + *(int *)(v35 + 52));
  v44 = *(_QWORD *)(v25 + v42);
  v45 = v74;
  v46 = specialized _PlistDecoder.unwrapString<A>(from:for:_:)(v41, v43, v44, 0, 0, 2u);
  v74 = v45;
  v47 = v71;
  if (!v45)
  {
    v23 = v46;
    *(_QWORD *)(v25 + v42) = v44 + 1;
    v53 = v64;
    (*(void (**)(_QWORD *, uint64_t))(v47 + 8))(v64, v65);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v53, 1, 1, v11);
  }
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v11);
  return v23;
}

double _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, __n128);
  int v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v70 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v69 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  MEMORY[0x1E0C80A78](v8);
  v73 = (char *)&v64 - v9;
  v74 = *(_QWORD *)(v7 - 8);
  v75 = v7;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v64 - v11;
  v79 = AssociatedTypeWitness;
  v80 = AssociatedConformanceWitness;
  v13 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v64 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v22);
  v77 = (char *)&v64 - v24;
  v25 = a1;
  v26 = *(int *)(a1 + 40);
  v27 = v1;
  v28 = (char *)(v1 + v26);
  v30 = v29;
  v31 = *(void (**)(char *, __n128))(v15 + 16);
  v71 = v28;
  v31(v17, v23);
  v76 = v18;
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13);
  v72 = v30;
  v78 = v15;
  if (v32 == 1)
  {
    v65 = *(void (**)(char *, uint64_t))(v15 + 8);
    v66 = v21;
    v65(v17, v30);
    v33 = v25;
    swift_getAssociatedTypeWitness();
    v34 = swift_getAssociatedConformanceWitness();
    v35 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
    v36 = swift_checkMetadataState();
    v37 = v73;
    v35(v36, v34);
    v39 = v74;
    v38 = v75;
    v40 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v37, 1, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v37, v68);
      v42 = v69;
      v41 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v27, v33);
      type metadata accessor for DecodingError();
      v43 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v33, v44);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v33);
      v81 = v43;
      swift_willThrow();
      return v2;
    }
    v54 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v64 = v27;
    v55 = v12;
    v54(v12, v37, v38);
    v56 = v80;
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 80);
    swift_unknownObjectRetain();
    v58 = swift_checkMetadataState();
    v59 = v81;
    v57(v55, v58, v56);
    v27 = v64;
    v81 = v59;
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
      swift_unknownObjectRelease();
      return v2;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
    swift_unknownObjectRelease();
    v62 = v71;
    v65(v71, v72);
    v46 = v76;
    v63 = v66;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v62, v66, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v62, 0, 1, v13);
    v45 = v63;
  }
  else
  {
    v45 = v17;
    v46 = v76;
    v40 = v25;
  }
  v47 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v77, v45, v13);
  v49 = v40 + 48;
  v48 = *(int *)(v40 + 48);
  v50 = *(_QWORD *)(v27 + v48);
  v51 = v81;
  specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v47, *(_QWORD *)(v27 + *(int *)(v49 + 4)), v50, 0, 0, 2u);
  v81 = v51;
  v53 = v78;
  if (!v51)
  {
    v2 = v52;
    *(_QWORD *)(v27 + v48) = v50 + 1;
    v60 = v71;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v60, 1, 1, v13);
  }
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v13);
  return v2;
}

